
micro_ros_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d960  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f24  0801daf0  0801daf0  0001eaf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ea14  0801ea14  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801ea14  0801ea14  0001fa14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ea1c  0801ea1c  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801ea1c  0801ea1c  0001fa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ea28  0801ea28  0001fa28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b8  20000000  0801ea2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201b8  2**0
                  CONTENTS
 10 .bss          00012d14  200001b8  200001b8  000201b8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20012ecc  20012ecc  000201b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c0c3  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000064f5  00000000  00000000  0004c2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023a0  00000000  00000000  000527a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b91  00000000  00000000  00054b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c7d7  00000000  00000000  000566d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002db51  00000000  00000000  00062ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec8f8  00000000  00000000  000909f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000076  00000000  00000000  0017d2f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a4f0  00000000  00000000  0017d368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00187858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b8 	.word	0x200001b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801dad8 	.word	0x0801dad8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001bc 	.word	0x200001bc
 80001cc:	0801dad8 	.word	0x0801dad8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002be:	f000 b9b5 	b.w	800062c <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000354:	f000 b96a 	b.w	800062c <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	460c      	mov	r4, r1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d14e      	bne.n	800041a <__udivmoddi4+0xaa>
 800037c:	4694      	mov	ip, r2
 800037e:	458c      	cmp	ip, r1
 8000380:	4686      	mov	lr, r0
 8000382:	fab2 f282 	clz	r2, r2
 8000386:	d962      	bls.n	800044e <__udivmoddi4+0xde>
 8000388:	b14a      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038a:	f1c2 0320 	rsb	r3, r2, #32
 800038e:	4091      	lsls	r1, r2
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa0c fc02 	lsl.w	ip, ip, r2
 8000398:	4319      	orrs	r1, r3
 800039a:	fa00 fe02 	lsl.w	lr, r0, r2
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f f68c 	uxth.w	r6, ip
 80003a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb07 1114 	mls	r1, r7, r4, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb04 f106 	mul.w	r1, r4, r6
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003c6:	f080 8112 	bcs.w	80005ee <__udivmoddi4+0x27e>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 810f 	bls.w	80005ee <__udivmoddi4+0x27e>
 80003d0:	3c02      	subs	r4, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb1 f0f7 	udiv	r0, r1, r7
 80003de:	fb07 1110 	mls	r1, r7, r0, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb00 f606 	mul.w	r6, r0, r6
 80003ea:	429e      	cmp	r6, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x94>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003f6:	f080 80fc 	bcs.w	80005f2 <__udivmoddi4+0x282>
 80003fa:	429e      	cmp	r6, r3
 80003fc:	f240 80f9 	bls.w	80005f2 <__udivmoddi4+0x282>
 8000400:	4463      	add	r3, ip
 8000402:	3802      	subs	r0, #2
 8000404:	1b9b      	subs	r3, r3, r6
 8000406:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800040a:	2100      	movs	r1, #0
 800040c:	b11d      	cbz	r5, 8000416 <__udivmoddi4+0xa6>
 800040e:	40d3      	lsrs	r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	e9c5 3200 	strd	r3, r2, [r5]
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d905      	bls.n	800042a <__udivmoddi4+0xba>
 800041e:	b10d      	cbz	r5, 8000424 <__udivmoddi4+0xb4>
 8000420:	e9c5 0100 	strd	r0, r1, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	4608      	mov	r0, r1
 8000428:	e7f5      	b.n	8000416 <__udivmoddi4+0xa6>
 800042a:	fab3 f183 	clz	r1, r3
 800042e:	2900      	cmp	r1, #0
 8000430:	d146      	bne.n	80004c0 <__udivmoddi4+0x150>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d302      	bcc.n	800043c <__udivmoddi4+0xcc>
 8000436:	4290      	cmp	r0, r2
 8000438:	f0c0 80f0 	bcc.w	800061c <__udivmoddi4+0x2ac>
 800043c:	1a86      	subs	r6, r0, r2
 800043e:	eb64 0303 	sbc.w	r3, r4, r3
 8000442:	2001      	movs	r0, #1
 8000444:	2d00      	cmp	r5, #0
 8000446:	d0e6      	beq.n	8000416 <__udivmoddi4+0xa6>
 8000448:	e9c5 6300 	strd	r6, r3, [r5]
 800044c:	e7e3      	b.n	8000416 <__udivmoddi4+0xa6>
 800044e:	2a00      	cmp	r2, #0
 8000450:	f040 8090 	bne.w	8000574 <__udivmoddi4+0x204>
 8000454:	eba1 040c 	sub.w	r4, r1, ip
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa1f f78c 	uxth.w	r7, ip
 8000460:	2101      	movs	r1, #1
 8000462:	fbb4 f6f8 	udiv	r6, r4, r8
 8000466:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800046a:	fb08 4416 	mls	r4, r8, r6, r4
 800046e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000472:	fb07 f006 	mul.w	r0, r7, r6
 8000476:	4298      	cmp	r0, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x11c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x11a>
 8000484:	4298      	cmp	r0, r3
 8000486:	f200 80cd 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 800048a:	4626      	mov	r6, r4
 800048c:	1a1c      	subs	r4, r3, r0
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb4 f0f8 	udiv	r0, r4, r8
 8000496:	fb08 4410 	mls	r4, r8, r0, r4
 800049a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800049e:	fb00 f707 	mul.w	r7, r0, r7
 80004a2:	429f      	cmp	r7, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x148>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ae:	d202      	bcs.n	80004b6 <__udivmoddi4+0x146>
 80004b0:	429f      	cmp	r7, r3
 80004b2:	f200 80b0 	bhi.w	8000616 <__udivmoddi4+0x2a6>
 80004b6:	4620      	mov	r0, r4
 80004b8:	1bdb      	subs	r3, r3, r7
 80004ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004be:	e7a5      	b.n	800040c <__udivmoddi4+0x9c>
 80004c0:	f1c1 0620 	rsb	r6, r1, #32
 80004c4:	408b      	lsls	r3, r1
 80004c6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ca:	431f      	orrs	r7, r3
 80004cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004d0:	fa04 f301 	lsl.w	r3, r4, r1
 80004d4:	ea43 030c 	orr.w	r3, r3, ip
 80004d8:	40f4      	lsrs	r4, r6
 80004da:	fa00 f801 	lsl.w	r8, r0, r1
 80004de:	0c38      	lsrs	r0, r7, #16
 80004e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004e4:	fbb4 fef0 	udiv	lr, r4, r0
 80004e8:	fa1f fc87 	uxth.w	ip, r7
 80004ec:	fb00 441e 	mls	r4, r0, lr, r4
 80004f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f4:	fb0e f90c 	mul.w	r9, lr, ip
 80004f8:	45a1      	cmp	r9, r4
 80004fa:	fa02 f201 	lsl.w	r2, r2, r1
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x1a6>
 8000500:	193c      	adds	r4, r7, r4
 8000502:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000506:	f080 8084 	bcs.w	8000612 <__udivmoddi4+0x2a2>
 800050a:	45a1      	cmp	r9, r4
 800050c:	f240 8081 	bls.w	8000612 <__udivmoddi4+0x2a2>
 8000510:	f1ae 0e02 	sub.w	lr, lr, #2
 8000514:	443c      	add	r4, r7
 8000516:	eba4 0409 	sub.w	r4, r4, r9
 800051a:	fa1f f983 	uxth.w	r9, r3
 800051e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000522:	fb00 4413 	mls	r4, r0, r3, r4
 8000526:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800052a:	fb03 fc0c 	mul.w	ip, r3, ip
 800052e:	45a4      	cmp	ip, r4
 8000530:	d907      	bls.n	8000542 <__udivmoddi4+0x1d2>
 8000532:	193c      	adds	r4, r7, r4
 8000534:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000538:	d267      	bcs.n	800060a <__udivmoddi4+0x29a>
 800053a:	45a4      	cmp	ip, r4
 800053c:	d965      	bls.n	800060a <__udivmoddi4+0x29a>
 800053e:	3b02      	subs	r3, #2
 8000540:	443c      	add	r4, r7
 8000542:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000546:	fba0 9302 	umull	r9, r3, r0, r2
 800054a:	eba4 040c 	sub.w	r4, r4, ip
 800054e:	429c      	cmp	r4, r3
 8000550:	46ce      	mov	lr, r9
 8000552:	469c      	mov	ip, r3
 8000554:	d351      	bcc.n	80005fa <__udivmoddi4+0x28a>
 8000556:	d04e      	beq.n	80005f6 <__udivmoddi4+0x286>
 8000558:	b155      	cbz	r5, 8000570 <__udivmoddi4+0x200>
 800055a:	ebb8 030e 	subs.w	r3, r8, lr
 800055e:	eb64 040c 	sbc.w	r4, r4, ip
 8000562:	fa04 f606 	lsl.w	r6, r4, r6
 8000566:	40cb      	lsrs	r3, r1
 8000568:	431e      	orrs	r6, r3
 800056a:	40cc      	lsrs	r4, r1
 800056c:	e9c5 6400 	strd	r6, r4, [r5]
 8000570:	2100      	movs	r1, #0
 8000572:	e750      	b.n	8000416 <__udivmoddi4+0xa6>
 8000574:	f1c2 0320 	rsb	r3, r2, #32
 8000578:	fa20 f103 	lsr.w	r1, r0, r3
 800057c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000580:	fa24 f303 	lsr.w	r3, r4, r3
 8000584:	4094      	lsls	r4, r2
 8000586:	430c      	orrs	r4, r1
 8000588:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800058c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000590:	fa1f f78c 	uxth.w	r7, ip
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3110 	mls	r1, r8, r0, r3
 800059c:	0c23      	lsrs	r3, r4, #16
 800059e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a2:	fb00 f107 	mul.w	r1, r0, r7
 80005a6:	4299      	cmp	r1, r3
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x24c>
 80005aa:	eb1c 0303 	adds.w	r3, ip, r3
 80005ae:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005b2:	d22c      	bcs.n	800060e <__udivmoddi4+0x29e>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	d92a      	bls.n	800060e <__udivmoddi4+0x29e>
 80005b8:	3802      	subs	r0, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	1a5b      	subs	r3, r3, r1
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005c4:	fb08 3311 	mls	r3, r8, r1, r3
 80005c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005cc:	fb01 f307 	mul.w	r3, r1, r7
 80005d0:	42a3      	cmp	r3, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x276>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005dc:	d213      	bcs.n	8000606 <__udivmoddi4+0x296>
 80005de:	42a3      	cmp	r3, r4
 80005e0:	d911      	bls.n	8000606 <__udivmoddi4+0x296>
 80005e2:	3902      	subs	r1, #2
 80005e4:	4464      	add	r4, ip
 80005e6:	1ae4      	subs	r4, r4, r3
 80005e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005ec:	e739      	b.n	8000462 <__udivmoddi4+0xf2>
 80005ee:	4604      	mov	r4, r0
 80005f0:	e6f0      	b.n	80003d4 <__udivmoddi4+0x64>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e706      	b.n	8000404 <__udivmoddi4+0x94>
 80005f6:	45c8      	cmp	r8, r9
 80005f8:	d2ae      	bcs.n	8000558 <__udivmoddi4+0x1e8>
 80005fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000602:	3801      	subs	r0, #1
 8000604:	e7a8      	b.n	8000558 <__udivmoddi4+0x1e8>
 8000606:	4631      	mov	r1, r6
 8000608:	e7ed      	b.n	80005e6 <__udivmoddi4+0x276>
 800060a:	4603      	mov	r3, r0
 800060c:	e799      	b.n	8000542 <__udivmoddi4+0x1d2>
 800060e:	4630      	mov	r0, r6
 8000610:	e7d4      	b.n	80005bc <__udivmoddi4+0x24c>
 8000612:	46d6      	mov	lr, sl
 8000614:	e77f      	b.n	8000516 <__udivmoddi4+0x1a6>
 8000616:	4463      	add	r3, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e74d      	b.n	80004b8 <__udivmoddi4+0x148>
 800061c:	4606      	mov	r6, r0
 800061e:	4623      	mov	r3, r4
 8000620:	4608      	mov	r0, r1
 8000622:	e70f      	b.n	8000444 <__udivmoddi4+0xd4>
 8000624:	3e02      	subs	r6, #2
 8000626:	4463      	add	r3, ip
 8000628:	e730      	b.n	800048c <__udivmoddi4+0x11c>
 800062a:	bf00      	nop

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800063c:	f00d fc54 	bl	800dee8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000640:	4b5a      	ldr	r3, [pc, #360]	@ (80007ac <pvPortMallocMicroROS+0x17c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000648:	f000 f986 	bl	8000958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800064c:	4b58      	ldr	r3, [pc, #352]	@ (80007b0 <pvPortMallocMicroROS+0x180>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4013      	ands	r3, r2
 8000654:	2b00      	cmp	r3, #0
 8000656:	f040 8090 	bne.w	800077a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d01e      	beq.n	800069e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000660:	2208      	movs	r2, #8
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	2b00      	cmp	r3, #0
 8000670:	d015      	beq.n	800069e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f023 0307 	bic.w	r3, r3, #7
 8000678:	3308      	adds	r3, #8
 800067a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	2b00      	cmp	r3, #0
 8000684:	d00b      	beq.n	800069e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800068a:	f383 8811 	msr	BASEPRI, r3
 800068e:	f3bf 8f6f 	isb	sy
 8000692:	f3bf 8f4f 	dsb	sy
 8000696:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	e7fd      	b.n	800069a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d06a      	beq.n	800077a <pvPortMallocMicroROS+0x14a>
 80006a4:	4b43      	ldr	r3, [pc, #268]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d865      	bhi.n	800077a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006ae:	4b42      	ldr	r3, [pc, #264]	@ (80007b8 <pvPortMallocMicroROS+0x188>)
 80006b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006b2:	4b41      	ldr	r3, [pc, #260]	@ (80007b8 <pvPortMallocMicroROS+0x188>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006b8:	e004      	b.n	80006c4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80006ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d903      	bls.n	80006d6 <pvPortMallocMicroROS+0xa6>
 80006ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f1      	bne.n	80006ba <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006d6:	4b35      	ldr	r3, [pc, #212]	@ (80007ac <pvPortMallocMicroROS+0x17c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006dc:	429a      	cmp	r2, r3
 80006de:	d04c      	beq.n	800077a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006e0:	6a3b      	ldr	r3, [r7, #32]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2208      	movs	r2, #8
 80006e6:	4413      	add	r3, r2
 80006e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	6a3b      	ldr	r3, [r7, #32]
 80006f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80006f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f4:	685a      	ldr	r2, [r3, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	1ad2      	subs	r2, r2, r3
 80006fa:	2308      	movs	r3, #8
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	429a      	cmp	r2, r3
 8000700:	d920      	bls.n	8000744 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	f003 0307 	and.w	r3, r3, #7
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00b      	beq.n	800072c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000718:	f383 8811 	msr	BASEPRI, r3
 800071c:	f3bf 8f6f 	isb	sy
 8000720:	f3bf 8f4f 	dsb	sy
 8000724:	613b      	str	r3, [r7, #16]
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800072c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072e:	685a      	ldr	r2, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	1ad2      	subs	r2, r2, r3
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800073e:	69b8      	ldr	r0, [r7, #24]
 8000740:	f000 f96c 	bl	8000a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	4a19      	ldr	r2, [pc, #100]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 8000750:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <pvPortMallocMicroROS+0x18c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	429a      	cmp	r2, r3
 800075c:	d203      	bcs.n	8000766 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a16      	ldr	r2, [pc, #88]	@ (80007bc <pvPortMallocMicroROS+0x18c>)
 8000764:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <pvPortMallocMicroROS+0x180>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	431a      	orrs	r2, r3
 8000770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000772:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800077a:	f00d fbc3 	bl	800df04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00b      	beq.n	80007a0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800078c:	f383 8811 	msr	BASEPRI, r3
 8000790:	f3bf 8f6f 	isb	sy
 8000794:	f3bf 8f4f 	dsb	sy
 8000798:	60fb      	str	r3, [r7, #12]
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80007a0:	69fb      	ldr	r3, [r7, #28]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3728      	adds	r7, #40	@ 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200061dc 	.word	0x200061dc
 80007b0:	200061e8 	.word	0x200061e8
 80007b4:	200061e0 	.word	0x200061e0
 80007b8:	200061d4 	.word	0x200061d4
 80007bc:	200061e4 	.word	0x200061e4

080007c0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d04a      	beq.n	8000868 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007d2:	2308      	movs	r3, #8
 80007d4:	425b      	negs	r3, r3
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	685a      	ldr	r2, [r3, #4]
 80007e4:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <vPortFreeMicroROS+0xb0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4013      	ands	r3, r2
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10b      	bne.n	8000806 <vPortFreeMicroROS+0x46>
	__asm volatile
 80007ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007f2:	f383 8811 	msr	BASEPRI, r3
 80007f6:	f3bf 8f6f 	isb	sy
 80007fa:	f3bf 8f4f 	dsb	sy
 80007fe:	60fb      	str	r3, [r7, #12]
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	e7fd      	b.n	8000802 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00b      	beq.n	8000826 <vPortFreeMicroROS+0x66>
	__asm volatile
 800080e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000812:	f383 8811 	msr	BASEPRI, r3
 8000816:	f3bf 8f6f 	isb	sy
 800081a:	f3bf 8f4f 	dsb	sy
 800081e:	60bb      	str	r3, [r7, #8]
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	e7fd      	b.n	8000822 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <vPortFreeMicroROS+0xb0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4013      	ands	r3, r2
 8000830:	2b00      	cmp	r3, #0
 8000832:	d019      	beq.n	8000868 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d115      	bne.n	8000868 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <vPortFreeMicroROS+0xb0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	43db      	mvns	r3, r3
 8000846:	401a      	ands	r2, r3
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800084c:	f00d fb4c 	bl	800dee8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <vPortFreeMicroROS+0xb4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4413      	add	r3, r2
 800085a:	4a06      	ldr	r2, [pc, #24]	@ (8000874 <vPortFreeMicroROS+0xb4>)
 800085c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800085e:	6938      	ldr	r0, [r7, #16]
 8000860:	f000 f8dc 	bl	8000a1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000864:	f00d fb4e 	bl	800df04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200061e8 	.word	0x200061e8
 8000874:	200061e0 	.word	0x200061e0

08000878 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000884:	2308      	movs	r3, #8
 8000886:	425b      	negs	r3, r3
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	4413      	add	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <getBlockSize+0x38>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	43db      	mvns	r3, r3
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]

	return count;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	200061e8 	.word	0x200061e8

080008b4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008be:	f00d fb13 	bl	800dee8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	f7ff feb4 	bl	8000630 <pvPortMallocMicroROS>
 80008c8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d017      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d014      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffce 	bl	8000878 <getBlockSize>
 80008dc:	4603      	mov	r3, r0
 80008de:	2208      	movs	r2, #8
 80008e0:	1a9b      	subs	r3, r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d201      	bcs.n	80008f0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	68b8      	ldr	r0, [r7, #8]
 80008f6:	f01c fab0 	bl	801ce5a <memcpy>

		vPortFreeMicroROS(pv);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff60 	bl	80007c0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000900:	f00d fb00 	bl	800df04 <xTaskResumeAll>

	return newmem;
 8000904:	68bb      	ldr	r3, [r7, #8]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000918:	f00d fae6 	bl	800dee8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	fb02 f303 	mul.w	r3, r2, r3
 8000924:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff fe82 	bl	8000630 <pvPortMallocMicroROS>
 800092c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000932:	e004      	b.n	800093e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	613a      	str	r2, [r7, #16]
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	617a      	str	r2, [r7, #20]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f5      	bne.n	8000934 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000948:	f00d fadc 	bl	800df04 <xTaskResumeAll>
  	return mem;
 800094c:	68fb      	ldr	r3, [r7, #12]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800095e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000964:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <prvHeapInit+0xac>)
 8000966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00c      	beq.n	800098c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3307      	adds	r3, #7
 8000976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f023 0307 	bic.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	4a1f      	ldr	r2, [pc, #124]	@ (8000a04 <prvHeapInit+0xac>)
 8000988:	4413      	add	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000990:	4a1d      	ldr	r2, [pc, #116]	@ (8000a08 <prvHeapInit+0xb0>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000996:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <prvHeapInit+0xb0>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	4413      	add	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009a4:	2208      	movs	r2, #8
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	1a9b      	subs	r3, r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f023 0307 	bic.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <prvHeapInit+0xb4>)
 80009b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <prvHeapInit+0xb4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <prvHeapInit+0xb4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	1ad2      	subs	r2, r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <prvHeapInit+0xb4>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <prvHeapInit+0xb8>)
 80009e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4a09      	ldr	r2, [pc, #36]	@ (8000a14 <prvHeapInit+0xbc>)
 80009ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <prvHeapInit+0xc0>)
 80009f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	200001d4 	.word	0x200001d4
 8000a08:	200061d4 	.word	0x200061d4
 8000a0c:	200061dc 	.word	0x200061dc
 8000a10:	200061e4 	.word	0x200061e4
 8000a14:	200061e0 	.word	0x200061e0
 8000a18:	200061e8 	.word	0x200061e8

08000a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a24:	4b28      	ldr	r3, [pc, #160]	@ (8000ac8 <prvInsertBlockIntoFreeList+0xac>)
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e002      	b.n	8000a30 <prvInsertBlockIntoFreeList+0x14>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d8f7      	bhi.n	8000a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4413      	add	r3, r2
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d108      	bne.n	8000a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	441a      	add	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	441a      	add	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d118      	bne.n	8000aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d00d      	beq.n	8000a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	441a      	add	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e008      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e003      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d002      	beq.n	8000aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	200061d4 	.word	0x200061d4
 8000acc:	200061dc 	.word	0x200061dc

08000ad0 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__          // GCC / arm-none-eabi-gcc
int __io_putchar(int ch)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ad8:	1d39      	adds	r1, r7, #4
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4803      	ldr	r0, [pc, #12]	@ (8000af0 <__io_putchar+0x20>)
 8000ae2:	f006 fffb 	bl	8007adc <HAL_UART_Transmit>
    return ch;
 8000ae6:	687b      	ldr	r3, [r7, #4]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200062e0 	.word	0x200062e0

08000af4 <lcd_send_cmd>:
int now=0;
char MonitorTset[100];
SemaphoreHandle_t i2cMutex;

void lcd_send_cmd(char cmd)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
//	xSemaphoreTake(i2cMutex, portMAX_DELAY);

	char data_h,data_l;
	uint8_t frame_data[4];
	data_h = (cmd&0xf0);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f023 030f 	bic.w	r3, r3, #15
 8000b04:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd <<4)&0xf0);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	011b      	lsls	r3, r3, #4
 8000b0a:	73bb      	strb	r3, [r7, #14]
	frame_data[0] = data_h | 0x0C;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	f043 030c 	orr.w	r3, r3, #12
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	723b      	strb	r3, [r7, #8]
	frame_data[1] = data_h | 0x08;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	727b      	strb	r3, [r7, #9]
	frame_data[2] = data_l | 0x0C;
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	f043 030c 	orr.w	r3, r3, #12
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	72bb      	strb	r3, [r7, #10]
	frame_data[3] = data_l | 0x08;
 8000b2a:	7bbb      	ldrb	r3, [r7, #14]
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *)frame_data,4,0x100);
 8000b34:	f107 0208 	add.w	r2, r7, #8
 8000b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2304      	movs	r3, #4
 8000b40:	214e      	movs	r1, #78	@ 0x4e
 8000b42:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <lcd_send_cmd+0x5c>)
 8000b44:	f004 fd22 	bl	800558c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1);
//	xSemaphoreGive(i2cMutex);
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200061ec 	.word	0x200061ec

08000b54 <lcd_send_data>:

void lcd_send_data(char data)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	char data_h,data_l;
	uint8_t frame_data[4];
	data_h = (data&0xf0);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f023 030f 	bic.w	r3, r3, #15
 8000b64:	73fb      	strb	r3, [r7, #15]
	data_l = ((data <<4)&0xf0);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	011b      	lsls	r3, r3, #4
 8000b6a:	73bb      	strb	r3, [r7, #14]
	frame_data[0] = data_h | 0x0D;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	f043 030d 	orr.w	r3, r3, #13
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	723b      	strb	r3, [r7, #8]
	frame_data[1] = data_h | 0x09;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	f043 0309 	orr.w	r3, r3, #9
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	727b      	strb	r3, [r7, #9]
	frame_data[2] = data_l | 0x0D;
 8000b80:	7bbb      	ldrb	r3, [r7, #14]
 8000b82:	f043 030d 	orr.w	r3, r3, #13
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	72bb      	strb	r3, [r7, #10]
	frame_data[3] = data_l | 0x09;
 8000b8a:	7bbb      	ldrb	r3, [r7, #14]
 8000b8c:	f043 0309 	orr.w	r3, r3, #9
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *)frame_data,4,0x100);
 8000b94:	f107 0208 	add.w	r2, r7, #8
 8000b98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	214e      	movs	r1, #78	@ 0x4e
 8000ba2:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <lcd_send_data+0x5c>)
 8000ba4:	f004 fcf2 	bl	800558c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1);
}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200061ec 	.word	0x200061ec

08000bb4 <lcd_clear>:

void lcd_clear()
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01); // clear display
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff ff9b 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f001 fb96 	bl	80022f0 <HAL_Delay>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <lcd_Init>:


void lcd_Init()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	HAL_Delay(50); // 8-bit initialization start
 8000bcc:	2032      	movs	r0, #50	@ 0x32
 8000bce:	f001 fb8f 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000bd2:	2030      	movs	r0, #48	@ 0x30
 8000bd4:	f7ff ff8e 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(5);
 8000bd8:	2005      	movs	r0, #5
 8000bda:	f001 fb89 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000bde:	2030      	movs	r0, #48	@ 0x30
 8000be0:	f7ff ff88 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f001 fb83 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000bea:	2030      	movs	r0, #48	@ 0x30
 8000bec:	f7ff ff82 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(10);
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f001 fb7d 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd(0x20);
 8000bf6:	2020      	movs	r0, #32
 8000bf8:	f7ff ff7c 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(10); // 8-bit initialization finish
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	f001 fb77 	bl	80022f0 <HAL_Delay>

	lcd_send_cmd(0x28);		//function set
 8000c02:	2028      	movs	r0, #40	@ 0x28
 8000c04:	f7ff ff76 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f001 fb71 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd(0x08);		//Display on/off
 8000c0e:	2008      	movs	r0, #8
 8000c10:	f7ff ff70 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f001 fb6b 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd(0x01);		//clear display
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff ff6a 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f001 fb65 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd(0x06);		//Enter mode set
 8000c26:	2006      	movs	r0, #6
 8000c28:	f7ff ff64 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f001 fb5f 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd(0x0C);		//Display on/off
 8000c32:	200c      	movs	r0, #12
 8000c34:	f7ff ff5e 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f001 fb59 	bl	80022f0 <HAL_Delay>

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
	while(*str)
 8000c4a:	e006      	b.n	8000c5a <lcd_send_string+0x18>
	{
		lcd_send_data(*str++);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff7d 	bl	8000b54 <lcd_send_data>
	while(*str)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1f4      	bne.n	8000c4c <lcd_send_string+0xa>
	}
	HAL_Delay(1);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f001 fb44 	bl	80022f0 <HAL_Delay>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <lcd_put_cur>:

void lcd_put_cur(uint8_t row,uint8_t col) // the location on the lcd screen
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	460a      	mov	r2, r1
 8000c7a:	71fb      	strb	r3, [r7, #7]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	71bb      	strb	r3, [r7, #6]
	lcd_send_cmd(0x80 | (col + (0x40 * row)));
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	019b      	lsls	r3, r3, #6
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	4413      	add	r3, r2
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff2c 	bl	8000af4 <lcd_send_cmd>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <I2C_Scan>:

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b094      	sub	sp, #80	@ 0x50
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    char msg[64];
    for (uint8_t addr = 1; addr < 127; addr++) {
 8000cac:	2301      	movs	r3, #1
 8000cae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000cb2:	e028      	b.n	8000d06 <I2C_Scan+0x62>
        if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK) {
 8000cb4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	b299      	uxth	r1, r3
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f004 fd60 	bl	8005788 <HAL_I2C_IsDeviceReady>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d116      	bne.n	8000cfc <I2C_Scan+0x58>
            sprintf(msg, "Found device at 0x%02X\r\n", addr << 1);
 8000cce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000cd2:	005a      	lsls	r2, r3, #1
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	490f      	ldr	r1, [pc, #60]	@ (8000d18 <I2C_Scan+0x74>)
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f01b fe9a 	bl	801ca14 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xffff);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fa7d 	bl	80001e4 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	f107 010c 	add.w	r1, r7, #12
 8000cf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cf6:	4809      	ldr	r0, [pc, #36]	@ (8000d1c <I2C_Scan+0x78>)
 8000cf8:	f006 fef0 	bl	8007adc <HAL_UART_Transmit>
    for (uint8_t addr = 1; addr < 127; addr++) {
 8000cfc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d00:	3301      	adds	r3, #1
 8000d02:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000d06:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d0a:	2b7e      	cmp	r3, #126	@ 0x7e
 8000d0c:	d9d2      	bls.n	8000cb4 <I2C_Scan+0x10>
        }
    }
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	3750      	adds	r7, #80	@ 0x50
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	0801dafc 	.word	0x0801dafc
 8000d1c:	200062e0 	.word	0x200062e0

08000d20 <incomingImpulse>:

void incomingImpulse() {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	for (;;) {
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0) {
 8000d24:	2101      	movs	r1, #1
 8000d26:	480b      	ldr	r0, [pc, #44]	@ (8000d54 <incomingImpulse+0x34>)
 8000d28:	f002 f986 	bl	8003038 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f8      	bne.n	8000d24 <incomingImpulse+0x4>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0){}
 8000d32:	bf00      	nop
 8000d34:	2101      	movs	r1, #1
 8000d36:	4807      	ldr	r0, [pc, #28]	@ (8000d54 <incomingImpulse+0x34>)
 8000d38:	f002 f97e 	bl	8003038 <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f8      	beq.n	8000d34 <incomingImpulse+0x14>
			impulse = impulse + 1;
 8000d42:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <incomingImpulse+0x38>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	4a03      	ldr	r2, [pc, #12]	@ (8000d58 <incomingImpulse+0x38>)
 8000d4a:	6013      	str	r3, [r2, #0]
			i = 0;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	@ (8000d5c <incomingImpulse+0x3c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0) {
 8000d52:	e7e7      	b.n	8000d24 <incomingImpulse+0x4>
 8000d54:	40020000 	.word	0x40020000
 8000d58:	200063f4 	.word	0x200063f4
 8000d5c:	200063f0 	.word	0x200063f0

08000d60 <COIN_Task>:
		}
	}
}

void COIN_Task() {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af02      	add	r7, sp, #8
  // put your main code here, to run repeatedly:

	memset(MonitorTset,'\0',sizeof(MonitorTset));
 8000d66:	2264      	movs	r2, #100	@ 0x64
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4889      	ldr	r0, [pc, #548]	@ (8000f90 <COIN_Task+0x230>)
 8000d6c:	f01b ffac 	bl	801ccc8 <memset>
	I2C_Scan(&hi2c1);
 8000d70:	4888      	ldr	r0, [pc, #544]	@ (8000f94 <COIN_Task+0x234>)
 8000d72:	f7ff ff97 	bl	8000ca4 <I2C_Scan>
	for (;;) {

	 if (lcd_need_refresh) {
 8000d76:	4b88      	ldr	r3, [pc, #544]	@ (8000f98 <COIN_Task+0x238>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d012      	beq.n	8000da6 <COIN_Task+0x46>
			lcd_need_refresh = false;
 8000d80:	4b85      	ldr	r3, [pc, #532]	@ (8000f98 <COIN_Task+0x238>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8000d86:	f7ff ff15 	bl	8000bb4 <lcd_clear>
			lcd_put_cur(0, 0);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff ff6f 	bl	8000c70 <lcd_put_cur>
			lcd_send_string("Money reset!");
 8000d92:	4882      	ldr	r0, [pc, #520]	@ (8000f9c <COIN_Task+0x23c>)
 8000d94:	f7ff ff55 	bl	8000c42 <lcd_send_string>
			lcd_put_cur(1, 0);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff ff68 	bl	8000c70 <lcd_put_cur>
			lcd_send_string("Total = 0");
 8000da0:	487f      	ldr	r0, [pc, #508]	@ (8000fa0 <COIN_Task+0x240>)
 8000da2:	f7ff ff4e 	bl	8000c42 <lcd_send_string>
		}

	  i = i + 1;
 8000da6:	4b7f      	ldr	r3, [pc, #508]	@ (8000fa4 <COIN_Task+0x244>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	4a7d      	ldr	r2, [pc, #500]	@ (8000fa4 <COIN_Task+0x244>)
 8000dae:	6013      	str	r3, [r2, #0]

	  if (i >= 5 && impulse == 1){ // 10 dollar
 8000db0:	4b7c      	ldr	r3, [pc, #496]	@ (8000fa4 <COIN_Task+0x244>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	dd47      	ble.n	8000e48 <COIN_Task+0xe8>
 8000db8:	4b7b      	ldr	r3, [pc, #492]	@ (8000fa8 <COIN_Task+0x248>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d143      	bne.n	8000e48 <COIN_Task+0xe8>
		total = total + 10;
 8000dc0:	4b7a      	ldr	r3, [pc, #488]	@ (8000fac <COIN_Task+0x24c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	330a      	adds	r3, #10
 8000dc6:	4a79      	ldr	r2, [pc, #484]	@ (8000fac <COIN_Task+0x24c>)
 8000dc8:	6013      	str	r3, [r2, #0]
		now = now + 10;
 8000dca:	4b79      	ldr	r3, [pc, #484]	@ (8000fb0 <COIN_Task+0x250>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	330a      	adds	r3, #10
 8000dd0:	4a77      	ldr	r2, [pc, #476]	@ (8000fb0 <COIN_Task+0x250>)
 8000dd2:	6013      	str	r3, [r2, #0]

		while (day <= now){
 8000dd4:	e00b      	b.n	8000dee <COIN_Task+0x8e>
		  now = now - day;
 8000dd6:	4b76      	ldr	r3, [pc, #472]	@ (8000fb0 <COIN_Task+0x250>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4b76      	ldr	r3, [pc, #472]	@ (8000fb4 <COIN_Task+0x254>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	4a73      	ldr	r2, [pc, #460]	@ (8000fb0 <COIN_Task+0x250>)
 8000de2:	6013      	str	r3, [r2, #0]
		  day = day + 1;
 8000de4:	4b73      	ldr	r3, [pc, #460]	@ (8000fb4 <COIN_Task+0x254>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a72      	ldr	r2, [pc, #456]	@ (8000fb4 <COIN_Task+0x254>)
 8000dec:	6013      	str	r3, [r2, #0]
		while (day <= now){
 8000dee:	4b71      	ldr	r3, [pc, #452]	@ (8000fb4 <COIN_Task+0x254>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b6f      	ldr	r3, [pc, #444]	@ (8000fb0 <COIN_Task+0x250>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	dded      	ble.n	8000dd6 <COIN_Task+0x76>
		}

		// uart
		sprintf(MonitorTset,"The day is %d. Today already saved %d. The total value is %d.\n\r",day, now, total);
 8000dfa:	4b6e      	ldr	r3, [pc, #440]	@ (8000fb4 <COIN_Task+0x254>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4b6c      	ldr	r3, [pc, #432]	@ (8000fb0 <COIN_Task+0x250>)
 8000e00:	6819      	ldr	r1, [r3, #0]
 8000e02:	4b6a      	ldr	r3, [pc, #424]	@ (8000fac <COIN_Task+0x24c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	496b      	ldr	r1, [pc, #428]	@ (8000fb8 <COIN_Task+0x258>)
 8000e0c:	4860      	ldr	r0, [pc, #384]	@ (8000f90 <COIN_Task+0x230>)
 8000e0e:	f01b fe01 	bl	801ca14 <siprintf>
//		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);

		lcd_clear();
 8000e12:	f7ff fecf 	bl	8000bb4 <lcd_clear>
		lcd_put_cur(0,0);
 8000e16:	2100      	movs	r1, #0
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff ff29 	bl	8000c70 <lcd_put_cur>
		lcd_send_string("Insert 10 dollar.");
 8000e1e:	4867      	ldr	r0, [pc, #412]	@ (8000fbc <COIN_Task+0x25c>)
 8000e20:	f7ff ff0f 	bl	8000c42 <lcd_send_string>
		lcd_put_cur(1,0);
 8000e24:	2100      	movs	r1, #0
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff ff22 	bl	8000c70 <lcd_put_cur>
		sprintf(MonitorTset,"Total value is %d", total);
 8000e2c:	4b5f      	ldr	r3, [pc, #380]	@ (8000fac <COIN_Task+0x24c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4963      	ldr	r1, [pc, #396]	@ (8000fc0 <COIN_Task+0x260>)
 8000e34:	4856      	ldr	r0, [pc, #344]	@ (8000f90 <COIN_Task+0x230>)
 8000e36:	f01b fded 	bl	801ca14 <siprintf>
		lcd_send_string(MonitorTset);
 8000e3a:	4855      	ldr	r0, [pc, #340]	@ (8000f90 <COIN_Task+0x230>)
 8000e3c:	f7ff ff01 	bl	8000c42 <lcd_send_string>

		impulse = 0;
 8000e40:	4b59      	ldr	r3, [pc, #356]	@ (8000fa8 <COIN_Task+0x248>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e096      	b.n	8000f76 <COIN_Task+0x216>
	  }
	  else if (i >= 5 && impulse == 2){ // 5 dollar
 8000e48:	4b56      	ldr	r3, [pc, #344]	@ (8000fa4 <COIN_Task+0x244>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	dd47      	ble.n	8000ee0 <COIN_Task+0x180>
 8000e50:	4b55      	ldr	r3, [pc, #340]	@ (8000fa8 <COIN_Task+0x248>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d143      	bne.n	8000ee0 <COIN_Task+0x180>
		total = total + 5;
 8000e58:	4b54      	ldr	r3, [pc, #336]	@ (8000fac <COIN_Task+0x24c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3305      	adds	r3, #5
 8000e5e:	4a53      	ldr	r2, [pc, #332]	@ (8000fac <COIN_Task+0x24c>)
 8000e60:	6013      	str	r3, [r2, #0]
		now = now + 5;
 8000e62:	4b53      	ldr	r3, [pc, #332]	@ (8000fb0 <COIN_Task+0x250>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	3305      	adds	r3, #5
 8000e68:	4a51      	ldr	r2, [pc, #324]	@ (8000fb0 <COIN_Task+0x250>)
 8000e6a:	6013      	str	r3, [r2, #0]

		while(day <= now){
 8000e6c:	e00b      	b.n	8000e86 <COIN_Task+0x126>
		  now = now - day;
 8000e6e:	4b50      	ldr	r3, [pc, #320]	@ (8000fb0 <COIN_Task+0x250>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b50      	ldr	r3, [pc, #320]	@ (8000fb4 <COIN_Task+0x254>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4a4d      	ldr	r2, [pc, #308]	@ (8000fb0 <COIN_Task+0x250>)
 8000e7a:	6013      	str	r3, [r2, #0]
		  day = day + 1;
 8000e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8000fb4 <COIN_Task+0x254>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	4a4c      	ldr	r2, [pc, #304]	@ (8000fb4 <COIN_Task+0x254>)
 8000e84:	6013      	str	r3, [r2, #0]
		while(day <= now){
 8000e86:	4b4b      	ldr	r3, [pc, #300]	@ (8000fb4 <COIN_Task+0x254>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b49      	ldr	r3, [pc, #292]	@ (8000fb0 <COIN_Task+0x250>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	dded      	ble.n	8000e6e <COIN_Task+0x10e>
		}

		sprintf(MonitorTset,"The day is %d. Today already saved %d. The total value is %d.\n\r",day, now, total);
 8000e92:	4b48      	ldr	r3, [pc, #288]	@ (8000fb4 <COIN_Task+0x254>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b46      	ldr	r3, [pc, #280]	@ (8000fb0 <COIN_Task+0x250>)
 8000e98:	6819      	ldr	r1, [r3, #0]
 8000e9a:	4b44      	ldr	r3, [pc, #272]	@ (8000fac <COIN_Task+0x24c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4945      	ldr	r1, [pc, #276]	@ (8000fb8 <COIN_Task+0x258>)
 8000ea4:	483a      	ldr	r0, [pc, #232]	@ (8000f90 <COIN_Task+0x230>)
 8000ea6:	f01b fdb5 	bl	801ca14 <siprintf>
//		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);

		lcd_clear();
 8000eaa:	f7ff fe83 	bl	8000bb4 <lcd_clear>
		lcd_put_cur(0,0);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fedd 	bl	8000c70 <lcd_put_cur>
		lcd_send_string("Insert 5 dollar.");
 8000eb6:	4843      	ldr	r0, [pc, #268]	@ (8000fc4 <COIN_Task+0x264>)
 8000eb8:	f7ff fec3 	bl	8000c42 <lcd_send_string>
		lcd_put_cur(1,0);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff fed6 	bl	8000c70 <lcd_put_cur>
		sprintf(MonitorTset,"Total value is %d", total);
 8000ec4:	4b39      	ldr	r3, [pc, #228]	@ (8000fac <COIN_Task+0x24c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	493d      	ldr	r1, [pc, #244]	@ (8000fc0 <COIN_Task+0x260>)
 8000ecc:	4830      	ldr	r0, [pc, #192]	@ (8000f90 <COIN_Task+0x230>)
 8000ece:	f01b fda1 	bl	801ca14 <siprintf>
		lcd_send_string(MonitorTset);
 8000ed2:	482f      	ldr	r0, [pc, #188]	@ (8000f90 <COIN_Task+0x230>)
 8000ed4:	f7ff feb5 	bl	8000c42 <lcd_send_string>

		impulse = 0;
 8000ed8:	4b33      	ldr	r3, [pc, #204]	@ (8000fa8 <COIN_Task+0x248>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	e04a      	b.n	8000f76 <COIN_Task+0x216>
	  }
	  else if (i >= 5 && impulse == 3){ // 1 dollar
 8000ee0:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <COIN_Task+0x244>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	dd46      	ble.n	8000f76 <COIN_Task+0x216>
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa8 <COIN_Task+0x248>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d142      	bne.n	8000f76 <COIN_Task+0x216>
		total = total + 1;
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <COIN_Task+0x24c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8000fac <COIN_Task+0x24c>)
 8000ef8:	6013      	str	r3, [r2, #0]
		now = now + 1;
 8000efa:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <COIN_Task+0x250>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	4a2b      	ldr	r2, [pc, #172]	@ (8000fb0 <COIN_Task+0x250>)
 8000f02:	6013      	str	r3, [r2, #0]

		while(day <= now){
 8000f04:	e00b      	b.n	8000f1e <COIN_Task+0x1be>
		  now = now - day;
 8000f06:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <COIN_Task+0x250>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <COIN_Task+0x254>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	4a27      	ldr	r2, [pc, #156]	@ (8000fb0 <COIN_Task+0x250>)
 8000f12:	6013      	str	r3, [r2, #0]
		  day = day + 1;
 8000f14:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <COIN_Task+0x254>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	4a26      	ldr	r2, [pc, #152]	@ (8000fb4 <COIN_Task+0x254>)
 8000f1c:	6013      	str	r3, [r2, #0]
		while(day <= now){
 8000f1e:	4b25      	ldr	r3, [pc, #148]	@ (8000fb4 <COIN_Task+0x254>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <COIN_Task+0x250>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	dded      	ble.n	8000f06 <COIN_Task+0x1a6>
		}

		sprintf(MonitorTset,"The day is %d. Today already saved %d. The total value is %d.\n\r",day, now, total);
 8000f2a:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <COIN_Task+0x254>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <COIN_Task+0x250>)
 8000f30:	6819      	ldr	r1, [r3, #0]
 8000f32:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <COIN_Task+0x24c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	491f      	ldr	r1, [pc, #124]	@ (8000fb8 <COIN_Task+0x258>)
 8000f3c:	4814      	ldr	r0, [pc, #80]	@ (8000f90 <COIN_Task+0x230>)
 8000f3e:	f01b fd69 	bl	801ca14 <siprintf>
//		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);

		lcd_clear();
 8000f42:	f7ff fe37 	bl	8000bb4 <lcd_clear>
		lcd_put_cur(0,0);
 8000f46:	2100      	movs	r1, #0
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff fe91 	bl	8000c70 <lcd_put_cur>
		lcd_send_string("Insert 1 dollar.");
 8000f4e:	481e      	ldr	r0, [pc, #120]	@ (8000fc8 <COIN_Task+0x268>)
 8000f50:	f7ff fe77 	bl	8000c42 <lcd_send_string>
		lcd_put_cur(1,0);
 8000f54:	2100      	movs	r1, #0
 8000f56:	2001      	movs	r0, #1
 8000f58:	f7ff fe8a 	bl	8000c70 <lcd_put_cur>
		sprintf(MonitorTset,"Total value is %d", total);
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <COIN_Task+0x24c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4917      	ldr	r1, [pc, #92]	@ (8000fc0 <COIN_Task+0x260>)
 8000f64:	480a      	ldr	r0, [pc, #40]	@ (8000f90 <COIN_Task+0x230>)
 8000f66:	f01b fd55 	bl	801ca14 <siprintf>
		lcd_send_string(MonitorTset);
 8000f6a:	4809      	ldr	r0, [pc, #36]	@ (8000f90 <COIN_Task+0x230>)
 8000f6c:	f7ff fe69 	bl	8000c42 <lcd_send_string>

		impulse=0;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <COIN_Task+0x248>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
	  }

	  if (day > 365){
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <COIN_Task+0x254>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f5b3 7fb7 	cmp.w	r3, #366	@ 0x16e
 8000f7e:	db02      	blt.n	8000f86 <COIN_Task+0x226>
		day = 1;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <COIN_Task+0x254>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
	  }

	  vTaskDelay(100);
 8000f86:	2064      	movs	r0, #100	@ 0x64
 8000f88:	f00c ff10 	bl	800ddac <vTaskDelay>
	 if (lcd_need_refresh) {
 8000f8c:	e6f3      	b.n	8000d76 <COIN_Task+0x16>
 8000f8e:	bf00      	nop
 8000f90:	20006400 	.word	0x20006400
 8000f94:	200061ec 	.word	0x200061ec
 8000f98:	200063ec 	.word	0x200063ec
 8000f9c:	0801db18 	.word	0x0801db18
 8000fa0:	0801db28 	.word	0x0801db28
 8000fa4:	200063f0 	.word	0x200063f0
 8000fa8:	200063f4 	.word	0x200063f4
 8000fac:	200063f8 	.word	0x200063f8
 8000fb0:	200063fc 	.word	0x200063fc
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	0801db34 	.word	0x0801db34
 8000fbc:	0801db74 	.word	0x0801db74
 8000fc0:	0801db88 	.word	0x0801db88
 8000fc4:	0801db9c 	.word	0x0801db9c
 8000fc8:	0801dbb0 	.word	0x0801dbb0

08000fcc <reset_callback>:
//		i += 1;
//	}
//}

void reset_callback(const void * msgin)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  (void) msgin;
  total = 0;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <reset_callback+0x30>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
  now   = 0;
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <reset_callback+0x34>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
  day   = 1;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <reset_callback+0x38>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
//  i = 0;
  lcd_need_refresh = true;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <reset_callback+0x3c>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
  printf("Received /money_reset, total reset to 0.\n");
 8000fec:	4807      	ldr	r0, [pc, #28]	@ (800100c <reset_callback+0x40>)
 8000fee:	f01b fcd5 	bl	801c99c <puts>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200063f8 	.word	0x200063f8
 8001000:	200063fc 	.word	0x200063fc
 8001004:	20000000 	.word	0x20000000
 8001008:	200063ec 	.word	0x200063ec
 800100c:	0801dbc4 	.word	0x0801dbc4

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b094      	sub	sp, #80	@ 0x50
 8001014:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001016:	f001 f929 	bl	800226c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101a:	f000 f86b 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f000 f9b9 	bl	8001394 <MX_GPIO_Init>
  MX_DMA_Init();
 8001022:	f000 f98f 	bl	8001344 <MX_DMA_Init>
  MX_I2C1_Init();
 8001026:	f000 f8cf 	bl	80011c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 800102a:	f000 f8fb 	bl	8001224 <MX_I2S3_Init>
  MX_SPI1_Init();
 800102e:	f000 f929 	bl	8001284 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001032:	f000 f95d 	bl	80012f0 <MX_USART2_UART_Init>
//  	    sprintf(msg, "Count: %d\r\n", i);
//  	    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//  	  HAL_Delay(1000);
//  	}

  HAL_Delay(30);
 8001036:	201e      	movs	r0, #30
 8001038:	f001 f95a 	bl	80022f0 <HAL_Delay>
  lcd_Init();
 800103c:	f7ff fdc4 	bl	8000bc8 <lcd_Init>

  const osThreadAttr_t coinTask_attributes = {
 8001040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001044:	2224      	movs	r2, #36	@ 0x24
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f01b fe3d 	bl	801ccc8 <memset>
 800104e:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <main+0xb4>)
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
 8001052:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001056:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001058:	2318      	movs	r3, #24
 800105a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    .name = "COIN_Task",
    .priority = osPriorityNormal,
    .stack_size = 128 * 4
  };

  const osThreadAttr_t impulseTask_attributes = {
 800105c:	463b      	mov	r3, r7
 800105e:	2224      	movs	r2, #36	@ 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f01b fe30 	bl	801ccc8 <memset>
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <main+0xb8>)
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	2318      	movs	r3, #24
 8001074:	61bb      	str	r3, [r7, #24]

//  vTaskStartScheduler();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001076:	f00b fbd1 	bl	800c81c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800107a:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <main+0xbc>)
 800107c:	2100      	movs	r1, #0
 800107e:	4814      	ldr	r0, [pc, #80]	@ (80010d0 <main+0xc0>)
 8001080:	f00b fc16 	bl	800c8b0 <osThreadNew>
 8001084:	4603      	mov	r3, r0
 8001086:	4a13      	ldr	r2, [pc, #76]	@ (80010d4 <main+0xc4>)
 8001088:	6013      	str	r3, [r2, #0]
  osThreadNew(COIN_Task, NULL, &coinTask_attributes);
 800108a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108e:	461a      	mov	r2, r3
 8001090:	2100      	movs	r1, #0
 8001092:	4811      	ldr	r0, [pc, #68]	@ (80010d8 <main+0xc8>)
 8001094:	f00b fc0c 	bl	800c8b0 <osThreadNew>
  osThreadNew(incomingImpulse, NULL, &impulseTask_attributes);
 8001098:	463b      	mov	r3, r7
 800109a:	461a      	mov	r2, r3
 800109c:	2100      	movs	r1, #0
 800109e:	480f      	ldr	r0, [pc, #60]	@ (80010dc <main+0xcc>)
 80010a0:	f00b fc06 	bl	800c8b0 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010a4:	f00b fbde 	bl	800c864 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sprintf(MonitorTset,"The day is %d. Today already saved %d. The total value is %d.\n\r",day, now, total);
 80010a8:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <main+0xd0>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <main+0xd4>)
 80010ae:	6819      	ldr	r1, [r3, #0]
 80010b0:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <main+0xd8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	460b      	mov	r3, r1
 80010b8:	490c      	ldr	r1, [pc, #48]	@ (80010ec <main+0xdc>)
 80010ba:	480d      	ldr	r0, [pc, #52]	@ (80010f0 <main+0xe0>)
 80010bc:	f01b fcaa 	bl	801ca14 <siprintf>
//  HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <main+0xb0>
 80010c4:	0801dbf0 	.word	0x0801dbf0
 80010c8:	0801dbfc 	.word	0x0801dbfc
 80010cc:	0801dc70 	.word	0x0801dc70
 80010d0:	08001551 	.word	0x08001551
 80010d4:	200063e8 	.word	0x200063e8
 80010d8:	08000d61 	.word	0x08000d61
 80010dc:	08000d21 	.word	0x08000d21
 80010e0:	20000000 	.word	0x20000000
 80010e4:	200063fc 	.word	0x200063fc
 80010e8:	200063f8 	.word	0x200063f8
 80010ec:	0801db34 	.word	0x0801db34
 80010f0:	20006400 	.word	0x20006400

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	@ 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	2230      	movs	r2, #48	@ 0x30
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f01b fde0 	bl	801ccc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	4b28      	ldr	r3, [pc, #160]	@ (80011c0 <SystemClock_Config+0xcc>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	4a27      	ldr	r2, [pc, #156]	@ (80011c0 <SystemClock_Config+0xcc>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	@ 0x40
 8001128:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <SystemClock_Config+0xcc>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <SystemClock_Config+0xd0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a21      	ldr	r2, [pc, #132]	@ (80011c4 <SystemClock_Config+0xd0>)
 800113e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <SystemClock_Config+0xd0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001150:	2301      	movs	r3, #1
 8001152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001154:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001164:	2308      	movs	r3, #8
 8001166:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001168:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800116c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001172:	2307      	movs	r3, #7
 8001174:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	4618      	mov	r0, r3
 800117c:	f005 fb2e 	bl	80067dc <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001186:	f000 fa9f 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2302      	movs	r3, #2
 8001190:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001196:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800119a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800119c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2105      	movs	r1, #5
 80011a8:	4618      	mov	r0, r3
 80011aa:	f005 fd8f 	bl	8006ccc <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011b4:	f000 fa88 	bl	80016c8 <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3750      	adds	r7, #80	@ 0x50
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_I2C1_Init+0x50>)
 80011ce:	4a13      	ldr	r2, [pc, #76]	@ (800121c <MX_I2C1_Init+0x54>)
 80011d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_I2C1_Init+0x50>)
 80011d4:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <MX_I2C1_Init+0x58>)
 80011d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_I2C1_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_I2C1_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_I2C1_Init+0x50>)
 80011e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <MX_I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_I2C1_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <MX_I2C1_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_I2C1_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	@ (8001218 <MX_I2C1_Init+0x50>)
 8001206:	f004 f87d 	bl	8005304 <HAL_I2C_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001210:	f000 fa5a 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200061ec 	.word	0x200061ec
 800121c:	40005400 	.word	0x40005400
 8001220:	000186a0 	.word	0x000186a0

08001224 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001228:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <MX_I2S3_Init+0x54>)
 800122a:	4a14      	ldr	r2, [pc, #80]	@ (800127c <MX_I2S3_Init+0x58>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800122e:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <MX_I2S3_Init+0x54>)
 8001230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001234:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <MX_I2S3_Init+0x54>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_I2S3_Init+0x54>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001242:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <MX_I2S3_Init+0x54>)
 8001244:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001248:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_I2S3_Init+0x54>)
 800124c:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <MX_I2S3_Init+0x5c>)
 800124e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_I2S3_Init+0x54>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_I2S3_Init+0x54>)
 8001258:	2200      	movs	r2, #0
 800125a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_I2S3_Init+0x54>)
 800125e:	2200      	movs	r2, #0
 8001260:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_I2S3_Init+0x54>)
 8001264:	f004 fe1a 	bl	8005e9c <HAL_I2S_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800126e:	f000 fa2b 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20006240 	.word	0x20006240
 800127c:	40003c00 	.word	0x40003c00
 8001280:	00017700 	.word	0x00017700

08001284 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <MX_SPI1_Init+0x64>)
 800128a:	4a18      	ldr	r2, [pc, #96]	@ (80012ec <MX_SPI1_Init+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800128e:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <MX_SPI1_Init+0x64>)
 8001290:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001296:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_SPI1_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_SPI1_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c8:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012d0:	220a      	movs	r2, #10
 80012d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <MX_SPI1_Init+0x64>)
 80012d6:	f006 f88d 	bl	80073f4 <HAL_SPI_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012e0:	f000 f9f2 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20006288 	.word	0x20006288
 80012ec:	40013000 	.word	0x40013000

080012f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <MX_USART2_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001328:	f006 fb88 	bl	8007a3c <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f000 f9c9 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200062e0 	.word	0x200062e0
 8001340:	40004400 	.word	0x40004400

08001344 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <MX_DMA_Init+0x4c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a0f      	ldr	r2, [pc, #60]	@ (8001390 <MX_DMA_Init+0x4c>)
 8001354:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <MX_DMA_Init+0x4c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2105      	movs	r1, #5
 800136a:	2010      	movs	r0, #16
 800136c:	f001 f89c 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001370:	2010      	movs	r0, #16
 8001372:	f001 f8b5 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2105      	movs	r1, #5
 800137a:	2011      	movs	r0, #17
 800137c:	f001 f894 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001380:	2011      	movs	r0, #17
 8001382:	f001 f8ad 	bl	80024e0 <HAL_NVIC_EnableIRQ>

}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	@ 0x30
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	4b62      	ldr	r3, [pc, #392]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a61      	ldr	r2, [pc, #388]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	61bb      	str	r3, [r7, #24]
 80013c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b58      	ldr	r3, [pc, #352]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b54      	ldr	r3, [pc, #336]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a53      	ldr	r2, [pc, #332]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b51      	ldr	r3, [pc, #324]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b4d      	ldr	r3, [pc, #308]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a4c      	ldr	r2, [pc, #304]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b4a      	ldr	r3, [pc, #296]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	4b46      	ldr	r3, [pc, #280]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a45      	ldr	r2, [pc, #276]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b43      	ldr	r3, [pc, #268]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b3f      	ldr	r3, [pc, #252]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a3e      	ldr	r2, [pc, #248]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b3c      	ldr	r3, [pc, #240]	@ (8001538 <MX_GPIO_Init+0x1a4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	2101      	movs	r1, #1
 8001456:	4839      	ldr	r0, [pc, #228]	@ (800153c <MX_GPIO_Init+0x1a8>)
 8001458:	f001 fe06 	bl	8003068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800145c:	2200      	movs	r2, #0
 800145e:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001462:	4837      	ldr	r0, [pc, #220]	@ (8001540 <MX_GPIO_Init+0x1ac>)
 8001464:	f001 fe00 	bl	8003068 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001468:	2301      	movs	r3, #1
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	482f      	ldr	r0, [pc, #188]	@ (800153c <MX_GPIO_Init+0x1a8>)
 8001480:	f001 fc3e 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001484:	2308      	movs	r3, #8
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001494:	2305      	movs	r3, #5
 8001496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4827      	ldr	r0, [pc, #156]	@ (800153c <MX_GPIO_Init+0x1a8>)
 80014a0:	f001 fc2e 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014a4:	2304      	movs	r3, #4
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4619      	mov	r1, r3
 80014b6:	4823      	ldr	r0, [pc, #140]	@ (8001544 <MX_GPIO_Init+0x1b0>)
 80014b8:	f001 fc22 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80014bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014ce:	2305      	movs	r3, #5
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	481a      	ldr	r0, [pc, #104]	@ (8001544 <MX_GPIO_Init+0x1b0>)
 80014da:	f001 fc11 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014de:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80014e2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4812      	ldr	r0, [pc, #72]	@ (8001540 <MX_GPIO_Init+0x1ac>)
 80014f8:	f001 fc02 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014fc:	2320      	movs	r3, #32
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	480c      	ldr	r0, [pc, #48]	@ (8001540 <MX_GPIO_Init+0x1ac>)
 8001510:	f001 fbf6 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001514:	2302      	movs	r3, #2
 8001516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001518:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800151c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4807      	ldr	r0, [pc, #28]	@ (8001548 <MX_GPIO_Init+0x1b4>)
 800152a:	f001 fbe9 	bl	8002d00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800152e:	bf00      	nop
 8001530:	3730      	adds	r7, #48	@ 0x30
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	40020800 	.word	0x40020800
 8001540:	40020c00 	.word	0x40020c00
 8001544:	40020400 	.word	0x40020400
 8001548:	40021000 	.word	0x40021000
 800154c:	00000000 	.word	0x00000000

08001550 <StartDefaultTask>:
  */
/* USER CODE END Header_StartDefaultTask */


void StartDefaultTask(void *argument)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0c4      	sub	sp, #272	@ 0x110
 8001554:	af02      	add	r7, sp, #8
 8001556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800155a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800155e:	6018      	str	r0, [r3, #0]
    /*---------------- 0. 讓 USB Host 與系統先穩定 ----------------*/
    MX_USB_HOST_Init();      // 若無用到可註解
 8001560:	f00e f94a 	bl	800f7f8 <MX_USB_HOST_Init>
    HAL_Delay(3000);
 8001564:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001568:	f000 fec2 	bl	80022f0 <HAL_Delay>

    /*---------------- 1. 設定 UART custom transport --------------*/
    rmw_uros_set_custom_transport(
 800156c:	4b3e      	ldr	r3, [pc, #248]	@ (8001668 <StartDefaultTask+0x118>)
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	4b3e      	ldr	r3, [pc, #248]	@ (800166c <StartDefaultTask+0x11c>)
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	4b3e      	ldr	r3, [pc, #248]	@ (8001670 <StartDefaultTask+0x120>)
 8001576:	4a3f      	ldr	r2, [pc, #252]	@ (8001674 <StartDefaultTask+0x124>)
 8001578:	493f      	ldr	r1, [pc, #252]	@ (8001678 <StartDefaultTask+0x128>)
 800157a:	2001      	movs	r0, #1
 800157c:	f00f fd24 	bl	8010fc8 <rmw_uros_set_custom_transport>
        cubemx_transport_close,
        cubemx_transport_write,
        cubemx_transport_read);

    /*---------------- 2. (可選) 換成 FreeRTOS 記憶體配置 ----------*/
    rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001580:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001584:	4618      	mov	r0, r3
 8001586:	f00f fc51 	bl	8010e2c <rcutils_get_zero_initialized_allocator>
    freeRTOS_allocator.allocate      = microros_allocate;
 800158a:	4b3c      	ldr	r3, [pc, #240]	@ (800167c <StartDefaultTask+0x12c>)
 800158c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    freeRTOS_allocator.deallocate    = microros_deallocate;
 8001590:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <StartDefaultTask+0x130>)
 8001592:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    freeRTOS_allocator.reallocate    = microros_reallocate;
 8001596:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <StartDefaultTask+0x134>)
 8001598:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 800159c:	4b3a      	ldr	r3, [pc, #232]	@ (8001688 <StartDefaultTask+0x138>)
 800159e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    rcutils_set_default_allocator(&freeRTOS_allocator);
 80015a2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80015a6:	4618      	mov	r0, r3
 80015a8:	f00f fc4e 	bl	8010e48 <rcutils_set_default_allocator>

    /*---------------- 3. 建立 support (內含 DDS session) ----------*/
    rcl_allocator_t allocator = rcl_get_default_allocator();
 80015ac:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00f fc67 	bl	8010e84 <rcutils_get_default_allocator>
    rclc_support_t  support;
    rclc_support_init(&support, 0, NULL, &allocator);
 80015b6:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80015ba:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	f00f fb3d 	bl	8010c40 <rclc_support_init>

    /*---------------- 4. 建立節點 / 發布者 / 訂閱者 ---------------*/
    rcl_node_t node;
    rclc_node_init_default(&node, "cubemx_node", "", &support);
 80015c6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015ca:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 80015ce:	4a2f      	ldr	r2, [pc, #188]	@ (800168c <StartDefaultTask+0x13c>)
 80015d0:	492f      	ldr	r1, [pc, #188]	@ (8001690 <StartDefaultTask+0x140>)
 80015d2:	f00f fb7f 	bl	8010cd4 <rclc_node_init_default>

    /* publisher : /money_count */
    rcl_publisher_t publisher;
    rclc_publisher_init_default(
 80015d6:	f010 fa41 	bl	8011a5c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80015da:	4602      	mov	r2, r0
 80015dc:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80015e0:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 80015e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <StartDefaultTask+0x144>)
 80015e6:	f00f fbb1 	bl	8010d4c <rclc_publisher_init_default>
        "money_count");

    /* subscriber : /money_reset */
    rcl_subscription_t subscriber;
    std_msgs__msg__Empty reset_msg;   // 資料緩衝區
    std_msgs__msg__Empty__init(&reset_msg);
 80015ea:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80015ee:	4618      	mov	r0, r3
 80015f0:	f010 fa16 	bl	8011a20 <std_msgs__msg__Empty__init>
    rclc_subscription_init_default(
 80015f4:	f010 fa1a 	bl	8011a2c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Empty>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80015fe:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8001602:	4b25      	ldr	r3, [pc, #148]	@ (8001698 <StartDefaultTask+0x148>)
 8001604:	f00f fbd6 	bl	8010db4 <rclc_subscription_init_default>
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Empty),
        "money_reset");

    /*---------------- 5. 建立 executor 並加入訂閱 -----------------*/
    rclc_executor_t executor;
    rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001608:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800160c:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8001610:	f107 0010 	add.w	r0, r7, #16
 8001614:	2202      	movs	r2, #2
 8001616:	f00f f84b 	bl	80106b0 <rclc_executor_init>
    rclc_executor_add_subscription(
 800161a:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 800161e:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8001622:	f107 0010 	add.w	r0, r7, #16
 8001626:	2300      	movs	r3, #0
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <StartDefaultTask+0x14c>)
 800162c:	f00f f8b0 	bl	8010790 <rclc_executor_add_subscription>

    /*---------------- 6. 主迴圈：送累積金額 + spin ----------------*/
    std_msgs__msg__Int32 msg;
    for (;;)
    {
        msg.data = total;                        // 發布目前總額
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <StartDefaultTask+0x150>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
        rcl_publish(&publisher, &msg, NULL);
 8001636:	f107 010c 	add.w	r1, r7, #12
 800163a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800163e:	2200      	movs	r2, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f00e fca7 	bl	800ff94 <rcl_publish>

        rclc_executor_spin_some(&executor,
 8001646:	f107 0110 	add.w	r1, r7, #16
 800164a:	a305      	add	r3, pc, #20	@ (adr r3, 8001660 <StartDefaultTask+0x110>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	4608      	mov	r0, r1
 8001652:	f00f fabd 	bl	8010bd0 <rclc_executor_spin_some>
                                RCL_MS_TO_NS(5)); // 處理 /money_reset

        osDelay(10);                             // 10 ms 週期
 8001656:	200a      	movs	r0, #10
 8001658:	f00b f9bc 	bl	800c9d4 <osDelay>
        msg.data = total;                        // 發布目前總額
 800165c:	bf00      	nop
 800165e:	e7e7      	b.n	8001630 <StartDefaultTask+0xe0>
 8001660:	004c4b40 	.word	0x004c4b40
 8001664:	00000000 	.word	0x00000000
 8001668:	08002171 	.word	0x08002171
 800166c:	08002109 	.word	0x08002109
 8001670:	080020e9 	.word	0x080020e9
 8001674:	080020bd 	.word	0x080020bd
 8001678:	200062e0 	.word	0x200062e0
 800167c:	080016d5 	.word	0x080016d5
 8001680:	08001719 	.word	0x08001719
 8001684:	08001751 	.word	0x08001751
 8001688:	080017bd 	.word	0x080017bd
 800168c:	0801dc04 	.word	0x0801dc04
 8001690:	0801dc08 	.word	0x0801dc08
 8001694:	0801dc14 	.word	0x0801dc14
 8001698:	0801dc20 	.word	0x0801dc20
 800169c:	08000fcd 	.word	0x08000fcd
 80016a0:	200063f8 	.word	0x200063f8

080016a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016b6:	f000 fdfb 	bl	80022b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40010000 	.word	0x40010000

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <Error_Handler+0x8>

080016d4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80016de:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <microros_allocate+0x3c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <microros_allocate+0x3c>)
 80016ec:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <microros_allocate+0x40>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <microros_allocate+0x40>)
 80016fc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7fe ff96 	bl	8000630 <pvPortMallocMicroROS>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20006464 	.word	0x20006464
 8001714:	20006468 	.word	0x20006468

08001718 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00c      	beq.n	8001742 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff f8a5 	bl	8000878 <getBlockSize>
 800172e:	4603      	mov	r3, r0
 8001730:	4a06      	ldr	r2, [pc, #24]	@ (800174c <microros_deallocate+0x34>)
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	461a      	mov	r2, r3
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <microros_deallocate+0x34>)
 800173a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff f83f 	bl	80007c0 <vPortFreeMicroROS>
  }
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20006468 	.word	0x20006468

08001750 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <microros_reallocate+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	4413      	add	r3, r2
 8001766:	461a      	mov	r2, r3
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <microros_reallocate+0x64>)
 800176a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <microros_reallocate+0x68>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	4413      	add	r3, r2
 8001776:	461a      	mov	r2, r3
 8001778:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <microros_reallocate+0x68>)
 800177a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d104      	bne.n	800178c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001782:	68b8      	ldr	r0, [r7, #8]
 8001784:	f7fe ff54 	bl	8000630 <pvPortMallocMicroROS>
 8001788:	4603      	mov	r3, r0
 800178a:	e00e      	b.n	80017aa <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff f873 	bl	8000878 <getBlockSize>
 8001792:	4603      	mov	r3, r0
 8001794:	4a08      	ldr	r2, [pc, #32]	@ (80017b8 <microros_reallocate+0x68>)
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	461a      	mov	r2, r3
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <microros_reallocate+0x68>)
 800179e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f7ff f886 	bl	80008b4 <pvPortReallocMicroROS>
 80017a8:	4603      	mov	r3, r0
  }
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20006464 	.word	0x20006464
 80017b8:	20006468 	.word	0x20006468

080017bc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001804 <microros_zero_allocate+0x48>)
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <microros_zero_allocate+0x48>)
 80017da:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	fb02 f303 	mul.w	r3, r2, r3
 80017e4:	4a08      	ldr	r2, [pc, #32]	@ (8001808 <microros_zero_allocate+0x4c>)
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <microros_zero_allocate+0x4c>)
 80017ee:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f7ff f88b 	bl	800090e <pvPortCallocMicroROS>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20006464 	.word	0x20006464
 8001808:	20006468 	.word	0x20006468
 800180c:	00000000 	.word	0x00000000

08001810 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001822:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001826:	a320      	add	r3, pc, #128	@ (adr r3, 80018a8 <UTILS_NanosecondsToTimespec+0x98>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7fe fd38 	bl	80002a0 <__aeabi_ldivmod>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800183a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800183e:	a31a      	add	r3, pc, #104	@ (adr r3, 80018a8 <UTILS_NanosecondsToTimespec+0x98>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fd2c 	bl	80002a0 <__aeabi_ldivmod>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	da20      	bge.n	8001896 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a11      	ldr	r2, [pc, #68]	@ (80018a0 <UTILS_NanosecondsToTimespec+0x90>)
 800185a:	fb82 1203 	smull	r1, r2, r2, r3
 800185e:	1712      	asrs	r2, r2, #28
 8001860:	17db      	asrs	r3, r3, #31
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	6979      	ldr	r1, [r7, #20]
 8001870:	17c8      	asrs	r0, r1, #31
 8001872:	460c      	mov	r4, r1
 8001874:	4605      	mov	r5, r0
 8001876:	ebb2 0804 	subs.w	r8, r2, r4
 800187a:	eb63 0905 	sbc.w	r9, r3, r5
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	4906      	ldr	r1, [pc, #24]	@ (80018a4 <UTILS_NanosecondsToTimespec+0x94>)
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	441a      	add	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]
    }
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018a0:	44b82fa1 	.word	0x44b82fa1
 80018a4:	3b9aca00 	.word	0x3b9aca00
 80018a8:	3b9aca00 	.word	0x3b9aca00
 80018ac:	00000000 	.word	0x00000000

080018b0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80018b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b4:	b08e      	sub	sp, #56	@ 0x38
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80018ba:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80018bc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80018c0:	2300      	movs	r3, #0
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80018d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018d6:	4618      	mov	r0, r3
 80018d8:	f00c fd90 	bl	800e3fc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80018dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018de:	17da      	asrs	r2, r3, #31
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	61fa      	str	r2, [r7, #28]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	69b9      	ldr	r1, [r7, #24]
 80018ee:	000b      	movs	r3, r1
 80018f0:	2200      	movs	r2, #0
 80018f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80018f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f8:	2200      	movs	r2, #0
 80018fa:	461c      	mov	r4, r3
 80018fc:	4615      	mov	r5, r2
 80018fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001902:	1911      	adds	r1, r2, r4
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	416b      	adcs	r3, r5
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800190e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001912:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	f04f 0400 	mov.w	r4, #0
 800191e:	f04f 0500 	mov.w	r5, #0
 8001922:	015d      	lsls	r5, r3, #5
 8001924:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001928:	0154      	lsls	r4, r2, #5
 800192a:	4622      	mov	r2, r4
 800192c:	462b      	mov	r3, r5
 800192e:	ebb2 0800 	subs.w	r8, r2, r0
 8001932:	eb63 0901 	sbc.w	r9, r3, r1
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001942:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001946:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800194a:	4690      	mov	r8, r2
 800194c:	4699      	mov	r9, r3
 800194e:	eb18 0a00 	adds.w	sl, r8, r0
 8001952:	eb49 0b01 	adc.w	fp, r9, r1
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001962:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001966:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800196a:	ebb2 040a 	subs.w	r4, r2, sl
 800196e:	603c      	str	r4, [r7, #0]
 8001970:	eb63 030b 	sbc.w	r3, r3, fp
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800197a:	4623      	mov	r3, r4
 800197c:	181b      	adds	r3, r3, r0
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	462b      	mov	r3, r5
 8001982:	eb41 0303 	adc.w	r3, r1, r3
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800198e:	f7ff ff3f 	bl	8001810 <UTILS_NanosecondsToTimespec>

    return 0;
 8001992:	2300      	movs	r3, #0
 8001994:	4618      	mov	r0, r3
 8001996:	3738      	adds	r7, #56	@ 0x38
 8001998:	46bd      	mov	sp, r7
 800199a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080019a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_MspInit+0x54>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	4a11      	ldr	r2, [pc, #68]	@ (80019f4 <HAL_MspInit+0x54>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <HAL_MspInit+0x54>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <HAL_MspInit+0x54>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <HAL_MspInit+0x54>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <HAL_MspInit+0x54>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	210f      	movs	r1, #15
 80019e2:	f06f 0001 	mvn.w	r0, #1
 80019e6:	f000 fd5f 	bl	80024a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	@ 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	@ (8001a7c <HAL_I2C_MspInit+0x84>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12c      	bne.n	8001a74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <HAL_I2C_MspInit+0x88>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a17      	ldr	r2, [pc, #92]	@ (8001a80 <HAL_I2C_MspInit+0x88>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_I2C_MspInit+0x88>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a36:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a3c:	2312      	movs	r3, #18
 8001a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <HAL_I2C_MspInit+0x8c>)
 8001a54:	f001 f954 	bl	8002d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <HAL_I2C_MspInit+0x88>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	4a07      	ldr	r2, [pc, #28]	@ (8001a80 <HAL_I2C_MspInit+0x88>)
 8001a62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <HAL_I2C_MspInit+0x88>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	@ 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020400 	.word	0x40020400

08001a88 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08e      	sub	sp, #56	@ 0x38
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a31      	ldr	r2, [pc, #196]	@ (8001b78 <HAL_I2S_MspInit+0xf0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d15a      	bne.n	8001b6e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001abc:	23c0      	movs	r3, #192	@ 0xc0
 8001abe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f005 fb51 	bl	8007170 <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001ad4:	f7ff fdf8 	bl	80016c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	4b27      	ldr	r3, [pc, #156]	@ (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	4a26      	ldr	r2, [pc, #152]	@ (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ae6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae8:	4b24      	ldr	r3, [pc, #144]	@ (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	4b20      	ldr	r3, [pc, #128]	@ (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afc:	4a1f      	ldr	r2, [pc, #124]	@ (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b04:	4b1d      	ldr	r3, [pc, #116]	@ (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b18:	4a18      	ldr	r2, [pc, #96]	@ (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b20:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b2c:	2310      	movs	r3, #16
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b3c:	2306      	movs	r3, #6
 8001b3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b44:	4619      	mov	r1, r3
 8001b46:	480e      	ldr	r0, [pc, #56]	@ (8001b80 <HAL_I2S_MspInit+0xf8>)
 8001b48:	f001 f8da 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b4c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b5e:	2306      	movs	r3, #6
 8001b60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b66:	4619      	mov	r1, r3
 8001b68:	4806      	ldr	r0, [pc, #24]	@ (8001b84 <HAL_I2S_MspInit+0xfc>)
 8001b6a:	f001 f8c9 	bl	8002d00 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b6e:	bf00      	nop
 8001b70:	3738      	adds	r7, #56	@ 0x38
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40003c00 	.word	0x40003c00
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020800 	.word	0x40020800

08001b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <HAL_SPI_MspInit+0x84>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12b      	bne.n	8001c02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <HAL_SPI_MspInit+0x88>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	4a17      	ldr	r2, [pc, #92]	@ (8001c10 <HAL_SPI_MspInit+0x88>)
 8001bb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <HAL_SPI_MspInit+0x88>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <HAL_SPI_MspInit+0x88>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	4a10      	ldr	r2, [pc, #64]	@ (8001c10 <HAL_SPI_MspInit+0x88>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <HAL_SPI_MspInit+0x88>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001be2:	23e0      	movs	r3, #224	@ 0xe0
 8001be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <HAL_SPI_MspInit+0x8c>)
 8001bfe:	f001 f87f 	bl	8002d00 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	@ 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40013000 	.word	0x40013000
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020000 	.word	0x40020000

08001c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a4d      	ldr	r2, [pc, #308]	@ (8001d6c <HAL_UART_MspInit+0x154>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	f040 8093 	bne.w	8001d62 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	4b4b      	ldr	r3, [pc, #300]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c44:	4a4a      	ldr	r2, [pc, #296]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4c:	4b48      	ldr	r3, [pc, #288]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	4b44      	ldr	r3, [pc, #272]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c60:	4a43      	ldr	r2, [pc, #268]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c68:	4b41      	ldr	r3, [pc, #260]	@ (8001d70 <HAL_UART_MspInit+0x158>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c74:	230c      	movs	r3, #12
 8001c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c84:	2307      	movs	r3, #7
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4839      	ldr	r0, [pc, #228]	@ (8001d74 <HAL_UART_MspInit+0x15c>)
 8001c90:	f001 f836 	bl	8002d00 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001c94:	4b38      	ldr	r3, [pc, #224]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001c96:	4a39      	ldr	r2, [pc, #228]	@ (8001d7c <HAL_UART_MspInit+0x164>)
 8001c98:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001c9a:	4b37      	ldr	r3, [pc, #220]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001c9c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ca0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca2:	4b35      	ldr	r3, [pc, #212]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca8:	4b33      	ldr	r3, [pc, #204]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cae:	4b32      	ldr	r3, [pc, #200]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001cb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cb4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb6:	4b30      	ldr	r3, [pc, #192]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cca:	4b2b      	ldr	r3, [pc, #172]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001ccc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001cd0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd2:	4b29      	ldr	r3, [pc, #164]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001cd8:	4827      	ldr	r0, [pc, #156]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001cda:	f000 fc0f 	bl	80024fc <HAL_DMA_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001ce4:	f7ff fcf0 	bl	80016c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a23      	ldr	r2, [pc, #140]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001cec:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cee:	4a22      	ldr	r2, [pc, #136]	@ (8001d78 <HAL_UART_MspInit+0x160>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001cf4:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <HAL_UART_MspInit+0x168>)
 8001cf6:	4a23      	ldr	r2, [pc, #140]	@ (8001d84 <HAL_UART_MspInit+0x16c>)
 8001cf8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001cfa:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <HAL_UART_MspInit+0x168>)
 8001cfc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d00:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d02:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <HAL_UART_MspInit+0x168>)
 8001d04:	2240      	movs	r2, #64	@ 0x40
 8001d06:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_UART_MspInit+0x168>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <HAL_UART_MspInit+0x168>)
 8001d10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d14:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <HAL_UART_MspInit+0x168>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_UART_MspInit+0x168>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d22:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <HAL_UART_MspInit+0x168>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d28:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <HAL_UART_MspInit+0x168>)
 8001d2a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d2e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d30:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <HAL_UART_MspInit+0x168>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d36:	4812      	ldr	r0, [pc, #72]	@ (8001d80 <HAL_UART_MspInit+0x168>)
 8001d38:	f000 fbe0 	bl	80024fc <HAL_DMA_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001d42:	f7ff fcc1 	bl	80016c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <HAL_UART_MspInit+0x168>)
 8001d4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <HAL_UART_MspInit+0x168>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2105      	movs	r1, #5
 8001d56:	2026      	movs	r0, #38	@ 0x26
 8001d58:	f000 fba6 	bl	80024a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d5c:	2026      	movs	r0, #38	@ 0x26
 8001d5e:	f000 fbbf 	bl	80024e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d62:	bf00      	nop
 8001d64:	3728      	adds	r7, #40	@ 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40004400 	.word	0x40004400
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020000 	.word	0x40020000
 8001d78:	20006328 	.word	0x20006328
 8001d7c:	40026088 	.word	0x40026088
 8001d80:	20006388 	.word	0x20006388
 8001d84:	400260a0 	.word	0x400260a0

08001d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	@ 0x30
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e5c <HAL_InitTick+0xd4>)
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da0:	4a2e      	ldr	r2, [pc, #184]	@ (8001e5c <HAL_InitTick+0xd4>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e5c <HAL_InitTick+0xd4>)
 8001daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001db4:	f107 020c 	add.w	r2, r7, #12
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f005 f9a4 	bl	800710c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001dc4:	f005 f98e 	bl	80070e4 <HAL_RCC_GetPCLK2Freq>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd0:	4a23      	ldr	r2, [pc, #140]	@ (8001e60 <HAL_InitTick+0xd8>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0c9b      	lsrs	r3, r3, #18
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ddc:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <HAL_InitTick+0xdc>)
 8001dde:	4a22      	ldr	r2, [pc, #136]	@ (8001e68 <HAL_InitTick+0xe0>)
 8001de0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001de2:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <HAL_InitTick+0xdc>)
 8001de4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001de8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001dea:	4a1e      	ldr	r2, [pc, #120]	@ (8001e64 <HAL_InitTick+0xdc>)
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001df0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <HAL_InitTick+0xdc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_InitTick+0xdc>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <HAL_InitTick+0xdc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001e02:	4818      	ldr	r0, [pc, #96]	@ (8001e64 <HAL_InitTick+0xdc>)
 8001e04:	f005 fb7f 	bl	8007506 <HAL_TIM_Base_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d11b      	bne.n	8001e4e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e16:	4813      	ldr	r0, [pc, #76]	@ (8001e64 <HAL_InitTick+0xdc>)
 8001e18:	f005 fbce 	bl	80075b8 <HAL_TIM_Base_Start_IT>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001e22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d111      	bne.n	8001e4e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e2a:	2019      	movs	r0, #25
 8001e2c:	f000 fb58 	bl	80024e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b0f      	cmp	r3, #15
 8001e34:	d808      	bhi.n	8001e48 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001e36:	2200      	movs	r2, #0
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	2019      	movs	r0, #25
 8001e3c:	f000 fb34 	bl	80024a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e40:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <HAL_InitTick+0xe4>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e002      	b.n	8001e4e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3730      	adds	r7, #48	@ 0x30
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	431bde83 	.word	0x431bde83
 8001e64:	2000646c 	.word	0x2000646c
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	2000000c 	.word	0x2000000c

08001e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <NMI_Handler+0x4>

08001e78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <MemManage_Handler+0x4>

08001e88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001eac:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <DMA1_Stream5_IRQHandler+0x10>)
 8001eae:	f000 fcbd 	bl	800282c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20006328 	.word	0x20006328

08001ebc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ec0:	4802      	ldr	r0, [pc, #8]	@ (8001ecc <DMA1_Stream6_IRQHandler+0x10>)
 8001ec2:	f000 fcb3 	bl	800282c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20006388 	.word	0x20006388

08001ed0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ed4:	4802      	ldr	r0, [pc, #8]	@ (8001ee0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ed6:	f005 fbdf 	bl	8007698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000646c 	.word	0x2000646c

08001ee4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ee8:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <USART2_IRQHandler+0x10>)
 8001eea:	f005 ffa3 	bl	8007e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200062e0 	.word	0x200062e0

08001ef8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001efc:	4802      	ldr	r0, [pc, #8]	@ (8001f08 <OTG_FS_IRQHandler+0x10>)
 8001efe:	f001 fbad 	bl	800365c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000de24 	.word	0x2000de24

08001f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return 1;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_kill>:

int _kill(int pid, int sig)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f26:	f01a ff63 	bl	801cdf0 <__errno>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2216      	movs	r2, #22
 8001f2e:	601a      	str	r2, [r3, #0]
  return -1;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_exit>:

void _exit (int status)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ffe7 	bl	8001f1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f4e:	bf00      	nop
 8001f50:	e7fd      	b.n	8001f4e <_exit+0x12>

08001f52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	e00a      	b.n	8001f7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f64:	f3af 8000 	nop.w
 8001f68:	4601      	mov	r1, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	60ba      	str	r2, [r7, #8]
 8001f70:	b2ca      	uxtb	r2, r1
 8001f72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	3301      	adds	r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dbf0      	blt.n	8001f64 <_read+0x12>
  }

  return len;
 8001f82:	687b      	ldr	r3, [r7, #4]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	e009      	b.n	8001fb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	60ba      	str	r2, [r7, #8]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fd92 	bl	8000ad0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dbf1      	blt.n	8001f9e <_write+0x12>
  }
  return len;
 8001fba:	687b      	ldr	r3, [r7, #4]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_close>:

int _close(int file)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fec:	605a      	str	r2, [r3, #4]
  return 0;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <_isatty>:

int _isatty(int file)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002004:	2301      	movs	r3, #1
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002034:	4a14      	ldr	r2, [pc, #80]	@ (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002040:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	@ (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800205c:	f01a fec8 	bl	801cdf0 <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	@ (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20020000 	.word	0x20020000
 800208c:	00000400 	.word	0x00000400
 8002090:	200064b8 	.word	0x200064b8
 8002094:	20012ed0 	.word	0x20012ed0

08002098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <SystemInit+0x20>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <SystemInit+0x20>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80020ca:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80020cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020d0:	4904      	ldr	r1, [pc, #16]	@ (80020e4 <cubemx_transport_open+0x28>)
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f005 fe0a 	bl	8007cec <HAL_UART_Receive_DMA>
    return true;
 80020d8:	2301      	movs	r3, #1
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200064bc 	.word	0x200064bc

080020e8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80020f6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f005 fe1c 	bl	8007d36 <HAL_UART_DMAStop>
    return true;
 80020fe:	2301      	movs	r3, #1
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800211c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b20      	cmp	r3, #32
 8002128:	d11c      	bne.n	8002164 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	b29b      	uxth	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f005 fd5e 	bl	8007bf4 <HAL_UART_Transmit_DMA>
 8002138:	4603      	mov	r3, r0
 800213a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800213c:	e002      	b.n	8002144 <cubemx_transport_write+0x3c>
            osDelay(1);
 800213e:	2001      	movs	r0, #1
 8002140:	f00a fc48 	bl	800c9d4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <cubemx_transport_write+0x4e>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b20      	cmp	r3, #32
 8002154:	d1f3      	bne.n	800213e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002156:	7cfb      	ldrb	r3, [r7, #19]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <cubemx_transport_write+0x58>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	e002      	b.n	8002166 <cubemx_transport_write+0x5e>
 8002160:	2300      	movs	r3, #0
 8002162:	e000      	b.n	8002166 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002164:	2300      	movs	r3, #0
    }
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002184:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800218a:	b672      	cpsid	i
}
 800218c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800219a:	4a1c      	ldr	r2, [pc, #112]	@ (800220c <cubemx_transport_read+0x9c>)
 800219c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800219e:	b662      	cpsie	i
}
 80021a0:	bf00      	nop
        __enable_irq();
        ms_used++;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f00a fc13 	bl	800c9d4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80021ae:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <cubemx_transport_read+0xa0>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4b16      	ldr	r3, [pc, #88]	@ (800220c <cubemx_transport_read+0x9c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d103      	bne.n	80021c2 <cubemx_transport_read+0x52>
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	dbe3      	blt.n	800218a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80021c6:	e011      	b.n	80021ec <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <cubemx_transport_read+0xa0>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	440b      	add	r3, r1
 80021d2:	4910      	ldr	r1, [pc, #64]	@ (8002214 <cubemx_transport_read+0xa4>)
 80021d4:	5c8a      	ldrb	r2, [r1, r2]
 80021d6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80021d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <cubemx_transport_read+0xa0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3301      	adds	r3, #1
 80021de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002210 <cubemx_transport_read+0xa0>)
 80021e4:	6013      	str	r3, [r2, #0]
        wrote++;
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	3301      	adds	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <cubemx_transport_read+0xa0>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <cubemx_transport_read+0x9c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d003      	beq.n	8002200 <cubemx_transport_read+0x90>
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d3e3      	bcc.n	80021c8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002200:	69bb      	ldr	r3, [r7, #24]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20006cc0 	.word	0x20006cc0
 8002210:	20006cbc 	.word	0x20006cbc
 8002214:	200064bc 	.word	0x200064bc

08002218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002250 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800221c:	f7ff ff3c 	bl	8002098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002220:	480c      	ldr	r0, [pc, #48]	@ (8002254 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002222:	490d      	ldr	r1, [pc, #52]	@ (8002258 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002224:	4a0d      	ldr	r2, [pc, #52]	@ (800225c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002228:	e002      	b.n	8002230 <LoopCopyDataInit>

0800222a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800222c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222e:	3304      	adds	r3, #4

08002230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002234:	d3f9      	bcc.n	800222a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002236:	4a0a      	ldr	r2, [pc, #40]	@ (8002260 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002238:	4c0a      	ldr	r4, [pc, #40]	@ (8002264 <LoopFillZerobss+0x22>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800223c:	e001      	b.n	8002242 <LoopFillZerobss>

0800223e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002240:	3204      	adds	r2, #4

08002242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002244:	d3fb      	bcc.n	800223e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002246:	f01a fdd9 	bl	801cdfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224a:	f7fe fee1 	bl	8001010 <main>
  bx  lr    
 800224e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002258:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 800225c:	0801ea2c 	.word	0x0801ea2c
  ldr r2, =_sbss
 8002260:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8002264:	20012ecc 	.word	0x20012ecc

08002268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC_IRQHandler>
	...

0800226c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002270:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0d      	ldr	r2, [pc, #52]	@ (80022ac <HAL_Init+0x40>)
 8002276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800227a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800227c:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	@ (80022ac <HAL_Init+0x40>)
 8002282:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a07      	ldr	r2, [pc, #28]	@ (80022ac <HAL_Init+0x40>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002294:	2003      	movs	r0, #3
 8002296:	f000 f8fc 	bl	8002492 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800229a:	200f      	movs	r0, #15
 800229c:	f7ff fd74 	bl	8001d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a0:	f7ff fb7e 	bl	80019a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00

080022b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b4:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_IncTick+0x20>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_IncTick+0x24>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <HAL_IncTick+0x24>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000010 	.word	0x20000010
 80022d4:	20006cc4 	.word	0x20006cc4

080022d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return uwTick;
 80022dc:	4b03      	ldr	r3, [pc, #12]	@ (80022ec <HAL_GetTick+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20006cc4 	.word	0x20006cc4

080022f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff ffee 	bl	80022d8 <HAL_GetTick>
 80022fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002308:	d005      	beq.n	8002316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <HAL_Delay+0x44>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002316:	bf00      	nop
 8002318:	f7ff ffde 	bl	80022d8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d8f7      	bhi.n	8002318 <HAL_Delay+0x28>
  {
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000010 	.word	0x20000010

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	@ (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	@ (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	@ (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	@ 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ff4c 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ba:	f7ff ff61 	bl	8002380 <__NVIC_GetPriorityGrouping>
 80024be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	6978      	ldr	r0, [r7, #20]
 80024c6:	f7ff ffb1 	bl	800242c <NVIC_EncodePriority>
 80024ca:	4602      	mov	r2, r0
 80024cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff80 	bl	80023d8 <__NVIC_SetPriority>
}
 80024d8:	bf00      	nop
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff ff54 	bl	800239c <__NVIC_EnableIRQ>
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff fee6 	bl	80022d8 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e099      	b.n	800264c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002538:	e00f      	b.n	800255a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800253a:	f7ff fecd 	bl	80022d8 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b05      	cmp	r3, #5
 8002546:	d908      	bls.n	800255a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2203      	movs	r2, #3
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e078      	b.n	800264c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e8      	bne.n	800253a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4b38      	ldr	r3, [pc, #224]	@ (8002654 <HAL_DMA_Init+0x158>)
 8002574:	4013      	ands	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002586:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800259e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d107      	bne.n	80025c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025bc:	4313      	orrs	r3, r2
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f023 0307 	bic.w	r3, r3, #7
 80025da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d117      	bne.n	800261e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00e      	beq.n	800261e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fb01 	bl	8002c08 <DMA_CheckFifoParam>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2240      	movs	r2, #64	@ 0x40
 8002610:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800261a:	2301      	movs	r3, #1
 800261c:	e016      	b.n	800264c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fab8 	bl	8002b9c <DMA_CalcBaseAndBitshift>
 800262c:	4603      	mov	r3, r0
 800262e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002634:	223f      	movs	r2, #63	@ 0x3f
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	f010803f 	.word	0xf010803f

08002658 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_DMA_Start_IT+0x26>
 800267a:	2302      	movs	r3, #2
 800267c:	e040      	b.n	8002700 <HAL_DMA_Start_IT+0xa8>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d12f      	bne.n	80026f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2202      	movs	r2, #2
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fa4a 	bl	8002b40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b0:	223f      	movs	r2, #63	@ 0x3f
 80026b2:	409a      	lsls	r2, r3
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0216 	orr.w	r2, r2, #22
 80026c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0208 	orr.w	r2, r2, #8
 80026de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e005      	b.n	80026fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026fa:	2302      	movs	r3, #2
 80026fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002716:	f7ff fddf 	bl	80022d8 <HAL_GetTick>
 800271a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d008      	beq.n	800273a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2280      	movs	r2, #128	@ 0x80
 800272c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e052      	b.n	80027e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0216 	bic.w	r2, r2, #22
 8002748:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002758:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <HAL_DMA_Abort+0x62>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0208 	bic.w	r2, r2, #8
 8002778:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800278a:	e013      	b.n	80027b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800278c:	f7ff fda4 	bl	80022d8 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b05      	cmp	r3, #5
 8002798:	d90c      	bls.n	80027b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2203      	movs	r2, #3
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e015      	b.n	80027e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1e4      	bne.n	800278c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c6:	223f      	movs	r2, #63	@ 0x3f
 80027c8:	409a      	lsls	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d004      	beq.n	8002806 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2280      	movs	r2, #128	@ 0x80
 8002800:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e00c      	b.n	8002820 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2205      	movs	r2, #5
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002838:	4b8e      	ldr	r3, [pc, #568]	@ (8002a74 <HAL_DMA_IRQHandler+0x248>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a8e      	ldr	r2, [pc, #568]	@ (8002a78 <HAL_DMA_IRQHandler+0x24c>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	0a9b      	lsrs	r3, r3, #10
 8002844:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002856:	2208      	movs	r2, #8
 8002858:	409a      	lsls	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4013      	ands	r3, r2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01a      	beq.n	8002898 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0204 	bic.w	r2, r2, #4
 800287e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002884:	2208      	movs	r2, #8
 8002886:	409a      	lsls	r2, r3
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289c:	2201      	movs	r2, #1
 800289e:	409a      	lsls	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d012      	beq.n	80028ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ba:	2201      	movs	r2, #1
 80028bc:	409a      	lsls	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c6:	f043 0202 	orr.w	r2, r3, #2
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d2:	2204      	movs	r2, #4
 80028d4:	409a      	lsls	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d012      	beq.n	8002904 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00b      	beq.n	8002904 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f0:	2204      	movs	r2, #4
 80028f2:	409a      	lsls	r2, r3
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fc:	f043 0204 	orr.w	r2, r3, #4
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002908:	2210      	movs	r2, #16
 800290a:	409a      	lsls	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d043      	beq.n	800299c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d03c      	beq.n	800299c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002926:	2210      	movs	r2, #16
 8002928:	409a      	lsls	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d018      	beq.n	800296e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d108      	bne.n	800295c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d024      	beq.n	800299c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4798      	blx	r3
 800295a:	e01f      	b.n	800299c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01b      	beq.n	800299c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
 800296c:	e016      	b.n	800299c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0208 	bic.w	r2, r2, #8
 800298a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a0:	2220      	movs	r2, #32
 80029a2:	409a      	lsls	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 808f 	beq.w	8002acc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8087 	beq.w	8002acc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c2:	2220      	movs	r2, #32
 80029c4:	409a      	lsls	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d136      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0216 	bic.w	r2, r2, #22
 80029e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <HAL_DMA_IRQHandler+0x1da>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0208 	bic.w	r2, r2, #8
 8002a14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1a:	223f      	movs	r2, #63	@ 0x3f
 8002a1c:	409a      	lsls	r2, r3
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d07e      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	4798      	blx	r3
        }
        return;
 8002a42:	e079      	b.n	8002b38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01d      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10d      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d031      	beq.n	8002acc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
 8002a70:	e02c      	b.n	8002acc <HAL_DMA_IRQHandler+0x2a0>
 8002a72:	bf00      	nop
 8002a74:	20000008 	.word	0x20000008
 8002a78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d023      	beq.n	8002acc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
 8002a8c:	e01e      	b.n	8002acc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10f      	bne.n	8002abc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0210 	bic.w	r2, r2, #16
 8002aaa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d032      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d022      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2205      	movs	r2, #5
 8002ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	3301      	adds	r3, #1
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d307      	bcc.n	8002b14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f2      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x2cc>
 8002b12:	e000      	b.n	8002b16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	4798      	blx	r3
 8002b36:	e000      	b.n	8002b3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b38:	bf00      	nop
    }
  }
}
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b40      	cmp	r3, #64	@ 0x40
 8002b6c:	d108      	bne.n	8002b80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b7e:	e007      	b.n	8002b90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	3b10      	subs	r3, #16
 8002bac:	4a14      	ldr	r2, [pc, #80]	@ (8002c00 <DMA_CalcBaseAndBitshift+0x64>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bb6:	4a13      	ldr	r2, [pc, #76]	@ (8002c04 <DMA_CalcBaseAndBitshift+0x68>)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4413      	add	r3, r2
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d909      	bls.n	8002bde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bd2:	f023 0303 	bic.w	r3, r3, #3
 8002bd6:	1d1a      	adds	r2, r3, #4
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bdc:	e007      	b.n	8002bee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002be6:	f023 0303 	bic.w	r3, r3, #3
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	aaaaaaab 	.word	0xaaaaaaab
 8002c04:	0801dcac 	.word	0x0801dcac

08002c08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d11f      	bne.n	8002c62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d856      	bhi.n	8002cd6 <DMA_CheckFifoParam+0xce>
 8002c28:	a201      	add	r2, pc, #4	@ (adr r2, 8002c30 <DMA_CheckFifoParam+0x28>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002c41 	.word	0x08002c41
 8002c34:	08002c53 	.word	0x08002c53
 8002c38:	08002c41 	.word	0x08002c41
 8002c3c:	08002cd7 	.word	0x08002cd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d046      	beq.n	8002cda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c50:	e043      	b.n	8002cda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c5a:	d140      	bne.n	8002cde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c60:	e03d      	b.n	8002cde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c6a:	d121      	bne.n	8002cb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d837      	bhi.n	8002ce2 <DMA_CheckFifoParam+0xda>
 8002c72:	a201      	add	r2, pc, #4	@ (adr r2, 8002c78 <DMA_CheckFifoParam+0x70>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002c89 	.word	0x08002c89
 8002c7c:	08002c8f 	.word	0x08002c8f
 8002c80:	08002c89 	.word	0x08002c89
 8002c84:	08002ca1 	.word	0x08002ca1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8c:	e030      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d025      	beq.n	8002ce6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9e:	e022      	b.n	8002ce6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ca8:	d11f      	bne.n	8002cea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cae:	e01c      	b.n	8002cea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d903      	bls.n	8002cbe <DMA_CheckFifoParam+0xb6>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d003      	beq.n	8002cc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cbc:	e018      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc2:	e015      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00e      	beq.n	8002cee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd4:	e00b      	b.n	8002cee <DMA_CheckFifoParam+0xe6>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e00a      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e008      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e006      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e004      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e002      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cea:	bf00      	nop
 8002cec:	e000      	b.n	8002cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cee:	bf00      	nop
    }
  } 
  
  return status; 
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop

08002d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	@ 0x24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	e16b      	b.n	8002ff4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	f040 815a 	bne.w	8002fee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d005      	beq.n	8002d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d130      	bne.n	8002db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d88:	2201      	movs	r2, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 0201 	and.w	r2, r3, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d017      	beq.n	8002df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d123      	bne.n	8002e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	08da      	lsrs	r2, r3, #3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3208      	adds	r2, #8
 8002e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	220f      	movs	r2, #15
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	08da      	lsrs	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3208      	adds	r2, #8
 8002e3e:	69b9      	ldr	r1, [r7, #24]
 8002e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	2203      	movs	r2, #3
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0203 	and.w	r2, r3, #3
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80b4 	beq.w	8002fee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b60      	ldr	r3, [pc, #384]	@ (800300c <HAL_GPIO_Init+0x30c>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	4a5f      	ldr	r2, [pc, #380]	@ (800300c <HAL_GPIO_Init+0x30c>)
 8002e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e96:	4b5d      	ldr	r3, [pc, #372]	@ (800300c <HAL_GPIO_Init+0x30c>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8003010 <HAL_GPIO_Init+0x310>)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	220f      	movs	r2, #15
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a52      	ldr	r2, [pc, #328]	@ (8003014 <HAL_GPIO_Init+0x314>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d02b      	beq.n	8002f26 <HAL_GPIO_Init+0x226>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a51      	ldr	r2, [pc, #324]	@ (8003018 <HAL_GPIO_Init+0x318>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d025      	beq.n	8002f22 <HAL_GPIO_Init+0x222>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a50      	ldr	r2, [pc, #320]	@ (800301c <HAL_GPIO_Init+0x31c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01f      	beq.n	8002f1e <HAL_GPIO_Init+0x21e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8003020 <HAL_GPIO_Init+0x320>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d019      	beq.n	8002f1a <HAL_GPIO_Init+0x21a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a4e      	ldr	r2, [pc, #312]	@ (8003024 <HAL_GPIO_Init+0x324>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_GPIO_Init+0x216>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a4d      	ldr	r2, [pc, #308]	@ (8003028 <HAL_GPIO_Init+0x328>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00d      	beq.n	8002f12 <HAL_GPIO_Init+0x212>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800302c <HAL_GPIO_Init+0x32c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <HAL_GPIO_Init+0x20e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4b      	ldr	r2, [pc, #300]	@ (8003030 <HAL_GPIO_Init+0x330>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d101      	bne.n	8002f0a <HAL_GPIO_Init+0x20a>
 8002f06:	2307      	movs	r3, #7
 8002f08:	e00e      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	e00c      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f0e:	2306      	movs	r3, #6
 8002f10:	e00a      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f12:	2305      	movs	r3, #5
 8002f14:	e008      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f16:	2304      	movs	r3, #4
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e004      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e002      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_GPIO_Init+0x228>
 8002f26:	2300      	movs	r3, #0
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	f002 0203 	and.w	r2, r2, #3
 8002f2e:	0092      	lsls	r2, r2, #2
 8002f30:	4093      	lsls	r3, r2
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f38:	4935      	ldr	r1, [pc, #212]	@ (8003010 <HAL_GPIO_Init+0x310>)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	3302      	adds	r3, #2
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f46:	4b3b      	ldr	r3, [pc, #236]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f6a:	4a32      	ldr	r2, [pc, #200]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f70:	4b30      	ldr	r3, [pc, #192]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f94:	4a27      	ldr	r2, [pc, #156]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f9a:	4b26      	ldr	r3, [pc, #152]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fe8:	4a12      	ldr	r2, [pc, #72]	@ (8003034 <HAL_GPIO_Init+0x334>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b0f      	cmp	r3, #15
 8002ff8:	f67f ae90 	bls.w	8002d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3724      	adds	r7, #36	@ 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	40013800 	.word	0x40013800
 8003014:	40020000 	.word	0x40020000
 8003018:	40020400 	.word	0x40020400
 800301c:	40020800 	.word	0x40020800
 8003020:	40020c00 	.word	0x40020c00
 8003024:	40021000 	.word	0x40021000
 8003028:	40021400 	.word	0x40021400
 800302c:	40021800 	.word	0x40021800
 8003030:	40021c00 	.word	0x40021c00
 8003034:	40013c00 	.word	0x40013c00

08003038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
 8003054:	e001      	b.n	800305a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
 8003074:	4613      	mov	r3, r2
 8003076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003078:	787b      	ldrb	r3, [r7, #1]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003084:	e003      	b.n	800308e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	041a      	lsls	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	619a      	str	r2, [r3, #24]
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af02      	add	r7, sp, #8
 80030a0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e059      	b.n	8003160 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f00c fbea 	bl	800f8a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2203      	movs	r2, #3
 80030d0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030da:	d102      	bne.n	80030e2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f006 f88f 	bl	800920a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7c1a      	ldrb	r2, [r3, #16]
 80030f4:	f88d 2000 	strb.w	r2, [sp]
 80030f8:	3304      	adds	r3, #4
 80030fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030fc:	f006 f810 	bl	8009120 <USB_CoreInit>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e026      	b.n	8003160 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2101      	movs	r1, #1
 8003118:	4618      	mov	r0, r3
 800311a:	f006 f887 	bl	800922c <USB_SetCurrentMode>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e017      	b.n	8003160 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	7c1a      	ldrb	r2, [r3, #16]
 8003138:	f88d 2000 	strb.w	r2, [sp]
 800313c:	3304      	adds	r3, #4
 800313e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003140:	f006 fa30 	bl	80095a4 <USB_HostInit>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e004      	b.n	8003160 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b08b      	sub	sp, #44	@ 0x2c
 800316c:	af04      	add	r7, sp, #16
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	70fb      	strb	r3, [r7, #3]
 800317a:	460b      	mov	r3, r1
 800317c:	70bb      	strb	r3, [r7, #2]
 800317e:	4613      	mov	r3, r2
 8003180:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003182:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003184:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_HCD_HC_Init+0x2c>
 8003190:	2302      	movs	r3, #2
 8003192:	e09d      	b.n	80032d0 <HAL_HCD_HC_Init+0x168>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	3319      	adds	r3, #25
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	3314      	adds	r3, #20
 80031c0:	787a      	ldrb	r2, [r7, #1]
 80031c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	3315      	adds	r3, #21
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3326      	adds	r3, #38	@ 0x26
 80031e8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80031ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	78bb      	ldrb	r3, [r7, #2]
 80031f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031f6:	b2d8      	uxtb	r0, r3
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	3316      	adds	r3, #22
 8003206:	4602      	mov	r2, r0
 8003208:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fbc8 	bl	80039a4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003214:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003218:	2b00      	cmp	r3, #0
 800321a:	da0a      	bge.n	8003232 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	3317      	adds	r3, #23
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	e009      	b.n	8003246 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	3317      	adds	r3, #23
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f006 fb0e 	bl	800986c <USB_GetHostSpeed>
 8003250:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003252:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d10b      	bne.n	8003272 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800325a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800325e:	2b01      	cmp	r3, #1
 8003260:	d107      	bne.n	8003272 <HAL_HCD_HC_Init+0x10a>
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2bbc      	cmp	r3, #188	@ 0xbc
 800326c:	d901      	bls.n	8003272 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800326e:	23bc      	movs	r3, #188	@ 0xbc
 8003270:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	3318      	adds	r3, #24
 8003282:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003286:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	b298      	uxth	r0, r3
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3328      	adds	r3, #40	@ 0x28
 800329c:	4602      	mov	r2, r0
 800329e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	787c      	ldrb	r4, [r7, #1]
 80032aa:	78ba      	ldrb	r2, [r7, #2]
 80032ac:	78f9      	ldrb	r1, [r7, #3]
 80032ae:	9302      	str	r3, [sp, #8]
 80032b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	4623      	mov	r3, r4
 80032be:	f006 fafd 	bl	80098bc <USB_HC_Init>
 80032c2:	4603      	mov	r3, r0
 80032c4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd90      	pop	{r4, r7, pc}

080032d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_HCD_HC_Halt+0x1e>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e00f      	b.n	8003316 <HAL_HCD_HC_Halt+0x3e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f006 fe8f 	bl	800a02a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003314:	7bfb      	ldrb	r3, [r7, #15]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	461a      	mov	r2, r3
 800332e:	4603      	mov	r3, r0
 8003330:	70fb      	strb	r3, [r7, #3]
 8003332:	460b      	mov	r3, r1
 8003334:	70bb      	strb	r3, [r7, #2]
 8003336:	4613      	mov	r3, r2
 8003338:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3317      	adds	r3, #23
 800334a:	78ba      	ldrb	r2, [r7, #2]
 800334c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3326      	adds	r3, #38	@ 0x26
 800335e:	787a      	ldrb	r2, [r7, #1]
 8003360:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003362:	7c3b      	ldrb	r3, [r7, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d114      	bne.n	8003392 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	332a      	adds	r3, #42	@ 0x2a
 8003378:	2203      	movs	r2, #3
 800337a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3319      	adds	r3, #25
 800338c:	7f3a      	ldrb	r2, [r7, #28]
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e009      	b.n	80033a6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	332a      	adds	r3, #42	@ 0x2a
 80033a2:	2202      	movs	r2, #2
 80033a4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80033a6:	787b      	ldrb	r3, [r7, #1]
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	f200 8102 	bhi.w	80035b2 <HAL_HCD_HC_SubmitRequest+0x292>
 80033ae:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	0800359d 	.word	0x0800359d
 80033bc:	08003489 	.word	0x08003489
 80033c0:	08003513 	.word	0x08003513
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80033c4:	7c3b      	ldrb	r3, [r7, #16]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	f040 80f5 	bne.w	80035b6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80033cc:	78bb      	ldrb	r3, [r7, #2]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d12d      	bne.n	800342e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80033d2:	8b3b      	ldrh	r3, [r7, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	333d      	adds	r3, #61	@ 0x3d
 80033e8:	2201      	movs	r2, #1
 80033ea:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	333d      	adds	r3, #61	@ 0x3d
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	332a      	adds	r3, #42	@ 0x2a
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003416:	e0ce      	b.n	80035b6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	332a      	adds	r3, #42	@ 0x2a
 8003428:	2202      	movs	r2, #2
 800342a:	701a      	strb	r2, [r3, #0]
      break;
 800342c:	e0c3      	b.n	80035b6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	331a      	adds	r3, #26
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	f040 80b8 	bne.w	80035b6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	333c      	adds	r3, #60	@ 0x3c
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10a      	bne.n	8003472 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	332a      	adds	r3, #42	@ 0x2a
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
      break;
 8003470:	e0a1      	b.n	80035b6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	332a      	adds	r3, #42	@ 0x2a
 8003482:	2202      	movs	r2, #2
 8003484:	701a      	strb	r2, [r3, #0]
      break;
 8003486:	e096      	b.n	80035b6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003488:	78bb      	ldrb	r3, [r7, #2]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d120      	bne.n	80034d0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	333d      	adds	r3, #61	@ 0x3d
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	332a      	adds	r3, #42	@ 0x2a
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80034b8:	e07e      	b.n	80035b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	332a      	adds	r3, #42	@ 0x2a
 80034ca:	2202      	movs	r2, #2
 80034cc:	701a      	strb	r2, [r3, #0]
      break;
 80034ce:	e073      	b.n	80035b8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	333c      	adds	r3, #60	@ 0x3c
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10a      	bne.n	80034fc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	332a      	adds	r3, #42	@ 0x2a
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
      break;
 80034fa:	e05d      	b.n	80035b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	332a      	adds	r3, #42	@ 0x2a
 800350c:	2202      	movs	r2, #2
 800350e:	701a      	strb	r2, [r3, #0]
      break;
 8003510:	e052      	b.n	80035b8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003512:	78bb      	ldrb	r3, [r7, #2]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d120      	bne.n	800355a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	333d      	adds	r3, #61	@ 0x3d
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10a      	bne.n	8003544 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	332a      	adds	r3, #42	@ 0x2a
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003542:	e039      	b.n	80035b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	332a      	adds	r3, #42	@ 0x2a
 8003554:	2202      	movs	r2, #2
 8003556:	701a      	strb	r2, [r3, #0]
      break;
 8003558:	e02e      	b.n	80035b8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	333c      	adds	r3, #60	@ 0x3c
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10a      	bne.n	8003586 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	332a      	adds	r3, #42	@ 0x2a
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
      break;
 8003584:	e018      	b.n	80035b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	332a      	adds	r3, #42	@ 0x2a
 8003596:	2202      	movs	r2, #2
 8003598:	701a      	strb	r2, [r3, #0]
      break;
 800359a:	e00d      	b.n	80035b8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	332a      	adds	r3, #42	@ 0x2a
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
      break;
 80035b0:	e002      	b.n	80035b8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80035b2:	bf00      	nop
 80035b4:	e000      	b.n	80035b8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80035b6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	332c      	adds	r3, #44	@ 0x2c
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	8b39      	ldrh	r1, [r7, #24]
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4403      	add	r3, r0
 80035dc:	3334      	adds	r3, #52	@ 0x34
 80035de:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	334c      	adds	r3, #76	@ 0x4c
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3338      	adds	r3, #56	@ 0x38
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	3315      	adds	r3, #21
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	334d      	adds	r3, #77	@ 0x4d
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	4613      	mov	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	3310      	adds	r3, #16
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	4413      	add	r3, r2
 8003644:	1d19      	adds	r1, r3, #4
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	799b      	ldrb	r3, [r3, #6]
 800364a:	461a      	mov	r2, r3
 800364c:	f006 fa62 	bl	8009b14 <USB_HC_StartXfer>
 8003650:	4603      	mov	r3, r0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop

0800365c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f005 ff50 	bl	8009518 <USB_GetMode>
 8003678:	4603      	mov	r3, r0
 800367a:	2b01      	cmp	r3, #1
 800367c:	f040 80fb 	bne.w	8003876 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f005 ff13 	bl	80094b0 <USB_ReadInterrupts>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80f1 	beq.w	8003874 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f005 ff0a 	bl	80094b0 <USB_ReadInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036a6:	d104      	bne.n	80036b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80036b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f005 fefa 	bl	80094b0 <USB_ReadInterrupts>
 80036bc:	4603      	mov	r3, r0
 80036be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036c6:	d104      	bne.n	80036d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80036d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f005 feea 	bl	80094b0 <USB_ReadInterrupts>
 80036dc:	4603      	mov	r3, r0
 80036de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036e6:	d104      	bne.n	80036f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80036f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f005 feda 	bl	80094b0 <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b02      	cmp	r3, #2
 8003704:	d103      	bne.n	800370e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2202      	movs	r2, #2
 800370c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f005 fecc 	bl	80094b0 <USB_ReadInterrupts>
 8003718:	4603      	mov	r3, r0
 800371a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800371e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003722:	d120      	bne.n	8003766 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800372c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d113      	bne.n	8003766 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800373e:	2110      	movs	r1, #16
 8003740:	6938      	ldr	r0, [r7, #16]
 8003742:	f005 fdbf 	bl	80092c4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003746:	6938      	ldr	r0, [r7, #16]
 8003748:	f005 fdee 	bl	8009328 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7a5b      	ldrb	r3, [r3, #9]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d105      	bne.n	8003760 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2101      	movs	r1, #1
 800375a:	4618      	mov	r0, r3
 800375c:	f005 ffe6 	bl	800972c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f00c f91b 	bl	800f99c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f005 fea0 	bl	80094b0 <USB_ReadInterrupts>
 8003770:	4603      	mov	r3, r0
 8003772:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003776:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800377a:	d102      	bne.n	8003782 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f001 fd4d 	bl	800521c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f005 fe92 	bl	80094b0 <USB_ReadInterrupts>
 800378c:	4603      	mov	r3, r0
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b08      	cmp	r3, #8
 8003794:	d106      	bne.n	80037a4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f00c f8e4 	bl	800f964 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2208      	movs	r2, #8
 80037a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f005 fe81 	bl	80094b0 <USB_ReadInterrupts>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037b8:	d139      	bne.n	800382e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f006 fc22 	bl	800a008 <USB_HC_ReadInterrupt>
 80037c4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e025      	b.n	8003818 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d018      	beq.n	8003812 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037f6:	d106      	bne.n	8003806 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	4619      	mov	r1, r3
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f905 	bl	8003a0e <HCD_HC_IN_IRQHandler>
 8003804:	e005      	b.n	8003812 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 ff67 	bl	80046e0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	3301      	adds	r3, #1
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	795b      	ldrb	r3, [r3, #5]
 800381c:	461a      	mov	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	4293      	cmp	r3, r2
 8003822:	d3d3      	bcc.n	80037cc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800382c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f005 fe3c 	bl	80094b0 <USB_ReadInterrupts>
 8003838:	4603      	mov	r3, r0
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b10      	cmp	r3, #16
 8003840:	d101      	bne.n	8003846 <HAL_HCD_IRQHandler+0x1ea>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_HCD_IRQHandler+0x1ec>
 8003846:	2300      	movs	r3, #0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d014      	beq.n	8003876 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0210 	bic.w	r2, r2, #16
 800385a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f001 fbfe 	bl	800505e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0210 	orr.w	r2, r2, #16
 8003870:	619a      	str	r2, [r3, #24]
 8003872:	e000      	b.n	8003876 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003874:	bf00      	nop
    }
  }
}
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_HCD_Start+0x16>
 800388e:	2302      	movs	r3, #2
 8003890:	e013      	b.n	80038ba <HAL_HCD_Start+0x3e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f005 ffaa 	bl	80097fa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f005 fc9c 	bl	80091e8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_HCD_Stop+0x16>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e00d      	b.n	80038f4 <HAL_HCD_Stop+0x32>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f006 fcfd 	bl	800a2e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f005 ff4c 	bl	80097a6 <USB_ResetPort>
 800390e:	4603      	mov	r3, r0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003924:	78fa      	ldrb	r2, [r7, #3]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	334c      	adds	r3, #76	@ 0x4c
 8003934:	781b      	ldrb	r3, [r3, #0]
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	3338      	adds	r3, #56	@ 0x38
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f005 ff8e 	bl	800989a <USB_GetCurrentFrame>
 800397e:	4603      	mov	r3, r0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f005 ff69 	bl	800986c <USB_GetHostSpeed>
 800399a:	4603      	mov	r3, r0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	331a      	adds	r3, #26
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	331b      	adds	r3, #27
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	3325      	adds	r3, #37	@ 0x25
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3324      	adds	r3, #36	@ 0x24
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b086      	sub	sp, #24
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	460b      	mov	r3, r1
 8003a18:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	78fa      	ldrb	r2, [r7, #3]
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f005 fd52 	bl	80094d6 <USB_ReadChInterrupts>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d11a      	bne.n	8003a72 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	334d      	adds	r3, #77	@ 0x4d
 8003a5e:	2207      	movs	r2, #7
 8003a60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f006 fadd 	bl	800a02a <USB_HC_Halt>
 8003a70:	e09e      	b.n	8003bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f005 fd2b 	bl	80094d6 <USB_ReadChInterrupts>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a8a:	d11b      	bne.n	8003ac4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	334d      	adds	r3, #77	@ 0x4d
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	4611      	mov	r1, r2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f006 fab4 	bl	800a02a <USB_HC_Halt>
 8003ac2:	e075      	b.n	8003bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	4611      	mov	r1, r2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f005 fd02 	bl	80094d6 <USB_ReadChInterrupts>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d11a      	bne.n	8003b12 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2308      	movs	r3, #8
 8003aec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	334d      	adds	r3, #77	@ 0x4d
 8003afe:	2206      	movs	r2, #6
 8003b00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	78fa      	ldrb	r2, [r7, #3]
 8003b08:	4611      	mov	r1, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f006 fa8d 	bl	800a02a <USB_HC_Halt>
 8003b10:	e04e      	b.n	8003bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f005 fcdb 	bl	80094d6 <USB_ReadChInterrupts>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b2a:	d11b      	bne.n	8003b64 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	334d      	adds	r3, #77	@ 0x4d
 8003b50:	2209      	movs	r2, #9
 8003b52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f006 fa64 	bl	800a02a <USB_HC_Halt>
 8003b62:	e025      	b.n	8003bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f005 fcb2 	bl	80094d6 <USB_ReadChInterrupts>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b78:	2b80      	cmp	r3, #128	@ 0x80
 8003b7a:	d119      	bne.n	8003bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2380      	movs	r3, #128	@ 0x80
 8003b8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	334d      	adds	r3, #77	@ 0x4d
 8003b9e:	2207      	movs	r2, #7
 8003ba0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	4611      	mov	r1, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f006 fa3d 	bl	800a02a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f005 fc8c 	bl	80094d6 <USB_ReadChInterrupts>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc8:	d112      	bne.n	8003bf0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f006 fa29 	bl	800a02a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be4:	461a      	mov	r2, r3
 8003be6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bea:	6093      	str	r3, [r2, #8]
 8003bec:	f000 bd75 	b.w	80046da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f005 fc6c 	bl	80094d6 <USB_ReadChInterrupts>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	f040 8128 	bne.w	8003e5a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c16:	461a      	mov	r2, r3
 8003c18:	2320      	movs	r3, #32
 8003c1a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003c1c:	78fa      	ldrb	r2, [r7, #3]
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	331b      	adds	r3, #27
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d119      	bne.n	8003c66 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	331b      	adds	r3, #27
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	0151      	lsls	r1, r2, #5
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	440a      	add	r2, r1
 8003c5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c64:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	799b      	ldrb	r3, [r3, #6]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01b      	beq.n	8003ca6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	3330      	adds	r3, #48	@ 0x30
 8003c7e:	6819      	ldr	r1, [r3, #0]
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	1ac9      	subs	r1, r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4403      	add	r3, r0
 8003ca2:	3338      	adds	r3, #56	@ 0x38
 8003ca4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	334d      	adds	r3, #77	@ 0x4d
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3344      	adds	r3, #68	@ 0x44
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2301      	movs	r3, #1
 8003cde:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3326      	adds	r3, #38	@ 0x26
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3326      	adds	r3, #38	@ 0x26
 8003d06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d110      	bne.n	8003d2e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f006 f988 	bl	800a02a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d26:	461a      	mov	r2, r3
 8003d28:	2310      	movs	r3, #16
 8003d2a:	6093      	str	r3, [r2, #8]
 8003d2c:	e03d      	b.n	8003daa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d2e:	78fa      	ldrb	r2, [r7, #3]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3326      	adds	r3, #38	@ 0x26
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d00a      	beq.n	8003d5a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	3326      	adds	r3, #38	@ 0x26
 8003d54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d127      	bne.n	8003daa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	0151      	lsls	r1, r2, #5
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	440a      	add	r2, r1
 8003d70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d78:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	334c      	adds	r3, #76	@ 0x4c
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	334c      	adds	r3, #76	@ 0x4c
 8003d9e:	781a      	ldrb	r2, [r3, #0]
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	4619      	mov	r1, r3
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f00b fe07 	bl	800f9b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	799b      	ldrb	r3, [r3, #6]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d13b      	bne.n	8003e2a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	3338      	adds	r3, #56	@ 0x38
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	78fa      	ldrb	r2, [r7, #3]
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4403      	add	r3, r0
 8003dd2:	3328      	adds	r3, #40	@ 0x28
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	440b      	add	r3, r1
 8003dd8:	1e59      	subs	r1, r3, #1
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4403      	add	r3, r0
 8003de8:	3328      	adds	r3, #40	@ 0x28
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8470 	beq.w	80046da <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	333c      	adds	r3, #60	@ 0x3c
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	f083 0301 	eor.w	r3, r3, #1
 8003e12:	b2d8      	uxtb	r0, r3
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	1a9b      	subs	r3, r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	333c      	adds	r3, #60	@ 0x3c
 8003e22:	4602      	mov	r2, r0
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	f000 bc58 	b.w	80046da <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	333c      	adds	r3, #60	@ 0x3c
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	f083 0301 	eor.w	r3, r3, #1
 8003e42:	b2d8      	uxtb	r0, r3
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	333c      	adds	r3, #60	@ 0x3c
 8003e52:	4602      	mov	r2, r0
 8003e54:	701a      	strb	r2, [r3, #0]
 8003e56:	f000 bc40 	b.w	80046da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f005 fb37 	bl	80094d6 <USB_ReadChInterrupts>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d131      	bne.n	8003ed6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2320      	movs	r3, #32
 8003e82:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	331a      	adds	r3, #26
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	f040 841f 	bne.w	80046da <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	331b      	adds	r3, #27
 8003eac:	2201      	movs	r2, #1
 8003eae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	334d      	adds	r3, #77	@ 0x4d
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	78fa      	ldrb	r2, [r7, #3]
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f006 f8ac 	bl	800a02a <USB_HC_Halt>
 8003ed2:	f000 bc02 	b.w	80046da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f005 faf9 	bl	80094d6 <USB_ReadChInterrupts>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	f040 8305 	bne.w	80044fa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003efc:	461a      	mov	r2, r3
 8003efe:	2302      	movs	r3, #2
 8003f00:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	334d      	adds	r3, #77	@ 0x4d
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d114      	bne.n	8003f42 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	334d      	adds	r3, #77	@ 0x4d
 8003f28:	2202      	movs	r2, #2
 8003f2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f2c:	78fa      	ldrb	r2, [r7, #3]
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	334c      	adds	r3, #76	@ 0x4c
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	e2cc      	b.n	80044dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	334d      	adds	r3, #77	@ 0x4d
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b06      	cmp	r3, #6
 8003f56:	d114      	bne.n	8003f82 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	334d      	adds	r3, #77	@ 0x4d
 8003f68:	2202      	movs	r2, #2
 8003f6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	334c      	adds	r3, #76	@ 0x4c
 8003f7c:	2205      	movs	r2, #5
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e2ac      	b.n	80044dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	334d      	adds	r3, #77	@ 0x4d
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b07      	cmp	r3, #7
 8003f96:	d00b      	beq.n	8003fb0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	334d      	adds	r3, #77	@ 0x4d
 8003fa8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003faa:	2b09      	cmp	r3, #9
 8003fac:	f040 80a6 	bne.w	80040fc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	334d      	adds	r3, #77	@ 0x4d
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	3344      	adds	r3, #68	@ 0x44
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	1c59      	adds	r1, r3, #1
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4403      	add	r3, r0
 8003fe4:	3344      	adds	r3, #68	@ 0x44
 8003fe6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3344      	adds	r3, #68	@ 0x44
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d943      	bls.n	8004086 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3344      	adds	r3, #68	@ 0x44
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	331a      	adds	r3, #26
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d123      	bne.n	8004070 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	331b      	adds	r3, #27
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	331c      	adds	r3, #28
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4413      	add	r3, r2
 8004058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	440a      	add	r2, r1
 8004066:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800406a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800406e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	334c      	adds	r3, #76	@ 0x4c
 8004080:	2204      	movs	r2, #4
 8004082:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004084:	e229      	b.n	80044da <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	334c      	adds	r3, #76	@ 0x4c
 8004096:	2202      	movs	r2, #2
 8004098:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800409a:	78fa      	ldrb	r2, [r7, #3]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	3326      	adds	r3, #38	@ 0x26
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00b      	beq.n	80040c8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	3326      	adds	r3, #38	@ 0x26
 80040c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	f040 8209 	bne.w	80044da <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f4:	461a      	mov	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040fa:	e1ee      	b.n	80044da <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	334d      	adds	r3, #77	@ 0x4d
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b05      	cmp	r3, #5
 8004110:	f040 80c8 	bne.w	80042a4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004114:	78fa      	ldrb	r2, [r7, #3]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	334d      	adds	r3, #77	@ 0x4d
 8004124:	2202      	movs	r2, #2
 8004126:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	331b      	adds	r3, #27
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	f040 81ce 	bne.w	80044dc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3326      	adds	r3, #38	@ 0x26
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d16b      	bne.n	800422e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	3348      	adds	r3, #72	@ 0x48
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	1c59      	adds	r1, r3, #1
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4403      	add	r3, r0
 8004176:	3348      	adds	r3, #72	@ 0x48
 8004178:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	3348      	adds	r3, #72	@ 0x48
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d943      	bls.n	8004218 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	3348      	adds	r3, #72	@ 0x48
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	331b      	adds	r3, #27
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	3344      	adds	r3, #68	@ 0x44
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d809      	bhi.n	80041e2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	331c      	adds	r3, #28
 80041de:	2201      	movs	r2, #1
 80041e0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	0151      	lsls	r1, r2, #5
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	440a      	add	r2, r1
 80041f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004200:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004202:	78fa      	ldrb	r2, [r7, #3]
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	334c      	adds	r3, #76	@ 0x4c
 8004212:	2204      	movs	r2, #4
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	e014      	b.n	8004242 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	334c      	adds	r3, #76	@ 0x4c
 8004228:	2202      	movs	r2, #2
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	e009      	b.n	8004242 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800422e:	78fa      	ldrb	r2, [r7, #3]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	334c      	adds	r3, #76	@ 0x4c
 800423e:	2202      	movs	r2, #2
 8004240:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	3326      	adds	r3, #38	@ 0x26
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00b      	beq.n	8004270 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	3326      	adds	r3, #38	@ 0x26
 8004268:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800426a:	2b02      	cmp	r3, #2
 800426c:	f040 8136 	bne.w	80044dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004286:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800428e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4413      	add	r3, r2
 8004298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800429c:	461a      	mov	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e11b      	b.n	80044dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	334d      	adds	r3, #77	@ 0x4d
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	f040 8081 	bne.w	80043be <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	334d      	adds	r3, #77	@ 0x4d
 80042cc:	2202      	movs	r2, #2
 80042ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042d0:	78fa      	ldrb	r2, [r7, #3]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	331b      	adds	r3, #27
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	f040 80fa 	bne.w	80044dc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	334c      	adds	r3, #76	@ 0x4c
 80042f8:	2202      	movs	r2, #2
 80042fa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	440a      	add	r2, r1
 8004312:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800431a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4413      	add	r3, r2
 8004324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	0151      	lsls	r1, r2, #5
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	440a      	add	r2, r1
 8004332:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800433a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4413      	add	r3, r2
 8004344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	0151      	lsls	r1, r2, #5
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	440a      	add	r2, r1
 8004352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004356:	f023 0320 	bic.w	r3, r3, #32
 800435a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800435c:	78fa      	ldrb	r2, [r7, #3]
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	4613      	mov	r3, r2
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	3326      	adds	r3, #38	@ 0x26
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	3326      	adds	r3, #38	@ 0x26
 8004382:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004384:	2b02      	cmp	r3, #2
 8004386:	f040 80a9 	bne.w	80044dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4413      	add	r3, r2
 8004392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043b6:	461a      	mov	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	e08e      	b.n	80044dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	334d      	adds	r3, #77	@ 0x4d
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d143      	bne.n	800445c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	334d      	adds	r3, #77	@ 0x4d
 80043e4:	2202      	movs	r2, #2
 80043e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	334c      	adds	r3, #76	@ 0x4c
 80043f8:	2202      	movs	r2, #2
 80043fa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043fc:	78fa      	ldrb	r2, [r7, #3]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	3326      	adds	r3, #38	@ 0x26
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	3326      	adds	r3, #38	@ 0x26
 8004422:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004424:	2b02      	cmp	r3, #2
 8004426:	d159      	bne.n	80044dc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800443e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004446:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4413      	add	r3, r2
 8004450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004454:	461a      	mov	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e03f      	b.n	80044dc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800445c:	78fa      	ldrb	r2, [r7, #3]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	334d      	adds	r3, #77	@ 0x4d
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b08      	cmp	r3, #8
 8004470:	d126      	bne.n	80044c0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	334d      	adds	r3, #77	@ 0x4d
 8004482:	2202      	movs	r2, #2
 8004484:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	3344      	adds	r3, #68	@ 0x44
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	1c59      	adds	r1, r3, #1
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4403      	add	r3, r0
 80044a6:	3344      	adds	r3, #68	@ 0x44
 80044a8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80044aa:	78fa      	ldrb	r2, [r7, #3]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	334c      	adds	r3, #76	@ 0x4c
 80044ba:	2204      	movs	r2, #4
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	e00d      	b.n	80044dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80044c0:	78fa      	ldrb	r2, [r7, #3]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	334d      	adds	r3, #77	@ 0x4d
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	f000 8100 	beq.w	80046d8 <HCD_HC_IN_IRQHandler+0xcca>
 80044d8:	e000      	b.n	80044dc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044da:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	334c      	adds	r3, #76	@ 0x4c
 80044ec:	781a      	ldrb	r2, [r3, #0]
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	4619      	mov	r1, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f00b fa60 	bl	800f9b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044f8:	e0ef      	b.n	80046da <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f004 ffe7 	bl	80094d6 <USB_ReadChInterrupts>
 8004508:	4603      	mov	r3, r0
 800450a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450e:	2b40      	cmp	r3, #64	@ 0x40
 8004510:	d12f      	bne.n	8004572 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	4413      	add	r3, r2
 800451a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800451e:	461a      	mov	r2, r3
 8004520:	2340      	movs	r3, #64	@ 0x40
 8004522:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	334d      	adds	r3, #77	@ 0x4d
 8004534:	2205      	movs	r2, #5
 8004536:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	331a      	adds	r3, #26
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	3344      	adds	r3, #68	@ 0x44
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f005 fd5d 	bl	800a02a <USB_HC_Halt>
 8004570:	e0b3      	b.n	80046da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	4611      	mov	r1, r2
 800457a:	4618      	mov	r0, r3
 800457c:	f004 ffab 	bl	80094d6 <USB_ReadChInterrupts>
 8004580:	4603      	mov	r3, r0
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b10      	cmp	r3, #16
 8004588:	f040 80a7 	bne.w	80046da <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	3326      	adds	r3, #38	@ 0x26
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d11b      	bne.n	80045da <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	3344      	adds	r3, #68	@ 0x44
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	334d      	adds	r3, #77	@ 0x4d
 80045c6:	2204      	movs	r2, #4
 80045c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	78fa      	ldrb	r2, [r7, #3]
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f005 fd29 	bl	800a02a <USB_HC_Halt>
 80045d8:	e03f      	b.n	800465a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	3326      	adds	r3, #38	@ 0x26
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	3326      	adds	r3, #38	@ 0x26
 8004600:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004602:	2b02      	cmp	r3, #2
 8004604:	d129      	bne.n	800465a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004606:	78fa      	ldrb	r2, [r7, #3]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	3344      	adds	r3, #68	@ 0x44
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	799b      	ldrb	r3, [r3, #6]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HCD_HC_IN_IRQHandler+0xc2a>
 8004622:	78fa      	ldrb	r2, [r7, #3]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	331b      	adds	r3, #27
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d110      	bne.n	800465a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	334d      	adds	r3, #77	@ 0x4d
 8004648:	2204      	movs	r2, #4
 800464a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	4611      	mov	r1, r2
 8004654:	4618      	mov	r0, r3
 8004656:	f005 fce8 	bl	800a02a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800465a:	78fa      	ldrb	r2, [r7, #3]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	331b      	adds	r3, #27
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d129      	bne.n	80046c4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004670:	78fa      	ldrb	r2, [r7, #3]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	331b      	adds	r3, #27
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4413      	add	r3, r2
 800468c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	78fa      	ldrb	r2, [r7, #3]
 8004694:	0151      	lsls	r1, r2, #5
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	440a      	add	r2, r1
 800469a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800469e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046a2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	0151      	lsls	r1, r2, #5
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	440a      	add	r2, r1
 80046ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046be:	f043 0320 	orr.w	r3, r3, #32
 80046c2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d0:	461a      	mov	r2, r3
 80046d2:	2310      	movs	r3, #16
 80046d4:	6093      	str	r3, [r2, #8]
 80046d6:	e000      	b.n	80046da <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80046d8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	78fa      	ldrb	r2, [r7, #3]
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f004 fee9 	bl	80094d6 <USB_ReadChInterrupts>
 8004704:	4603      	mov	r3, r0
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b04      	cmp	r3, #4
 800470c:	d11b      	bne.n	8004746 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4413      	add	r3, r2
 8004716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800471a:	461a      	mov	r2, r3
 800471c:	2304      	movs	r3, #4
 800471e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	334d      	adds	r3, #77	@ 0x4d
 8004730:	2207      	movs	r2, #7
 8004732:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f005 fc74 	bl	800a02a <USB_HC_Halt>
 8004742:	f000 bc89 	b.w	8005058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	4611      	mov	r1, r2
 800474e:	4618      	mov	r0, r3
 8004750:	f004 fec1 	bl	80094d6 <USB_ReadChInterrupts>
 8004754:	4603      	mov	r3, r0
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b20      	cmp	r3, #32
 800475c:	f040 8082 	bne.w	8004864 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4413      	add	r3, r2
 8004768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800476c:	461a      	mov	r2, r3
 800476e:	2320      	movs	r3, #32
 8004770:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	3319      	adds	r3, #25
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d124      	bne.n	80047d2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	3319      	adds	r3, #25
 8004798:	2200      	movs	r2, #0
 800479a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800479c:	78fa      	ldrb	r2, [r7, #3]
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	334c      	adds	r3, #76	@ 0x4c
 80047ac:	2202      	movs	r2, #2
 80047ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80047b0:	78fa      	ldrb	r2, [r7, #3]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	334d      	adds	r3, #77	@ 0x4d
 80047c0:	2203      	movs	r2, #3
 80047c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	78fa      	ldrb	r2, [r7, #3]
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f005 fc2c 	bl	800a02a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	331a      	adds	r3, #26
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	f040 8437 	bne.w	8005058 <HCD_HC_OUT_IRQHandler+0x978>
 80047ea:	78fa      	ldrb	r2, [r7, #3]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	331b      	adds	r3, #27
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f040 842b 	bne.w	8005058 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	3326      	adds	r3, #38	@ 0x26
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d009      	beq.n	800482c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004818:	78fa      	ldrb	r2, [r7, #3]
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	331b      	adds	r3, #27
 8004828:	2201      	movs	r2, #1
 800482a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	334d      	adds	r3, #77	@ 0x4d
 800483c:	2203      	movs	r2, #3
 800483e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f005 fbee 	bl	800a02a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800484e:	78fa      	ldrb	r2, [r7, #3]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	3344      	adds	r3, #68	@ 0x44
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e3f9      	b.n	8005058 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	78fa      	ldrb	r2, [r7, #3]
 800486a:	4611      	mov	r1, r2
 800486c:	4618      	mov	r0, r3
 800486e:	f004 fe32 	bl	80094d6 <USB_ReadChInterrupts>
 8004872:	4603      	mov	r3, r0
 8004874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800487c:	d111      	bne.n	80048a2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4413      	add	r3, r2
 8004886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800488a:	461a      	mov	r2, r3
 800488c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004890:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	78fa      	ldrb	r2, [r7, #3]
 8004898:	4611      	mov	r1, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f005 fbc5 	bl	800a02a <USB_HC_Halt>
 80048a0:	e3da      	b.n	8005058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	4611      	mov	r1, r2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f004 fe13 	bl	80094d6 <USB_ReadChInterrupts>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d168      	bne.n	800498c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	3344      	adds	r3, #68	@ 0x44
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f004 fdfd 	bl	80094d6 <USB_ReadChInterrupts>
 80048dc:	4603      	mov	r3, r0
 80048de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	d112      	bne.n	800490c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	3319      	adds	r3, #25
 80048f6:	2201      	movs	r2, #1
 80048f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4413      	add	r3, r2
 8004902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004906:	461a      	mov	r2, r3
 8004908:	2340      	movs	r3, #64	@ 0x40
 800490a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	331b      	adds	r3, #27
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d019      	beq.n	8004956 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004922:	78fa      	ldrb	r2, [r7, #3]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	331b      	adds	r3, #27
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004936:	78fb      	ldrb	r3, [r7, #3]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4413      	add	r3, r2
 800493e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	440a      	add	r2, r1
 800494c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004954:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004956:	78fb      	ldrb	r3, [r7, #3]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004962:	461a      	mov	r2, r3
 8004964:	2301      	movs	r3, #1
 8004966:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	334d      	adds	r3, #77	@ 0x4d
 8004978:	2201      	movs	r2, #1
 800497a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	78fa      	ldrb	r2, [r7, #3]
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f005 fb50 	bl	800a02a <USB_HC_Halt>
 800498a:	e365      	b.n	8005058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f004 fd9e 	bl	80094d6 <USB_ReadChInterrupts>
 800499a:	4603      	mov	r3, r0
 800499c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a0:	2b40      	cmp	r3, #64	@ 0x40
 80049a2:	d139      	bne.n	8004a18 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	334d      	adds	r3, #77	@ 0x4d
 80049b4:	2205      	movs	r2, #5
 80049b6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	331a      	adds	r3, #26
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	3319      	adds	r3, #25
 80049de:	2201      	movs	r2, #1
 80049e0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80049e2:	78fa      	ldrb	r2, [r7, #3]
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	1a9b      	subs	r3, r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	3344      	adds	r3, #68	@ 0x44
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	78fa      	ldrb	r2, [r7, #3]
 80049fc:	4611      	mov	r1, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f005 fb13 	bl	800a02a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a10:	461a      	mov	r2, r3
 8004a12:	2340      	movs	r3, #64	@ 0x40
 8004a14:	6093      	str	r3, [r2, #8]
 8004a16:	e31f      	b.n	8005058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	78fa      	ldrb	r2, [r7, #3]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f004 fd58 	bl	80094d6 <USB_ReadChInterrupts>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d11a      	bne.n	8004a66 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2308      	movs	r3, #8
 8004a40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	334d      	adds	r3, #77	@ 0x4d
 8004a52:	2206      	movs	r2, #6
 8004a54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f005 fae3 	bl	800a02a <USB_HC_Halt>
 8004a64:	e2f8      	b.n	8005058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	78fa      	ldrb	r2, [r7, #3]
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f004 fd31 	bl	80094d6 <USB_ReadChInterrupts>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	2b10      	cmp	r3, #16
 8004a7c:	d144      	bne.n	8004b08 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004a7e:	78fa      	ldrb	r2, [r7, #3]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3344      	adds	r3, #68	@ 0x44
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	334d      	adds	r3, #77	@ 0x4d
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	3319      	adds	r3, #25
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d114      	bne.n	8004ae6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004abc:	78fa      	ldrb	r2, [r7, #3]
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	3318      	adds	r3, #24
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004ad2:	78fa      	ldrb	r2, [r7, #3]
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	3319      	adds	r3, #25
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	4611      	mov	r1, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f005 fa9b 	bl	800a02a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b00:	461a      	mov	r2, r3
 8004b02:	2310      	movs	r3, #16
 8004b04:	6093      	str	r3, [r2, #8]
 8004b06:	e2a7      	b.n	8005058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f004 fce0 	bl	80094d6 <USB_ReadChInterrupts>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1c:	2b80      	cmp	r3, #128	@ 0x80
 8004b1e:	f040 8083 	bne.w	8004c28 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	799b      	ldrb	r3, [r3, #6]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d111      	bne.n	8004b4e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	334d      	adds	r3, #77	@ 0x4d
 8004b3a:	2207      	movs	r2, #7
 8004b3c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	4611      	mov	r1, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f005 fa6f 	bl	800a02a <USB_HC_Halt>
 8004b4c:	e062      	b.n	8004c14 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004b4e:	78fa      	ldrb	r2, [r7, #3]
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	3344      	adds	r3, #68	@ 0x44
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	1c59      	adds	r1, r3, #1
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4403      	add	r3, r0
 8004b6e:	3344      	adds	r3, #68	@ 0x44
 8004b70:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b72:	78fa      	ldrb	r2, [r7, #3]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	3344      	adds	r3, #68	@ 0x44
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d922      	bls.n	8004bce <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b88:	78fa      	ldrb	r2, [r7, #3]
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	3344      	adds	r3, #68	@ 0x44
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b9c:	78fa      	ldrb	r2, [r7, #3]
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	334c      	adds	r3, #76	@ 0x4c
 8004bac:	2204      	movs	r2, #4
 8004bae:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004bb0:	78fa      	ldrb	r2, [r7, #3]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	334c      	adds	r3, #76	@ 0x4c
 8004bc0:	781a      	ldrb	r2, [r3, #0]
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f00a fef6 	bl	800f9b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bcc:	e022      	b.n	8004c14 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	334c      	adds	r3, #76	@ 0x4c
 8004bde:	2202      	movs	r2, #2
 8004be0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bf8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c00:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c20:	461a      	mov	r2, r3
 8004c22:	2380      	movs	r3, #128	@ 0x80
 8004c24:	6093      	str	r3, [r2, #8]
 8004c26:	e217      	b.n	8005058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	78fa      	ldrb	r2, [r7, #3]
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f004 fc50 	bl	80094d6 <USB_ReadChInterrupts>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c40:	d11b      	bne.n	8004c7a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004c42:	78fa      	ldrb	r2, [r7, #3]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	334d      	adds	r3, #77	@ 0x4d
 8004c52:	2209      	movs	r2, #9
 8004c54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f005 f9e3 	bl	800a02a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c70:	461a      	mov	r2, r3
 8004c72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c76:	6093      	str	r3, [r2, #8]
 8004c78:	e1ee      	b.n	8005058 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	4611      	mov	r1, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f004 fc27 	bl	80094d6 <USB_ReadChInterrupts>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	f040 81df 	bne.w	8005052 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	334d      	adds	r3, #77	@ 0x4d
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	f040 8093 	bne.w	8004de4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	334d      	adds	r3, #77	@ 0x4d
 8004cce:	2202      	movs	r2, #2
 8004cd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	334c      	adds	r3, #76	@ 0x4c
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	1a9b      	subs	r3, r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	3326      	adds	r3, #38	@ 0x26
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d00b      	beq.n	8004d14 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	3326      	adds	r3, #38	@ 0x26
 8004d0c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	f040 8190 	bne.w	8005034 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	799b      	ldrb	r3, [r3, #6]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d115      	bne.n	8004d48 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004d1c:	78fa      	ldrb	r2, [r7, #3]
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	4613      	mov	r3, r2
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	333d      	adds	r3, #61	@ 0x3d
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	f083 0301 	eor.w	r3, r3, #1
 8004d34:	b2d8      	uxtb	r0, r3
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	333d      	adds	r3, #61	@ 0x3d
 8004d44:	4602      	mov	r2, r0
 8004d46:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	799b      	ldrb	r3, [r3, #6]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	f040 8171 	bne.w	8005034 <HCD_HC_OUT_IRQHandler+0x954>
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	3334      	adds	r3, #52	@ 0x34
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8165 	beq.w	8005034 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	3334      	adds	r3, #52	@ 0x34
 8004d7a:	6819      	ldr	r1, [r3, #0]
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4403      	add	r3, r0
 8004d8a:	3328      	adds	r3, #40	@ 0x28
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	440b      	add	r3, r1
 8004d90:	1e59      	subs	r1, r3, #1
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4403      	add	r3, r0
 8004da0:	3328      	adds	r3, #40	@ 0x28
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004da8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 813f 	beq.w	8005034 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004db6:	78fa      	ldrb	r2, [r7, #3]
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	333d      	adds	r3, #61	@ 0x3d
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	f083 0301 	eor.w	r3, r3, #1
 8004dce:	b2d8      	uxtb	r0, r3
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	333d      	adds	r3, #61	@ 0x3d
 8004dde:	4602      	mov	r2, r0
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	e127      	b.n	8005034 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	334d      	adds	r3, #77	@ 0x4d
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d120      	bne.n	8004e3c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004dfa:	78fa      	ldrb	r2, [r7, #3]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	334d      	adds	r3, #77	@ 0x4d
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	331b      	adds	r3, #27
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	f040 8107 	bne.w	8005034 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e26:	78fa      	ldrb	r2, [r7, #3]
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	334c      	adds	r3, #76	@ 0x4c
 8004e36:	2202      	movs	r2, #2
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	e0fb      	b.n	8005034 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004e3c:	78fa      	ldrb	r2, [r7, #3]
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	334d      	adds	r3, #77	@ 0x4d
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d13a      	bne.n	8004ec8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e52:	78fa      	ldrb	r2, [r7, #3]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	334d      	adds	r3, #77	@ 0x4d
 8004e62:	2202      	movs	r2, #2
 8004e64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e66:	78fa      	ldrb	r2, [r7, #3]
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	334c      	adds	r3, #76	@ 0x4c
 8004e76:	2202      	movs	r2, #2
 8004e78:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e7a:	78fa      	ldrb	r2, [r7, #3]
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	331b      	adds	r3, #27
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	f040 80d1 	bne.w	8005034 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004e92:	78fa      	ldrb	r2, [r7, #3]
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	1a9b      	subs	r3, r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	331b      	adds	r3, #27
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	0151      	lsls	r1, r2, #5
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	440a      	add	r2, r1
 8004ebc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ec4:	6053      	str	r3, [r2, #4]
 8004ec6:	e0b5      	b.n	8005034 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004ec8:	78fa      	ldrb	r2, [r7, #3]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	334d      	adds	r3, #77	@ 0x4d
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d114      	bne.n	8004f08 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	334d      	adds	r3, #77	@ 0x4d
 8004eee:	2202      	movs	r2, #2
 8004ef0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004ef2:	78fa      	ldrb	r2, [r7, #3]
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	334c      	adds	r3, #76	@ 0x4c
 8004f02:	2202      	movs	r2, #2
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e095      	b.n	8005034 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	334d      	adds	r3, #77	@ 0x4d
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b06      	cmp	r3, #6
 8004f1c:	d114      	bne.n	8004f48 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	334d      	adds	r3, #77	@ 0x4d
 8004f2e:	2202      	movs	r2, #2
 8004f30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004f32:	78fa      	ldrb	r2, [r7, #3]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	334c      	adds	r3, #76	@ 0x4c
 8004f42:	2205      	movs	r2, #5
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e075      	b.n	8005034 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	334d      	adds	r3, #77	@ 0x4d
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b07      	cmp	r3, #7
 8004f5c:	d00a      	beq.n	8004f74 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	1a9b      	subs	r3, r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	334d      	adds	r3, #77	@ 0x4d
 8004f6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f70:	2b09      	cmp	r3, #9
 8004f72:	d170      	bne.n	8005056 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f74:	78fa      	ldrb	r2, [r7, #3]
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	334d      	adds	r3, #77	@ 0x4d
 8004f84:	2202      	movs	r2, #2
 8004f86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004f88:	78fa      	ldrb	r2, [r7, #3]
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	3344      	adds	r3, #68	@ 0x44
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	1c59      	adds	r1, r3, #1
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4403      	add	r3, r0
 8004fa8:	3344      	adds	r3, #68	@ 0x44
 8004faa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3344      	adds	r3, #68	@ 0x44
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d914      	bls.n	8004fec <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3344      	adds	r3, #68	@ 0x44
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004fd6:	78fa      	ldrb	r2, [r7, #3]
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	334c      	adds	r3, #76	@ 0x4c
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fea:	e022      	b.n	8005032 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	1a9b      	subs	r3, r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	334c      	adds	r3, #76	@ 0x4c
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4413      	add	r3, r2
 8005008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005016:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800501e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800502c:	461a      	mov	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005032:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005034:	78fa      	ldrb	r2, [r7, #3]
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	4613      	mov	r3, r2
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	1a9b      	subs	r3, r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	334c      	adds	r3, #76	@ 0x4c
 8005044:	781a      	ldrb	r2, [r3, #0]
 8005046:	78fb      	ldrb	r3, [r7, #3]
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f00a fcb4 	bl	800f9b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005050:	e002      	b.n	8005058 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005056:	bf00      	nop
  }
}
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b08a      	sub	sp, #40	@ 0x28
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	0c5b      	lsrs	r3, r3, #17
 8005084:	f003 030f 	and.w	r3, r3, #15
 8005088:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005092:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d004      	beq.n	80050a4 <HCD_RXQLVL_IRQHandler+0x46>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b05      	cmp	r3, #5
 800509e:	f000 80b6 	beq.w	800520e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80050a2:	e0b7      	b.n	8005214 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80b3 	beq.w	8005212 <HCD_RXQLVL_IRQHandler+0x1b4>
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4613      	mov	r3, r2
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	332c      	adds	r3, #44	@ 0x2c
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 80a7 	beq.w	8005212 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	4613      	mov	r3, r2
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	1a9b      	subs	r3, r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	3338      	adds	r3, #56	@ 0x38
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	18d1      	adds	r1, r2, r3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4613      	mov	r3, r2
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4403      	add	r3, r0
 80050e8:	3334      	adds	r3, #52	@ 0x34
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4299      	cmp	r1, r3
 80050ee:	f200 8083 	bhi.w	80051f8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4613      	mov	r3, r2
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	332c      	adds	r3, #44	@ 0x2c
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	b292      	uxth	r2, r2
 800510c:	4619      	mov	r1, r3
 800510e:	f004 f977 	bl	8009400 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4613      	mov	r3, r2
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	332c      	adds	r3, #44	@ 0x2c
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	18d1      	adds	r1, r2, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	4613      	mov	r3, r2
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4403      	add	r3, r0
 8005136:	332c      	adds	r3, #44	@ 0x2c
 8005138:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4613      	mov	r3, r2
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	440b      	add	r3, r1
 8005148:	3338      	adds	r3, #56	@ 0x38
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	18d1      	adds	r1, r2, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	4613      	mov	r3, r2
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	1a9b      	subs	r3, r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4403      	add	r3, r0
 800515e:	3338      	adds	r3, #56	@ 0x38
 8005160:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	0cdb      	lsrs	r3, r3, #19
 8005172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005176:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4613      	mov	r3, r2
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	1a9b      	subs	r3, r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	3328      	adds	r3, #40	@ 0x28
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4293      	cmp	r3, r2
 8005190:	d13f      	bne.n	8005212 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d03c      	beq.n	8005212 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80051ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80051b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051c4:	461a      	mov	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4613      	mov	r3, r2
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	1a9b      	subs	r3, r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	440b      	add	r3, r1
 80051d8:	333c      	adds	r3, #60	@ 0x3c
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	f083 0301 	eor.w	r3, r3, #1
 80051e0:	b2d8      	uxtb	r0, r3
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	333c      	adds	r3, #60	@ 0x3c
 80051f2:	4602      	mov	r2, r0
 80051f4:	701a      	strb	r2, [r3, #0]
      break;
 80051f6:	e00c      	b.n	8005212 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4613      	mov	r3, r2
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	334c      	adds	r3, #76	@ 0x4c
 8005208:	2204      	movs	r2, #4
 800520a:	701a      	strb	r2, [r3, #0]
      break;
 800520c:	e001      	b.n	8005212 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800520e:	bf00      	nop
 8005210:	e000      	b.n	8005214 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005212:	bf00      	nop
  }
}
 8005214:	bf00      	nop
 8005216:	3728      	adds	r7, #40	@ 0x28
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005248:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b02      	cmp	r3, #2
 8005252:	d10b      	bne.n	800526c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b01      	cmp	r3, #1
 800525c:	d102      	bne.n	8005264 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f00a fb8e 	bl	800f980 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f043 0302 	orr.w	r3, r3, #2
 800526a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b08      	cmp	r3, #8
 8005274:	d132      	bne.n	80052dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f043 0308 	orr.w	r3, r3, #8
 800527c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b04      	cmp	r3, #4
 8005286:	d126      	bne.n	80052d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	7a5b      	ldrb	r3, [r3, #9]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d113      	bne.n	80052b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005296:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800529a:	d106      	bne.n	80052aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2102      	movs	r1, #2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f004 fa42 	bl	800972c <USB_InitFSLSPClkSel>
 80052a8:	e011      	b.n	80052ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2101      	movs	r1, #1
 80052b0:	4618      	mov	r0, r3
 80052b2:	f004 fa3b 	bl	800972c <USB_InitFSLSPClkSel>
 80052b6:	e00a      	b.n	80052ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	79db      	ldrb	r3, [r3, #7]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d106      	bne.n	80052ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052c6:	461a      	mov	r2, r3
 80052c8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80052cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f00a fb84 	bl	800f9dc <HAL_HCD_PortEnabled_Callback>
 80052d4:	e002      	b.n	80052dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f00a fb8e 	bl	800f9f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d103      	bne.n	80052ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f043 0320 	orr.w	r3, r3, #32
 80052ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80052f4:	461a      	mov	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	6013      	str	r3, [r2, #0]
}
 80052fa:	bf00      	nop
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e12b      	b.n	800556e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fc fb64 	bl	80019f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2224      	movs	r2, #36	@ 0x24
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005356:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005366:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005368:	f001 fea8 	bl	80070bc <HAL_RCC_GetPCLK1Freq>
 800536c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4a81      	ldr	r2, [pc, #516]	@ (8005578 <HAL_I2C_Init+0x274>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d807      	bhi.n	8005388 <HAL_I2C_Init+0x84>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4a80      	ldr	r2, [pc, #512]	@ (800557c <HAL_I2C_Init+0x278>)
 800537c:	4293      	cmp	r3, r2
 800537e:	bf94      	ite	ls
 8005380:	2301      	movls	r3, #1
 8005382:	2300      	movhi	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	e006      	b.n	8005396 <HAL_I2C_Init+0x92>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a7d      	ldr	r2, [pc, #500]	@ (8005580 <HAL_I2C_Init+0x27c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	bf94      	ite	ls
 8005390:	2301      	movls	r3, #1
 8005392:	2300      	movhi	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e0e7      	b.n	800556e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4a78      	ldr	r2, [pc, #480]	@ (8005584 <HAL_I2C_Init+0x280>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	0c9b      	lsrs	r3, r3, #18
 80053a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	4a6a      	ldr	r2, [pc, #424]	@ (8005578 <HAL_I2C_Init+0x274>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d802      	bhi.n	80053d8 <HAL_I2C_Init+0xd4>
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	3301      	adds	r3, #1
 80053d6:	e009      	b.n	80053ec <HAL_I2C_Init+0xe8>
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80053de:	fb02 f303 	mul.w	r3, r2, r3
 80053e2:	4a69      	ldr	r2, [pc, #420]	@ (8005588 <HAL_I2C_Init+0x284>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	099b      	lsrs	r3, r3, #6
 80053ea:	3301      	adds	r3, #1
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	430b      	orrs	r3, r1
 80053f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80053fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	495c      	ldr	r1, [pc, #368]	@ (8005578 <HAL_I2C_Init+0x274>)
 8005408:	428b      	cmp	r3, r1
 800540a:	d819      	bhi.n	8005440 <HAL_I2C_Init+0x13c>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	1e59      	subs	r1, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	fbb1 f3f3 	udiv	r3, r1, r3
 800541a:	1c59      	adds	r1, r3, #1
 800541c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005420:	400b      	ands	r3, r1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <HAL_I2C_Init+0x138>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1e59      	subs	r1, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	fbb1 f3f3 	udiv	r3, r1, r3
 8005434:	3301      	adds	r3, #1
 8005436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800543a:	e051      	b.n	80054e0 <HAL_I2C_Init+0x1dc>
 800543c:	2304      	movs	r3, #4
 800543e:	e04f      	b.n	80054e0 <HAL_I2C_Init+0x1dc>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d111      	bne.n	800546c <HAL_I2C_Init+0x168>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	1e58      	subs	r0, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6859      	ldr	r1, [r3, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	440b      	add	r3, r1
 8005456:	fbb0 f3f3 	udiv	r3, r0, r3
 800545a:	3301      	adds	r3, #1
 800545c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005460:	2b00      	cmp	r3, #0
 8005462:	bf0c      	ite	eq
 8005464:	2301      	moveq	r3, #1
 8005466:	2300      	movne	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	e012      	b.n	8005492 <HAL_I2C_Init+0x18e>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	1e58      	subs	r0, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6859      	ldr	r1, [r3, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	0099      	lsls	r1, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005482:	3301      	adds	r3, #1
 8005484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005488:	2b00      	cmp	r3, #0
 800548a:	bf0c      	ite	eq
 800548c:	2301      	moveq	r3, #1
 800548e:	2300      	movne	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_I2C_Init+0x196>
 8005496:	2301      	movs	r3, #1
 8005498:	e022      	b.n	80054e0 <HAL_I2C_Init+0x1dc>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10e      	bne.n	80054c0 <HAL_I2C_Init+0x1bc>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1e58      	subs	r0, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6859      	ldr	r1, [r3, #4]
 80054aa:	460b      	mov	r3, r1
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	440b      	add	r3, r1
 80054b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80054b4:	3301      	adds	r3, #1
 80054b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054be:	e00f      	b.n	80054e0 <HAL_I2C_Init+0x1dc>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	1e58      	subs	r0, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6859      	ldr	r1, [r3, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	0099      	lsls	r1, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054d6:	3301      	adds	r3, #1
 80054d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	6809      	ldr	r1, [r1, #0]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69da      	ldr	r2, [r3, #28]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800550e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6911      	ldr	r1, [r2, #16]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	68d2      	ldr	r2, [r2, #12]
 800551a:	4311      	orrs	r1, r2
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6812      	ldr	r2, [r2, #0]
 8005520:	430b      	orrs	r3, r1
 8005522:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695a      	ldr	r2, [r3, #20]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	000186a0 	.word	0x000186a0
 800557c:	001e847f 	.word	0x001e847f
 8005580:	003d08ff 	.word	0x003d08ff
 8005584:	431bde83 	.word	0x431bde83
 8005588:	10624dd3 	.word	0x10624dd3

0800558c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	607a      	str	r2, [r7, #4]
 8005596:	461a      	mov	r2, r3
 8005598:	460b      	mov	r3, r1
 800559a:	817b      	strh	r3, [r7, #10]
 800559c:	4613      	mov	r3, r2
 800559e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055a0:	f7fc fe9a 	bl	80022d8 <HAL_GetTick>
 80055a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	f040 80e0 	bne.w	8005774 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	2319      	movs	r3, #25
 80055ba:	2201      	movs	r2, #1
 80055bc:	4970      	ldr	r1, [pc, #448]	@ (8005780 <HAL_I2C_Master_Transmit+0x1f4>)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fa92 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
 80055cc:	e0d3      	b.n	8005776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_I2C_Master_Transmit+0x50>
 80055d8:	2302      	movs	r3, #2
 80055da:	e0cc      	b.n	8005776 <HAL_I2C_Master_Transmit+0x1ea>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d007      	beq.n	8005602 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005610:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2221      	movs	r2, #33	@ 0x21
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2210      	movs	r2, #16
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	893a      	ldrh	r2, [r7, #8]
 8005632:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4a50      	ldr	r2, [pc, #320]	@ (8005784 <HAL_I2C_Master_Transmit+0x1f8>)
 8005642:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005644:	8979      	ldrh	r1, [r7, #10]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	6a3a      	ldr	r2, [r7, #32]
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 f9ca 	bl	80059e4 <I2C_MasterRequestWrite>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e08d      	b.n	8005776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005670:	e066      	b.n	8005740 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	6a39      	ldr	r1, [r7, #32]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 fb50 	bl	8005d1c <I2C_WaitOnTXEFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00d      	beq.n	800569e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	2b04      	cmp	r3, #4
 8005688:	d107      	bne.n	800569a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005698:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e06b      	b.n	8005776 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d11b      	bne.n	8005714 <HAL_I2C_Master_Transmit+0x188>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d017      	beq.n	8005714 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	6a39      	ldr	r1, [r7, #32]
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fb47 	bl	8005dac <I2C_WaitOnBTFFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00d      	beq.n	8005740 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	2b04      	cmp	r3, #4
 800572a:	d107      	bne.n	800573c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800573a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e01a      	b.n	8005776 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005744:	2b00      	cmp	r3, #0
 8005746:	d194      	bne.n	8005672 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	e000      	b.n	8005776 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005774:	2302      	movs	r3, #2
  }
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	00100002 	.word	0x00100002
 8005784:	ffff0000 	.word	0xffff0000

08005788 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08a      	sub	sp, #40	@ 0x28
 800578c:	af02      	add	r7, sp, #8
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	460b      	mov	r3, r1
 8005796:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005798:	f7fc fd9e 	bl	80022d8 <HAL_GetTick>
 800579c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	f040 8111 	bne.w	80059d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	2319      	movs	r3, #25
 80057b6:	2201      	movs	r2, #1
 80057b8:	4988      	ldr	r1, [pc, #544]	@ (80059dc <HAL_I2C_IsDeviceReady+0x254>)
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 f994 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
 80057c8:	e104      	b.n	80059d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_I2C_IsDeviceReady+0x50>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e0fd      	b.n	80059d4 <HAL_I2C_IsDeviceReady+0x24c>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d007      	beq.n	80057fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800580c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2224      	movs	r2, #36	@ 0x24
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4a70      	ldr	r2, [pc, #448]	@ (80059e0 <HAL_I2C_IsDeviceReady+0x258>)
 8005820:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005830:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2200      	movs	r2, #0
 800583a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 f952 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00d      	beq.n	8005866 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005858:	d103      	bne.n	8005862 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005860:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e0b6      	b.n	80059d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005866:	897b      	ldrh	r3, [r7, #10]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005874:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005876:	f7fc fd2f 	bl	80022d8 <HAL_GetTick>
 800587a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b02      	cmp	r3, #2
 8005888:	bf0c      	ite	eq
 800588a:	2301      	moveq	r3, #1
 800588c:	2300      	movne	r3, #0
 800588e:	b2db      	uxtb	r3, r3
 8005890:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800589c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058a0:	bf0c      	ite	eq
 80058a2:	2301      	moveq	r3, #1
 80058a4:	2300      	movne	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80058aa:	e025      	b.n	80058f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80058ac:	f7fc fd14 	bl	80022d8 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d302      	bcc.n	80058c2 <HAL_I2C_IsDeviceReady+0x13a>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d103      	bne.n	80058ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	22a0      	movs	r2, #160	@ 0xa0
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	bf0c      	ite	eq
 80058d8:	2301      	moveq	r3, #1
 80058da:	2300      	movne	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ee:	bf0c      	ite	eq
 80058f0:	2301      	moveq	r3, #1
 80058f2:	2300      	movne	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2ba0      	cmp	r3, #160	@ 0xa0
 8005902:	d005      	beq.n	8005910 <HAL_I2C_IsDeviceReady+0x188>
 8005904:	7dfb      	ldrb	r3, [r7, #23]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <HAL_I2C_IsDeviceReady+0x188>
 800590a:	7dbb      	ldrb	r3, [r7, #22]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0cd      	beq.n	80058ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b02      	cmp	r3, #2
 8005924:	d129      	bne.n	800597a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005934:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	2319      	movs	r3, #25
 8005952:	2201      	movs	r2, #1
 8005954:	4921      	ldr	r1, [pc, #132]	@ (80059dc <HAL_I2C_IsDeviceReady+0x254>)
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f8c6 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e036      	b.n	80059d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	e02c      	b.n	80059d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005988:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005992:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	2319      	movs	r3, #25
 800599a:	2201      	movs	r2, #1
 800599c:	490f      	ldr	r1, [pc, #60]	@ (80059dc <HAL_I2C_IsDeviceReady+0x254>)
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 f8a2 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e012      	b.n	80059d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	3301      	adds	r3, #1
 80059b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	f4ff af32 	bcc.w	8005822 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80059d2:	2302      	movs	r3, #2
  }
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3720      	adds	r7, #32
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	00100002 	.word	0x00100002
 80059e0:	ffff0000 	.word	0xffff0000

080059e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	607a      	str	r2, [r7, #4]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	460b      	mov	r3, r1
 80059f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d006      	beq.n	8005a0e <I2C_MasterRequestWrite+0x2a>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d003      	beq.n	8005a0e <I2C_MasterRequestWrite+0x2a>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a0c:	d108      	bne.n	8005a20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	e00b      	b.n	8005a38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a24:	2b12      	cmp	r3, #18
 8005a26:	d107      	bne.n	8005a38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 f84f 	bl	8005ae8 <I2C_WaitOnFlagUntilTimeout>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00d      	beq.n	8005a6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a5e:	d103      	bne.n	8005a68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e035      	b.n	8005ad8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a74:	d108      	bne.n	8005a88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a76:	897b      	ldrh	r3, [r7, #10]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a84:	611a      	str	r2, [r3, #16]
 8005a86:	e01b      	b.n	8005ac0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a88:	897b      	ldrh	r3, [r7, #10]
 8005a8a:	11db      	asrs	r3, r3, #7
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	f003 0306 	and.w	r3, r3, #6
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f063 030f 	orn	r3, r3, #15
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	490e      	ldr	r1, [pc, #56]	@ (8005ae0 <I2C_MasterRequestWrite+0xfc>)
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f898 	bl	8005bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e010      	b.n	8005ad8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ab6:	897b      	ldrh	r3, [r7, #10]
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4907      	ldr	r1, [pc, #28]	@ (8005ae4 <I2C_MasterRequestWrite+0x100>)
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f888 	bl	8005bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	00010008 	.word	0x00010008
 8005ae4:	00010002 	.word	0x00010002

08005ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	4613      	mov	r3, r2
 8005af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005af8:	e048      	b.n	8005b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b00:	d044      	beq.n	8005b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b02:	f7fc fbe9 	bl	80022d8 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d302      	bcc.n	8005b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d139      	bne.n	8005b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	0c1b      	lsrs	r3, r3, #16
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d10d      	bne.n	8005b3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	43da      	mvns	r2, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	bf0c      	ite	eq
 8005b34:	2301      	moveq	r3, #1
 8005b36:	2300      	movne	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	e00c      	b.n	8005b58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	43da      	mvns	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bf0c      	ite	eq
 8005b50:	2301      	moveq	r3, #1
 8005b52:	2300      	movne	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d116      	bne.n	8005b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b78:	f043 0220 	orr.w	r2, r3, #32
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e023      	b.n	8005bd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	0c1b      	lsrs	r3, r3, #16
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d10d      	bne.n	8005bb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	43da      	mvns	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bf0c      	ite	eq
 8005ba8:	2301      	moveq	r3, #1
 8005baa:	2300      	movne	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	e00c      	b.n	8005bcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	43da      	mvns	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bf0c      	ite	eq
 8005bc4:	2301      	moveq	r3, #1
 8005bc6:	2300      	movne	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d093      	beq.n	8005afa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bea:	e071      	b.n	8005cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bfa:	d123      	bne.n	8005c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c30:	f043 0204 	orr.w	r2, r3, #4
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e067      	b.n	8005d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c4a:	d041      	beq.n	8005cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4c:	f7fc fb44 	bl	80022d8 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d302      	bcc.n	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d136      	bne.n	8005cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	0c1b      	lsrs	r3, r3, #16
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d10c      	bne.n	8005c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	43da      	mvns	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4013      	ands	r3, r2
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	bf14      	ite	ne
 8005c7e:	2301      	movne	r3, #1
 8005c80:	2300      	moveq	r3, #0
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	e00b      	b.n	8005c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	43da      	mvns	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4013      	ands	r3, r2
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	bf14      	ite	ne
 8005c98:	2301      	movne	r3, #1
 8005c9a:	2300      	moveq	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d016      	beq.n	8005cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbc:	f043 0220 	orr.w	r2, r3, #32
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e021      	b.n	8005d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	0c1b      	lsrs	r3, r3, #16
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d10c      	bne.n	8005cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	43da      	mvns	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bf14      	ite	ne
 8005cec:	2301      	movne	r3, #1
 8005cee:	2300      	moveq	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	e00b      	b.n	8005d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	43da      	mvns	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bf14      	ite	ne
 8005d06:	2301      	movne	r3, #1
 8005d08:	2300      	moveq	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f47f af6d 	bne.w	8005bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d28:	e034      	b.n	8005d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f886 	bl	8005e3c <I2C_IsAcknowledgeFailed>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e034      	b.n	8005da4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d40:	d028      	beq.n	8005d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d42:	f7fc fac9 	bl	80022d8 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d302      	bcc.n	8005d58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d11d      	bne.n	8005d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d62:	2b80      	cmp	r3, #128	@ 0x80
 8005d64:	d016      	beq.n	8005d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d80:	f043 0220 	orr.w	r2, r3, #32
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e007      	b.n	8005da4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d9e:	2b80      	cmp	r3, #128	@ 0x80
 8005da0:	d1c3      	bne.n	8005d2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005db8:	e034      	b.n	8005e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f83e 	bl	8005e3c <I2C_IsAcknowledgeFailed>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e034      	b.n	8005e34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dd0:	d028      	beq.n	8005e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd2:	f7fc fa81 	bl	80022d8 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d302      	bcc.n	8005de8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11d      	bne.n	8005e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f003 0304 	and.w	r3, r3, #4
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d016      	beq.n	8005e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e007      	b.n	8005e34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d1c3      	bne.n	8005dba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e52:	d11b      	bne.n	8005e8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e78:	f043 0204 	orr.w	r2, r3, #4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e128      	b.n	8006100 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d109      	bne.n	8005ece <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a90      	ldr	r2, [pc, #576]	@ (8006108 <HAL_I2S_Init+0x26c>)
 8005ec6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fb fddd 	bl	8001a88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005ee4:	f023 030f 	bic.w	r3, r3, #15
 8005ee8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d060      	beq.n	8005fbc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d102      	bne.n	8005f08 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005f02:	2310      	movs	r3, #16
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	e001      	b.n	8005f0c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005f08:	2320      	movs	r3, #32
 8005f0a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d802      	bhi.n	8005f1a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	f001 fa0a 	bl	8007334 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f20:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f2a:	d125      	bne.n	8005f78 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d010      	beq.n	8005f56 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	461a      	mov	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f50:	3305      	adds	r3, #5
 8005f52:	613b      	str	r3, [r7, #16]
 8005f54:	e01f      	b.n	8005f96 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	461a      	mov	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f72:	3305      	adds	r3, #5
 8005f74:	613b      	str	r3, [r7, #16]
 8005f76:	e00e      	b.n	8005f96 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	461a      	mov	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f92:	3305      	adds	r3, #5
 8005f94:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4a5c      	ldr	r2, [pc, #368]	@ (800610c <HAL_I2S_Init+0x270>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	08db      	lsrs	r3, r3, #3
 8005fa0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	085b      	lsrs	r3, r3, #1
 8005fb2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	61bb      	str	r3, [r7, #24]
 8005fba:	e003      	b.n	8005fc4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d902      	bls.n	8005fd0 <HAL_I2S_Init+0x134>
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	2bff      	cmp	r3, #255	@ 0xff
 8005fce:	d907      	bls.n	8005fe0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd4:	f043 0210 	orr.w	r2, r3, #16
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e08f      	b.n	8006100 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	ea42 0103 	orr.w	r1, r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005ffe:	f023 030f 	bic.w	r3, r3, #15
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	6851      	ldr	r1, [r2, #4]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6892      	ldr	r2, [r2, #8]
 800600a:	4311      	orrs	r1, r2
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	68d2      	ldr	r2, [r2, #12]
 8006010:	4311      	orrs	r1, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6992      	ldr	r2, [r2, #24]
 8006016:	430a      	orrs	r2, r1
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006022:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d161      	bne.n	80060f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a38      	ldr	r2, [pc, #224]	@ (8006110 <HAL_I2S_Init+0x274>)
 8006030:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a37      	ldr	r2, [pc, #220]	@ (8006114 <HAL_I2S_Init+0x278>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d101      	bne.n	8006040 <HAL_I2S_Init+0x1a4>
 800603c:	4b36      	ldr	r3, [pc, #216]	@ (8006118 <HAL_I2S_Init+0x27c>)
 800603e:	e001      	b.n	8006044 <HAL_I2S_Init+0x1a8>
 8006040:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	4932      	ldr	r1, [pc, #200]	@ (8006114 <HAL_I2S_Init+0x278>)
 800604c:	428a      	cmp	r2, r1
 800604e:	d101      	bne.n	8006054 <HAL_I2S_Init+0x1b8>
 8006050:	4a31      	ldr	r2, [pc, #196]	@ (8006118 <HAL_I2S_Init+0x27c>)
 8006052:	e001      	b.n	8006058 <HAL_I2S_Init+0x1bc>
 8006054:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006058:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800605c:	f023 030f 	bic.w	r3, r3, #15
 8006060:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a2b      	ldr	r2, [pc, #172]	@ (8006114 <HAL_I2S_Init+0x278>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d101      	bne.n	8006070 <HAL_I2S_Init+0x1d4>
 800606c:	4b2a      	ldr	r3, [pc, #168]	@ (8006118 <HAL_I2S_Init+0x27c>)
 800606e:	e001      	b.n	8006074 <HAL_I2S_Init+0x1d8>
 8006070:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006074:	2202      	movs	r2, #2
 8006076:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a25      	ldr	r2, [pc, #148]	@ (8006114 <HAL_I2S_Init+0x278>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d101      	bne.n	8006086 <HAL_I2S_Init+0x1ea>
 8006082:	4b25      	ldr	r3, [pc, #148]	@ (8006118 <HAL_I2S_Init+0x27c>)
 8006084:	e001      	b.n	800608a <HAL_I2S_Init+0x1ee>
 8006086:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006096:	d003      	beq.n	80060a0 <HAL_I2S_Init+0x204>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d103      	bne.n	80060a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80060a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	e001      	b.n	80060ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80060a8:	2300      	movs	r3, #0
 80060aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060b6:	4313      	orrs	r3, r2
 80060b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060c0:	4313      	orrs	r3, r2
 80060c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060ca:	4313      	orrs	r3, r2
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	897b      	ldrh	r3, [r7, #10]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80060d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a0d      	ldr	r2, [pc, #52]	@ (8006114 <HAL_I2S_Init+0x278>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d101      	bne.n	80060e8 <HAL_I2S_Init+0x24c>
 80060e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006118 <HAL_I2S_Init+0x27c>)
 80060e6:	e001      	b.n	80060ec <HAL_I2S_Init+0x250>
 80060e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060ec:	897a      	ldrh	r2, [r7, #10]
 80060ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	08006213 	.word	0x08006213
 800610c:	cccccccd 	.word	0xcccccccd
 8006110:	08006329 	.word	0x08006329
 8006114:	40003800 	.word	0x40003800
 8006118:	40003400 	.word	0x40003400

0800611c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006164:	881a      	ldrh	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006170:	1c9a      	adds	r2, r3, #2
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10e      	bne.n	80061ac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800619c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff ffb8 	bl	800611c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c6:	b292      	uxth	r2, r2
 80061c8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ce:	1c9a      	adds	r2, r3, #2
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061d8:	b29b      	uxth	r3, r3
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10e      	bne.n	800620a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061fa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff ff93 	bl	8006130 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b086      	sub	sp, #24
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b04      	cmp	r3, #4
 800622c:	d13a      	bne.n	80062a4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b01      	cmp	r3, #1
 8006236:	d109      	bne.n	800624c <I2S_IRQHandler+0x3a>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006242:	2b40      	cmp	r3, #64	@ 0x40
 8006244:	d102      	bne.n	800624c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7ff ffb4 	bl	80061b4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006252:	2b40      	cmp	r3, #64	@ 0x40
 8006254:	d126      	bne.n	80062a4 <I2S_IRQHandler+0x92>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b20      	cmp	r3, #32
 8006262:	d11f      	bne.n	80062a4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006272:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006274:	2300      	movs	r3, #0
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006296:	f043 0202 	orr.w	r2, r3, #2
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff ff50 	bl	8006144 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d136      	bne.n	800631e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d109      	bne.n	80062ce <I2S_IRQHandler+0xbc>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c4:	2b80      	cmp	r3, #128	@ 0x80
 80062c6:	d102      	bne.n	80062ce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff ff45 	bl	8006158 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d122      	bne.n	800631e <I2S_IRQHandler+0x10c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d11b      	bne.n	800631e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80062f4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006310:	f043 0204 	orr.w	r2, r3, #4
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff ff13 	bl	8006144 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800631e:	bf00      	nop
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a92      	ldr	r2, [pc, #584]	@ (8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d101      	bne.n	8006346 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006342:	4b92      	ldr	r3, [pc, #584]	@ (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006344:	e001      	b.n	800634a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006346:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a8b      	ldr	r2, [pc, #556]	@ (8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d101      	bne.n	8006364 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006360:	4b8a      	ldr	r3, [pc, #552]	@ (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006362:	e001      	b.n	8006368 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006364:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006374:	d004      	beq.n	8006380 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 8099 	bne.w	80064b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b02      	cmp	r3, #2
 8006388:	d107      	bne.n	800639a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f925 	bl	80065e4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d107      	bne.n	80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f9c8 	bl	8006744 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ba:	2b40      	cmp	r3, #64	@ 0x40
 80063bc:	d13a      	bne.n	8006434 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d035      	beq.n	8006434 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a6e      	ldr	r2, [pc, #440]	@ (8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d101      	bne.n	80063d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80063d2:	4b6e      	ldr	r3, [pc, #440]	@ (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063d4:	e001      	b.n	80063da <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80063d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4969      	ldr	r1, [pc, #420]	@ (8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063e2:	428b      	cmp	r3, r1
 80063e4:	d101      	bne.n	80063ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80063e6:	4b69      	ldr	r3, [pc, #420]	@ (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063e8:	e001      	b.n	80063ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80063ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063ee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80063f2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006402:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006426:	f043 0202 	orr.w	r2, r3, #2
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff fe88 	bl	8006144 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b08      	cmp	r3, #8
 800643c:	f040 80c3 	bne.w	80065c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 80bd 	beq.w	80065c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800645a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a49      	ldr	r2, [pc, #292]	@ (8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d101      	bne.n	800646a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006466:	4b49      	ldr	r3, [pc, #292]	@ (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006468:	e001      	b.n	800646e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800646a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4944      	ldr	r1, [pc, #272]	@ (8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006476:	428b      	cmp	r3, r1
 8006478:	d101      	bne.n	800647e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800647a:	4b44      	ldr	r3, [pc, #272]	@ (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800647c:	e001      	b.n	8006482 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800647e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006482:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006486:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006488:	2300      	movs	r3, #0
 800648a:	60bb      	str	r3, [r7, #8]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	60bb      	str	r3, [r7, #8]
 8006494:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a2:	f043 0204 	orr.w	r2, r3, #4
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff fe4a 	bl	8006144 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064b0:	e089      	b.n	80065c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d107      	bne.n	80064cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8be 	bl	8006648 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d107      	bne.n	80064e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f8fd 	bl	80066e0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ec:	2b40      	cmp	r3, #64	@ 0x40
 80064ee:	d12f      	bne.n	8006550 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d02a      	beq.n	8006550 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006508:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1e      	ldr	r2, [pc, #120]	@ (8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d101      	bne.n	8006518 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006514:	4b1d      	ldr	r3, [pc, #116]	@ (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006516:	e001      	b.n	800651c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006518:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4919      	ldr	r1, [pc, #100]	@ (8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006524:	428b      	cmp	r3, r1
 8006526:	d101      	bne.n	800652c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006528:	4b18      	ldr	r3, [pc, #96]	@ (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800652a:	e001      	b.n	8006530 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800652c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006530:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006534:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006542:	f043 0202 	orr.w	r2, r3, #2
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fdfa 	bl	8006144 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f003 0308 	and.w	r3, r3, #8
 8006556:	2b08      	cmp	r3, #8
 8006558:	d136      	bne.n	80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f003 0320 	and.w	r3, r3, #32
 8006560:	2b00      	cmp	r3, #0
 8006562:	d031      	beq.n	80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a07      	ldr	r2, [pc, #28]	@ (8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d101      	bne.n	8006572 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800656e:	4b07      	ldr	r3, [pc, #28]	@ (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006570:	e001      	b.n	8006576 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006572:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4902      	ldr	r1, [pc, #8]	@ (8006588 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800657e:	428b      	cmp	r3, r1
 8006580:	d106      	bne.n	8006590 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006582:	4b02      	ldr	r3, [pc, #8]	@ (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006584:	e006      	b.n	8006594 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006586:	bf00      	nop
 8006588:	40003800 	.word	0x40003800
 800658c:	40003400 	.word	0x40003400
 8006590:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006594:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006598:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80065a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b6:	f043 0204 	orr.w	r2, r3, #4
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff fdc0 	bl	8006144 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065c4:	e000      	b.n	80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065c6:	bf00      	nop
}
 80065c8:	bf00      	nop
 80065ca:	3720      	adds	r7, #32
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	1c99      	adds	r1, r3, #2
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6251      	str	r1, [r2, #36]	@ 0x24
 80065f6:	881a      	ldrh	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d113      	bne.n	800663e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006624:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d106      	bne.n	800663e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff ffc9 	bl	80065d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800663e:	bf00      	nop
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006654:	1c99      	adds	r1, r3, #2
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	6251      	str	r1, [r2, #36]	@ 0x24
 800665a:	8819      	ldrh	r1, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a1d      	ldr	r2, [pc, #116]	@ (80066d8 <I2SEx_TxISR_I2SExt+0x90>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d101      	bne.n	800666a <I2SEx_TxISR_I2SExt+0x22>
 8006666:	4b1d      	ldr	r3, [pc, #116]	@ (80066dc <I2SEx_TxISR_I2SExt+0x94>)
 8006668:	e001      	b.n	800666e <I2SEx_TxISR_I2SExt+0x26>
 800666a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800666e:	460a      	mov	r2, r1
 8006670:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d121      	bne.n	80066ce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a12      	ldr	r2, [pc, #72]	@ (80066d8 <I2SEx_TxISR_I2SExt+0x90>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d101      	bne.n	8006698 <I2SEx_TxISR_I2SExt+0x50>
 8006694:	4b11      	ldr	r3, [pc, #68]	@ (80066dc <I2SEx_TxISR_I2SExt+0x94>)
 8006696:	e001      	b.n	800669c <I2SEx_TxISR_I2SExt+0x54>
 8006698:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	490d      	ldr	r1, [pc, #52]	@ (80066d8 <I2SEx_TxISR_I2SExt+0x90>)
 80066a4:	428b      	cmp	r3, r1
 80066a6:	d101      	bne.n	80066ac <I2SEx_TxISR_I2SExt+0x64>
 80066a8:	4b0c      	ldr	r3, [pc, #48]	@ (80066dc <I2SEx_TxISR_I2SExt+0x94>)
 80066aa:	e001      	b.n	80066b0 <I2SEx_TxISR_I2SExt+0x68>
 80066ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066b0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80066b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d106      	bne.n	80066ce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff ff81 	bl	80065d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40003800 	.word	0x40003800
 80066dc:	40003400 	.word	0x40003400

080066e0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68d8      	ldr	r0, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f2:	1c99      	adds	r1, r3, #2
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80066f8:	b282      	uxth	r2, r0
 80066fa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006700:	b29b      	uxth	r3, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d113      	bne.n	800673c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006722:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d106      	bne.n	800673c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff ff4a 	bl	80065d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800673c:	bf00      	nop
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a20      	ldr	r2, [pc, #128]	@ (80067d4 <I2SEx_RxISR_I2SExt+0x90>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d101      	bne.n	800675a <I2SEx_RxISR_I2SExt+0x16>
 8006756:	4b20      	ldr	r3, [pc, #128]	@ (80067d8 <I2SEx_RxISR_I2SExt+0x94>)
 8006758:	e001      	b.n	800675e <I2SEx_RxISR_I2SExt+0x1a>
 800675a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800675e:	68d8      	ldr	r0, [r3, #12]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006764:	1c99      	adds	r1, r3, #2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800676a:	b282      	uxth	r2, r0
 800676c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d121      	bne.n	80067ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a12      	ldr	r2, [pc, #72]	@ (80067d4 <I2SEx_RxISR_I2SExt+0x90>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d101      	bne.n	8006794 <I2SEx_RxISR_I2SExt+0x50>
 8006790:	4b11      	ldr	r3, [pc, #68]	@ (80067d8 <I2SEx_RxISR_I2SExt+0x94>)
 8006792:	e001      	b.n	8006798 <I2SEx_RxISR_I2SExt+0x54>
 8006794:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	490d      	ldr	r1, [pc, #52]	@ (80067d4 <I2SEx_RxISR_I2SExt+0x90>)
 80067a0:	428b      	cmp	r3, r1
 80067a2:	d101      	bne.n	80067a8 <I2SEx_RxISR_I2SExt+0x64>
 80067a4:	4b0c      	ldr	r3, [pc, #48]	@ (80067d8 <I2SEx_RxISR_I2SExt+0x94>)
 80067a6:	e001      	b.n	80067ac <I2SEx_RxISR_I2SExt+0x68>
 80067a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80067b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d106      	bne.n	80067ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff ff03 	bl	80065d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40003800 	.word	0x40003800
 80067d8:	40003400 	.word	0x40003400

080067dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e267      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d075      	beq.n	80068e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80067fa:	4b88      	ldr	r3, [pc, #544]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 030c 	and.w	r3, r3, #12
 8006802:	2b04      	cmp	r3, #4
 8006804:	d00c      	beq.n	8006820 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006806:	4b85      	ldr	r3, [pc, #532]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800680e:	2b08      	cmp	r3, #8
 8006810:	d112      	bne.n	8006838 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006812:	4b82      	ldr	r3, [pc, #520]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800681a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800681e:	d10b      	bne.n	8006838 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006820:	4b7e      	ldr	r3, [pc, #504]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d05b      	beq.n	80068e4 <HAL_RCC_OscConfig+0x108>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d157      	bne.n	80068e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e242      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006840:	d106      	bne.n	8006850 <HAL_RCC_OscConfig+0x74>
 8006842:	4b76      	ldr	r3, [pc, #472]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a75      	ldr	r2, [pc, #468]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	e01d      	b.n	800688c <HAL_RCC_OscConfig+0xb0>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006858:	d10c      	bne.n	8006874 <HAL_RCC_OscConfig+0x98>
 800685a:	4b70      	ldr	r3, [pc, #448]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a6f      	ldr	r2, [pc, #444]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006860:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	4b6d      	ldr	r3, [pc, #436]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a6c      	ldr	r2, [pc, #432]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 800686c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	e00b      	b.n	800688c <HAL_RCC_OscConfig+0xb0>
 8006874:	4b69      	ldr	r3, [pc, #420]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a68      	ldr	r2, [pc, #416]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 800687a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	4b66      	ldr	r3, [pc, #408]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a65      	ldr	r2, [pc, #404]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800688a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d013      	beq.n	80068bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006894:	f7fb fd20 	bl	80022d8 <HAL_GetTick>
 8006898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800689a:	e008      	b.n	80068ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800689c:	f7fb fd1c 	bl	80022d8 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b64      	cmp	r3, #100	@ 0x64
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e207      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ae:	4b5b      	ldr	r3, [pc, #364]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0f0      	beq.n	800689c <HAL_RCC_OscConfig+0xc0>
 80068ba:	e014      	b.n	80068e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068bc:	f7fb fd0c 	bl	80022d8 <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068c4:	f7fb fd08 	bl	80022d8 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b64      	cmp	r3, #100	@ 0x64
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e1f3      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d6:	4b51      	ldr	r3, [pc, #324]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f0      	bne.n	80068c4 <HAL_RCC_OscConfig+0xe8>
 80068e2:	e000      	b.n	80068e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d063      	beq.n	80069ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80068f2:	4b4a      	ldr	r3, [pc, #296]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 030c 	and.w	r3, r3, #12
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00b      	beq.n	8006916 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068fe:	4b47      	ldr	r3, [pc, #284]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006906:	2b08      	cmp	r3, #8
 8006908:	d11c      	bne.n	8006944 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800690a:	4b44      	ldr	r3, [pc, #272]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d116      	bne.n	8006944 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006916:	4b41      	ldr	r3, [pc, #260]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <HAL_RCC_OscConfig+0x152>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d001      	beq.n	800692e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e1c7      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800692e:	4b3b      	ldr	r3, [pc, #236]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	4937      	ldr	r1, [pc, #220]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 800693e:	4313      	orrs	r3, r2
 8006940:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006942:	e03a      	b.n	80069ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d020      	beq.n	800698e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800694c:	4b34      	ldr	r3, [pc, #208]	@ (8006a20 <HAL_RCC_OscConfig+0x244>)
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006952:	f7fb fcc1 	bl	80022d8 <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800695a:	f7fb fcbd 	bl	80022d8 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e1a8      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800696c:	4b2b      	ldr	r3, [pc, #172]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0f0      	beq.n	800695a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006978:	4b28      	ldr	r3, [pc, #160]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	4925      	ldr	r1, [pc, #148]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 8006988:	4313      	orrs	r3, r2
 800698a:	600b      	str	r3, [r1, #0]
 800698c:	e015      	b.n	80069ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800698e:	4b24      	ldr	r3, [pc, #144]	@ (8006a20 <HAL_RCC_OscConfig+0x244>)
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006994:	f7fb fca0 	bl	80022d8 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800699c:	f7fb fc9c 	bl	80022d8 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e187      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ae:	4b1b      	ldr	r3, [pc, #108]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1f0      	bne.n	800699c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d036      	beq.n	8006a34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d016      	beq.n	80069fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ce:	4b15      	ldr	r3, [pc, #84]	@ (8006a24 <HAL_RCC_OscConfig+0x248>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d4:	f7fb fc80 	bl	80022d8 <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069dc:	f7fb fc7c 	bl	80022d8 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e167      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ee:	4b0b      	ldr	r3, [pc, #44]	@ (8006a1c <HAL_RCC_OscConfig+0x240>)
 80069f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0f0      	beq.n	80069dc <HAL_RCC_OscConfig+0x200>
 80069fa:	e01b      	b.n	8006a34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069fc:	4b09      	ldr	r3, [pc, #36]	@ (8006a24 <HAL_RCC_OscConfig+0x248>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a02:	f7fb fc69 	bl	80022d8 <HAL_GetTick>
 8006a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a08:	e00e      	b.n	8006a28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a0a:	f7fb fc65 	bl	80022d8 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d907      	bls.n	8006a28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e150      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	42470000 	.word	0x42470000
 8006a24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a28:	4b88      	ldr	r3, [pc, #544]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1ea      	bne.n	8006a0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8097 	beq.w	8006b70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a42:	2300      	movs	r3, #0
 8006a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a46:	4b81      	ldr	r3, [pc, #516]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10f      	bne.n	8006a72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a52:	2300      	movs	r3, #0
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	4b7d      	ldr	r3, [pc, #500]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5a:	4a7c      	ldr	r2, [pc, #496]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a62:	4b7a      	ldr	r3, [pc, #488]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a6a:	60bb      	str	r3, [r7, #8]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a72:	4b77      	ldr	r3, [pc, #476]	@ (8006c50 <HAL_RCC_OscConfig+0x474>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d118      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a7e:	4b74      	ldr	r3, [pc, #464]	@ (8006c50 <HAL_RCC_OscConfig+0x474>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a73      	ldr	r2, [pc, #460]	@ (8006c50 <HAL_RCC_OscConfig+0x474>)
 8006a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a8a:	f7fb fc25 	bl	80022d8 <HAL_GetTick>
 8006a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a90:	e008      	b.n	8006aa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a92:	f7fb fc21 	bl	80022d8 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e10c      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8006c50 <HAL_RCC_OscConfig+0x474>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0f0      	beq.n	8006a92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d106      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x2ea>
 8006ab8:	4b64      	ldr	r3, [pc, #400]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006abc:	4a63      	ldr	r2, [pc, #396]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ac4:	e01c      	b.n	8006b00 <HAL_RCC_OscConfig+0x324>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2b05      	cmp	r3, #5
 8006acc:	d10c      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x30c>
 8006ace:	4b5f      	ldr	r3, [pc, #380]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad2:	4a5e      	ldr	r2, [pc, #376]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006ad4:	f043 0304 	orr.w	r3, r3, #4
 8006ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ada:	4b5c      	ldr	r3, [pc, #368]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ade:	4a5b      	ldr	r2, [pc, #364]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006ae0:	f043 0301 	orr.w	r3, r3, #1
 8006ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ae6:	e00b      	b.n	8006b00 <HAL_RCC_OscConfig+0x324>
 8006ae8:	4b58      	ldr	r3, [pc, #352]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aec:	4a57      	ldr	r2, [pc, #348]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006aee:	f023 0301 	bic.w	r3, r3, #1
 8006af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006af4:	4b55      	ldr	r3, [pc, #340]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af8:	4a54      	ldr	r2, [pc, #336]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006afa:	f023 0304 	bic.w	r3, r3, #4
 8006afe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d015      	beq.n	8006b34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b08:	f7fb fbe6 	bl	80022d8 <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b0e:	e00a      	b.n	8006b26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b10:	f7fb fbe2 	bl	80022d8 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e0cb      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b26:	4b49      	ldr	r3, [pc, #292]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0ee      	beq.n	8006b10 <HAL_RCC_OscConfig+0x334>
 8006b32:	e014      	b.n	8006b5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b34:	f7fb fbd0 	bl	80022d8 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b3a:	e00a      	b.n	8006b52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b3c:	f7fb fbcc 	bl	80022d8 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e0b5      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b52:	4b3e      	ldr	r3, [pc, #248]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1ee      	bne.n	8006b3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d105      	bne.n	8006b70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b64:	4b39      	ldr	r3, [pc, #228]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	4a38      	ldr	r2, [pc, #224]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80a1 	beq.w	8006cbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b7a:	4b34      	ldr	r3, [pc, #208]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 030c 	and.w	r3, r3, #12
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d05c      	beq.n	8006c40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d141      	bne.n	8006c12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b8e:	4b31      	ldr	r3, [pc, #196]	@ (8006c54 <HAL_RCC_OscConfig+0x478>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b94:	f7fb fba0 	bl	80022d8 <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b9a:	e008      	b.n	8006bae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b9c:	f7fb fb9c 	bl	80022d8 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e087      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bae:	4b27      	ldr	r3, [pc, #156]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f0      	bne.n	8006b9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	69da      	ldr	r2, [r3, #28]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc8:	019b      	lsls	r3, r3, #6
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	041b      	lsls	r3, r3, #16
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bdc:	061b      	lsls	r3, r3, #24
 8006bde:	491b      	ldr	r1, [pc, #108]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006be4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c54 <HAL_RCC_OscConfig+0x478>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bea:	f7fb fb75 	bl	80022d8 <HAL_GetTick>
 8006bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf0:	e008      	b.n	8006c04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf2:	f7fb fb71 	bl	80022d8 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e05c      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c04:	4b11      	ldr	r3, [pc, #68]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0f0      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x416>
 8006c10:	e054      	b.n	8006cbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c12:	4b10      	ldr	r3, [pc, #64]	@ (8006c54 <HAL_RCC_OscConfig+0x478>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c18:	f7fb fb5e 	bl	80022d8 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c20:	f7fb fb5a 	bl	80022d8 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e045      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c32:	4b06      	ldr	r3, [pc, #24]	@ (8006c4c <HAL_RCC_OscConfig+0x470>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f0      	bne.n	8006c20 <HAL_RCC_OscConfig+0x444>
 8006c3e:	e03d      	b.n	8006cbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d107      	bne.n	8006c58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e038      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	40007000 	.word	0x40007000
 8006c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c58:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc8 <HAL_RCC_OscConfig+0x4ec>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d028      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d121      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d11a      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c88:	4013      	ands	r3, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d111      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9e:	085b      	lsrs	r3, r3, #1
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d107      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d001      	beq.n	8006cbc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e000      	b.n	8006cbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	40023800 	.word	0x40023800

08006ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e0cc      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ce0:	4b68      	ldr	r3, [pc, #416]	@ (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d90c      	bls.n	8006d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cee:	4b65      	ldr	r3, [pc, #404]	@ (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf6:	4b63      	ldr	r3, [pc, #396]	@ (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d001      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0b8      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d020      	beq.n	8006d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d20:	4b59      	ldr	r3, [pc, #356]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	4a58      	ldr	r2, [pc, #352]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d38:	4b53      	ldr	r3, [pc, #332]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	4a52      	ldr	r2, [pc, #328]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d44:	4b50      	ldr	r3, [pc, #320]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	494d      	ldr	r1, [pc, #308]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d044      	beq.n	8006dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d107      	bne.n	8006d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d6a:	4b47      	ldr	r3, [pc, #284]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d119      	bne.n	8006daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e07f      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d003      	beq.n	8006d8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d107      	bne.n	8006d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e06f      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e067      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006daa:	4b37      	ldr	r3, [pc, #220]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f023 0203 	bic.w	r2, r3, #3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	4934      	ldr	r1, [pc, #208]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dbc:	f7fb fa8c 	bl	80022d8 <HAL_GetTick>
 8006dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc2:	e00a      	b.n	8006dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc4:	f7fb fa88 	bl	80022d8 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e04f      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dda:	4b2b      	ldr	r3, [pc, #172]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 020c 	and.w	r2, r3, #12
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d1eb      	bne.n	8006dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dec:	4b25      	ldr	r3, [pc, #148]	@ (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d20c      	bcs.n	8006e14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dfa:	4b22      	ldr	r3, [pc, #136]	@ (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e02:	4b20      	ldr	r3, [pc, #128]	@ (8006e84 <HAL_RCC_ClockConfig+0x1b8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d001      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e032      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d008      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e20:	4b19      	ldr	r3, [pc, #100]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	4916      	ldr	r1, [pc, #88]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e3e:	4b12      	ldr	r3, [pc, #72]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	490e      	ldr	r1, [pc, #56]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e52:	f000 f821 	bl	8006e98 <HAL_RCC_GetSysClockFreq>
 8006e56:	4602      	mov	r2, r0
 8006e58:	4b0b      	ldr	r3, [pc, #44]	@ (8006e88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	091b      	lsrs	r3, r3, #4
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	490a      	ldr	r1, [pc, #40]	@ (8006e8c <HAL_RCC_ClockConfig+0x1c0>)
 8006e64:	5ccb      	ldrb	r3, [r1, r3]
 8006e66:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6a:	4a09      	ldr	r2, [pc, #36]	@ (8006e90 <HAL_RCC_ClockConfig+0x1c4>)
 8006e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006e6e:	4b09      	ldr	r3, [pc, #36]	@ (8006e94 <HAL_RCC_ClockConfig+0x1c8>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fa ff88 	bl	8001d88 <HAL_InitTick>

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40023c00 	.word	0x40023c00
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	0801dc94 	.word	0x0801dc94
 8006e90:	20000008 	.word	0x20000008
 8006e94:	2000000c 	.word	0x2000000c

08006e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e9c:	b094      	sub	sp, #80	@ 0x50
 8006e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eb0:	4b79      	ldr	r3, [pc, #484]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 030c 	and.w	r3, r3, #12
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d00d      	beq.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	f200 80e1 	bhi.w	8007084 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <HAL_RCC_GetSysClockFreq+0x34>
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	d003      	beq.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006eca:	e0db      	b.n	8007084 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ecc:	4b73      	ldr	r3, [pc, #460]	@ (800709c <HAL_RCC_GetSysClockFreq+0x204>)
 8006ece:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ed0:	e0db      	b.n	800708a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ed2:	4b73      	ldr	r3, [pc, #460]	@ (80070a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ed6:	e0d8      	b.n	800708a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ee0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d063      	beq.n	8006fb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eee:	4b6a      	ldr	r3, [pc, #424]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	099b      	lsrs	r3, r3, #6
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ef8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f00:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f02:	2300      	movs	r3, #0
 8006f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	f04f 0000 	mov.w	r0, #0
 8006f12:	f04f 0100 	mov.w	r1, #0
 8006f16:	0159      	lsls	r1, r3, #5
 8006f18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f1c:	0150      	lsls	r0, r2, #5
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4621      	mov	r1, r4
 8006f24:	1a51      	subs	r1, r2, r1
 8006f26:	6139      	str	r1, [r7, #16]
 8006f28:	4629      	mov	r1, r5
 8006f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	f04f 0200 	mov.w	r2, #0
 8006f34:	f04f 0300 	mov.w	r3, #0
 8006f38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f3c:	4659      	mov	r1, fp
 8006f3e:	018b      	lsls	r3, r1, #6
 8006f40:	4651      	mov	r1, sl
 8006f42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f46:	4651      	mov	r1, sl
 8006f48:	018a      	lsls	r2, r1, #6
 8006f4a:	4651      	mov	r1, sl
 8006f4c:	ebb2 0801 	subs.w	r8, r2, r1
 8006f50:	4659      	mov	r1, fp
 8006f52:	eb63 0901 	sbc.w	r9, r3, r1
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	f04f 0300 	mov.w	r3, #0
 8006f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f6a:	4690      	mov	r8, r2
 8006f6c:	4699      	mov	r9, r3
 8006f6e:	4623      	mov	r3, r4
 8006f70:	eb18 0303 	adds.w	r3, r8, r3
 8006f74:	60bb      	str	r3, [r7, #8]
 8006f76:	462b      	mov	r3, r5
 8006f78:	eb49 0303 	adc.w	r3, r9, r3
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	f04f 0200 	mov.w	r2, #0
 8006f82:	f04f 0300 	mov.w	r3, #0
 8006f86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	024b      	lsls	r3, r1, #9
 8006f8e:	4621      	mov	r1, r4
 8006f90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f94:	4621      	mov	r1, r4
 8006f96:	024a      	lsls	r2, r1, #9
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fa8:	f7f9 f9ca 	bl	8000340 <__aeabi_uldivmod>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fb4:	e058      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fb6:	4b38      	ldr	r3, [pc, #224]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	099b      	lsrs	r3, r3, #6
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fc6:	623b      	str	r3, [r7, #32]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	f04f 0000 	mov.w	r0, #0
 8006fd8:	f04f 0100 	mov.w	r1, #0
 8006fdc:	0159      	lsls	r1, r3, #5
 8006fde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fe2:	0150      	lsls	r0, r2, #5
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4641      	mov	r1, r8
 8006fea:	ebb2 0a01 	subs.w	sl, r2, r1
 8006fee:	4649      	mov	r1, r9
 8006ff0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ff4:	f04f 0200 	mov.w	r2, #0
 8006ff8:	f04f 0300 	mov.w	r3, #0
 8006ffc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007000:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007004:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007008:	ebb2 040a 	subs.w	r4, r2, sl
 800700c:	eb63 050b 	sbc.w	r5, r3, fp
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	00eb      	lsls	r3, r5, #3
 800701a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800701e:	00e2      	lsls	r2, r4, #3
 8007020:	4614      	mov	r4, r2
 8007022:	461d      	mov	r5, r3
 8007024:	4643      	mov	r3, r8
 8007026:	18e3      	adds	r3, r4, r3
 8007028:	603b      	str	r3, [r7, #0]
 800702a:	464b      	mov	r3, r9
 800702c:	eb45 0303 	adc.w	r3, r5, r3
 8007030:	607b      	str	r3, [r7, #4]
 8007032:	f04f 0200 	mov.w	r2, #0
 8007036:	f04f 0300 	mov.w	r3, #0
 800703a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800703e:	4629      	mov	r1, r5
 8007040:	028b      	lsls	r3, r1, #10
 8007042:	4621      	mov	r1, r4
 8007044:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007048:	4621      	mov	r1, r4
 800704a:	028a      	lsls	r2, r1, #10
 800704c:	4610      	mov	r0, r2
 800704e:	4619      	mov	r1, r3
 8007050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007052:	2200      	movs	r2, #0
 8007054:	61bb      	str	r3, [r7, #24]
 8007056:	61fa      	str	r2, [r7, #28]
 8007058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800705c:	f7f9 f970 	bl	8000340 <__aeabi_uldivmod>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4613      	mov	r3, r2
 8007066:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007068:	4b0b      	ldr	r3, [pc, #44]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x200>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	0c1b      	lsrs	r3, r3, #16
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	3301      	adds	r3, #1
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007078:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800707a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800707c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007080:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007082:	e002      	b.n	800708a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007084:	4b05      	ldr	r3, [pc, #20]	@ (800709c <HAL_RCC_GetSysClockFreq+0x204>)
 8007086:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800708a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800708c:	4618      	mov	r0, r3
 800708e:	3750      	adds	r7, #80	@ 0x50
 8007090:	46bd      	mov	sp, r7
 8007092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007096:	bf00      	nop
 8007098:	40023800 	.word	0x40023800
 800709c:	00f42400 	.word	0x00f42400
 80070a0:	007a1200 	.word	0x007a1200

080070a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070a4:	b480      	push	{r7}
 80070a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070a8:	4b03      	ldr	r3, [pc, #12]	@ (80070b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80070aa:	681b      	ldr	r3, [r3, #0]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	20000008 	.word	0x20000008

080070bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070c0:	f7ff fff0 	bl	80070a4 <HAL_RCC_GetHCLKFreq>
 80070c4:	4602      	mov	r2, r0
 80070c6:	4b05      	ldr	r3, [pc, #20]	@ (80070dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	0a9b      	lsrs	r3, r3, #10
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	4903      	ldr	r1, [pc, #12]	@ (80070e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070d2:	5ccb      	ldrb	r3, [r1, r3]
 80070d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d8:	4618      	mov	r0, r3
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	40023800 	.word	0x40023800
 80070e0:	0801dca4 	.word	0x0801dca4

080070e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070e8:	f7ff ffdc 	bl	80070a4 <HAL_RCC_GetHCLKFreq>
 80070ec:	4602      	mov	r2, r0
 80070ee:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	0b5b      	lsrs	r3, r3, #13
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	4903      	ldr	r1, [pc, #12]	@ (8007108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070fa:	5ccb      	ldrb	r3, [r1, r3]
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007100:	4618      	mov	r0, r3
 8007102:	bd80      	pop	{r7, pc}
 8007104:	40023800 	.word	0x40023800
 8007108:	0801dca4 	.word	0x0801dca4

0800710c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	220f      	movs	r2, #15
 800711a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800711c:	4b12      	ldr	r3, [pc, #72]	@ (8007168 <HAL_RCC_GetClockConfig+0x5c>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 0203 	and.w	r2, r3, #3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007128:	4b0f      	ldr	r3, [pc, #60]	@ (8007168 <HAL_RCC_GetClockConfig+0x5c>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007134:	4b0c      	ldr	r3, [pc, #48]	@ (8007168 <HAL_RCC_GetClockConfig+0x5c>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007140:	4b09      	ldr	r3, [pc, #36]	@ (8007168 <HAL_RCC_GetClockConfig+0x5c>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	08db      	lsrs	r3, r3, #3
 8007146:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800714e:	4b07      	ldr	r3, [pc, #28]	@ (800716c <HAL_RCC_GetClockConfig+0x60>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0207 	and.w	r2, r3, #7
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	601a      	str	r2, [r3, #0]
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40023800 	.word	0x40023800
 800716c:	40023c00 	.word	0x40023c00

08007170 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d105      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007194:	2b00      	cmp	r3, #0
 8007196:	d035      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007198:	4b62      	ldr	r3, [pc, #392]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800719e:	f7fb f89b 	bl	80022d8 <HAL_GetTick>
 80071a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071a4:	e008      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80071a6:	f7fb f897 	bl	80022d8 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d901      	bls.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e0b0      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071b8:	4b5b      	ldr	r3, [pc, #364]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1f0      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	019a      	lsls	r2, r3, #6
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	071b      	lsls	r3, r3, #28
 80071d0:	4955      	ldr	r1, [pc, #340]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071d8:	4b52      	ldr	r3, [pc, #328]	@ (8007324 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80071da:	2201      	movs	r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071de:	f7fb f87b 	bl	80022d8 <HAL_GetTick>
 80071e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071e4:	e008      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80071e6:	f7fb f877 	bl	80022d8 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d901      	bls.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e090      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071f8:	4b4b      	ldr	r3, [pc, #300]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0f0      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 8083 	beq.w	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	4b44      	ldr	r3, [pc, #272]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721a:	4a43      	ldr	r2, [pc, #268]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800721c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007220:	6413      	str	r3, [r2, #64]	@ 0x40
 8007222:	4b41      	ldr	r3, [pc, #260]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800722e:	4b3f      	ldr	r3, [pc, #252]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a3e      	ldr	r2, [pc, #248]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007238:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800723a:	f7fb f84d 	bl	80022d8 <HAL_GetTick>
 800723e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007240:	e008      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007242:	f7fb f849 	bl	80022d8 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e062      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007254:	4b35      	ldr	r3, [pc, #212]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0f0      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007260:	4b31      	ldr	r3, [pc, #196]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007264:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007268:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d02f      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	429a      	cmp	r2, r3
 800727c:	d028      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800727e:	4b2a      	ldr	r3, [pc, #168]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007286:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007288:	4b29      	ldr	r3, [pc, #164]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800728a:	2201      	movs	r2, #1
 800728c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800728e:	4b28      	ldr	r3, [pc, #160]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007294:	4a24      	ldr	r2, [pc, #144]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800729a:	4b23      	ldr	r3, [pc, #140]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800729c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d114      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80072a6:	f7fb f817 	bl	80022d8 <HAL_GetTick>
 80072aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ac:	e00a      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ae:	f7fb f813 	bl	80022d8 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072bc:	4293      	cmp	r3, r2
 80072be:	d901      	bls.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e02a      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072c4:	4b18      	ldr	r3, [pc, #96]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0ee      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072dc:	d10d      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80072de:	4b12      	ldr	r3, [pc, #72]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80072ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072f2:	490d      	ldr	r1, [pc, #52]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	608b      	str	r3, [r1, #8]
 80072f8:	e005      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80072fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007300:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007304:	6093      	str	r3, [r2, #8]
 8007306:	4b08      	ldr	r3, [pc, #32]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007308:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007312:	4905      	ldr	r1, [pc, #20]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007314:	4313      	orrs	r3, r2
 8007316:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	42470068 	.word	0x42470068
 8007328:	40023800 	.word	0x40023800
 800732c:	40007000 	.word	0x40007000
 8007330:	42470e40 	.word	0x42470e40

08007334 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d13f      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007352:	4b24      	ldr	r3, [pc, #144]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d006      	beq.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007368:	d12f      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800736a:	4b1f      	ldr	r3, [pc, #124]	@ (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800736c:	617b      	str	r3, [r7, #20]
          break;
 800736e:	e02f      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007370:	4b1c      	ldr	r3, [pc, #112]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007378:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800737c:	d108      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800737e:	4b19      	ldr	r3, [pc, #100]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007386:	4a19      	ldr	r2, [pc, #100]	@ (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007388:	fbb2 f3f3 	udiv	r3, r2, r3
 800738c:	613b      	str	r3, [r7, #16]
 800738e:	e007      	b.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007390:	4b14      	ldr	r3, [pc, #80]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007398:	4a15      	ldr	r2, [pc, #84]	@ (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800739a:	fbb2 f3f3 	udiv	r3, r2, r3
 800739e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80073a0:	4b10      	ldr	r3, [pc, #64]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80073a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073a6:	099b      	lsrs	r3, r3, #6
 80073a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	fb02 f303 	mul.w	r3, r2, r3
 80073b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80073b4:	4b0b      	ldr	r3, [pc, #44]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80073b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073ba:	0f1b      	lsrs	r3, r3, #28
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c6:	617b      	str	r3, [r7, #20]
          break;
 80073c8:	e002      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	617b      	str	r3, [r7, #20]
          break;
 80073ce:	bf00      	nop
        }
      }
      break;
 80073d0:	e000      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80073d2:	bf00      	nop
    }
  }
  return frequency;
 80073d4:	697b      	ldr	r3, [r7, #20]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40023800 	.word	0x40023800
 80073e8:	00bb8000 	.word	0x00bb8000
 80073ec:	007a1200 	.word	0x007a1200
 80073f0:	00f42400 	.word	0x00f42400

080073f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e07b      	b.n	80074fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740a:	2b00      	cmp	r3, #0
 800740c:	d108      	bne.n	8007420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007416:	d009      	beq.n	800742c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	61da      	str	r2, [r3, #28]
 800741e:	e005      	b.n	800742c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d106      	bne.n	800744c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7fa fb9e 	bl	8001b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007462:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007474:	431a      	orrs	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	431a      	orrs	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800749c:	431a      	orrs	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b0:	ea42 0103 	orr.w	r1, r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	0c1b      	lsrs	r3, r3, #16
 80074ca:	f003 0104 	and.w	r1, r3, #4
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d2:	f003 0210 	and.w	r2, r3, #16
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e041      	b.n	800759c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d106      	bne.n	8007532 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f839 	bl	80075a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2202      	movs	r2, #2
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3304      	adds	r3, #4
 8007542:	4619      	mov	r1, r3
 8007544:	4610      	mov	r0, r2
 8007546:	f000 f9bf 	bl	80078c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d001      	beq.n	80075d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e04e      	b.n	800766e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a23      	ldr	r2, [pc, #140]	@ (800767c <HAL_TIM_Base_Start_IT+0xc4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d022      	beq.n	8007638 <HAL_TIM_Base_Start_IT+0x80>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075fa:	d01d      	beq.n	8007638 <HAL_TIM_Base_Start_IT+0x80>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a1f      	ldr	r2, [pc, #124]	@ (8007680 <HAL_TIM_Base_Start_IT+0xc8>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d018      	beq.n	8007638 <HAL_TIM_Base_Start_IT+0x80>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a1e      	ldr	r2, [pc, #120]	@ (8007684 <HAL_TIM_Base_Start_IT+0xcc>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d013      	beq.n	8007638 <HAL_TIM_Base_Start_IT+0x80>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a1c      	ldr	r2, [pc, #112]	@ (8007688 <HAL_TIM_Base_Start_IT+0xd0>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00e      	beq.n	8007638 <HAL_TIM_Base_Start_IT+0x80>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a1b      	ldr	r2, [pc, #108]	@ (800768c <HAL_TIM_Base_Start_IT+0xd4>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d009      	beq.n	8007638 <HAL_TIM_Base_Start_IT+0x80>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a19      	ldr	r2, [pc, #100]	@ (8007690 <HAL_TIM_Base_Start_IT+0xd8>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d004      	beq.n	8007638 <HAL_TIM_Base_Start_IT+0x80>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a18      	ldr	r2, [pc, #96]	@ (8007694 <HAL_TIM_Base_Start_IT+0xdc>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d111      	bne.n	800765c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f003 0307 	and.w	r3, r3, #7
 8007642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2b06      	cmp	r3, #6
 8007648:	d010      	beq.n	800766c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0201 	orr.w	r2, r2, #1
 8007658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800765a:	e007      	b.n	800766c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0201 	orr.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	40010000 	.word	0x40010000
 8007680:	40000400 	.word	0x40000400
 8007684:	40000800 	.word	0x40000800
 8007688:	40000c00 	.word	0x40000c00
 800768c:	40010400 	.word	0x40010400
 8007690:	40014000 	.word	0x40014000
 8007694:	40001800 	.word	0x40001800

08007698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d020      	beq.n	80076fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01b      	beq.n	80076fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f06f 0202 	mvn.w	r2, #2
 80076cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f8d2 	bl	800788c <HAL_TIM_IC_CaptureCallback>
 80076e8:	e005      	b.n	80076f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f8c4 	bl	8007878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f8d5 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	2b00      	cmp	r3, #0
 8007704:	d020      	beq.n	8007748 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01b      	beq.n	8007748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f06f 0204 	mvn.w	r2, #4
 8007718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2202      	movs	r2, #2
 800771e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f8ac 	bl	800788c <HAL_TIM_IC_CaptureCallback>
 8007734:	e005      	b.n	8007742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f89e 	bl	8007878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f8af 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b00      	cmp	r3, #0
 8007750:	d020      	beq.n	8007794 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01b      	beq.n	8007794 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0208 	mvn.w	r2, #8
 8007764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2204      	movs	r2, #4
 800776a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f886 	bl	800788c <HAL_TIM_IC_CaptureCallback>
 8007780:	e005      	b.n	800778e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f878 	bl	8007878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f889 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	2b00      	cmp	r3, #0
 800779c:	d020      	beq.n	80077e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f003 0310 	and.w	r3, r3, #16
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d01b      	beq.n	80077e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f06f 0210 	mvn.w	r2, #16
 80077b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2208      	movs	r2, #8
 80077b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f860 	bl	800788c <HAL_TIM_IC_CaptureCallback>
 80077cc:	e005      	b.n	80077da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f852 	bl	8007878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f863 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00c      	beq.n	8007804 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d007      	beq.n	8007804 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f06f 0201 	mvn.w	r2, #1
 80077fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7f9 ff50 	bl	80016a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00c      	beq.n	8007828 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007814:	2b00      	cmp	r3, #0
 8007816:	d007      	beq.n	8007828 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f900 	bl	8007a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00c      	beq.n	800784c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f834 	bl	80078b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f003 0320 	and.w	r3, r3, #32
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00c      	beq.n	8007870 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f003 0320 	and.w	r3, r3, #32
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0220 	mvn.w	r2, #32
 8007868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f8d2 	bl	8007a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007870:	bf00      	nop
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a43      	ldr	r2, [pc, #268]	@ (80079e8 <TIM_Base_SetConfig+0x120>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d013      	beq.n	8007908 <TIM_Base_SetConfig+0x40>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e6:	d00f      	beq.n	8007908 <TIM_Base_SetConfig+0x40>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a40      	ldr	r2, [pc, #256]	@ (80079ec <TIM_Base_SetConfig+0x124>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00b      	beq.n	8007908 <TIM_Base_SetConfig+0x40>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a3f      	ldr	r2, [pc, #252]	@ (80079f0 <TIM_Base_SetConfig+0x128>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d007      	beq.n	8007908 <TIM_Base_SetConfig+0x40>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a3e      	ldr	r2, [pc, #248]	@ (80079f4 <TIM_Base_SetConfig+0x12c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_Base_SetConfig+0x40>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a3d      	ldr	r2, [pc, #244]	@ (80079f8 <TIM_Base_SetConfig+0x130>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d108      	bne.n	800791a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800790e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a32      	ldr	r2, [pc, #200]	@ (80079e8 <TIM_Base_SetConfig+0x120>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d02b      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007928:	d027      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a2f      	ldr	r2, [pc, #188]	@ (80079ec <TIM_Base_SetConfig+0x124>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d023      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a2e      	ldr	r2, [pc, #184]	@ (80079f0 <TIM_Base_SetConfig+0x128>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d01f      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a2d      	ldr	r2, [pc, #180]	@ (80079f4 <TIM_Base_SetConfig+0x12c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d01b      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a2c      	ldr	r2, [pc, #176]	@ (80079f8 <TIM_Base_SetConfig+0x130>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d017      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a2b      	ldr	r2, [pc, #172]	@ (80079fc <TIM_Base_SetConfig+0x134>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d013      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a2a      	ldr	r2, [pc, #168]	@ (8007a00 <TIM_Base_SetConfig+0x138>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00f      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a29      	ldr	r2, [pc, #164]	@ (8007a04 <TIM_Base_SetConfig+0x13c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00b      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a28      	ldr	r2, [pc, #160]	@ (8007a08 <TIM_Base_SetConfig+0x140>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d007      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a27      	ldr	r2, [pc, #156]	@ (8007a0c <TIM_Base_SetConfig+0x144>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d003      	beq.n	800797a <TIM_Base_SetConfig+0xb2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a26      	ldr	r2, [pc, #152]	@ (8007a10 <TIM_Base_SetConfig+0x148>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d108      	bne.n	800798c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	4313      	orrs	r3, r2
 800798a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	4313      	orrs	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	689a      	ldr	r2, [r3, #8]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a0e      	ldr	r2, [pc, #56]	@ (80079e8 <TIM_Base_SetConfig+0x120>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d003      	beq.n	80079ba <TIM_Base_SetConfig+0xf2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a10      	ldr	r2, [pc, #64]	@ (80079f8 <TIM_Base_SetConfig+0x130>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d103      	bne.n	80079c2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	691a      	ldr	r2, [r3, #16]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f043 0204 	orr.w	r2, r3, #4
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	601a      	str	r2, [r3, #0]
}
 80079da:	bf00      	nop
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40010000 	.word	0x40010000
 80079ec:	40000400 	.word	0x40000400
 80079f0:	40000800 	.word	0x40000800
 80079f4:	40000c00 	.word	0x40000c00
 80079f8:	40010400 	.word	0x40010400
 80079fc:	40014000 	.word	0x40014000
 8007a00:	40014400 	.word	0x40014400
 8007a04:	40014800 	.word	0x40014800
 8007a08:	40001800 	.word	0x40001800
 8007a0c:	40001c00 	.word	0x40001c00
 8007a10:	40002000 	.word	0x40002000

08007a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e042      	b.n	8007ad4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d106      	bne.n	8007a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7fa f8d8 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2224      	movs	r2, #36	@ 0x24
 8007a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 f8d9 	bl	8008c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	691a      	ldr	r2, [r3, #16]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	695a      	ldr	r2, [r3, #20]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007aa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ab4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08a      	sub	sp, #40	@ 0x28
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	d175      	bne.n	8007be8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <HAL_UART_Transmit+0x2c>
 8007b02:	88fb      	ldrh	r3, [r7, #6]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e06e      	b.n	8007bea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2221      	movs	r2, #33	@ 0x21
 8007b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b1a:	f7fa fbdd 	bl	80022d8 <HAL_GetTick>
 8007b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	88fa      	ldrh	r2, [r7, #6]
 8007b24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	88fa      	ldrh	r2, [r7, #6]
 8007b2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b34:	d108      	bne.n	8007b48 <HAL_UART_Transmit+0x6c>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d104      	bne.n	8007b48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	e003      	b.n	8007b50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b50:	e02e      	b.n	8007bb0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2180      	movs	r1, #128	@ 0x80
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 fdaa 	bl	80086b6 <UART_WaitOnFlagUntilTimeout>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e03a      	b.n	8007bea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10b      	bne.n	8007b92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	3302      	adds	r3, #2
 8007b8e:	61bb      	str	r3, [r7, #24]
 8007b90:	e007      	b.n	8007ba2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	781a      	ldrb	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1cb      	bne.n	8007b52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2140      	movs	r1, #64	@ 0x40
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 fd76 	bl	80086b6 <UART_WaitOnFlagUntilTimeout>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e006      	b.n	8007bea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	e000      	b.n	8007bea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007be8:	2302      	movs	r3, #2
  }
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3720      	adds	r7, #32
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08c      	sub	sp, #48	@ 0x30
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b20      	cmp	r3, #32
 8007c0c:	d162      	bne.n	8007cd4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <HAL_UART_Transmit_DMA+0x26>
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e05b      	b.n	8007cd6 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	88fa      	ldrh	r2, [r7, #6]
 8007c28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	88fa      	ldrh	r2, [r7, #6]
 8007c2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2221      	movs	r2, #33	@ 0x21
 8007c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c42:	4a27      	ldr	r2, [pc, #156]	@ (8007ce0 <HAL_UART_Transmit_DMA+0xec>)
 8007c44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4a:	4a26      	ldr	r2, [pc, #152]	@ (8007ce4 <HAL_UART_Transmit_DMA+0xf0>)
 8007c4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c52:	4a25      	ldr	r2, [pc, #148]	@ (8007ce8 <HAL_UART_Transmit_DMA+0xf4>)
 8007c54:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007c5e:	f107 0308 	add.w	r3, r7, #8
 8007c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6a:	6819      	ldr	r1, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3304      	adds	r3, #4
 8007c72:	461a      	mov	r2, r3
 8007c74:	88fb      	ldrh	r3, [r7, #6]
 8007c76:	f7fa fcef 	bl	8002658 <HAL_DMA_Start_IT>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d008      	beq.n	8007c92 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2210      	movs	r2, #16
 8007c84:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e021      	b.n	8007cd6 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c9a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3314      	adds	r3, #20
 8007ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	e853 3f00 	ldrex	r3, [r3]
 8007caa:	617b      	str	r3, [r7, #20]
   return(result);
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3314      	adds	r3, #20
 8007cba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8007cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	6a39      	ldr	r1, [r7, #32]
 8007cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e5      	bne.n	8007c9c <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e000      	b.n	8007cd6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8007cd4:	2302      	movs	r3, #2
  }
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3730      	adds	r7, #48	@ 0x30
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	08008405 	.word	0x08008405
 8007ce4:	0800849f 	.word	0x0800849f
 8007ce8:	08008623 	.word	0x08008623

08007cec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b20      	cmp	r3, #32
 8007d04:	d112      	bne.n	8007d2c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <HAL_UART_Receive_DMA+0x26>
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e00b      	b.n	8007d2e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007d1c:	88fb      	ldrh	r3, [r7, #6]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	68b9      	ldr	r1, [r7, #8]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 fd20 	bl	8008768 <UART_Start_Receive_DMA>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	e000      	b.n	8007d2e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007d2c:	2302      	movs	r3, #2
  }
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b090      	sub	sp, #64	@ 0x40
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d4c:	2b80      	cmp	r3, #128	@ 0x80
 8007d4e:	bf0c      	ite	eq
 8007d50:	2301      	moveq	r3, #1
 8007d52:	2300      	movne	r3, #0
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b21      	cmp	r3, #33	@ 0x21
 8007d62:	d128      	bne.n	8007db6 <HAL_UART_DMAStop+0x80>
 8007d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d025      	beq.n	8007db6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3314      	adds	r3, #20
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	623b      	str	r3, [r7, #32]
   return(result);
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3314      	adds	r3, #20
 8007d88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e5      	bne.n	8007d6a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d004      	beq.n	8007db0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fa fcac 	bl	8002708 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fd7f 	bl	80088b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc0:	2b40      	cmp	r3, #64	@ 0x40
 8007dc2:	bf0c      	ite	eq
 8007dc4:	2301      	moveq	r3, #1
 8007dc6:	2300      	movne	r3, #0
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b22      	cmp	r3, #34	@ 0x22
 8007dd6:	d128      	bne.n	8007e2a <HAL_UART_DMAStop+0xf4>
 8007dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d025      	beq.n	8007e2a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3314      	adds	r3, #20
 8007de4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3314      	adds	r3, #20
 8007dfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007dfe:	61fa      	str	r2, [r7, #28]
 8007e00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	69b9      	ldr	r1, [r7, #24]
 8007e04:	69fa      	ldr	r2, [r7, #28]
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e5      	bne.n	8007dde <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d004      	beq.n	8007e24 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fa fc72 	bl	8002708 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fd6d 	bl	8008904 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3740      	adds	r7, #64	@ 0x40
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b0ba      	sub	sp, #232	@ 0xe8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e6a:	f003 030f 	and.w	r3, r3, #15
 8007e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10f      	bne.n	8007e9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d009      	beq.n	8007e9a <HAL_UART_IRQHandler+0x66>
 8007e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fe12 	bl	8008abc <UART_Receive_IT>
      return;
 8007e98:	e273      	b.n	8008382 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 80de 	beq.w	8008060 <HAL_UART_IRQHandler+0x22c>
 8007ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d106      	bne.n	8007ebe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 80d1 	beq.w	8008060 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00b      	beq.n	8007ee2 <HAL_UART_IRQHandler+0xae>
 8007eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d005      	beq.n	8007ee2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eda:	f043 0201 	orr.w	r2, r3, #1
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ee6:	f003 0304 	and.w	r3, r3, #4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <HAL_UART_IRQHandler+0xd2>
 8007eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d005      	beq.n	8007f06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007efe:	f043 0202 	orr.w	r2, r3, #2
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00b      	beq.n	8007f2a <HAL_UART_IRQHandler+0xf6>
 8007f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d005      	beq.n	8007f2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f22:	f043 0204 	orr.w	r2, r3, #4
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f2e:	f003 0308 	and.w	r3, r3, #8
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d011      	beq.n	8007f5a <HAL_UART_IRQHandler+0x126>
 8007f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f3a:	f003 0320 	and.w	r3, r3, #32
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d105      	bne.n	8007f4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d005      	beq.n	8007f5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f52:	f043 0208 	orr.w	r2, r3, #8
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 820a 	beq.w	8008378 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d008      	beq.n	8007f82 <HAL_UART_IRQHandler+0x14e>
 8007f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f74:	f003 0320 	and.w	r3, r3, #32
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fd9d 	bl	8008abc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f8c:	2b40      	cmp	r3, #64	@ 0x40
 8007f8e:	bf0c      	ite	eq
 8007f90:	2301      	moveq	r3, #1
 8007f92:	2300      	movne	r3, #0
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d103      	bne.n	8007fae <HAL_UART_IRQHandler+0x17a>
 8007fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d04f      	beq.n	800804e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fca8 	bl	8008904 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fbe:	2b40      	cmp	r3, #64	@ 0x40
 8007fc0:	d141      	bne.n	8008046 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3314      	adds	r3, #20
 8007fc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007fd0:	e853 3f00 	ldrex	r3, [r3]
 8007fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3314      	adds	r3, #20
 8007fea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007fee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007ffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1d9      	bne.n	8007fc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008012:	2b00      	cmp	r3, #0
 8008014:	d013      	beq.n	800803e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800801a:	4a8a      	ldr	r2, [pc, #552]	@ (8008244 <HAL_UART_IRQHandler+0x410>)
 800801c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008022:	4618      	mov	r0, r3
 8008024:	f7fa fbe0 	bl	80027e8 <HAL_DMA_Abort_IT>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d016      	beq.n	800805c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008038:	4610      	mov	r0, r2
 800803a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800803c:	e00e      	b.n	800805c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f9ca 	bl	80083d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008044:	e00a      	b.n	800805c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f9c6 	bl	80083d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804c:	e006      	b.n	800805c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f9c2 	bl	80083d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800805a:	e18d      	b.n	8008378 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800805c:	bf00      	nop
    return;
 800805e:	e18b      	b.n	8008378 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008064:	2b01      	cmp	r3, #1
 8008066:	f040 8167 	bne.w	8008338 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800806a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800806e:	f003 0310 	and.w	r3, r3, #16
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 8160 	beq.w	8008338 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 8159 	beq.w	8008338 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008086:	2300      	movs	r3, #0
 8008088:	60bb      	str	r3, [r7, #8]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	60bb      	str	r3, [r7, #8]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	60bb      	str	r3, [r7, #8]
 800809a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a6:	2b40      	cmp	r3, #64	@ 0x40
 80080a8:	f040 80ce 	bne.w	8008248 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 80a9 	beq.w	8008214 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80080ca:	429a      	cmp	r2, r3
 80080cc:	f080 80a2 	bcs.w	8008214 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80080d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080e2:	f000 8088 	beq.w	80081f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	330c      	adds	r3, #12
 80080ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80080fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	330c      	adds	r3, #12
 800810e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008112:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800811e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800812a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1d9      	bne.n	80080e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3314      	adds	r3, #20
 8008138:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008142:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008144:	f023 0301 	bic.w	r3, r3, #1
 8008148:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3314      	adds	r3, #20
 8008152:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008156:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800815a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800815e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008168:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e1      	bne.n	8008132 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3314      	adds	r3, #20
 8008174:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800817e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008184:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3314      	adds	r3, #20
 800818e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008192:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008194:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008198:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80081a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e3      	bne.n	800816e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	330c      	adds	r3, #12
 80081ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80081c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081c6:	f023 0310 	bic.w	r3, r3, #16
 80081ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	330c      	adds	r3, #12
 80081d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80081d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80081da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081e0:	e841 2300 	strex	r3, r2, [r1]
 80081e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e3      	bne.n	80081b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fa fa89 	bl	8002708 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2202      	movs	r2, #2
 80081fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008204:	b29b      	uxth	r3, r3
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	b29b      	uxth	r3, r3
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f8ed 	bl	80083ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008212:	e0b3      	b.n	800837c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008218:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800821c:	429a      	cmp	r2, r3
 800821e:	f040 80ad 	bne.w	800837c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800822c:	f040 80a6 	bne.w	800837c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f8d5 	bl	80083ec <HAL_UARTEx_RxEventCallback>
      return;
 8008242:	e09b      	b.n	800837c <HAL_UART_IRQHandler+0x548>
 8008244:	080089cb 	.word	0x080089cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008250:	b29b      	uxth	r3, r3
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800825c:	b29b      	uxth	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 808e 	beq.w	8008380 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 8089 	beq.w	8008380 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	330c      	adds	r3, #12
 8008274:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800827e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008280:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008284:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	330c      	adds	r3, #12
 800828e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008292:	647a      	str	r2, [r7, #68]	@ 0x44
 8008294:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008298:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e3      	bne.n	800826e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	3314      	adds	r3, #20
 80082ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	e853 3f00 	ldrex	r3, [r3]
 80082b4:	623b      	str	r3, [r7, #32]
   return(result);
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	f023 0301 	bic.w	r3, r3, #1
 80082bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3314      	adds	r3, #20
 80082c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80082ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80082cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e3      	bne.n	80082a6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	330c      	adds	r3, #12
 80082f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	e853 3f00 	ldrex	r3, [r3]
 80082fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f023 0310 	bic.w	r3, r3, #16
 8008302:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	330c      	adds	r3, #12
 800830c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008310:	61fa      	str	r2, [r7, #28]
 8008312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008314:	69b9      	ldr	r1, [r7, #24]
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	617b      	str	r3, [r7, #20]
   return(result);
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e3      	bne.n	80082ec <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800832a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f85b 	bl	80083ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008336:	e023      	b.n	8008380 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800833c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008340:	2b00      	cmp	r3, #0
 8008342:	d009      	beq.n	8008358 <HAL_UART_IRQHandler+0x524>
 8008344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fb4b 	bl	80089ec <UART_Transmit_IT>
    return;
 8008356:	e014      	b.n	8008382 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800835c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00e      	beq.n	8008382 <HAL_UART_IRQHandler+0x54e>
 8008364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800836c:	2b00      	cmp	r3, #0
 800836e:	d008      	beq.n	8008382 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fb8b 	bl	8008a8c <UART_EndTransmit_IT>
    return;
 8008376:	e004      	b.n	8008382 <HAL_UART_IRQHandler+0x54e>
    return;
 8008378:	bf00      	nop
 800837a:	e002      	b.n	8008382 <HAL_UART_IRQHandler+0x54e>
      return;
 800837c:	bf00      	nop
 800837e:	e000      	b.n	8008382 <HAL_UART_IRQHandler+0x54e>
      return;
 8008380:	bf00      	nop
  }
}
 8008382:	37e8      	adds	r7, #232	@ 0xe8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b090      	sub	sp, #64	@ 0x40
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008410:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800841c:	2b00      	cmp	r3, #0
 800841e:	d137      	bne.n	8008490 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008422:	2200      	movs	r2, #0
 8008424:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3314      	adds	r3, #20
 800842c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	623b      	str	r3, [r7, #32]
   return(result);
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800843c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800843e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3314      	adds	r3, #20
 8008444:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008446:	633a      	str	r2, [r7, #48]	@ 0x30
 8008448:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800844c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e5      	bne.n	8008426 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800845a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	330c      	adds	r3, #12
 8008460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	60fb      	str	r3, [r7, #12]
   return(result);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008470:	637b      	str	r3, [r7, #52]	@ 0x34
 8008472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	330c      	adds	r3, #12
 8008478:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800847a:	61fa      	str	r2, [r7, #28]
 800847c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	69b9      	ldr	r1, [r7, #24]
 8008480:	69fa      	ldr	r2, [r7, #28]
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	617b      	str	r3, [r7, #20]
   return(result);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e5      	bne.n	800845a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800848e:	e002      	b.n	8008496 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008490:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008492:	f7ff ff79 	bl	8008388 <HAL_UART_TxCpltCallback>
}
 8008496:	bf00      	nop
 8008498:	3740      	adds	r7, #64	@ 0x40
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f7ff ff75 	bl	800839c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084b2:	bf00      	nop
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b09c      	sub	sp, #112	@ 0x70
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d172      	bne.n	80085bc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80084d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084d8:	2200      	movs	r2, #0
 80084da:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	330c      	adds	r3, #12
 80084e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084e6:	e853 3f00 	ldrex	r3, [r3]
 80084ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	330c      	adds	r3, #12
 80084fa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80084fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80084fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008500:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008502:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008504:	e841 2300 	strex	r3, r2, [r1]
 8008508:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800850a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e5      	bne.n	80084dc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3314      	adds	r3, #20
 8008516:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851a:	e853 3f00 	ldrex	r3, [r3]
 800851e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008522:	f023 0301 	bic.w	r3, r3, #1
 8008526:	667b      	str	r3, [r7, #100]	@ 0x64
 8008528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3314      	adds	r3, #20
 800852e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008530:	647a      	str	r2, [r7, #68]	@ 0x44
 8008532:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800853e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e5      	bne.n	8008510 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3314      	adds	r3, #20
 800854a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	623b      	str	r3, [r7, #32]
   return(result);
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800855a:	663b      	str	r3, [r7, #96]	@ 0x60
 800855c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3314      	adds	r3, #20
 8008562:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008564:	633a      	str	r2, [r7, #48]	@ 0x30
 8008566:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800856a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e5      	bne.n	8008544 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800857a:	2220      	movs	r2, #32
 800857c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008584:	2b01      	cmp	r3, #1
 8008586:	d119      	bne.n	80085bc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008588:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	330c      	adds	r3, #12
 800858e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	60fb      	str	r3, [r7, #12]
   return(result);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 0310 	bic.w	r3, r3, #16
 800859e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	330c      	adds	r3, #12
 80085a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80085a8:	61fa      	str	r2, [r7, #28]
 80085aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	69b9      	ldr	r1, [r7, #24]
 80085ae:	69fa      	ldr	r2, [r7, #28]
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	617b      	str	r3, [r7, #20]
   return(result);
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e5      	bne.n	8008588 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085be:	2200      	movs	r2, #0
 80085c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d106      	bne.n	80085d8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80085ce:	4619      	mov	r1, r3
 80085d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80085d2:	f7ff ff0b 	bl	80083ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085d6:	e002      	b.n	80085de <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80085d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80085da:	f7ff fee9 	bl	80083b0 <HAL_UART_RxCpltCallback>
}
 80085de:	bf00      	nop
 80085e0:	3770      	adds	r7, #112	@ 0x70
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2201      	movs	r2, #1
 80085f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d108      	bne.n	8008614 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008606:	085b      	lsrs	r3, r3, #1
 8008608:	b29b      	uxth	r3, r3
 800860a:	4619      	mov	r1, r3
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f7ff feed 	bl	80083ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008612:	e002      	b.n	800861a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f7ff fed5 	bl	80083c4 <HAL_UART_RxHalfCpltCallback>
}
 800861a:	bf00      	nop
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008632:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800863e:	2b80      	cmp	r3, #128	@ 0x80
 8008640:	bf0c      	ite	eq
 8008642:	2301      	moveq	r3, #1
 8008644:	2300      	movne	r3, #0
 8008646:	b2db      	uxtb	r3, r3
 8008648:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b21      	cmp	r3, #33	@ 0x21
 8008654:	d108      	bne.n	8008668 <UART_DMAError+0x46>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d005      	beq.n	8008668 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2200      	movs	r2, #0
 8008660:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008662:	68b8      	ldr	r0, [r7, #8]
 8008664:	f000 f926 	bl	80088b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008672:	2b40      	cmp	r3, #64	@ 0x40
 8008674:	bf0c      	ite	eq
 8008676:	2301      	moveq	r3, #1
 8008678:	2300      	movne	r3, #0
 800867a:	b2db      	uxtb	r3, r3
 800867c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b22      	cmp	r3, #34	@ 0x22
 8008688:	d108      	bne.n	800869c <UART_DMAError+0x7a>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d005      	beq.n	800869c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2200      	movs	r2, #0
 8008694:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008696:	68b8      	ldr	r0, [r7, #8]
 8008698:	f000 f934 	bl	8008904 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086a0:	f043 0210 	orr.w	r2, r3, #16
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086a8:	68b8      	ldr	r0, [r7, #8]
 80086aa:	f7ff fe95 	bl	80083d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ae:	bf00      	nop
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b086      	sub	sp, #24
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	603b      	str	r3, [r7, #0]
 80086c2:	4613      	mov	r3, r2
 80086c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086c6:	e03b      	b.n	8008740 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086ce:	d037      	beq.n	8008740 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086d0:	f7f9 fe02 	bl	80022d8 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	6a3a      	ldr	r2, [r7, #32]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d302      	bcc.n	80086e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e03a      	b.n	8008760 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d023      	beq.n	8008740 <UART_WaitOnFlagUntilTimeout+0x8a>
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2b80      	cmp	r3, #128	@ 0x80
 80086fc:	d020      	beq.n	8008740 <UART_WaitOnFlagUntilTimeout+0x8a>
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b40      	cmp	r3, #64	@ 0x40
 8008702:	d01d      	beq.n	8008740 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 0308 	and.w	r3, r3, #8
 800870e:	2b08      	cmp	r3, #8
 8008710:	d116      	bne.n	8008740 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	617b      	str	r3, [r7, #20]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 f8eb 	bl	8008904 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2208      	movs	r2, #8
 8008732:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e00f      	b.n	8008760 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4013      	ands	r3, r2
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	429a      	cmp	r2, r3
 800874e:	bf0c      	ite	eq
 8008750:	2301      	moveq	r3, #1
 8008752:	2300      	movne	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	429a      	cmp	r2, r3
 800875c:	d0b4      	beq.n	80086c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b098      	sub	sp, #96	@ 0x60
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	4613      	mov	r3, r2
 8008774:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	88fa      	ldrh	r2, [r7, #6]
 8008780:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2222      	movs	r2, #34	@ 0x22
 800878c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008794:	4a44      	ldr	r2, [pc, #272]	@ (80088a8 <UART_Start_Receive_DMA+0x140>)
 8008796:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800879c:	4a43      	ldr	r2, [pc, #268]	@ (80088ac <UART_Start_Receive_DMA+0x144>)
 800879e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a4:	4a42      	ldr	r2, [pc, #264]	@ (80088b0 <UART_Start_Receive_DMA+0x148>)
 80087a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ac:	2200      	movs	r2, #0
 80087ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80087b0:	f107 0308 	add.w	r3, r7, #8
 80087b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3304      	adds	r3, #4
 80087c0:	4619      	mov	r1, r3
 80087c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	88fb      	ldrh	r3, [r7, #6]
 80087c8:	f7f9 ff46 	bl	8002658 <HAL_DMA_Start_IT>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d008      	beq.n	80087e4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2210      	movs	r2, #16
 80087d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2220      	movs	r2, #32
 80087dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e05d      	b.n	80088a0 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80087e4:	2300      	movs	r3, #0
 80087e6:	613b      	str	r3, [r7, #16]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	613b      	str	r3, [r7, #16]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	613b      	str	r3, [r7, #16]
 80087f8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d019      	beq.n	8008836 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	330c      	adds	r3, #12
 8008808:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008818:	65bb      	str	r3, [r7, #88]	@ 0x58
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	330c      	adds	r3, #12
 8008820:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008822:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008824:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008828:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e5      	bne.n	8008802 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3314      	adds	r3, #20
 800883c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008848:	f043 0301 	orr.w	r3, r3, #1
 800884c:	657b      	str	r3, [r7, #84]	@ 0x54
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3314      	adds	r3, #20
 8008854:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008856:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008858:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800885c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e5      	bne.n	8008836 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3314      	adds	r3, #20
 8008870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	617b      	str	r3, [r7, #20]
   return(result);
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008880:	653b      	str	r3, [r7, #80]	@ 0x50
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3314      	adds	r3, #20
 8008888:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800888a:	627a      	str	r2, [r7, #36]	@ 0x24
 800888c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	6a39      	ldr	r1, [r7, #32]
 8008890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	61fb      	str	r3, [r7, #28]
   return(result);
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e5      	bne.n	800886a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3760      	adds	r7, #96	@ 0x60
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	080084bb 	.word	0x080084bb
 80088ac:	080085e7 	.word	0x080085e7
 80088b0:	08008623 	.word	0x08008623

080088b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b089      	sub	sp, #36	@ 0x24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	330c      	adds	r3, #12
 80088c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80088d2:	61fb      	str	r3, [r7, #28]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	69fa      	ldr	r2, [r7, #28]
 80088dc:	61ba      	str	r2, [r7, #24]
 80088de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6979      	ldr	r1, [r7, #20]
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	613b      	str	r3, [r7, #16]
   return(result);
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e5      	bne.n	80088bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80088f8:	bf00      	nop
 80088fa:	3724      	adds	r7, #36	@ 0x24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008904:	b480      	push	{r7}
 8008906:	b095      	sub	sp, #84	@ 0x54
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	330c      	adds	r3, #12
 8008912:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008916:	e853 3f00 	ldrex	r3, [r3]
 800891a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800891c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	330c      	adds	r3, #12
 800892a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800892c:	643a      	str	r2, [r7, #64]	@ 0x40
 800892e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008930:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008932:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008934:	e841 2300 	strex	r3, r2, [r1]
 8008938:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800893a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e5      	bne.n	800890c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3314      	adds	r3, #20
 8008946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	e853 3f00 	ldrex	r3, [r3]
 800894e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	f023 0301 	bic.w	r3, r3, #1
 8008956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3314      	adds	r3, #20
 800895e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008960:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008962:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008964:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008968:	e841 2300 	strex	r3, r2, [r1]
 800896c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800896e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1e5      	bne.n	8008940 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008978:	2b01      	cmp	r3, #1
 800897a:	d119      	bne.n	80089b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	330c      	adds	r3, #12
 8008982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	60bb      	str	r3, [r7, #8]
   return(result);
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f023 0310 	bic.w	r3, r3, #16
 8008992:	647b      	str	r3, [r7, #68]	@ 0x44
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	330c      	adds	r3, #12
 800899a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800899c:	61ba      	str	r2, [r7, #24]
 800899e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6979      	ldr	r1, [r7, #20]
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	613b      	str	r3, [r7, #16]
   return(result);
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e5      	bne.n	800897c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2220      	movs	r2, #32
 80089b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80089be:	bf00      	nop
 80089c0:	3754      	adds	r7, #84	@ 0x54
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7ff fcfa 	bl	80083d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e4:	bf00      	nop
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b21      	cmp	r3, #33	@ 0x21
 80089fe:	d13e      	bne.n	8008a7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a08:	d114      	bne.n	8008a34 <UART_Transmit_IT+0x48>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d110      	bne.n	8008a34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	1c9a      	adds	r2, r3, #2
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	621a      	str	r2, [r3, #32]
 8008a32:	e008      	b.n	8008a46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	1c59      	adds	r1, r3, #1
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6211      	str	r1, [r2, #32]
 8008a3e:	781a      	ldrb	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	4619      	mov	r1, r3
 8008a54:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10f      	bne.n	8008a7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68da      	ldr	r2, [r3, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e000      	b.n	8008a80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a7e:	2302      	movs	r3, #2
  }
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008aa2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7ff fc6b 	bl	8008388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08c      	sub	sp, #48	@ 0x30
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b22      	cmp	r3, #34	@ 0x22
 8008ad6:	f040 80aa 	bne.w	8008c2e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ae2:	d115      	bne.n	8008b10 <UART_Receive_IT+0x54>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d111      	bne.n	8008b10 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b08:	1c9a      	adds	r2, r3, #2
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b0e:	e024      	b.n	8008b5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b1e:	d007      	beq.n	8008b30 <UART_Receive_IT+0x74>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <UART_Receive_IT+0x82>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d106      	bne.n	8008b3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3a:	701a      	strb	r2, [r3, #0]
 8008b3c:	e008      	b.n	8008b50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	3b01      	subs	r3, #1
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	4619      	mov	r1, r3
 8008b68:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d15d      	bne.n	8008c2a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68da      	ldr	r2, [r3, #12]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 0220 	bic.w	r2, r2, #32
 8008b7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68da      	ldr	r2, [r3, #12]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008b8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	695a      	ldr	r2, [r3, #20]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f022 0201 	bic.w	r2, r2, #1
 8008b9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d135      	bne.n	8008c20 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	330c      	adds	r3, #12
 8008bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f023 0310 	bic.w	r3, r3, #16
 8008bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	330c      	adds	r3, #12
 8008bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bda:	623a      	str	r2, [r7, #32]
 8008bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	69f9      	ldr	r1, [r7, #28]
 8008be0:	6a3a      	ldr	r2, [r7, #32]
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1e5      	bne.n	8008bba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0310 	and.w	r3, r3, #16
 8008bf8:	2b10      	cmp	r3, #16
 8008bfa:	d10a      	bne.n	8008c12 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff fbe7 	bl	80083ec <HAL_UARTEx_RxEventCallback>
 8008c1e:	e002      	b.n	8008c26 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff fbc5 	bl	80083b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	e002      	b.n	8008c30 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e000      	b.n	8008c30 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008c2e:	2302      	movs	r3, #2
  }
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3730      	adds	r7, #48	@ 0x30
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c3c:	b0c0      	sub	sp, #256	@ 0x100
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c54:	68d9      	ldr	r1, [r3, #12]
 8008c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	ea40 0301 	orr.w	r3, r0, r1
 8008c60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	431a      	orrs	r2, r3
 8008c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008c90:	f021 010c 	bic.w	r1, r1, #12
 8008c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c9e:	430b      	orrs	r3, r1
 8008ca0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb2:	6999      	ldr	r1, [r3, #24]
 8008cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	ea40 0301 	orr.w	r3, r0, r1
 8008cbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	4b8f      	ldr	r3, [pc, #572]	@ (8008f04 <UART_SetConfig+0x2cc>)
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d005      	beq.n	8008cd8 <UART_SetConfig+0xa0>
 8008ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4b8d      	ldr	r3, [pc, #564]	@ (8008f08 <UART_SetConfig+0x2d0>)
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d104      	bne.n	8008ce2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cd8:	f7fe fa04 	bl	80070e4 <HAL_RCC_GetPCLK2Freq>
 8008cdc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008ce0:	e003      	b.n	8008cea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ce2:	f7fe f9eb 	bl	80070bc <HAL_RCC_GetPCLK1Freq>
 8008ce6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cf4:	f040 810c 	bne.w	8008f10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008d06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	1891      	adds	r1, r2, r2
 8008d10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008d12:	415b      	adcs	r3, r3
 8008d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	eb12 0801 	adds.w	r8, r2, r1
 8008d20:	4629      	mov	r1, r5
 8008d22:	eb43 0901 	adc.w	r9, r3, r1
 8008d26:	f04f 0200 	mov.w	r2, #0
 8008d2a:	f04f 0300 	mov.w	r3, #0
 8008d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d3a:	4690      	mov	r8, r2
 8008d3c:	4699      	mov	r9, r3
 8008d3e:	4623      	mov	r3, r4
 8008d40:	eb18 0303 	adds.w	r3, r8, r3
 8008d44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d48:	462b      	mov	r3, r5
 8008d4a:	eb49 0303 	adc.w	r3, r9, r3
 8008d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d66:	460b      	mov	r3, r1
 8008d68:	18db      	adds	r3, r3, r3
 8008d6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	eb42 0303 	adc.w	r3, r2, r3
 8008d72:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008d78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008d7c:	f7f7 fae0 	bl	8000340 <__aeabi_uldivmod>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4b61      	ldr	r3, [pc, #388]	@ (8008f0c <UART_SetConfig+0x2d4>)
 8008d86:	fba3 2302 	umull	r2, r3, r3, r2
 8008d8a:	095b      	lsrs	r3, r3, #5
 8008d8c:	011c      	lsls	r4, r3, #4
 8008d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008d9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008da0:	4642      	mov	r2, r8
 8008da2:	464b      	mov	r3, r9
 8008da4:	1891      	adds	r1, r2, r2
 8008da6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008da8:	415b      	adcs	r3, r3
 8008daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008db0:	4641      	mov	r1, r8
 8008db2:	eb12 0a01 	adds.w	sl, r2, r1
 8008db6:	4649      	mov	r1, r9
 8008db8:	eb43 0b01 	adc.w	fp, r3, r1
 8008dbc:	f04f 0200 	mov.w	r2, #0
 8008dc0:	f04f 0300 	mov.w	r3, #0
 8008dc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008dc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008dcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dd0:	4692      	mov	sl, r2
 8008dd2:	469b      	mov	fp, r3
 8008dd4:	4643      	mov	r3, r8
 8008dd6:	eb1a 0303 	adds.w	r3, sl, r3
 8008dda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008dde:	464b      	mov	r3, r9
 8008de0:	eb4b 0303 	adc.w	r3, fp, r3
 8008de4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008df4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008df8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	18db      	adds	r3, r3, r3
 8008e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e02:	4613      	mov	r3, r2
 8008e04:	eb42 0303 	adc.w	r3, r2, r3
 8008e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008e0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008e12:	f7f7 fa95 	bl	8000340 <__aeabi_uldivmod>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8008f0c <UART_SetConfig+0x2d4>)
 8008e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8008e22:	095b      	lsrs	r3, r3, #5
 8008e24:	2264      	movs	r2, #100	@ 0x64
 8008e26:	fb02 f303 	mul.w	r3, r2, r3
 8008e2a:	1acb      	subs	r3, r1, r3
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008e32:	4b36      	ldr	r3, [pc, #216]	@ (8008f0c <UART_SetConfig+0x2d4>)
 8008e34:	fba3 2302 	umull	r2, r3, r3, r2
 8008e38:	095b      	lsrs	r3, r3, #5
 8008e3a:	005b      	lsls	r3, r3, #1
 8008e3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008e40:	441c      	add	r4, r3
 8008e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008e50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008e54:	4642      	mov	r2, r8
 8008e56:	464b      	mov	r3, r9
 8008e58:	1891      	adds	r1, r2, r2
 8008e5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008e5c:	415b      	adcs	r3, r3
 8008e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008e64:	4641      	mov	r1, r8
 8008e66:	1851      	adds	r1, r2, r1
 8008e68:	6339      	str	r1, [r7, #48]	@ 0x30
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	414b      	adcs	r3, r1
 8008e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	f04f 0300 	mov.w	r3, #0
 8008e78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	00cb      	lsls	r3, r1, #3
 8008e80:	4651      	mov	r1, sl
 8008e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e86:	4651      	mov	r1, sl
 8008e88:	00ca      	lsls	r2, r1, #3
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4603      	mov	r3, r0
 8008e90:	4642      	mov	r2, r8
 8008e92:	189b      	adds	r3, r3, r2
 8008e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e98:	464b      	mov	r3, r9
 8008e9a:	460a      	mov	r2, r1
 8008e9c:	eb42 0303 	adc.w	r3, r2, r3
 8008ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008eb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008eb8:	460b      	mov	r3, r1
 8008eba:	18db      	adds	r3, r3, r3
 8008ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	eb42 0303 	adc.w	r3, r2, r3
 8008ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008eca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008ece:	f7f7 fa37 	bl	8000340 <__aeabi_uldivmod>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f0c <UART_SetConfig+0x2d4>)
 8008ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8008edc:	095b      	lsrs	r3, r3, #5
 8008ede:	2164      	movs	r1, #100	@ 0x64
 8008ee0:	fb01 f303 	mul.w	r3, r1, r3
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	00db      	lsls	r3, r3, #3
 8008ee8:	3332      	adds	r3, #50	@ 0x32
 8008eea:	4a08      	ldr	r2, [pc, #32]	@ (8008f0c <UART_SetConfig+0x2d4>)
 8008eec:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef0:	095b      	lsrs	r3, r3, #5
 8008ef2:	f003 0207 	and.w	r2, r3, #7
 8008ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4422      	add	r2, r4
 8008efe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f00:	e106      	b.n	8009110 <UART_SetConfig+0x4d8>
 8008f02:	bf00      	nop
 8008f04:	40011000 	.word	0x40011000
 8008f08:	40011400 	.word	0x40011400
 8008f0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008f1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008f22:	4642      	mov	r2, r8
 8008f24:	464b      	mov	r3, r9
 8008f26:	1891      	adds	r1, r2, r2
 8008f28:	6239      	str	r1, [r7, #32]
 8008f2a:	415b      	adcs	r3, r3
 8008f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f32:	4641      	mov	r1, r8
 8008f34:	1854      	adds	r4, r2, r1
 8008f36:	4649      	mov	r1, r9
 8008f38:	eb43 0501 	adc.w	r5, r3, r1
 8008f3c:	f04f 0200 	mov.w	r2, #0
 8008f40:	f04f 0300 	mov.w	r3, #0
 8008f44:	00eb      	lsls	r3, r5, #3
 8008f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f4a:	00e2      	lsls	r2, r4, #3
 8008f4c:	4614      	mov	r4, r2
 8008f4e:	461d      	mov	r5, r3
 8008f50:	4643      	mov	r3, r8
 8008f52:	18e3      	adds	r3, r4, r3
 8008f54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f58:	464b      	mov	r3, r9
 8008f5a:	eb45 0303 	adc.w	r3, r5, r3
 8008f5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f72:	f04f 0200 	mov.w	r2, #0
 8008f76:	f04f 0300 	mov.w	r3, #0
 8008f7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008f7e:	4629      	mov	r1, r5
 8008f80:	008b      	lsls	r3, r1, #2
 8008f82:	4621      	mov	r1, r4
 8008f84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f88:	4621      	mov	r1, r4
 8008f8a:	008a      	lsls	r2, r1, #2
 8008f8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008f90:	f7f7 f9d6 	bl	8000340 <__aeabi_uldivmod>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	4b60      	ldr	r3, [pc, #384]	@ (800911c <UART_SetConfig+0x4e4>)
 8008f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f9e:	095b      	lsrs	r3, r3, #5
 8008fa0:	011c      	lsls	r4, r3, #4
 8008fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008fb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008fb4:	4642      	mov	r2, r8
 8008fb6:	464b      	mov	r3, r9
 8008fb8:	1891      	adds	r1, r2, r2
 8008fba:	61b9      	str	r1, [r7, #24]
 8008fbc:	415b      	adcs	r3, r3
 8008fbe:	61fb      	str	r3, [r7, #28]
 8008fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fc4:	4641      	mov	r1, r8
 8008fc6:	1851      	adds	r1, r2, r1
 8008fc8:	6139      	str	r1, [r7, #16]
 8008fca:	4649      	mov	r1, r9
 8008fcc:	414b      	adcs	r3, r1
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	f04f 0200 	mov.w	r2, #0
 8008fd4:	f04f 0300 	mov.w	r3, #0
 8008fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fdc:	4659      	mov	r1, fp
 8008fde:	00cb      	lsls	r3, r1, #3
 8008fe0:	4651      	mov	r1, sl
 8008fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fe6:	4651      	mov	r1, sl
 8008fe8:	00ca      	lsls	r2, r1, #3
 8008fea:	4610      	mov	r0, r2
 8008fec:	4619      	mov	r1, r3
 8008fee:	4603      	mov	r3, r0
 8008ff0:	4642      	mov	r2, r8
 8008ff2:	189b      	adds	r3, r3, r2
 8008ff4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ff8:	464b      	mov	r3, r9
 8008ffa:	460a      	mov	r2, r1
 8008ffc:	eb42 0303 	adc.w	r3, r2, r3
 8009000:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800900e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009010:	f04f 0200 	mov.w	r2, #0
 8009014:	f04f 0300 	mov.w	r3, #0
 8009018:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800901c:	4649      	mov	r1, r9
 800901e:	008b      	lsls	r3, r1, #2
 8009020:	4641      	mov	r1, r8
 8009022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009026:	4641      	mov	r1, r8
 8009028:	008a      	lsls	r2, r1, #2
 800902a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800902e:	f7f7 f987 	bl	8000340 <__aeabi_uldivmod>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	4611      	mov	r1, r2
 8009038:	4b38      	ldr	r3, [pc, #224]	@ (800911c <UART_SetConfig+0x4e4>)
 800903a:	fba3 2301 	umull	r2, r3, r3, r1
 800903e:	095b      	lsrs	r3, r3, #5
 8009040:	2264      	movs	r2, #100	@ 0x64
 8009042:	fb02 f303 	mul.w	r3, r2, r3
 8009046:	1acb      	subs	r3, r1, r3
 8009048:	011b      	lsls	r3, r3, #4
 800904a:	3332      	adds	r3, #50	@ 0x32
 800904c:	4a33      	ldr	r2, [pc, #204]	@ (800911c <UART_SetConfig+0x4e4>)
 800904e:	fba2 2303 	umull	r2, r3, r2, r3
 8009052:	095b      	lsrs	r3, r3, #5
 8009054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009058:	441c      	add	r4, r3
 800905a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800905e:	2200      	movs	r2, #0
 8009060:	673b      	str	r3, [r7, #112]	@ 0x70
 8009062:	677a      	str	r2, [r7, #116]	@ 0x74
 8009064:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009068:	4642      	mov	r2, r8
 800906a:	464b      	mov	r3, r9
 800906c:	1891      	adds	r1, r2, r2
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	415b      	adcs	r3, r3
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009078:	4641      	mov	r1, r8
 800907a:	1851      	adds	r1, r2, r1
 800907c:	6039      	str	r1, [r7, #0]
 800907e:	4649      	mov	r1, r9
 8009080:	414b      	adcs	r3, r1
 8009082:	607b      	str	r3, [r7, #4]
 8009084:	f04f 0200 	mov.w	r2, #0
 8009088:	f04f 0300 	mov.w	r3, #0
 800908c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009090:	4659      	mov	r1, fp
 8009092:	00cb      	lsls	r3, r1, #3
 8009094:	4651      	mov	r1, sl
 8009096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800909a:	4651      	mov	r1, sl
 800909c:	00ca      	lsls	r2, r1, #3
 800909e:	4610      	mov	r0, r2
 80090a0:	4619      	mov	r1, r3
 80090a2:	4603      	mov	r3, r0
 80090a4:	4642      	mov	r2, r8
 80090a6:	189b      	adds	r3, r3, r2
 80090a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090aa:	464b      	mov	r3, r9
 80090ac:	460a      	mov	r2, r1
 80090ae:	eb42 0303 	adc.w	r3, r2, r3
 80090b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80090be:	667a      	str	r2, [r7, #100]	@ 0x64
 80090c0:	f04f 0200 	mov.w	r2, #0
 80090c4:	f04f 0300 	mov.w	r3, #0
 80090c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80090cc:	4649      	mov	r1, r9
 80090ce:	008b      	lsls	r3, r1, #2
 80090d0:	4641      	mov	r1, r8
 80090d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090d6:	4641      	mov	r1, r8
 80090d8:	008a      	lsls	r2, r1, #2
 80090da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80090de:	f7f7 f92f 	bl	8000340 <__aeabi_uldivmod>
 80090e2:	4602      	mov	r2, r0
 80090e4:	460b      	mov	r3, r1
 80090e6:	4b0d      	ldr	r3, [pc, #52]	@ (800911c <UART_SetConfig+0x4e4>)
 80090e8:	fba3 1302 	umull	r1, r3, r3, r2
 80090ec:	095b      	lsrs	r3, r3, #5
 80090ee:	2164      	movs	r1, #100	@ 0x64
 80090f0:	fb01 f303 	mul.w	r3, r1, r3
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	3332      	adds	r3, #50	@ 0x32
 80090fa:	4a08      	ldr	r2, [pc, #32]	@ (800911c <UART_SetConfig+0x4e4>)
 80090fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009100:	095b      	lsrs	r3, r3, #5
 8009102:	f003 020f 	and.w	r2, r3, #15
 8009106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4422      	add	r2, r4
 800910e:	609a      	str	r2, [r3, #8]
}
 8009110:	bf00      	nop
 8009112:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009116:	46bd      	mov	sp, r7
 8009118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800911c:	51eb851f 	.word	0x51eb851f

08009120 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009120:	b084      	sub	sp, #16
 8009122:	b580      	push	{r7, lr}
 8009124:	b084      	sub	sp, #16
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	f107 001c 	add.w	r0, r7, #28
 800912e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009132:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009136:	2b01      	cmp	r3, #1
 8009138:	d123      	bne.n	8009182 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800914e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009162:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009166:	2b01      	cmp	r3, #1
 8009168:	d105      	bne.n	8009176 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f9dc 	bl	8009534 <USB_CoreReset>
 800917c:	4603      	mov	r3, r0
 800917e:	73fb      	strb	r3, [r7, #15]
 8009180:	e01b      	b.n	80091ba <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f9d0 	bl	8009534 <USB_CoreReset>
 8009194:	4603      	mov	r3, r0
 8009196:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009198:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800919c:	2b00      	cmp	r3, #0
 800919e:	d106      	bne.n	80091ae <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80091ac:	e005      	b.n	80091ba <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80091ba:	7fbb      	ldrb	r3, [r7, #30]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d10b      	bne.n	80091d8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	f043 0206 	orr.w	r2, r3, #6
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f043 0220 	orr.w	r2, r3, #32
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091e4:	b004      	add	sp, #16
 80091e6:	4770      	bx	lr

080091e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f043 0201 	orr.w	r2, r3, #1
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f023 0201 	bic.w	r2, r3, #1
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d115      	bne.n	800927a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800925a:	200a      	movs	r0, #10
 800925c:	f7f9 f848 	bl	80022f0 <HAL_Delay>
      ms += 10U;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	330a      	adds	r3, #10
 8009264:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f956 	bl	8009518 <USB_GetMode>
 800926c:	4603      	mov	r3, r0
 800926e:	2b01      	cmp	r3, #1
 8009270:	d01e      	beq.n	80092b0 <USB_SetCurrentMode+0x84>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2bc7      	cmp	r3, #199	@ 0xc7
 8009276:	d9f0      	bls.n	800925a <USB_SetCurrentMode+0x2e>
 8009278:	e01a      	b.n	80092b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800927a:	78fb      	ldrb	r3, [r7, #3]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d115      	bne.n	80092ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800928c:	200a      	movs	r0, #10
 800928e:	f7f9 f82f 	bl	80022f0 <HAL_Delay>
      ms += 10U;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	330a      	adds	r3, #10
 8009296:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f93d 	bl	8009518 <USB_GetMode>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d005      	beq.n	80092b0 <USB_SetCurrentMode+0x84>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80092a8:	d9f0      	bls.n	800928c <USB_SetCurrentMode+0x60>
 80092aa:	e001      	b.n	80092b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e005      	b.n	80092bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80092b4:	d101      	bne.n	80092ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e000      	b.n	80092bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092ce:	2300      	movs	r3, #0
 80092d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3301      	adds	r3, #1
 80092d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092de:	d901      	bls.n	80092e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e01b      	b.n	800931c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	daf2      	bge.n	80092d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80092ec:	2300      	movs	r3, #0
 80092ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	019b      	lsls	r3, r3, #6
 80092f4:	f043 0220 	orr.w	r2, r3, #32
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3301      	adds	r3, #1
 8009300:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009308:	d901      	bls.n	800930e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800930a:	2303      	movs	r3, #3
 800930c:	e006      	b.n	800931c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	f003 0320 	and.w	r3, r3, #32
 8009316:	2b20      	cmp	r3, #32
 8009318:	d0f0      	beq.n	80092fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3301      	adds	r3, #1
 8009338:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009340:	d901      	bls.n	8009346 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e018      	b.n	8009378 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	2b00      	cmp	r3, #0
 800934c:	daf2      	bge.n	8009334 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2210      	movs	r2, #16
 8009356:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	3301      	adds	r3, #1
 800935c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009364:	d901      	bls.n	800936a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e006      	b.n	8009378 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	f003 0310 	and.w	r3, r3, #16
 8009372:	2b10      	cmp	r3, #16
 8009374:	d0f0      	beq.n	8009358 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009384:	b480      	push	{r7}
 8009386:	b089      	sub	sp, #36	@ 0x24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	4611      	mov	r1, r2
 8009390:	461a      	mov	r2, r3
 8009392:	460b      	mov	r3, r1
 8009394:	71fb      	strb	r3, [r7, #7]
 8009396:	4613      	mov	r3, r2
 8009398:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80093a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d123      	bne.n	80093f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80093aa:	88bb      	ldrh	r3, [r7, #4]
 80093ac:	3303      	adds	r3, #3
 80093ae:	089b      	lsrs	r3, r3, #2
 80093b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80093b2:	2300      	movs	r3, #0
 80093b4:	61bb      	str	r3, [r7, #24]
 80093b6:	e018      	b.n	80093ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	031a      	lsls	r2, r3, #12
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093c4:	461a      	mov	r2, r3
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	3301      	adds	r3, #1
 80093d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	3301      	adds	r3, #1
 80093d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	3301      	adds	r3, #1
 80093dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	3301      	adds	r3, #1
 80093e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	3301      	adds	r3, #1
 80093e8:	61bb      	str	r3, [r7, #24]
 80093ea:	69ba      	ldr	r2, [r7, #24]
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d3e2      	bcc.n	80093b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3724      	adds	r7, #36	@ 0x24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009400:	b480      	push	{r7}
 8009402:	b08b      	sub	sp, #44	@ 0x2c
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	4613      	mov	r3, r2
 800940c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009416:	88fb      	ldrh	r3, [r7, #6]
 8009418:	089b      	lsrs	r3, r3, #2
 800941a:	b29b      	uxth	r3, r3
 800941c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800941e:	88fb      	ldrh	r3, [r7, #6]
 8009420:	f003 0303 	and.w	r3, r3, #3
 8009424:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009426:	2300      	movs	r3, #0
 8009428:	623b      	str	r3, [r7, #32]
 800942a:	e014      	b.n	8009456 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009436:	601a      	str	r2, [r3, #0]
    pDest++;
 8009438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943a:	3301      	adds	r3, #1
 800943c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	3301      	adds	r3, #1
 8009442:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009446:	3301      	adds	r3, #1
 8009448:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800944a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944c:	3301      	adds	r3, #1
 800944e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	3301      	adds	r3, #1
 8009454:	623b      	str	r3, [r7, #32]
 8009456:	6a3a      	ldr	r2, [r7, #32]
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	429a      	cmp	r2, r3
 800945c:	d3e6      	bcc.n	800942c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800945e:	8bfb      	ldrh	r3, [r7, #30]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d01e      	beq.n	80094a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009464:	2300      	movs	r3, #0
 8009466:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800946e:	461a      	mov	r2, r3
 8009470:	f107 0310 	add.w	r3, r7, #16
 8009474:	6812      	ldr	r2, [r2, #0]
 8009476:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	b2db      	uxtb	r3, r3
 800947e:	00db      	lsls	r3, r3, #3
 8009480:	fa22 f303 	lsr.w	r3, r2, r3
 8009484:	b2da      	uxtb	r2, r3
 8009486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009488:	701a      	strb	r2, [r3, #0]
      i++;
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	3301      	adds	r3, #1
 800948e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009492:	3301      	adds	r3, #1
 8009494:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009496:	8bfb      	ldrh	r3, [r7, #30]
 8009498:	3b01      	subs	r3, #1
 800949a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800949c:	8bfb      	ldrh	r3, [r7, #30]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1ea      	bne.n	8009478 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80094a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	372c      	adds	r7, #44	@ 0x2c
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	4013      	ands	r3, r2
 80094c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80094c8:	68fb      	ldr	r3, [r7, #12]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b085      	sub	sp, #20
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80094e6:	78fb      	ldrb	r3, [r7, #3]
 80094e8:	015a      	lsls	r2, r3, #5
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80094f6:	78fb      	ldrb	r3, [r7, #3]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	4013      	ands	r3, r2
 8009508:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800950a:	68bb      	ldr	r3, [r7, #8]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	f003 0301 	and.w	r3, r3, #1
}
 8009528:	4618      	mov	r0, r3
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3301      	adds	r3, #1
 8009544:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800954c:	d901      	bls.n	8009552 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e022      	b.n	8009598 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	2b00      	cmp	r3, #0
 8009558:	daf2      	bge.n	8009540 <USB_CoreReset+0xc>

  count = 10U;
 800955a:	230a      	movs	r3, #10
 800955c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800955e:	e002      	b.n	8009566 <USB_CoreReset+0x32>
  {
    count--;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	3b01      	subs	r3, #1
 8009564:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1f9      	bne.n	8009560 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	f043 0201 	orr.w	r2, r3, #1
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3301      	adds	r3, #1
 800957c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009584:	d901      	bls.n	800958a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e006      	b.n	8009598 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b01      	cmp	r3, #1
 8009594:	d0f0      	beq.n	8009578 <USB_CoreReset+0x44>

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095a4:	b084      	sub	sp, #16
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b086      	sub	sp, #24
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80095b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80095c4:	461a      	mov	r2, r3
 80095c6:	2300      	movs	r3, #0
 80095c8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095da:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d119      	bne.n	800962e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80095fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d10a      	bne.n	8009618 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009610:	f043 0304 	orr.w	r3, r3, #4
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	e014      	b.n	8009642 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009626:	f023 0304 	bic.w	r3, r3, #4
 800962a:	6013      	str	r3, [r2, #0]
 800962c:	e009      	b.n	8009642 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800963c:	f023 0304 	bic.w	r3, r3, #4
 8009640:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009642:	2110      	movs	r1, #16
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff fe3d 	bl	80092c4 <USB_FlushTxFifo>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7ff fe67 	bl	8009328 <USB_FlushRxFifo>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009664:	2300      	movs	r3, #0
 8009666:	613b      	str	r3, [r7, #16]
 8009668:	e015      	b.n	8009696 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	4413      	add	r3, r2
 8009672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009676:	461a      	mov	r2, r3
 8009678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800967c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	4413      	add	r3, r2
 8009686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800968a:	461a      	mov	r2, r3
 800968c:	2300      	movs	r3, #0
 800968e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	3301      	adds	r3, #1
 8009694:	613b      	str	r3, [r7, #16]
 8009696:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800969a:	461a      	mov	r2, r3
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	4293      	cmp	r3, r2
 80096a0:	d3e3      	bcc.n	800966a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096ae:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a18      	ldr	r2, [pc, #96]	@ (8009714 <USB_HostInit+0x170>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d10b      	bne.n	80096d0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096be:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a15      	ldr	r2, [pc, #84]	@ (8009718 <USB_HostInit+0x174>)
 80096c4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a14      	ldr	r2, [pc, #80]	@ (800971c <USB_HostInit+0x178>)
 80096ca:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80096ce:	e009      	b.n	80096e4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2280      	movs	r2, #128	@ 0x80
 80096d4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a11      	ldr	r2, [pc, #68]	@ (8009720 <USB_HostInit+0x17c>)
 80096da:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a11      	ldr	r2, [pc, #68]	@ (8009724 <USB_HostInit+0x180>)
 80096e0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80096e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d105      	bne.n	80096f8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	f043 0210 	orr.w	r2, r3, #16
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	699a      	ldr	r2, [r3, #24]
 80096fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009728 <USB_HostInit+0x184>)
 80096fe:	4313      	orrs	r3, r2
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009704:	7dfb      	ldrb	r3, [r7, #23]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009710:	b004      	add	sp, #16
 8009712:	4770      	bx	lr
 8009714:	40040000 	.word	0x40040000
 8009718:	01000200 	.word	0x01000200
 800971c:	00e00300 	.word	0x00e00300
 8009720:	00600080 	.word	0x00600080
 8009724:	004000e0 	.word	0x004000e0
 8009728:	a3200008 	.word	0xa3200008

0800972c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	78fb      	ldrb	r3, [r7, #3]
 800975a:	f003 0303 	and.w	r3, r3, #3
 800975e:	68f9      	ldr	r1, [r7, #12]
 8009760:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009764:	4313      	orrs	r3, r2
 8009766:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d107      	bne.n	800977e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009774:	461a      	mov	r2, r3
 8009776:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800977a:	6053      	str	r3, [r2, #4]
 800977c:	e00c      	b.n	8009798 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800977e:	78fb      	ldrb	r3, [r7, #3]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d107      	bne.n	8009794 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800978a:	461a      	mov	r2, r3
 800978c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009790:	6053      	str	r3, [r2, #4]
 8009792:	e001      	b.n	8009798 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e000      	b.n	800979a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80097c6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80097d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097d4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80097d6:	2064      	movs	r0, #100	@ 0x64
 80097d8:	f7f8 fd8a 	bl	80022f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80097e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80097ea:	200a      	movs	r0, #10
 80097ec:	f7f8 fd80 	bl	80022f0 <HAL_Delay>

  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b085      	sub	sp, #20
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800980a:	2300      	movs	r3, #0
 800980c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800981e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009826:	2b00      	cmp	r3, #0
 8009828:	d109      	bne.n	800983e <USB_DriveVbus+0x44>
 800982a:	78fb      	ldrb	r3, [r7, #3]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d106      	bne.n	800983e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009838:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800983c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009848:	d109      	bne.n	800985e <USB_DriveVbus+0x64>
 800984a:	78fb      	ldrb	r3, [r7, #3]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d106      	bne.n	800985e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009858:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800985c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009878:	2300      	movs	r3, #0
 800987a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	0c5b      	lsrs	r3, r3, #17
 800988a:	f003 0303 	and.w	r3, r3, #3
}
 800988e:	4618      	mov	r0, r3
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800989a:	b480      	push	{r7}
 800989c:	b085      	sub	sp, #20
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	b29b      	uxth	r3, r3
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	4608      	mov	r0, r1
 80098c6:	4611      	mov	r1, r2
 80098c8:	461a      	mov	r2, r3
 80098ca:	4603      	mov	r3, r0
 80098cc:	70fb      	strb	r3, [r7, #3]
 80098ce:	460b      	mov	r3, r1
 80098d0:	70bb      	strb	r3, [r7, #2]
 80098d2:	4613      	mov	r3, r2
 80098d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80098de:	78fb      	ldrb	r3, [r7, #3]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098ea:	461a      	mov	r2, r3
 80098ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098f0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80098f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d87c      	bhi.n	80099f4 <USB_HC_Init+0x138>
 80098fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009900 <USB_HC_Init+0x44>)
 80098fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009900:	08009911 	.word	0x08009911
 8009904:	080099b7 	.word	0x080099b7
 8009908:	08009911 	.word	0x08009911
 800990c:	08009979 	.word	0x08009979
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	4413      	add	r3, r2
 8009918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800991c:	461a      	mov	r2, r3
 800991e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8009922:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009924:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009928:	2b00      	cmp	r3, #0
 800992a:	da10      	bge.n	800994e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	015a      	lsls	r2, r3, #5
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	4413      	add	r3, r2
 8009934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	78fa      	ldrb	r2, [r7, #3]
 800993c:	0151      	lsls	r1, r2, #5
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	440a      	add	r2, r1
 8009942:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800994a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800994c:	e055      	b.n	80099fa <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a6f      	ldr	r2, [pc, #444]	@ (8009b10 <USB_HC_Init+0x254>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d151      	bne.n	80099fa <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009956:	78fb      	ldrb	r3, [r7, #3]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	4413      	add	r3, r2
 800995e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	78fa      	ldrb	r2, [r7, #3]
 8009966:	0151      	lsls	r1, r2, #5
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	440a      	add	r2, r1
 800996c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009970:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009974:	60d3      	str	r3, [r2, #12]
      break;
 8009976:	e040      	b.n	80099fa <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009978:	78fb      	ldrb	r3, [r7, #3]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	4413      	add	r3, r2
 8009980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009984:	461a      	mov	r2, r3
 8009986:	f240 639d 	movw	r3, #1693	@ 0x69d
 800998a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800998c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009990:	2b00      	cmp	r3, #0
 8009992:	da34      	bge.n	80099fe <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009994:	78fb      	ldrb	r3, [r7, #3]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	4413      	add	r3, r2
 800999c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	78fa      	ldrb	r2, [r7, #3]
 80099a4:	0151      	lsls	r1, r2, #5
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	440a      	add	r2, r1
 80099aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80099b4:	e023      	b.n	80099fe <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80099b6:	78fb      	ldrb	r3, [r7, #3]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099c2:	461a      	mov	r2, r3
 80099c4:	f240 2325 	movw	r3, #549	@ 0x225
 80099c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80099ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	da17      	bge.n	8009a02 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80099d2:	78fb      	ldrb	r3, [r7, #3]
 80099d4:	015a      	lsls	r2, r3, #5
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	4413      	add	r3, r2
 80099da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	78fa      	ldrb	r2, [r7, #3]
 80099e2:	0151      	lsls	r1, r2, #5
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	440a      	add	r2, r1
 80099e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099ec:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80099f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80099f2:	e006      	b.n	8009a02 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	77fb      	strb	r3, [r7, #31]
      break;
 80099f8:	e004      	b.n	8009a04 <USB_HC_Init+0x148>
      break;
 80099fa:	bf00      	nop
 80099fc:	e002      	b.n	8009a04 <USB_HC_Init+0x148>
      break;
 80099fe:	bf00      	nop
 8009a00:	e000      	b.n	8009a04 <USB_HC_Init+0x148>
      break;
 8009a02:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009a04:	78fb      	ldrb	r3, [r7, #3]
 8009a06:	015a      	lsls	r2, r3, #5
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a10:	461a      	mov	r2, r3
 8009a12:	2300      	movs	r3, #0
 8009a14:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009a16:	78fb      	ldrb	r3, [r7, #3]
 8009a18:	015a      	lsls	r2, r3, #5
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	78fa      	ldrb	r2, [r7, #3]
 8009a26:	0151      	lsls	r1, r2, #5
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	440a      	add	r2, r1
 8009a2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a30:	f043 0302 	orr.w	r3, r3, #2
 8009a34:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a3c:	699a      	ldr	r2, [r3, #24]
 8009a3e:	78fb      	ldrb	r3, [r7, #3]
 8009a40:	f003 030f 	and.w	r3, r3, #15
 8009a44:	2101      	movs	r1, #1
 8009a46:	fa01 f303 	lsl.w	r3, r1, r3
 8009a4a:	6939      	ldr	r1, [r7, #16]
 8009a4c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009a50:	4313      	orrs	r3, r2
 8009a52:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009a60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	da03      	bge.n	8009a70 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009a68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a6c:	61bb      	str	r3, [r7, #24]
 8009a6e:	e001      	b.n	8009a74 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009a70:	2300      	movs	r3, #0
 8009a72:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7ff fef9 	bl	800986c <USB_GetHostSpeed>
 8009a7a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009a7c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d106      	bne.n	8009a92 <USB_HC_Init+0x1d6>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d003      	beq.n	8009a92 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009a8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009a8e:	617b      	str	r3, [r7, #20]
 8009a90:	e001      	b.n	8009a96 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009a96:	787b      	ldrb	r3, [r7, #1]
 8009a98:	059b      	lsls	r3, r3, #22
 8009a9a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009a9e:	78bb      	ldrb	r3, [r7, #2]
 8009aa0:	02db      	lsls	r3, r3, #11
 8009aa2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009aa6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009aa8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009aac:	049b      	lsls	r3, r3, #18
 8009aae:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009ab2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009ab4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009ab6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009aba:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	431a      	orrs	r2, r3
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009ac4:	78fa      	ldrb	r2, [r7, #3]
 8009ac6:	0151      	lsls	r1, r2, #5
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	440a      	add	r2, r1
 8009acc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009ad0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009ad4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009ad6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d003      	beq.n	8009ae6 <USB_HC_Init+0x22a>
 8009ade:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d10f      	bne.n	8009b06 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009ae6:	78fb      	ldrb	r3, [r7, #3]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	78fa      	ldrb	r2, [r7, #3]
 8009af6:	0151      	lsls	r1, r2, #5
 8009af8:	693a      	ldr	r2, [r7, #16]
 8009afa:	440a      	add	r2, r1
 8009afc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b04:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009b06:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3720      	adds	r7, #32
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	40040000 	.word	0x40040000

08009b14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08c      	sub	sp, #48	@ 0x30
 8009b18:	af02      	add	r7, sp, #8
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	785b      	ldrb	r3, [r3, #1]
 8009b2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b30:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	4a5d      	ldr	r2, [pc, #372]	@ (8009cac <USB_HC_StartXfer+0x198>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d12f      	bne.n	8009b9a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009b3a:	79fb      	ldrb	r3, [r7, #7]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d11c      	bne.n	8009b7a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	7c9b      	ldrb	r3, [r3, #18]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <USB_HC_StartXfer+0x3c>
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	7c9b      	ldrb	r3, [r3, #18]
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d124      	bne.n	8009b9a <USB_HC_StartXfer+0x86>
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	799b      	ldrb	r3, [r3, #6]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d120      	bne.n	8009b9a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	69fa      	ldr	r2, [r7, #28]
 8009b68:	0151      	lsls	r1, r2, #5
 8009b6a:	6a3a      	ldr	r2, [r7, #32]
 8009b6c:	440a      	add	r2, r1
 8009b6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b76:	60d3      	str	r3, [r2, #12]
 8009b78:	e00f      	b.n	8009b9a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	791b      	ldrb	r3, [r3, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10b      	bne.n	8009b9a <USB_HC_StartXfer+0x86>
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	795b      	ldrb	r3, [r3, #5]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d107      	bne.n	8009b9a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	785b      	ldrb	r3, [r3, #1]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	68f8      	ldr	r0, [r7, #12]
 8009b92:	f000 fb6b 	bl	800a26c <USB_DoPing>
        return HAL_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	e232      	b.n	800a000 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	799b      	ldrb	r3, [r3, #6]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d158      	bne.n	8009c54 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	78db      	ldrb	r3, [r3, #3]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d007      	beq.n	8009bbe <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009bae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	8a92      	ldrh	r2, [r2, #20]
 8009bb4:	fb03 f202 	mul.w	r2, r3, r2
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	61da      	str	r2, [r3, #28]
 8009bbc:	e07c      	b.n	8009cb8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	7c9b      	ldrb	r3, [r3, #18]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d130      	bne.n	8009c28 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	2bbc      	cmp	r3, #188	@ 0xbc
 8009bcc:	d918      	bls.n	8009c00 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	8a9b      	ldrh	r3, [r3, #20]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	69da      	ldr	r2, [r3, #28]
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d003      	beq.n	8009bf0 <USB_HC_StartXfer+0xdc>
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d103      	bne.n	8009bf8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	60da      	str	r2, [r3, #12]
 8009bf6:	e05f      	b.n	8009cb8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	60da      	str	r2, [r3, #12]
 8009bfe:	e05b      	b.n	8009cb8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	6a1a      	ldr	r2, [r3, #32]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d007      	beq.n	8009c20 <USB_HC_StartXfer+0x10c>
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d003      	beq.n	8009c20 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2204      	movs	r2, #4
 8009c1c:	60da      	str	r2, [r3, #12]
 8009c1e:	e04b      	b.n	8009cb8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2203      	movs	r2, #3
 8009c24:	60da      	str	r2, [r3, #12]
 8009c26:	e047      	b.n	8009cb8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009c28:	79fb      	ldrb	r3, [r7, #7]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d10d      	bne.n	8009c4a <USB_HC_StartXfer+0x136>
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	8a92      	ldrh	r2, [r2, #20]
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d907      	bls.n	8009c4a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009c3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	8a92      	ldrh	r2, [r2, #20]
 8009c40:	fb03 f202 	mul.w	r2, r3, r2
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	61da      	str	r2, [r3, #28]
 8009c48:	e036      	b.n	8009cb8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	6a1a      	ldr	r2, [r3, #32]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	61da      	str	r2, [r3, #28]
 8009c52:	e031      	b.n	8009cb8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d018      	beq.n	8009c8e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	6a1b      	ldr	r3, [r3, #32]
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	8a92      	ldrh	r2, [r2, #20]
 8009c64:	4413      	add	r3, r2
 8009c66:	3b01      	subs	r3, #1
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	8a92      	ldrh	r2, [r2, #20]
 8009c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c70:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009c72:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009c74:	8b7b      	ldrh	r3, [r7, #26]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d90b      	bls.n	8009c92 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009c7a:	8b7b      	ldrh	r3, [r7, #26]
 8009c7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009c7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	8a92      	ldrh	r2, [r2, #20]
 8009c84:	fb03 f202 	mul.w	r2, r3, r2
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	61da      	str	r2, [r3, #28]
 8009c8c:	e001      	b.n	8009c92 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	78db      	ldrb	r3, [r3, #3]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00a      	beq.n	8009cb0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009c9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	8a92      	ldrh	r2, [r2, #20]
 8009ca0:	fb03 f202 	mul.w	r2, r3, r2
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	61da      	str	r2, [r3, #28]
 8009ca8:	e006      	b.n	8009cb8 <USB_HC_StartXfer+0x1a4>
 8009caa:	bf00      	nop
 8009cac:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	6a1a      	ldr	r2, [r3, #32]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009cc0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009cc2:	04d9      	lsls	r1, r3, #19
 8009cc4:	4ba3      	ldr	r3, [pc, #652]	@ (8009f54 <USB_HC_StartXfer+0x440>)
 8009cc6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cc8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	7d9b      	ldrb	r3, [r3, #22]
 8009cce:	075b      	lsls	r3, r3, #29
 8009cd0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cd4:	69f9      	ldr	r1, [r7, #28]
 8009cd6:	0148      	lsls	r0, r1, #5
 8009cd8:	6a39      	ldr	r1, [r7, #32]
 8009cda:	4401      	add	r1, r0
 8009cdc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009ce0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009ce2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009ce4:	79fb      	ldrb	r3, [r7, #7]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d009      	beq.n	8009cfe <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	6999      	ldr	r1, [r3, #24]
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cfa:	460a      	mov	r2, r1
 8009cfc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	bf0c      	ite	eq
 8009d0e:	2301      	moveq	r3, #1
 8009d10:	2300      	movne	r3, #0
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	69fa      	ldr	r2, [r7, #28]
 8009d26:	0151      	lsls	r1, r2, #5
 8009d28:	6a3a      	ldr	r2, [r7, #32]
 8009d2a:	440a      	add	r2, r1
 8009d2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009d34:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	015a      	lsls	r2, r3, #5
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	7e7b      	ldrb	r3, [r7, #25]
 8009d46:	075b      	lsls	r3, r3, #29
 8009d48:	69f9      	ldr	r1, [r7, #28]
 8009d4a:	0148      	lsls	r0, r1, #5
 8009d4c:	6a39      	ldr	r1, [r7, #32]
 8009d4e:	4401      	add	r1, r0
 8009d50:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009d54:	4313      	orrs	r3, r2
 8009d56:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	799b      	ldrb	r3, [r3, #6]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	f040 80c3 	bne.w	8009ee8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	7c5b      	ldrb	r3, [r3, #17]
 8009d66:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	69fa      	ldr	r2, [r7, #28]
 8009d70:	0151      	lsls	r1, r2, #5
 8009d72:	6a3a      	ldr	r2, [r7, #32]
 8009d74:	440a      	add	r2, r1
 8009d76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009d7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009d7e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	6a3b      	ldr	r3, [r7, #32]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	69fa      	ldr	r2, [r7, #28]
 8009d90:	0151      	lsls	r1, r2, #5
 8009d92:	6a3a      	ldr	r2, [r7, #32]
 8009d94:	440a      	add	r2, r1
 8009d96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d9a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009d9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	79db      	ldrb	r3, [r3, #7]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d123      	bne.n	8009df0 <USB_HC_StartXfer+0x2dc>
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	78db      	ldrb	r3, [r3, #3]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d11f      	bne.n	8009df0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	6a3b      	ldr	r3, [r7, #32]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	69fa      	ldr	r2, [r7, #28]
 8009dc0:	0151      	lsls	r1, r2, #5
 8009dc2:	6a3a      	ldr	r2, [r7, #32]
 8009dc4:	440a      	add	r2, r1
 8009dc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009dce:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	015a      	lsls	r2, r3, #5
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	0151      	lsls	r1, r2, #5
 8009de2:	6a3a      	ldr	r2, [r7, #32]
 8009de4:	440a      	add	r2, r1
 8009de6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dee:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	7c9b      	ldrb	r3, [r3, #18]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d003      	beq.n	8009e00 <USB_HC_StartXfer+0x2ec>
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	7c9b      	ldrb	r3, [r3, #18]
 8009dfc:	2b03      	cmp	r3, #3
 8009dfe:	d117      	bne.n	8009e30 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d113      	bne.n	8009e30 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	78db      	ldrb	r3, [r3, #3]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d10f      	bne.n	8009e30 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	69fa      	ldr	r2, [r7, #28]
 8009e20:	0151      	lsls	r1, r2, #5
 8009e22:	6a3a      	ldr	r2, [r7, #32]
 8009e24:	440a      	add	r2, r1
 8009e26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e2e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	7c9b      	ldrb	r3, [r3, #18]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d162      	bne.n	8009efe <USB_HC_StartXfer+0x3ea>
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	78db      	ldrb	r3, [r3, #3]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d15e      	bne.n	8009efe <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	3b01      	subs	r3, #1
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	d858      	bhi.n	8009efc <USB_HC_StartXfer+0x3e8>
 8009e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e50 <USB_HC_StartXfer+0x33c>)
 8009e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e50:	08009e61 	.word	0x08009e61
 8009e54:	08009e83 	.word	0x08009e83
 8009e58:	08009ea5 	.word	0x08009ea5
 8009e5c:	08009ec7 	.word	0x08009ec7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	69fa      	ldr	r2, [r7, #28]
 8009e70:	0151      	lsls	r1, r2, #5
 8009e72:	6a3a      	ldr	r2, [r7, #32]
 8009e74:	440a      	add	r2, r1
 8009e76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e7e:	6053      	str	r3, [r2, #4]
          break;
 8009e80:	e03d      	b.n	8009efe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	69fa      	ldr	r2, [r7, #28]
 8009e92:	0151      	lsls	r1, r2, #5
 8009e94:	6a3a      	ldr	r2, [r7, #32]
 8009e96:	440a      	add	r2, r1
 8009e98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e9c:	f043 030e 	orr.w	r3, r3, #14
 8009ea0:	6053      	str	r3, [r2, #4]
          break;
 8009ea2:	e02c      	b.n	8009efe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	69fa      	ldr	r2, [r7, #28]
 8009eb4:	0151      	lsls	r1, r2, #5
 8009eb6:	6a3a      	ldr	r2, [r7, #32]
 8009eb8:	440a      	add	r2, r1
 8009eba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ebe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ec2:	6053      	str	r3, [r2, #4]
          break;
 8009ec4:	e01b      	b.n	8009efe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	69fa      	ldr	r2, [r7, #28]
 8009ed6:	0151      	lsls	r1, r2, #5
 8009ed8:	6a3a      	ldr	r2, [r7, #32]
 8009eda:	440a      	add	r2, r1
 8009edc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ee0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ee4:	6053      	str	r3, [r2, #4]
          break;
 8009ee6:	e00a      	b.n	8009efe <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	015a      	lsls	r2, r3, #5
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	6053      	str	r3, [r2, #4]
 8009efa:	e000      	b.n	8009efe <USB_HC_StartXfer+0x3ea>
          break;
 8009efc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009f14:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	78db      	ldrb	r3, [r3, #3]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d004      	beq.n	8009f28 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f24:	613b      	str	r3, [r7, #16]
 8009f26:	e003      	b.n	8009f30 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009f2e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009f36:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f44:	461a      	mov	r2, r3
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009f4a:	79fb      	ldrb	r3, [r7, #7]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d003      	beq.n	8009f58 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	e055      	b.n	800a000 <USB_HC_StartXfer+0x4ec>
 8009f54:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	78db      	ldrb	r3, [r3, #3]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d14e      	bne.n	8009ffe <USB_HC_StartXfer+0x4ea>
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d04a      	beq.n	8009ffe <USB_HC_StartXfer+0x4ea>
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	79db      	ldrb	r3, [r3, #7]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d146      	bne.n	8009ffe <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	7c9b      	ldrb	r3, [r3, #18]
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d831      	bhi.n	8009fdc <USB_HC_StartXfer+0x4c8>
 8009f78:	a201      	add	r2, pc, #4	@ (adr r2, 8009f80 <USB_HC_StartXfer+0x46c>)
 8009f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7e:	bf00      	nop
 8009f80:	08009f91 	.word	0x08009f91
 8009f84:	08009fb5 	.word	0x08009fb5
 8009f88:	08009f91 	.word	0x08009f91
 8009f8c:	08009fb5 	.word	0x08009fb5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	6a1b      	ldr	r3, [r3, #32]
 8009f94:	3303      	adds	r3, #3
 8009f96:	089b      	lsrs	r3, r3, #2
 8009f98:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009f9a:	8afa      	ldrh	r2, [r7, #22]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d91c      	bls.n	8009fe0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	f043 0220 	orr.w	r2, r3, #32
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	619a      	str	r2, [r3, #24]
        }
        break;
 8009fb2:	e015      	b.n	8009fe0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	6a1b      	ldr	r3, [r3, #32]
 8009fb8:	3303      	adds	r3, #3
 8009fba:	089b      	lsrs	r3, r3, #2
 8009fbc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009fbe:	8afa      	ldrh	r2, [r7, #22]
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d90a      	bls.n	8009fe4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	619a      	str	r2, [r3, #24]
        }
        break;
 8009fda:	e003      	b.n	8009fe4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009fdc:	bf00      	nop
 8009fde:	e002      	b.n	8009fe6 <USB_HC_StartXfer+0x4d2>
        break;
 8009fe0:	bf00      	nop
 8009fe2:	e000      	b.n	8009fe6 <USB_HC_StartXfer+0x4d2>
        break;
 8009fe4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	6999      	ldr	r1, [r3, #24]
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	785a      	ldrb	r2, [r3, #1]
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	9000      	str	r0, [sp, #0]
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f7ff f9c3 	bl	8009384 <USB_WritePacket>
  }

  return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3728      	adds	r7, #40	@ 0x28
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a01a:	695b      	ldr	r3, [r3, #20]
 800a01c:	b29b      	uxth	r3, r3
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b089      	sub	sp, #36	@ 0x24
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	460b      	mov	r3, r1
 800a034:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a03a:	78fb      	ldrb	r3, [r7, #3]
 800a03c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a03e:	2300      	movs	r3, #0
 800a040:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	015a      	lsls	r2, r3, #5
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	4413      	add	r3, r2
 800a04a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	0c9b      	lsrs	r3, r3, #18
 800a052:	f003 0303 	and.w	r3, r3, #3
 800a056:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	015a      	lsls	r2, r3, #5
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	4413      	add	r3, r2
 800a060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	0fdb      	lsrs	r3, r3, #31
 800a068:	f003 0301 	and.w	r3, r3, #1
 800a06c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	015a      	lsls	r2, r3, #5
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	4413      	add	r3, r2
 800a076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	0fdb      	lsrs	r3, r3, #31
 800a07e:	f003 0301 	and.w	r3, r3, #1
 800a082:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	f003 0320 	and.w	r3, r3, #32
 800a08c:	2b20      	cmp	r3, #32
 800a08e:	d10d      	bne.n	800a0ac <USB_HC_Halt+0x82>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d10a      	bne.n	800a0ac <USB_HC_Halt+0x82>
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d005      	beq.n	800a0a8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d002      	beq.n	800a0a8 <USB_HC_Halt+0x7e>
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b03      	cmp	r3, #3
 800a0a6:	d101      	bne.n	800a0ac <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	e0d8      	b.n	800a25e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d002      	beq.n	800a0b8 <USB_HC_Halt+0x8e>
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d173      	bne.n	800a1a0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	0151      	lsls	r1, r2, #5
 800a0ca:	69fa      	ldr	r2, [r7, #28]
 800a0cc:	440a      	add	r2, r1
 800a0ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0d6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f003 0320 	and.w	r3, r3, #32
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d14a      	bne.n	800a17a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d133      	bne.n	800a158 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	0151      	lsls	r1, r2, #5
 800a102:	69fa      	ldr	r2, [r7, #28]
 800a104:	440a      	add	r2, r1
 800a106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a10a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a10e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	4413      	add	r3, r2
 800a118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	69ba      	ldr	r2, [r7, #24]
 800a120:	0151      	lsls	r1, r2, #5
 800a122:	69fa      	ldr	r2, [r7, #28]
 800a124:	440a      	add	r2, r1
 800a126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a12a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a12e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	3301      	adds	r3, #1
 800a134:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a13c:	d82e      	bhi.n	800a19c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	4413      	add	r3, r2
 800a146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a150:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a154:	d0ec      	beq.n	800a130 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a156:	e081      	b.n	800a25c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	0151      	lsls	r1, r2, #5
 800a16a:	69fa      	ldr	r2, [r7, #28]
 800a16c:	440a      	add	r2, r1
 800a16e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a172:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a176:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a178:	e070      	b.n	800a25c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	015a      	lsls	r2, r3, #5
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	4413      	add	r3, r2
 800a182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	69ba      	ldr	r2, [r7, #24]
 800a18a:	0151      	lsls	r1, r2, #5
 800a18c:	69fa      	ldr	r2, [r7, #28]
 800a18e:	440a      	add	r2, r1
 800a190:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a194:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a198:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a19a:	e05f      	b.n	800a25c <USB_HC_Halt+0x232>
            break;
 800a19c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a19e:	e05d      	b.n	800a25c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	015a      	lsls	r2, r3, #5
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	69ba      	ldr	r2, [r7, #24]
 800a1b0:	0151      	lsls	r1, r2, #5
 800a1b2:	69fa      	ldr	r2, [r7, #28]
 800a1b4:	440a      	add	r2, r1
 800a1b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d133      	bne.n	800a238 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	015a      	lsls	r2, r3, #5
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	69ba      	ldr	r2, [r7, #24]
 800a1e0:	0151      	lsls	r1, r2, #5
 800a1e2:	69fa      	ldr	r2, [r7, #28]
 800a1e4:	440a      	add	r2, r1
 800a1e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	015a      	lsls	r2, r3, #5
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	69ba      	ldr	r2, [r7, #24]
 800a200:	0151      	lsls	r1, r2, #5
 800a202:	69fa      	ldr	r2, [r7, #28]
 800a204:	440a      	add	r2, r1
 800a206:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a20a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a20e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	3301      	adds	r3, #1
 800a214:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a21c:	d81d      	bhi.n	800a25a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	4413      	add	r3, r2
 800a226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a234:	d0ec      	beq.n	800a210 <USB_HC_Halt+0x1e6>
 800a236:	e011      	b.n	800a25c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	015a      	lsls	r2, r3, #5
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	4413      	add	r3, r2
 800a240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	69ba      	ldr	r2, [r7, #24]
 800a248:	0151      	lsls	r1, r2, #5
 800a24a:	69fa      	ldr	r2, [r7, #28]
 800a24c:	440a      	add	r2, r1
 800a24e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a252:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	e000      	b.n	800a25c <USB_HC_Halt+0x232>
          break;
 800a25a:	bf00      	nop
    }
  }

  return HAL_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3724      	adds	r7, #36	@ 0x24
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
	...

0800a26c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b087      	sub	sp, #28
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a27c:	78fb      	ldrb	r3, [r7, #3]
 800a27e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a280:	2301      	movs	r3, #1
 800a282:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	04da      	lsls	r2, r3, #19
 800a288:	4b15      	ldr	r3, [pc, #84]	@ (800a2e0 <USB_DoPing+0x74>)
 800a28a:	4013      	ands	r3, r2
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	0151      	lsls	r1, r2, #5
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	440a      	add	r2, r1
 800a294:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a298:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a29c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	015a      	lsls	r2, r3, #5
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a2b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a2bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	015a      	lsls	r2, r3, #5
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	1ff80000 	.word	0x1ff80000

0800a2e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7fe ff86 	bl	800920a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a2fe:	2110      	movs	r1, #16
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7fe ffdf 	bl	80092c4 <USB_FlushTxFifo>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7ff f809 	bl	8009328 <USB_FlushRxFifo>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a320:	2300      	movs	r3, #0
 800a322:	61bb      	str	r3, [r7, #24]
 800a324:	e01f      	b.n	800a366 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	015a      	lsls	r2, r3, #5
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	4413      	add	r3, r2
 800a32e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a33c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a344:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a34c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	4413      	add	r3, r2
 800a356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a35a:	461a      	mov	r2, r3
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	3301      	adds	r3, #1
 800a364:	61bb      	str	r3, [r7, #24]
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	2b0f      	cmp	r3, #15
 800a36a:	d9dc      	bls.n	800a326 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a36c:	2300      	movs	r3, #0
 800a36e:	61bb      	str	r3, [r7, #24]
 800a370:	e034      	b.n	800a3dc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	015a      	lsls	r2, r3, #5
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	4413      	add	r3, r2
 800a37a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a388:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a390:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a398:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a3b8:	d80c      	bhi.n	800a3d4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	015a      	lsls	r2, r3, #5
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3d0:	d0ec      	beq.n	800a3ac <USB_StopHost+0xc8>
 800a3d2:	e000      	b.n	800a3d6 <USB_StopHost+0xf2>
        break;
 800a3d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	61bb      	str	r3, [r7, #24]
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	2b0f      	cmp	r3, #15
 800a3e0:	d9c7      	bls.n	800a372 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a3ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7fe fef5 	bl	80091e8 <USB_EnableGlobalInt>

  return ret;
 800a3fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3720      	adds	r7, #32
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a408:	b590      	push	{r4, r7, lr}
 800a40a:	b089      	sub	sp, #36	@ 0x24
 800a40c:	af04      	add	r7, sp, #16
 800a40e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a410:	2301      	movs	r3, #1
 800a412:	2202      	movs	r2, #2
 800a414:	2102      	movs	r1, #2
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fcb7 	bl	800ad8a <USBH_FindInterface>
 800a41c:	4603      	mov	r3, r0
 800a41e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	2bff      	cmp	r3, #255	@ 0xff
 800a424:	d002      	beq.n	800a42c <USBH_CDC_InterfaceInit+0x24>
 800a426:	7bfb      	ldrb	r3, [r7, #15]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d901      	bls.n	800a430 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a42c:	2302      	movs	r3, #2
 800a42e:	e13d      	b.n	800a6ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a430:	7bfb      	ldrb	r3, [r7, #15]
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fc8c 	bl	800ad52 <USBH_SelectInterface>
 800a43a:	4603      	mov	r3, r0
 800a43c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a43e:	7bbb      	ldrb	r3, [r7, #14]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a444:	2302      	movs	r3, #2
 800a446:	e131      	b.n	800a6ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800a44e:	2050      	movs	r0, #80	@ 0x50
 800a450:	f011 ffb4 	bl	801c3bc <malloc>
 800a454:	4603      	mov	r3, r0
 800a456:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a468:	2302      	movs	r3, #2
 800a46a:	e11f      	b.n	800a6ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a46c:	2250      	movs	r2, #80	@ 0x50
 800a46e:	2100      	movs	r1, #0
 800a470:	68b8      	ldr	r0, [r7, #8]
 800a472:	f012 fc29 	bl	801ccc8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a476:	7bfb      	ldrb	r3, [r7, #15]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	211a      	movs	r1, #26
 800a47c:	fb01 f303 	mul.w	r3, r1, r3
 800a480:	4413      	add	r3, r2
 800a482:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	b25b      	sxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	da15      	bge.n	800a4ba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	211a      	movs	r1, #26
 800a494:	fb01 f303 	mul.w	r3, r1, r3
 800a498:	4413      	add	r3, r2
 800a49a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a49e:	781a      	ldrb	r2, [r3, #0]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	211a      	movs	r1, #26
 800a4aa:	fb01 f303 	mul.w	r3, r1, r3
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a4b4:	881a      	ldrh	r2, [r3, #0]
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	785b      	ldrb	r3, [r3, #1]
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f002 f904 	bl	800c6ce <USBH_AllocPipe>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	7819      	ldrb	r1, [r3, #0]
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	7858      	ldrb	r0, [r3, #1]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	8952      	ldrh	r2, [r2, #10]
 800a4e6:	9202      	str	r2, [sp, #8]
 800a4e8:	2203      	movs	r2, #3
 800a4ea:	9201      	str	r2, [sp, #4]
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	4623      	mov	r3, r4
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f002 f8bc 	bl	800c670 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f005 fbf7 	bl	800fcf4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a506:	2300      	movs	r3, #0
 800a508:	2200      	movs	r2, #0
 800a50a:	210a      	movs	r1, #10
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fc3c 	bl	800ad8a <USBH_FindInterface>
 800a512:	4603      	mov	r3, r0
 800a514:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a516:	7bfb      	ldrb	r3, [r7, #15]
 800a518:	2bff      	cmp	r3, #255	@ 0xff
 800a51a:	d002      	beq.n	800a522 <USBH_CDC_InterfaceInit+0x11a>
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d901      	bls.n	800a526 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a522:	2302      	movs	r3, #2
 800a524:	e0c2      	b.n	800a6ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a526:	7bfb      	ldrb	r3, [r7, #15]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	211a      	movs	r1, #26
 800a52c:	fb01 f303 	mul.w	r3, r1, r3
 800a530:	4413      	add	r3, r2
 800a532:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	b25b      	sxtb	r3, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	da16      	bge.n	800a56c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	211a      	movs	r1, #26
 800a544:	fb01 f303 	mul.w	r3, r1, r3
 800a548:	4413      	add	r3, r2
 800a54a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a54e:	781a      	ldrb	r2, [r3, #0]
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a554:	7bfb      	ldrb	r3, [r7, #15]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	211a      	movs	r1, #26
 800a55a:	fb01 f303 	mul.w	r3, r1, r3
 800a55e:	4413      	add	r3, r2
 800a560:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a564:	881a      	ldrh	r2, [r3, #0]
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	835a      	strh	r2, [r3, #26]
 800a56a:	e015      	b.n	800a598 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a56c:	7bfb      	ldrb	r3, [r7, #15]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	211a      	movs	r1, #26
 800a572:	fb01 f303 	mul.w	r3, r1, r3
 800a576:	4413      	add	r3, r2
 800a578:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a57c:	781a      	ldrb	r2, [r3, #0]
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a582:	7bfb      	ldrb	r3, [r7, #15]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	211a      	movs	r1, #26
 800a588:	fb01 f303 	mul.w	r3, r1, r3
 800a58c:	4413      	add	r3, r2
 800a58e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a592:	881a      	ldrh	r2, [r3, #0]
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a598:	7bfb      	ldrb	r3, [r7, #15]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	211a      	movs	r1, #26
 800a59e:	fb01 f303 	mul.w	r3, r1, r3
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	b25b      	sxtb	r3, r3
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	da16      	bge.n	800a5de <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	211a      	movs	r1, #26
 800a5b6:	fb01 f303 	mul.w	r3, r1, r3
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a5c0:	781a      	ldrb	r2, [r3, #0]
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a5c6:	7bfb      	ldrb	r3, [r7, #15]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	211a      	movs	r1, #26
 800a5cc:	fb01 f303 	mul.w	r3, r1, r3
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a5d6:	881a      	ldrh	r2, [r3, #0]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	835a      	strh	r2, [r3, #26]
 800a5dc:	e015      	b.n	800a60a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a5de:	7bfb      	ldrb	r3, [r7, #15]
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	211a      	movs	r1, #26
 800a5e4:	fb01 f303 	mul.w	r3, r1, r3
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a5ee:	781a      	ldrb	r2, [r3, #0]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a5f4:	7bfb      	ldrb	r3, [r7, #15]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	211a      	movs	r1, #26
 800a5fa:	fb01 f303 	mul.w	r3, r1, r3
 800a5fe:	4413      	add	r3, r2
 800a600:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a604:	881a      	ldrh	r2, [r3, #0]
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	7b9b      	ldrb	r3, [r3, #14]
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f002 f85c 	bl	800c6ce <USBH_AllocPipe>
 800a616:	4603      	mov	r3, r0
 800a618:	461a      	mov	r2, r3
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	7bdb      	ldrb	r3, [r3, #15]
 800a622:	4619      	mov	r1, r3
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f002 f852 	bl	800c6ce <USBH_AllocPipe>
 800a62a:	4603      	mov	r3, r0
 800a62c:	461a      	mov	r2, r3
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	7b59      	ldrb	r1, [r3, #13]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	7b98      	ldrb	r0, [r3, #14]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	8b12      	ldrh	r2, [r2, #24]
 800a64a:	9202      	str	r2, [sp, #8]
 800a64c:	2202      	movs	r2, #2
 800a64e:	9201      	str	r2, [sp, #4]
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	4623      	mov	r3, r4
 800a654:	4602      	mov	r2, r0
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f002 f80a 	bl	800c670 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	7b19      	ldrb	r1, [r3, #12]
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	7bd8      	ldrb	r0, [r3, #15]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	8b52      	ldrh	r2, [r2, #26]
 800a674:	9202      	str	r2, [sp, #8]
 800a676:	2202      	movs	r2, #2
 800a678:	9201      	str	r2, [sp, #4]
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	4623      	mov	r3, r4
 800a67e:	4602      	mov	r2, r0
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 fff5 	bl	800c670 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	7b5b      	ldrb	r3, [r3, #13]
 800a692:	2200      	movs	r2, #0
 800a694:	4619      	mov	r1, r3
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f005 fb2c 	bl	800fcf4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	7b1b      	ldrb	r3, [r3, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f005 fb25 	bl	800fcf4 <USBH_LL_SetToggle>

  return USBH_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd90      	pop	{r4, r7, pc}

0800a6b4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00e      	beq.n	800a6ec <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f001 ffea 	bl	800c6ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f002 f815 	bl	800c710 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	7b1b      	ldrb	r3, [r3, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00e      	beq.n	800a712 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	7b1b      	ldrb	r3, [r3, #12]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f001 ffd7 	bl	800c6ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	7b1b      	ldrb	r3, [r3, #12]
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f002 f802 	bl	800c710 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	7b5b      	ldrb	r3, [r3, #13]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00e      	beq.n	800a738 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	7b5b      	ldrb	r3, [r3, #13]
 800a71e:	4619      	mov	r1, r3
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f001 ffc4 	bl	800c6ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	7b5b      	ldrb	r3, [r3, #13]
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f001 ffef 	bl	800c710 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a73e:	69db      	ldr	r3, [r3, #28]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00b      	beq.n	800a75c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	4618      	mov	r0, r3
 800a74e:	f011 fe3d 	bl	801c3cc <free>
    phost->pActiveClass->pData = 0U;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a758:	2200      	movs	r2, #0
 800a75a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b084      	sub	sp, #16
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a774:	69db      	ldr	r3, [r3, #28]
 800a776:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3340      	adds	r3, #64	@ 0x40
 800a77c:	4619      	mov	r1, r3
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f8b1 	bl	800a8e6 <GetLineCoding>
 800a784:	4603      	mov	r3, r0
 800a786:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a788:	7afb      	ldrb	r3, [r7, #11]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d105      	bne.n	800a79a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a794:	2102      	movs	r1, #2
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a79a:	7afb      	ldrb	r3, [r7, #11]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7ba:	69db      	ldr	r3, [r3, #28]
 800a7bc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a7c4:	2b04      	cmp	r3, #4
 800a7c6:	d877      	bhi.n	800a8b8 <USBH_CDC_Process+0x114>
 800a7c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d0 <USBH_CDC_Process+0x2c>)
 800a7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ce:	bf00      	nop
 800a7d0:	0800a7e5 	.word	0x0800a7e5
 800a7d4:	0800a7eb 	.word	0x0800a7eb
 800a7d8:	0800a81b 	.word	0x0800a81b
 800a7dc:	0800a88f 	.word	0x0800a88f
 800a7e0:	0800a89d 	.word	0x0800a89d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a7e8:	e06d      	b.n	800a8c6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f897 	bl	800a924 <SetLineCoding>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a7fa:	7bbb      	ldrb	r3, [r7, #14]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d104      	bne.n	800a80a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	2202      	movs	r2, #2
 800a804:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a808:	e058      	b.n	800a8bc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a80a:	7bbb      	ldrb	r3, [r7, #14]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d055      	beq.n	800a8bc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2204      	movs	r2, #4
 800a814:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a818:	e050      	b.n	800a8bc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	3340      	adds	r3, #64	@ 0x40
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f860 	bl	800a8e6 <GetLineCoding>
 800a826:	4603      	mov	r3, r0
 800a828:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d126      	bne.n	800a87e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2200      	movs	r2, #0
 800a834:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a842:	791b      	ldrb	r3, [r3, #4]
 800a844:	429a      	cmp	r2, r3
 800a846:	d13b      	bne.n	800a8c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a852:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a854:	429a      	cmp	r2, r3
 800a856:	d133      	bne.n	800a8c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a862:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a864:	429a      	cmp	r2, r3
 800a866:	d12b      	bne.n	800a8c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a870:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a872:	429a      	cmp	r2, r3
 800a874:	d124      	bne.n	800a8c0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 f96a 	bl	800ab50 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a87c:	e020      	b.n	800a8c0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d01d      	beq.n	800a8c0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	2204      	movs	r2, #4
 800a888:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a88c:	e018      	b.n	800a8c0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f867 	bl	800a962 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f8e6 	bl	800aa66 <CDC_ProcessReception>
      break;
 800a89a:	e014      	b.n	800a8c6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a89c:	2100      	movs	r1, #0
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f001 f8f8 	bl	800ba94 <USBH_ClrFeature>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10a      	bne.n	800a8c4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800a8b6:	e005      	b.n	800a8c4 <USBH_CDC_Process+0x120>

    default:
      break;
 800a8b8:	bf00      	nop
 800a8ba:	e004      	b.n	800a8c6 <USBH_CDC_Process+0x122>
      break;
 800a8bc:	bf00      	nop
 800a8be:	e002      	b.n	800a8c6 <USBH_CDC_Process+0x122>
      break;
 800a8c0:	bf00      	nop
 800a8c2:	e000      	b.n	800a8c6 <USBH_CDC_Process+0x122>
      break;
 800a8c4:	bf00      	nop

  }

  return status;
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	22a1      	movs	r2, #161	@ 0xa1
 800a8f4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2221      	movs	r2, #33	@ 0x21
 800a8fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2207      	movs	r2, #7
 800a90c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2207      	movs	r2, #7
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f001 fbf1 	bl	800c0fc <USBH_CtlReq>
 800a91a:	4603      	mov	r3, r0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2221      	movs	r2, #33	@ 0x21
 800a932:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2220      	movs	r2, #32
 800a938:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2207      	movs	r2, #7
 800a94a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2207      	movs	r2, #7
 800a950:	4619      	mov	r1, r3
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f001 fbd2 	bl	800c0fc <USBH_CtlReq>
 800a958:	4603      	mov	r3, r0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b086      	sub	sp, #24
 800a966:	af02      	add	r7, sp, #8
 800a968:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a974:	2300      	movs	r3, #0
 800a976:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d002      	beq.n	800a988 <CDC_ProcessTransmission+0x26>
 800a982:	2b02      	cmp	r3, #2
 800a984:	d023      	beq.n	800a9ce <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a986:	e06a      	b.n	800aa5e <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	8b12      	ldrh	r2, [r2, #24]
 800a990:	4293      	cmp	r3, r2
 800a992:	d90b      	bls.n	800a9ac <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	69d9      	ldr	r1, [r3, #28]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	8b1a      	ldrh	r2, [r3, #24]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	7b5b      	ldrb	r3, [r3, #13]
 800a9a0:	2001      	movs	r0, #1
 800a9a2:	9000      	str	r0, [sp, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f001 fe20 	bl	800c5ea <USBH_BulkSendData>
 800a9aa:	e00b      	b.n	800a9c4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	7b5b      	ldrb	r3, [r3, #13]
 800a9ba:	2001      	movs	r0, #1
 800a9bc:	9000      	str	r0, [sp, #0]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f001 fe13 	bl	800c5ea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a9cc:	e047      	b.n	800aa5e <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	7b5b      	ldrb	r3, [r3, #13]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f005 f963 	bl	800fca0 <USBH_LL_GetURBState>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a9de:	7afb      	ldrb	r3, [r7, #11]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d12e      	bne.n	800aa42 <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	8b12      	ldrh	r2, [r2, #24]
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d90e      	bls.n	800aa0e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	8b12      	ldrh	r2, [r2, #24]
 800a9f8:	1a9a      	subs	r2, r3, r2
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	8b12      	ldrh	r2, [r2, #24]
 800aa06:	441a      	add	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	61da      	str	r2, [r3, #28]
 800aa0c:	e002      	b.n	800aa14 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d004      	beq.n	800aa26 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800aa24:	e006      	b.n	800aa34 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f87a 	bl	800ab28 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800aa34:	2300      	movs	r3, #0
 800aa36:	2200      	movs	r2, #0
 800aa38:	2104      	movs	r1, #4
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 feb6 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800aa40:	e00c      	b.n	800aa5c <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 800aa42:	7afb      	ldrb	r3, [r7, #11]
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d109      	bne.n	800aa5c <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800aa50:	2300      	movs	r3, #0
 800aa52:	2200      	movs	r2, #0
 800aa54:	2104      	movs	r1, #4
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fea8 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800aa5c:	bf00      	nop
  }
}
 800aa5e:	bf00      	nop
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b086      	sub	sp, #24
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa74:	69db      	ldr	r3, [r3, #28]
 800aa76:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800aa82:	2b03      	cmp	r3, #3
 800aa84:	d002      	beq.n	800aa8c <CDC_ProcessReception+0x26>
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	d00e      	beq.n	800aaa8 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800aa8a:	e049      	b.n	800ab20 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	6a19      	ldr	r1, [r3, #32]
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	8b5a      	ldrh	r2, [r3, #26]
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	7b1b      	ldrb	r3, [r3, #12]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f001 fdcb 	bl	800c634 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2204      	movs	r2, #4
 800aaa2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800aaa6:	e03b      	b.n	800ab20 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	7b1b      	ldrb	r3, [r3, #12]
 800aaac:	4619      	mov	r1, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f005 f8f6 	bl	800fca0 <USBH_LL_GetURBState>
 800aab4:	4603      	mov	r3, r0
 800aab6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800aab8:	7cfb      	ldrb	r3, [r7, #19]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d12f      	bne.n	800ab1e <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	7b1b      	ldrb	r3, [r3, #12]
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f005 f859 	bl	800fb7c <USBH_LL_GetLastXferSize>
 800aaca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d016      	beq.n	800ab04 <CDC_ProcessReception+0x9e>
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	8b5b      	ldrh	r3, [r3, #26]
 800aada:	461a      	mov	r2, r3
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4293      	cmp	r3, r2
 800aae0:	d110      	bne.n	800ab04 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	1ad2      	subs	r2, r2, r3
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	6a1a      	ldr	r2, [r3, #32]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	441a      	add	r2, r3
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	2203      	movs	r2, #3
 800aafe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800ab02:	e006      	b.n	800ab12 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f815 	bl	800ab3c <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800ab12:	2300      	movs	r3, #0
 800ab14:	2200      	movs	r2, #0
 800ab16:	2104      	movs	r1, #4
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fe47 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800ab1e:	bf00      	nop
  }
}
 800ab20:	bf00      	nop
 800ab22:	3718      	adds	r7, #24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ab44:	bf00      	nop
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ab58:	bf00      	nop
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ab78:	2302      	movs	r3, #2
 800ab7a:	e044      	b.n	800ac06 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	79fa      	ldrb	r2, [r7, #7]
 800ab80:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f000 f841 	bl	800ac1c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d003      	beq.n	800abc8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800abc8:	2200      	movs	r2, #0
 800abca:	2104      	movs	r1, #4
 800abcc:	2010      	movs	r0, #16
 800abce:	f001 ff1c 	bl	800ca0a <osMessageQueueNew>
 800abd2:	4602      	mov	r2, r0
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800abda:	4b0d      	ldr	r3, [pc, #52]	@ (800ac10 <USBH_Init+0xac>)
 800abdc:	4a0d      	ldr	r2, [pc, #52]	@ (800ac14 <USBH_Init+0xb0>)
 800abde:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800abe0:	4b0b      	ldr	r3, [pc, #44]	@ (800ac10 <USBH_Init+0xac>)
 800abe2:	2280      	movs	r2, #128	@ 0x80
 800abe4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800abe6:	4b0a      	ldr	r3, [pc, #40]	@ (800ac10 <USBH_Init+0xac>)
 800abe8:	2218      	movs	r2, #24
 800abea:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800abec:	4a08      	ldr	r2, [pc, #32]	@ (800ac10 <USBH_Init+0xac>)
 800abee:	68f9      	ldr	r1, [r7, #12]
 800abf0:	4809      	ldr	r0, [pc, #36]	@ (800ac18 <USBH_Init+0xb4>)
 800abf2:	f001 fe5d 	bl	800c8b0 <osThreadNew>
 800abf6:	4602      	mov	r2, r0
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f004 ff08 	bl	800fa14 <USBH_LL_Init>

  return USBH_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	20006cc8 	.word	0x20006cc8
 800ac14:	0801dc30 	.word	0x0801dc30
 800ac18:	0800b7f5 	.word	0x0800b7f5

0800ac1c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ac24:	2300      	movs	r3, #0
 800ac26:	60fb      	str	r3, [r7, #12]
 800ac28:	e009      	b.n	800ac3e <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	33e0      	adds	r3, #224	@ 0xe0
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	2200      	movs	r2, #0
 800ac36:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	60fb      	str	r3, [r7, #12]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b0f      	cmp	r3, #15
 800ac42:	d9f2      	bls.n	800ac2a <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ac44:	2300      	movs	r3, #0
 800ac46:	60fb      	str	r3, [r7, #12]
 800ac48:	e009      	b.n	800ac5e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	4413      	add	r3, r2
 800ac50:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ac54:	2200      	movs	r2, #0
 800ac56:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	60fb      	str	r3, [r7, #12]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac64:	d3f1      	bcc.n	800ac4a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2240      	movs	r2, #64	@ 0x40
 800ac8a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	331c      	adds	r3, #28
 800acb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800acba:	2100      	movs	r1, #0
 800acbc:	4618      	mov	r0, r3
 800acbe:	f012 f803 	bl	801ccc8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800acc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800accc:	2100      	movs	r1, #0
 800acce:	4618      	mov	r0, r3
 800acd0:	f011 fffa 	bl	801ccc8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800acda:	2212      	movs	r2, #18
 800acdc:	2100      	movs	r1, #0
 800acde:	4618      	mov	r0, r3
 800ace0:	f011 fff2 	bl	801ccc8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800acea:	223e      	movs	r2, #62	@ 0x3e
 800acec:	2100      	movs	r1, #0
 800acee:	4618      	mov	r0, r3
 800acf0:	f011 ffea 	bl	801ccc8 <memset>

  return USBH_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b085      	sub	sp, #20
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d016      	beq.n	800ad40 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10e      	bne.n	800ad3a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ad22:	1c59      	adds	r1, r3, #1
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	33de      	adds	r3, #222	@ 0xde
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	73fb      	strb	r3, [r7, #15]
 800ad38:	e004      	b.n	800ad44 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ad3a:	2302      	movs	r3, #2
 800ad3c:	73fb      	strb	r3, [r7, #15]
 800ad3e:	e001      	b.n	800ad44 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ad40:	2302      	movs	r3, #2
 800ad42:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b085      	sub	sp, #20
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800ad68:	78fa      	ldrb	r2, [r7, #3]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d204      	bcs.n	800ad78 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	78fa      	ldrb	r2, [r7, #3]
 800ad72:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800ad76:	e001      	b.n	800ad7c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ad78:	2302      	movs	r3, #2
 800ad7a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3714      	adds	r7, #20
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b087      	sub	sp, #28
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	4608      	mov	r0, r1
 800ad94:	4611      	mov	r1, r2
 800ad96:	461a      	mov	r2, r3
 800ad98:	4603      	mov	r3, r0
 800ad9a:	70fb      	strb	r3, [r7, #3]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	70bb      	strb	r3, [r7, #2]
 800ada0:	4613      	mov	r3, r2
 800ada2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ada4:	2300      	movs	r3, #0
 800ada6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ada8:	2300      	movs	r3, #0
 800adaa:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800adb2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800adb4:	e025      	b.n	800ae02 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800adb6:	7dfb      	ldrb	r3, [r7, #23]
 800adb8:	221a      	movs	r2, #26
 800adba:	fb02 f303 	mul.w	r3, r2, r3
 800adbe:	3308      	adds	r3, #8
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	4413      	add	r3, r2
 800adc4:	3302      	adds	r3, #2
 800adc6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	795b      	ldrb	r3, [r3, #5]
 800adcc:	78fa      	ldrb	r2, [r7, #3]
 800adce:	429a      	cmp	r2, r3
 800add0:	d002      	beq.n	800add8 <USBH_FindInterface+0x4e>
 800add2:	78fb      	ldrb	r3, [r7, #3]
 800add4:	2bff      	cmp	r3, #255	@ 0xff
 800add6:	d111      	bne.n	800adfc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800addc:	78ba      	ldrb	r2, [r7, #2]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d002      	beq.n	800ade8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ade2:	78bb      	ldrb	r3, [r7, #2]
 800ade4:	2bff      	cmp	r3, #255	@ 0xff
 800ade6:	d109      	bne.n	800adfc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800adec:	787a      	ldrb	r2, [r7, #1]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d002      	beq.n	800adf8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800adf2:	787b      	ldrb	r3, [r7, #1]
 800adf4:	2bff      	cmp	r3, #255	@ 0xff
 800adf6:	d101      	bne.n	800adfc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800adf8:	7dfb      	ldrb	r3, [r7, #23]
 800adfa:	e006      	b.n	800ae0a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
 800adfe:	3301      	adds	r3, #1
 800ae00:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ae02:	7dfb      	ldrb	r3, [r7, #23]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d9d6      	bls.n	800adb6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ae08:	23ff      	movs	r3, #255	@ 0xff
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	371c      	adds	r7, #28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b082      	sub	sp, #8
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f004 fe34 	bl	800fa8c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ae24:	2101      	movs	r1, #1
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f004 ff4d 	bl	800fcc6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
	...

0800ae38 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b088      	sub	sp, #32
 800ae3c:	af04      	add	r7, sp, #16
 800ae3e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ae40:	2302      	movs	r3, #2
 800ae42:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ae44:	2300      	movs	r3, #0
 800ae46:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d102      	bne.n	800ae5a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2203      	movs	r2, #3
 800ae58:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	2b0b      	cmp	r3, #11
 800ae62:	f200 81f5 	bhi.w	800b250 <USBH_Process+0x418>
 800ae66:	a201      	add	r2, pc, #4	@ (adr r2, 800ae6c <USBH_Process+0x34>)
 800ae68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6c:	0800ae9d 	.word	0x0800ae9d
 800ae70:	0800aedb 	.word	0x0800aedb
 800ae74:	0800af51 	.word	0x0800af51
 800ae78:	0800b1df 	.word	0x0800b1df
 800ae7c:	0800b251 	.word	0x0800b251
 800ae80:	0800affd 	.word	0x0800affd
 800ae84:	0800b179 	.word	0x0800b179
 800ae88:	0800b03f 	.word	0x0800b03f
 800ae8c:	0800b06b 	.word	0x0800b06b
 800ae90:	0800b093 	.word	0x0800b093
 800ae94:	0800b0e1 	.word	0x0800b0e1
 800ae98:	0800b1c7 	.word	0x0800b1c7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 81d5 	beq.w	800b254 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800aeb0:	20c8      	movs	r0, #200	@ 0xc8
 800aeb2:	f004 ff52 	bl	800fd5a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f004 fe45 	bl	800fb46 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800aecc:	2300      	movs	r3, #0
 800aece:	2200      	movs	r2, #0
 800aed0:	2101      	movs	r1, #1
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fc6a 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800aed8:	e1bc      	b.n	800b254 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d107      	bne.n	800aef6 <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2202      	movs	r2, #2
 800aef2:	701a      	strb	r2, [r3, #0]
 800aef4:	e025      	b.n	800af42 <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800aefc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af00:	d914      	bls.n	800af2c <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800af08:	3301      	adds	r3, #1
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800af18:	2b03      	cmp	r3, #3
 800af1a:	d903      	bls.n	800af24 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	220d      	movs	r2, #13
 800af20:	701a      	strb	r2, [r3, #0]
 800af22:	e00e      	b.n	800af42 <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	701a      	strb	r2, [r3, #0]
 800af2a:	e00a      	b.n	800af42 <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800af32:	f103 020a 	add.w	r2, r3, #10
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800af3c:	200a      	movs	r0, #10
 800af3e:	f004 ff0c 	bl	800fd5a <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800af42:	2300      	movs	r3, #0
 800af44:	2200      	movs	r2, #0
 800af46:	2101      	movs	r1, #1
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fc2f 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800af4e:	e188      	b.n	800b262 <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800af56:	2b00      	cmp	r3, #0
 800af58:	d005      	beq.n	800af66 <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800af60:	2104      	movs	r1, #4
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800af66:	2064      	movs	r0, #100	@ 0x64
 800af68:	f004 fef7 	bl	800fd5a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f004 fdc3 	bl	800faf8 <USBH_LL_GetSpeed>
 800af72:	4603      	mov	r3, r0
 800af74:	461a      	mov	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2205      	movs	r2, #5
 800af80:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800af82:	2100      	movs	r1, #0
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f001 fba2 	bl	800c6ce <USBH_AllocPipe>
 800af8a:	4603      	mov	r3, r0
 800af8c:	461a      	mov	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800af92:	2180      	movs	r1, #128	@ 0x80
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f001 fb9a 	bl	800c6ce <USBH_AllocPipe>
 800af9a:	4603      	mov	r3, r0
 800af9c:	461a      	mov	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	7919      	ldrb	r1, [r3, #4]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800afb6:	9202      	str	r2, [sp, #8]
 800afb8:	2200      	movs	r2, #0
 800afba:	9201      	str	r2, [sp, #4]
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	4603      	mov	r3, r0
 800afc0:	2280      	movs	r2, #128	@ 0x80
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f001 fb54 	bl	800c670 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	7959      	ldrb	r1, [r3, #5]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800afdc:	9202      	str	r2, [sp, #8]
 800afde:	2200      	movs	r2, #0
 800afe0:	9201      	str	r2, [sp, #4]
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	4603      	mov	r3, r0
 800afe6:	2200      	movs	r2, #0
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f001 fb41 	bl	800c670 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800afee:	2300      	movs	r3, #0
 800aff0:	2200      	movs	r2, #0
 800aff2:	2101      	movs	r1, #1
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fbd9 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800affa:	e132      	b.n	800b262 <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f935 	bl	800b26c <USBH_HandleEnum>
 800b002:	4603      	mov	r3, r0
 800b004:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b006:	7bbb      	ldrb	r3, [r7, #14]
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	f040 8124 	bne.w	800b258 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d103      	bne.n	800b02a <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2208      	movs	r2, #8
 800b026:	701a      	strb	r2, [r3, #0]
 800b028:	e002      	b.n	800b030 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2207      	movs	r2, #7
 800b02e:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b030:	2300      	movs	r3, #0
 800b032:	2200      	movs	r2, #0
 800b034:	2105      	movs	r1, #5
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fbb8 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b03c:	e10c      	b.n	800b258 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 8109 	beq.w	800b25c <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b050:	2101      	movs	r1, #1
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2208      	movs	r2, #8
 800b05a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b05c:	2300      	movs	r3, #0
 800b05e:	2200      	movs	r2, #0
 800b060:	2105      	movs	r1, #5
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fba2 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800b068:	e0f8      	b.n	800b25c <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fcc7 	bl	800ba06 <USBH_SetCfg>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d102      	bne.n	800b084 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2209      	movs	r2, #9
 800b082:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b084:	2300      	movs	r3, #0
 800b086:	2200      	movs	r2, #0
 800b088:	2101      	movs	r1, #1
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fb8e 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b090:	e0e7      	b.n	800b262 <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800b098:	f003 0320 	and.w	r3, r3, #32
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d015      	beq.n	800b0cc <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 fcd2 	bl	800ba4c <USBH_SetFeature>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b0ac:	7bbb      	ldrb	r3, [r7, #14]
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d103      	bne.n	800b0bc <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	220a      	movs	r2, #10
 800b0b8:	701a      	strb	r2, [r3, #0]
 800b0ba:	e00a      	b.n	800b0d2 <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d106      	bne.n	800b0d2 <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	220a      	movs	r2, #10
 800b0c8:	701a      	strb	r2, [r3, #0]
 800b0ca:	e002      	b.n	800b0d2 <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	220a      	movs	r2, #10
 800b0d0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2101      	movs	r1, #1
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fb67 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b0de:	e0c0      	b.n	800b262 <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d03f      	beq.n	800b16a <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	73fb      	strb	r3, [r7, #15]
 800b0f6:	e016      	b.n	800b126 <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b0f8:	7bfa      	ldrb	r2, [r7, #15]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	32de      	adds	r2, #222	@ 0xde
 800b0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b102:	791a      	ldrb	r2, [r3, #4]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d108      	bne.n	800b120 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b10e:	7bfa      	ldrb	r2, [r7, #15]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	32de      	adds	r2, #222	@ 0xde
 800b114:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b11e:	e005      	b.n	800b12c <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	3301      	adds	r3, #1
 800b124:	73fb      	strb	r3, [r7, #15]
 800b126:	7bfb      	ldrb	r3, [r7, #15]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d0e5      	beq.n	800b0f8 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b132:	2b00      	cmp	r3, #0
 800b134:	d016      	beq.n	800b164 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	4798      	blx	r3
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d109      	bne.n	800b15c <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2206      	movs	r2, #6
 800b14c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b154:	2103      	movs	r1, #3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	4798      	blx	r3
 800b15a:	e006      	b.n	800b16a <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	220d      	movs	r2, #13
 800b160:	701a      	strb	r2, [r3, #0]
 800b162:	e002      	b.n	800b16a <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	220d      	movs	r2, #13
 800b168:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b16a:	2300      	movs	r3, #0
 800b16c:	2200      	movs	r2, #0
 800b16e:	2105      	movs	r1, #5
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fb1b 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b176:	e074      	b.n	800b262 <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d017      	beq.n	800b1b2 <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	4798      	blx	r3
 800b18e:	4603      	mov	r3, r0
 800b190:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b192:	7bbb      	ldrb	r3, [r7, #14]
 800b194:	b2db      	uxtb	r3, r3
 800b196:	2b00      	cmp	r3, #0
 800b198:	d103      	bne.n	800b1a2 <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	220b      	movs	r2, #11
 800b19e:	701a      	strb	r2, [r3, #0]
 800b1a0:	e00a      	b.n	800b1b8 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 800b1a2:	7bbb      	ldrb	r3, [r7, #14]
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d106      	bne.n	800b1b8 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	220d      	movs	r2, #13
 800b1ae:	701a      	strb	r2, [r3, #0]
 800b1b0:	e002      	b.n	800b1b8 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	220d      	movs	r2, #13
 800b1b6:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	2105      	movs	r1, #5
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 faf4 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b1c4:	e04d      	b.n	800b262 <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d047      	beq.n	800b260 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	4798      	blx	r3
      }
      break;
 800b1dc:	e040      	b.n	800b260 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff fd18 	bl	800ac1c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d009      	beq.n	800b20a <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b210:	2b00      	cmp	r3, #0
 800b212:	d005      	beq.n	800b220 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b21a:	2105      	movs	r1, #5
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800b226:	b2db      	uxtb	r3, r3
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d107      	bne.n	800b23c <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7ff fdee 	bl	800ae16 <USBH_Start>
 800b23a:	e002      	b.n	800b242 <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f004 fc25 	bl	800fa8c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b242:	2300      	movs	r3, #0
 800b244:	2200      	movs	r2, #0
 800b246:	2101      	movs	r1, #1
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 faaf 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b24e:	e008      	b.n	800b262 <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 800b250:	bf00      	nop
 800b252:	e006      	b.n	800b262 <USBH_Process+0x42a>
      break;
 800b254:	bf00      	nop
 800b256:	e004      	b.n	800b262 <USBH_Process+0x42a>
      break;
 800b258:	bf00      	nop
 800b25a:	e002      	b.n	800b262 <USBH_Process+0x42a>
    break;
 800b25c:	bf00      	nop
 800b25e:	e000      	b.n	800b262 <USBH_Process+0x42a>
      break;
 800b260:	bf00      	nop
  }
  return USBH_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3710      	adds	r7, #16
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b088      	sub	sp, #32
 800b270:	af04      	add	r7, sp, #16
 800b272:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b274:	2301      	movs	r3, #1
 800b276:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b278:	2301      	movs	r3, #1
 800b27a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	785b      	ldrb	r3, [r3, #1]
 800b280:	2b07      	cmp	r3, #7
 800b282:	f200 81db 	bhi.w	800b63c <USBH_HandleEnum+0x3d0>
 800b286:	a201      	add	r2, pc, #4	@ (adr r2, 800b28c <USBH_HandleEnum+0x20>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b2ad 	.word	0x0800b2ad
 800b290:	0800b367 	.word	0x0800b367
 800b294:	0800b3d1 	.word	0x0800b3d1
 800b298:	0800b45b 	.word	0x0800b45b
 800b29c:	0800b4c5 	.word	0x0800b4c5
 800b2a0:	0800b535 	.word	0x0800b535
 800b2a4:	0800b59f 	.word	0x0800b59f
 800b2a8:	0800b5fd 	.word	0x0800b5fd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b2ac:	2108      	movs	r1, #8
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 fac6 	bl	800b840 <USBH_Get_DevDesc>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b2b8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d12e      	bne.n	800b31c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	7919      	ldrb	r1, [r3, #4]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b2e2:	9202      	str	r2, [sp, #8]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	9201      	str	r2, [sp, #4]
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2280      	movs	r2, #128	@ 0x80
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f001 f9be 	bl	800c670 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	7959      	ldrb	r1, [r3, #5]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b308:	9202      	str	r2, [sp, #8]
 800b30a:	2200      	movs	r2, #0
 800b30c:	9201      	str	r2, [sp, #4]
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	4603      	mov	r3, r0
 800b312:	2200      	movs	r2, #0
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f001 f9ab 	bl	800c670 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b31a:	e191      	b.n	800b640 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b31c:	7bbb      	ldrb	r3, [r7, #14]
 800b31e:	2b03      	cmp	r3, #3
 800b320:	f040 818e 	bne.w	800b640 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b32a:	3301      	adds	r3, #1
 800b32c:	b2da      	uxtb	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b33a:	2b03      	cmp	r3, #3
 800b33c:	d903      	bls.n	800b346 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	220d      	movs	r2, #13
 800b342:	701a      	strb	r2, [r3, #0]
      break;
 800b344:	e17c      	b.n	800b640 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	795b      	ldrb	r3, [r3, #5]
 800b34a:	4619      	mov	r1, r3
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f001 f9df 	bl	800c710 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	791b      	ldrb	r3, [r3, #4]
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f001 f9d9 	bl	800c710 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	701a      	strb	r2, [r3, #0]
      break;
 800b364:	e16c      	b.n	800b640 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b366:	2112      	movs	r1, #18
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 fa69 	bl	800b840 <USBH_Get_DevDesc>
 800b36e:	4603      	mov	r3, r0
 800b370:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b372:	7bbb      	ldrb	r3, [r7, #14]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d103      	bne.n	800b380 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2202      	movs	r2, #2
 800b37c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b37e:	e161      	b.n	800b644 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b380:	7bbb      	ldrb	r3, [r7, #14]
 800b382:	2b03      	cmp	r3, #3
 800b384:	f040 815e 	bne.w	800b644 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b38e:	3301      	adds	r3, #1
 800b390:	b2da      	uxtb	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d903      	bls.n	800b3aa <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	220d      	movs	r2, #13
 800b3a6:	701a      	strb	r2, [r3, #0]
      break;
 800b3a8:	e14c      	b.n	800b644 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	795b      	ldrb	r3, [r3, #5]
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f001 f9ad 	bl	800c710 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	791b      	ldrb	r3, [r3, #4]
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f001 f9a7 	bl	800c710 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	701a      	strb	r2, [r3, #0]
      break;
 800b3ce:	e139      	b.n	800b644 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 faf3 	bl	800b9be <USBH_SetAddress>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b3dc:	7bbb      	ldrb	r3, [r7, #14]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d130      	bne.n	800b444 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b3e2:	2002      	movs	r0, #2
 800b3e4:	f004 fcb9 	bl	800fd5a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2203      	movs	r2, #3
 800b3f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	7919      	ldrb	r1, [r3, #4]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b40a:	9202      	str	r2, [sp, #8]
 800b40c:	2200      	movs	r2, #0
 800b40e:	9201      	str	r2, [sp, #4]
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	4603      	mov	r3, r0
 800b414:	2280      	movs	r2, #128	@ 0x80
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 f92a 	bl	800c670 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	7959      	ldrb	r1, [r3, #5]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b430:	9202      	str	r2, [sp, #8]
 800b432:	2200      	movs	r2, #0
 800b434:	9201      	str	r2, [sp, #4]
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	4603      	mov	r3, r0
 800b43a:	2200      	movs	r2, #0
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f001 f917 	bl	800c670 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b442:	e101      	b.n	800b648 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b444:	7bbb      	ldrb	r3, [r7, #14]
 800b446:	2b03      	cmp	r3, #3
 800b448:	f040 80fe 	bne.w	800b648 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	220d      	movs	r2, #13
 800b450:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	705a      	strb	r2, [r3, #1]
      break;
 800b458:	e0f6      	b.n	800b648 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b45a:	2109      	movs	r1, #9
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fa1b 	bl	800b898 <USBH_Get_CfgDesc>
 800b462:	4603      	mov	r3, r0
 800b464:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b466:	7bbb      	ldrb	r3, [r7, #14]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d103      	bne.n	800b474 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2204      	movs	r2, #4
 800b470:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b472:	e0eb      	b.n	800b64c <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b474:	7bbb      	ldrb	r3, [r7, #14]
 800b476:	2b03      	cmp	r3, #3
 800b478:	f040 80e8 	bne.w	800b64c <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b482:	3301      	adds	r3, #1
 800b484:	b2da      	uxtb	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b492:	2b03      	cmp	r3, #3
 800b494:	d903      	bls.n	800b49e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	220d      	movs	r2, #13
 800b49a:	701a      	strb	r2, [r3, #0]
      break;
 800b49c:	e0d6      	b.n	800b64c <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	795b      	ldrb	r3, [r3, #5]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f001 f933 	bl	800c710 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	791b      	ldrb	r3, [r3, #4]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f001 f92d 	bl	800c710 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	701a      	strb	r2, [r3, #0]
      break;
 800b4c2:	e0c3      	b.n	800b64c <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f9e3 	bl	800b898 <USBH_Get_CfgDesc>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b4d6:	7bbb      	ldrb	r3, [r7, #14]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d103      	bne.n	800b4e4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2205      	movs	r2, #5
 800b4e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b4e2:	e0b5      	b.n	800b650 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b4e4:	7bbb      	ldrb	r3, [r7, #14]
 800b4e6:	2b03      	cmp	r3, #3
 800b4e8:	f040 80b2 	bne.w	800b650 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b502:	2b03      	cmp	r3, #3
 800b504:	d903      	bls.n	800b50e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	220d      	movs	r2, #13
 800b50a:	701a      	strb	r2, [r3, #0]
      break;
 800b50c:	e0a0      	b.n	800b650 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	795b      	ldrb	r3, [r3, #5]
 800b512:	4619      	mov	r1, r3
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f001 f8fb 	bl	800c710 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	791b      	ldrb	r3, [r3, #4]
 800b51e:	4619      	mov	r1, r3
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f001 f8f5 	bl	800c710 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	701a      	strb	r2, [r3, #0]
      break;
 800b532:	e08d      	b.n	800b650 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d025      	beq.n	800b58a <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b54a:	23ff      	movs	r3, #255	@ 0xff
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f9cd 	bl	800b8ec <USBH_Get_StringDesc>
 800b552:	4603      	mov	r3, r0
 800b554:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b556:	7bbb      	ldrb	r3, [r7, #14]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d109      	bne.n	800b570 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2206      	movs	r2, #6
 800b560:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b562:	2300      	movs	r3, #0
 800b564:	2200      	movs	r2, #0
 800b566:	2105      	movs	r1, #5
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f91f 	bl	800b7ac <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b56e:	e071      	b.n	800b654 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b570:	7bbb      	ldrb	r3, [r7, #14]
 800b572:	2b03      	cmp	r3, #3
 800b574:	d16e      	bne.n	800b654 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2206      	movs	r2, #6
 800b57a:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b57c:	2300      	movs	r3, #0
 800b57e:	2200      	movs	r2, #0
 800b580:	2105      	movs	r1, #5
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 f912 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800b588:	e064      	b.n	800b654 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2206      	movs	r2, #6
 800b58e:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b590:	2300      	movs	r3, #0
 800b592:	2200      	movs	r2, #0
 800b594:	2105      	movs	r1, #5
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f908 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800b59c:	e05a      	b.n	800b654 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d01f      	beq.n	800b5e8 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b5b4:	23ff      	movs	r3, #255	@ 0xff
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f998 	bl	800b8ec <USBH_Get_StringDesc>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b5c0:	7bbb      	ldrb	r3, [r7, #14]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d103      	bne.n	800b5ce <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2207      	movs	r2, #7
 800b5ca:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b5cc:	e044      	b.n	800b658 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5ce:	7bbb      	ldrb	r3, [r7, #14]
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d141      	bne.n	800b658 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2207      	movs	r2, #7
 800b5d8:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b5da:	2300      	movs	r3, #0
 800b5dc:	2200      	movs	r2, #0
 800b5de:	2105      	movs	r1, #5
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 f8e3 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800b5e6:	e037      	b.n	800b658 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2207      	movs	r2, #7
 800b5ec:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	2105      	movs	r1, #5
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 f8d9 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800b5fa:	e02d      	b.n	800b658 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b602:	2b00      	cmp	r3, #0
 800b604:	d017      	beq.n	800b636 <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b612:	23ff      	movs	r3, #255	@ 0xff
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f969 	bl	800b8ec <USBH_Get_StringDesc>
 800b61a:	4603      	mov	r3, r0
 800b61c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b61e:	7bbb      	ldrb	r3, [r7, #14]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d102      	bne.n	800b62a <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b624:	2300      	movs	r3, #0
 800b626:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b628:	e018      	b.n	800b65c <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b62a:	7bbb      	ldrb	r3, [r7, #14]
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d115      	bne.n	800b65c <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 800b630:	2300      	movs	r3, #0
 800b632:	73fb      	strb	r3, [r7, #15]
      break;
 800b634:	e012      	b.n	800b65c <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	73fb      	strb	r3, [r7, #15]
      break;
 800b63a:	e00f      	b.n	800b65c <USBH_HandleEnum+0x3f0>

    default:
      break;
 800b63c:	bf00      	nop
 800b63e:	e00e      	b.n	800b65e <USBH_HandleEnum+0x3f2>
      break;
 800b640:	bf00      	nop
 800b642:	e00c      	b.n	800b65e <USBH_HandleEnum+0x3f2>
      break;
 800b644:	bf00      	nop
 800b646:	e00a      	b.n	800b65e <USBH_HandleEnum+0x3f2>
      break;
 800b648:	bf00      	nop
 800b64a:	e008      	b.n	800b65e <USBH_HandleEnum+0x3f2>
      break;
 800b64c:	bf00      	nop
 800b64e:	e006      	b.n	800b65e <USBH_HandleEnum+0x3f2>
      break;
 800b650:	bf00      	nop
 800b652:	e004      	b.n	800b65e <USBH_HandleEnum+0x3f2>
      break;
 800b654:	bf00      	nop
 800b656:	e002      	b.n	800b65e <USBH_HandleEnum+0x3f2>
      break;
 800b658:	bf00      	nop
 800b65a:	e000      	b.n	800b65e <USBH_HandleEnum+0x3f2>
      break;
 800b65c:	bf00      	nop
  }
  return Status;
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b67a:	bf00      	nop
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b082      	sub	sp, #8
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b694:	1c5a      	adds	r2, r3, #1
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f804 	bl	800b6aa <USBH_HandleSof>
}
 800b6a2:	bf00      	nop
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b082      	sub	sp, #8
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b0b      	cmp	r3, #11
 800b6ba:	d10a      	bne.n	800b6d2 <USBH_HandleSof+0x28>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d005      	beq.n	800b6d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	4798      	blx	r3
  }
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f85b 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 800b6f6:	bf00      	nop
}
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b083      	sub	sp, #12
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2201      	movs	r2, #1
 800b712:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800b716:	bf00      	nop
}
 800b718:	370c      	adds	r7, #12
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr

0800b722 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b082      	sub	sp, #8
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2201      	movs	r2, #1
 800b72e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b742:	2300      	movs	r3, #0
 800b744:	2200      	movs	r2, #0
 800b746:	2101      	movs	r1, #1
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f82f 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f004 f9a2 	bl	800fac2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	791b      	ldrb	r3, [r3, #4]
 800b782:	4619      	mov	r1, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 ffc3 	bl	800c710 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	795b      	ldrb	r3, [r3, #5]
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 ffbd 	bl	800c710 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b796:	2300      	movs	r3, #0
 800b798:	2200      	movs	r2, #0
 800b79a:	2101      	movs	r1, #1
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 f805 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	607a      	str	r2, [r7, #4]
 800b7b6:	603b      	str	r3, [r7, #0]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 800b7bc:	7afa      	ldrb	r2, [r7, #11]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
  if (available_spaces != 0U)
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
  }
#else
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f001 fa4e 	bl	800cc6c <osMessageQueueGetSpace>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00a      	beq.n	800b7ec <USBH_OS_PutMessage+0x40>
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f001 f982 	bl	800caf0 <osMessageQueuePut>
  }
#endif /* (osCMSIS < 0x20000U) */
}
 800b7ec:	bf00      	nop
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b808:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b80c:	2200      	movs	r2, #0
 800b80e:	f001 f9cf 	bl	800cbb0 <osMessageQueueGet>
 800b812:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1f0      	bne.n	800b7fc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7ff fb0c 	bl	800ae38 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b820:	e7ec      	b.n	800b7fc <USBH_Process_OS+0x8>

0800b822 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b082      	sub	sp, #8
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b82a:	2300      	movs	r3, #0
 800b82c:	2200      	movs	r2, #0
 800b82e:	2101      	movs	r1, #1
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff ffbb 	bl	800b7ac <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af02      	add	r7, sp, #8
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	460b      	mov	r3, r1
 800b84a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b84c:	887b      	ldrh	r3, [r7, #2]
 800b84e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b852:	d901      	bls.n	800b858 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b854:	2303      	movs	r3, #3
 800b856:	e01b      	b.n	800b890 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b85e:	887b      	ldrh	r3, [r7, #2]
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	4613      	mov	r3, r2
 800b864:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b868:	2100      	movs	r1, #0
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 f872 	bl	800b954 <USBH_GetDescriptor>
 800b870:	4603      	mov	r3, r0
 800b872:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b874:	7bfb      	ldrb	r3, [r7, #15]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d109      	bne.n	800b88e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b880:	887a      	ldrh	r2, [r7, #2]
 800b882:	4619      	mov	r1, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 f929 	bl	800badc <USBH_ParseDevDesc>
 800b88a:	4603      	mov	r3, r0
 800b88c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af02      	add	r7, sp, #8
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	331c      	adds	r3, #28
 800b8a8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b8aa:	887b      	ldrh	r3, [r7, #2]
 800b8ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8b0:	d901      	bls.n	800b8b6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	e016      	b.n	800b8e4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b8b6:	887b      	ldrh	r3, [r7, #2]
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f846 	bl	800b954 <USBH_GetDescriptor>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b8cc:	7bfb      	ldrb	r3, [r7, #15]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d107      	bne.n	800b8e2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b8d2:	887b      	ldrh	r3, [r7, #2]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	68b9      	ldr	r1, [r7, #8]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 f9af 	bl	800bc3c <USBH_ParseCfgDesc>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b088      	sub	sp, #32
 800b8f0:	af02      	add	r7, sp, #8
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	607a      	str	r2, [r7, #4]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	72fb      	strb	r3, [r7, #11]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b900:	893b      	ldrh	r3, [r7, #8]
 800b902:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b906:	d802      	bhi.n	800b90e <USBH_Get_StringDesc+0x22>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d101      	bne.n	800b912 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b90e:	2303      	movs	r3, #3
 800b910:	e01c      	b.n	800b94c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b912:	7afb      	ldrb	r3, [r7, #11]
 800b914:	b29b      	uxth	r3, r3
 800b916:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b91a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b922:	893b      	ldrh	r3, [r7, #8]
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	460b      	mov	r3, r1
 800b928:	2100      	movs	r1, #0
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f000 f812 	bl	800b954 <USBH_GetDescriptor>
 800b930:	4603      	mov	r3, r0
 800b932:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b934:	7dfb      	ldrb	r3, [r7, #23]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d107      	bne.n	800b94a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b940:	893a      	ldrh	r2, [r7, #8]
 800b942:	6879      	ldr	r1, [r7, #4]
 800b944:	4618      	mov	r0, r3
 800b946:	f000 fb8c 	bl	800c062 <USBH_ParseStringDesc>
  }

  return status;
 800b94a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	607b      	str	r3, [r7, #4]
 800b95e:	460b      	mov	r3, r1
 800b960:	72fb      	strb	r3, [r7, #11]
 800b962:	4613      	mov	r3, r2
 800b964:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	789b      	ldrb	r3, [r3, #2]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d11c      	bne.n	800b9a8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b96e:	7afb      	ldrb	r3, [r7, #11]
 800b970:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b974:	b2da      	uxtb	r2, r3
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2206      	movs	r2, #6
 800b97e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	893a      	ldrh	r2, [r7, #8]
 800b984:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b986:	893b      	ldrh	r3, [r7, #8]
 800b988:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b98c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b990:	d104      	bne.n	800b99c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f240 4209 	movw	r2, #1033	@ 0x409
 800b998:	829a      	strh	r2, [r3, #20]
 800b99a:	e002      	b.n	800b9a2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	8b3a      	ldrh	r2, [r7, #24]
 800b9a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b9a8:	8b3b      	ldrh	r3, [r7, #24]
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	6879      	ldr	r1, [r7, #4]
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f000 fba4 	bl	800c0fc <USBH_CtlReq>
 800b9b4:	4603      	mov	r3, r0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b082      	sub	sp, #8
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	789b      	ldrb	r3, [r3, #2]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d10f      	bne.n	800b9f2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2205      	movs	r2, #5
 800b9dc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b9de:	78fb      	ldrb	r3, [r7, #3]
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fb80 	bl	800c0fc <USBH_CtlReq>
 800b9fc:	4603      	mov	r3, r0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b082      	sub	sp, #8
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	460b      	mov	r3, r1
 800ba10:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	789b      	ldrb	r3, [r3, #2]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d10e      	bne.n	800ba38 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2209      	movs	r2, #9
 800ba24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	887a      	ldrh	r2, [r7, #2]
 800ba2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ba38:	2200      	movs	r2, #0
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 fb5d 	bl	800c0fc <USBH_CtlReq>
 800ba42:	4603      	mov	r3, r0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	460b      	mov	r3, r1
 800ba56:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	789b      	ldrb	r3, [r3, #2]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d10f      	bne.n	800ba80 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2203      	movs	r2, #3
 800ba6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ba6c:	78fb      	ldrb	r3, [r7, #3]
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ba80:	2200      	movs	r2, #0
 800ba82:	2100      	movs	r1, #0
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fb39 	bl	800c0fc <USBH_CtlReq>
 800ba8a:	4603      	mov	r3, r0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	789b      	ldrb	r3, [r3, #2]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d10f      	bne.n	800bac8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2202      	movs	r2, #2
 800baac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2201      	movs	r2, #1
 800bab2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800baba:	78fb      	ldrb	r3, [r7, #3]
 800babc:	b29a      	uxth	r2, r3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bac8:	2200      	movs	r2, #0
 800baca:	2100      	movs	r1, #0
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fb15 	bl	800c0fc <USBH_CtlReq>
 800bad2:	4603      	mov	r3, r0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800badc:	b480      	push	{r7}
 800bade:	b087      	sub	sp, #28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	4613      	mov	r3, r2
 800bae8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800baf0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d101      	bne.n	800bb00 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800bafc:	2302      	movs	r3, #2
 800bafe:	e094      	b.n	800bc2a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	781a      	ldrb	r2, [r3, #0]
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	785a      	ldrb	r2, [r3, #1]
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	3302      	adds	r3, #2
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	461a      	mov	r2, r3
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	3303      	adds	r3, #3
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	021b      	lsls	r3, r3, #8
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	4313      	orrs	r3, r2
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	791a      	ldrb	r2, [r3, #4]
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	795a      	ldrb	r2, [r3, #5]
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	799a      	ldrb	r2, [r3, #6]
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	79da      	ldrb	r2, [r3, #7]
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d004      	beq.n	800bb5e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d11b      	bne.n	800bb96 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	79db      	ldrb	r3, [r3, #7]
 800bb62:	2b20      	cmp	r3, #32
 800bb64:	dc0f      	bgt.n	800bb86 <USBH_ParseDevDesc+0xaa>
 800bb66:	2b08      	cmp	r3, #8
 800bb68:	db0f      	blt.n	800bb8a <USBH_ParseDevDesc+0xae>
 800bb6a:	3b08      	subs	r3, #8
 800bb6c:	4a32      	ldr	r2, [pc, #200]	@ (800bc38 <USBH_ParseDevDesc+0x15c>)
 800bb6e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	bf14      	ite	ne
 800bb7a:	2301      	movne	r3, #1
 800bb7c:	2300      	moveq	r3, #0
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d106      	bne.n	800bb92 <USBH_ParseDevDesc+0xb6>
 800bb84:	e001      	b.n	800bb8a <USBH_ParseDevDesc+0xae>
 800bb86:	2b40      	cmp	r3, #64	@ 0x40
 800bb88:	d003      	beq.n	800bb92 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	2208      	movs	r2, #8
 800bb8e:	71da      	strb	r2, [r3, #7]
        break;
 800bb90:	e000      	b.n	800bb94 <USBH_ParseDevDesc+0xb8>
        break;
 800bb92:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800bb94:	e00e      	b.n	800bbb4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bb9c:	2b02      	cmp	r3, #2
 800bb9e:	d107      	bne.n	800bbb0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	79db      	ldrb	r3, [r3, #7]
 800bba4:	2b08      	cmp	r3, #8
 800bba6:	d005      	beq.n	800bbb4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	2208      	movs	r2, #8
 800bbac:	71da      	strb	r2, [r3, #7]
 800bbae:	e001      	b.n	800bbb4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800bbb4:	88fb      	ldrh	r3, [r7, #6]
 800bbb6:	2b08      	cmp	r3, #8
 800bbb8:	d936      	bls.n	800bc28 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	3308      	adds	r3, #8
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	3309      	adds	r3, #9
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	021b      	lsls	r3, r3, #8
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	330a      	adds	r3, #10
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	330b      	adds	r3, #11
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	021b      	lsls	r3, r3, #8
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	330c      	adds	r3, #12
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	330d      	adds	r3, #13
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	021b      	lsls	r3, r3, #8
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	4313      	orrs	r3, r2
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	7b9a      	ldrb	r2, [r3, #14]
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	7bda      	ldrb	r2, [r3, #15]
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	7c1a      	ldrb	r2, [r3, #16]
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	7c5a      	ldrb	r2, [r3, #17]
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800bc28:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	371c      	adds	r7, #28
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	01000101 	.word	0x01000101

0800bc3c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b08c      	sub	sp, #48	@ 0x30
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	4613      	mov	r3, r2
 800bc48:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bc50:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bc52:	2300      	movs	r3, #0
 800bc54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800bc6a:	2302      	movs	r3, #2
 800bc6c:	e0de      	b.n	800be2c <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	2b09      	cmp	r3, #9
 800bc78:	d002      	beq.n	800bc80 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc7c:	2209      	movs	r2, #9
 800bc7e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	781a      	ldrb	r2, [r3, #0]
 800bc84:	6a3b      	ldr	r3, [r7, #32]
 800bc86:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	785a      	ldrb	r2, [r3, #1]
 800bc8c:	6a3b      	ldr	r3, [r7, #32]
 800bc8e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	3302      	adds	r3, #2
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	461a      	mov	r2, r3
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	3303      	adds	r3, #3
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	021b      	lsls	r3, r3, #8
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	4313      	orrs	r3, r2
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcaa:	bf28      	it	cs
 800bcac:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	791a      	ldrb	r2, [r3, #4]
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	795a      	ldrb	r2, [r3, #5]
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	799a      	ldrb	r2, [r3, #6]
 800bcca:	6a3b      	ldr	r3, [r7, #32]
 800bccc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	79da      	ldrb	r2, [r3, #7]
 800bcd2:	6a3b      	ldr	r3, [r7, #32]
 800bcd4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	7a1a      	ldrb	r2, [r3, #8]
 800bcda:	6a3b      	ldr	r3, [r7, #32]
 800bcdc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bcde:	88fb      	ldrh	r3, [r7, #6]
 800bce0:	2b09      	cmp	r3, #9
 800bce2:	f240 80a1 	bls.w	800be28 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800bce6:	2309      	movs	r3, #9
 800bce8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bcea:	2300      	movs	r3, #0
 800bcec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bcee:	e085      	b.n	800bdfc <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bcf0:	f107 0316 	add.w	r3, r7, #22
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcf8:	f000 f9e6 	bl	800c0c8 <USBH_GetNextDesc>
 800bcfc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bcfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd00:	785b      	ldrb	r3, [r3, #1]
 800bd02:	2b04      	cmp	r3, #4
 800bd04:	d17a      	bne.n	800bdfc <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bd06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	2b09      	cmp	r3, #9
 800bd0c:	d002      	beq.n	800bd14 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd10:	2209      	movs	r2, #9
 800bd12:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800bd14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd18:	221a      	movs	r2, #26
 800bd1a:	fb02 f303 	mul.w	r3, r2, r3
 800bd1e:	3308      	adds	r3, #8
 800bd20:	6a3a      	ldr	r2, [r7, #32]
 800bd22:	4413      	add	r3, r2
 800bd24:	3302      	adds	r3, #2
 800bd26:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bd28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd2a:	69f8      	ldr	r0, [r7, #28]
 800bd2c:	f000 f882 	bl	800be34 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bd30:	2300      	movs	r3, #0
 800bd32:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bd3a:	e043      	b.n	800bdc4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bd3c:	f107 0316 	add.w	r3, r7, #22
 800bd40:	4619      	mov	r1, r3
 800bd42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd44:	f000 f9c0 	bl	800c0c8 <USBH_GetNextDesc>
 800bd48:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd4c:	785b      	ldrb	r3, [r3, #1]
 800bd4e:	2b05      	cmp	r3, #5
 800bd50:	d138      	bne.n	800bdc4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	795b      	ldrb	r3, [r3, #5]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d113      	bne.n	800bd82 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800bd5e:	2b02      	cmp	r3, #2
 800bd60:	d003      	beq.n	800bd6a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	799b      	ldrb	r3, [r3, #6]
 800bd66:	2b03      	cmp	r3, #3
 800bd68:	d10b      	bne.n	800bd82 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	79db      	ldrb	r3, [r3, #7]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d10b      	bne.n	800bd8a <USBH_ParseCfgDesc+0x14e>
 800bd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	2b09      	cmp	r3, #9
 800bd78:	d007      	beq.n	800bd8a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800bd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7c:	2209      	movs	r2, #9
 800bd7e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bd80:	e003      	b.n	800bd8a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800bd82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd84:	2207      	movs	r2, #7
 800bd86:	701a      	strb	r2, [r3, #0]
 800bd88:	e000      	b.n	800bd8c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bd8a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bd8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd90:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bd94:	3201      	adds	r2, #1
 800bd96:	00d2      	lsls	r2, r2, #3
 800bd98:	211a      	movs	r1, #26
 800bd9a:	fb01 f303 	mul.w	r3, r1, r3
 800bd9e:	4413      	add	r3, r2
 800bda0:	3308      	adds	r3, #8
 800bda2:	6a3a      	ldr	r2, [r7, #32]
 800bda4:	4413      	add	r3, r2
 800bda6:	3304      	adds	r3, #4
 800bda8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800bdaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bdac:	69b9      	ldr	r1, [r7, #24]
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f000 f86f 	bl	800be92 <USBH_ParseEPDesc>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800bdba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bdc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d80a      	bhi.n	800bde2 <USBH_ParseCfgDesc+0x1a6>
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	791b      	ldrb	r3, [r3, #4]
 800bdd0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d204      	bcs.n	800bde2 <USBH_ParseCfgDesc+0x1a6>
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	885a      	ldrh	r2, [r3, #2]
 800bddc:	8afb      	ldrh	r3, [r7, #22]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d8ac      	bhi.n	800bd3c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	791b      	ldrb	r3, [r3, #4]
 800bde6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d201      	bcs.n	800bdf2 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800bdee:	2303      	movs	r3, #3
 800bdf0:	e01c      	b.n	800be2c <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800bdf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bdfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be00:	2b01      	cmp	r3, #1
 800be02:	d805      	bhi.n	800be10 <USBH_ParseCfgDesc+0x1d4>
 800be04:	6a3b      	ldr	r3, [r7, #32]
 800be06:	885a      	ldrh	r2, [r3, #2]
 800be08:	8afb      	ldrh	r3, [r7, #22]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	f63f af70 	bhi.w	800bcf0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800be10:	6a3b      	ldr	r3, [r7, #32]
 800be12:	791b      	ldrb	r3, [r3, #4]
 800be14:	2b02      	cmp	r3, #2
 800be16:	bf28      	it	cs
 800be18:	2302      	movcs	r3, #2
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800be20:	429a      	cmp	r2, r3
 800be22:	d201      	bcs.n	800be28 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800be24:	2303      	movs	r3, #3
 800be26:	e001      	b.n	800be2c <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800be28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3730      	adds	r7, #48	@ 0x30
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	781a      	ldrb	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	785a      	ldrb	r2, [r3, #1]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	789a      	ldrb	r2, [r3, #2]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	78da      	ldrb	r2, [r3, #3]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	791a      	ldrb	r2, [r3, #4]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	795a      	ldrb	r2, [r3, #5]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	799a      	ldrb	r2, [r3, #6]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	79da      	ldrb	r2, [r3, #7]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	7a1a      	ldrb	r2, [r3, #8]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	721a      	strb	r2, [r3, #8]
}
 800be86:	bf00      	nop
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800be92:	b480      	push	{r7}
 800be94:	b087      	sub	sp, #28
 800be96:	af00      	add	r7, sp, #0
 800be98:	60f8      	str	r0, [r7, #12]
 800be9a:	60b9      	str	r1, [r7, #8]
 800be9c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	781a      	ldrb	r2, [r3, #0]
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	785a      	ldrb	r2, [r3, #1]
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	789a      	ldrb	r2, [r3, #2]
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	78da      	ldrb	r2, [r3, #3]
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	3304      	adds	r3, #4
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	461a      	mov	r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	3305      	adds	r3, #5
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	021b      	lsls	r3, r3, #8
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	4313      	orrs	r3, r2
 800bed6:	b29a      	uxth	r2, r3
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	799a      	ldrb	r2, [r3, #6]
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	889b      	ldrh	r3, [r3, #4]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d009      	beq.n	800bf00 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bef4:	d804      	bhi.n	800bf00 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800befa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800befe:	d901      	bls.n	800bf04 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800bf00:	2303      	movs	r3, #3
 800bf02:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d136      	bne.n	800bf7c <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	78db      	ldrb	r3, [r3, #3]
 800bf12:	f003 0303 	and.w	r3, r3, #3
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	d108      	bne.n	800bf2c <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	889b      	ldrh	r3, [r3, #4]
 800bf1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf22:	f240 8097 	bls.w	800c054 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bf26:	2303      	movs	r3, #3
 800bf28:	75fb      	strb	r3, [r7, #23]
 800bf2a:	e093      	b.n	800c054 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	78db      	ldrb	r3, [r3, #3]
 800bf30:	f003 0303 	and.w	r3, r3, #3
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d107      	bne.n	800bf48 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	889b      	ldrh	r3, [r3, #4]
 800bf3c:	2b40      	cmp	r3, #64	@ 0x40
 800bf3e:	f240 8089 	bls.w	800c054 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bf42:	2303      	movs	r3, #3
 800bf44:	75fb      	strb	r3, [r7, #23]
 800bf46:	e085      	b.n	800c054 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	78db      	ldrb	r3, [r3, #3]
 800bf4c:	f003 0303 	and.w	r3, r3, #3
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d005      	beq.n	800bf60 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	78db      	ldrb	r3, [r3, #3]
 800bf58:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bf5c:	2b03      	cmp	r3, #3
 800bf5e:	d10a      	bne.n	800bf76 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	799b      	ldrb	r3, [r3, #6]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d003      	beq.n	800bf70 <USBH_ParseEPDesc+0xde>
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	799b      	ldrb	r3, [r3, #6]
 800bf6c:	2b10      	cmp	r3, #16
 800bf6e:	d970      	bls.n	800c052 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800bf70:	2303      	movs	r3, #3
 800bf72:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bf74:	e06d      	b.n	800c052 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bf76:	2303      	movs	r3, #3
 800bf78:	75fb      	strb	r3, [r7, #23]
 800bf7a:	e06b      	b.n	800c054 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d13c      	bne.n	800c000 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	78db      	ldrb	r3, [r3, #3]
 800bf8a:	f003 0303 	and.w	r3, r3, #3
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	d005      	beq.n	800bf9e <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	78db      	ldrb	r3, [r3, #3]
 800bf96:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d106      	bne.n	800bfac <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	889b      	ldrh	r3, [r3, #4]
 800bfa2:	2b40      	cmp	r3, #64	@ 0x40
 800bfa4:	d956      	bls.n	800c054 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bfaa:	e053      	b.n	800c054 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	78db      	ldrb	r3, [r3, #3]
 800bfb0:	f003 0303 	and.w	r3, r3, #3
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d10e      	bne.n	800bfd6 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	799b      	ldrb	r3, [r3, #6]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d007      	beq.n	800bfd0 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800bfc4:	2b10      	cmp	r3, #16
 800bfc6:	d803      	bhi.n	800bfd0 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800bfcc:	2b40      	cmp	r3, #64	@ 0x40
 800bfce:	d941      	bls.n	800c054 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	75fb      	strb	r3, [r7, #23]
 800bfd4:	e03e      	b.n	800c054 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	78db      	ldrb	r3, [r3, #3]
 800bfda:	f003 0303 	and.w	r3, r3, #3
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d10b      	bne.n	800bffa <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	799b      	ldrb	r3, [r3, #6]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d004      	beq.n	800bff4 <USBH_ParseEPDesc+0x162>
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	889b      	ldrh	r3, [r3, #4]
 800bfee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bff2:	d32f      	bcc.n	800c054 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bff4:	2303      	movs	r3, #3
 800bff6:	75fb      	strb	r3, [r7, #23]
 800bff8:	e02c      	b.n	800c054 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bffa:	2303      	movs	r3, #3
 800bffc:	75fb      	strb	r3, [r7, #23]
 800bffe:	e029      	b.n	800c054 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c006:	2b02      	cmp	r3, #2
 800c008:	d120      	bne.n	800c04c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	78db      	ldrb	r3, [r3, #3]
 800c00e:	f003 0303 	and.w	r3, r3, #3
 800c012:	2b00      	cmp	r3, #0
 800c014:	d106      	bne.n	800c024 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	889b      	ldrh	r3, [r3, #4]
 800c01a:	2b08      	cmp	r3, #8
 800c01c:	d01a      	beq.n	800c054 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c01e:	2303      	movs	r3, #3
 800c020:	75fb      	strb	r3, [r7, #23]
 800c022:	e017      	b.n	800c054 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	78db      	ldrb	r3, [r3, #3]
 800c028:	f003 0303 	and.w	r3, r3, #3
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	d10a      	bne.n	800c046 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	799b      	ldrb	r3, [r3, #6]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d003      	beq.n	800c040 <USBH_ParseEPDesc+0x1ae>
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	889b      	ldrh	r3, [r3, #4]
 800c03c:	2b08      	cmp	r3, #8
 800c03e:	d909      	bls.n	800c054 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c040:	2303      	movs	r3, #3
 800c042:	75fb      	strb	r3, [r7, #23]
 800c044:	e006      	b.n	800c054 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c046:	2303      	movs	r3, #3
 800c048:	75fb      	strb	r3, [r7, #23]
 800c04a:	e003      	b.n	800c054 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c04c:	2303      	movs	r3, #3
 800c04e:	75fb      	strb	r3, [r7, #23]
 800c050:	e000      	b.n	800c054 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c052:	bf00      	nop
  }

  return status;
 800c054:	7dfb      	ldrb	r3, [r7, #23]
}
 800c056:	4618      	mov	r0, r3
 800c058:	371c      	adds	r7, #28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c062:	b480      	push	{r7}
 800c064:	b087      	sub	sp, #28
 800c066:	af00      	add	r7, sp, #0
 800c068:	60f8      	str	r0, [r7, #12]
 800c06a:	60b9      	str	r1, [r7, #8]
 800c06c:	4613      	mov	r3, r2
 800c06e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	3301      	adds	r3, #1
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	2b03      	cmp	r3, #3
 800c078:	d120      	bne.n	800c0bc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	1e9a      	subs	r2, r3, #2
 800c080:	88fb      	ldrh	r3, [r7, #6]
 800c082:	4293      	cmp	r3, r2
 800c084:	bf28      	it	cs
 800c086:	4613      	movcs	r3, r2
 800c088:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	3302      	adds	r3, #2
 800c08e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c090:	2300      	movs	r3, #0
 800c092:	82fb      	strh	r3, [r7, #22]
 800c094:	e00b      	b.n	800c0ae <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c096:	8afb      	ldrh	r3, [r7, #22]
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	4413      	add	r3, r2
 800c09c:	781a      	ldrb	r2, [r3, #0]
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c0a8:	8afb      	ldrh	r3, [r7, #22]
 800c0aa:	3302      	adds	r3, #2
 800c0ac:	82fb      	strh	r3, [r7, #22]
 800c0ae:	8afa      	ldrh	r2, [r7, #22]
 800c0b0:	8abb      	ldrh	r3, [r7, #20]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d3ef      	bcc.n	800c096 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	701a      	strb	r2, [r3, #0]
  }
}
 800c0bc:	bf00      	nop
 800c0be:	371c      	adds	r7, #28
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	881b      	ldrh	r3, [r3, #0]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	7812      	ldrb	r2, [r2, #0]
 800c0da:	4413      	add	r3, r2
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	4613      	mov	r3, r2
 800c108:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c10a:	2301      	movs	r3, #1
 800c10c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	789b      	ldrb	r3, [r3, #2]
 800c112:	2b01      	cmp	r3, #1
 800c114:	d002      	beq.n	800c11c <USBH_CtlReq+0x20>
 800c116:	2b02      	cmp	r3, #2
 800c118:	d015      	beq.n	800c146 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800c11a:	e033      	b.n	800c184 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	88fa      	ldrh	r2, [r7, #6]
 800c126:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2201      	movs	r2, #1
 800c12c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2202      	movs	r2, #2
 800c132:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c134:	2301      	movs	r3, #1
 800c136:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c138:	2300      	movs	r3, #0
 800c13a:	2200      	movs	r2, #0
 800c13c:	2103      	movs	r1, #3
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f7ff fb34 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800c144:	e01e      	b.n	800c184 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f000 f822 	bl	800c190 <USBH_HandleControl>
 800c14c:	4603      	mov	r3, r0
 800c14e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c150:	7dfb      	ldrb	r3, [r7, #23]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d002      	beq.n	800c15c <USBH_CtlReq+0x60>
 800c156:	7dfb      	ldrb	r3, [r7, #23]
 800c158:	2b03      	cmp	r3, #3
 800c15a:	d106      	bne.n	800c16a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2201      	movs	r2, #1
 800c160:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2200      	movs	r2, #0
 800c166:	761a      	strb	r2, [r3, #24]
 800c168:	e005      	b.n	800c176 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 800c16a:	7dfb      	ldrb	r3, [r7, #23]
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d102      	bne.n	800c176 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2201      	movs	r2, #1
 800c174:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c176:	2300      	movs	r3, #0
 800c178:	2200      	movs	r2, #0
 800c17a:	2103      	movs	r1, #3
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f7ff fb15 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800c182:	bf00      	nop
  }
  return status;
 800c184:	7dfb      	ldrb	r3, [r7, #23]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3718      	adds	r7, #24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
	...

0800c190 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af02      	add	r7, sp, #8
 800c196:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c198:	2301      	movs	r3, #1
 800c19a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c19c:	2300      	movs	r3, #0
 800c19e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	7e1b      	ldrb	r3, [r3, #24]
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	2b0a      	cmp	r3, #10
 800c1a8:	f200 81b2 	bhi.w	800c510 <USBH_HandleControl+0x380>
 800c1ac:	a201      	add	r2, pc, #4	@ (adr r2, 800c1b4 <USBH_HandleControl+0x24>)
 800c1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b2:	bf00      	nop
 800c1b4:	0800c1e1 	.word	0x0800c1e1
 800c1b8:	0800c1fb 	.word	0x0800c1fb
 800c1bc:	0800c27d 	.word	0x0800c27d
 800c1c0:	0800c2a3 	.word	0x0800c2a3
 800c1c4:	0800c301 	.word	0x0800c301
 800c1c8:	0800c32b 	.word	0x0800c32b
 800c1cc:	0800c3ad 	.word	0x0800c3ad
 800c1d0:	0800c3cf 	.word	0x0800c3cf
 800c1d4:	0800c431 	.word	0x0800c431
 800c1d8:	0800c457 	.word	0x0800c457
 800c1dc:	0800c4b9 	.word	0x0800c4b9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f103 0110 	add.w	r1, r3, #16
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	795b      	ldrb	r3, [r3, #5]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 f99f 	bl	800c530 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2202      	movs	r2, #2
 800c1f6:	761a      	strb	r2, [r3, #24]
      break;
 800c1f8:	e195      	b.n	800c526 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	795b      	ldrb	r3, [r3, #5]
 800c1fe:	4619      	mov	r1, r3
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f003 fd4d 	bl	800fca0 <USBH_LL_GetURBState>
 800c206:	4603      	mov	r3, r0
 800c208:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c20a:	7bbb      	ldrb	r3, [r7, #14]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d124      	bne.n	800c25a <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	7c1b      	ldrb	r3, [r3, #16]
 800c214:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c218:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	8adb      	ldrh	r3, [r3, #22]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d00a      	beq.n	800c238 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c222:	7b7b      	ldrb	r3, [r7, #13]
 800c224:	2b80      	cmp	r3, #128	@ 0x80
 800c226:	d103      	bne.n	800c230 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2203      	movs	r2, #3
 800c22c:	761a      	strb	r2, [r3, #24]
 800c22e:	e00d      	b.n	800c24c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2205      	movs	r2, #5
 800c234:	761a      	strb	r2, [r3, #24]
 800c236:	e009      	b.n	800c24c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c238:	7b7b      	ldrb	r3, [r7, #13]
 800c23a:	2b80      	cmp	r3, #128	@ 0x80
 800c23c:	d103      	bne.n	800c246 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2209      	movs	r2, #9
 800c242:	761a      	strb	r2, [r3, #24]
 800c244:	e002      	b.n	800c24c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2207      	movs	r2, #7
 800c24a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c24c:	2300      	movs	r3, #0
 800c24e:	2200      	movs	r2, #0
 800c250:	2103      	movs	r1, #3
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7ff faaa 	bl	800b7ac <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c258:	e15c      	b.n	800c514 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
 800c25c:	2b04      	cmp	r3, #4
 800c25e:	d003      	beq.n	800c268 <USBH_HandleControl+0xd8>
 800c260:	7bbb      	ldrb	r3, [r7, #14]
 800c262:	2b02      	cmp	r3, #2
 800c264:	f040 8156 	bne.w	800c514 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	220b      	movs	r2, #11
 800c26c:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c26e:	2300      	movs	r3, #0
 800c270:	2200      	movs	r2, #0
 800c272:	2103      	movs	r1, #3
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff fa99 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800c27a:	e14b      	b.n	800c514 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c282:	b29a      	uxth	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6899      	ldr	r1, [r3, #8]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	899a      	ldrh	r2, [r3, #12]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	791b      	ldrb	r3, [r3, #4]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 f98a 	bl	800c5ae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2204      	movs	r2, #4
 800c29e:	761a      	strb	r2, [r3, #24]
      break;
 800c2a0:	e141      	b.n	800c526 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	791b      	ldrb	r3, [r3, #4]
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f003 fcf9 	bl	800fca0 <USBH_LL_GetURBState>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c2b2:	7bbb      	ldrb	r3, [r7, #14]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d109      	bne.n	800c2cc <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2209      	movs	r2, #9
 800c2bc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c2be:	2300      	movs	r3, #0
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	2103      	movs	r1, #3
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7ff fa71 	bl	800b7ac <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c2ca:	e125      	b.n	800c518 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 800c2cc:	7bbb      	ldrb	r3, [r7, #14]
 800c2ce:	2b05      	cmp	r3, #5
 800c2d0:	d108      	bne.n	800c2e4 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2103      	movs	r1, #3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7ff fa65 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800c2e2:	e119      	b.n	800c518 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 800c2e4:	7bbb      	ldrb	r3, [r7, #14]
 800c2e6:	2b04      	cmp	r3, #4
 800c2e8:	f040 8116 	bne.w	800c518 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	220b      	movs	r2, #11
 800c2f0:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	2103      	movs	r1, #3
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7ff fa57 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800c2fe:	e10b      	b.n	800c518 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6899      	ldr	r1, [r3, #8]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	899a      	ldrh	r2, [r3, #12]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	795b      	ldrb	r3, [r3, #5]
 800c30c:	2001      	movs	r0, #1
 800c30e:	9000      	str	r0, [sp, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f927 	bl	800c564 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2206      	movs	r2, #6
 800c326:	761a      	strb	r2, [r3, #24]
      break;
 800c328:	e0fd      	b.n	800c526 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	795b      	ldrb	r3, [r3, #5]
 800c32e:	4619      	mov	r1, r3
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f003 fcb5 	bl	800fca0 <USBH_LL_GetURBState>
 800c336:	4603      	mov	r3, r0
 800c338:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c33a:	7bbb      	ldrb	r3, [r7, #14]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d109      	bne.n	800c354 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2207      	movs	r2, #7
 800c344:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c346:	2300      	movs	r3, #0
 800c348:	2200      	movs	r2, #0
 800c34a:	2103      	movs	r1, #3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7ff fa2d 	bl	800b7ac <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c352:	e0e3      	b.n	800c51c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 800c354:	7bbb      	ldrb	r3, [r7, #14]
 800c356:	2b05      	cmp	r3, #5
 800c358:	d10b      	bne.n	800c372 <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	220c      	movs	r2, #12
 800c35e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c360:	2303      	movs	r3, #3
 800c362:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c364:	2300      	movs	r3, #0
 800c366:	2200      	movs	r2, #0
 800c368:	2103      	movs	r1, #3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7ff fa1e 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800c370:	e0d4      	b.n	800c51c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c372:	7bbb      	ldrb	r3, [r7, #14]
 800c374:	2b02      	cmp	r3, #2
 800c376:	d109      	bne.n	800c38c <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2205      	movs	r2, #5
 800c37c:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c37e:	2300      	movs	r3, #0
 800c380:	2200      	movs	r2, #0
 800c382:	2103      	movs	r1, #3
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f7ff fa11 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800c38a:	e0c7      	b.n	800c51c <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 800c38c:	7bbb      	ldrb	r3, [r7, #14]
 800c38e:	2b04      	cmp	r3, #4
 800c390:	f040 80c4 	bne.w	800c51c <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	220b      	movs	r2, #11
 800c398:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c39a:	2302      	movs	r3, #2
 800c39c:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c39e:	2300      	movs	r3, #0
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	2103      	movs	r1, #3
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f7ff fa01 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800c3aa:	e0b7      	b.n	800c51c <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	791b      	ldrb	r3, [r3, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 f8fa 	bl	800c5ae <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2208      	movs	r2, #8
 800c3ca:	761a      	strb	r2, [r3, #24]

      break;
 800c3cc:	e0ab      	b.n	800c526 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	791b      	ldrb	r3, [r3, #4]
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f003 fc63 	bl	800fca0 <USBH_LL_GetURBState>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c3de:	7bbb      	ldrb	r3, [r7, #14]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d10b      	bne.n	800c3fc <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	220d      	movs	r2, #13
 800c3e8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	2103      	movs	r1, #3
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7ff f9d9 	bl	800b7ac <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c3fa:	e091      	b.n	800c520 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 800c3fc:	7bbb      	ldrb	r3, [r7, #14]
 800c3fe:	2b04      	cmp	r3, #4
 800c400:	d109      	bne.n	800c416 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	220b      	movs	r2, #11
 800c406:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c408:	2300      	movs	r3, #0
 800c40a:	2200      	movs	r2, #0
 800c40c:	2103      	movs	r1, #3
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7ff f9cc 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800c414:	e084      	b.n	800c520 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 800c416:	7bbb      	ldrb	r3, [r7, #14]
 800c418:	2b05      	cmp	r3, #5
 800c41a:	f040 8081 	bne.w	800c520 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 800c41e:	2303      	movs	r3, #3
 800c420:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c422:	2300      	movs	r3, #0
 800c424:	2200      	movs	r2, #0
 800c426:	2103      	movs	r1, #3
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7ff f9bf 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800c42e:	e077      	b.n	800c520 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	795b      	ldrb	r3, [r3, #5]
 800c434:	2201      	movs	r2, #1
 800c436:	9200      	str	r2, [sp, #0]
 800c438:	2200      	movs	r2, #0
 800c43a:	2100      	movs	r1, #0
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 f891 	bl	800c564 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c448:	b29a      	uxth	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	220a      	movs	r2, #10
 800c452:	761a      	strb	r2, [r3, #24]
      break;
 800c454:	e067      	b.n	800c526 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	795b      	ldrb	r3, [r3, #5]
 800c45a:	4619      	mov	r1, r3
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f003 fc1f 	bl	800fca0 <USBH_LL_GetURBState>
 800c462:	4603      	mov	r3, r0
 800c464:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c466:	7bbb      	ldrb	r3, [r7, #14]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d10b      	bne.n	800c484 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	220d      	movs	r2, #13
 800c474:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c476:	2300      	movs	r3, #0
 800c478:	2200      	movs	r2, #0
 800c47a:	2103      	movs	r1, #3
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f7ff f995 	bl	800b7ac <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c482:	e04f      	b.n	800c524 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c484:	7bbb      	ldrb	r3, [r7, #14]
 800c486:	2b02      	cmp	r3, #2
 800c488:	d109      	bne.n	800c49e <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2209      	movs	r2, #9
 800c48e:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c490:	2300      	movs	r3, #0
 800c492:	2200      	movs	r2, #0
 800c494:	2103      	movs	r1, #3
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7ff f988 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800c49c:	e042      	b.n	800c524 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 800c49e:	7bbb      	ldrb	r3, [r7, #14]
 800c4a0:	2b04      	cmp	r3, #4
 800c4a2:	d13f      	bne.n	800c524 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	220b      	movs	r2, #11
 800c4a8:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2103      	movs	r1, #3
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7ff f97b 	bl	800b7ac <USBH_OS_PutMessage>
      break;
 800c4b6:	e035      	b.n	800c524 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	7e5b      	ldrb	r3, [r3, #25]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	b2da      	uxtb	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	765a      	strb	r2, [r3, #25]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	7e5b      	ldrb	r3, [r3, #25]
 800c4c8:	2b02      	cmp	r3, #2
 800c4ca:	d806      	bhi.n	800c4da <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c4d8:	e025      	b.n	800c526 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c4e0:	2106      	movs	r1, #6
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	795b      	ldrb	r3, [r3, #5]
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f90c 	bl	800c710 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	791b      	ldrb	r3, [r3, #4]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f906 	bl	800c710 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c50a:	2302      	movs	r3, #2
 800c50c:	73fb      	strb	r3, [r7, #15]
      break;
 800c50e:	e00a      	b.n	800c526 <USBH_HandleControl+0x396>

    default:
      break;
 800c510:	bf00      	nop
 800c512:	e008      	b.n	800c526 <USBH_HandleControl+0x396>
      break;
 800c514:	bf00      	nop
 800c516:	e006      	b.n	800c526 <USBH_HandleControl+0x396>
      break;
 800c518:	bf00      	nop
 800c51a:	e004      	b.n	800c526 <USBH_HandleControl+0x396>
      break;
 800c51c:	bf00      	nop
 800c51e:	e002      	b.n	800c526 <USBH_HandleControl+0x396>
      break;
 800c520:	bf00      	nop
 800c522:	e000      	b.n	800c526 <USBH_HandleControl+0x396>
      break;
 800c524:	bf00      	nop
  }

  return status;
 800c526:	7bfb      	ldrb	r3, [r7, #15]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b088      	sub	sp, #32
 800c534:	af04      	add	r7, sp, #16
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	4613      	mov	r3, r2
 800c53c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c53e:	79f9      	ldrb	r1, [r7, #7]
 800c540:	2300      	movs	r3, #0
 800c542:	9303      	str	r3, [sp, #12]
 800c544:	2308      	movs	r3, #8
 800c546:	9302      	str	r3, [sp, #8]
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	9301      	str	r3, [sp, #4]
 800c54c:	2300      	movs	r3, #0
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	2300      	movs	r3, #0
 800c552:	2200      	movs	r2, #0
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f003 fb72 	bl	800fc3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b088      	sub	sp, #32
 800c568:	af04      	add	r7, sp, #16
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	4611      	mov	r1, r2
 800c570:	461a      	mov	r2, r3
 800c572:	460b      	mov	r3, r1
 800c574:	80fb      	strh	r3, [r7, #6]
 800c576:	4613      	mov	r3, r2
 800c578:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c580:	2b00      	cmp	r3, #0
 800c582:	d001      	beq.n	800c588 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c584:	2300      	movs	r3, #0
 800c586:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c588:	7979      	ldrb	r1, [r7, #5]
 800c58a:	7e3b      	ldrb	r3, [r7, #24]
 800c58c:	9303      	str	r3, [sp, #12]
 800c58e:	88fb      	ldrh	r3, [r7, #6]
 800c590:	9302      	str	r3, [sp, #8]
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	9301      	str	r3, [sp, #4]
 800c596:	2301      	movs	r3, #1
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	2300      	movs	r3, #0
 800c59c:	2200      	movs	r2, #0
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f003 fb4d 	bl	800fc3e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b088      	sub	sp, #32
 800c5b2:	af04      	add	r7, sp, #16
 800c5b4:	60f8      	str	r0, [r7, #12]
 800c5b6:	60b9      	str	r1, [r7, #8]
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	460b      	mov	r3, r1
 800c5be:	80fb      	strh	r3, [r7, #6]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c5c4:	7979      	ldrb	r1, [r7, #5]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	9303      	str	r3, [sp, #12]
 800c5ca:	88fb      	ldrh	r3, [r7, #6]
 800c5cc:	9302      	str	r3, [sp, #8]
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	9301      	str	r3, [sp, #4]
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	2201      	movs	r2, #1
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f003 fb2f 	bl	800fc3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c5e0:	2300      	movs	r3, #0

}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b088      	sub	sp, #32
 800c5ee:	af04      	add	r7, sp, #16
 800c5f0:	60f8      	str	r0, [r7, #12]
 800c5f2:	60b9      	str	r1, [r7, #8]
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	80fb      	strh	r3, [r7, #6]
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c606:	2b00      	cmp	r3, #0
 800c608:	d001      	beq.n	800c60e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c60a:	2300      	movs	r3, #0
 800c60c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c60e:	7979      	ldrb	r1, [r7, #5]
 800c610:	7e3b      	ldrb	r3, [r7, #24]
 800c612:	9303      	str	r3, [sp, #12]
 800c614:	88fb      	ldrh	r3, [r7, #6]
 800c616:	9302      	str	r3, [sp, #8]
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	9301      	str	r3, [sp, #4]
 800c61c:	2301      	movs	r3, #1
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	2302      	movs	r3, #2
 800c622:	2200      	movs	r2, #0
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f003 fb0a 	bl	800fc3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b088      	sub	sp, #32
 800c638:	af04      	add	r7, sp, #16
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	4611      	mov	r1, r2
 800c640:	461a      	mov	r2, r3
 800c642:	460b      	mov	r3, r1
 800c644:	80fb      	strh	r3, [r7, #6]
 800c646:	4613      	mov	r3, r2
 800c648:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c64a:	7979      	ldrb	r1, [r7, #5]
 800c64c:	2300      	movs	r3, #0
 800c64e:	9303      	str	r3, [sp, #12]
 800c650:	88fb      	ldrh	r3, [r7, #6]
 800c652:	9302      	str	r3, [sp, #8]
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	9301      	str	r3, [sp, #4]
 800c658:	2301      	movs	r3, #1
 800c65a:	9300      	str	r3, [sp, #0]
 800c65c:	2302      	movs	r3, #2
 800c65e:	2201      	movs	r2, #1
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f003 faec 	bl	800fc3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af04      	add	r7, sp, #16
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	4608      	mov	r0, r1
 800c67a:	4611      	mov	r1, r2
 800c67c:	461a      	mov	r2, r3
 800c67e:	4603      	mov	r3, r0
 800c680:	70fb      	strb	r3, [r7, #3]
 800c682:	460b      	mov	r3, r1
 800c684:	70bb      	strb	r3, [r7, #2]
 800c686:	4613      	mov	r3, r2
 800c688:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c68a:	7878      	ldrb	r0, [r7, #1]
 800c68c:	78ba      	ldrb	r2, [r7, #2]
 800c68e:	78f9      	ldrb	r1, [r7, #3]
 800c690:	8b3b      	ldrh	r3, [r7, #24]
 800c692:	9302      	str	r3, [sp, #8]
 800c694:	7d3b      	ldrb	r3, [r7, #20]
 800c696:	9301      	str	r3, [sp, #4]
 800c698:	7c3b      	ldrb	r3, [r7, #16]
 800c69a:	9300      	str	r3, [sp, #0]
 800c69c:	4603      	mov	r3, r0
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f003 fa7f 	bl	800fba2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b082      	sub	sp, #8
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c6ba:	78fb      	ldrb	r3, [r7, #3]
 800c6bc:	4619      	mov	r1, r3
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f003 fa9e 	bl	800fc00 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b084      	sub	sp, #16
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f836 	bl	800c74c <USBH_GetFreePipe>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c6e4:	89fb      	ldrh	r3, [r7, #14]
 800c6e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d00a      	beq.n	800c704 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c6ee:	78fa      	ldrb	r2, [r7, #3]
 800c6f0:	89fb      	ldrh	r3, [r7, #14]
 800c6f2:	f003 030f 	and.w	r3, r3, #15
 800c6f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c6fa:	6879      	ldr	r1, [r7, #4]
 800c6fc:	33e0      	adds	r3, #224	@ 0xe0
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	440b      	add	r3, r1
 800c702:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c704:	89fb      	ldrh	r3, [r7, #14]
 800c706:	b2db      	uxtb	r3, r3
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	460b      	mov	r3, r1
 800c71a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c71c:	78fb      	ldrb	r3, [r7, #3]
 800c71e:	2b0f      	cmp	r3, #15
 800c720:	d80d      	bhi.n	800c73e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c722:	78fb      	ldrb	r3, [r7, #3]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	33e0      	adds	r3, #224	@ 0xe0
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4413      	add	r3, r2
 800c72c:	685a      	ldr	r2, [r3, #4]
 800c72e:	78fb      	ldrb	r3, [r7, #3]
 800c730:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c734:	6879      	ldr	r1, [r7, #4]
 800c736:	33e0      	adds	r3, #224	@ 0xe0
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	440b      	add	r3, r1
 800c73c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c73e:	2300      	movs	r3, #0
}
 800c740:	4618      	mov	r0, r3
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c754:	2300      	movs	r3, #0
 800c756:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c758:	2300      	movs	r3, #0
 800c75a:	73fb      	strb	r3, [r7, #15]
 800c75c:	e00f      	b.n	800c77e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c75e:	7bfb      	ldrb	r3, [r7, #15]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	33e0      	adds	r3, #224	@ 0xe0
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	4413      	add	r3, r2
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d102      	bne.n	800c778 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c772:	7bfb      	ldrb	r3, [r7, #15]
 800c774:	b29b      	uxth	r3, r3
 800c776:	e007      	b.n	800c788 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c778:	7bfb      	ldrb	r3, [r7, #15]
 800c77a:	3301      	adds	r3, #1
 800c77c:	73fb      	strb	r3, [r7, #15]
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	2b0f      	cmp	r3, #15
 800c782:	d9ec      	bls.n	800c75e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c784:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <__NVIC_SetPriority>:
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	4603      	mov	r3, r0
 800c79c:	6039      	str	r1, [r7, #0]
 800c79e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c7a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	db0a      	blt.n	800c7be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	b2da      	uxtb	r2, r3
 800c7ac:	490c      	ldr	r1, [pc, #48]	@ (800c7e0 <__NVIC_SetPriority+0x4c>)
 800c7ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7b2:	0112      	lsls	r2, r2, #4
 800c7b4:	b2d2      	uxtb	r2, r2
 800c7b6:	440b      	add	r3, r1
 800c7b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c7bc:	e00a      	b.n	800c7d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	4908      	ldr	r1, [pc, #32]	@ (800c7e4 <__NVIC_SetPriority+0x50>)
 800c7c4:	79fb      	ldrb	r3, [r7, #7]
 800c7c6:	f003 030f 	and.w	r3, r3, #15
 800c7ca:	3b04      	subs	r3, #4
 800c7cc:	0112      	lsls	r2, r2, #4
 800c7ce:	b2d2      	uxtb	r2, r2
 800c7d0:	440b      	add	r3, r1
 800c7d2:	761a      	strb	r2, [r3, #24]
}
 800c7d4:	bf00      	nop
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr
 800c7e0:	e000e100 	.word	0xe000e100
 800c7e4:	e000ed00 	.word	0xe000ed00

0800c7e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c7ec:	4b05      	ldr	r3, [pc, #20]	@ (800c804 <SysTick_Handler+0x1c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c7f0:	f001 ff88 	bl	800e704 <xTaskGetSchedulerState>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d001      	beq.n	800c7fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c7fa:	f002 fd7d 	bl	800f2f8 <xPortSysTickHandler>
  }
}
 800c7fe:	bf00      	nop
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	e000e010 	.word	0xe000e010

0800c808 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c808:	b580      	push	{r7, lr}
 800c80a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c80c:	2100      	movs	r1, #0
 800c80e:	f06f 0004 	mvn.w	r0, #4
 800c812:	f7ff ffbf 	bl	800c794 <__NVIC_SetPriority>
#endif
}
 800c816:	bf00      	nop
 800c818:	bd80      	pop	{r7, pc}
	...

0800c81c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c822:	f3ef 8305 	mrs	r3, IPSR
 800c826:	603b      	str	r3, [r7, #0]
  return(result);
 800c828:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d003      	beq.n	800c836 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c82e:	f06f 0305 	mvn.w	r3, #5
 800c832:	607b      	str	r3, [r7, #4]
 800c834:	e00c      	b.n	800c850 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c836:	4b0a      	ldr	r3, [pc, #40]	@ (800c860 <osKernelInitialize+0x44>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d105      	bne.n	800c84a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c83e:	4b08      	ldr	r3, [pc, #32]	@ (800c860 <osKernelInitialize+0x44>)
 800c840:	2201      	movs	r2, #1
 800c842:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c844:	2300      	movs	r3, #0
 800c846:	607b      	str	r3, [r7, #4]
 800c848:	e002      	b.n	800c850 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c84a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c84e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c850:	687b      	ldr	r3, [r7, #4]
}
 800c852:	4618      	mov	r0, r3
 800c854:	370c      	adds	r7, #12
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	20006cec 	.word	0x20006cec

0800c864 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c86a:	f3ef 8305 	mrs	r3, IPSR
 800c86e:	603b      	str	r3, [r7, #0]
  return(result);
 800c870:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c872:	2b00      	cmp	r3, #0
 800c874:	d003      	beq.n	800c87e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c876:	f06f 0305 	mvn.w	r3, #5
 800c87a:	607b      	str	r3, [r7, #4]
 800c87c:	e010      	b.n	800c8a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c87e:	4b0b      	ldr	r3, [pc, #44]	@ (800c8ac <osKernelStart+0x48>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d109      	bne.n	800c89a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c886:	f7ff ffbf 	bl	800c808 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c88a:	4b08      	ldr	r3, [pc, #32]	@ (800c8ac <osKernelStart+0x48>)
 800c88c:	2202      	movs	r2, #2
 800c88e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c890:	f001 fac2 	bl	800de18 <vTaskStartScheduler>
      stat = osOK;
 800c894:	2300      	movs	r3, #0
 800c896:	607b      	str	r3, [r7, #4]
 800c898:	e002      	b.n	800c8a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c89a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c89e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c8a0:	687b      	ldr	r3, [r7, #4]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	20006cec 	.word	0x20006cec

0800c8b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b08e      	sub	sp, #56	@ 0x38
 800c8b4:	af04      	add	r7, sp, #16
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8c0:	f3ef 8305 	mrs	r3, IPSR
 800c8c4:	617b      	str	r3, [r7, #20]
  return(result);
 800c8c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d17e      	bne.n	800c9ca <osThreadNew+0x11a>
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d07b      	beq.n	800c9ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c8d2:	2380      	movs	r3, #128	@ 0x80
 800c8d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c8d6:	2318      	movs	r3, #24
 800c8d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c8de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d045      	beq.n	800c976 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d002      	beq.n	800c8f8 <osThreadNew+0x48>
        name = attr->name;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	699b      	ldr	r3, [r3, #24]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d002      	beq.n	800c906 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d008      	beq.n	800c91e <osThreadNew+0x6e>
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	2b38      	cmp	r3, #56	@ 0x38
 800c910:	d805      	bhi.n	800c91e <osThreadNew+0x6e>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	f003 0301 	and.w	r3, r3, #1
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d001      	beq.n	800c922 <osThreadNew+0x72>
        return (NULL);
 800c91e:	2300      	movs	r3, #0
 800c920:	e054      	b.n	800c9cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	695b      	ldr	r3, [r3, #20]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d003      	beq.n	800c932 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	089b      	lsrs	r3, r3, #2
 800c930:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00e      	beq.n	800c958 <osThreadNew+0xa8>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	2b5b      	cmp	r3, #91	@ 0x5b
 800c940:	d90a      	bls.n	800c958 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c946:	2b00      	cmp	r3, #0
 800c948:	d006      	beq.n	800c958 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	695b      	ldr	r3, [r3, #20]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d002      	beq.n	800c958 <osThreadNew+0xa8>
        mem = 1;
 800c952:	2301      	movs	r3, #1
 800c954:	61bb      	str	r3, [r7, #24]
 800c956:	e010      	b.n	800c97a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10c      	bne.n	800c97a <osThreadNew+0xca>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d108      	bne.n	800c97a <osThreadNew+0xca>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d104      	bne.n	800c97a <osThreadNew+0xca>
          mem = 0;
 800c970:	2300      	movs	r3, #0
 800c972:	61bb      	str	r3, [r7, #24]
 800c974:	e001      	b.n	800c97a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c976:	2300      	movs	r3, #0
 800c978:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d110      	bne.n	800c9a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c988:	9202      	str	r2, [sp, #8]
 800c98a:	9301      	str	r3, [sp, #4]
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	6a3a      	ldr	r2, [r7, #32]
 800c994:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f001 f862 	bl	800da60 <xTaskCreateStatic>
 800c99c:	4603      	mov	r3, r0
 800c99e:	613b      	str	r3, [r7, #16]
 800c9a0:	e013      	b.n	800c9ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d110      	bne.n	800c9ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c9a8:	6a3b      	ldr	r3, [r7, #32]
 800c9aa:	b29a      	uxth	r2, r3
 800c9ac:	f107 0310 	add.w	r3, r7, #16
 800c9b0:	9301      	str	r3, [sp, #4]
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	9300      	str	r3, [sp, #0]
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f001 f8b0 	bl	800db20 <xTaskCreate>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d001      	beq.n	800c9ca <osThreadNew+0x11a>
            hTask = NULL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c9ca:	693b      	ldr	r3, [r7, #16]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3728      	adds	r7, #40	@ 0x28
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9dc:	f3ef 8305 	mrs	r3, IPSR
 800c9e0:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d003      	beq.n	800c9f0 <osDelay+0x1c>
    stat = osErrorISR;
 800c9e8:	f06f 0305 	mvn.w	r3, #5
 800c9ec:	60fb      	str	r3, [r7, #12]
 800c9ee:	e007      	b.n	800ca00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d002      	beq.n	800ca00 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f001 f9d6 	bl	800ddac <vTaskDelay>
    }
  }

  return (stat);
 800ca00:	68fb      	ldr	r3, [r7, #12]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b08a      	sub	sp, #40	@ 0x28
 800ca0e:	af02      	add	r7, sp, #8
 800ca10:	60f8      	str	r0, [r7, #12]
 800ca12:	60b9      	str	r1, [r7, #8]
 800ca14:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ca16:	2300      	movs	r3, #0
 800ca18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca1a:	f3ef 8305 	mrs	r3, IPSR
 800ca1e:	613b      	str	r3, [r7, #16]
  return(result);
 800ca20:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d15f      	bne.n	800cae6 <osMessageQueueNew+0xdc>
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d05c      	beq.n	800cae6 <osMessageQueueNew+0xdc>
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d059      	beq.n	800cae6 <osMessageQueueNew+0xdc>
    mem = -1;
 800ca32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d029      	beq.n	800ca92 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d012      	beq.n	800ca6c <osMessageQueueNew+0x62>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	2b4f      	cmp	r3, #79	@ 0x4f
 800ca4c:	d90e      	bls.n	800ca6c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00a      	beq.n	800ca6c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	695a      	ldr	r2, [r3, #20]
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	68b9      	ldr	r1, [r7, #8]
 800ca5e:	fb01 f303 	mul.w	r3, r1, r3
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d302      	bcc.n	800ca6c <osMessageQueueNew+0x62>
        mem = 1;
 800ca66:	2301      	movs	r3, #1
 800ca68:	61bb      	str	r3, [r7, #24]
 800ca6a:	e014      	b.n	800ca96 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d110      	bne.n	800ca96 <osMessageQueueNew+0x8c>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10c      	bne.n	800ca96 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d108      	bne.n	800ca96 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	695b      	ldr	r3, [r3, #20]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d104      	bne.n	800ca96 <osMessageQueueNew+0x8c>
          mem = 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	61bb      	str	r3, [r7, #24]
 800ca90:	e001      	b.n	800ca96 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d10b      	bne.n	800cab4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	691a      	ldr	r2, [r3, #16]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	2100      	movs	r1, #0
 800caa6:	9100      	str	r1, [sp, #0]
 800caa8:	68b9      	ldr	r1, [r7, #8]
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f000 fa66 	bl	800cf7c <xQueueGenericCreateStatic>
 800cab0:	61f8      	str	r0, [r7, #28]
 800cab2:	e008      	b.n	800cac6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d105      	bne.n	800cac6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800caba:	2200      	movs	r2, #0
 800cabc:	68b9      	ldr	r1, [r7, #8]
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f000 fad9 	bl	800d076 <xQueueGenericCreate>
 800cac4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00c      	beq.n	800cae6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d003      	beq.n	800cada <osMessageQueueNew+0xd0>
        name = attr->name;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	617b      	str	r3, [r7, #20]
 800cad8:	e001      	b.n	800cade <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cada:	2300      	movs	r3, #0
 800cadc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cade:	6979      	ldr	r1, [r7, #20]
 800cae0:	69f8      	ldr	r0, [r7, #28]
 800cae2:	f000 ff5f 	bl	800d9a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cae6:	69fb      	ldr	r3, [r7, #28]
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3720      	adds	r7, #32
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b088      	sub	sp, #32
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	603b      	str	r3, [r7, #0]
 800cafc:	4613      	mov	r3, r2
 800cafe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb08:	f3ef 8305 	mrs	r3, IPSR
 800cb0c:	617b      	str	r3, [r7, #20]
  return(result);
 800cb0e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d028      	beq.n	800cb66 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d005      	beq.n	800cb26 <osMessageQueuePut+0x36>
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d002      	beq.n	800cb26 <osMessageQueuePut+0x36>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d003      	beq.n	800cb2e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cb26:	f06f 0303 	mvn.w	r3, #3
 800cb2a:	61fb      	str	r3, [r7, #28]
 800cb2c:	e038      	b.n	800cba0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cb32:	f107 0210 	add.w	r2, r7, #16
 800cb36:	2300      	movs	r3, #0
 800cb38:	68b9      	ldr	r1, [r7, #8]
 800cb3a:	69b8      	ldr	r0, [r7, #24]
 800cb3c:	f000 fbfc 	bl	800d338 <xQueueGenericSendFromISR>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d003      	beq.n	800cb4e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cb46:	f06f 0302 	mvn.w	r3, #2
 800cb4a:	61fb      	str	r3, [r7, #28]
 800cb4c:	e028      	b.n	800cba0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d025      	beq.n	800cba0 <osMessageQueuePut+0xb0>
 800cb54:	4b15      	ldr	r3, [pc, #84]	@ (800cbac <osMessageQueuePut+0xbc>)
 800cb56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb5a:	601a      	str	r2, [r3, #0]
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	f3bf 8f6f 	isb	sy
 800cb64:	e01c      	b.n	800cba0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d002      	beq.n	800cb72 <osMessageQueuePut+0x82>
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d103      	bne.n	800cb7a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cb72:	f06f 0303 	mvn.w	r3, #3
 800cb76:	61fb      	str	r3, [r7, #28]
 800cb78:	e012      	b.n	800cba0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	68b9      	ldr	r1, [r7, #8]
 800cb80:	69b8      	ldr	r0, [r7, #24]
 800cb82:	f000 fad7 	bl	800d134 <xQueueGenericSend>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d009      	beq.n	800cba0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d003      	beq.n	800cb9a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cb92:	f06f 0301 	mvn.w	r3, #1
 800cb96:	61fb      	str	r3, [r7, #28]
 800cb98:	e002      	b.n	800cba0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cb9a:	f06f 0302 	mvn.w	r3, #2
 800cb9e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cba0:	69fb      	ldr	r3, [r7, #28]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3720      	adds	r7, #32
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	e000ed04 	.word	0xe000ed04

0800cbb0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b088      	sub	sp, #32
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
 800cbbc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbc6:	f3ef 8305 	mrs	r3, IPSR
 800cbca:	617b      	str	r3, [r7, #20]
  return(result);
 800cbcc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d028      	beq.n	800cc24 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d005      	beq.n	800cbe4 <osMessageQueueGet+0x34>
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d002      	beq.n	800cbe4 <osMessageQueueGet+0x34>
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d003      	beq.n	800cbec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cbe4:	f06f 0303 	mvn.w	r3, #3
 800cbe8:	61fb      	str	r3, [r7, #28]
 800cbea:	e037      	b.n	800cc5c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cbec:	2300      	movs	r3, #0
 800cbee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cbf0:	f107 0310 	add.w	r3, r7, #16
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	68b9      	ldr	r1, [r7, #8]
 800cbf8:	69b8      	ldr	r0, [r7, #24]
 800cbfa:	f000 fd1d 	bl	800d638 <xQueueReceiveFromISR>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d003      	beq.n	800cc0c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cc04:	f06f 0302 	mvn.w	r3, #2
 800cc08:	61fb      	str	r3, [r7, #28]
 800cc0a:	e027      	b.n	800cc5c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d024      	beq.n	800cc5c <osMessageQueueGet+0xac>
 800cc12:	4b15      	ldr	r3, [pc, #84]	@ (800cc68 <osMessageQueueGet+0xb8>)
 800cc14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc18:	601a      	str	r2, [r3, #0]
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	e01b      	b.n	800cc5c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d002      	beq.n	800cc30 <osMessageQueueGet+0x80>
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d103      	bne.n	800cc38 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cc30:	f06f 0303 	mvn.w	r3, #3
 800cc34:	61fb      	str	r3, [r7, #28]
 800cc36:	e011      	b.n	800cc5c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	68b9      	ldr	r1, [r7, #8]
 800cc3c:	69b8      	ldr	r0, [r7, #24]
 800cc3e:	f000 fc19 	bl	800d474 <xQueueReceive>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d009      	beq.n	800cc5c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d003      	beq.n	800cc56 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cc4e:	f06f 0301 	mvn.w	r3, #1
 800cc52:	61fb      	str	r3, [r7, #28]
 800cc54:	e002      	b.n	800cc5c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cc56:	f06f 0302 	mvn.w	r3, #2
 800cc5a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cc5c:	69fb      	ldr	r3, [r7, #28]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3720      	adds	r7, #32
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	e000ed04 	.word	0xe000ed04

0800cc6c <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b08a      	sub	sp, #40	@ 0x28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800cc78:	6a3b      	ldr	r3, [r7, #32]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d102      	bne.n	800cc84 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc82:	e023      	b.n	800cccc <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc84:	f3ef 8305 	mrs	r3, IPSR
 800cc88:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc8a:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d019      	beq.n	800ccc4 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cc90:	f3ef 8211 	mrs	r2, BASEPRI
 800cc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	613a      	str	r2, [r7, #16]
 800cca6:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cca8:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800ccaa:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800ccac:	6a3b      	ldr	r3, [r7, #32]
 800ccae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ccb0:	6a3b      	ldr	r3, [r7, #32]
 800ccb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccb4:	1ad3      	subs	r3, r2, r3
 800ccb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ccc2:	e003      	b.n	800cccc <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800ccc4:	6a38      	ldr	r0, [r7, #32]
 800ccc6:	f000 fd39 	bl	800d73c <uxQueueSpacesAvailable>
 800ccca:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 800cccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3728      	adds	r7, #40	@ 0x28
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
	...

0800ccd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ccd8:	b480      	push	{r7}
 800ccda:	b085      	sub	sp, #20
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	4a07      	ldr	r2, [pc, #28]	@ (800cd04 <vApplicationGetIdleTaskMemory+0x2c>)
 800cce8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	4a06      	ldr	r2, [pc, #24]	@ (800cd08 <vApplicationGetIdleTaskMemory+0x30>)
 800ccee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2280      	movs	r2, #128	@ 0x80
 800ccf4:	601a      	str	r2, [r3, #0]
}
 800ccf6:	bf00      	nop
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	20006cf0 	.word	0x20006cf0
 800cd08:	20006d4c 	.word	0x20006d4c

0800cd0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	4a07      	ldr	r2, [pc, #28]	@ (800cd38 <vApplicationGetTimerTaskMemory+0x2c>)
 800cd1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	4a06      	ldr	r2, [pc, #24]	@ (800cd3c <vApplicationGetTimerTaskMemory+0x30>)
 800cd22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cd2a:	601a      	str	r2, [r3, #0]
}
 800cd2c:	bf00      	nop
 800cd2e:	3714      	adds	r7, #20
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr
 800cd38:	20006f4c 	.word	0x20006f4c
 800cd3c:	20006fa8 	.word	0x20006fa8

0800cd40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f103 0208 	add.w	r2, r3, #8
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cd58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f103 0208 	add.w	r2, r3, #8
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f103 0208 	add.w	r2, r3, #8
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd74:	bf00      	nop
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd8e:	bf00      	nop
 800cd90:	370c      	adds	r7, #12
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr

0800cd9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd9a:	b480      	push	{r7}
 800cd9c:	b085      	sub	sp, #20
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	689a      	ldr	r2, [r3, #8]
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	683a      	ldr	r2, [r7, #0]
 800cdbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	1c5a      	adds	r2, r3, #1
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	601a      	str	r2, [r3, #0]
}
 800cdd6:	bf00      	nop
 800cdd8:	3714      	adds	r7, #20
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr

0800cde2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cde2:	b480      	push	{r7}
 800cde4:	b085      	sub	sp, #20
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
 800cdea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cdf8:	d103      	bne.n	800ce02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	60fb      	str	r3, [r7, #12]
 800ce00:	e00c      	b.n	800ce1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	3308      	adds	r3, #8
 800ce06:	60fb      	str	r3, [r7, #12]
 800ce08:	e002      	b.n	800ce10 <vListInsert+0x2e>
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	60fb      	str	r3, [r7, #12]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d2f6      	bcs.n	800ce0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	685a      	ldr	r2, [r3, #4]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	683a      	ldr	r2, [r7, #0]
 800ce36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	1c5a      	adds	r2, r3, #1
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	601a      	str	r2, [r3, #0]
}
 800ce48:	bf00      	nop
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	691b      	ldr	r3, [r3, #16]
 800ce60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	6892      	ldr	r2, [r2, #8]
 800ce6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	6852      	ldr	r2, [r2, #4]
 800ce74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d103      	bne.n	800ce88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	689a      	ldr	r2, [r3, #8]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	1e5a      	subs	r2, r3, #1
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3714      	adds	r7, #20
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10b      	bne.n	800ced4 <xQueueGenericReset+0x2c>
	__asm volatile
 800cebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec0:	f383 8811 	msr	BASEPRI, r3
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	60bb      	str	r3, [r7, #8]
}
 800cece:	bf00      	nop
 800ced0:	bf00      	nop
 800ced2:	e7fd      	b.n	800ced0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ced4:	f002 f980 	bl	800f1d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cee0:	68f9      	ldr	r1, [r7, #12]
 800cee2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cee4:	fb01 f303 	mul.w	r3, r1, r3
 800cee8:	441a      	add	r2, r3
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2200      	movs	r2, #0
 800cef2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf04:	3b01      	subs	r3, #1
 800cf06:	68f9      	ldr	r1, [r7, #12]
 800cf08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cf0a:	fb01 f303 	mul.w	r3, r1, r3
 800cf0e:	441a      	add	r2, r3
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	22ff      	movs	r2, #255	@ 0xff
 800cf18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	22ff      	movs	r2, #255	@ 0xff
 800cf20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d114      	bne.n	800cf54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	691b      	ldr	r3, [r3, #16]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d01a      	beq.n	800cf68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	3310      	adds	r3, #16
 800cf36:	4618      	mov	r0, r3
 800cf38:	f001 f9fc 	bl	800e334 <xTaskRemoveFromEventList>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d012      	beq.n	800cf68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cf42:	4b0d      	ldr	r3, [pc, #52]	@ (800cf78 <xQueueGenericReset+0xd0>)
 800cf44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf48:	601a      	str	r2, [r3, #0]
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	e009      	b.n	800cf68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	3310      	adds	r3, #16
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7ff fef1 	bl	800cd40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3324      	adds	r3, #36	@ 0x24
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7ff feec 	bl	800cd40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf68:	f002 f968 	bl	800f23c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf6c:	2301      	movs	r3, #1
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	e000ed04 	.word	0xe000ed04

0800cf7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b08e      	sub	sp, #56	@ 0x38
 800cf80:	af02      	add	r7, sp, #8
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	607a      	str	r2, [r7, #4]
 800cf88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d10b      	bne.n	800cfa8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cf90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf94:	f383 8811 	msr	BASEPRI, r3
 800cf98:	f3bf 8f6f 	isb	sy
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cfa2:	bf00      	nop
 800cfa4:	bf00      	nop
 800cfa6:	e7fd      	b.n	800cfa4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d10b      	bne.n	800cfc6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb2:	f383 8811 	msr	BASEPRI, r3
 800cfb6:	f3bf 8f6f 	isb	sy
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cfc0:	bf00      	nop
 800cfc2:	bf00      	nop
 800cfc4:	e7fd      	b.n	800cfc2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d002      	beq.n	800cfd2 <xQueueGenericCreateStatic+0x56>
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d001      	beq.n	800cfd6 <xQueueGenericCreateStatic+0x5a>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e000      	b.n	800cfd8 <xQueueGenericCreateStatic+0x5c>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10b      	bne.n	800cff4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe0:	f383 8811 	msr	BASEPRI, r3
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	f3bf 8f4f 	dsb	sy
 800cfec:	623b      	str	r3, [r7, #32]
}
 800cfee:	bf00      	nop
 800cff0:	bf00      	nop
 800cff2:	e7fd      	b.n	800cff0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d102      	bne.n	800d000 <xQueueGenericCreateStatic+0x84>
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d101      	bne.n	800d004 <xQueueGenericCreateStatic+0x88>
 800d000:	2301      	movs	r3, #1
 800d002:	e000      	b.n	800d006 <xQueueGenericCreateStatic+0x8a>
 800d004:	2300      	movs	r3, #0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d10b      	bne.n	800d022 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00e:	f383 8811 	msr	BASEPRI, r3
 800d012:	f3bf 8f6f 	isb	sy
 800d016:	f3bf 8f4f 	dsb	sy
 800d01a:	61fb      	str	r3, [r7, #28]
}
 800d01c:	bf00      	nop
 800d01e:	bf00      	nop
 800d020:	e7fd      	b.n	800d01e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d022:	2350      	movs	r3, #80	@ 0x50
 800d024:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	2b50      	cmp	r3, #80	@ 0x50
 800d02a:	d00b      	beq.n	800d044 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d030:	f383 8811 	msr	BASEPRI, r3
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	61bb      	str	r3, [r7, #24]
}
 800d03e:	bf00      	nop
 800d040:	bf00      	nop
 800d042:	e7fd      	b.n	800d040 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d044:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d00d      	beq.n	800d06c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d052:	2201      	movs	r2, #1
 800d054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d058:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d05e:	9300      	str	r3, [sp, #0]
 800d060:	4613      	mov	r3, r2
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	68b9      	ldr	r1, [r7, #8]
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	f000 f840 	bl	800d0ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d06e:	4618      	mov	r0, r3
 800d070:	3730      	adds	r7, #48	@ 0x30
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}

0800d076 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d076:	b580      	push	{r7, lr}
 800d078:	b08a      	sub	sp, #40	@ 0x28
 800d07a:	af02      	add	r7, sp, #8
 800d07c:	60f8      	str	r0, [r7, #12]
 800d07e:	60b9      	str	r1, [r7, #8]
 800d080:	4613      	mov	r3, r2
 800d082:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d10b      	bne.n	800d0a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d08e:	f383 8811 	msr	BASEPRI, r3
 800d092:	f3bf 8f6f 	isb	sy
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	613b      	str	r3, [r7, #16]
}
 800d09c:	bf00      	nop
 800d09e:	bf00      	nop
 800d0a0:	e7fd      	b.n	800d09e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	fb02 f303 	mul.w	r3, r2, r3
 800d0aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	3350      	adds	r3, #80	@ 0x50
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f002 f9b3 	bl	800f41c <pvPortMalloc>
 800d0b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d011      	beq.n	800d0e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	3350      	adds	r3, #80	@ 0x50
 800d0c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d0d0:	79fa      	ldrb	r2, [r7, #7]
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	9300      	str	r3, [sp, #0]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	697a      	ldr	r2, [r7, #20]
 800d0da:	68b9      	ldr	r1, [r7, #8]
 800d0dc:	68f8      	ldr	r0, [r7, #12]
 800d0de:	f000 f805 	bl	800d0ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d0e2:	69bb      	ldr	r3, [r7, #24]
	}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3720      	adds	r7, #32
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
 800d0f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d103      	bne.n	800d108 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	69ba      	ldr	r2, [r7, #24]
 800d104:	601a      	str	r2, [r3, #0]
 800d106:	e002      	b.n	800d10e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d10e:	69bb      	ldr	r3, [r7, #24]
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	68ba      	ldr	r2, [r7, #8]
 800d118:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d11a:	2101      	movs	r1, #1
 800d11c:	69b8      	ldr	r0, [r7, #24]
 800d11e:	f7ff fec3 	bl	800cea8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	78fa      	ldrb	r2, [r7, #3]
 800d126:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d12a:	bf00      	nop
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
	...

0800d134 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b08e      	sub	sp, #56	@ 0x38
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	607a      	str	r2, [r7, #4]
 800d140:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d142:	2300      	movs	r3, #0
 800d144:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10b      	bne.n	800d168 <xQueueGenericSend+0x34>
	__asm volatile
 800d150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d154:	f383 8811 	msr	BASEPRI, r3
 800d158:	f3bf 8f6f 	isb	sy
 800d15c:	f3bf 8f4f 	dsb	sy
 800d160:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d162:	bf00      	nop
 800d164:	bf00      	nop
 800d166:	e7fd      	b.n	800d164 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d103      	bne.n	800d176 <xQueueGenericSend+0x42>
 800d16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d172:	2b00      	cmp	r3, #0
 800d174:	d101      	bne.n	800d17a <xQueueGenericSend+0x46>
 800d176:	2301      	movs	r3, #1
 800d178:	e000      	b.n	800d17c <xQueueGenericSend+0x48>
 800d17a:	2300      	movs	r3, #0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10b      	bne.n	800d198 <xQueueGenericSend+0x64>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d192:	bf00      	nop
 800d194:	bf00      	nop
 800d196:	e7fd      	b.n	800d194 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	2b02      	cmp	r3, #2
 800d19c:	d103      	bne.n	800d1a6 <xQueueGenericSend+0x72>
 800d19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d101      	bne.n	800d1aa <xQueueGenericSend+0x76>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e000      	b.n	800d1ac <xQueueGenericSend+0x78>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d10b      	bne.n	800d1c8 <xQueueGenericSend+0x94>
	__asm volatile
 800d1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1b4:	f383 8811 	msr	BASEPRI, r3
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	f3bf 8f4f 	dsb	sy
 800d1c0:	623b      	str	r3, [r7, #32]
}
 800d1c2:	bf00      	nop
 800d1c4:	bf00      	nop
 800d1c6:	e7fd      	b.n	800d1c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1c8:	f001 fa9c 	bl	800e704 <xTaskGetSchedulerState>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d102      	bne.n	800d1d8 <xQueueGenericSend+0xa4>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d101      	bne.n	800d1dc <xQueueGenericSend+0xa8>
 800d1d8:	2301      	movs	r3, #1
 800d1da:	e000      	b.n	800d1de <xQueueGenericSend+0xaa>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d10b      	bne.n	800d1fa <xQueueGenericSend+0xc6>
	__asm volatile
 800d1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e6:	f383 8811 	msr	BASEPRI, r3
 800d1ea:	f3bf 8f6f 	isb	sy
 800d1ee:	f3bf 8f4f 	dsb	sy
 800d1f2:	61fb      	str	r3, [r7, #28]
}
 800d1f4:	bf00      	nop
 800d1f6:	bf00      	nop
 800d1f8:	e7fd      	b.n	800d1f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1fa:	f001 ffed 	bl	800f1d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d206:	429a      	cmp	r2, r3
 800d208:	d302      	bcc.n	800d210 <xQueueGenericSend+0xdc>
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d129      	bne.n	800d264 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	68b9      	ldr	r1, [r7, #8]
 800d214:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d216:	f000 fab5 	bl	800d784 <prvCopyDataToQueue>
 800d21a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d220:	2b00      	cmp	r3, #0
 800d222:	d010      	beq.n	800d246 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d226:	3324      	adds	r3, #36	@ 0x24
 800d228:	4618      	mov	r0, r3
 800d22a:	f001 f883 	bl	800e334 <xTaskRemoveFromEventList>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d013      	beq.n	800d25c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d234:	4b3f      	ldr	r3, [pc, #252]	@ (800d334 <xQueueGenericSend+0x200>)
 800d236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d23a:	601a      	str	r2, [r3, #0]
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	e00a      	b.n	800d25c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d007      	beq.n	800d25c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d24c:	4b39      	ldr	r3, [pc, #228]	@ (800d334 <xQueueGenericSend+0x200>)
 800d24e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d252:	601a      	str	r2, [r3, #0]
 800d254:	f3bf 8f4f 	dsb	sy
 800d258:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d25c:	f001 ffee 	bl	800f23c <vPortExitCritical>
				return pdPASS;
 800d260:	2301      	movs	r3, #1
 800d262:	e063      	b.n	800d32c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d103      	bne.n	800d272 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d26a:	f001 ffe7 	bl	800f23c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d26e:	2300      	movs	r3, #0
 800d270:	e05c      	b.n	800d32c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d274:	2b00      	cmp	r3, #0
 800d276:	d106      	bne.n	800d286 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d278:	f107 0314 	add.w	r3, r7, #20
 800d27c:	4618      	mov	r0, r3
 800d27e:	f001 f8e5 	bl	800e44c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d282:	2301      	movs	r3, #1
 800d284:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d286:	f001 ffd9 	bl	800f23c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d28a:	f000 fe2d 	bl	800dee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d28e:	f001 ffa3 	bl	800f1d8 <vPortEnterCritical>
 800d292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d294:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d298:	b25b      	sxtb	r3, r3
 800d29a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d29e:	d103      	bne.n	800d2a8 <xQueueGenericSend+0x174>
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d2ae:	b25b      	sxtb	r3, r3
 800d2b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d2b4:	d103      	bne.n	800d2be <xQueueGenericSend+0x18a>
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d2be:	f001 ffbd 	bl	800f23c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2c2:	1d3a      	adds	r2, r7, #4
 800d2c4:	f107 0314 	add.w	r3, r7, #20
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f001 f8d4 	bl	800e478 <xTaskCheckForTimeOut>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d124      	bne.n	800d320 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d2d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2d8:	f000 fb4c 	bl	800d974 <prvIsQueueFull>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d018      	beq.n	800d314 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e4:	3310      	adds	r3, #16
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	4611      	mov	r1, r2
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f000 ffd0 	bl	800e290 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2f2:	f000 fad7 	bl	800d8a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2f6:	f000 fe05 	bl	800df04 <xTaskResumeAll>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f47f af7c 	bne.w	800d1fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d302:	4b0c      	ldr	r3, [pc, #48]	@ (800d334 <xQueueGenericSend+0x200>)
 800d304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	e772      	b.n	800d1fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d314:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d316:	f000 fac5 	bl	800d8a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d31a:	f000 fdf3 	bl	800df04 <xTaskResumeAll>
 800d31e:	e76c      	b.n	800d1fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d320:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d322:	f000 fabf 	bl	800d8a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d326:	f000 fded 	bl	800df04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d32a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3738      	adds	r7, #56	@ 0x38
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	e000ed04 	.word	0xe000ed04

0800d338 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b090      	sub	sp, #64	@ 0x40
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	607a      	str	r2, [r7, #4]
 800d344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d10b      	bne.n	800d368 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d362:	bf00      	nop
 800d364:	bf00      	nop
 800d366:	e7fd      	b.n	800d364 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d103      	bne.n	800d376 <xQueueGenericSendFromISR+0x3e>
 800d36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d372:	2b00      	cmp	r3, #0
 800d374:	d101      	bne.n	800d37a <xQueueGenericSendFromISR+0x42>
 800d376:	2301      	movs	r3, #1
 800d378:	e000      	b.n	800d37c <xQueueGenericSendFromISR+0x44>
 800d37a:	2300      	movs	r3, #0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10b      	bne.n	800d398 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d384:	f383 8811 	msr	BASEPRI, r3
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	f3bf 8f4f 	dsb	sy
 800d390:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d392:	bf00      	nop
 800d394:	bf00      	nop
 800d396:	e7fd      	b.n	800d394 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	2b02      	cmp	r3, #2
 800d39c:	d103      	bne.n	800d3a6 <xQueueGenericSendFromISR+0x6e>
 800d39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d101      	bne.n	800d3aa <xQueueGenericSendFromISR+0x72>
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	e000      	b.n	800d3ac <xQueueGenericSendFromISR+0x74>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d10b      	bne.n	800d3c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	623b      	str	r3, [r7, #32]
}
 800d3c2:	bf00      	nop
 800d3c4:	bf00      	nop
 800d3c6:	e7fd      	b.n	800d3c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3c8:	f001 ffe6 	bl	800f398 <vPortValidateInterruptPriority>
	__asm volatile
 800d3cc:	f3ef 8211 	mrs	r2, BASEPRI
 800d3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d4:	f383 8811 	msr	BASEPRI, r3
 800d3d8:	f3bf 8f6f 	isb	sy
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	61fa      	str	r2, [r7, #28]
 800d3e2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d3e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d302      	bcc.n	800d3fa <xQueueGenericSendFromISR+0xc2>
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d12f      	bne.n	800d45a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d400:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d408:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d40a:	683a      	ldr	r2, [r7, #0]
 800d40c:	68b9      	ldr	r1, [r7, #8]
 800d40e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d410:	f000 f9b8 	bl	800d784 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d414:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d418:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d41c:	d112      	bne.n	800d444 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d422:	2b00      	cmp	r3, #0
 800d424:	d016      	beq.n	800d454 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d428:	3324      	adds	r3, #36	@ 0x24
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 ff82 	bl	800e334 <xTaskRemoveFromEventList>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00e      	beq.n	800d454 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d00b      	beq.n	800d454 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2201      	movs	r2, #1
 800d440:	601a      	str	r2, [r3, #0]
 800d442:	e007      	b.n	800d454 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d444:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d448:	3301      	adds	r3, #1
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	b25a      	sxtb	r2, r3
 800d44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d454:	2301      	movs	r3, #1
 800d456:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d458:	e001      	b.n	800d45e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d45a:	2300      	movs	r3, #0
 800d45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d45e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d460:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	f383 8811 	msr	BASEPRI, r3
}
 800d468:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d46a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3740      	adds	r7, #64	@ 0x40
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b08c      	sub	sp, #48	@ 0x30
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d480:	2300      	movs	r3, #0
 800d482:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10b      	bne.n	800d4a6 <xQueueReceive+0x32>
	__asm volatile
 800d48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	623b      	str	r3, [r7, #32]
}
 800d4a0:	bf00      	nop
 800d4a2:	bf00      	nop
 800d4a4:	e7fd      	b.n	800d4a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d103      	bne.n	800d4b4 <xQueueReceive+0x40>
 800d4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d101      	bne.n	800d4b8 <xQueueReceive+0x44>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	e000      	b.n	800d4ba <xQueueReceive+0x46>
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d10b      	bne.n	800d4d6 <xQueueReceive+0x62>
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	61fb      	str	r3, [r7, #28]
}
 800d4d0:	bf00      	nop
 800d4d2:	bf00      	nop
 800d4d4:	e7fd      	b.n	800d4d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4d6:	f001 f915 	bl	800e704 <xTaskGetSchedulerState>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d102      	bne.n	800d4e6 <xQueueReceive+0x72>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <xQueueReceive+0x76>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e000      	b.n	800d4ec <xQueueReceive+0x78>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10b      	bne.n	800d508 <xQueueReceive+0x94>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	61bb      	str	r3, [r7, #24]
}
 800d502:	bf00      	nop
 800d504:	bf00      	nop
 800d506:	e7fd      	b.n	800d504 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d508:	f001 fe66 	bl	800f1d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d510:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d514:	2b00      	cmp	r3, #0
 800d516:	d01f      	beq.n	800d558 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d518:	68b9      	ldr	r1, [r7, #8]
 800d51a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d51c:	f000 f99c 	bl	800d858 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d522:	1e5a      	subs	r2, r3, #1
 800d524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d526:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d52a:	691b      	ldr	r3, [r3, #16]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00f      	beq.n	800d550 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d532:	3310      	adds	r3, #16
 800d534:	4618      	mov	r0, r3
 800d536:	f000 fefd 	bl	800e334 <xTaskRemoveFromEventList>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d007      	beq.n	800d550 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d540:	4b3c      	ldr	r3, [pc, #240]	@ (800d634 <xQueueReceive+0x1c0>)
 800d542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d546:	601a      	str	r2, [r3, #0]
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d550:	f001 fe74 	bl	800f23c <vPortExitCritical>
				return pdPASS;
 800d554:	2301      	movs	r3, #1
 800d556:	e069      	b.n	800d62c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d103      	bne.n	800d566 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d55e:	f001 fe6d 	bl	800f23c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d562:	2300      	movs	r3, #0
 800d564:	e062      	b.n	800d62c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d106      	bne.n	800d57a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d56c:	f107 0310 	add.w	r3, r7, #16
 800d570:	4618      	mov	r0, r3
 800d572:	f000 ff6b 	bl	800e44c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d576:	2301      	movs	r3, #1
 800d578:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d57a:	f001 fe5f 	bl	800f23c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d57e:	f000 fcb3 	bl	800dee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d582:	f001 fe29 	bl	800f1d8 <vPortEnterCritical>
 800d586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d588:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d58c:	b25b      	sxtb	r3, r3
 800d58e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d592:	d103      	bne.n	800d59c <xQueueReceive+0x128>
 800d594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d596:	2200      	movs	r2, #0
 800d598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5a2:	b25b      	sxtb	r3, r3
 800d5a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d5a8:	d103      	bne.n	800d5b2 <xQueueReceive+0x13e>
 800d5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d5b2:	f001 fe43 	bl	800f23c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5b6:	1d3a      	adds	r2, r7, #4
 800d5b8:	f107 0310 	add.w	r3, r7, #16
 800d5bc:	4611      	mov	r1, r2
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f000 ff5a 	bl	800e478 <xTaskCheckForTimeOut>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d123      	bne.n	800d612 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5cc:	f000 f9bc 	bl	800d948 <prvIsQueueEmpty>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d017      	beq.n	800d606 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d8:	3324      	adds	r3, #36	@ 0x24
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	4611      	mov	r1, r2
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f000 fe56 	bl	800e290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5e6:	f000 f95d 	bl	800d8a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5ea:	f000 fc8b 	bl	800df04 <xTaskResumeAll>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d189      	bne.n	800d508 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d5f4:	4b0f      	ldr	r3, [pc, #60]	@ (800d634 <xQueueReceive+0x1c0>)
 800d5f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5fa:	601a      	str	r2, [r3, #0]
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	f3bf 8f6f 	isb	sy
 800d604:	e780      	b.n	800d508 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d608:	f000 f94c 	bl	800d8a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d60c:	f000 fc7a 	bl	800df04 <xTaskResumeAll>
 800d610:	e77a      	b.n	800d508 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d614:	f000 f946 	bl	800d8a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d618:	f000 fc74 	bl	800df04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d61c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d61e:	f000 f993 	bl	800d948 <prvIsQueueEmpty>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	f43f af6f 	beq.w	800d508 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d62a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3730      	adds	r7, #48	@ 0x30
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	e000ed04 	.word	0xe000ed04

0800d638 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b08e      	sub	sp, #56	@ 0x38
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d10b      	bne.n	800d666 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	623b      	str	r3, [r7, #32]
}
 800d660:	bf00      	nop
 800d662:	bf00      	nop
 800d664:	e7fd      	b.n	800d662 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d103      	bne.n	800d674 <xQueueReceiveFromISR+0x3c>
 800d66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d66e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d670:	2b00      	cmp	r3, #0
 800d672:	d101      	bne.n	800d678 <xQueueReceiveFromISR+0x40>
 800d674:	2301      	movs	r3, #1
 800d676:	e000      	b.n	800d67a <xQueueReceiveFromISR+0x42>
 800d678:	2300      	movs	r3, #0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10b      	bne.n	800d696 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	61fb      	str	r3, [r7, #28]
}
 800d690:	bf00      	nop
 800d692:	bf00      	nop
 800d694:	e7fd      	b.n	800d692 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d696:	f001 fe7f 	bl	800f398 <vPortValidateInterruptPriority>
	__asm volatile
 800d69a:	f3ef 8211 	mrs	r2, BASEPRI
 800d69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	61ba      	str	r2, [r7, #24]
 800d6b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d6b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d02f      	beq.n	800d722 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d6c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d6cc:	68b9      	ldr	r1, [r7, #8]
 800d6ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6d0:	f000 f8c2 	bl	800d858 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d6:	1e5a      	subs	r2, r3, #1
 800d6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d6dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d6e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d6e4:	d112      	bne.n	800d70c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e8:	691b      	ldr	r3, [r3, #16]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d016      	beq.n	800d71c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f0:	3310      	adds	r3, #16
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f000 fe1e 	bl	800e334 <xTaskRemoveFromEventList>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00e      	beq.n	800d71c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d00b      	beq.n	800d71c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2201      	movs	r2, #1
 800d708:	601a      	str	r2, [r3, #0]
 800d70a:	e007      	b.n	800d71c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d70c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d710:	3301      	adds	r3, #1
 800d712:	b2db      	uxtb	r3, r3
 800d714:	b25a      	sxtb	r2, r3
 800d716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d71c:	2301      	movs	r3, #1
 800d71e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d720:	e001      	b.n	800d726 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d722:	2300      	movs	r3, #0
 800d724:	637b      	str	r3, [r7, #52]	@ 0x34
 800d726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d728:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	f383 8811 	msr	BASEPRI, r3
}
 800d730:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d734:	4618      	mov	r0, r3
 800d736:	3738      	adds	r7, #56	@ 0x38
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b086      	sub	sp, #24
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d10b      	bne.n	800d766 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800d74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	60fb      	str	r3, [r7, #12]
}
 800d760:	bf00      	nop
 800d762:	bf00      	nop
 800d764:	e7fd      	b.n	800d762 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800d766:	f001 fd37 	bl	800f1d8 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d772:	1ad3      	subs	r3, r2, r3
 800d774:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d776:	f001 fd61 	bl	800f23c <vPortExitCritical>

	return uxReturn;
 800d77a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d77c:	4618      	mov	r0, r3
 800d77e:	3718      	adds	r7, #24
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b086      	sub	sp, #24
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d790:	2300      	movs	r3, #0
 800d792:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d798:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d10d      	bne.n	800d7be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d14d      	bne.n	800d846 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f000 ffc6 	bl	800e740 <xTaskPriorityDisinherit>
 800d7b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	609a      	str	r2, [r3, #8]
 800d7bc:	e043      	b.n	800d846 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d119      	bne.n	800d7f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6858      	ldr	r0, [r3, #4]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	68b9      	ldr	r1, [r7, #8]
 800d7d0:	f00f fb43 	bl	801ce5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	685a      	ldr	r2, [r3, #4]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7dc:	441a      	add	r2, r3
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	685a      	ldr	r2, [r3, #4]
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d32b      	bcc.n	800d846 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	605a      	str	r2, [r3, #4]
 800d7f6:	e026      	b.n	800d846 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	68d8      	ldr	r0, [r3, #12]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d800:	461a      	mov	r2, r3
 800d802:	68b9      	ldr	r1, [r7, #8]
 800d804:	f00f fb29 	bl	801ce5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	68da      	ldr	r2, [r3, #12]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d810:	425b      	negs	r3, r3
 800d812:	441a      	add	r2, r3
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	68da      	ldr	r2, [r3, #12]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	429a      	cmp	r2, r3
 800d822:	d207      	bcs.n	800d834 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	689a      	ldr	r2, [r3, #8]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d82c:	425b      	negs	r3, r3
 800d82e:	441a      	add	r2, r3
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b02      	cmp	r3, #2
 800d838:	d105      	bne.n	800d846 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d002      	beq.n	800d846 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	3b01      	subs	r3, #1
 800d844:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	1c5a      	adds	r2, r3, #1
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d84e:	697b      	ldr	r3, [r7, #20]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3718      	adds	r7, #24
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d866:	2b00      	cmp	r3, #0
 800d868:	d018      	beq.n	800d89c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	68da      	ldr	r2, [r3, #12]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d872:	441a      	add	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	68da      	ldr	r2, [r3, #12]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	429a      	cmp	r2, r3
 800d882:	d303      	bcc.n	800d88c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	68d9      	ldr	r1, [r3, #12]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d894:	461a      	mov	r2, r3
 800d896:	6838      	ldr	r0, [r7, #0]
 800d898:	f00f fadf 	bl	801ce5a <memcpy>
	}
}
 800d89c:	bf00      	nop
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d8ac:	f001 fc94 	bl	800f1d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8b8:	e011      	b.n	800d8de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d012      	beq.n	800d8e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	3324      	adds	r3, #36	@ 0x24
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f000 fd34 	bl	800e334 <xTaskRemoveFromEventList>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d001      	beq.n	800d8d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d8d2:	f000 fe35 	bl	800e540 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d8d6:	7bfb      	ldrb	r3, [r7, #15]
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	dce9      	bgt.n	800d8ba <prvUnlockQueue+0x16>
 800d8e6:	e000      	b.n	800d8ea <prvUnlockQueue+0x46>
					break;
 800d8e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	22ff      	movs	r2, #255	@ 0xff
 800d8ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d8f2:	f001 fca3 	bl	800f23c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d8f6:	f001 fc6f 	bl	800f1d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d900:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d902:	e011      	b.n	800d928 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	691b      	ldr	r3, [r3, #16]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d012      	beq.n	800d932 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	3310      	adds	r3, #16
 800d910:	4618      	mov	r0, r3
 800d912:	f000 fd0f 	bl	800e334 <xTaskRemoveFromEventList>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d001      	beq.n	800d920 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d91c:	f000 fe10 	bl	800e540 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d920:	7bbb      	ldrb	r3, [r7, #14]
 800d922:	3b01      	subs	r3, #1
 800d924:	b2db      	uxtb	r3, r3
 800d926:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	dce9      	bgt.n	800d904 <prvUnlockQueue+0x60>
 800d930:	e000      	b.n	800d934 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d932:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	22ff      	movs	r2, #255	@ 0xff
 800d938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d93c:	f001 fc7e 	bl	800f23c <vPortExitCritical>
}
 800d940:	bf00      	nop
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d950:	f001 fc42 	bl	800f1d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d102      	bne.n	800d962 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d95c:	2301      	movs	r3, #1
 800d95e:	60fb      	str	r3, [r7, #12]
 800d960:	e001      	b.n	800d966 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d962:	2300      	movs	r3, #0
 800d964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d966:	f001 fc69 	bl	800f23c <vPortExitCritical>

	return xReturn;
 800d96a:	68fb      	ldr	r3, [r7, #12]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3710      	adds	r7, #16
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d97c:	f001 fc2c 	bl	800f1d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d988:	429a      	cmp	r2, r3
 800d98a:	d102      	bne.n	800d992 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d98c:	2301      	movs	r3, #1
 800d98e:	60fb      	str	r3, [r7, #12]
 800d990:	e001      	b.n	800d996 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d992:	2300      	movs	r3, #0
 800d994:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d996:	f001 fc51 	bl	800f23c <vPortExitCritical>

	return xReturn;
 800d99a:	68fb      	ldr	r3, [r7, #12]
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3710      	adds	r7, #16
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	60fb      	str	r3, [r7, #12]
 800d9b2:	e014      	b.n	800d9de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d9b4:	4a0f      	ldr	r2, [pc, #60]	@ (800d9f4 <vQueueAddToRegistry+0x50>)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d10b      	bne.n	800d9d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d9c0:	490c      	ldr	r1, [pc, #48]	@ (800d9f4 <vQueueAddToRegistry+0x50>)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	683a      	ldr	r2, [r7, #0]
 800d9c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d9ca:	4a0a      	ldr	r2, [pc, #40]	@ (800d9f4 <vQueueAddToRegistry+0x50>)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	00db      	lsls	r3, r3, #3
 800d9d0:	4413      	add	r3, r2
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d9d6:	e006      	b.n	800d9e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	60fb      	str	r3, [r7, #12]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2b07      	cmp	r3, #7
 800d9e2:	d9e7      	bls.n	800d9b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d9e4:	bf00      	nop
 800d9e6:	bf00      	nop
 800d9e8:	3714      	adds	r7, #20
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop
 800d9f4:	200073a8 	.word	0x200073a8

0800d9f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b086      	sub	sp, #24
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800da08:	f001 fbe6 	bl	800f1d8 <vPortEnterCritical>
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da12:	b25b      	sxtb	r3, r3
 800da14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da18:	d103      	bne.n	800da22 <vQueueWaitForMessageRestricted+0x2a>
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da28:	b25b      	sxtb	r3, r3
 800da2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da2e:	d103      	bne.n	800da38 <vQueueWaitForMessageRestricted+0x40>
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	2200      	movs	r2, #0
 800da34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da38:	f001 fc00 	bl	800f23c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da40:	2b00      	cmp	r3, #0
 800da42:	d106      	bne.n	800da52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	3324      	adds	r3, #36	@ 0x24
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	68b9      	ldr	r1, [r7, #8]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f000 fc45 	bl	800e2dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800da52:	6978      	ldr	r0, [r7, #20]
 800da54:	f7ff ff26 	bl	800d8a4 <prvUnlockQueue>
	}
 800da58:	bf00      	nop
 800da5a:	3718      	adds	r7, #24
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da60:	b580      	push	{r7, lr}
 800da62:	b08e      	sub	sp, #56	@ 0x38
 800da64:	af04      	add	r7, sp, #16
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	607a      	str	r2, [r7, #4]
 800da6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800da6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da70:	2b00      	cmp	r3, #0
 800da72:	d10b      	bne.n	800da8c <xTaskCreateStatic+0x2c>
	__asm volatile
 800da74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da78:	f383 8811 	msr	BASEPRI, r3
 800da7c:	f3bf 8f6f 	isb	sy
 800da80:	f3bf 8f4f 	dsb	sy
 800da84:	623b      	str	r3, [r7, #32]
}
 800da86:	bf00      	nop
 800da88:	bf00      	nop
 800da8a:	e7fd      	b.n	800da88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800da8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d10b      	bne.n	800daaa <xTaskCreateStatic+0x4a>
	__asm volatile
 800da92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da96:	f383 8811 	msr	BASEPRI, r3
 800da9a:	f3bf 8f6f 	isb	sy
 800da9e:	f3bf 8f4f 	dsb	sy
 800daa2:	61fb      	str	r3, [r7, #28]
}
 800daa4:	bf00      	nop
 800daa6:	bf00      	nop
 800daa8:	e7fd      	b.n	800daa6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800daaa:	235c      	movs	r3, #92	@ 0x5c
 800daac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	2b5c      	cmp	r3, #92	@ 0x5c
 800dab2:	d00b      	beq.n	800dacc <xTaskCreateStatic+0x6c>
	__asm volatile
 800dab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	61bb      	str	r3, [r7, #24]
}
 800dac6:	bf00      	nop
 800dac8:	bf00      	nop
 800daca:	e7fd      	b.n	800dac8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dacc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d01e      	beq.n	800db12 <xTaskCreateStatic+0xb2>
 800dad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d01b      	beq.n	800db12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dadc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dae0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dae2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dae6:	2202      	movs	r2, #2
 800dae8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800daec:	2300      	movs	r3, #0
 800daee:	9303      	str	r3, [sp, #12]
 800daf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf2:	9302      	str	r3, [sp, #8]
 800daf4:	f107 0314 	add.w	r3, r7, #20
 800daf8:	9301      	str	r3, [sp, #4]
 800dafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	68b9      	ldr	r1, [r7, #8]
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f000 f850 	bl	800dbaa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800db0c:	f000 f8de 	bl	800dccc <prvAddNewTaskToReadyList>
 800db10:	e001      	b.n	800db16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800db12:	2300      	movs	r3, #0
 800db14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db16:	697b      	ldr	r3, [r7, #20]
	}
 800db18:	4618      	mov	r0, r3
 800db1a:	3728      	adds	r7, #40	@ 0x28
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db20:	b580      	push	{r7, lr}
 800db22:	b08c      	sub	sp, #48	@ 0x30
 800db24:	af04      	add	r7, sp, #16
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	603b      	str	r3, [r7, #0]
 800db2c:	4613      	mov	r3, r2
 800db2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db30:	88fb      	ldrh	r3, [r7, #6]
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	4618      	mov	r0, r3
 800db36:	f001 fc71 	bl	800f41c <pvPortMalloc>
 800db3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00e      	beq.n	800db60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db42:	205c      	movs	r0, #92	@ 0x5c
 800db44:	f001 fc6a 	bl	800f41c <pvPortMalloc>
 800db48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d003      	beq.n	800db58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	697a      	ldr	r2, [r7, #20]
 800db54:	631a      	str	r2, [r3, #48]	@ 0x30
 800db56:	e005      	b.n	800db64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db58:	6978      	ldr	r0, [r7, #20]
 800db5a:	f001 fd2d 	bl	800f5b8 <vPortFree>
 800db5e:	e001      	b.n	800db64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db60:	2300      	movs	r3, #0
 800db62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d017      	beq.n	800db9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db72:	88fa      	ldrh	r2, [r7, #6]
 800db74:	2300      	movs	r3, #0
 800db76:	9303      	str	r3, [sp, #12]
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	9302      	str	r3, [sp, #8]
 800db7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db7e:	9301      	str	r3, [sp, #4]
 800db80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	68b9      	ldr	r1, [r7, #8]
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f000 f80e 	bl	800dbaa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db8e:	69f8      	ldr	r0, [r7, #28]
 800db90:	f000 f89c 	bl	800dccc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db94:	2301      	movs	r3, #1
 800db96:	61bb      	str	r3, [r7, #24]
 800db98:	e002      	b.n	800dba0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dba0:	69bb      	ldr	r3, [r7, #24]
	}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3720      	adds	r7, #32
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b088      	sub	sp, #32
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	60f8      	str	r0, [r7, #12]
 800dbb2:	60b9      	str	r1, [r7, #8]
 800dbb4:	607a      	str	r2, [r7, #4]
 800dbb6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	21a5      	movs	r1, #165	@ 0xa5
 800dbc4:	f00f f880 	bl	801ccc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	4413      	add	r3, r2
 800dbd8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	f023 0307 	bic.w	r3, r3, #7
 800dbe0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	f003 0307 	and.w	r3, r3, #7
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00b      	beq.n	800dc04 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800dbec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf0:	f383 8811 	msr	BASEPRI, r3
 800dbf4:	f3bf 8f6f 	isb	sy
 800dbf8:	f3bf 8f4f 	dsb	sy
 800dbfc:	617b      	str	r3, [r7, #20]
}
 800dbfe:	bf00      	nop
 800dc00:	bf00      	nop
 800dc02:	e7fd      	b.n	800dc00 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d01f      	beq.n	800dc4a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	61fb      	str	r3, [r7, #28]
 800dc0e:	e012      	b.n	800dc36 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	4413      	add	r3, r2
 800dc16:	7819      	ldrb	r1, [r3, #0]
 800dc18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	3334      	adds	r3, #52	@ 0x34
 800dc20:	460a      	mov	r2, r1
 800dc22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc24:	68ba      	ldr	r2, [r7, #8]
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	4413      	add	r3, r2
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d006      	beq.n	800dc3e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc30:	69fb      	ldr	r3, [r7, #28]
 800dc32:	3301      	adds	r3, #1
 800dc34:	61fb      	str	r3, [r7, #28]
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	2b0f      	cmp	r3, #15
 800dc3a:	d9e9      	bls.n	800dc10 <prvInitialiseNewTask+0x66>
 800dc3c:	e000      	b.n	800dc40 <prvInitialiseNewTask+0x96>
			{
				break;
 800dc3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc42:	2200      	movs	r2, #0
 800dc44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dc48:	e003      	b.n	800dc52 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc54:	2b37      	cmp	r3, #55	@ 0x37
 800dc56:	d901      	bls.n	800dc5c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc58:	2337      	movs	r3, #55	@ 0x37
 800dc5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc60:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc66:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc70:	3304      	adds	r3, #4
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7ff f884 	bl	800cd80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc7a:	3318      	adds	r3, #24
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7ff f87f 	bl	800cd80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc96:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca0:	2200      	movs	r2, #0
 800dca2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	68f9      	ldr	r1, [r7, #12]
 800dcaa:	69b8      	ldr	r0, [r7, #24]
 800dcac:	f001 f966 	bl	800ef7c <pxPortInitialiseStack>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dcb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d002      	beq.n	800dcc2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcc2:	bf00      	nop
 800dcc4:	3720      	adds	r7, #32
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
	...

0800dccc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dcd4:	f001 fa80 	bl	800f1d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dcd8:	4b2d      	ldr	r3, [pc, #180]	@ (800dd90 <prvAddNewTaskToReadyList+0xc4>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	3301      	adds	r3, #1
 800dcde:	4a2c      	ldr	r2, [pc, #176]	@ (800dd90 <prvAddNewTaskToReadyList+0xc4>)
 800dce0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dce2:	4b2c      	ldr	r3, [pc, #176]	@ (800dd94 <prvAddNewTaskToReadyList+0xc8>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d109      	bne.n	800dcfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dcea:	4a2a      	ldr	r2, [pc, #168]	@ (800dd94 <prvAddNewTaskToReadyList+0xc8>)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dcf0:	4b27      	ldr	r3, [pc, #156]	@ (800dd90 <prvAddNewTaskToReadyList+0xc4>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d110      	bne.n	800dd1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dcf8:	f000 fc46 	bl	800e588 <prvInitialiseTaskLists>
 800dcfc:	e00d      	b.n	800dd1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dcfe:	4b26      	ldr	r3, [pc, #152]	@ (800dd98 <prvAddNewTaskToReadyList+0xcc>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d109      	bne.n	800dd1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd06:	4b23      	ldr	r3, [pc, #140]	@ (800dd94 <prvAddNewTaskToReadyList+0xc8>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d802      	bhi.n	800dd1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd14:	4a1f      	ldr	r2, [pc, #124]	@ (800dd94 <prvAddNewTaskToReadyList+0xc8>)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd1a:	4b20      	ldr	r3, [pc, #128]	@ (800dd9c <prvAddNewTaskToReadyList+0xd0>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	3301      	adds	r3, #1
 800dd20:	4a1e      	ldr	r2, [pc, #120]	@ (800dd9c <prvAddNewTaskToReadyList+0xd0>)
 800dd22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dd24:	4b1d      	ldr	r3, [pc, #116]	@ (800dd9c <prvAddNewTaskToReadyList+0xd0>)
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd30:	4b1b      	ldr	r3, [pc, #108]	@ (800dda0 <prvAddNewTaskToReadyList+0xd4>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d903      	bls.n	800dd40 <prvAddNewTaskToReadyList+0x74>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd3c:	4a18      	ldr	r2, [pc, #96]	@ (800dda0 <prvAddNewTaskToReadyList+0xd4>)
 800dd3e:	6013      	str	r3, [r2, #0]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd44:	4613      	mov	r3, r2
 800dd46:	009b      	lsls	r3, r3, #2
 800dd48:	4413      	add	r3, r2
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	4a15      	ldr	r2, [pc, #84]	@ (800dda4 <prvAddNewTaskToReadyList+0xd8>)
 800dd4e:	441a      	add	r2, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	3304      	adds	r3, #4
 800dd54:	4619      	mov	r1, r3
 800dd56:	4610      	mov	r0, r2
 800dd58:	f7ff f81f 	bl	800cd9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd5c:	f001 fa6e 	bl	800f23c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd60:	4b0d      	ldr	r3, [pc, #52]	@ (800dd98 <prvAddNewTaskToReadyList+0xcc>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00e      	beq.n	800dd86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd68:	4b0a      	ldr	r3, [pc, #40]	@ (800dd94 <prvAddNewTaskToReadyList+0xc8>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d207      	bcs.n	800dd86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dd76:	4b0c      	ldr	r3, [pc, #48]	@ (800dda8 <prvAddNewTaskToReadyList+0xdc>)
 800dd78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd7c:	601a      	str	r2, [r3, #0]
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd86:	bf00      	nop
 800dd88:	3708      	adds	r7, #8
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	200078bc 	.word	0x200078bc
 800dd94:	200073e8 	.word	0x200073e8
 800dd98:	200078c8 	.word	0x200078c8
 800dd9c:	200078d8 	.word	0x200078d8
 800dda0:	200078c4 	.word	0x200078c4
 800dda4:	200073ec 	.word	0x200073ec
 800dda8:	e000ed04 	.word	0xe000ed04

0800ddac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d018      	beq.n	800ddf0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ddbe:	4b14      	ldr	r3, [pc, #80]	@ (800de10 <vTaskDelay+0x64>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d00b      	beq.n	800ddde <vTaskDelay+0x32>
	__asm volatile
 800ddc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddca:	f383 8811 	msr	BASEPRI, r3
 800ddce:	f3bf 8f6f 	isb	sy
 800ddd2:	f3bf 8f4f 	dsb	sy
 800ddd6:	60bb      	str	r3, [r7, #8]
}
 800ddd8:	bf00      	nop
 800ddda:	bf00      	nop
 800dddc:	e7fd      	b.n	800ddda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ddde:	f000 f883 	bl	800dee8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dde2:	2100      	movs	r1, #0
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 fd1b 	bl	800e820 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ddea:	f000 f88b 	bl	800df04 <xTaskResumeAll>
 800ddee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d107      	bne.n	800de06 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ddf6:	4b07      	ldr	r3, [pc, #28]	@ (800de14 <vTaskDelay+0x68>)
 800ddf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de06:	bf00      	nop
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	200078e4 	.word	0x200078e4
 800de14:	e000ed04 	.word	0xe000ed04

0800de18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b08a      	sub	sp, #40	@ 0x28
 800de1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800de1e:	2300      	movs	r3, #0
 800de20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800de22:	2300      	movs	r3, #0
 800de24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800de26:	463a      	mov	r2, r7
 800de28:	1d39      	adds	r1, r7, #4
 800de2a:	f107 0308 	add.w	r3, r7, #8
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fe ff52 	bl	800ccd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800de34:	6839      	ldr	r1, [r7, #0]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	68ba      	ldr	r2, [r7, #8]
 800de3a:	9202      	str	r2, [sp, #8]
 800de3c:	9301      	str	r3, [sp, #4]
 800de3e:	2300      	movs	r3, #0
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	2300      	movs	r3, #0
 800de44:	460a      	mov	r2, r1
 800de46:	4922      	ldr	r1, [pc, #136]	@ (800ded0 <vTaskStartScheduler+0xb8>)
 800de48:	4822      	ldr	r0, [pc, #136]	@ (800ded4 <vTaskStartScheduler+0xbc>)
 800de4a:	f7ff fe09 	bl	800da60 <xTaskCreateStatic>
 800de4e:	4603      	mov	r3, r0
 800de50:	4a21      	ldr	r2, [pc, #132]	@ (800ded8 <vTaskStartScheduler+0xc0>)
 800de52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de54:	4b20      	ldr	r3, [pc, #128]	@ (800ded8 <vTaskStartScheduler+0xc0>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d002      	beq.n	800de62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de5c:	2301      	movs	r3, #1
 800de5e:	617b      	str	r3, [r7, #20]
 800de60:	e001      	b.n	800de66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de62:	2300      	movs	r3, #0
 800de64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d102      	bne.n	800de72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800de6c:	f000 fd2c 	bl	800e8c8 <xTimerCreateTimerTask>
 800de70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	2b01      	cmp	r3, #1
 800de76:	d116      	bne.n	800dea6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800de78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de7c:	f383 8811 	msr	BASEPRI, r3
 800de80:	f3bf 8f6f 	isb	sy
 800de84:	f3bf 8f4f 	dsb	sy
 800de88:	613b      	str	r3, [r7, #16]
}
 800de8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de8c:	4b13      	ldr	r3, [pc, #76]	@ (800dedc <vTaskStartScheduler+0xc4>)
 800de8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800de92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de94:	4b12      	ldr	r3, [pc, #72]	@ (800dee0 <vTaskStartScheduler+0xc8>)
 800de96:	2201      	movs	r2, #1
 800de98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de9a:	4b12      	ldr	r3, [pc, #72]	@ (800dee4 <vTaskStartScheduler+0xcc>)
 800de9c:	2200      	movs	r2, #0
 800de9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dea0:	f001 f8f6 	bl	800f090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dea4:	e00f      	b.n	800dec6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800deac:	d10b      	bne.n	800dec6 <vTaskStartScheduler+0xae>
	__asm volatile
 800deae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb2:	f383 8811 	msr	BASEPRI, r3
 800deb6:	f3bf 8f6f 	isb	sy
 800deba:	f3bf 8f4f 	dsb	sy
 800debe:	60fb      	str	r3, [r7, #12]
}
 800dec0:	bf00      	nop
 800dec2:	bf00      	nop
 800dec4:	e7fd      	b.n	800dec2 <vTaskStartScheduler+0xaa>
}
 800dec6:	bf00      	nop
 800dec8:	3718      	adds	r7, #24
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	0801dc3c 	.word	0x0801dc3c
 800ded4:	0800e559 	.word	0x0800e559
 800ded8:	200078e0 	.word	0x200078e0
 800dedc:	200078dc 	.word	0x200078dc
 800dee0:	200078c8 	.word	0x200078c8
 800dee4:	200078c0 	.word	0x200078c0

0800dee8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dee8:	b480      	push	{r7}
 800deea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800deec:	4b04      	ldr	r3, [pc, #16]	@ (800df00 <vTaskSuspendAll+0x18>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	3301      	adds	r3, #1
 800def2:	4a03      	ldr	r2, [pc, #12]	@ (800df00 <vTaskSuspendAll+0x18>)
 800def4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800def6:	bf00      	nop
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	200078e4 	.word	0x200078e4

0800df04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800df0a:	2300      	movs	r3, #0
 800df0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800df0e:	2300      	movs	r3, #0
 800df10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800df12:	4b42      	ldr	r3, [pc, #264]	@ (800e01c <xTaskResumeAll+0x118>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10b      	bne.n	800df32 <xTaskResumeAll+0x2e>
	__asm volatile
 800df1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	603b      	str	r3, [r7, #0]
}
 800df2c:	bf00      	nop
 800df2e:	bf00      	nop
 800df30:	e7fd      	b.n	800df2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800df32:	f001 f951 	bl	800f1d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800df36:	4b39      	ldr	r3, [pc, #228]	@ (800e01c <xTaskResumeAll+0x118>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	3b01      	subs	r3, #1
 800df3c:	4a37      	ldr	r2, [pc, #220]	@ (800e01c <xTaskResumeAll+0x118>)
 800df3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df40:	4b36      	ldr	r3, [pc, #216]	@ (800e01c <xTaskResumeAll+0x118>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d162      	bne.n	800e00e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800df48:	4b35      	ldr	r3, [pc, #212]	@ (800e020 <xTaskResumeAll+0x11c>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d05e      	beq.n	800e00e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df50:	e02f      	b.n	800dfb2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df52:	4b34      	ldr	r3, [pc, #208]	@ (800e024 <xTaskResumeAll+0x120>)
 800df54:	68db      	ldr	r3, [r3, #12]
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	3318      	adds	r3, #24
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fe ff78 	bl	800ce54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	3304      	adds	r3, #4
 800df68:	4618      	mov	r0, r3
 800df6a:	f7fe ff73 	bl	800ce54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df72:	4b2d      	ldr	r3, [pc, #180]	@ (800e028 <xTaskResumeAll+0x124>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	429a      	cmp	r2, r3
 800df78:	d903      	bls.n	800df82 <xTaskResumeAll+0x7e>
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df7e:	4a2a      	ldr	r2, [pc, #168]	@ (800e028 <xTaskResumeAll+0x124>)
 800df80:	6013      	str	r3, [r2, #0]
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df86:	4613      	mov	r3, r2
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	4413      	add	r3, r2
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	4a27      	ldr	r2, [pc, #156]	@ (800e02c <xTaskResumeAll+0x128>)
 800df90:	441a      	add	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	3304      	adds	r3, #4
 800df96:	4619      	mov	r1, r3
 800df98:	4610      	mov	r0, r2
 800df9a:	f7fe fefe 	bl	800cd9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfa2:	4b23      	ldr	r3, [pc, #140]	@ (800e030 <xTaskResumeAll+0x12c>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d302      	bcc.n	800dfb2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dfac:	4b21      	ldr	r3, [pc, #132]	@ (800e034 <xTaskResumeAll+0x130>)
 800dfae:	2201      	movs	r2, #1
 800dfb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dfb2:	4b1c      	ldr	r3, [pc, #112]	@ (800e024 <xTaskResumeAll+0x120>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d1cb      	bne.n	800df52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dfc0:	f000 fb80 	bl	800e6c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dfc4:	4b1c      	ldr	r3, [pc, #112]	@ (800e038 <xTaskResumeAll+0x134>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d010      	beq.n	800dff2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dfd0:	f000 f846 	bl	800e060 <xTaskIncrementTick>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d002      	beq.n	800dfe0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dfda:	4b16      	ldr	r3, [pc, #88]	@ (800e034 <xTaskResumeAll+0x130>)
 800dfdc:	2201      	movs	r2, #1
 800dfde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	3b01      	subs	r3, #1
 800dfe4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d1f1      	bne.n	800dfd0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800dfec:	4b12      	ldr	r3, [pc, #72]	@ (800e038 <xTaskResumeAll+0x134>)
 800dfee:	2200      	movs	r2, #0
 800dff0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dff2:	4b10      	ldr	r3, [pc, #64]	@ (800e034 <xTaskResumeAll+0x130>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d009      	beq.n	800e00e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dffa:	2301      	movs	r3, #1
 800dffc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dffe:	4b0f      	ldr	r3, [pc, #60]	@ (800e03c <xTaskResumeAll+0x138>)
 800e000:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e004:	601a      	str	r2, [r3, #0]
 800e006:	f3bf 8f4f 	dsb	sy
 800e00a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e00e:	f001 f915 	bl	800f23c <vPortExitCritical>

	return xAlreadyYielded;
 800e012:	68bb      	ldr	r3, [r7, #8]
}
 800e014:	4618      	mov	r0, r3
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	200078e4 	.word	0x200078e4
 800e020:	200078bc 	.word	0x200078bc
 800e024:	2000787c 	.word	0x2000787c
 800e028:	200078c4 	.word	0x200078c4
 800e02c:	200073ec 	.word	0x200073ec
 800e030:	200073e8 	.word	0x200073e8
 800e034:	200078d0 	.word	0x200078d0
 800e038:	200078cc 	.word	0x200078cc
 800e03c:	e000ed04 	.word	0xe000ed04

0800e040 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e046:	4b05      	ldr	r3, [pc, #20]	@ (800e05c <xTaskGetTickCount+0x1c>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e04c:	687b      	ldr	r3, [r7, #4]
}
 800e04e:	4618      	mov	r0, r3
 800e050:	370c      	adds	r7, #12
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr
 800e05a:	bf00      	nop
 800e05c:	200078c0 	.word	0x200078c0

0800e060 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e066:	2300      	movs	r3, #0
 800e068:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e06a:	4b4f      	ldr	r3, [pc, #316]	@ (800e1a8 <xTaskIncrementTick+0x148>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f040 8090 	bne.w	800e194 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e074:	4b4d      	ldr	r3, [pc, #308]	@ (800e1ac <xTaskIncrementTick+0x14c>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	3301      	adds	r3, #1
 800e07a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e07c:	4a4b      	ldr	r2, [pc, #300]	@ (800e1ac <xTaskIncrementTick+0x14c>)
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d121      	bne.n	800e0cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e088:	4b49      	ldr	r3, [pc, #292]	@ (800e1b0 <xTaskIncrementTick+0x150>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00b      	beq.n	800e0aa <xTaskIncrementTick+0x4a>
	__asm volatile
 800e092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e096:	f383 8811 	msr	BASEPRI, r3
 800e09a:	f3bf 8f6f 	isb	sy
 800e09e:	f3bf 8f4f 	dsb	sy
 800e0a2:	603b      	str	r3, [r7, #0]
}
 800e0a4:	bf00      	nop
 800e0a6:	bf00      	nop
 800e0a8:	e7fd      	b.n	800e0a6 <xTaskIncrementTick+0x46>
 800e0aa:	4b41      	ldr	r3, [pc, #260]	@ (800e1b0 <xTaskIncrementTick+0x150>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	60fb      	str	r3, [r7, #12]
 800e0b0:	4b40      	ldr	r3, [pc, #256]	@ (800e1b4 <xTaskIncrementTick+0x154>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4a3e      	ldr	r2, [pc, #248]	@ (800e1b0 <xTaskIncrementTick+0x150>)
 800e0b6:	6013      	str	r3, [r2, #0]
 800e0b8:	4a3e      	ldr	r2, [pc, #248]	@ (800e1b4 <xTaskIncrementTick+0x154>)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	6013      	str	r3, [r2, #0]
 800e0be:	4b3e      	ldr	r3, [pc, #248]	@ (800e1b8 <xTaskIncrementTick+0x158>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	4a3c      	ldr	r2, [pc, #240]	@ (800e1b8 <xTaskIncrementTick+0x158>)
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	f000 fafc 	bl	800e6c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0cc:	4b3b      	ldr	r3, [pc, #236]	@ (800e1bc <xTaskIncrementTick+0x15c>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	693a      	ldr	r2, [r7, #16]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d349      	bcc.n	800e16a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0d6:	4b36      	ldr	r3, [pc, #216]	@ (800e1b0 <xTaskIncrementTick+0x150>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d104      	bne.n	800e0ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0e0:	4b36      	ldr	r3, [pc, #216]	@ (800e1bc <xTaskIncrementTick+0x15c>)
 800e0e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e0e6:	601a      	str	r2, [r3, #0]
					break;
 800e0e8:	e03f      	b.n	800e16a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ea:	4b31      	ldr	r3, [pc, #196]	@ (800e1b0 <xTaskIncrementTick+0x150>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e0fa:	693a      	ldr	r2, [r7, #16]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d203      	bcs.n	800e10a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e102:	4a2e      	ldr	r2, [pc, #184]	@ (800e1bc <xTaskIncrementTick+0x15c>)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e108:	e02f      	b.n	800e16a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	3304      	adds	r3, #4
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fe fea0 	bl	800ce54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d004      	beq.n	800e126 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	3318      	adds	r3, #24
 800e120:	4618      	mov	r0, r3
 800e122:	f7fe fe97 	bl	800ce54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e12a:	4b25      	ldr	r3, [pc, #148]	@ (800e1c0 <xTaskIncrementTick+0x160>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d903      	bls.n	800e13a <xTaskIncrementTick+0xda>
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e136:	4a22      	ldr	r2, [pc, #136]	@ (800e1c0 <xTaskIncrementTick+0x160>)
 800e138:	6013      	str	r3, [r2, #0]
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e13e:	4613      	mov	r3, r2
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	4413      	add	r3, r2
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	4a1f      	ldr	r2, [pc, #124]	@ (800e1c4 <xTaskIncrementTick+0x164>)
 800e148:	441a      	add	r2, r3
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	3304      	adds	r3, #4
 800e14e:	4619      	mov	r1, r3
 800e150:	4610      	mov	r0, r2
 800e152:	f7fe fe22 	bl	800cd9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e15a:	4b1b      	ldr	r3, [pc, #108]	@ (800e1c8 <xTaskIncrementTick+0x168>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e160:	429a      	cmp	r2, r3
 800e162:	d3b8      	bcc.n	800e0d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e164:	2301      	movs	r3, #1
 800e166:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e168:	e7b5      	b.n	800e0d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e16a:	4b17      	ldr	r3, [pc, #92]	@ (800e1c8 <xTaskIncrementTick+0x168>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e170:	4914      	ldr	r1, [pc, #80]	@ (800e1c4 <xTaskIncrementTick+0x164>)
 800e172:	4613      	mov	r3, r2
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	4413      	add	r3, r2
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	440b      	add	r3, r1
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d901      	bls.n	800e186 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e182:	2301      	movs	r3, #1
 800e184:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e186:	4b11      	ldr	r3, [pc, #68]	@ (800e1cc <xTaskIncrementTick+0x16c>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d007      	beq.n	800e19e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e18e:	2301      	movs	r3, #1
 800e190:	617b      	str	r3, [r7, #20]
 800e192:	e004      	b.n	800e19e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e194:	4b0e      	ldr	r3, [pc, #56]	@ (800e1d0 <xTaskIncrementTick+0x170>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	3301      	adds	r3, #1
 800e19a:	4a0d      	ldr	r2, [pc, #52]	@ (800e1d0 <xTaskIncrementTick+0x170>)
 800e19c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e19e:	697b      	ldr	r3, [r7, #20]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3718      	adds	r7, #24
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	200078e4 	.word	0x200078e4
 800e1ac:	200078c0 	.word	0x200078c0
 800e1b0:	20007874 	.word	0x20007874
 800e1b4:	20007878 	.word	0x20007878
 800e1b8:	200078d4 	.word	0x200078d4
 800e1bc:	200078dc 	.word	0x200078dc
 800e1c0:	200078c4 	.word	0x200078c4
 800e1c4:	200073ec 	.word	0x200073ec
 800e1c8:	200073e8 	.word	0x200073e8
 800e1cc:	200078d0 	.word	0x200078d0
 800e1d0:	200078cc 	.word	0x200078cc

0800e1d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e1da:	4b28      	ldr	r3, [pc, #160]	@ (800e27c <vTaskSwitchContext+0xa8>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d003      	beq.n	800e1ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e1e2:	4b27      	ldr	r3, [pc, #156]	@ (800e280 <vTaskSwitchContext+0xac>)
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e1e8:	e042      	b.n	800e270 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e1ea:	4b25      	ldr	r3, [pc, #148]	@ (800e280 <vTaskSwitchContext+0xac>)
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1f0:	4b24      	ldr	r3, [pc, #144]	@ (800e284 <vTaskSwitchContext+0xb0>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	60fb      	str	r3, [r7, #12]
 800e1f6:	e011      	b.n	800e21c <vTaskSwitchContext+0x48>
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10b      	bne.n	800e216 <vTaskSwitchContext+0x42>
	__asm volatile
 800e1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e202:	f383 8811 	msr	BASEPRI, r3
 800e206:	f3bf 8f6f 	isb	sy
 800e20a:	f3bf 8f4f 	dsb	sy
 800e20e:	607b      	str	r3, [r7, #4]
}
 800e210:	bf00      	nop
 800e212:	bf00      	nop
 800e214:	e7fd      	b.n	800e212 <vTaskSwitchContext+0x3e>
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	3b01      	subs	r3, #1
 800e21a:	60fb      	str	r3, [r7, #12]
 800e21c:	491a      	ldr	r1, [pc, #104]	@ (800e288 <vTaskSwitchContext+0xb4>)
 800e21e:	68fa      	ldr	r2, [r7, #12]
 800e220:	4613      	mov	r3, r2
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	4413      	add	r3, r2
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	440b      	add	r3, r1
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d0e3      	beq.n	800e1f8 <vTaskSwitchContext+0x24>
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	4613      	mov	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4413      	add	r3, r2
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4a13      	ldr	r2, [pc, #76]	@ (800e288 <vTaskSwitchContext+0xb4>)
 800e23c:	4413      	add	r3, r2
 800e23e:	60bb      	str	r3, [r7, #8]
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	685a      	ldr	r2, [r3, #4]
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	605a      	str	r2, [r3, #4]
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	685a      	ldr	r2, [r3, #4]
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	3308      	adds	r3, #8
 800e252:	429a      	cmp	r2, r3
 800e254:	d104      	bne.n	800e260 <vTaskSwitchContext+0x8c>
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	685a      	ldr	r2, [r3, #4]
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	605a      	str	r2, [r3, #4]
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	4a09      	ldr	r2, [pc, #36]	@ (800e28c <vTaskSwitchContext+0xb8>)
 800e268:	6013      	str	r3, [r2, #0]
 800e26a:	4a06      	ldr	r2, [pc, #24]	@ (800e284 <vTaskSwitchContext+0xb0>)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6013      	str	r3, [r2, #0]
}
 800e270:	bf00      	nop
 800e272:	3714      	adds	r7, #20
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr
 800e27c:	200078e4 	.word	0x200078e4
 800e280:	200078d0 	.word	0x200078d0
 800e284:	200078c4 	.word	0x200078c4
 800e288:	200073ec 	.word	0x200073ec
 800e28c:	200073e8 	.word	0x200073e8

0800e290 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d10b      	bne.n	800e2b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a4:	f383 8811 	msr	BASEPRI, r3
 800e2a8:	f3bf 8f6f 	isb	sy
 800e2ac:	f3bf 8f4f 	dsb	sy
 800e2b0:	60fb      	str	r3, [r7, #12]
}
 800e2b2:	bf00      	nop
 800e2b4:	bf00      	nop
 800e2b6:	e7fd      	b.n	800e2b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2b8:	4b07      	ldr	r3, [pc, #28]	@ (800e2d8 <vTaskPlaceOnEventList+0x48>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	3318      	adds	r3, #24
 800e2be:	4619      	mov	r1, r3
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7fe fd8e 	bl	800cde2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e2c6:	2101      	movs	r1, #1
 800e2c8:	6838      	ldr	r0, [r7, #0]
 800e2ca:	f000 faa9 	bl	800e820 <prvAddCurrentTaskToDelayedList>
}
 800e2ce:	bf00      	nop
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	200073e8 	.word	0x200073e8

0800e2dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b086      	sub	sp, #24
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10b      	bne.n	800e306 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	617b      	str	r3, [r7, #20]
}
 800e300:	bf00      	nop
 800e302:	bf00      	nop
 800e304:	e7fd      	b.n	800e302 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e306:	4b0a      	ldr	r3, [pc, #40]	@ (800e330 <vTaskPlaceOnEventListRestricted+0x54>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	3318      	adds	r3, #24
 800e30c:	4619      	mov	r1, r3
 800e30e:	68f8      	ldr	r0, [r7, #12]
 800e310:	f7fe fd43 	bl	800cd9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d002      	beq.n	800e320 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e31a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e31e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e320:	6879      	ldr	r1, [r7, #4]
 800e322:	68b8      	ldr	r0, [r7, #8]
 800e324:	f000 fa7c 	bl	800e820 <prvAddCurrentTaskToDelayedList>
	}
 800e328:	bf00      	nop
 800e32a:	3718      	adds	r7, #24
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	200073e8 	.word	0x200073e8

0800e334 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b086      	sub	sp, #24
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	68db      	ldr	r3, [r3, #12]
 800e342:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d10b      	bne.n	800e362 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e34e:	f383 8811 	msr	BASEPRI, r3
 800e352:	f3bf 8f6f 	isb	sy
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	60fb      	str	r3, [r7, #12]
}
 800e35c:	bf00      	nop
 800e35e:	bf00      	nop
 800e360:	e7fd      	b.n	800e35e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	3318      	adds	r3, #24
 800e366:	4618      	mov	r0, r3
 800e368:	f7fe fd74 	bl	800ce54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e36c:	4b1d      	ldr	r3, [pc, #116]	@ (800e3e4 <xTaskRemoveFromEventList+0xb0>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d11d      	bne.n	800e3b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	3304      	adds	r3, #4
 800e378:	4618      	mov	r0, r3
 800e37a:	f7fe fd6b 	bl	800ce54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e382:	4b19      	ldr	r3, [pc, #100]	@ (800e3e8 <xTaskRemoveFromEventList+0xb4>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	429a      	cmp	r2, r3
 800e388:	d903      	bls.n	800e392 <xTaskRemoveFromEventList+0x5e>
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e38e:	4a16      	ldr	r2, [pc, #88]	@ (800e3e8 <xTaskRemoveFromEventList+0xb4>)
 800e390:	6013      	str	r3, [r2, #0]
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e396:	4613      	mov	r3, r2
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	4413      	add	r3, r2
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	4a13      	ldr	r2, [pc, #76]	@ (800e3ec <xTaskRemoveFromEventList+0xb8>)
 800e3a0:	441a      	add	r2, r3
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	3304      	adds	r3, #4
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	4610      	mov	r0, r2
 800e3aa:	f7fe fcf6 	bl	800cd9a <vListInsertEnd>
 800e3ae:	e005      	b.n	800e3bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	3318      	adds	r3, #24
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	480e      	ldr	r0, [pc, #56]	@ (800e3f0 <xTaskRemoveFromEventList+0xbc>)
 800e3b8:	f7fe fcef 	bl	800cd9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3c0:	4b0c      	ldr	r3, [pc, #48]	@ (800e3f4 <xTaskRemoveFromEventList+0xc0>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d905      	bls.n	800e3d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e3ce:	4b0a      	ldr	r3, [pc, #40]	@ (800e3f8 <xTaskRemoveFromEventList+0xc4>)
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	601a      	str	r2, [r3, #0]
 800e3d4:	e001      	b.n	800e3da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e3da:	697b      	ldr	r3, [r7, #20]
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3718      	adds	r7, #24
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}
 800e3e4:	200078e4 	.word	0x200078e4
 800e3e8:	200078c4 	.word	0x200078c4
 800e3ec:	200073ec 	.word	0x200073ec
 800e3f0:	2000787c 	.word	0x2000787c
 800e3f4:	200073e8 	.word	0x200073e8
 800e3f8:	200078d0 	.word	0x200078d0

0800e3fc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d10b      	bne.n	800e422 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800e40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	60fb      	str	r3, [r7, #12]
}
 800e41c:	bf00      	nop
 800e41e:	bf00      	nop
 800e420:	e7fd      	b.n	800e41e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800e422:	f000 fed9 	bl	800f1d8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e426:	4b07      	ldr	r3, [pc, #28]	@ (800e444 <vTaskSetTimeOutState+0x48>)
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800e42e:	4b06      	ldr	r3, [pc, #24]	@ (800e448 <vTaskSetTimeOutState+0x4c>)
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800e436:	f000 ff01 	bl	800f23c <vPortExitCritical>
}
 800e43a:	bf00      	nop
 800e43c:	3710      	adds	r7, #16
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	200078d4 	.word	0x200078d4
 800e448:	200078c0 	.word	0x200078c0

0800e44c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e454:	4b06      	ldr	r3, [pc, #24]	@ (800e470 <vTaskInternalSetTimeOutState+0x24>)
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e45c:	4b05      	ldr	r3, [pc, #20]	@ (800e474 <vTaskInternalSetTimeOutState+0x28>)
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	605a      	str	r2, [r3, #4]
}
 800e464:	bf00      	nop
 800e466:	370c      	adds	r7, #12
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr
 800e470:	200078d4 	.word	0x200078d4
 800e474:	200078c0 	.word	0x200078c0

0800e478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b088      	sub	sp, #32
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d10b      	bne.n	800e4a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e48c:	f383 8811 	msr	BASEPRI, r3
 800e490:	f3bf 8f6f 	isb	sy
 800e494:	f3bf 8f4f 	dsb	sy
 800e498:	613b      	str	r3, [r7, #16]
}
 800e49a:	bf00      	nop
 800e49c:	bf00      	nop
 800e49e:	e7fd      	b.n	800e49c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10b      	bne.n	800e4be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4aa:	f383 8811 	msr	BASEPRI, r3
 800e4ae:	f3bf 8f6f 	isb	sy
 800e4b2:	f3bf 8f4f 	dsb	sy
 800e4b6:	60fb      	str	r3, [r7, #12]
}
 800e4b8:	bf00      	nop
 800e4ba:	bf00      	nop
 800e4bc:	e7fd      	b.n	800e4ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e4be:	f000 fe8b 	bl	800f1d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e4c2:	4b1d      	ldr	r3, [pc, #116]	@ (800e538 <xTaskCheckForTimeOut+0xc0>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	69ba      	ldr	r2, [r7, #24]
 800e4ce:	1ad3      	subs	r3, r2, r3
 800e4d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e4da:	d102      	bne.n	800e4e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	61fb      	str	r3, [r7, #28]
 800e4e0:	e023      	b.n	800e52a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	4b15      	ldr	r3, [pc, #84]	@ (800e53c <xTaskCheckForTimeOut+0xc4>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d007      	beq.n	800e4fe <xTaskCheckForTimeOut+0x86>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	69ba      	ldr	r2, [r7, #24]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d302      	bcc.n	800e4fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	61fb      	str	r3, [r7, #28]
 800e4fc:	e015      	b.n	800e52a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	697a      	ldr	r2, [r7, #20]
 800e504:	429a      	cmp	r2, r3
 800e506:	d20b      	bcs.n	800e520 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	1ad2      	subs	r2, r2, r3
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7ff ff99 	bl	800e44c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e51a:	2300      	movs	r3, #0
 800e51c:	61fb      	str	r3, [r7, #28]
 800e51e:	e004      	b.n	800e52a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	2200      	movs	r2, #0
 800e524:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e526:	2301      	movs	r3, #1
 800e528:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e52a:	f000 fe87 	bl	800f23c <vPortExitCritical>

	return xReturn;
 800e52e:	69fb      	ldr	r3, [r7, #28]
}
 800e530:	4618      	mov	r0, r3
 800e532:	3720      	adds	r7, #32
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}
 800e538:	200078c0 	.word	0x200078c0
 800e53c:	200078d4 	.word	0x200078d4

0800e540 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e540:	b480      	push	{r7}
 800e542:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e544:	4b03      	ldr	r3, [pc, #12]	@ (800e554 <vTaskMissedYield+0x14>)
 800e546:	2201      	movs	r2, #1
 800e548:	601a      	str	r2, [r3, #0]
}
 800e54a:	bf00      	nop
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr
 800e554:	200078d0 	.word	0x200078d0

0800e558 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e560:	f000 f852 	bl	800e608 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e564:	4b06      	ldr	r3, [pc, #24]	@ (800e580 <prvIdleTask+0x28>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d9f9      	bls.n	800e560 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e56c:	4b05      	ldr	r3, [pc, #20]	@ (800e584 <prvIdleTask+0x2c>)
 800e56e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e572:	601a      	str	r2, [r3, #0]
 800e574:	f3bf 8f4f 	dsb	sy
 800e578:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e57c:	e7f0      	b.n	800e560 <prvIdleTask+0x8>
 800e57e:	bf00      	nop
 800e580:	200073ec 	.word	0x200073ec
 800e584:	e000ed04 	.word	0xe000ed04

0800e588 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e58e:	2300      	movs	r3, #0
 800e590:	607b      	str	r3, [r7, #4]
 800e592:	e00c      	b.n	800e5ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	4613      	mov	r3, r2
 800e598:	009b      	lsls	r3, r3, #2
 800e59a:	4413      	add	r3, r2
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	4a12      	ldr	r2, [pc, #72]	@ (800e5e8 <prvInitialiseTaskLists+0x60>)
 800e5a0:	4413      	add	r3, r2
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7fe fbcc 	bl	800cd40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	607b      	str	r3, [r7, #4]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2b37      	cmp	r3, #55	@ 0x37
 800e5b2:	d9ef      	bls.n	800e594 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e5b4:	480d      	ldr	r0, [pc, #52]	@ (800e5ec <prvInitialiseTaskLists+0x64>)
 800e5b6:	f7fe fbc3 	bl	800cd40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e5ba:	480d      	ldr	r0, [pc, #52]	@ (800e5f0 <prvInitialiseTaskLists+0x68>)
 800e5bc:	f7fe fbc0 	bl	800cd40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e5c0:	480c      	ldr	r0, [pc, #48]	@ (800e5f4 <prvInitialiseTaskLists+0x6c>)
 800e5c2:	f7fe fbbd 	bl	800cd40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e5c6:	480c      	ldr	r0, [pc, #48]	@ (800e5f8 <prvInitialiseTaskLists+0x70>)
 800e5c8:	f7fe fbba 	bl	800cd40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e5cc:	480b      	ldr	r0, [pc, #44]	@ (800e5fc <prvInitialiseTaskLists+0x74>)
 800e5ce:	f7fe fbb7 	bl	800cd40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e600 <prvInitialiseTaskLists+0x78>)
 800e5d4:	4a05      	ldr	r2, [pc, #20]	@ (800e5ec <prvInitialiseTaskLists+0x64>)
 800e5d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e604 <prvInitialiseTaskLists+0x7c>)
 800e5da:	4a05      	ldr	r2, [pc, #20]	@ (800e5f0 <prvInitialiseTaskLists+0x68>)
 800e5dc:	601a      	str	r2, [r3, #0]
}
 800e5de:	bf00      	nop
 800e5e0:	3708      	adds	r7, #8
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	200073ec 	.word	0x200073ec
 800e5ec:	2000784c 	.word	0x2000784c
 800e5f0:	20007860 	.word	0x20007860
 800e5f4:	2000787c 	.word	0x2000787c
 800e5f8:	20007890 	.word	0x20007890
 800e5fc:	200078a8 	.word	0x200078a8
 800e600:	20007874 	.word	0x20007874
 800e604:	20007878 	.word	0x20007878

0800e608 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e60e:	e019      	b.n	800e644 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e610:	f000 fde2 	bl	800f1d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e614:	4b10      	ldr	r3, [pc, #64]	@ (800e658 <prvCheckTasksWaitingTermination+0x50>)
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	68db      	ldr	r3, [r3, #12]
 800e61a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	3304      	adds	r3, #4
 800e620:	4618      	mov	r0, r3
 800e622:	f7fe fc17 	bl	800ce54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e626:	4b0d      	ldr	r3, [pc, #52]	@ (800e65c <prvCheckTasksWaitingTermination+0x54>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	3b01      	subs	r3, #1
 800e62c:	4a0b      	ldr	r2, [pc, #44]	@ (800e65c <prvCheckTasksWaitingTermination+0x54>)
 800e62e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e630:	4b0b      	ldr	r3, [pc, #44]	@ (800e660 <prvCheckTasksWaitingTermination+0x58>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	3b01      	subs	r3, #1
 800e636:	4a0a      	ldr	r2, [pc, #40]	@ (800e660 <prvCheckTasksWaitingTermination+0x58>)
 800e638:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e63a:	f000 fdff 	bl	800f23c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f810 	bl	800e664 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e644:	4b06      	ldr	r3, [pc, #24]	@ (800e660 <prvCheckTasksWaitingTermination+0x58>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d1e1      	bne.n	800e610 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e64c:	bf00      	nop
 800e64e:	bf00      	nop
 800e650:	3708      	adds	r7, #8
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	20007890 	.word	0x20007890
 800e65c:	200078bc 	.word	0x200078bc
 800e660:	200078a4 	.word	0x200078a4

0800e664 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e672:	2b00      	cmp	r3, #0
 800e674:	d108      	bne.n	800e688 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e67a:	4618      	mov	r0, r3
 800e67c:	f000 ff9c 	bl	800f5b8 <vPortFree>
				vPortFree( pxTCB );
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 ff99 	bl	800f5b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e686:	e019      	b.n	800e6bc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d103      	bne.n	800e69a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f000 ff90 	bl	800f5b8 <vPortFree>
	}
 800e698:	e010      	b.n	800e6bc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e6a0:	2b02      	cmp	r3, #2
 800e6a2:	d00b      	beq.n	800e6bc <prvDeleteTCB+0x58>
	__asm volatile
 800e6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a8:	f383 8811 	msr	BASEPRI, r3
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f3bf 8f4f 	dsb	sy
 800e6b4:	60fb      	str	r3, [r7, #12]
}
 800e6b6:	bf00      	nop
 800e6b8:	bf00      	nop
 800e6ba:	e7fd      	b.n	800e6b8 <prvDeleteTCB+0x54>
	}
 800e6bc:	bf00      	nop
 800e6be:	3710      	adds	r7, #16
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6ca:	4b0c      	ldr	r3, [pc, #48]	@ (800e6fc <prvResetNextTaskUnblockTime+0x38>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d104      	bne.n	800e6de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e6d4:	4b0a      	ldr	r3, [pc, #40]	@ (800e700 <prvResetNextTaskUnblockTime+0x3c>)
 800e6d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e6da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e6dc:	e008      	b.n	800e6f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6de:	4b07      	ldr	r3, [pc, #28]	@ (800e6fc <prvResetNextTaskUnblockTime+0x38>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	68db      	ldr	r3, [r3, #12]
 800e6e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	4a04      	ldr	r2, [pc, #16]	@ (800e700 <prvResetNextTaskUnblockTime+0x3c>)
 800e6ee:	6013      	str	r3, [r2, #0]
}
 800e6f0:	bf00      	nop
 800e6f2:	370c      	adds	r7, #12
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr
 800e6fc:	20007874 	.word	0x20007874
 800e700:	200078dc 	.word	0x200078dc

0800e704 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e70a:	4b0b      	ldr	r3, [pc, #44]	@ (800e738 <xTaskGetSchedulerState+0x34>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d102      	bne.n	800e718 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e712:	2301      	movs	r3, #1
 800e714:	607b      	str	r3, [r7, #4]
 800e716:	e008      	b.n	800e72a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e718:	4b08      	ldr	r3, [pc, #32]	@ (800e73c <xTaskGetSchedulerState+0x38>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d102      	bne.n	800e726 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e720:	2302      	movs	r3, #2
 800e722:	607b      	str	r3, [r7, #4]
 800e724:	e001      	b.n	800e72a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e726:	2300      	movs	r3, #0
 800e728:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e72a:	687b      	ldr	r3, [r7, #4]
	}
 800e72c:	4618      	mov	r0, r3
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr
 800e738:	200078c8 	.word	0x200078c8
 800e73c:	200078e4 	.word	0x200078e4

0800e740 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e74c:	2300      	movs	r3, #0
 800e74e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d058      	beq.n	800e808 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e756:	4b2f      	ldr	r3, [pc, #188]	@ (800e814 <xTaskPriorityDisinherit+0xd4>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	693a      	ldr	r2, [r7, #16]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d00b      	beq.n	800e778 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	60fb      	str	r3, [r7, #12]
}
 800e772:	bf00      	nop
 800e774:	bf00      	nop
 800e776:	e7fd      	b.n	800e774 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d10b      	bne.n	800e798 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e784:	f383 8811 	msr	BASEPRI, r3
 800e788:	f3bf 8f6f 	isb	sy
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	60bb      	str	r3, [r7, #8]
}
 800e792:	bf00      	nop
 800e794:	bf00      	nop
 800e796:	e7fd      	b.n	800e794 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e79c:	1e5a      	subs	r2, r3, #1
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d02c      	beq.n	800e808 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d128      	bne.n	800e808 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7fe fb4a 	bl	800ce54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7d8:	4b0f      	ldr	r3, [pc, #60]	@ (800e818 <xTaskPriorityDisinherit+0xd8>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d903      	bls.n	800e7e8 <xTaskPriorityDisinherit+0xa8>
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7e4:	4a0c      	ldr	r2, [pc, #48]	@ (800e818 <xTaskPriorityDisinherit+0xd8>)
 800e7e6:	6013      	str	r3, [r2, #0]
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7ec:	4613      	mov	r3, r2
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	4413      	add	r3, r2
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	4a09      	ldr	r2, [pc, #36]	@ (800e81c <xTaskPriorityDisinherit+0xdc>)
 800e7f6:	441a      	add	r2, r3
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	3304      	adds	r3, #4
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	4610      	mov	r0, r2
 800e800:	f7fe facb 	bl	800cd9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e804:	2301      	movs	r3, #1
 800e806:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e808:	697b      	ldr	r3, [r7, #20]
	}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3718      	adds	r7, #24
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
 800e812:	bf00      	nop
 800e814:	200073e8 	.word	0x200073e8
 800e818:	200078c4 	.word	0x200078c4
 800e81c:	200073ec 	.word	0x200073ec

0800e820 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e82a:	4b21      	ldr	r3, [pc, #132]	@ (800e8b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e830:	4b20      	ldr	r3, [pc, #128]	@ (800e8b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	3304      	adds	r3, #4
 800e836:	4618      	mov	r0, r3
 800e838:	f7fe fb0c 	bl	800ce54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e842:	d10a      	bne.n	800e85a <prvAddCurrentTaskToDelayedList+0x3a>
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d007      	beq.n	800e85a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e84a:	4b1a      	ldr	r3, [pc, #104]	@ (800e8b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	3304      	adds	r3, #4
 800e850:	4619      	mov	r1, r3
 800e852:	4819      	ldr	r0, [pc, #100]	@ (800e8b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800e854:	f7fe faa1 	bl	800cd9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e858:	e026      	b.n	800e8a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4413      	add	r3, r2
 800e860:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e862:	4b14      	ldr	r3, [pc, #80]	@ (800e8b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	68ba      	ldr	r2, [r7, #8]
 800e868:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e86a:	68ba      	ldr	r2, [r7, #8]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d209      	bcs.n	800e886 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e872:	4b12      	ldr	r3, [pc, #72]	@ (800e8bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	4b0f      	ldr	r3, [pc, #60]	@ (800e8b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	3304      	adds	r3, #4
 800e87c:	4619      	mov	r1, r3
 800e87e:	4610      	mov	r0, r2
 800e880:	f7fe faaf 	bl	800cde2 <vListInsert>
}
 800e884:	e010      	b.n	800e8a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e886:	4b0e      	ldr	r3, [pc, #56]	@ (800e8c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	4b0a      	ldr	r3, [pc, #40]	@ (800e8b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	3304      	adds	r3, #4
 800e890:	4619      	mov	r1, r3
 800e892:	4610      	mov	r0, r2
 800e894:	f7fe faa5 	bl	800cde2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e898:	4b0a      	ldr	r3, [pc, #40]	@ (800e8c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	68ba      	ldr	r2, [r7, #8]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d202      	bcs.n	800e8a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e8a2:	4a08      	ldr	r2, [pc, #32]	@ (800e8c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	6013      	str	r3, [r2, #0]
}
 800e8a8:	bf00      	nop
 800e8aa:	3710      	adds	r7, #16
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	200078c0 	.word	0x200078c0
 800e8b4:	200073e8 	.word	0x200073e8
 800e8b8:	200078a8 	.word	0x200078a8
 800e8bc:	20007878 	.word	0x20007878
 800e8c0:	20007874 	.word	0x20007874
 800e8c4:	200078dc 	.word	0x200078dc

0800e8c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b08a      	sub	sp, #40	@ 0x28
 800e8cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e8d2:	f000 fb13 	bl	800eefc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e8d6:	4b1d      	ldr	r3, [pc, #116]	@ (800e94c <xTimerCreateTimerTask+0x84>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d021      	beq.n	800e922 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e8e6:	1d3a      	adds	r2, r7, #4
 800e8e8:	f107 0108 	add.w	r1, r7, #8
 800e8ec:	f107 030c 	add.w	r3, r7, #12
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7fe fa0b 	bl	800cd0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e8f6:	6879      	ldr	r1, [r7, #4]
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	68fa      	ldr	r2, [r7, #12]
 800e8fc:	9202      	str	r2, [sp, #8]
 800e8fe:	9301      	str	r3, [sp, #4]
 800e900:	2302      	movs	r3, #2
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	2300      	movs	r3, #0
 800e906:	460a      	mov	r2, r1
 800e908:	4911      	ldr	r1, [pc, #68]	@ (800e950 <xTimerCreateTimerTask+0x88>)
 800e90a:	4812      	ldr	r0, [pc, #72]	@ (800e954 <xTimerCreateTimerTask+0x8c>)
 800e90c:	f7ff f8a8 	bl	800da60 <xTaskCreateStatic>
 800e910:	4603      	mov	r3, r0
 800e912:	4a11      	ldr	r2, [pc, #68]	@ (800e958 <xTimerCreateTimerTask+0x90>)
 800e914:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e916:	4b10      	ldr	r3, [pc, #64]	@ (800e958 <xTimerCreateTimerTask+0x90>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d001      	beq.n	800e922 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e91e:	2301      	movs	r3, #1
 800e920:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d10b      	bne.n	800e940 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e92c:	f383 8811 	msr	BASEPRI, r3
 800e930:	f3bf 8f6f 	isb	sy
 800e934:	f3bf 8f4f 	dsb	sy
 800e938:	613b      	str	r3, [r7, #16]
}
 800e93a:	bf00      	nop
 800e93c:	bf00      	nop
 800e93e:	e7fd      	b.n	800e93c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e940:	697b      	ldr	r3, [r7, #20]
}
 800e942:	4618      	mov	r0, r3
 800e944:	3718      	adds	r7, #24
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	20007918 	.word	0x20007918
 800e950:	0801dc44 	.word	0x0801dc44
 800e954:	0800ea95 	.word	0x0800ea95
 800e958:	2000791c 	.word	0x2000791c

0800e95c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b08a      	sub	sp, #40	@ 0x28
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	607a      	str	r2, [r7, #4]
 800e968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e96a:	2300      	movs	r3, #0
 800e96c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10b      	bne.n	800e98c <xTimerGenericCommand+0x30>
	__asm volatile
 800e974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e978:	f383 8811 	msr	BASEPRI, r3
 800e97c:	f3bf 8f6f 	isb	sy
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	623b      	str	r3, [r7, #32]
}
 800e986:	bf00      	nop
 800e988:	bf00      	nop
 800e98a:	e7fd      	b.n	800e988 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e98c:	4b19      	ldr	r3, [pc, #100]	@ (800e9f4 <xTimerGenericCommand+0x98>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d02a      	beq.n	800e9ea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	2b05      	cmp	r3, #5
 800e9a4:	dc18      	bgt.n	800e9d8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e9a6:	f7ff fead 	bl	800e704 <xTaskGetSchedulerState>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b02      	cmp	r3, #2
 800e9ae:	d109      	bne.n	800e9c4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e9b0:	4b10      	ldr	r3, [pc, #64]	@ (800e9f4 <xTimerGenericCommand+0x98>)
 800e9b2:	6818      	ldr	r0, [r3, #0]
 800e9b4:	f107 0110 	add.w	r1, r7, #16
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9bc:	f7fe fbba 	bl	800d134 <xQueueGenericSend>
 800e9c0:	6278      	str	r0, [r7, #36]	@ 0x24
 800e9c2:	e012      	b.n	800e9ea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e9c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e9f4 <xTimerGenericCommand+0x98>)
 800e9c6:	6818      	ldr	r0, [r3, #0]
 800e9c8:	f107 0110 	add.w	r1, r7, #16
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f7fe fbb0 	bl	800d134 <xQueueGenericSend>
 800e9d4:	6278      	str	r0, [r7, #36]	@ 0x24
 800e9d6:	e008      	b.n	800e9ea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e9d8:	4b06      	ldr	r3, [pc, #24]	@ (800e9f4 <xTimerGenericCommand+0x98>)
 800e9da:	6818      	ldr	r0, [r3, #0]
 800e9dc:	f107 0110 	add.w	r1, r7, #16
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	683a      	ldr	r2, [r7, #0]
 800e9e4:	f7fe fca8 	bl	800d338 <xQueueGenericSendFromISR>
 800e9e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3728      	adds	r7, #40	@ 0x28
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	20007918 	.word	0x20007918

0800e9f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b088      	sub	sp, #32
 800e9fc:	af02      	add	r7, sp, #8
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea02:	4b23      	ldr	r3, [pc, #140]	@ (800ea90 <prvProcessExpiredTimer+0x98>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	68db      	ldr	r3, [r3, #12]
 800ea0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	3304      	adds	r3, #4
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fe fa1f 	bl	800ce54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea1c:	f003 0304 	and.w	r3, r3, #4
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d023      	beq.n	800ea6c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	699a      	ldr	r2, [r3, #24]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	18d1      	adds	r1, r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	683a      	ldr	r2, [r7, #0]
 800ea30:	6978      	ldr	r0, [r7, #20]
 800ea32:	f000 f8d5 	bl	800ebe0 <prvInsertTimerInActiveList>
 800ea36:	4603      	mov	r3, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d020      	beq.n	800ea7e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	9300      	str	r3, [sp, #0]
 800ea40:	2300      	movs	r3, #0
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	2100      	movs	r1, #0
 800ea46:	6978      	ldr	r0, [r7, #20]
 800ea48:	f7ff ff88 	bl	800e95c <xTimerGenericCommand>
 800ea4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d114      	bne.n	800ea7e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ea54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea58:	f383 8811 	msr	BASEPRI, r3
 800ea5c:	f3bf 8f6f 	isb	sy
 800ea60:	f3bf 8f4f 	dsb	sy
 800ea64:	60fb      	str	r3, [r7, #12]
}
 800ea66:	bf00      	nop
 800ea68:	bf00      	nop
 800ea6a:	e7fd      	b.n	800ea68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea72:	f023 0301 	bic.w	r3, r3, #1
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	6a1b      	ldr	r3, [r3, #32]
 800ea82:	6978      	ldr	r0, [r7, #20]
 800ea84:	4798      	blx	r3
}
 800ea86:	bf00      	nop
 800ea88:	3718      	adds	r7, #24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	20007910 	.word	0x20007910

0800ea94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea9c:	f107 0308 	add.w	r3, r7, #8
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f000 f859 	bl	800eb58 <prvGetNextExpireTime>
 800eaa6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	4619      	mov	r1, r3
 800eaac:	68f8      	ldr	r0, [r7, #12]
 800eaae:	f000 f805 	bl	800eabc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eab2:	f000 f8d7 	bl	800ec64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eab6:	bf00      	nop
 800eab8:	e7f0      	b.n	800ea9c <prvTimerTask+0x8>
	...

0800eabc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eac6:	f7ff fa0f 	bl	800dee8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eaca:	f107 0308 	add.w	r3, r7, #8
 800eace:	4618      	mov	r0, r3
 800ead0:	f000 f866 	bl	800eba0 <prvSampleTimeNow>
 800ead4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d130      	bne.n	800eb3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10a      	bne.n	800eaf8 <prvProcessTimerOrBlockTask+0x3c>
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d806      	bhi.n	800eaf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eaea:	f7ff fa0b 	bl	800df04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eaee:	68f9      	ldr	r1, [r7, #12]
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7ff ff81 	bl	800e9f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eaf6:	e024      	b.n	800eb42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d008      	beq.n	800eb10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eafe:	4b13      	ldr	r3, [pc, #76]	@ (800eb4c <prvProcessTimerOrBlockTask+0x90>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d101      	bne.n	800eb0c <prvProcessTimerOrBlockTask+0x50>
 800eb08:	2301      	movs	r3, #1
 800eb0a:	e000      	b.n	800eb0e <prvProcessTimerOrBlockTask+0x52>
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eb10:	4b0f      	ldr	r3, [pc, #60]	@ (800eb50 <prvProcessTimerOrBlockTask+0x94>)
 800eb12:	6818      	ldr	r0, [r3, #0]
 800eb14:	687a      	ldr	r2, [r7, #4]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	1ad3      	subs	r3, r2, r3
 800eb1a:	683a      	ldr	r2, [r7, #0]
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	f7fe ff6b 	bl	800d9f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eb22:	f7ff f9ef 	bl	800df04 <xTaskResumeAll>
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d10a      	bne.n	800eb42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eb2c:	4b09      	ldr	r3, [pc, #36]	@ (800eb54 <prvProcessTimerOrBlockTask+0x98>)
 800eb2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb32:	601a      	str	r2, [r3, #0]
 800eb34:	f3bf 8f4f 	dsb	sy
 800eb38:	f3bf 8f6f 	isb	sy
}
 800eb3c:	e001      	b.n	800eb42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eb3e:	f7ff f9e1 	bl	800df04 <xTaskResumeAll>
}
 800eb42:	bf00      	nop
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	20007914 	.word	0x20007914
 800eb50:	20007918 	.word	0x20007918
 800eb54:	e000ed04 	.word	0xe000ed04

0800eb58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b085      	sub	sp, #20
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eb60:	4b0e      	ldr	r3, [pc, #56]	@ (800eb9c <prvGetNextExpireTime+0x44>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d101      	bne.n	800eb6e <prvGetNextExpireTime+0x16>
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	e000      	b.n	800eb70 <prvGetNextExpireTime+0x18>
 800eb6e:	2200      	movs	r2, #0
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d105      	bne.n	800eb88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb7c:	4b07      	ldr	r3, [pc, #28]	@ (800eb9c <prvGetNextExpireTime+0x44>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	60fb      	str	r3, [r7, #12]
 800eb86:	e001      	b.n	800eb8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3714      	adds	r7, #20
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
 800eb9a:	bf00      	nop
 800eb9c:	20007910 	.word	0x20007910

0800eba0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eba8:	f7ff fa4a 	bl	800e040 <xTaskGetTickCount>
 800ebac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ebae:	4b0b      	ldr	r3, [pc, #44]	@ (800ebdc <prvSampleTimeNow+0x3c>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	68fa      	ldr	r2, [r7, #12]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d205      	bcs.n	800ebc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ebb8:	f000 f93a 	bl	800ee30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	601a      	str	r2, [r3, #0]
 800ebc2:	e002      	b.n	800ebca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ebca:	4a04      	ldr	r2, [pc, #16]	@ (800ebdc <prvSampleTimeNow+0x3c>)
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	20007920 	.word	0x20007920

0800ebe0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
 800ebec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	68ba      	ldr	r2, [r7, #8]
 800ebf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ebfe:	68ba      	ldr	r2, [r7, #8]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d812      	bhi.n	800ec2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	1ad2      	subs	r2, r2, r3
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	699b      	ldr	r3, [r3, #24]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d302      	bcc.n	800ec1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ec14:	2301      	movs	r3, #1
 800ec16:	617b      	str	r3, [r7, #20]
 800ec18:	e01b      	b.n	800ec52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec1a:	4b10      	ldr	r3, [pc, #64]	@ (800ec5c <prvInsertTimerInActiveList+0x7c>)
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	3304      	adds	r3, #4
 800ec22:	4619      	mov	r1, r3
 800ec24:	4610      	mov	r0, r2
 800ec26:	f7fe f8dc 	bl	800cde2 <vListInsert>
 800ec2a:	e012      	b.n	800ec52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d206      	bcs.n	800ec42 <prvInsertTimerInActiveList+0x62>
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d302      	bcc.n	800ec42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	617b      	str	r3, [r7, #20]
 800ec40:	e007      	b.n	800ec52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec42:	4b07      	ldr	r3, [pc, #28]	@ (800ec60 <prvInsertTimerInActiveList+0x80>)
 800ec44:	681a      	ldr	r2, [r3, #0]
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	3304      	adds	r3, #4
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	4610      	mov	r0, r2
 800ec4e:	f7fe f8c8 	bl	800cde2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ec52:	697b      	ldr	r3, [r7, #20]
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3718      	adds	r7, #24
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	20007914 	.word	0x20007914
 800ec60:	20007910 	.word	0x20007910

0800ec64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b08e      	sub	sp, #56	@ 0x38
 800ec68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec6a:	e0ce      	b.n	800ee0a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	da19      	bge.n	800eca6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ec72:	1d3b      	adds	r3, r7, #4
 800ec74:	3304      	adds	r3, #4
 800ec76:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ec78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d10b      	bne.n	800ec96 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ec7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec82:	f383 8811 	msr	BASEPRI, r3
 800ec86:	f3bf 8f6f 	isb	sy
 800ec8a:	f3bf 8f4f 	dsb	sy
 800ec8e:	61fb      	str	r3, [r7, #28]
}
 800ec90:	bf00      	nop
 800ec92:	bf00      	nop
 800ec94:	e7fd      	b.n	800ec92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ec96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec9c:	6850      	ldr	r0, [r2, #4]
 800ec9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eca0:	6892      	ldr	r2, [r2, #8]
 800eca2:	4611      	mov	r1, r2
 800eca4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f2c0 80ae 	blt.w	800ee0a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ecb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb4:	695b      	ldr	r3, [r3, #20]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d004      	beq.n	800ecc4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecbc:	3304      	adds	r3, #4
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fe f8c8 	bl	800ce54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ecc4:	463b      	mov	r3, r7
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7ff ff6a 	bl	800eba0 <prvSampleTimeNow>
 800eccc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2b09      	cmp	r3, #9
 800ecd2:	f200 8097 	bhi.w	800ee04 <prvProcessReceivedCommands+0x1a0>
 800ecd6:	a201      	add	r2, pc, #4	@ (adr r2, 800ecdc <prvProcessReceivedCommands+0x78>)
 800ecd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecdc:	0800ed05 	.word	0x0800ed05
 800ece0:	0800ed05 	.word	0x0800ed05
 800ece4:	0800ed05 	.word	0x0800ed05
 800ece8:	0800ed7b 	.word	0x0800ed7b
 800ecec:	0800ed8f 	.word	0x0800ed8f
 800ecf0:	0800eddb 	.word	0x0800eddb
 800ecf4:	0800ed05 	.word	0x0800ed05
 800ecf8:	0800ed05 	.word	0x0800ed05
 800ecfc:	0800ed7b 	.word	0x0800ed7b
 800ed00:	0800ed8f 	.word	0x0800ed8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed0a:	f043 0301 	orr.w	r3, r3, #1
 800ed0e:	b2da      	uxtb	r2, r3
 800ed10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed1a:	699b      	ldr	r3, [r3, #24]
 800ed1c:	18d1      	adds	r1, r2, r3
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed24:	f7ff ff5c 	bl	800ebe0 <prvInsertTimerInActiveList>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d06c      	beq.n	800ee08 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed30:	6a1b      	ldr	r3, [r3, #32]
 800ed32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed3c:	f003 0304 	and.w	r3, r3, #4
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d061      	beq.n	800ee08 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed44:	68ba      	ldr	r2, [r7, #8]
 800ed46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed48:	699b      	ldr	r3, [r3, #24]
 800ed4a:	441a      	add	r2, r3
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	9300      	str	r3, [sp, #0]
 800ed50:	2300      	movs	r3, #0
 800ed52:	2100      	movs	r1, #0
 800ed54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed56:	f7ff fe01 	bl	800e95c <xTimerGenericCommand>
 800ed5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ed5c:	6a3b      	ldr	r3, [r7, #32]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d152      	bne.n	800ee08 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ed62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed66:	f383 8811 	msr	BASEPRI, r3
 800ed6a:	f3bf 8f6f 	isb	sy
 800ed6e:	f3bf 8f4f 	dsb	sy
 800ed72:	61bb      	str	r3, [r7, #24]
}
 800ed74:	bf00      	nop
 800ed76:	bf00      	nop
 800ed78:	e7fd      	b.n	800ed76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed80:	f023 0301 	bic.w	r3, r3, #1
 800ed84:	b2da      	uxtb	r2, r3
 800ed86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ed8c:	e03d      	b.n	800ee0a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed94:	f043 0301 	orr.w	r3, r3, #1
 800ed98:	b2da      	uxtb	r2, r3
 800ed9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eda0:	68ba      	ldr	r2, [r7, #8]
 800eda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eda4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eda8:	699b      	ldr	r3, [r3, #24]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d10b      	bne.n	800edc6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800edae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edb2:	f383 8811 	msr	BASEPRI, r3
 800edb6:	f3bf 8f6f 	isb	sy
 800edba:	f3bf 8f4f 	dsb	sy
 800edbe:	617b      	str	r3, [r7, #20]
}
 800edc0:	bf00      	nop
 800edc2:	bf00      	nop
 800edc4:	e7fd      	b.n	800edc2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800edc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc8:	699a      	ldr	r2, [r3, #24]
 800edca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edcc:	18d1      	adds	r1, r2, r3
 800edce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800edd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800edd4:	f7ff ff04 	bl	800ebe0 <prvInsertTimerInActiveList>
					break;
 800edd8:	e017      	b.n	800ee0a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800edda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eddc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ede0:	f003 0302 	and.w	r3, r3, #2
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d103      	bne.n	800edf0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ede8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800edea:	f000 fbe5 	bl	800f5b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800edee:	e00c      	b.n	800ee0a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800edf6:	f023 0301 	bic.w	r3, r3, #1
 800edfa:	b2da      	uxtb	r2, r3
 800edfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ee02:	e002      	b.n	800ee0a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ee04:	bf00      	nop
 800ee06:	e000      	b.n	800ee0a <prvProcessReceivedCommands+0x1a6>
					break;
 800ee08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee0a:	4b08      	ldr	r3, [pc, #32]	@ (800ee2c <prvProcessReceivedCommands+0x1c8>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	1d39      	adds	r1, r7, #4
 800ee10:	2200      	movs	r2, #0
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7fe fb2e 	bl	800d474 <xQueueReceive>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	f47f af26 	bne.w	800ec6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ee20:	bf00      	nop
 800ee22:	bf00      	nop
 800ee24:	3730      	adds	r7, #48	@ 0x30
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	20007918 	.word	0x20007918

0800ee30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b088      	sub	sp, #32
 800ee34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee36:	e049      	b.n	800eecc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee38:	4b2e      	ldr	r3, [pc, #184]	@ (800eef4 <prvSwitchTimerLists+0xc4>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee42:	4b2c      	ldr	r3, [pc, #176]	@ (800eef4 <prvSwitchTimerLists+0xc4>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	68db      	ldr	r3, [r3, #12]
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	3304      	adds	r3, #4
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fd ffff 	bl	800ce54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6a1b      	ldr	r3, [r3, #32]
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee64:	f003 0304 	and.w	r3, r3, #4
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d02f      	beq.n	800eecc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	699b      	ldr	r3, [r3, #24]
 800ee70:	693a      	ldr	r2, [r7, #16]
 800ee72:	4413      	add	r3, r2
 800ee74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ee76:	68ba      	ldr	r2, [r7, #8]
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d90e      	bls.n	800ee9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	68ba      	ldr	r2, [r7, #8]
 800ee82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	68fa      	ldr	r2, [r7, #12]
 800ee88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee8a:	4b1a      	ldr	r3, [pc, #104]	@ (800eef4 <prvSwitchTimerLists+0xc4>)
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	3304      	adds	r3, #4
 800ee92:	4619      	mov	r1, r3
 800ee94:	4610      	mov	r0, r2
 800ee96:	f7fd ffa4 	bl	800cde2 <vListInsert>
 800ee9a:	e017      	b.n	800eecc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	9300      	str	r3, [sp, #0]
 800eea0:	2300      	movs	r3, #0
 800eea2:	693a      	ldr	r2, [r7, #16]
 800eea4:	2100      	movs	r1, #0
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f7ff fd58 	bl	800e95c <xTimerGenericCommand>
 800eeac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10b      	bne.n	800eecc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800eeb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb8:	f383 8811 	msr	BASEPRI, r3
 800eebc:	f3bf 8f6f 	isb	sy
 800eec0:	f3bf 8f4f 	dsb	sy
 800eec4:	603b      	str	r3, [r7, #0]
}
 800eec6:	bf00      	nop
 800eec8:	bf00      	nop
 800eeca:	e7fd      	b.n	800eec8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eecc:	4b09      	ldr	r3, [pc, #36]	@ (800eef4 <prvSwitchTimerLists+0xc4>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d1b0      	bne.n	800ee38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eed6:	4b07      	ldr	r3, [pc, #28]	@ (800eef4 <prvSwitchTimerLists+0xc4>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eedc:	4b06      	ldr	r3, [pc, #24]	@ (800eef8 <prvSwitchTimerLists+0xc8>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4a04      	ldr	r2, [pc, #16]	@ (800eef4 <prvSwitchTimerLists+0xc4>)
 800eee2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eee4:	4a04      	ldr	r2, [pc, #16]	@ (800eef8 <prvSwitchTimerLists+0xc8>)
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	6013      	str	r3, [r2, #0]
}
 800eeea:	bf00      	nop
 800eeec:	3718      	adds	r7, #24
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	20007910 	.word	0x20007910
 800eef8:	20007914 	.word	0x20007914

0800eefc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef02:	f000 f969 	bl	800f1d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef06:	4b15      	ldr	r3, [pc, #84]	@ (800ef5c <prvCheckForValidListAndQueue+0x60>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d120      	bne.n	800ef50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ef0e:	4814      	ldr	r0, [pc, #80]	@ (800ef60 <prvCheckForValidListAndQueue+0x64>)
 800ef10:	f7fd ff16 	bl	800cd40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef14:	4813      	ldr	r0, [pc, #76]	@ (800ef64 <prvCheckForValidListAndQueue+0x68>)
 800ef16:	f7fd ff13 	bl	800cd40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef1a:	4b13      	ldr	r3, [pc, #76]	@ (800ef68 <prvCheckForValidListAndQueue+0x6c>)
 800ef1c:	4a10      	ldr	r2, [pc, #64]	@ (800ef60 <prvCheckForValidListAndQueue+0x64>)
 800ef1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef20:	4b12      	ldr	r3, [pc, #72]	@ (800ef6c <prvCheckForValidListAndQueue+0x70>)
 800ef22:	4a10      	ldr	r2, [pc, #64]	@ (800ef64 <prvCheckForValidListAndQueue+0x68>)
 800ef24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef26:	2300      	movs	r3, #0
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	4b11      	ldr	r3, [pc, #68]	@ (800ef70 <prvCheckForValidListAndQueue+0x74>)
 800ef2c:	4a11      	ldr	r2, [pc, #68]	@ (800ef74 <prvCheckForValidListAndQueue+0x78>)
 800ef2e:	2110      	movs	r1, #16
 800ef30:	200a      	movs	r0, #10
 800ef32:	f7fe f823 	bl	800cf7c <xQueueGenericCreateStatic>
 800ef36:	4603      	mov	r3, r0
 800ef38:	4a08      	ldr	r2, [pc, #32]	@ (800ef5c <prvCheckForValidListAndQueue+0x60>)
 800ef3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ef3c:	4b07      	ldr	r3, [pc, #28]	@ (800ef5c <prvCheckForValidListAndQueue+0x60>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d005      	beq.n	800ef50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef44:	4b05      	ldr	r3, [pc, #20]	@ (800ef5c <prvCheckForValidListAndQueue+0x60>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	490b      	ldr	r1, [pc, #44]	@ (800ef78 <prvCheckForValidListAndQueue+0x7c>)
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fe fd2a 	bl	800d9a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef50:	f000 f974 	bl	800f23c <vPortExitCritical>
}
 800ef54:	bf00      	nop
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	20007918 	.word	0x20007918
 800ef60:	200078e8 	.word	0x200078e8
 800ef64:	200078fc 	.word	0x200078fc
 800ef68:	20007910 	.word	0x20007910
 800ef6c:	20007914 	.word	0x20007914
 800ef70:	200079c4 	.word	0x200079c4
 800ef74:	20007924 	.word	0x20007924
 800ef78:	0801dc4c 	.word	0x0801dc4c

0800ef7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b085      	sub	sp, #20
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	3b04      	subs	r3, #4
 800ef8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ef94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	3b04      	subs	r3, #4
 800ef9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	f023 0201 	bic.w	r2, r3, #1
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	3b04      	subs	r3, #4
 800efaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800efac:	4a0c      	ldr	r2, [pc, #48]	@ (800efe0 <pxPortInitialiseStack+0x64>)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	3b14      	subs	r3, #20
 800efb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	3b04      	subs	r3, #4
 800efc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f06f 0202 	mvn.w	r2, #2
 800efca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	3b20      	subs	r3, #32
 800efd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800efd2:	68fb      	ldr	r3, [r7, #12]
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3714      	adds	r7, #20
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr
 800efe0:	0800efe5 	.word	0x0800efe5

0800efe4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800efe4:	b480      	push	{r7}
 800efe6:	b085      	sub	sp, #20
 800efe8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800efea:	2300      	movs	r3, #0
 800efec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800efee:	4b13      	ldr	r3, [pc, #76]	@ (800f03c <prvTaskExitError+0x58>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eff6:	d00b      	beq.n	800f010 <prvTaskExitError+0x2c>
	__asm volatile
 800eff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800effc:	f383 8811 	msr	BASEPRI, r3
 800f000:	f3bf 8f6f 	isb	sy
 800f004:	f3bf 8f4f 	dsb	sy
 800f008:	60fb      	str	r3, [r7, #12]
}
 800f00a:	bf00      	nop
 800f00c:	bf00      	nop
 800f00e:	e7fd      	b.n	800f00c <prvTaskExitError+0x28>
	__asm volatile
 800f010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f014:	f383 8811 	msr	BASEPRI, r3
 800f018:	f3bf 8f6f 	isb	sy
 800f01c:	f3bf 8f4f 	dsb	sy
 800f020:	60bb      	str	r3, [r7, #8]
}
 800f022:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f024:	bf00      	nop
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d0fc      	beq.n	800f026 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f02c:	bf00      	nop
 800f02e:	bf00      	nop
 800f030:	3714      	adds	r7, #20
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop
 800f03c:	20000034 	.word	0x20000034

0800f040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f040:	4b07      	ldr	r3, [pc, #28]	@ (800f060 <pxCurrentTCBConst2>)
 800f042:	6819      	ldr	r1, [r3, #0]
 800f044:	6808      	ldr	r0, [r1, #0]
 800f046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f04a:	f380 8809 	msr	PSP, r0
 800f04e:	f3bf 8f6f 	isb	sy
 800f052:	f04f 0000 	mov.w	r0, #0
 800f056:	f380 8811 	msr	BASEPRI, r0
 800f05a:	4770      	bx	lr
 800f05c:	f3af 8000 	nop.w

0800f060 <pxCurrentTCBConst2>:
 800f060:	200073e8 	.word	0x200073e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f064:	bf00      	nop
 800f066:	bf00      	nop

0800f068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f068:	4808      	ldr	r0, [pc, #32]	@ (800f08c <prvPortStartFirstTask+0x24>)
 800f06a:	6800      	ldr	r0, [r0, #0]
 800f06c:	6800      	ldr	r0, [r0, #0]
 800f06e:	f380 8808 	msr	MSP, r0
 800f072:	f04f 0000 	mov.w	r0, #0
 800f076:	f380 8814 	msr	CONTROL, r0
 800f07a:	b662      	cpsie	i
 800f07c:	b661      	cpsie	f
 800f07e:	f3bf 8f4f 	dsb	sy
 800f082:	f3bf 8f6f 	isb	sy
 800f086:	df00      	svc	0
 800f088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f08a:	bf00      	nop
 800f08c:	e000ed08 	.word	0xe000ed08

0800f090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b086      	sub	sp, #24
 800f094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f096:	4b47      	ldr	r3, [pc, #284]	@ (800f1b4 <xPortStartScheduler+0x124>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4a47      	ldr	r2, [pc, #284]	@ (800f1b8 <xPortStartScheduler+0x128>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d10b      	bne.n	800f0b8 <xPortStartScheduler+0x28>
	__asm volatile
 800f0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a4:	f383 8811 	msr	BASEPRI, r3
 800f0a8:	f3bf 8f6f 	isb	sy
 800f0ac:	f3bf 8f4f 	dsb	sy
 800f0b0:	613b      	str	r3, [r7, #16]
}
 800f0b2:	bf00      	nop
 800f0b4:	bf00      	nop
 800f0b6:	e7fd      	b.n	800f0b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f0b8:	4b3e      	ldr	r3, [pc, #248]	@ (800f1b4 <xPortStartScheduler+0x124>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	4a3f      	ldr	r2, [pc, #252]	@ (800f1bc <xPortStartScheduler+0x12c>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d10b      	bne.n	800f0da <xPortStartScheduler+0x4a>
	__asm volatile
 800f0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0c6:	f383 8811 	msr	BASEPRI, r3
 800f0ca:	f3bf 8f6f 	isb	sy
 800f0ce:	f3bf 8f4f 	dsb	sy
 800f0d2:	60fb      	str	r3, [r7, #12]
}
 800f0d4:	bf00      	nop
 800f0d6:	bf00      	nop
 800f0d8:	e7fd      	b.n	800f0d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f0da:	4b39      	ldr	r3, [pc, #228]	@ (800f1c0 <xPortStartScheduler+0x130>)
 800f0dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	22ff      	movs	r2, #255	@ 0xff
 800f0ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f0f4:	78fb      	ldrb	r3, [r7, #3]
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f0fc:	b2da      	uxtb	r2, r3
 800f0fe:	4b31      	ldr	r3, [pc, #196]	@ (800f1c4 <xPortStartScheduler+0x134>)
 800f100:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f102:	4b31      	ldr	r3, [pc, #196]	@ (800f1c8 <xPortStartScheduler+0x138>)
 800f104:	2207      	movs	r2, #7
 800f106:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f108:	e009      	b.n	800f11e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f10a:	4b2f      	ldr	r3, [pc, #188]	@ (800f1c8 <xPortStartScheduler+0x138>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	3b01      	subs	r3, #1
 800f110:	4a2d      	ldr	r2, [pc, #180]	@ (800f1c8 <xPortStartScheduler+0x138>)
 800f112:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f114:	78fb      	ldrb	r3, [r7, #3]
 800f116:	b2db      	uxtb	r3, r3
 800f118:	005b      	lsls	r3, r3, #1
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f11e:	78fb      	ldrb	r3, [r7, #3]
 800f120:	b2db      	uxtb	r3, r3
 800f122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f126:	2b80      	cmp	r3, #128	@ 0x80
 800f128:	d0ef      	beq.n	800f10a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f12a:	4b27      	ldr	r3, [pc, #156]	@ (800f1c8 <xPortStartScheduler+0x138>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f1c3 0307 	rsb	r3, r3, #7
 800f132:	2b04      	cmp	r3, #4
 800f134:	d00b      	beq.n	800f14e <xPortStartScheduler+0xbe>
	__asm volatile
 800f136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f13a:	f383 8811 	msr	BASEPRI, r3
 800f13e:	f3bf 8f6f 	isb	sy
 800f142:	f3bf 8f4f 	dsb	sy
 800f146:	60bb      	str	r3, [r7, #8]
}
 800f148:	bf00      	nop
 800f14a:	bf00      	nop
 800f14c:	e7fd      	b.n	800f14a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f14e:	4b1e      	ldr	r3, [pc, #120]	@ (800f1c8 <xPortStartScheduler+0x138>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	021b      	lsls	r3, r3, #8
 800f154:	4a1c      	ldr	r2, [pc, #112]	@ (800f1c8 <xPortStartScheduler+0x138>)
 800f156:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f158:	4b1b      	ldr	r3, [pc, #108]	@ (800f1c8 <xPortStartScheduler+0x138>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f160:	4a19      	ldr	r2, [pc, #100]	@ (800f1c8 <xPortStartScheduler+0x138>)
 800f162:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	b2da      	uxtb	r2, r3
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f16c:	4b17      	ldr	r3, [pc, #92]	@ (800f1cc <xPortStartScheduler+0x13c>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4a16      	ldr	r2, [pc, #88]	@ (800f1cc <xPortStartScheduler+0x13c>)
 800f172:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f176:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f178:	4b14      	ldr	r3, [pc, #80]	@ (800f1cc <xPortStartScheduler+0x13c>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4a13      	ldr	r2, [pc, #76]	@ (800f1cc <xPortStartScheduler+0x13c>)
 800f17e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f182:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f184:	f000 f8da 	bl	800f33c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f188:	4b11      	ldr	r3, [pc, #68]	@ (800f1d0 <xPortStartScheduler+0x140>)
 800f18a:	2200      	movs	r2, #0
 800f18c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f18e:	f000 f8f9 	bl	800f384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f192:	4b10      	ldr	r3, [pc, #64]	@ (800f1d4 <xPortStartScheduler+0x144>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4a0f      	ldr	r2, [pc, #60]	@ (800f1d4 <xPortStartScheduler+0x144>)
 800f198:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f19c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f19e:	f7ff ff63 	bl	800f068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f1a2:	f7ff f817 	bl	800e1d4 <vTaskSwitchContext>
	prvTaskExitError();
 800f1a6:	f7ff ff1d 	bl	800efe4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f1aa:	2300      	movs	r3, #0
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3718      	adds	r7, #24
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	e000ed00 	.word	0xe000ed00
 800f1b8:	410fc271 	.word	0x410fc271
 800f1bc:	410fc270 	.word	0x410fc270
 800f1c0:	e000e400 	.word	0xe000e400
 800f1c4:	20007a14 	.word	0x20007a14
 800f1c8:	20007a18 	.word	0x20007a18
 800f1cc:	e000ed20 	.word	0xe000ed20
 800f1d0:	20000034 	.word	0x20000034
 800f1d4:	e000ef34 	.word	0xe000ef34

0800f1d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b083      	sub	sp, #12
 800f1dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1e2:	f383 8811 	msr	BASEPRI, r3
 800f1e6:	f3bf 8f6f 	isb	sy
 800f1ea:	f3bf 8f4f 	dsb	sy
 800f1ee:	607b      	str	r3, [r7, #4]
}
 800f1f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f1f2:	4b10      	ldr	r3, [pc, #64]	@ (800f234 <vPortEnterCritical+0x5c>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	4a0e      	ldr	r2, [pc, #56]	@ (800f234 <vPortEnterCritical+0x5c>)
 800f1fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f1fc:	4b0d      	ldr	r3, [pc, #52]	@ (800f234 <vPortEnterCritical+0x5c>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2b01      	cmp	r3, #1
 800f202:	d110      	bne.n	800f226 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f204:	4b0c      	ldr	r3, [pc, #48]	@ (800f238 <vPortEnterCritical+0x60>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d00b      	beq.n	800f226 <vPortEnterCritical+0x4e>
	__asm volatile
 800f20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	603b      	str	r3, [r7, #0]
}
 800f220:	bf00      	nop
 800f222:	bf00      	nop
 800f224:	e7fd      	b.n	800f222 <vPortEnterCritical+0x4a>
	}
}
 800f226:	bf00      	nop
 800f228:	370c      	adds	r7, #12
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr
 800f232:	bf00      	nop
 800f234:	20000034 	.word	0x20000034
 800f238:	e000ed04 	.word	0xe000ed04

0800f23c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f23c:	b480      	push	{r7}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f242:	4b12      	ldr	r3, [pc, #72]	@ (800f28c <vPortExitCritical+0x50>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d10b      	bne.n	800f262 <vPortExitCritical+0x26>
	__asm volatile
 800f24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f24e:	f383 8811 	msr	BASEPRI, r3
 800f252:	f3bf 8f6f 	isb	sy
 800f256:	f3bf 8f4f 	dsb	sy
 800f25a:	607b      	str	r3, [r7, #4]
}
 800f25c:	bf00      	nop
 800f25e:	bf00      	nop
 800f260:	e7fd      	b.n	800f25e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f262:	4b0a      	ldr	r3, [pc, #40]	@ (800f28c <vPortExitCritical+0x50>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	3b01      	subs	r3, #1
 800f268:	4a08      	ldr	r2, [pc, #32]	@ (800f28c <vPortExitCritical+0x50>)
 800f26a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f26c:	4b07      	ldr	r3, [pc, #28]	@ (800f28c <vPortExitCritical+0x50>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d105      	bne.n	800f280 <vPortExitCritical+0x44>
 800f274:	2300      	movs	r3, #0
 800f276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	f383 8811 	msr	BASEPRI, r3
}
 800f27e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f280:	bf00      	nop
 800f282:	370c      	adds	r7, #12
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr
 800f28c:	20000034 	.word	0x20000034

0800f290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f290:	f3ef 8009 	mrs	r0, PSP
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	4b15      	ldr	r3, [pc, #84]	@ (800f2f0 <pxCurrentTCBConst>)
 800f29a:	681a      	ldr	r2, [r3, #0]
 800f29c:	f01e 0f10 	tst.w	lr, #16
 800f2a0:	bf08      	it	eq
 800f2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2aa:	6010      	str	r0, [r2, #0]
 800f2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f2b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f2b4:	f380 8811 	msr	BASEPRI, r0
 800f2b8:	f3bf 8f4f 	dsb	sy
 800f2bc:	f3bf 8f6f 	isb	sy
 800f2c0:	f7fe ff88 	bl	800e1d4 <vTaskSwitchContext>
 800f2c4:	f04f 0000 	mov.w	r0, #0
 800f2c8:	f380 8811 	msr	BASEPRI, r0
 800f2cc:	bc09      	pop	{r0, r3}
 800f2ce:	6819      	ldr	r1, [r3, #0]
 800f2d0:	6808      	ldr	r0, [r1, #0]
 800f2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d6:	f01e 0f10 	tst.w	lr, #16
 800f2da:	bf08      	it	eq
 800f2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f2e0:	f380 8809 	msr	PSP, r0
 800f2e4:	f3bf 8f6f 	isb	sy
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop
 800f2ec:	f3af 8000 	nop.w

0800f2f0 <pxCurrentTCBConst>:
 800f2f0:	200073e8 	.word	0x200073e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f2f4:	bf00      	nop
 800f2f6:	bf00      	nop

0800f2f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f302:	f383 8811 	msr	BASEPRI, r3
 800f306:	f3bf 8f6f 	isb	sy
 800f30a:	f3bf 8f4f 	dsb	sy
 800f30e:	607b      	str	r3, [r7, #4]
}
 800f310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f312:	f7fe fea5 	bl	800e060 <xTaskIncrementTick>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d003      	beq.n	800f324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f31c:	4b06      	ldr	r3, [pc, #24]	@ (800f338 <xPortSysTickHandler+0x40>)
 800f31e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	2300      	movs	r3, #0
 800f326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	f383 8811 	msr	BASEPRI, r3
}
 800f32e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f330:	bf00      	nop
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	e000ed04 	.word	0xe000ed04

0800f33c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f33c:	b480      	push	{r7}
 800f33e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f340:	4b0b      	ldr	r3, [pc, #44]	@ (800f370 <vPortSetupTimerInterrupt+0x34>)
 800f342:	2200      	movs	r2, #0
 800f344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f346:	4b0b      	ldr	r3, [pc, #44]	@ (800f374 <vPortSetupTimerInterrupt+0x38>)
 800f348:	2200      	movs	r2, #0
 800f34a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f34c:	4b0a      	ldr	r3, [pc, #40]	@ (800f378 <vPortSetupTimerInterrupt+0x3c>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4a0a      	ldr	r2, [pc, #40]	@ (800f37c <vPortSetupTimerInterrupt+0x40>)
 800f352:	fba2 2303 	umull	r2, r3, r2, r3
 800f356:	099b      	lsrs	r3, r3, #6
 800f358:	4a09      	ldr	r2, [pc, #36]	@ (800f380 <vPortSetupTimerInterrupt+0x44>)
 800f35a:	3b01      	subs	r3, #1
 800f35c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f35e:	4b04      	ldr	r3, [pc, #16]	@ (800f370 <vPortSetupTimerInterrupt+0x34>)
 800f360:	2207      	movs	r2, #7
 800f362:	601a      	str	r2, [r3, #0]
}
 800f364:	bf00      	nop
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	e000e010 	.word	0xe000e010
 800f374:	e000e018 	.word	0xe000e018
 800f378:	20000008 	.word	0x20000008
 800f37c:	10624dd3 	.word	0x10624dd3
 800f380:	e000e014 	.word	0xe000e014

0800f384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f384:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f394 <vPortEnableVFP+0x10>
 800f388:	6801      	ldr	r1, [r0, #0]
 800f38a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f38e:	6001      	str	r1, [r0, #0]
 800f390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f392:	bf00      	nop
 800f394:	e000ed88 	.word	0xe000ed88

0800f398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f398:	b480      	push	{r7}
 800f39a:	b085      	sub	sp, #20
 800f39c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f39e:	f3ef 8305 	mrs	r3, IPSR
 800f3a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2b0f      	cmp	r3, #15
 800f3a8:	d915      	bls.n	800f3d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f3aa:	4a18      	ldr	r2, [pc, #96]	@ (800f40c <vPortValidateInterruptPriority+0x74>)
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f3b4:	4b16      	ldr	r3, [pc, #88]	@ (800f410 <vPortValidateInterruptPriority+0x78>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	7afa      	ldrb	r2, [r7, #11]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d20b      	bcs.n	800f3d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3c2:	f383 8811 	msr	BASEPRI, r3
 800f3c6:	f3bf 8f6f 	isb	sy
 800f3ca:	f3bf 8f4f 	dsb	sy
 800f3ce:	607b      	str	r3, [r7, #4]
}
 800f3d0:	bf00      	nop
 800f3d2:	bf00      	nop
 800f3d4:	e7fd      	b.n	800f3d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f3d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f414 <vPortValidateInterruptPriority+0x7c>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f3de:	4b0e      	ldr	r3, [pc, #56]	@ (800f418 <vPortValidateInterruptPriority+0x80>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d90b      	bls.n	800f3fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ea:	f383 8811 	msr	BASEPRI, r3
 800f3ee:	f3bf 8f6f 	isb	sy
 800f3f2:	f3bf 8f4f 	dsb	sy
 800f3f6:	603b      	str	r3, [r7, #0]
}
 800f3f8:	bf00      	nop
 800f3fa:	bf00      	nop
 800f3fc:	e7fd      	b.n	800f3fa <vPortValidateInterruptPriority+0x62>
	}
 800f3fe:	bf00      	nop
 800f400:	3714      	adds	r7, #20
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr
 800f40a:	bf00      	nop
 800f40c:	e000e3f0 	.word	0xe000e3f0
 800f410:	20007a14 	.word	0x20007a14
 800f414:	e000ed0c 	.word	0xe000ed0c
 800f418:	20007a18 	.word	0x20007a18

0800f41c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b08a      	sub	sp, #40	@ 0x28
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f424:	2300      	movs	r3, #0
 800f426:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f428:	f7fe fd5e 	bl	800dee8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f42c:	4b5c      	ldr	r3, [pc, #368]	@ (800f5a0 <pvPortMalloc+0x184>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d101      	bne.n	800f438 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f434:	f000 f924 	bl	800f680 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f438:	4b5a      	ldr	r3, [pc, #360]	@ (800f5a4 <pvPortMalloc+0x188>)
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4013      	ands	r3, r2
 800f440:	2b00      	cmp	r3, #0
 800f442:	f040 8095 	bne.w	800f570 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d01e      	beq.n	800f48a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f44c:	2208      	movs	r2, #8
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4413      	add	r3, r2
 800f452:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f003 0307 	and.w	r3, r3, #7
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d015      	beq.n	800f48a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f023 0307 	bic.w	r3, r3, #7
 800f464:	3308      	adds	r3, #8
 800f466:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f003 0307 	and.w	r3, r3, #7
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00b      	beq.n	800f48a <pvPortMalloc+0x6e>
	__asm volatile
 800f472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f476:	f383 8811 	msr	BASEPRI, r3
 800f47a:	f3bf 8f6f 	isb	sy
 800f47e:	f3bf 8f4f 	dsb	sy
 800f482:	617b      	str	r3, [r7, #20]
}
 800f484:	bf00      	nop
 800f486:	bf00      	nop
 800f488:	e7fd      	b.n	800f486 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d06f      	beq.n	800f570 <pvPortMalloc+0x154>
 800f490:	4b45      	ldr	r3, [pc, #276]	@ (800f5a8 <pvPortMalloc+0x18c>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	429a      	cmp	r2, r3
 800f498:	d86a      	bhi.n	800f570 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f49a:	4b44      	ldr	r3, [pc, #272]	@ (800f5ac <pvPortMalloc+0x190>)
 800f49c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f49e:	4b43      	ldr	r3, [pc, #268]	@ (800f5ac <pvPortMalloc+0x190>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4a4:	e004      	b.n	800f4b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b2:	685b      	ldr	r3, [r3, #4]
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d903      	bls.n	800f4c2 <pvPortMalloc+0xa6>
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d1f1      	bne.n	800f4a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f4c2:	4b37      	ldr	r3, [pc, #220]	@ (800f5a0 <pvPortMalloc+0x184>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d051      	beq.n	800f570 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4cc:	6a3b      	ldr	r3, [r7, #32]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2208      	movs	r2, #8
 800f4d2:	4413      	add	r3, r2
 800f4d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	6a3b      	ldr	r3, [r7, #32]
 800f4dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4e0:	685a      	ldr	r2, [r3, #4]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	1ad2      	subs	r2, r2, r3
 800f4e6:	2308      	movs	r3, #8
 800f4e8:	005b      	lsls	r3, r3, #1
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d920      	bls.n	800f530 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f4ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4f6:	69bb      	ldr	r3, [r7, #24]
 800f4f8:	f003 0307 	and.w	r3, r3, #7
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00b      	beq.n	800f518 <pvPortMalloc+0xfc>
	__asm volatile
 800f500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f504:	f383 8811 	msr	BASEPRI, r3
 800f508:	f3bf 8f6f 	isb	sy
 800f50c:	f3bf 8f4f 	dsb	sy
 800f510:	613b      	str	r3, [r7, #16]
}
 800f512:	bf00      	nop
 800f514:	bf00      	nop
 800f516:	e7fd      	b.n	800f514 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f51a:	685a      	ldr	r2, [r3, #4]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	1ad2      	subs	r2, r2, r3
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f52a:	69b8      	ldr	r0, [r7, #24]
 800f52c:	f000 f90a 	bl	800f744 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f530:	4b1d      	ldr	r3, [pc, #116]	@ (800f5a8 <pvPortMalloc+0x18c>)
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	1ad3      	subs	r3, r2, r3
 800f53a:	4a1b      	ldr	r2, [pc, #108]	@ (800f5a8 <pvPortMalloc+0x18c>)
 800f53c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f53e:	4b1a      	ldr	r3, [pc, #104]	@ (800f5a8 <pvPortMalloc+0x18c>)
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	4b1b      	ldr	r3, [pc, #108]	@ (800f5b0 <pvPortMalloc+0x194>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	429a      	cmp	r2, r3
 800f548:	d203      	bcs.n	800f552 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f54a:	4b17      	ldr	r3, [pc, #92]	@ (800f5a8 <pvPortMalloc+0x18c>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	4a18      	ldr	r2, [pc, #96]	@ (800f5b0 <pvPortMalloc+0x194>)
 800f550:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f554:	685a      	ldr	r2, [r3, #4]
 800f556:	4b13      	ldr	r3, [pc, #76]	@ (800f5a4 <pvPortMalloc+0x188>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	431a      	orrs	r2, r3
 800f55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f55e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f562:	2200      	movs	r2, #0
 800f564:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f566:	4b13      	ldr	r3, [pc, #76]	@ (800f5b4 <pvPortMalloc+0x198>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	3301      	adds	r3, #1
 800f56c:	4a11      	ldr	r2, [pc, #68]	@ (800f5b4 <pvPortMalloc+0x198>)
 800f56e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f570:	f7fe fcc8 	bl	800df04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	f003 0307 	and.w	r3, r3, #7
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00b      	beq.n	800f596 <pvPortMalloc+0x17a>
	__asm volatile
 800f57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	60fb      	str	r3, [r7, #12]
}
 800f590:	bf00      	nop
 800f592:	bf00      	nop
 800f594:	e7fd      	b.n	800f592 <pvPortMalloc+0x176>
	return pvReturn;
 800f596:	69fb      	ldr	r3, [r7, #28]
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3728      	adds	r7, #40	@ 0x28
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	2000da24 	.word	0x2000da24
 800f5a4:	2000da38 	.word	0x2000da38
 800f5a8:	2000da28 	.word	0x2000da28
 800f5ac:	2000da1c 	.word	0x2000da1c
 800f5b0:	2000da2c 	.word	0x2000da2c
 800f5b4:	2000da30 	.word	0x2000da30

0800f5b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b086      	sub	sp, #24
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d04f      	beq.n	800f66a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f5ca:	2308      	movs	r3, #8
 800f5cc:	425b      	negs	r3, r3
 800f5ce:	697a      	ldr	r2, [r7, #20]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	685a      	ldr	r2, [r3, #4]
 800f5dc:	4b25      	ldr	r3, [pc, #148]	@ (800f674 <vPortFree+0xbc>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4013      	ands	r3, r2
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d10b      	bne.n	800f5fe <vPortFree+0x46>
	__asm volatile
 800f5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ea:	f383 8811 	msr	BASEPRI, r3
 800f5ee:	f3bf 8f6f 	isb	sy
 800f5f2:	f3bf 8f4f 	dsb	sy
 800f5f6:	60fb      	str	r3, [r7, #12]
}
 800f5f8:	bf00      	nop
 800f5fa:	bf00      	nop
 800f5fc:	e7fd      	b.n	800f5fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d00b      	beq.n	800f61e <vPortFree+0x66>
	__asm volatile
 800f606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f60a:	f383 8811 	msr	BASEPRI, r3
 800f60e:	f3bf 8f6f 	isb	sy
 800f612:	f3bf 8f4f 	dsb	sy
 800f616:	60bb      	str	r3, [r7, #8]
}
 800f618:	bf00      	nop
 800f61a:	bf00      	nop
 800f61c:	e7fd      	b.n	800f61a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	685a      	ldr	r2, [r3, #4]
 800f622:	4b14      	ldr	r3, [pc, #80]	@ (800f674 <vPortFree+0xbc>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	4013      	ands	r3, r2
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d01e      	beq.n	800f66a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d11a      	bne.n	800f66a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	685a      	ldr	r2, [r3, #4]
 800f638:	4b0e      	ldr	r3, [pc, #56]	@ (800f674 <vPortFree+0xbc>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	43db      	mvns	r3, r3
 800f63e:	401a      	ands	r2, r3
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f644:	f7fe fc50 	bl	800dee8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	685a      	ldr	r2, [r3, #4]
 800f64c:	4b0a      	ldr	r3, [pc, #40]	@ (800f678 <vPortFree+0xc0>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4413      	add	r3, r2
 800f652:	4a09      	ldr	r2, [pc, #36]	@ (800f678 <vPortFree+0xc0>)
 800f654:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f656:	6938      	ldr	r0, [r7, #16]
 800f658:	f000 f874 	bl	800f744 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f65c:	4b07      	ldr	r3, [pc, #28]	@ (800f67c <vPortFree+0xc4>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	3301      	adds	r3, #1
 800f662:	4a06      	ldr	r2, [pc, #24]	@ (800f67c <vPortFree+0xc4>)
 800f664:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f666:	f7fe fc4d 	bl	800df04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f66a:	bf00      	nop
 800f66c:	3718      	adds	r7, #24
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	2000da38 	.word	0x2000da38
 800f678:	2000da28 	.word	0x2000da28
 800f67c:	2000da34 	.word	0x2000da34

0800f680 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f680:	b480      	push	{r7}
 800f682:	b085      	sub	sp, #20
 800f684:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f686:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800f68a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f68c:	4b27      	ldr	r3, [pc, #156]	@ (800f72c <prvHeapInit+0xac>)
 800f68e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f003 0307 	and.w	r3, r3, #7
 800f696:	2b00      	cmp	r3, #0
 800f698:	d00c      	beq.n	800f6b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	3307      	adds	r3, #7
 800f69e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f023 0307 	bic.w	r3, r3, #7
 800f6a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f6a8:	68ba      	ldr	r2, [r7, #8]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	4a1f      	ldr	r2, [pc, #124]	@ (800f72c <prvHeapInit+0xac>)
 800f6b0:	4413      	add	r3, r2
 800f6b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f6b8:	4a1d      	ldr	r2, [pc, #116]	@ (800f730 <prvHeapInit+0xb0>)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f6be:	4b1c      	ldr	r3, [pc, #112]	@ (800f730 <prvHeapInit+0xb0>)
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f6cc:	2208      	movs	r2, #8
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	1a9b      	subs	r3, r3, r2
 800f6d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f023 0307 	bic.w	r3, r3, #7
 800f6da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	4a15      	ldr	r2, [pc, #84]	@ (800f734 <prvHeapInit+0xb4>)
 800f6e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f6e2:	4b14      	ldr	r3, [pc, #80]	@ (800f734 <prvHeapInit+0xb4>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f6ea:	4b12      	ldr	r3, [pc, #72]	@ (800f734 <prvHeapInit+0xb4>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	68fa      	ldr	r2, [r7, #12]
 800f6fa:	1ad2      	subs	r2, r2, r3
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f700:	4b0c      	ldr	r3, [pc, #48]	@ (800f734 <prvHeapInit+0xb4>)
 800f702:	681a      	ldr	r2, [r3, #0]
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	685b      	ldr	r3, [r3, #4]
 800f70c:	4a0a      	ldr	r2, [pc, #40]	@ (800f738 <prvHeapInit+0xb8>)
 800f70e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	4a09      	ldr	r2, [pc, #36]	@ (800f73c <prvHeapInit+0xbc>)
 800f716:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f718:	4b09      	ldr	r3, [pc, #36]	@ (800f740 <prvHeapInit+0xc0>)
 800f71a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f71e:	601a      	str	r2, [r3, #0]
}
 800f720:	bf00      	nop
 800f722:	3714      	adds	r7, #20
 800f724:	46bd      	mov	sp, r7
 800f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72a:	4770      	bx	lr
 800f72c:	20007a1c 	.word	0x20007a1c
 800f730:	2000da1c 	.word	0x2000da1c
 800f734:	2000da24 	.word	0x2000da24
 800f738:	2000da2c 	.word	0x2000da2c
 800f73c:	2000da28 	.word	0x2000da28
 800f740:	2000da38 	.word	0x2000da38

0800f744 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f744:	b480      	push	{r7}
 800f746:	b085      	sub	sp, #20
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f74c:	4b28      	ldr	r3, [pc, #160]	@ (800f7f0 <prvInsertBlockIntoFreeList+0xac>)
 800f74e:	60fb      	str	r3, [r7, #12]
 800f750:	e002      	b.n	800f758 <prvInsertBlockIntoFreeList+0x14>
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	60fb      	str	r3, [r7, #12]
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	429a      	cmp	r2, r3
 800f760:	d8f7      	bhi.n	800f752 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	68ba      	ldr	r2, [r7, #8]
 800f76c:	4413      	add	r3, r2
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	429a      	cmp	r2, r3
 800f772:	d108      	bne.n	800f786 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	685a      	ldr	r2, [r3, #4]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	441a      	add	r2, r3
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	68ba      	ldr	r2, [r7, #8]
 800f790:	441a      	add	r2, r3
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	429a      	cmp	r2, r3
 800f798:	d118      	bne.n	800f7cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	4b15      	ldr	r3, [pc, #84]	@ (800f7f4 <prvInsertBlockIntoFreeList+0xb0>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d00d      	beq.n	800f7c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	685a      	ldr	r2, [r3, #4]
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	441a      	add	r2, r3
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	601a      	str	r2, [r3, #0]
 800f7c0:	e008      	b.n	800f7d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f7c2:	4b0c      	ldr	r3, [pc, #48]	@ (800f7f4 <prvInsertBlockIntoFreeList+0xb0>)
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	601a      	str	r2, [r3, #0]
 800f7ca:	e003      	b.n	800f7d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681a      	ldr	r2, [r3, #0]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f7d4:	68fa      	ldr	r2, [r7, #12]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d002      	beq.n	800f7e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	687a      	ldr	r2, [r7, #4]
 800f7e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7e2:	bf00      	nop
 800f7e4:	3714      	adds	r7, #20
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr
 800f7ee:	bf00      	nop
 800f7f0:	2000da1c 	.word	0x2000da1c
 800f7f4:	2000da24 	.word	0x2000da24

0800f7f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	490e      	ldr	r1, [pc, #56]	@ (800f838 <MX_USB_HOST_Init+0x40>)
 800f800:	480e      	ldr	r0, [pc, #56]	@ (800f83c <MX_USB_HOST_Init+0x44>)
 800f802:	f7fb f9af 	bl	800ab64 <USBH_Init>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d001      	beq.n	800f810 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f80c:	f7f1 ff5c 	bl	80016c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f810:	490b      	ldr	r1, [pc, #44]	@ (800f840 <MX_USB_HOST_Init+0x48>)
 800f812:	480a      	ldr	r0, [pc, #40]	@ (800f83c <MX_USB_HOST_Init+0x44>)
 800f814:	f7fb fa73 	bl	800acfe <USBH_RegisterClass>
 800f818:	4603      	mov	r3, r0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d001      	beq.n	800f822 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f81e:	f7f1 ff53 	bl	80016c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f822:	4806      	ldr	r0, [pc, #24]	@ (800f83c <MX_USB_HOST_Init+0x44>)
 800f824:	f7fb faf7 	bl	800ae16 <USBH_Start>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d001      	beq.n	800f832 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f82e:	f7f1 ff4b 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f832:	bf00      	nop
 800f834:	bd80      	pop	{r7, pc}
 800f836:	bf00      	nop
 800f838:	0800f845 	.word	0x0800f845
 800f83c:	2000da3c 	.word	0x2000da3c
 800f840:	20000014 	.word	0x20000014

0800f844 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	460b      	mov	r3, r1
 800f84e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f850:	78fb      	ldrb	r3, [r7, #3]
 800f852:	3b01      	subs	r3, #1
 800f854:	2b04      	cmp	r3, #4
 800f856:	d819      	bhi.n	800f88c <USBH_UserProcess+0x48>
 800f858:	a201      	add	r2, pc, #4	@ (adr r2, 800f860 <USBH_UserProcess+0x1c>)
 800f85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f85e:	bf00      	nop
 800f860:	0800f88d 	.word	0x0800f88d
 800f864:	0800f87d 	.word	0x0800f87d
 800f868:	0800f88d 	.word	0x0800f88d
 800f86c:	0800f885 	.word	0x0800f885
 800f870:	0800f875 	.word	0x0800f875
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f874:	4b09      	ldr	r3, [pc, #36]	@ (800f89c <USBH_UserProcess+0x58>)
 800f876:	2203      	movs	r2, #3
 800f878:	701a      	strb	r2, [r3, #0]
  break;
 800f87a:	e008      	b.n	800f88e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f87c:	4b07      	ldr	r3, [pc, #28]	@ (800f89c <USBH_UserProcess+0x58>)
 800f87e:	2202      	movs	r2, #2
 800f880:	701a      	strb	r2, [r3, #0]
  break;
 800f882:	e004      	b.n	800f88e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f884:	4b05      	ldr	r3, [pc, #20]	@ (800f89c <USBH_UserProcess+0x58>)
 800f886:	2201      	movs	r2, #1
 800f888:	701a      	strb	r2, [r3, #0]
  break;
 800f88a:	e000      	b.n	800f88e <USBH_UserProcess+0x4a>

  default:
  break;
 800f88c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f88e:	bf00      	nop
 800f890:	370c      	adds	r7, #12
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr
 800f89a:	bf00      	nop
 800f89c:	2000de20 	.word	0x2000de20

0800f8a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b08a      	sub	sp, #40	@ 0x28
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f8a8:	f107 0314 	add.w	r3, r7, #20
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	601a      	str	r2, [r3, #0]
 800f8b0:	605a      	str	r2, [r3, #4]
 800f8b2:	609a      	str	r2, [r3, #8]
 800f8b4:	60da      	str	r2, [r3, #12]
 800f8b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f8c0:	d147      	bne.n	800f952 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	613b      	str	r3, [r7, #16]
 800f8c6:	4b25      	ldr	r3, [pc, #148]	@ (800f95c <HAL_HCD_MspInit+0xbc>)
 800f8c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8ca:	4a24      	ldr	r2, [pc, #144]	@ (800f95c <HAL_HCD_MspInit+0xbc>)
 800f8cc:	f043 0301 	orr.w	r3, r3, #1
 800f8d0:	6313      	str	r3, [r2, #48]	@ 0x30
 800f8d2:	4b22      	ldr	r3, [pc, #136]	@ (800f95c <HAL_HCD_MspInit+0xbc>)
 800f8d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8d6:	f003 0301 	and.w	r3, r3, #1
 800f8da:	613b      	str	r3, [r7, #16]
 800f8dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800f8de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f8e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f8ec:	f107 0314 	add.w	r3, r7, #20
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	481b      	ldr	r0, [pc, #108]	@ (800f960 <HAL_HCD_MspInit+0xc0>)
 800f8f4:	f7f3 fa04 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800f8f8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800f8fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8fe:	2302      	movs	r3, #2
 800f900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f902:	2300      	movs	r3, #0
 800f904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f906:	2300      	movs	r3, #0
 800f908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f90a:	230a      	movs	r3, #10
 800f90c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f90e:	f107 0314 	add.w	r3, r7, #20
 800f912:	4619      	mov	r1, r3
 800f914:	4812      	ldr	r0, [pc, #72]	@ (800f960 <HAL_HCD_MspInit+0xc0>)
 800f916:	f7f3 f9f3 	bl	8002d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f91a:	4b10      	ldr	r3, [pc, #64]	@ (800f95c <HAL_HCD_MspInit+0xbc>)
 800f91c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f91e:	4a0f      	ldr	r2, [pc, #60]	@ (800f95c <HAL_HCD_MspInit+0xbc>)
 800f920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f924:	6353      	str	r3, [r2, #52]	@ 0x34
 800f926:	2300      	movs	r3, #0
 800f928:	60fb      	str	r3, [r7, #12]
 800f92a:	4b0c      	ldr	r3, [pc, #48]	@ (800f95c <HAL_HCD_MspInit+0xbc>)
 800f92c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f92e:	4a0b      	ldr	r2, [pc, #44]	@ (800f95c <HAL_HCD_MspInit+0xbc>)
 800f930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f934:	6453      	str	r3, [r2, #68]	@ 0x44
 800f936:	4b09      	ldr	r3, [pc, #36]	@ (800f95c <HAL_HCD_MspInit+0xbc>)
 800f938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f93a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f93e:	60fb      	str	r3, [r7, #12]
 800f940:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f942:	2200      	movs	r2, #0
 800f944:	2105      	movs	r1, #5
 800f946:	2043      	movs	r0, #67	@ 0x43
 800f948:	f7f2 fdae 	bl	80024a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f94c:	2043      	movs	r0, #67	@ 0x43
 800f94e:	f7f2 fdc7 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f952:	bf00      	nop
 800f954:	3728      	adds	r7, #40	@ 0x28
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	40023800 	.word	0x40023800
 800f960:	40020000 	.word	0x40020000

0800f964 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f972:	4618      	mov	r0, r3
 800f974:	f7fb fe87 	bl	800b686 <USBH_LL_IncTimer>
}
 800f978:	bf00      	nop
 800f97a:	3708      	adds	r7, #8
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f98e:	4618      	mov	r0, r3
 800f990:	f7fb fec7 	bl	800b722 <USBH_LL_Connect>
}
 800f994:	bf00      	nop
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7fb fed4 	bl	800b758 <USBH_LL_Disconnect>
}
 800f9b0:	bf00      	nop
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	70fb      	strb	r3, [r7, #3]
 800f9c4:	4613      	mov	r3, r2
 800f9c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fb ff27 	bl	800b822 <USBH_LL_NotifyURBChange>
#endif
}
 800f9d4:	bf00      	nop
 800f9d6:	3708      	adds	r7, #8
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fb fe75 	bl	800b6da <USBH_LL_PortEnabled>
}
 800f9f0:	bf00      	nop
 800f9f2:	3708      	adds	r7, #8
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fb fe79 	bl	800b6fe <USBH_LL_PortDisabled>
}
 800fa0c:	bf00      	nop
 800fa0e:	3708      	adds	r7, #8
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d12a      	bne.n	800fa7c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800fa26:	4a18      	ldr	r2, [pc, #96]	@ (800fa88 <USBH_LL_Init+0x74>)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4a15      	ldr	r2, [pc, #84]	@ (800fa88 <USBH_LL_Init+0x74>)
 800fa32:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fa36:	4b14      	ldr	r3, [pc, #80]	@ (800fa88 <USBH_LL_Init+0x74>)
 800fa38:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800fa3c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800fa3e:	4b12      	ldr	r3, [pc, #72]	@ (800fa88 <USBH_LL_Init+0x74>)
 800fa40:	2208      	movs	r2, #8
 800fa42:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800fa44:	4b10      	ldr	r3, [pc, #64]	@ (800fa88 <USBH_LL_Init+0x74>)
 800fa46:	2201      	movs	r2, #1
 800fa48:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fa4a:	4b0f      	ldr	r3, [pc, #60]	@ (800fa88 <USBH_LL_Init+0x74>)
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800fa50:	4b0d      	ldr	r3, [pc, #52]	@ (800fa88 <USBH_LL_Init+0x74>)
 800fa52:	2202      	movs	r2, #2
 800fa54:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fa56:	4b0c      	ldr	r3, [pc, #48]	@ (800fa88 <USBH_LL_Init+0x74>)
 800fa58:	2200      	movs	r2, #0
 800fa5a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800fa5c:	480a      	ldr	r0, [pc, #40]	@ (800fa88 <USBH_LL_Init+0x74>)
 800fa5e:	f7f3 fb1c 	bl	800309a <HAL_HCD_Init>
 800fa62:	4603      	mov	r3, r0
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d001      	beq.n	800fa6c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800fa68:	f7f1 fe2e 	bl	80016c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800fa6c:	4806      	ldr	r0, [pc, #24]	@ (800fa88 <USBH_LL_Init+0x74>)
 800fa6e:	f7f3 ff7d 	bl	800396c <HAL_HCD_GetCurrentFrame>
 800fa72:	4603      	mov	r3, r0
 800fa74:	4619      	mov	r1, r3
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7fb fdf6 	bl	800b668 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fa7c:	2300      	movs	r3, #0
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3708      	adds	r7, #8
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}
 800fa86:	bf00      	nop
 800fa88:	2000de24 	.word	0x2000de24

0800fa8c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b084      	sub	sp, #16
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa94:	2300      	movs	r3, #0
 800fa96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7f3 feea 	bl	800387c <HAL_HCD_Start>
 800faa8:	4603      	mov	r3, r0
 800faaa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800faac:	7bfb      	ldrb	r3, [r7, #15]
 800faae:	4618      	mov	r0, r3
 800fab0:	f000 f95e 	bl	800fd70 <USBH_Get_USB_Status>
 800fab4:	4603      	mov	r3, r0
 800fab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fab8:	7bbb      	ldrb	r3, [r7, #14]
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3710      	adds	r7, #16
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b084      	sub	sp, #16
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faca:	2300      	movs	r3, #0
 800facc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800face:	2300      	movs	r3, #0
 800fad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fad8:	4618      	mov	r0, r3
 800fada:	f7f3 fef2 	bl	80038c2 <HAL_HCD_Stop>
 800fade:	4603      	mov	r3, r0
 800fae0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fae2:	7bfb      	ldrb	r3, [r7, #15]
 800fae4:	4618      	mov	r0, r3
 800fae6:	f000 f943 	bl	800fd70 <USBH_Get_USB_Status>
 800faea:	4603      	mov	r3, r0
 800faec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faee:	7bbb      	ldrb	r3, [r7, #14]
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fb00:	2301      	movs	r3, #1
 800fb02:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7f3 ff3c 	bl	8003988 <HAL_HCD_GetCurrentSpeed>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b02      	cmp	r3, #2
 800fb14:	d00c      	beq.n	800fb30 <USBH_LL_GetSpeed+0x38>
 800fb16:	2b02      	cmp	r3, #2
 800fb18:	d80d      	bhi.n	800fb36 <USBH_LL_GetSpeed+0x3e>
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d002      	beq.n	800fb24 <USBH_LL_GetSpeed+0x2c>
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d003      	beq.n	800fb2a <USBH_LL_GetSpeed+0x32>
 800fb22:	e008      	b.n	800fb36 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fb24:	2300      	movs	r3, #0
 800fb26:	73fb      	strb	r3, [r7, #15]
    break;
 800fb28:	e008      	b.n	800fb3c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	73fb      	strb	r3, [r7, #15]
    break;
 800fb2e:	e005      	b.n	800fb3c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fb30:	2302      	movs	r3, #2
 800fb32:	73fb      	strb	r3, [r7, #15]
    break;
 800fb34:	e002      	b.n	800fb3c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fb36:	2301      	movs	r3, #1
 800fb38:	73fb      	strb	r3, [r7, #15]
    break;
 800fb3a:	bf00      	nop
  }
  return  speed;
 800fb3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}

0800fb46 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fb46:	b580      	push	{r7, lr}
 800fb48:	b084      	sub	sp, #16
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb52:	2300      	movs	r3, #0
 800fb54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7f3 fecd 	bl	80038fc <HAL_HCD_ResetPort>
 800fb62:	4603      	mov	r3, r0
 800fb64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb66:	7bfb      	ldrb	r3, [r7, #15]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f000 f901 	bl	800fd70 <USBH_Get_USB_Status>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb72:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3710      	adds	r7, #16
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	460b      	mov	r3, r1
 800fb86:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb8e:	78fa      	ldrb	r2, [r7, #3]
 800fb90:	4611      	mov	r1, r2
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7f3 fed5 	bl	8003942 <HAL_HCD_HC_GetXferCount>
 800fb98:	4603      	mov	r3, r0
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3708      	adds	r7, #8
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fba2:	b590      	push	{r4, r7, lr}
 800fba4:	b089      	sub	sp, #36	@ 0x24
 800fba6:	af04      	add	r7, sp, #16
 800fba8:	6078      	str	r0, [r7, #4]
 800fbaa:	4608      	mov	r0, r1
 800fbac:	4611      	mov	r1, r2
 800fbae:	461a      	mov	r2, r3
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	70fb      	strb	r3, [r7, #3]
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	70bb      	strb	r3, [r7, #2]
 800fbb8:	4613      	mov	r3, r2
 800fbba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fbca:	787c      	ldrb	r4, [r7, #1]
 800fbcc:	78ba      	ldrb	r2, [r7, #2]
 800fbce:	78f9      	ldrb	r1, [r7, #3]
 800fbd0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fbd2:	9302      	str	r3, [sp, #8]
 800fbd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fbd8:	9301      	str	r3, [sp, #4]
 800fbda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fbde:	9300      	str	r3, [sp, #0]
 800fbe0:	4623      	mov	r3, r4
 800fbe2:	f7f3 fac1 	bl	8003168 <HAL_HCD_HC_Init>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fbea:	7bfb      	ldrb	r3, [r7, #15]
 800fbec:	4618      	mov	r0, r3
 800fbee:	f000 f8bf 	bl	800fd70 <USBH_Get_USB_Status>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3714      	adds	r7, #20
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd90      	pop	{r4, r7, pc}

0800fc00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	460b      	mov	r3, r1
 800fc0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc10:	2300      	movs	r3, #0
 800fc12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fc1a:	78fa      	ldrb	r2, [r7, #3]
 800fc1c:	4611      	mov	r1, r2
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7f3 fb5a 	bl	80032d8 <HAL_HCD_HC_Halt>
 800fc24:	4603      	mov	r3, r0
 800fc26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fc28:	7bfb      	ldrb	r3, [r7, #15]
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f000 f8a0 	bl	800fd70 <USBH_Get_USB_Status>
 800fc30:	4603      	mov	r3, r0
 800fc32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc34:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3710      	adds	r7, #16
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fc3e:	b590      	push	{r4, r7, lr}
 800fc40:	b089      	sub	sp, #36	@ 0x24
 800fc42:	af04      	add	r7, sp, #16
 800fc44:	6078      	str	r0, [r7, #4]
 800fc46:	4608      	mov	r0, r1
 800fc48:	4611      	mov	r1, r2
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	70fb      	strb	r3, [r7, #3]
 800fc50:	460b      	mov	r3, r1
 800fc52:	70bb      	strb	r3, [r7, #2]
 800fc54:	4613      	mov	r3, r2
 800fc56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fc66:	787c      	ldrb	r4, [r7, #1]
 800fc68:	78ba      	ldrb	r2, [r7, #2]
 800fc6a:	78f9      	ldrb	r1, [r7, #3]
 800fc6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc70:	9303      	str	r3, [sp, #12]
 800fc72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fc74:	9302      	str	r3, [sp, #8]
 800fc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc78:	9301      	str	r3, [sp, #4]
 800fc7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc7e:	9300      	str	r3, [sp, #0]
 800fc80:	4623      	mov	r3, r4
 800fc82:	f7f3 fb4d 	bl	8003320 <HAL_HCD_HC_SubmitRequest>
 800fc86:	4603      	mov	r3, r0
 800fc88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fc8a:	7bfb      	ldrb	r3, [r7, #15]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f000 f86f 	bl	800fd70 <USBH_Get_USB_Status>
 800fc92:	4603      	mov	r3, r0
 800fc94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc96:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3714      	adds	r7, #20
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd90      	pop	{r4, r7, pc}

0800fca0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	460b      	mov	r3, r1
 800fcaa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fcb2:	78fa      	ldrb	r2, [r7, #3]
 800fcb4:	4611      	mov	r1, r2
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7f3 fe2e 	bl	8003918 <HAL_HCD_HC_GetURBState>
 800fcbc:	4603      	mov	r3, r0
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3708      	adds	r7, #8
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}

0800fcc6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fcc6:	b580      	push	{r7, lr}
 800fcc8:	b082      	sub	sp, #8
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
 800fcce:	460b      	mov	r3, r1
 800fcd0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d103      	bne.n	800fce4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fcdc:	78fb      	ldrb	r3, [r7, #3]
 800fcde:	4618      	mov	r0, r3
 800fce0:	f000 f872 	bl	800fdc8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fce4:	20c8      	movs	r0, #200	@ 0xc8
 800fce6:	f7f2 fb03 	bl	80022f0 <HAL_Delay>
  return USBH_OK;
 800fcea:	2300      	movs	r3, #0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b085      	sub	sp, #20
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	70fb      	strb	r3, [r7, #3]
 800fd00:	4613      	mov	r3, r2
 800fd02:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fd0a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fd0c:	78fa      	ldrb	r2, [r7, #3]
 800fd0e:	68f9      	ldr	r1, [r7, #12]
 800fd10:	4613      	mov	r3, r2
 800fd12:	011b      	lsls	r3, r3, #4
 800fd14:	1a9b      	subs	r3, r3, r2
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	440b      	add	r3, r1
 800fd1a:	3317      	adds	r3, #23
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d00a      	beq.n	800fd38 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fd22:	78fa      	ldrb	r2, [r7, #3]
 800fd24:	68f9      	ldr	r1, [r7, #12]
 800fd26:	4613      	mov	r3, r2
 800fd28:	011b      	lsls	r3, r3, #4
 800fd2a:	1a9b      	subs	r3, r3, r2
 800fd2c:	009b      	lsls	r3, r3, #2
 800fd2e:	440b      	add	r3, r1
 800fd30:	333c      	adds	r3, #60	@ 0x3c
 800fd32:	78ba      	ldrb	r2, [r7, #2]
 800fd34:	701a      	strb	r2, [r3, #0]
 800fd36:	e009      	b.n	800fd4c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fd38:	78fa      	ldrb	r2, [r7, #3]
 800fd3a:	68f9      	ldr	r1, [r7, #12]
 800fd3c:	4613      	mov	r3, r2
 800fd3e:	011b      	lsls	r3, r3, #4
 800fd40:	1a9b      	subs	r3, r3, r2
 800fd42:	009b      	lsls	r3, r3, #2
 800fd44:	440b      	add	r3, r1
 800fd46:	333d      	adds	r3, #61	@ 0x3d
 800fd48:	78ba      	ldrb	r2, [r7, #2]
 800fd4a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fd4c:	2300      	movs	r3, #0
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3714      	adds	r7, #20
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr

0800fd5a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b082      	sub	sp, #8
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f7f2 fac4 	bl	80022f0 <HAL_Delay>
}
 800fd68:	bf00      	nop
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	4603      	mov	r3, r0
 800fd78:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fd7e:	79fb      	ldrb	r3, [r7, #7]
 800fd80:	2b03      	cmp	r3, #3
 800fd82:	d817      	bhi.n	800fdb4 <USBH_Get_USB_Status+0x44>
 800fd84:	a201      	add	r2, pc, #4	@ (adr r2, 800fd8c <USBH_Get_USB_Status+0x1c>)
 800fd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd8a:	bf00      	nop
 800fd8c:	0800fd9d 	.word	0x0800fd9d
 800fd90:	0800fda3 	.word	0x0800fda3
 800fd94:	0800fda9 	.word	0x0800fda9
 800fd98:	0800fdaf 	.word	0x0800fdaf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	73fb      	strb	r3, [r7, #15]
    break;
 800fda0:	e00b      	b.n	800fdba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fda2:	2302      	movs	r3, #2
 800fda4:	73fb      	strb	r3, [r7, #15]
    break;
 800fda6:	e008      	b.n	800fdba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fda8:	2301      	movs	r3, #1
 800fdaa:	73fb      	strb	r3, [r7, #15]
    break;
 800fdac:	e005      	b.n	800fdba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fdae:	2302      	movs	r3, #2
 800fdb0:	73fb      	strb	r3, [r7, #15]
    break;
 800fdb2:	e002      	b.n	800fdba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fdb4:	2302      	movs	r3, #2
 800fdb6:	73fb      	strb	r3, [r7, #15]
    break;
 800fdb8:	bf00      	nop
  }
  return usb_status;
 800fdba:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3714      	adds	r7, #20
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr

0800fdc8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	4603      	mov	r3, r0
 800fdd0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fdd2:	79fb      	ldrb	r3, [r7, #7]
 800fdd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fdd6:	79fb      	ldrb	r3, [r7, #7]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d102      	bne.n	800fde2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800fddc:	2300      	movs	r3, #0
 800fdde:	73fb      	strb	r3, [r7, #15]
 800fde0:	e001      	b.n	800fde6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800fde2:	2301      	movs	r3, #1
 800fde4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800fde6:	7bfb      	ldrb	r3, [r7, #15]
 800fde8:	461a      	mov	r2, r3
 800fdea:	2101      	movs	r1, #1
 800fdec:	4803      	ldr	r0, [pc, #12]	@ (800fdfc <MX_DriverVbusFS+0x34>)
 800fdee:	f7f3 f93b 	bl	8003068 <HAL_GPIO_WritePin>
}
 800fdf2:	bf00      	nop
 800fdf4:	3710      	adds	r7, #16
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	40020800 	.word	0x40020800

0800fe00 <rcl_get_zero_initialized_publisher>:
 800fe00:	4b01      	ldr	r3, [pc, #4]	@ (800fe08 <rcl_get_zero_initialized_publisher+0x8>)
 800fe02:	6818      	ldr	r0, [r3, #0]
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop
 800fe08:	0801dcb4 	.word	0x0801dcb4

0800fe0c <rcl_publisher_init>:
 800fe0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe10:	b088      	sub	sp, #32
 800fe12:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800fe14:	2d00      	cmp	r5, #0
 800fe16:	d069      	beq.n	800feec <rcl_publisher_init+0xe0>
 800fe18:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	4648      	mov	r0, r9
 800fe20:	460e      	mov	r6, r1
 800fe22:	4690      	mov	r8, r2
 800fe24:	461f      	mov	r7, r3
 800fe26:	f001 f83b 	bl	8010ea0 <rcutils_allocator_is_valid>
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	d05e      	beq.n	800feec <rcl_publisher_init+0xe0>
 800fe2e:	2c00      	cmp	r4, #0
 800fe30:	d05c      	beq.n	800feec <rcl_publisher_init+0xe0>
 800fe32:	f8d4 a000 	ldr.w	sl, [r4]
 800fe36:	f1ba 0f00 	cmp.w	sl, #0
 800fe3a:	d004      	beq.n	800fe46 <rcl_publisher_init+0x3a>
 800fe3c:	2764      	movs	r7, #100	@ 0x64
 800fe3e:	4638      	mov	r0, r7
 800fe40:	b008      	add	sp, #32
 800fe42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe46:	4630      	mov	r0, r6
 800fe48:	f006 f9de 	bl	8016208 <rcl_node_is_valid>
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	d052      	beq.n	800fef6 <rcl_publisher_init+0xea>
 800fe50:	f1b8 0f00 	cmp.w	r8, #0
 800fe54:	d04a      	beq.n	800feec <rcl_publisher_init+0xe0>
 800fe56:	2f00      	cmp	r7, #0
 800fe58:	d048      	beq.n	800feec <rcl_publisher_init+0xe0>
 800fe5a:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800fe5e:	aa07      	add	r2, sp, #28
 800fe60:	9205      	str	r2, [sp, #20]
 800fe62:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800fe66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe6a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fe6e:	f8cd a01c 	str.w	sl, [sp, #28]
 800fe72:	4639      	mov	r1, r7
 800fe74:	e899 000c 	ldmia.w	r9, {r2, r3}
 800fe78:	4630      	mov	r0, r6
 800fe7a:	f006 fa19 	bl	80162b0 <rcl_node_resolve_name>
 800fe7e:	4607      	mov	r7, r0
 800fe80:	2800      	cmp	r0, #0
 800fe82:	d14f      	bne.n	800ff24 <rcl_publisher_init+0x118>
 800fe84:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800fe86:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800fe88:	20c8      	movs	r0, #200	@ 0xc8
 800fe8a:	4798      	blx	r3
 800fe8c:	6020      	str	r0, [r4, #0]
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	d04e      	beq.n	800ff30 <rcl_publisher_init+0x124>
 800fe92:	4630      	mov	r0, r6
 800fe94:	f006 f9da 	bl	801624c <rcl_node_get_rmw_handle>
 800fe98:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800fe9c:	9300      	str	r3, [sp, #0]
 800fe9e:	9a07      	ldr	r2, [sp, #28]
 800fea0:	6827      	ldr	r7, [r4, #0]
 800fea2:	462b      	mov	r3, r5
 800fea4:	4641      	mov	r1, r8
 800fea6:	f001 f909 	bl	80110bc <rmw_create_publisher>
 800feaa:	6823      	ldr	r3, [r4, #0]
 800feac:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800feb0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800feb4:	b370      	cbz	r0, 800ff14 <rcl_publisher_init+0x108>
 800feb6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800feba:	f001 f9dd 	bl	8011278 <rmw_publisher_get_actual_qos>
 800febe:	6823      	ldr	r3, [r4, #0]
 800fec0:	4607      	mov	r7, r0
 800fec2:	b9d0      	cbnz	r0, 800fefa <rcl_publisher_init+0xee>
 800fec4:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800fec8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800fecc:	4629      	mov	r1, r5
 800fece:	2270      	movs	r2, #112	@ 0x70
 800fed0:	4618      	mov	r0, r3
 800fed2:	f00c ffc2 	bl	801ce5a <memcpy>
 800fed6:	6832      	ldr	r2, [r6, #0]
 800fed8:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800fedc:	9807      	ldr	r0, [sp, #28]
 800fede:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800fee0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800fee2:	4798      	blx	r3
 800fee4:	4638      	mov	r0, r7
 800fee6:	b008      	add	sp, #32
 800fee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feec:	270b      	movs	r7, #11
 800feee:	4638      	mov	r0, r7
 800fef0:	b008      	add	sp, #32
 800fef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fef6:	27c8      	movs	r7, #200	@ 0xc8
 800fef8:	e7a1      	b.n	800fe3e <rcl_publisher_init+0x32>
 800fefa:	b18b      	cbz	r3, 800ff20 <rcl_publisher_init+0x114>
 800fefc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ff00:	b142      	cbz	r2, 800ff14 <rcl_publisher_init+0x108>
 800ff02:	4630      	mov	r0, r6
 800ff04:	f006 f9a2 	bl	801624c <rcl_node_get_rmw_handle>
 800ff08:	6823      	ldr	r3, [r4, #0]
 800ff0a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ff0e:	f001 f9c3 	bl	8011298 <rmw_destroy_publisher>
 800ff12:	6823      	ldr	r3, [r4, #0]
 800ff14:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800ff16:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ff18:	4618      	mov	r0, r3
 800ff1a:	4790      	blx	r2
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	6023      	str	r3, [r4, #0]
 800ff20:	2701      	movs	r7, #1
 800ff22:	e7db      	b.n	800fedc <rcl_publisher_init+0xd0>
 800ff24:	2867      	cmp	r0, #103	@ 0x67
 800ff26:	d0d9      	beq.n	800fedc <rcl_publisher_init+0xd0>
 800ff28:	2869      	cmp	r0, #105	@ 0x69
 800ff2a:	d003      	beq.n	800ff34 <rcl_publisher_init+0x128>
 800ff2c:	280a      	cmp	r0, #10
 800ff2e:	d1f7      	bne.n	800ff20 <rcl_publisher_init+0x114>
 800ff30:	270a      	movs	r7, #10
 800ff32:	e7d3      	b.n	800fedc <rcl_publisher_init+0xd0>
 800ff34:	2767      	movs	r7, #103	@ 0x67
 800ff36:	e7d1      	b.n	800fedc <rcl_publisher_init+0xd0>

0800ff38 <rcl_publisher_get_default_options>:
 800ff38:	b570      	push	{r4, r5, r6, lr}
 800ff3a:	4d14      	ldr	r5, [pc, #80]	@ (800ff8c <rcl_publisher_get_default_options+0x54>)
 800ff3c:	4914      	ldr	r1, [pc, #80]	@ (800ff90 <rcl_publisher_get_default_options+0x58>)
 800ff3e:	b088      	sub	sp, #32
 800ff40:	4604      	mov	r4, r0
 800ff42:	2250      	movs	r2, #80	@ 0x50
 800ff44:	4628      	mov	r0, r5
 800ff46:	f00c ff88 	bl	801ce5a <memcpy>
 800ff4a:	a802      	add	r0, sp, #8
 800ff4c:	f000 ff9a 	bl	8010e84 <rcutils_get_default_allocator>
 800ff50:	f10d 0c08 	add.w	ip, sp, #8
 800ff54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ff58:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800ff5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ff60:	466e      	mov	r6, sp
 800ff62:	f8dc 3000 	ldr.w	r3, [ip]
 800ff66:	f8ce 3000 	str.w	r3, [lr]
 800ff6a:	4630      	mov	r0, r6
 800ff6c:	f001 f828 	bl	8010fc0 <rmw_get_default_publisher_options>
 800ff70:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ff74:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ff78:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff7c:	2270      	movs	r2, #112	@ 0x70
 800ff7e:	4629      	mov	r1, r5
 800ff80:	4620      	mov	r0, r4
 800ff82:	f00c ff6a 	bl	801ce5a <memcpy>
 800ff86:	4620      	mov	r0, r4
 800ff88:	b008      	add	sp, #32
 800ff8a:	bd70      	pop	{r4, r5, r6, pc}
 800ff8c:	2000e208 	.word	0x2000e208
 800ff90:	0801dcb8 	.word	0x0801dcb8

0800ff94 <rcl_publish>:
 800ff94:	b1f8      	cbz	r0, 800ffd6 <rcl_publish+0x42>
 800ff96:	6803      	ldr	r3, [r0, #0]
 800ff98:	b570      	push	{r4, r5, r6, lr}
 800ff9a:	4604      	mov	r4, r0
 800ff9c:	b1b3      	cbz	r3, 800ffcc <rcl_publish+0x38>
 800ff9e:	4616      	mov	r6, r2
 800ffa0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ffa4:	b192      	cbz	r2, 800ffcc <rcl_publish+0x38>
 800ffa6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ffaa:	460d      	mov	r5, r1
 800ffac:	f005 fd68 	bl	8015a80 <rcl_context_is_valid>
 800ffb0:	b160      	cbz	r0, 800ffcc <rcl_publish+0x38>
 800ffb2:	6823      	ldr	r3, [r4, #0]
 800ffb4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ffb8:	b140      	cbz	r0, 800ffcc <rcl_publish+0x38>
 800ffba:	b155      	cbz	r5, 800ffd2 <rcl_publish+0x3e>
 800ffbc:	4632      	mov	r2, r6
 800ffbe:	4629      	mov	r1, r5
 800ffc0:	f001 f81c 	bl	8010ffc <rmw_publish>
 800ffc4:	3800      	subs	r0, #0
 800ffc6:	bf18      	it	ne
 800ffc8:	2001      	movne	r0, #1
 800ffca:	bd70      	pop	{r4, r5, r6, pc}
 800ffcc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ffd0:	bd70      	pop	{r4, r5, r6, pc}
 800ffd2:	200b      	movs	r0, #11
 800ffd4:	bd70      	pop	{r4, r5, r6, pc}
 800ffd6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ffda:	4770      	bx	lr

0800ffdc <rcl_publisher_is_valid>:
 800ffdc:	b1a0      	cbz	r0, 8010008 <rcl_publisher_is_valid+0x2c>
 800ffde:	6803      	ldr	r3, [r0, #0]
 800ffe0:	b510      	push	{r4, lr}
 800ffe2:	4604      	mov	r4, r0
 800ffe4:	b173      	cbz	r3, 8010004 <rcl_publisher_is_valid+0x28>
 800ffe6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ffea:	b15a      	cbz	r2, 8010004 <rcl_publisher_is_valid+0x28>
 800ffec:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800fff0:	f005 fd46 	bl	8015a80 <rcl_context_is_valid>
 800fff4:	b130      	cbz	r0, 8010004 <rcl_publisher_is_valid+0x28>
 800fff6:	6823      	ldr	r3, [r4, #0]
 800fff8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800fffc:	3800      	subs	r0, #0
 800fffe:	bf18      	it	ne
 8010000:	2001      	movne	r0, #1
 8010002:	bd10      	pop	{r4, pc}
 8010004:	2000      	movs	r0, #0
 8010006:	bd10      	pop	{r4, pc}
 8010008:	2000      	movs	r0, #0
 801000a:	4770      	bx	lr

0801000c <rcl_publisher_is_valid_except_context>:
 801000c:	b130      	cbz	r0, 801001c <rcl_publisher_is_valid_except_context+0x10>
 801000e:	6800      	ldr	r0, [r0, #0]
 8010010:	b120      	cbz	r0, 801001c <rcl_publisher_is_valid_except_context+0x10>
 8010012:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8010016:	3800      	subs	r0, #0
 8010018:	bf18      	it	ne
 801001a:	2001      	movne	r0, #1
 801001c:	4770      	bx	lr
 801001e:	bf00      	nop

08010020 <_rclc_check_for_new_data>:
 8010020:	2800      	cmp	r0, #0
 8010022:	d046      	beq.n	80100b2 <_rclc_check_for_new_data+0x92>
 8010024:	b510      	push	{r4, lr}
 8010026:	7802      	ldrb	r2, [r0, #0]
 8010028:	b084      	sub	sp, #16
 801002a:	4603      	mov	r3, r0
 801002c:	2a0a      	cmp	r2, #10
 801002e:	d842      	bhi.n	80100b6 <_rclc_check_for_new_data+0x96>
 8010030:	e8df f002 	tbb	[pc, r2]
 8010034:	14181212 	.word	0x14181212
 8010038:	06060614 	.word	0x06060614
 801003c:	2e1a      	.short	0x2e1a
 801003e:	16          	.byte	0x16
 801003f:	00          	.byte	0x00
 8010040:	6a0a      	ldr	r2, [r1, #32]
 8010042:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8010044:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8010048:	2000      	movs	r0, #0
 801004a:	1a12      	subs	r2, r2, r0
 801004c:	bf18      	it	ne
 801004e:	2201      	movne	r2, #1
 8010050:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8010054:	b004      	add	sp, #16
 8010056:	bd10      	pop	{r4, pc}
 8010058:	680a      	ldr	r2, [r1, #0]
 801005a:	e7f2      	b.n	8010042 <_rclc_check_for_new_data+0x22>
 801005c:	698a      	ldr	r2, [r1, #24]
 801005e:	e7f0      	b.n	8010042 <_rclc_check_for_new_data+0x22>
 8010060:	688a      	ldr	r2, [r1, #8]
 8010062:	e7ee      	b.n	8010042 <_rclc_check_for_new_data+0x22>
 8010064:	690a      	ldr	r2, [r1, #16]
 8010066:	e7ec      	b.n	8010042 <_rclc_check_for_new_data+0x22>
 8010068:	685c      	ldr	r4, [r3, #4]
 801006a:	4608      	mov	r0, r1
 801006c:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8010070:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8010074:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8010078:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801007c:	9300      	str	r3, [sp, #0]
 801007e:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8010082:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8010086:	f104 0110 	add.w	r1, r4, #16
 801008a:	f007 fc79 	bl	8017980 <rcl_action_client_wait_set_get_entities_ready>
 801008e:	e7e1      	b.n	8010054 <_rclc_check_for_new_data+0x34>
 8010090:	685c      	ldr	r4, [r3, #4]
 8010092:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 8010096:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 801009a:	e9cd 3200 	strd	r3, r2, [sp]
 801009e:	4608      	mov	r0, r1
 80100a0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80100a4:	f104 0220 	add.w	r2, r4, #32
 80100a8:	f104 0110 	add.w	r1, r4, #16
 80100ac:	f007 fe80 	bl	8017db0 <rcl_action_server_wait_set_get_entities_ready>
 80100b0:	e7d0      	b.n	8010054 <_rclc_check_for_new_data+0x34>
 80100b2:	200b      	movs	r0, #11
 80100b4:	4770      	bx	lr
 80100b6:	2001      	movs	r0, #1
 80100b8:	e7cc      	b.n	8010054 <_rclc_check_for_new_data+0x34>
 80100ba:	bf00      	nop

080100bc <_rclc_take_new_data>:
 80100bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100be:	b09b      	sub	sp, #108	@ 0x6c
 80100c0:	2800      	cmp	r0, #0
 80100c2:	f000 8088 	beq.w	80101d6 <_rclc_take_new_data+0x11a>
 80100c6:	7803      	ldrb	r3, [r0, #0]
 80100c8:	4604      	mov	r4, r0
 80100ca:	2b0a      	cmp	r3, #10
 80100cc:	f200 8167 	bhi.w	801039e <_rclc_take_new_data+0x2e2>
 80100d0:	e8df f003 	tbb	[pc, r3]
 80100d4:	44152d2d 	.word	0x44152d2d
 80100d8:	19191944 	.word	0x19191944
 80100dc:	065a      	.short	0x065a
 80100de:	15          	.byte	0x15
 80100df:	00          	.byte	0x00
 80100e0:	6840      	ldr	r0, [r0, #4]
 80100e2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	f040 80b2 	bne.w	8010250 <_rclc_take_new_data+0x194>
 80100ec:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	f040 80e4 	bne.w	80102be <_rclc_take_new_data+0x202>
 80100f6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d16f      	bne.n	80101de <_rclc_take_new_data+0x122>
 80100fe:	2500      	movs	r5, #0
 8010100:	4628      	mov	r0, r5
 8010102:	b01b      	add	sp, #108	@ 0x6c
 8010104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010106:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8010108:	6a0b      	ldr	r3, [r1, #32]
 801010a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d0f5      	beq.n	80100fe <_rclc_take_new_data+0x42>
 8010112:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8010116:	f104 0110 	add.w	r1, r4, #16
 801011a:	f006 f977 	bl	801640c <rcl_take_request>
 801011e:	4605      	mov	r5, r0
 8010120:	2800      	cmp	r0, #0
 8010122:	d0ec      	beq.n	80100fe <_rclc_take_new_data+0x42>
 8010124:	f240 2359 	movw	r3, #601	@ 0x259
 8010128:	4298      	cmp	r0, r3
 801012a:	d013      	beq.n	8010154 <_rclc_take_new_data+0x98>
 801012c:	e029      	b.n	8010182 <_rclc_take_new_data+0xc6>
 801012e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8010130:	680b      	ldr	r3, [r1, #0]
 8010132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d0e1      	beq.n	80100fe <_rclc_take_new_data+0x42>
 801013a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 801013e:	2300      	movs	r3, #0
 8010140:	aa0a      	add	r2, sp, #40	@ 0x28
 8010142:	f006 faa1 	bl	8016688 <rcl_take>
 8010146:	4605      	mov	r5, r0
 8010148:	2800      	cmp	r0, #0
 801014a:	d0d9      	beq.n	8010100 <_rclc_take_new_data+0x44>
 801014c:	f240 1391 	movw	r3, #401	@ 0x191
 8010150:	4298      	cmp	r0, r3
 8010152:	d116      	bne.n	8010182 <_rclc_take_new_data+0xc6>
 8010154:	2300      	movs	r3, #0
 8010156:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 801015a:	e7d1      	b.n	8010100 <_rclc_take_new_data+0x44>
 801015c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801015e:	698b      	ldr	r3, [r1, #24]
 8010160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d0ca      	beq.n	80100fe <_rclc_take_new_data+0x42>
 8010168:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 801016c:	f104 0110 	add.w	r1, r4, #16
 8010170:	f005 fc16 	bl	80159a0 <rcl_take_response>
 8010174:	4605      	mov	r5, r0
 8010176:	2800      	cmp	r0, #0
 8010178:	d0c1      	beq.n	80100fe <_rclc_take_new_data+0x42>
 801017a:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801017e:	4298      	cmp	r0, r3
 8010180:	d0be      	beq.n	8010100 <_rclc_take_new_data+0x44>
 8010182:	f000 feb1 	bl	8010ee8 <rcutils_reset_error>
 8010186:	e7bb      	b.n	8010100 <_rclc_take_new_data+0x44>
 8010188:	6840      	ldr	r0, [r0, #4]
 801018a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801018e:	2b00      	cmp	r3, #0
 8010190:	d17d      	bne.n	801028e <_rclc_take_new_data+0x1d2>
 8010192:	69c3      	ldr	r3, [r0, #28]
 8010194:	b11b      	cbz	r3, 801019e <_rclc_take_new_data+0xe2>
 8010196:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801019a:	2b00      	cmp	r3, #0
 801019c:	d144      	bne.n	8010228 <_rclc_take_new_data+0x16c>
 801019e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f040 80ac 	bne.w	8010300 <_rclc_take_new_data+0x244>
 80101a8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d0a6      	beq.n	80100fe <_rclc_take_new_data+0x42>
 80101b0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80101b2:	a90a      	add	r1, sp, #40	@ 0x28
 80101b4:	3010      	adds	r0, #16
 80101b6:	f007 fabb 	bl	8017730 <rcl_action_take_result_response>
 80101ba:	4605      	mov	r5, r0
 80101bc:	2800      	cmp	r0, #0
 80101be:	d1e0      	bne.n	8010182 <_rclc_take_new_data+0xc6>
 80101c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80101c4:	6860      	ldr	r0, [r4, #4]
 80101c6:	f007 ff17 	bl	8017ff8 <rclc_action_find_handle_by_result_request_sequence_number>
 80101ca:	2800      	cmp	r0, #0
 80101cc:	d098      	beq.n	8010100 <_rclc_take_new_data+0x44>
 80101ce:	2301      	movs	r3, #1
 80101d0:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 80101d4:	e794      	b.n	8010100 <_rclc_take_new_data+0x44>
 80101d6:	250b      	movs	r5, #11
 80101d8:	4628      	mov	r0, r5
 80101da:	b01b      	add	sp, #108	@ 0x6c
 80101dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101de:	ae04      	add	r6, sp, #16
 80101e0:	aa0a      	add	r2, sp, #40	@ 0x28
 80101e2:	3010      	adds	r0, #16
 80101e4:	4631      	mov	r1, r6
 80101e6:	f007 fd17 	bl	8017c18 <rcl_action_take_cancel_request>
 80101ea:	4605      	mov	r5, r0
 80101ec:	2800      	cmp	r0, #0
 80101ee:	d1c8      	bne.n	8010182 <_rclc_take_new_data+0xc6>
 80101f0:	6860      	ldr	r0, [r4, #4]
 80101f2:	a90a      	add	r1, sp, #40	@ 0x28
 80101f4:	f007 febe 	bl	8017f74 <rclc_action_find_goal_handle_by_uuid>
 80101f8:	4607      	mov	r7, r0
 80101fa:	2800      	cmp	r0, #0
 80101fc:	f000 80bb 	beq.w	8010376 <_rclc_take_new_data+0x2ba>
 8010200:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8010204:	2101      	movs	r1, #1
 8010206:	f007 fe3f 	bl	8017e88 <rcl_action_transition_goal_state>
 801020a:	2803      	cmp	r0, #3
 801020c:	4684      	mov	ip, r0
 801020e:	f040 80a7 	bne.w	8010360 <_rclc_take_new_data+0x2a4>
 8010212:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010214:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8010218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801021a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801021e:	e884 0003 	stmia.w	r4, {r0, r1}
 8010222:	f887 c008 	strb.w	ip, [r7, #8]
 8010226:	e76b      	b.n	8010100 <_rclc_take_new_data+0x44>
 8010228:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801022a:	3010      	adds	r0, #16
 801022c:	f007 fb00 	bl	8017830 <rcl_action_take_feedback>
 8010230:	4605      	mov	r5, r0
 8010232:	2800      	cmp	r0, #0
 8010234:	d1a5      	bne.n	8010182 <_rclc_take_new_data+0xc6>
 8010236:	6860      	ldr	r0, [r4, #4]
 8010238:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801023a:	f007 fe9b 	bl	8017f74 <rclc_action_find_goal_handle_by_uuid>
 801023e:	4603      	mov	r3, r0
 8010240:	2800      	cmp	r0, #0
 8010242:	f000 80a3 	beq.w	801038c <_rclc_take_new_data+0x2d0>
 8010246:	2201      	movs	r2, #1
 8010248:	6860      	ldr	r0, [r4, #4]
 801024a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 801024e:	e7a6      	b.n	801019e <_rclc_take_new_data+0xe2>
 8010250:	f007 fe6a 	bl	8017f28 <rclc_action_take_goal_handle>
 8010254:	4606      	mov	r6, r0
 8010256:	6860      	ldr	r0, [r4, #4]
 8010258:	2e00      	cmp	r6, #0
 801025a:	f43f af47 	beq.w	80100ec <_rclc_take_new_data+0x30>
 801025e:	6070      	str	r0, [r6, #4]
 8010260:	69f2      	ldr	r2, [r6, #28]
 8010262:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8010266:	3010      	adds	r0, #16
 8010268:	f007 fc1e 	bl	8017aa8 <rcl_action_take_goal_request>
 801026c:	4605      	mov	r5, r0
 801026e:	2800      	cmp	r0, #0
 8010270:	f040 808e 	bne.w	8010390 <_rclc_take_new_data+0x2d4>
 8010274:	69f7      	ldr	r7, [r6, #28]
 8010276:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010278:	7235      	strb	r5, [r6, #8]
 801027a:	f8c6 0009 	str.w	r0, [r6, #9]
 801027e:	f8c6 100d 	str.w	r1, [r6, #13]
 8010282:	6860      	ldr	r0, [r4, #4]
 8010284:	f8c6 2011 	str.w	r2, [r6, #17]
 8010288:	f8c6 3015 	str.w	r3, [r6, #21]
 801028c:	e72e      	b.n	80100ec <_rclc_take_new_data+0x30>
 801028e:	aa04      	add	r2, sp, #16
 8010290:	a90a      	add	r1, sp, #40	@ 0x28
 8010292:	3010      	adds	r0, #16
 8010294:	f007 f9d4 	bl	8017640 <rcl_action_take_goal_response>
 8010298:	4605      	mov	r5, r0
 801029a:	2800      	cmp	r0, #0
 801029c:	f47f af71 	bne.w	8010182 <_rclc_take_new_data+0xc6>
 80102a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80102a4:	6860      	ldr	r0, [r4, #4]
 80102a6:	f007 fe95 	bl	8017fd4 <rclc_action_find_handle_by_goal_request_sequence_number>
 80102aa:	b130      	cbz	r0, 80102ba <_rclc_take_new_data+0x1fe>
 80102ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80102b0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80102b4:	2201      	movs	r2, #1
 80102b6:	f880 2020 	strb.w	r2, [r0, #32]
 80102ba:	6860      	ldr	r0, [r4, #4]
 80102bc:	e769      	b.n	8010192 <_rclc_take_new_data+0xd6>
 80102be:	aa04      	add	r2, sp, #16
 80102c0:	3010      	adds	r0, #16
 80102c2:	a90a      	add	r1, sp, #40	@ 0x28
 80102c4:	f007 fc68 	bl	8017b98 <rcl_action_take_result_request>
 80102c8:	4605      	mov	r5, r0
 80102ca:	2800      	cmp	r0, #0
 80102cc:	f47f af59 	bne.w	8010182 <_rclc_take_new_data+0xc6>
 80102d0:	6860      	ldr	r0, [r4, #4]
 80102d2:	a904      	add	r1, sp, #16
 80102d4:	f007 fe4e 	bl	8017f74 <rclc_action_find_goal_handle_by_uuid>
 80102d8:	4607      	mov	r7, r0
 80102da:	b160      	cbz	r0, 80102f6 <_rclc_take_new_data+0x23a>
 80102dc:	ad0a      	add	r5, sp, #40	@ 0x28
 80102de:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 80102e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80102e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80102ea:	f04f 0c02 	mov.w	ip, #2
 80102ee:	e886 0003 	stmia.w	r6, {r0, r1}
 80102f2:	f887 c008 	strb.w	ip, [r7, #8]
 80102f6:	6860      	ldr	r0, [r4, #4]
 80102f8:	2300      	movs	r3, #0
 80102fa:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 80102fe:	e6fa      	b.n	80100f6 <_rclc_take_new_data+0x3a>
 8010300:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8010304:	a90a      	add	r1, sp, #40	@ 0x28
 8010306:	3010      	adds	r0, #16
 8010308:	f007 fa52 	bl	80177b0 <rcl_action_take_cancel_response>
 801030c:	4605      	mov	r5, r0
 801030e:	2800      	cmp	r0, #0
 8010310:	f47f af37 	bne.w	8010182 <_rclc_take_new_data+0xc6>
 8010314:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010318:	6860      	ldr	r0, [r4, #4]
 801031a:	f007 fe7f 	bl	801801c <rclc_action_find_handle_by_cancel_request_sequence_number>
 801031e:	4606      	mov	r6, r0
 8010320:	6860      	ldr	r0, [r4, #4]
 8010322:	2e00      	cmp	r6, #0
 8010324:	f43f af40 	beq.w	80101a8 <_rclc_take_new_data+0xec>
 8010328:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801032a:	2701      	movs	r7, #1
 801032c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 801032e:	2b00      	cmp	r3, #0
 8010330:	f43f af3a 	beq.w	80101a8 <_rclc_take_new_data+0xec>
 8010334:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010336:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801033a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801033e:	f007 fe19 	bl	8017f74 <rclc_action_find_goal_handle_by_uuid>
 8010342:	b138      	cbz	r0, 8010354 <_rclc_take_new_data+0x298>
 8010344:	6860      	ldr	r0, [r4, #4]
 8010346:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010348:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 801034c:	3501      	adds	r5, #1
 801034e:	42ab      	cmp	r3, r5
 8010350:	d8f0      	bhi.n	8010334 <_rclc_take_new_data+0x278>
 8010352:	e729      	b.n	80101a8 <_rclc_take_new_data+0xec>
 8010354:	6860      	ldr	r0, [r4, #4]
 8010356:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010358:	3501      	adds	r5, #1
 801035a:	42ab      	cmp	r3, r5
 801035c:	d8ea      	bhi.n	8010334 <_rclc_take_new_data+0x278>
 801035e:	e723      	b.n	80101a8 <_rclc_take_new_data+0xec>
 8010360:	ab06      	add	r3, sp, #24
 8010362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010364:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010368:	2103      	movs	r1, #3
 801036a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801036e:	6860      	ldr	r0, [r4, #4]
 8010370:	f007 feca 	bl	8018108 <rclc_action_server_goal_cancel_reject>
 8010374:	e6c4      	b.n	8010100 <_rclc_take_new_data+0x44>
 8010376:	ab06      	add	r3, sp, #24
 8010378:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801037a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801037e:	2102      	movs	r1, #2
 8010380:	e896 000c 	ldmia.w	r6, {r2, r3}
 8010384:	6860      	ldr	r0, [r4, #4]
 8010386:	f007 febf 	bl	8018108 <rclc_action_server_goal_cancel_reject>
 801038a:	e6b9      	b.n	8010100 <_rclc_take_new_data+0x44>
 801038c:	6860      	ldr	r0, [r4, #4]
 801038e:	e706      	b.n	801019e <_rclc_take_new_data+0xe2>
 8010390:	6860      	ldr	r0, [r4, #4]
 8010392:	4631      	mov	r1, r6
 8010394:	f007 fdd8 	bl	8017f48 <rclc_action_remove_used_goal_handle>
 8010398:	f000 fda6 	bl	8010ee8 <rcutils_reset_error>
 801039c:	e6b0      	b.n	8010100 <_rclc_take_new_data+0x44>
 801039e:	2501      	movs	r5, #1
 80103a0:	e6ae      	b.n	8010100 <_rclc_take_new_data+0x44>
 80103a2:	bf00      	nop

080103a4 <_rclc_execute.part.0>:
 80103a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103a6:	7803      	ldrb	r3, [r0, #0]
 80103a8:	b087      	sub	sp, #28
 80103aa:	4604      	mov	r4, r0
 80103ac:	2b0a      	cmp	r3, #10
 80103ae:	f200 8136 	bhi.w	801061e <_rclc_execute.part.0+0x27a>
 80103b2:	e8df f003 	tbb	[pc, r3]
 80103b6:	435e      	.short	0x435e
 80103b8:	06a1664f 	.word	0x06a1664f
 80103bc:	6c1e0606 	.word	0x6c1e0606
 80103c0:	59          	.byte	0x59
 80103c1:	00          	.byte	0x00
 80103c2:	2b06      	cmp	r3, #6
 80103c4:	f000 8122 	beq.w	801060c <_rclc_execute.part.0+0x268>
 80103c8:	2b07      	cmp	r3, #7
 80103ca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80103cc:	f040 8118 	bne.w	8010600 <_rclc_execute.part.0+0x25c>
 80103d0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 80103d4:	6880      	ldr	r0, [r0, #8]
 80103d6:	4798      	blx	r3
 80103d8:	f104 0110 	add.w	r1, r4, #16
 80103dc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80103de:	6860      	ldr	r0, [r4, #4]
 80103e0:	f006 f854 	bl	801648c <rcl_send_response>
 80103e4:	2800      	cmp	r0, #0
 80103e6:	d033      	beq.n	8010450 <_rclc_execute.part.0+0xac>
 80103e8:	9005      	str	r0, [sp, #20]
 80103ea:	f000 fd7d 	bl	8010ee8 <rcutils_reset_error>
 80103ee:	9805      	ldr	r0, [sp, #20]
 80103f0:	e02e      	b.n	8010450 <_rclc_execute.part.0+0xac>
 80103f2:	6840      	ldr	r0, [r0, #4]
 80103f4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	f000 8086 	beq.w	801050a <_rclc_execute.part.0+0x166>
 80103fe:	2600      	movs	r6, #0
 8010400:	2701      	movs	r7, #1
 8010402:	e004      	b.n	801040e <_rclc_execute.part.0+0x6a>
 8010404:	f007 fd6a 	bl	8017edc <rclc_action_send_result_request>
 8010408:	b998      	cbnz	r0, 8010432 <_rclc_execute.part.0+0x8e>
 801040a:	722f      	strb	r7, [r5, #8]
 801040c:	6860      	ldr	r0, [r4, #4]
 801040e:	f007 fe17 	bl	8018040 <rclc_action_find_first_handle_with_goal_response>
 8010412:	4605      	mov	r5, r0
 8010414:	2800      	cmp	r0, #0
 8010416:	d077      	beq.n	8010508 <_rclc_execute.part.0+0x164>
 8010418:	6863      	ldr	r3, [r4, #4]
 801041a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801041c:	699b      	ldr	r3, [r3, #24]
 801041e:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8010422:	f885 6020 	strb.w	r6, [r5, #32]
 8010426:	4798      	blx	r3
 8010428:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 801042c:	4628      	mov	r0, r5
 801042e:	2b00      	cmp	r3, #0
 8010430:	d1e8      	bne.n	8010404 <_rclc_execute.part.0+0x60>
 8010432:	6860      	ldr	r0, [r4, #4]
 8010434:	4629      	mov	r1, r5
 8010436:	f007 fd87 	bl	8017f48 <rclc_action_remove_used_goal_handle>
 801043a:	e7e7      	b.n	801040c <_rclc_execute.part.0+0x68>
 801043c:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8010440:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8010444:	2d00      	cmp	r5, #0
 8010446:	f000 80c9 	beq.w	80105dc <_rclc_execute.part.0+0x238>
 801044a:	6880      	ldr	r0, [r0, #8]
 801044c:	4798      	blx	r3
 801044e:	2000      	movs	r0, #0
 8010450:	b007      	add	sp, #28
 8010452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010454:	6840      	ldr	r0, [r0, #4]
 8010456:	f006 fa1b 	bl	8016890 <rcl_timer_call>
 801045a:	f240 3321 	movw	r3, #801	@ 0x321
 801045e:	4298      	cmp	r0, r3
 8010460:	d004      	beq.n	801046c <_rclc_execute.part.0+0xc8>
 8010462:	2800      	cmp	r0, #0
 8010464:	d0f4      	beq.n	8010450 <_rclc_execute.part.0+0xac>
 8010466:	e7bf      	b.n	80103e8 <_rclc_execute.part.0+0x44>
 8010468:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801046a:	4798      	blx	r3
 801046c:	2000      	movs	r0, #0
 801046e:	b007      	add	sp, #28
 8010470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010472:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8010476:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010478:	b925      	cbnz	r5, 8010484 <_rclc_execute.part.0+0xe0>
 801047a:	4628      	mov	r0, r5
 801047c:	4798      	blx	r3
 801047e:	4628      	mov	r0, r5
 8010480:	e7e6      	b.n	8010450 <_rclc_execute.part.0+0xac>
 8010482:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010484:	68a0      	ldr	r0, [r4, #8]
 8010486:	4798      	blx	r3
 8010488:	2000      	movs	r0, #0
 801048a:	b007      	add	sp, #28
 801048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801048e:	6840      	ldr	r0, [r0, #4]
 8010490:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8010494:	bb3b      	cbnz	r3, 80104e6 <_rclc_execute.part.0+0x142>
 8010496:	f890 3020 	ldrb.w	r3, [r0, #32]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d07b      	beq.n	8010596 <_rclc_execute.part.0+0x1f2>
 801049e:	f640 0634 	movw	r6, #2100	@ 0x834
 80104a2:	2701      	movs	r7, #1
 80104a4:	e007      	b.n	80104b6 <_rclc_execute.part.0+0x112>
 80104a6:	4628      	mov	r0, r5
 80104a8:	f007 fde2 	bl	8018070 <rclc_action_server_response_goal_request>
 80104ac:	6860      	ldr	r0, [r4, #4]
 80104ae:	4629      	mov	r1, r5
 80104b0:	f007 fd4a 	bl	8017f48 <rclc_action_remove_used_goal_handle>
 80104b4:	6860      	ldr	r0, [r4, #4]
 80104b6:	2100      	movs	r1, #0
 80104b8:	f007 fd74 	bl	8017fa4 <rclc_action_find_first_handle_by_status>
 80104bc:	4605      	mov	r5, r0
 80104be:	2800      	cmp	r0, #0
 80104c0:	d066      	beq.n	8010590 <_rclc_execute.part.0+0x1ec>
 80104c2:	6863      	ldr	r3, [r4, #4]
 80104c4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80104c6:	699b      	ldr	r3, [r3, #24]
 80104c8:	4798      	blx	r3
 80104ca:	42b0      	cmp	r0, r6
 80104cc:	f04f 0100 	mov.w	r1, #0
 80104d0:	d1e9      	bne.n	80104a6 <_rclc_execute.part.0+0x102>
 80104d2:	2101      	movs	r1, #1
 80104d4:	4628      	mov	r0, r5
 80104d6:	f007 fdcb 	bl	8018070 <rclc_action_server_response_goal_request>
 80104da:	722f      	strb	r7, [r5, #8]
 80104dc:	e7ea      	b.n	80104b4 <_rclc_execute.part.0+0x110>
 80104de:	6848      	ldr	r0, [r1, #4]
 80104e0:	f007 fd32 	bl	8017f48 <rclc_action_remove_used_goal_handle>
 80104e4:	6860      	ldr	r0, [r4, #4]
 80104e6:	f007 fd69 	bl	8017fbc <rclc_action_find_first_terminated_handle>
 80104ea:	4601      	mov	r1, r0
 80104ec:	2800      	cmp	r0, #0
 80104ee:	d1f6      	bne.n	80104de <_rclc_execute.part.0+0x13a>
 80104f0:	6860      	ldr	r0, [r4, #4]
 80104f2:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80104f6:	e7ce      	b.n	8010496 <_rclc_execute.part.0+0xf2>
 80104f8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80104fa:	6880      	ldr	r0, [r0, #8]
 80104fc:	f104 0110 	add.w	r1, r4, #16
 8010500:	4798      	blx	r3
 8010502:	2000      	movs	r0, #0
 8010504:	b007      	add	sp, #28
 8010506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010508:	6860      	ldr	r0, [r4, #4]
 801050a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801050e:	b18b      	cbz	r3, 8010534 <_rclc_execute.part.0+0x190>
 8010510:	68c5      	ldr	r5, [r0, #12]
 8010512:	b32d      	cbz	r5, 8010560 <_rclc_execute.part.0+0x1bc>
 8010514:	2600      	movs	r6, #0
 8010516:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 801051a:	b143      	cbz	r3, 801052e <_rclc_execute.part.0+0x18a>
 801051c:	69c3      	ldr	r3, [r0, #28]
 801051e:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8010522:	b123      	cbz	r3, 801052e <_rclc_execute.part.0+0x18a>
 8010524:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010526:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010528:	4628      	mov	r0, r5
 801052a:	4798      	blx	r3
 801052c:	6860      	ldr	r0, [r4, #4]
 801052e:	682d      	ldr	r5, [r5, #0]
 8010530:	2d00      	cmp	r5, #0
 8010532:	d1f0      	bne.n	8010516 <_rclc_execute.part.0+0x172>
 8010534:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010538:	b193      	cbz	r3, 8010560 <_rclc_execute.part.0+0x1bc>
 801053a:	68c5      	ldr	r5, [r0, #12]
 801053c:	b185      	cbz	r5, 8010560 <_rclc_execute.part.0+0x1bc>
 801053e:	2600      	movs	r6, #0
 8010540:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8010544:	b14b      	cbz	r3, 801055a <_rclc_execute.part.0+0x1b6>
 8010546:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010548:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 801054c:	b12b      	cbz	r3, 801055a <_rclc_execute.part.0+0x1b6>
 801054e:	4628      	mov	r0, r5
 8010550:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8010554:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010556:	4798      	blx	r3
 8010558:	6860      	ldr	r0, [r4, #4]
 801055a:	682d      	ldr	r5, [r5, #0]
 801055c:	2d00      	cmp	r5, #0
 801055e:	d1ef      	bne.n	8010540 <_rclc_execute.part.0+0x19c>
 8010560:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8010564:	2b00      	cmp	r3, #0
 8010566:	d081      	beq.n	801046c <_rclc_execute.part.0+0xc8>
 8010568:	2700      	movs	r7, #0
 801056a:	e00b      	b.n	8010584 <_rclc_execute.part.0+0x1e0>
 801056c:	6863      	ldr	r3, [r4, #4]
 801056e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010570:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8010572:	6a1e      	ldr	r6, [r3, #32]
 8010574:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8010578:	47b0      	blx	r6
 801057a:	6860      	ldr	r0, [r4, #4]
 801057c:	4629      	mov	r1, r5
 801057e:	f007 fce3 	bl	8017f48 <rclc_action_remove_used_goal_handle>
 8010582:	6860      	ldr	r0, [r4, #4]
 8010584:	f007 fd68 	bl	8018058 <rclc_action_find_first_handle_with_result_response>
 8010588:	4605      	mov	r5, r0
 801058a:	2800      	cmp	r0, #0
 801058c:	d1ee      	bne.n	801056c <_rclc_execute.part.0+0x1c8>
 801058e:	e76d      	b.n	801046c <_rclc_execute.part.0+0xc8>
 8010590:	6860      	ldr	r0, [r4, #4]
 8010592:	f880 5020 	strb.w	r5, [r0, #32]
 8010596:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801059a:	2b00      	cmp	r3, #0
 801059c:	f43f af66 	beq.w	801046c <_rclc_execute.part.0+0xc8>
 80105a0:	68c5      	ldr	r5, [r0, #12]
 80105a2:	b1b5      	cbz	r5, 80105d2 <_rclc_execute.part.0+0x22e>
 80105a4:	2602      	movs	r6, #2
 80105a6:	e001      	b.n	80105ac <_rclc_execute.part.0+0x208>
 80105a8:	682d      	ldr	r5, [r5, #0]
 80105aa:	b195      	cbz	r5, 80105d2 <_rclc_execute.part.0+0x22e>
 80105ac:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80105b0:	2b03      	cmp	r3, #3
 80105b2:	d1f9      	bne.n	80105a8 <_rclc_execute.part.0+0x204>
 80105b4:	69c3      	ldr	r3, [r0, #28]
 80105b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80105b8:	4628      	mov	r0, r5
 80105ba:	4798      	blx	r3
 80105bc:	4603      	mov	r3, r0
 80105be:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 80105c2:	4628      	mov	r0, r5
 80105c4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80105c8:	b163      	cbz	r3, 80105e4 <_rclc_execute.part.0+0x240>
 80105ca:	f007 fd71 	bl	80180b0 <rclc_action_server_goal_cancel_accept>
 80105ce:	6860      	ldr	r0, [r4, #4]
 80105d0:	e7ea      	b.n	80105a8 <_rclc_execute.part.0+0x204>
 80105d2:	2300      	movs	r3, #0
 80105d4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80105d8:	4618      	mov	r0, r3
 80105da:	e739      	b.n	8010450 <_rclc_execute.part.0+0xac>
 80105dc:	4628      	mov	r0, r5
 80105de:	4798      	blx	r3
 80105e0:	4628      	mov	r0, r5
 80105e2:	e735      	b.n	8010450 <_rclc_execute.part.0+0xac>
 80105e4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80105e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80105ea:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 80105ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105f2:	6860      	ldr	r0, [r4, #4]
 80105f4:	2101      	movs	r1, #1
 80105f6:	f007 fd87 	bl	8018108 <rclc_action_server_goal_cancel_reject>
 80105fa:	722e      	strb	r6, [r5, #8]
 80105fc:	6860      	ldr	r0, [r4, #4]
 80105fe:	e7d3      	b.n	80105a8 <_rclc_execute.part.0+0x204>
 8010600:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010602:	6880      	ldr	r0, [r0, #8]
 8010604:	4798      	blx	r3
 8010606:	f104 0110 	add.w	r1, r4, #16
 801060a:	e6e7      	b.n	80103dc <_rclc_execute.part.0+0x38>
 801060c:	f100 0110 	add.w	r1, r0, #16
 8010610:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010612:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8010614:	6880      	ldr	r0, [r0, #8]
 8010616:	9105      	str	r1, [sp, #20]
 8010618:	4798      	blx	r3
 801061a:	9905      	ldr	r1, [sp, #20]
 801061c:	e6de      	b.n	80103dc <_rclc_execute.part.0+0x38>
 801061e:	2001      	movs	r0, #1
 8010620:	e716      	b.n	8010450 <_rclc_execute.part.0+0xac>
 8010622:	bf00      	nop

08010624 <rclc_executor_trigger_any>:
 8010624:	2800      	cmp	r0, #0
 8010626:	d03f      	beq.n	80106a8 <rclc_executor_trigger_any+0x84>
 8010628:	2900      	cmp	r1, #0
 801062a:	d03e      	beq.n	80106aa <rclc_executor_trigger_any+0x86>
 801062c:	4603      	mov	r3, r0
 801062e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8010632:	2200      	movs	r2, #0
 8010634:	2800      	cmp	r0, #0
 8010636:	d037      	beq.n	80106a8 <rclc_executor_trigger_any+0x84>
 8010638:	b430      	push	{r4, r5}
 801063a:	f893 c000 	ldrb.w	ip, [r3]
 801063e:	f1bc 0f08 	cmp.w	ip, #8
 8010642:	d11e      	bne.n	8010682 <rclc_executor_trigger_any+0x5e>
 8010644:	685c      	ldr	r4, [r3, #4]
 8010646:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8010648:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 801064c:	d105      	bne.n	801065a <rclc_executor_trigger_any+0x36>
 801064e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8010652:	b910      	cbnz	r0, 801065a <rclc_executor_trigger_any+0x36>
 8010654:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8010658:	b128      	cbz	r0, 8010666 <rclc_executor_trigger_any+0x42>
 801065a:	bc30      	pop	{r4, r5}
 801065c:	4770      	bx	lr
 801065e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8010662:	2800      	cmp	r0, #0
 8010664:	d1f9      	bne.n	801065a <rclc_executor_trigger_any+0x36>
 8010666:	3201      	adds	r2, #1
 8010668:	4291      	cmp	r1, r2
 801066a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 801066e:	d018      	beq.n	80106a2 <rclc_executor_trigger_any+0x7e>
 8010670:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8010674:	2800      	cmp	r0, #0
 8010676:	d0f0      	beq.n	801065a <rclc_executor_trigger_any+0x36>
 8010678:	f893 c000 	ldrb.w	ip, [r3]
 801067c:	f1bc 0f08 	cmp.w	ip, #8
 8010680:	d0e0      	beq.n	8010644 <rclc_executor_trigger_any+0x20>
 8010682:	f1bc 0f09 	cmp.w	ip, #9
 8010686:	d1ea      	bne.n	801065e <rclc_executor_trigger_any+0x3a>
 8010688:	685c      	ldr	r4, [r3, #4]
 801068a:	6a25      	ldr	r5, [r4, #32]
 801068c:	2d00      	cmp	r5, #0
 801068e:	d1e4      	bne.n	801065a <rclc_executor_trigger_any+0x36>
 8010690:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8010694:	2800      	cmp	r0, #0
 8010696:	d1e0      	bne.n	801065a <rclc_executor_trigger_any+0x36>
 8010698:	3201      	adds	r2, #1
 801069a:	4291      	cmp	r1, r2
 801069c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80106a0:	d1e6      	bne.n	8010670 <rclc_executor_trigger_any+0x4c>
 80106a2:	2000      	movs	r0, #0
 80106a4:	bc30      	pop	{r4, r5}
 80106a6:	4770      	bx	lr
 80106a8:	4770      	bx	lr
 80106aa:	4608      	mov	r0, r1
 80106ac:	4770      	bx	lr
 80106ae:	bf00      	nop

080106b0 <rclc_executor_init>:
 80106b0:	2800      	cmp	r0, #0
 80106b2:	d05f      	beq.n	8010774 <rclc_executor_init+0xc4>
 80106b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b8:	460c      	mov	r4, r1
 80106ba:	b0b0      	sub	sp, #192	@ 0xc0
 80106bc:	2900      	cmp	r1, #0
 80106be:	d051      	beq.n	8010764 <rclc_executor_init+0xb4>
 80106c0:	4605      	mov	r5, r0
 80106c2:	4618      	mov	r0, r3
 80106c4:	4616      	mov	r6, r2
 80106c6:	461f      	mov	r7, r3
 80106c8:	f000 fbea 	bl	8010ea0 <rcutils_allocator_is_valid>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	d049      	beq.n	8010764 <rclc_executor_init+0xb4>
 80106d0:	2e00      	cmp	r6, #0
 80106d2:	d047      	beq.n	8010764 <rclc_executor_init+0xb4>
 80106d4:	492c      	ldr	r1, [pc, #176]	@ (8010788 <rclc_executor_init+0xd8>)
 80106d6:	2288      	movs	r2, #136	@ 0x88
 80106d8:	a80e      	add	r0, sp, #56	@ 0x38
 80106da:	f00c fbbe 	bl	801ce5a <memcpy>
 80106de:	a90e      	add	r1, sp, #56	@ 0x38
 80106e0:	2288      	movs	r2, #136	@ 0x88
 80106e2:	4628      	mov	r0, r5
 80106e4:	f00c fbb9 	bl	801ce5a <memcpy>
 80106e8:	602c      	str	r4, [r5, #0]
 80106ea:	4668      	mov	r0, sp
 80106ec:	60ae      	str	r6, [r5, #8]
 80106ee:	466c      	mov	r4, sp
 80106f0:	f006 f9d6 	bl	8016aa0 <rcl_get_zero_initialized_wait_set>
 80106f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80106f6:	f105 0c14 	add.w	ip, r5, #20
 80106fa:	f8d7 8000 	ldr.w	r8, [r7]
 80106fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010704:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801070a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801070e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8010780 <rclc_executor_init+0xd0>
 8010712:	6823      	ldr	r3, [r4, #0]
 8010714:	f8cc 3000 	str.w	r3, [ip]
 8010718:	6939      	ldr	r1, [r7, #16]
 801071a:	612f      	str	r7, [r5, #16]
 801071c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8010720:	01b0      	lsls	r0, r6, #6
 8010722:	47c0      	blx	r8
 8010724:	6068      	str	r0, [r5, #4]
 8010726:	b338      	cbz	r0, 8010778 <rclc_executor_init+0xc8>
 8010728:	2400      	movs	r4, #0
 801072a:	e000      	b.n	801072e <rclc_executor_init+0x7e>
 801072c:	6868      	ldr	r0, [r5, #4]
 801072e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8010732:	4631      	mov	r1, r6
 8010734:	3401      	adds	r4, #1
 8010736:	f000 fa6b 	bl	8010c10 <rclc_executor_handle_init>
 801073a:	42a6      	cmp	r6, r4
 801073c:	d1f6      	bne.n	801072c <rclc_executor_init+0x7c>
 801073e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8010742:	f000 fa5b 	bl	8010bfc <rclc_executor_handle_counters_zero_init>
 8010746:	4a11      	ldr	r2, [pc, #68]	@ (801078c <rclc_executor_init+0xdc>)
 8010748:	686b      	ldr	r3, [r5, #4]
 801074a:	2000      	movs	r0, #0
 801074c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8010750:	b163      	cbz	r3, 801076c <rclc_executor_init+0xbc>
 8010752:	692b      	ldr	r3, [r5, #16]
 8010754:	b153      	cbz	r3, 801076c <rclc_executor_init+0xbc>
 8010756:	68ab      	ldr	r3, [r5, #8]
 8010758:	b143      	cbz	r3, 801076c <rclc_executor_init+0xbc>
 801075a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 801075e:	b030      	add	sp, #192	@ 0xc0
 8010760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010764:	200b      	movs	r0, #11
 8010766:	b030      	add	sp, #192	@ 0xc0
 8010768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801076c:	4618      	mov	r0, r3
 801076e:	b030      	add	sp, #192	@ 0xc0
 8010770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010774:	200b      	movs	r0, #11
 8010776:	4770      	bx	lr
 8010778:	200a      	movs	r0, #10
 801077a:	e7f4      	b.n	8010766 <rclc_executor_init+0xb6>
 801077c:	f3af 8000 	nop.w
 8010780:	3b9aca00 	.word	0x3b9aca00
 8010784:	00000000 	.word	0x00000000
 8010788:	0801dd08 	.word	0x0801dd08
 801078c:	08010625 	.word	0x08010625

08010790 <rclc_executor_add_subscription>:
 8010790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010792:	f89d e018 	ldrb.w	lr, [sp, #24]
 8010796:	b338      	cbz	r0, 80107e8 <rclc_executor_add_subscription+0x58>
 8010798:	b331      	cbz	r1, 80107e8 <rclc_executor_add_subscription+0x58>
 801079a:	b32a      	cbz	r2, 80107e8 <rclc_executor_add_subscription+0x58>
 801079c:	b323      	cbz	r3, 80107e8 <rclc_executor_add_subscription+0x58>
 801079e:	4604      	mov	r4, r0
 80107a0:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 80107a4:	42a8      	cmp	r0, r5
 80107a6:	d301      	bcc.n	80107ac <rclc_executor_add_subscription+0x1c>
 80107a8:	2001      	movs	r0, #1
 80107aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ac:	6866      	ldr	r6, [r4, #4]
 80107ae:	0187      	lsls	r7, r0, #6
 80107b0:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 80107b4:	2500      	movs	r5, #0
 80107b6:	55f5      	strb	r5, [r6, r7]
 80107b8:	3001      	adds	r0, #1
 80107ba:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 80107be:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 80107c2:	2301      	movs	r3, #1
 80107c4:	f104 0514 	add.w	r5, r4, #20
 80107c8:	e9cc 1201 	strd	r1, r2, [ip, #4]
 80107cc:	f88c e001 	strb.w	lr, [ip, #1]
 80107d0:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 80107d4:	60e0      	str	r0, [r4, #12]
 80107d6:	4628      	mov	r0, r5
 80107d8:	f006 f976 	bl	8016ac8 <rcl_wait_set_is_valid>
 80107dc:	b930      	cbnz	r0, 80107ec <rclc_executor_add_subscription+0x5c>
 80107de:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80107e0:	3301      	adds	r3, #1
 80107e2:	2000      	movs	r0, #0
 80107e4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80107e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107e8:	200b      	movs	r0, #11
 80107ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ec:	4628      	mov	r0, r5
 80107ee:	f006 f971 	bl	8016ad4 <rcl_wait_set_fini>
 80107f2:	2800      	cmp	r0, #0
 80107f4:	d0f3      	beq.n	80107de <rclc_executor_add_subscription+0x4e>
 80107f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080107f8 <rclc_executor_prepare>:
 80107f8:	2800      	cmp	r0, #0
 80107fa:	d044      	beq.n	8010886 <rclc_executor_prepare+0x8e>
 80107fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107fe:	f100 0514 	add.w	r5, r0, #20
 8010802:	b09b      	sub	sp, #108	@ 0x6c
 8010804:	4604      	mov	r4, r0
 8010806:	4628      	mov	r0, r5
 8010808:	f006 f95e 	bl	8016ac8 <rcl_wait_set_is_valid>
 801080c:	b110      	cbz	r0, 8010814 <rclc_executor_prepare+0x1c>
 801080e:	2000      	movs	r0, #0
 8010810:	b01b      	add	sp, #108	@ 0x6c
 8010812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010814:	4628      	mov	r0, r5
 8010816:	f006 f95d 	bl	8016ad4 <rcl_wait_set_fini>
 801081a:	2800      	cmp	r0, #0
 801081c:	d130      	bne.n	8010880 <rclc_executor_prepare+0x88>
 801081e:	a80c      	add	r0, sp, #48	@ 0x30
 8010820:	f006 f93e 	bl	8016aa0 <rcl_get_zero_initialized_wait_set>
 8010824:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8010828:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801082c:	46ae      	mov	lr, r5
 801082e:	6927      	ldr	r7, [r4, #16]
 8010830:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010834:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010838:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801083c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010840:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010844:	f8dc 3000 	ldr.w	r3, [ip]
 8010848:	f8ce 3000 	str.w	r3, [lr]
 801084c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801084e:	ae04      	add	r6, sp, #16
 8010850:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	6822      	ldr	r2, [r4, #0]
 8010856:	6033      	str	r3, [r6, #0]
 8010858:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801085a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 801085c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010860:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8010864:	e9cd 2100 	strd	r2, r1, [sp]
 8010868:	4628      	mov	r0, r5
 801086a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801086c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801086e:	f006 fc2f 	bl	80170d0 <rcl_wait_set_init>
 8010872:	2800      	cmp	r0, #0
 8010874:	d0cc      	beq.n	8010810 <rclc_executor_prepare+0x18>
 8010876:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010878:	f000 fb36 	bl	8010ee8 <rcutils_reset_error>
 801087c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801087e:	e7c7      	b.n	8010810 <rclc_executor_prepare+0x18>
 8010880:	f000 fb32 	bl	8010ee8 <rcutils_reset_error>
 8010884:	e7cb      	b.n	801081e <rclc_executor_prepare+0x26>
 8010886:	200b      	movs	r0, #11
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop

0801088c <rclc_executor_spin_some.part.0>:
 801088c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010890:	f100 0614 	add.w	r6, r0, #20
 8010894:	b083      	sub	sp, #12
 8010896:	4691      	mov	r9, r2
 8010898:	4698      	mov	r8, r3
 801089a:	4605      	mov	r5, r0
 801089c:	f7ff ffac 	bl	80107f8 <rclc_executor_prepare>
 80108a0:	4630      	mov	r0, r6
 80108a2:	f006 f9e3 	bl	8016c6c <rcl_wait_set_clear>
 80108a6:	4607      	mov	r7, r0
 80108a8:	2800      	cmp	r0, #0
 80108aa:	f040 80ed 	bne.w	8010a88 <rclc_executor_spin_some.part.0+0x1fc>
 80108ae:	68ab      	ldr	r3, [r5, #8]
 80108b0:	4604      	mov	r4, r0
 80108b2:	b303      	cbz	r3, 80108f6 <rclc_executor_spin_some.part.0+0x6a>
 80108b4:	6869      	ldr	r1, [r5, #4]
 80108b6:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 80108ba:	01a2      	lsls	r2, r4, #6
 80108bc:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 80108c0:	b1cb      	cbz	r3, 80108f6 <rclc_executor_spin_some.part.0+0x6a>
 80108c2:	5c8b      	ldrb	r3, [r1, r2]
 80108c4:	2b0a      	cmp	r3, #10
 80108c6:	f200 80d8 	bhi.w	8010a7a <rclc_executor_spin_some.part.0+0x1ee>
 80108ca:	e8df f003 	tbb	[pc, r3]
 80108ce:	9c9c      	.short	0x9c9c
 80108d0:	068c8ca7 	.word	0x068c8ca7
 80108d4:	bdc90606 	.word	0xbdc90606
 80108d8:	b2          	.byte	0xb2
 80108d9:	00          	.byte	0x00
 80108da:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80108de:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80108e2:	4630      	mov	r0, r6
 80108e4:	f006 fd0a 	bl	80172fc <rcl_wait_set_add_service>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	f040 8086 	bne.w	80109fa <rclc_executor_spin_some.part.0+0x16e>
 80108ee:	68ab      	ldr	r3, [r5, #8]
 80108f0:	3401      	adds	r4, #1
 80108f2:	429c      	cmp	r4, r3
 80108f4:	d3de      	bcc.n	80108b4 <rclc_executor_spin_some.part.0+0x28>
 80108f6:	4643      	mov	r3, r8
 80108f8:	464a      	mov	r2, r9
 80108fa:	4630      	mov	r0, r6
 80108fc:	f006 fd2c 	bl	8017358 <rcl_wait>
 8010900:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8010904:	2b00      	cmp	r3, #0
 8010906:	f000 80c7 	beq.w	8010a98 <rclc_executor_spin_some.part.0+0x20c>
 801090a:	2b01      	cmp	r3, #1
 801090c:	f040 80b5 	bne.w	8010a7a <rclc_executor_spin_some.part.0+0x1ee>
 8010910:	68ab      	ldr	r3, [r5, #8]
 8010912:	2b00      	cmp	r3, #0
 8010914:	f000 8159 	beq.w	8010bca <rclc_executor_spin_some.part.0+0x33e>
 8010918:	2400      	movs	r4, #0
 801091a:	46a0      	mov	r8, r4
 801091c:	f240 1991 	movw	r9, #401	@ 0x191
 8010920:	e00a      	b.n	8010938 <rclc_executor_spin_some.part.0+0xac>
 8010922:	f7ff fb7d 	bl	8010020 <_rclc_check_for_new_data>
 8010926:	4604      	mov	r4, r0
 8010928:	b110      	cbz	r0, 8010930 <rclc_executor_spin_some.part.0+0xa4>
 801092a:	4548      	cmp	r0, r9
 801092c:	f040 80b2 	bne.w	8010a94 <rclc_executor_spin_some.part.0+0x208>
 8010930:	68ab      	ldr	r3, [r5, #8]
 8010932:	4598      	cmp	r8, r3
 8010934:	f080 8126 	bcs.w	8010b84 <rclc_executor_spin_some.part.0+0x2f8>
 8010938:	686a      	ldr	r2, [r5, #4]
 801093a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801093e:	4631      	mov	r1, r6
 8010940:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8010944:	f108 0801 	add.w	r8, r8, #1
 8010948:	f1bc 0f00 	cmp.w	ip, #0
 801094c:	d1e9      	bne.n	8010922 <rclc_executor_spin_some.part.0+0x96>
 801094e:	4619      	mov	r1, r3
 8010950:	4610      	mov	r0, r2
 8010952:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8010956:	4798      	blx	r3
 8010958:	2800      	cmp	r0, #0
 801095a:	f000 809b 	beq.w	8010a94 <rclc_executor_spin_some.part.0+0x208>
 801095e:	68ab      	ldr	r3, [r5, #8]
 8010960:	2b00      	cmp	r3, #0
 8010962:	f000 8097 	beq.w	8010a94 <rclc_executor_spin_some.part.0+0x208>
 8010966:	f04f 0800 	mov.w	r8, #0
 801096a:	f240 1991 	movw	r9, #401	@ 0x191
 801096e:	e009      	b.n	8010984 <rclc_executor_spin_some.part.0+0xf8>
 8010970:	f7ff fba4 	bl	80100bc <_rclc_take_new_data>
 8010974:	4604      	mov	r4, r0
 8010976:	b110      	cbz	r0, 801097e <rclc_executor_spin_some.part.0+0xf2>
 8010978:	4548      	cmp	r0, r9
 801097a:	f040 808b 	bne.w	8010a94 <rclc_executor_spin_some.part.0+0x208>
 801097e:	68ab      	ldr	r3, [r5, #8]
 8010980:	4598      	cmp	r8, r3
 8010982:	d209      	bcs.n	8010998 <rclc_executor_spin_some.part.0+0x10c>
 8010984:	6868      	ldr	r0, [r5, #4]
 8010986:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 801098a:	4631      	mov	r1, r6
 801098c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8010990:	f108 0801 	add.w	r8, r8, #1
 8010994:	2a00      	cmp	r2, #0
 8010996:	d1eb      	bne.n	8010970 <rclc_executor_spin_some.part.0+0xe4>
 8010998:	2600      	movs	r6, #0
 801099a:	b97b      	cbnz	r3, 80109bc <rclc_executor_spin_some.part.0+0x130>
 801099c:	e07a      	b.n	8010a94 <rclc_executor_spin_some.part.0+0x208>
 801099e:	f812 200c 	ldrb.w	r2, [r2, ip]
 80109a2:	2a08      	cmp	r2, #8
 80109a4:	f000 80fd 	beq.w	8010ba2 <rclc_executor_spin_some.part.0+0x316>
 80109a8:	2a09      	cmp	r2, #9
 80109aa:	f000 80ef 	beq.w	8010b8c <rclc_executor_spin_some.part.0+0x300>
 80109ae:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 80109b2:	b98a      	cbnz	r2, 80109d8 <rclc_executor_spin_some.part.0+0x14c>
 80109b4:	3601      	adds	r6, #1
 80109b6:	429e      	cmp	r6, r3
 80109b8:	d262      	bcs.n	8010a80 <rclc_executor_spin_some.part.0+0x1f4>
 80109ba:	2400      	movs	r4, #0
 80109bc:	686a      	ldr	r2, [r5, #4]
 80109be:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 80109c2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 80109c6:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 80109ca:	2900      	cmp	r1, #0
 80109cc:	d062      	beq.n	8010a94 <rclc_executor_spin_some.part.0+0x208>
 80109ce:	7841      	ldrb	r1, [r0, #1]
 80109d0:	2900      	cmp	r1, #0
 80109d2:	d0e4      	beq.n	801099e <rclc_executor_spin_some.part.0+0x112>
 80109d4:	2901      	cmp	r1, #1
 80109d6:	d1ed      	bne.n	80109b4 <rclc_executor_spin_some.part.0+0x128>
 80109d8:	f7ff fce4 	bl	80103a4 <_rclc_execute.part.0>
 80109dc:	2800      	cmp	r0, #0
 80109de:	f040 80b6 	bne.w	8010b4e <rclc_executor_spin_some.part.0+0x2c2>
 80109e2:	68ab      	ldr	r3, [r5, #8]
 80109e4:	e7e6      	b.n	80109b4 <rclc_executor_spin_some.part.0+0x128>
 80109e6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80109ea:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80109ee:	4630      	mov	r0, r6
 80109f0:	f006 fc58 	bl	80172a4 <rcl_wait_set_add_client>
 80109f4:	2800      	cmp	r0, #0
 80109f6:	f43f af7a 	beq.w	80108ee <rclc_executor_spin_some.part.0+0x62>
 80109fa:	9001      	str	r0, [sp, #4]
 80109fc:	f000 fa74 	bl	8010ee8 <rcutils_reset_error>
 8010a00:	9801      	ldr	r0, [sp, #4]
 8010a02:	4607      	mov	r7, r0
 8010a04:	e03c      	b.n	8010a80 <rclc_executor_spin_some.part.0+0x1f4>
 8010a06:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010a0a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010a0e:	4630      	mov	r0, r6
 8010a10:	f006 f900 	bl	8016c14 <rcl_wait_set_add_subscription>
 8010a14:	2800      	cmp	r0, #0
 8010a16:	f43f af6a 	beq.w	80108ee <rclc_executor_spin_some.part.0+0x62>
 8010a1a:	e7ee      	b.n	80109fa <rclc_executor_spin_some.part.0+0x16e>
 8010a1c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010a20:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010a24:	4630      	mov	r0, r6
 8010a26:	f006 fc0d 	bl	8017244 <rcl_wait_set_add_timer>
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	f43f af5f 	beq.w	80108ee <rclc_executor_spin_some.part.0+0x62>
 8010a30:	e7e3      	b.n	80109fa <rclc_executor_spin_some.part.0+0x16e>
 8010a32:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010a36:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010a3a:	4630      	mov	r0, r6
 8010a3c:	f006 fbd6 	bl	80171ec <rcl_wait_set_add_guard_condition>
 8010a40:	2800      	cmp	r0, #0
 8010a42:	f43f af54 	beq.w	80108ee <rclc_executor_spin_some.part.0+0x62>
 8010a46:	e7d8      	b.n	80109fa <rclc_executor_spin_some.part.0+0x16e>
 8010a48:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010a4c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010a50:	3110      	adds	r1, #16
 8010a52:	4630      	mov	r0, r6
 8010a54:	f007 f958 	bl	8017d08 <rcl_action_wait_set_add_action_server>
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	f43f af48 	beq.w	80108ee <rclc_executor_spin_some.part.0+0x62>
 8010a5e:	e7cc      	b.n	80109fa <rclc_executor_spin_some.part.0+0x16e>
 8010a60:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010a64:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010a68:	3110      	adds	r1, #16
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	4630      	mov	r0, r6
 8010a6e:	f006 ff23 	bl	80178b8 <rcl_action_wait_set_add_action_client>
 8010a72:	2800      	cmp	r0, #0
 8010a74:	f43f af3b 	beq.w	80108ee <rclc_executor_spin_some.part.0+0x62>
 8010a78:	e7bf      	b.n	80109fa <rclc_executor_spin_some.part.0+0x16e>
 8010a7a:	f000 fa35 	bl	8010ee8 <rcutils_reset_error>
 8010a7e:	2701      	movs	r7, #1
 8010a80:	4638      	mov	r0, r7
 8010a82:	b003      	add	sp, #12
 8010a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a88:	f000 fa2e 	bl	8010ee8 <rcutils_reset_error>
 8010a8c:	4638      	mov	r0, r7
 8010a8e:	b003      	add	sp, #12
 8010a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a94:	4627      	mov	r7, r4
 8010a96:	e7f3      	b.n	8010a80 <rclc_executor_spin_some.part.0+0x1f4>
 8010a98:	68ab      	ldr	r3, [r5, #8]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	f000 8092 	beq.w	8010bc4 <rclc_executor_spin_some.part.0+0x338>
 8010aa0:	2400      	movs	r4, #0
 8010aa2:	46a0      	mov	r8, r4
 8010aa4:	f240 1991 	movw	r9, #401	@ 0x191
 8010aa8:	e008      	b.n	8010abc <rclc_executor_spin_some.part.0+0x230>
 8010aaa:	f7ff fab9 	bl	8010020 <_rclc_check_for_new_data>
 8010aae:	4604      	mov	r4, r0
 8010ab0:	b108      	cbz	r0, 8010ab6 <rclc_executor_spin_some.part.0+0x22a>
 8010ab2:	4548      	cmp	r0, r9
 8010ab4:	d1ee      	bne.n	8010a94 <rclc_executor_spin_some.part.0+0x208>
 8010ab6:	68ab      	ldr	r3, [r5, #8]
 8010ab8:	4598      	cmp	r8, r3
 8010aba:	d265      	bcs.n	8010b88 <rclc_executor_spin_some.part.0+0x2fc>
 8010abc:	686a      	ldr	r2, [r5, #4]
 8010abe:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8010ac2:	4631      	mov	r1, r6
 8010ac4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8010ac8:	f108 0801 	add.w	r8, r8, #1
 8010acc:	f1bc 0f00 	cmp.w	ip, #0
 8010ad0:	d1eb      	bne.n	8010aaa <rclc_executor_spin_some.part.0+0x21e>
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	4610      	mov	r0, r2
 8010ad6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8010ada:	4798      	blx	r3
 8010adc:	2800      	cmp	r0, #0
 8010ade:	d0d9      	beq.n	8010a94 <rclc_executor_spin_some.part.0+0x208>
 8010ae0:	68ab      	ldr	r3, [r5, #8]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d0d6      	beq.n	8010a94 <rclc_executor_spin_some.part.0+0x208>
 8010ae6:	f04f 0800 	mov.w	r8, #0
 8010aea:	f240 1991 	movw	r9, #401	@ 0x191
 8010aee:	f240 2a59 	movw	sl, #601	@ 0x259
 8010af2:	e00e      	b.n	8010b12 <rclc_executor_spin_some.part.0+0x286>
 8010af4:	f813 300b 	ldrb.w	r3, [r3, fp]
 8010af8:	2b08      	cmp	r3, #8
 8010afa:	d033      	beq.n	8010b64 <rclc_executor_spin_some.part.0+0x2d8>
 8010afc:	2b09      	cmp	r3, #9
 8010afe:	d028      	beq.n	8010b52 <rclc_executor_spin_some.part.0+0x2c6>
 8010b00:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8010b04:	b9fb      	cbnz	r3, 8010b46 <rclc_executor_spin_some.part.0+0x2ba>
 8010b06:	68ab      	ldr	r3, [r5, #8]
 8010b08:	f108 0801 	add.w	r8, r8, #1
 8010b0c:	4598      	cmp	r8, r3
 8010b0e:	d2b7      	bcs.n	8010a80 <rclc_executor_spin_some.part.0+0x1f4>
 8010b10:	2400      	movs	r4, #0
 8010b12:	6868      	ldr	r0, [r5, #4]
 8010b14:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8010b18:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8010b1c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d0b7      	beq.n	8010a94 <rclc_executor_spin_some.part.0+0x208>
 8010b24:	4631      	mov	r1, r6
 8010b26:	f7ff fac9 	bl	80100bc <_rclc_take_new_data>
 8010b2a:	b118      	cbz	r0, 8010b34 <rclc_executor_spin_some.part.0+0x2a8>
 8010b2c:	4548      	cmp	r0, r9
 8010b2e:	d001      	beq.n	8010b34 <rclc_executor_spin_some.part.0+0x2a8>
 8010b30:	4550      	cmp	r0, sl
 8010b32:	d10c      	bne.n	8010b4e <rclc_executor_spin_some.part.0+0x2c2>
 8010b34:	686b      	ldr	r3, [r5, #4]
 8010b36:	eb13 000b 	adds.w	r0, r3, fp
 8010b3a:	d021      	beq.n	8010b80 <rclc_executor_spin_some.part.0+0x2f4>
 8010b3c:	7842      	ldrb	r2, [r0, #1]
 8010b3e:	2a00      	cmp	r2, #0
 8010b40:	d0d8      	beq.n	8010af4 <rclc_executor_spin_some.part.0+0x268>
 8010b42:	2a01      	cmp	r2, #1
 8010b44:	d1df      	bne.n	8010b06 <rclc_executor_spin_some.part.0+0x27a>
 8010b46:	f7ff fc2d 	bl	80103a4 <_rclc_execute.part.0>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	d0db      	beq.n	8010b06 <rclc_executor_spin_some.part.0+0x27a>
 8010b4e:	4607      	mov	r7, r0
 8010b50:	e796      	b.n	8010a80 <rclc_executor_spin_some.part.0+0x1f4>
 8010b52:	6843      	ldr	r3, [r0, #4]
 8010b54:	6a1a      	ldr	r2, [r3, #32]
 8010b56:	2a00      	cmp	r2, #0
 8010b58:	d1f5      	bne.n	8010b46 <rclc_executor_spin_some.part.0+0x2ba>
 8010b5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d0d1      	beq.n	8010b06 <rclc_executor_spin_some.part.0+0x27a>
 8010b62:	e7f0      	b.n	8010b46 <rclc_executor_spin_some.part.0+0x2ba>
 8010b64:	6843      	ldr	r3, [r0, #4]
 8010b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010b68:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8010b6c:	d1eb      	bne.n	8010b46 <rclc_executor_spin_some.part.0+0x2ba>
 8010b6e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8010b72:	2a00      	cmp	r2, #0
 8010b74:	d1e7      	bne.n	8010b46 <rclc_executor_spin_some.part.0+0x2ba>
 8010b76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d0c3      	beq.n	8010b06 <rclc_executor_spin_some.part.0+0x27a>
 8010b7e:	e7e2      	b.n	8010b46 <rclc_executor_spin_some.part.0+0x2ba>
 8010b80:	270b      	movs	r7, #11
 8010b82:	e77d      	b.n	8010a80 <rclc_executor_spin_some.part.0+0x1f4>
 8010b84:	686a      	ldr	r2, [r5, #4]
 8010b86:	e6e2      	b.n	801094e <rclc_executor_spin_some.part.0+0xc2>
 8010b88:	686a      	ldr	r2, [r5, #4]
 8010b8a:	e7a2      	b.n	8010ad2 <rclc_executor_spin_some.part.0+0x246>
 8010b8c:	6842      	ldr	r2, [r0, #4]
 8010b8e:	6a11      	ldr	r1, [r2, #32]
 8010b90:	2900      	cmp	r1, #0
 8010b92:	f47f af21 	bne.w	80109d8 <rclc_executor_spin_some.part.0+0x14c>
 8010b96:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8010b9a:	2a00      	cmp	r2, #0
 8010b9c:	f43f af0a 	beq.w	80109b4 <rclc_executor_spin_some.part.0+0x128>
 8010ba0:	e71a      	b.n	80109d8 <rclc_executor_spin_some.part.0+0x14c>
 8010ba2:	6842      	ldr	r2, [r0, #4]
 8010ba4:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8010ba6:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8010baa:	f47f af15 	bne.w	80109d8 <rclc_executor_spin_some.part.0+0x14c>
 8010bae:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8010bb2:	2900      	cmp	r1, #0
 8010bb4:	f47f af10 	bne.w	80109d8 <rclc_executor_spin_some.part.0+0x14c>
 8010bb8:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8010bbc:	2a00      	cmp	r2, #0
 8010bbe:	f43f aef9 	beq.w	80109b4 <rclc_executor_spin_some.part.0+0x128>
 8010bc2:	e709      	b.n	80109d8 <rclc_executor_spin_some.part.0+0x14c>
 8010bc4:	686a      	ldr	r2, [r5, #4]
 8010bc6:	461c      	mov	r4, r3
 8010bc8:	e783      	b.n	8010ad2 <rclc_executor_spin_some.part.0+0x246>
 8010bca:	686a      	ldr	r2, [r5, #4]
 8010bcc:	461c      	mov	r4, r3
 8010bce:	e6be      	b.n	801094e <rclc_executor_spin_some.part.0+0xc2>

08010bd0 <rclc_executor_spin_some>:
 8010bd0:	b190      	cbz	r0, 8010bf8 <rclc_executor_spin_some+0x28>
 8010bd2:	b570      	push	{r4, r5, r6, lr}
 8010bd4:	4604      	mov	r4, r0
 8010bd6:	6800      	ldr	r0, [r0, #0]
 8010bd8:	4616      	mov	r6, r2
 8010bda:	461d      	mov	r5, r3
 8010bdc:	f004 ff50 	bl	8015a80 <rcl_context_is_valid>
 8010be0:	b130      	cbz	r0, 8010bf0 <rclc_executor_spin_some+0x20>
 8010be2:	4632      	mov	r2, r6
 8010be4:	462b      	mov	r3, r5
 8010be6:	4620      	mov	r0, r4
 8010be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bec:	f7ff be4e 	b.w	801088c <rclc_executor_spin_some.part.0>
 8010bf0:	f000 f97a 	bl	8010ee8 <rcutils_reset_error>
 8010bf4:	2001      	movs	r0, #1
 8010bf6:	bd70      	pop	{r4, r5, r6, pc}
 8010bf8:	200b      	movs	r0, #11
 8010bfa:	4770      	bx	lr

08010bfc <rclc_executor_handle_counters_zero_init>:
 8010bfc:	b130      	cbz	r0, 8010c0c <rclc_executor_handle_counters_zero_init+0x10>
 8010bfe:	b508      	push	{r3, lr}
 8010c00:	2220      	movs	r2, #32
 8010c02:	2100      	movs	r1, #0
 8010c04:	f00c f860 	bl	801ccc8 <memset>
 8010c08:	2000      	movs	r0, #0
 8010c0a:	bd08      	pop	{r3, pc}
 8010c0c:	200b      	movs	r0, #11
 8010c0e:	4770      	bx	lr

08010c10 <rclc_executor_handle_init>:
 8010c10:	b168      	cbz	r0, 8010c2e <rclc_executor_handle_init+0x1e>
 8010c12:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8010c38 <rclc_executor_handle_init+0x28>
 8010c16:	2300      	movs	r3, #0
 8010c18:	220b      	movs	r2, #11
 8010c1a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 8010c1e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8010c22:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8010c26:	8002      	strh	r2, [r0, #0]
 8010c28:	8703      	strh	r3, [r0, #56]	@ 0x38
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	4770      	bx	lr
 8010c2e:	200b      	movs	r0, #11
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop
 8010c34:	f3af 8000 	nop.w
	...

08010c40 <rclc_support_init>:
 8010c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c44:	b086      	sub	sp, #24
 8010c46:	b3b8      	cbz	r0, 8010cb8 <rclc_support_init+0x78>
 8010c48:	461c      	mov	r4, r3
 8010c4a:	b3ab      	cbz	r3, 8010cb8 <rclc_support_init+0x78>
 8010c4c:	460f      	mov	r7, r1
 8010c4e:	4690      	mov	r8, r2
 8010c50:	4606      	mov	r6, r0
 8010c52:	f005 f869 	bl	8015d28 <rcl_get_zero_initialized_init_options>
 8010c56:	f104 030c 	add.w	r3, r4, #12
 8010c5a:	9005      	str	r0, [sp, #20]
 8010c5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c60:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010c64:	a805      	add	r0, sp, #20
 8010c66:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010c6a:	f005 f85f 	bl	8015d2c <rcl_init_options_init>
 8010c6e:	4605      	mov	r5, r0
 8010c70:	b9e0      	cbnz	r0, 8010cac <rclc_support_init+0x6c>
 8010c72:	ad02      	add	r5, sp, #8
 8010c74:	4628      	mov	r0, r5
 8010c76:	f004 fef9 	bl	8015a6c <rcl_get_zero_initialized_context>
 8010c7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010c7e:	4633      	mov	r3, r6
 8010c80:	e886 0003 	stmia.w	r6, {r0, r1}
 8010c84:	aa05      	add	r2, sp, #20
 8010c86:	4641      	mov	r1, r8
 8010c88:	4638      	mov	r0, r7
 8010c8a:	f004 ff5f 	bl	8015b4c <rcl_init>
 8010c8e:	4605      	mov	r5, r0
 8010c90:	b9b8      	cbnz	r0, 8010cc2 <rclc_support_init+0x82>
 8010c92:	60b4      	str	r4, [r6, #8]
 8010c94:	4622      	mov	r2, r4
 8010c96:	f106 010c 	add.w	r1, r6, #12
 8010c9a:	2003      	movs	r0, #3
 8010c9c:	f005 fd74 	bl	8016788 <rcl_clock_init>
 8010ca0:	4605      	mov	r5, r0
 8010ca2:	b970      	cbnz	r0, 8010cc2 <rclc_support_init+0x82>
 8010ca4:	a805      	add	r0, sp, #20
 8010ca6:	f005 f8a7 	bl	8015df8 <rcl_init_options_fini>
 8010caa:	b108      	cbz	r0, 8010cb0 <rclc_support_init+0x70>
 8010cac:	f000 f91c 	bl	8010ee8 <rcutils_reset_error>
 8010cb0:	4628      	mov	r0, r5
 8010cb2:	b006      	add	sp, #24
 8010cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cb8:	250b      	movs	r5, #11
 8010cba:	4628      	mov	r0, r5
 8010cbc:	b006      	add	sp, #24
 8010cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cc2:	f000 f911 	bl	8010ee8 <rcutils_reset_error>
 8010cc6:	a805      	add	r0, sp, #20
 8010cc8:	f005 f896 	bl	8015df8 <rcl_init_options_fini>
 8010ccc:	2800      	cmp	r0, #0
 8010cce:	d0ef      	beq.n	8010cb0 <rclc_support_init+0x70>
 8010cd0:	e7ec      	b.n	8010cac <rclc_support_init+0x6c>
 8010cd2:	bf00      	nop

08010cd4 <rclc_node_init_default>:
 8010cd4:	b3b8      	cbz	r0, 8010d46 <rclc_node_init_default+0x72>
 8010cd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cda:	460d      	mov	r5, r1
 8010cdc:	b0a1      	sub	sp, #132	@ 0x84
 8010cde:	b329      	cbz	r1, 8010d2c <rclc_node_init_default+0x58>
 8010ce0:	4616      	mov	r6, r2
 8010ce2:	b31a      	cbz	r2, 8010d2c <rclc_node_init_default+0x58>
 8010ce4:	461f      	mov	r7, r3
 8010ce6:	b30b      	cbz	r3, 8010d2c <rclc_node_init_default+0x58>
 8010ce8:	f10d 0810 	add.w	r8, sp, #16
 8010cec:	4604      	mov	r4, r0
 8010cee:	4640      	mov	r0, r8
 8010cf0:	f005 f93a 	bl	8015f68 <rcl_get_zero_initialized_node>
 8010cf4:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010cf8:	f10d 0918 	add.w	r9, sp, #24
 8010cfc:	e884 0003 	stmia.w	r4, {r0, r1}
 8010d00:	4648      	mov	r0, r9
 8010d02:	f005 faa9 	bl	8016258 <rcl_node_get_default_options>
 8010d06:	4640      	mov	r0, r8
 8010d08:	f005 f92e 	bl	8015f68 <rcl_get_zero_initialized_node>
 8010d0c:	f8cd 9000 	str.w	r9, [sp]
 8010d10:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010d14:	463b      	mov	r3, r7
 8010d16:	e884 0003 	stmia.w	r4, {r0, r1}
 8010d1a:	4632      	mov	r2, r6
 8010d1c:	4629      	mov	r1, r5
 8010d1e:	4620      	mov	r0, r4
 8010d20:	f005 f92c 	bl	8015f7c <rcl_node_init>
 8010d24:	b930      	cbnz	r0, 8010d34 <rclc_node_init_default+0x60>
 8010d26:	b021      	add	sp, #132	@ 0x84
 8010d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d2c:	200b      	movs	r0, #11
 8010d2e:	b021      	add	sp, #132	@ 0x84
 8010d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d34:	9003      	str	r0, [sp, #12]
 8010d36:	f000 f8d7 	bl	8010ee8 <rcutils_reset_error>
 8010d3a:	f000 f8d5 	bl	8010ee8 <rcutils_reset_error>
 8010d3e:	9803      	ldr	r0, [sp, #12]
 8010d40:	b021      	add	sp, #132	@ 0x84
 8010d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d46:	200b      	movs	r0, #11
 8010d48:	4770      	bx	lr
 8010d4a:	bf00      	nop

08010d4c <rclc_publisher_init_default>:
 8010d4c:	b368      	cbz	r0, 8010daa <rclc_publisher_init_default+0x5e>
 8010d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d52:	460d      	mov	r5, r1
 8010d54:	b0a0      	sub	sp, #128	@ 0x80
 8010d56:	b321      	cbz	r1, 8010da2 <rclc_publisher_init_default+0x56>
 8010d58:	4616      	mov	r6, r2
 8010d5a:	b312      	cbz	r2, 8010da2 <rclc_publisher_init_default+0x56>
 8010d5c:	461f      	mov	r7, r3
 8010d5e:	b303      	cbz	r3, 8010da2 <rclc_publisher_init_default+0x56>
 8010d60:	4604      	mov	r4, r0
 8010d62:	f7ff f84d 	bl	800fe00 <rcl_get_zero_initialized_publisher>
 8010d66:	f10d 0810 	add.w	r8, sp, #16
 8010d6a:	6020      	str	r0, [r4, #0]
 8010d6c:	4640      	mov	r0, r8
 8010d6e:	f7ff f8e3 	bl	800ff38 <rcl_publisher_get_default_options>
 8010d72:	490f      	ldr	r1, [pc, #60]	@ (8010db0 <rclc_publisher_init_default+0x64>)
 8010d74:	2250      	movs	r2, #80	@ 0x50
 8010d76:	4640      	mov	r0, r8
 8010d78:	f00c f86f 	bl	801ce5a <memcpy>
 8010d7c:	f8cd 8000 	str.w	r8, [sp]
 8010d80:	463b      	mov	r3, r7
 8010d82:	4632      	mov	r2, r6
 8010d84:	4629      	mov	r1, r5
 8010d86:	4620      	mov	r0, r4
 8010d88:	f7ff f840 	bl	800fe0c <rcl_publisher_init>
 8010d8c:	b910      	cbnz	r0, 8010d94 <rclc_publisher_init_default+0x48>
 8010d8e:	b020      	add	sp, #128	@ 0x80
 8010d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d94:	9003      	str	r0, [sp, #12]
 8010d96:	f000 f8a7 	bl	8010ee8 <rcutils_reset_error>
 8010d9a:	9803      	ldr	r0, [sp, #12]
 8010d9c:	b020      	add	sp, #128	@ 0x80
 8010d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010da2:	200b      	movs	r0, #11
 8010da4:	b020      	add	sp, #128	@ 0x80
 8010da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010daa:	200b      	movs	r0, #11
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	0801dd90 	.word	0x0801dd90

08010db4 <rclc_subscription_init_default>:
 8010db4:	b368      	cbz	r0, 8010e12 <rclc_subscription_init_default+0x5e>
 8010db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dba:	460d      	mov	r5, r1
 8010dbc:	b0a0      	sub	sp, #128	@ 0x80
 8010dbe:	b321      	cbz	r1, 8010e0a <rclc_subscription_init_default+0x56>
 8010dc0:	4616      	mov	r6, r2
 8010dc2:	b312      	cbz	r2, 8010e0a <rclc_subscription_init_default+0x56>
 8010dc4:	461f      	mov	r7, r3
 8010dc6:	b303      	cbz	r3, 8010e0a <rclc_subscription_init_default+0x56>
 8010dc8:	4604      	mov	r4, r0
 8010dca:	f005 fb81 	bl	80164d0 <rcl_get_zero_initialized_subscription>
 8010dce:	f10d 0810 	add.w	r8, sp, #16
 8010dd2:	6020      	str	r0, [r4, #0]
 8010dd4:	4640      	mov	r0, r8
 8010dd6:	f005 fc29 	bl	801662c <rcl_subscription_get_default_options>
 8010dda:	490f      	ldr	r1, [pc, #60]	@ (8010e18 <rclc_subscription_init_default+0x64>)
 8010ddc:	2250      	movs	r2, #80	@ 0x50
 8010dde:	4640      	mov	r0, r8
 8010de0:	f00c f83b 	bl	801ce5a <memcpy>
 8010de4:	f8cd 8000 	str.w	r8, [sp]
 8010de8:	463b      	mov	r3, r7
 8010dea:	4632      	mov	r2, r6
 8010dec:	4629      	mov	r1, r5
 8010dee:	4620      	mov	r0, r4
 8010df0:	f005 fb74 	bl	80164dc <rcl_subscription_init>
 8010df4:	b910      	cbnz	r0, 8010dfc <rclc_subscription_init_default+0x48>
 8010df6:	b020      	add	sp, #128	@ 0x80
 8010df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dfc:	9003      	str	r0, [sp, #12]
 8010dfe:	f000 f873 	bl	8010ee8 <rcutils_reset_error>
 8010e02:	9803      	ldr	r0, [sp, #12]
 8010e04:	b020      	add	sp, #128	@ 0x80
 8010e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e0a:	200b      	movs	r0, #11
 8010e0c:	b020      	add	sp, #128	@ 0x80
 8010e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e12:	200b      	movs	r0, #11
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop
 8010e18:	0801dde0 	.word	0x0801dde0

08010e1c <__default_zero_allocate>:
 8010e1c:	f00b ba6a 	b.w	801c2f4 <calloc>

08010e20 <__default_reallocate>:
 8010e20:	f00b bbf6 	b.w	801c610 <realloc>

08010e24 <__default_deallocate>:
 8010e24:	f00b bad2 	b.w	801c3cc <free>

08010e28 <__default_allocate>:
 8010e28:	f00b bac8 	b.w	801c3bc <malloc>

08010e2c <rcutils_get_zero_initialized_allocator>:
 8010e2c:	b510      	push	{r4, lr}
 8010e2e:	4c05      	ldr	r4, [pc, #20]	@ (8010e44 <rcutils_get_zero_initialized_allocator+0x18>)
 8010e30:	4686      	mov	lr, r0
 8010e32:	4684      	mov	ip, r0
 8010e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e3a:	6823      	ldr	r3, [r4, #0]
 8010e3c:	f8cc 3000 	str.w	r3, [ip]
 8010e40:	4670      	mov	r0, lr
 8010e42:	bd10      	pop	{r4, pc}
 8010e44:	0801de30 	.word	0x0801de30

08010e48 <rcutils_set_default_allocator>:
 8010e48:	b1a8      	cbz	r0, 8010e76 <rcutils_set_default_allocator+0x2e>
 8010e4a:	6802      	ldr	r2, [r0, #0]
 8010e4c:	b1a2      	cbz	r2, 8010e78 <rcutils_set_default_allocator+0x30>
 8010e4e:	6841      	ldr	r1, [r0, #4]
 8010e50:	b1a1      	cbz	r1, 8010e7c <rcutils_set_default_allocator+0x34>
 8010e52:	b410      	push	{r4}
 8010e54:	68c4      	ldr	r4, [r0, #12]
 8010e56:	b164      	cbz	r4, 8010e72 <rcutils_set_default_allocator+0x2a>
 8010e58:	6880      	ldr	r0, [r0, #8]
 8010e5a:	b138      	cbz	r0, 8010e6c <rcutils_set_default_allocator+0x24>
 8010e5c:	4b08      	ldr	r3, [pc, #32]	@ (8010e80 <rcutils_set_default_allocator+0x38>)
 8010e5e:	601a      	str	r2, [r3, #0]
 8010e60:	2200      	movs	r2, #0
 8010e62:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8010e66:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8010e6a:	2001      	movs	r0, #1
 8010e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	4620      	mov	r0, r4
 8010e74:	e7fa      	b.n	8010e6c <rcutils_set_default_allocator+0x24>
 8010e76:	4770      	bx	lr
 8010e78:	4610      	mov	r0, r2
 8010e7a:	4770      	bx	lr
 8010e7c:	4608      	mov	r0, r1
 8010e7e:	4770      	bx	lr
 8010e80:	20000038 	.word	0x20000038

08010e84 <rcutils_get_default_allocator>:
 8010e84:	b510      	push	{r4, lr}
 8010e86:	4c05      	ldr	r4, [pc, #20]	@ (8010e9c <rcutils_get_default_allocator+0x18>)
 8010e88:	4686      	mov	lr, r0
 8010e8a:	4684      	mov	ip, r0
 8010e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e92:	6823      	ldr	r3, [r4, #0]
 8010e94:	f8cc 3000 	str.w	r3, [ip]
 8010e98:	4670      	mov	r0, lr
 8010e9a:	bd10      	pop	{r4, pc}
 8010e9c:	20000038 	.word	0x20000038

08010ea0 <rcutils_allocator_is_valid>:
 8010ea0:	b158      	cbz	r0, 8010eba <rcutils_allocator_is_valid+0x1a>
 8010ea2:	6803      	ldr	r3, [r0, #0]
 8010ea4:	b143      	cbz	r3, 8010eb8 <rcutils_allocator_is_valid+0x18>
 8010ea6:	6843      	ldr	r3, [r0, #4]
 8010ea8:	b133      	cbz	r3, 8010eb8 <rcutils_allocator_is_valid+0x18>
 8010eaa:	68c3      	ldr	r3, [r0, #12]
 8010eac:	b123      	cbz	r3, 8010eb8 <rcutils_allocator_is_valid+0x18>
 8010eae:	6880      	ldr	r0, [r0, #8]
 8010eb0:	3800      	subs	r0, #0
 8010eb2:	bf18      	it	ne
 8010eb4:	2001      	movne	r0, #1
 8010eb6:	4770      	bx	lr
 8010eb8:	4618      	mov	r0, r3
 8010eba:	4770      	bx	lr

08010ebc <rcutils_get_error_string>:
 8010ebc:	4b06      	ldr	r3, [pc, #24]	@ (8010ed8 <rcutils_get_error_string+0x1c>)
 8010ebe:	781b      	ldrb	r3, [r3, #0]
 8010ec0:	b13b      	cbz	r3, 8010ed2 <rcutils_get_error_string+0x16>
 8010ec2:	4b06      	ldr	r3, [pc, #24]	@ (8010edc <rcutils_get_error_string+0x20>)
 8010ec4:	781a      	ldrb	r2, [r3, #0]
 8010ec6:	b90a      	cbnz	r2, 8010ecc <rcutils_get_error_string+0x10>
 8010ec8:	2201      	movs	r2, #1
 8010eca:	701a      	strb	r2, [r3, #0]
 8010ecc:	4b04      	ldr	r3, [pc, #16]	@ (8010ee0 <rcutils_get_error_string+0x24>)
 8010ece:	7818      	ldrb	r0, [r3, #0]
 8010ed0:	4770      	bx	lr
 8010ed2:	4b04      	ldr	r3, [pc, #16]	@ (8010ee4 <rcutils_get_error_string+0x28>)
 8010ed4:	7818      	ldrb	r0, [r3, #0]
 8010ed6:	4770      	bx	lr
 8010ed8:	2000e278 	.word	0x2000e278
 8010edc:	2000e291 	.word	0x2000e291
 8010ee0:	2000e290 	.word	0x2000e290
 8010ee4:	0801de44 	.word	0x0801de44

08010ee8 <rcutils_reset_error>:
 8010ee8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8010f08 <rcutils_reset_error+0x20>
 8010eec:	4a08      	ldr	r2, [pc, #32]	@ (8010f10 <rcutils_reset_error+0x28>)
 8010eee:	4809      	ldr	r0, [pc, #36]	@ (8010f14 <rcutils_reset_error+0x2c>)
 8010ef0:	4909      	ldr	r1, [pc, #36]	@ (8010f18 <rcutils_reset_error+0x30>)
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	8013      	strh	r3, [r2, #0]
 8010ef6:	ed82 7b02 	vstr	d7, [r2, #8]
 8010efa:	4a08      	ldr	r2, [pc, #32]	@ (8010f1c <rcutils_reset_error+0x34>)
 8010efc:	7003      	strb	r3, [r0, #0]
 8010efe:	700b      	strb	r3, [r1, #0]
 8010f00:	7013      	strb	r3, [r2, #0]
 8010f02:	4770      	bx	lr
 8010f04:	f3af 8000 	nop.w
	...
 8010f10:	2000e280 	.word	0x2000e280
 8010f14:	2000e291 	.word	0x2000e291
 8010f18:	2000e290 	.word	0x2000e290
 8010f1c:	2000e278 	.word	0x2000e278

08010f20 <rcutils_system_time_now>:
 8010f20:	b308      	cbz	r0, 8010f66 <rcutils_system_time_now+0x46>
 8010f22:	b570      	push	{r4, r5, r6, lr}
 8010f24:	b084      	sub	sp, #16
 8010f26:	4604      	mov	r4, r0
 8010f28:	4669      	mov	r1, sp
 8010f2a:	2001      	movs	r0, #1
 8010f2c:	f7f0 fcc0 	bl	80018b0 <clock_gettime>
 8010f30:	e9dd 3500 	ldrd	r3, r5, [sp]
 8010f34:	2d00      	cmp	r5, #0
 8010f36:	db13      	blt.n	8010f60 <rcutils_system_time_now+0x40>
 8010f38:	9902      	ldr	r1, [sp, #8]
 8010f3a:	2900      	cmp	r1, #0
 8010f3c:	db0d      	blt.n	8010f5a <rcutils_system_time_now+0x3a>
 8010f3e:	4e0b      	ldr	r6, [pc, #44]	@ (8010f6c <rcutils_system_time_now+0x4c>)
 8010f40:	fba3 3206 	umull	r3, r2, r3, r6
 8010f44:	185b      	adds	r3, r3, r1
 8010f46:	fb06 2205 	mla	r2, r6, r5, r2
 8010f4a:	f04f 0000 	mov.w	r0, #0
 8010f4e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8010f52:	e9c4 3200 	strd	r3, r2, [r4]
 8010f56:	b004      	add	sp, #16
 8010f58:	bd70      	pop	{r4, r5, r6, pc}
 8010f5a:	ea53 0205 	orrs.w	r2, r3, r5
 8010f5e:	d1ee      	bne.n	8010f3e <rcutils_system_time_now+0x1e>
 8010f60:	2002      	movs	r0, #2
 8010f62:	b004      	add	sp, #16
 8010f64:	bd70      	pop	{r4, r5, r6, pc}
 8010f66:	200b      	movs	r0, #11
 8010f68:	4770      	bx	lr
 8010f6a:	bf00      	nop
 8010f6c:	3b9aca00 	.word	0x3b9aca00

08010f70 <rcutils_steady_time_now>:
 8010f70:	b308      	cbz	r0, 8010fb6 <rcutils_steady_time_now+0x46>
 8010f72:	b570      	push	{r4, r5, r6, lr}
 8010f74:	b084      	sub	sp, #16
 8010f76:	4604      	mov	r4, r0
 8010f78:	4669      	mov	r1, sp
 8010f7a:	2000      	movs	r0, #0
 8010f7c:	f7f0 fc98 	bl	80018b0 <clock_gettime>
 8010f80:	e9dd 3500 	ldrd	r3, r5, [sp]
 8010f84:	2d00      	cmp	r5, #0
 8010f86:	db13      	blt.n	8010fb0 <rcutils_steady_time_now+0x40>
 8010f88:	9902      	ldr	r1, [sp, #8]
 8010f8a:	2900      	cmp	r1, #0
 8010f8c:	db0d      	blt.n	8010faa <rcutils_steady_time_now+0x3a>
 8010f8e:	4e0b      	ldr	r6, [pc, #44]	@ (8010fbc <rcutils_steady_time_now+0x4c>)
 8010f90:	fba3 3206 	umull	r3, r2, r3, r6
 8010f94:	185b      	adds	r3, r3, r1
 8010f96:	fb06 2205 	mla	r2, r6, r5, r2
 8010f9a:	f04f 0000 	mov.w	r0, #0
 8010f9e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8010fa2:	e9c4 3200 	strd	r3, r2, [r4]
 8010fa6:	b004      	add	sp, #16
 8010fa8:	bd70      	pop	{r4, r5, r6, pc}
 8010faa:	ea53 0205 	orrs.w	r2, r3, r5
 8010fae:	d1ee      	bne.n	8010f8e <rcutils_steady_time_now+0x1e>
 8010fb0:	2002      	movs	r0, #2
 8010fb2:	b004      	add	sp, #16
 8010fb4:	bd70      	pop	{r4, r5, r6, pc}
 8010fb6:	200b      	movs	r0, #11
 8010fb8:	4770      	bx	lr
 8010fba:	bf00      	nop
 8010fbc:	3b9aca00 	.word	0x3b9aca00

08010fc0 <rmw_get_default_publisher_options>:
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	6002      	str	r2, [r0, #0]
 8010fc4:	7102      	strb	r2, [r0, #4]
 8010fc6:	4770      	bx	lr

08010fc8 <rmw_uros_set_custom_transport>:
 8010fc8:	b470      	push	{r4, r5, r6}
 8010fca:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8010fce:	b162      	cbz	r2, 8010fea <rmw_uros_set_custom_transport+0x22>
 8010fd0:	b15b      	cbz	r3, 8010fea <rmw_uros_set_custom_transport+0x22>
 8010fd2:	b155      	cbz	r5, 8010fea <rmw_uros_set_custom_transport+0x22>
 8010fd4:	b14e      	cbz	r6, 8010fea <rmw_uros_set_custom_transport+0x22>
 8010fd6:	4c06      	ldr	r4, [pc, #24]	@ (8010ff0 <rmw_uros_set_custom_transport+0x28>)
 8010fd8:	7020      	strb	r0, [r4, #0]
 8010fda:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010fde:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010fe2:	6166      	str	r6, [r4, #20]
 8010fe4:	2000      	movs	r0, #0
 8010fe6:	bc70      	pop	{r4, r5, r6}
 8010fe8:	4770      	bx	lr
 8010fea:	200b      	movs	r0, #11
 8010fec:	bc70      	pop	{r4, r5, r6}
 8010fee:	4770      	bx	lr
 8010ff0:	2000e294 	.word	0x2000e294

08010ff4 <flush_session>:
 8010ff4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8010ff6:	f002 bd23 	b.w	8013a40 <uxr_run_session_until_confirm_delivery>
 8010ffa:	bf00      	nop

08010ffc <rmw_publish>:
 8010ffc:	2800      	cmp	r0, #0
 8010ffe:	d053      	beq.n	80110a8 <rmw_publish+0xac>
 8011000:	b570      	push	{r4, r5, r6, lr}
 8011002:	460d      	mov	r5, r1
 8011004:	b08e      	sub	sp, #56	@ 0x38
 8011006:	2900      	cmp	r1, #0
 8011008:	d04b      	beq.n	80110a2 <rmw_publish+0xa6>
 801100a:	4604      	mov	r4, r0
 801100c:	6800      	ldr	r0, [r0, #0]
 801100e:	f000 fced 	bl	80119ec <is_uxrce_rmw_identifier_valid>
 8011012:	2800      	cmp	r0, #0
 8011014:	d045      	beq.n	80110a2 <rmw_publish+0xa6>
 8011016:	6866      	ldr	r6, [r4, #4]
 8011018:	2e00      	cmp	r6, #0
 801101a:	d042      	beq.n	80110a2 <rmw_publish+0xa6>
 801101c:	69b4      	ldr	r4, [r6, #24]
 801101e:	4628      	mov	r0, r5
 8011020:	6923      	ldr	r3, [r4, #16]
 8011022:	4798      	blx	r3
 8011024:	69f3      	ldr	r3, [r6, #28]
 8011026:	9005      	str	r0, [sp, #20]
 8011028:	b113      	cbz	r3, 8011030 <rmw_publish+0x34>
 801102a:	a805      	add	r0, sp, #20
 801102c:	4798      	blx	r3
 801102e:	9805      	ldr	r0, [sp, #20]
 8011030:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011034:	691b      	ldr	r3, [r3, #16]
 8011036:	9000      	str	r0, [sp, #0]
 8011038:	6972      	ldr	r2, [r6, #20]
 801103a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801103c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011040:	ab06      	add	r3, sp, #24
 8011042:	f003 fae9 	bl	8014618 <uxr_prepare_output_stream>
 8011046:	b1d8      	cbz	r0, 8011080 <rmw_publish+0x84>
 8011048:	68a3      	ldr	r3, [r4, #8]
 801104a:	a906      	add	r1, sp, #24
 801104c:	4628      	mov	r0, r5
 801104e:	4798      	blx	r3
 8011050:	6a33      	ldr	r3, [r6, #32]
 8011052:	4604      	mov	r4, r0
 8011054:	b10b      	cbz	r3, 801105a <rmw_publish+0x5e>
 8011056:	a806      	add	r0, sp, #24
 8011058:	4798      	blx	r3
 801105a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 801105e:	2b01      	cmp	r3, #1
 8011060:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011064:	d022      	beq.n	80110ac <rmw_publish+0xb0>
 8011066:	6918      	ldr	r0, [r3, #16]
 8011068:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 801106a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801106e:	f002 fce7 	bl	8013a40 <uxr_run_session_until_confirm_delivery>
 8011072:	4020      	ands	r0, r4
 8011074:	b2c4      	uxtb	r4, r0
 8011076:	f084 0001 	eor.w	r0, r4, #1
 801107a:	b2c0      	uxtb	r0, r0
 801107c:	b00e      	add	sp, #56	@ 0x38
 801107e:	bd70      	pop	{r4, r5, r6, pc}
 8011080:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011084:	6918      	ldr	r0, [r3, #16]
 8011086:	9b05      	ldr	r3, [sp, #20]
 8011088:	9300      	str	r3, [sp, #0]
 801108a:	4b0b      	ldr	r3, [pc, #44]	@ (80110b8 <rmw_publish+0xbc>)
 801108c:	9301      	str	r3, [sp, #4]
 801108e:	9602      	str	r6, [sp, #8]
 8011090:	6972      	ldr	r2, [r6, #20]
 8011092:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8011094:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011098:	ab06      	add	r3, sp, #24
 801109a:	f003 faed 	bl	8014678 <uxr_prepare_output_stream_fragmented>
 801109e:	2800      	cmp	r0, #0
 80110a0:	d1d2      	bne.n	8011048 <rmw_publish+0x4c>
 80110a2:	2001      	movs	r0, #1
 80110a4:	b00e      	add	sp, #56	@ 0x38
 80110a6:	bd70      	pop	{r4, r5, r6, pc}
 80110a8:	2001      	movs	r0, #1
 80110aa:	4770      	bx	lr
 80110ac:	6918      	ldr	r0, [r3, #16]
 80110ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80110b2:	f002 f905 	bl	80132c0 <uxr_flash_output_streams>
 80110b6:	e7de      	b.n	8011076 <rmw_publish+0x7a>
 80110b8:	08010ff5 	.word	0x08010ff5

080110bc <rmw_create_publisher>:
 80110bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c0:	b087      	sub	sp, #28
 80110c2:	2800      	cmp	r0, #0
 80110c4:	f000 80cc 	beq.w	8011260 <rmw_create_publisher+0x1a4>
 80110c8:	460e      	mov	r6, r1
 80110ca:	2900      	cmp	r1, #0
 80110cc:	f000 80c8 	beq.w	8011260 <rmw_create_publisher+0x1a4>
 80110d0:	4604      	mov	r4, r0
 80110d2:	6800      	ldr	r0, [r0, #0]
 80110d4:	4615      	mov	r5, r2
 80110d6:	4698      	mov	r8, r3
 80110d8:	f000 fc88 	bl	80119ec <is_uxrce_rmw_identifier_valid>
 80110dc:	2800      	cmp	r0, #0
 80110de:	f000 80bf 	beq.w	8011260 <rmw_create_publisher+0x1a4>
 80110e2:	2d00      	cmp	r5, #0
 80110e4:	f000 80bc 	beq.w	8011260 <rmw_create_publisher+0x1a4>
 80110e8:	782b      	ldrb	r3, [r5, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f000 80b8 	beq.w	8011260 <rmw_create_publisher+0x1a4>
 80110f0:	f1b8 0f00 	cmp.w	r8, #0
 80110f4:	f000 80b4 	beq.w	8011260 <rmw_create_publisher+0x1a4>
 80110f8:	485c      	ldr	r0, [pc, #368]	@ (801126c <rmw_create_publisher+0x1b0>)
 80110fa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80110fe:	f007 fd73 	bl	8018be8 <get_memory>
 8011102:	2800      	cmp	r0, #0
 8011104:	f000 80ac 	beq.w	8011260 <rmw_create_publisher+0x1a4>
 8011108:	6884      	ldr	r4, [r0, #8]
 801110a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 801110e:	f007 fdd3 	bl	8018cb8 <rmw_get_implementation_identifier>
 8011112:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8011116:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801111a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 801111e:	4628      	mov	r0, r5
 8011120:	f7ef f860 	bl	80001e4 <strlen>
 8011124:	3001      	adds	r0, #1
 8011126:	283c      	cmp	r0, #60	@ 0x3c
 8011128:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 801112c:	f200 8091 	bhi.w	8011252 <rmw_create_publisher+0x196>
 8011130:	4a4f      	ldr	r2, [pc, #316]	@ (8011270 <rmw_create_publisher+0x1b4>)
 8011132:	462b      	mov	r3, r5
 8011134:	213c      	movs	r1, #60	@ 0x3c
 8011136:	4650      	mov	r0, sl
 8011138:	f00b fc38 	bl	801c9ac <sniprintf>
 801113c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011140:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8011142:	4641      	mov	r1, r8
 8011144:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8011148:	2250      	movs	r2, #80	@ 0x50
 801114a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801114e:	f00b fe84 	bl	801ce5a <memcpy>
 8011152:	f898 3008 	ldrb.w	r3, [r8, #8]
 8011156:	4947      	ldr	r1, [pc, #284]	@ (8011274 <rmw_create_publisher+0x1b8>)
 8011158:	2b02      	cmp	r3, #2
 801115a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801115e:	bf0c      	ite	eq
 8011160:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8011164:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8011168:	67a3      	str	r3, [r4, #120]	@ 0x78
 801116a:	2300      	movs	r3, #0
 801116c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011170:	4630      	mov	r0, r6
 8011172:	f000 fc49 	bl	8011a08 <get_message_typesupport_handle>
 8011176:	2800      	cmp	r0, #0
 8011178:	d06b      	beq.n	8011252 <rmw_create_publisher+0x196>
 801117a:	6842      	ldr	r2, [r0, #4]
 801117c:	61a2      	str	r2, [r4, #24]
 801117e:	2a00      	cmp	r2, #0
 8011180:	d067      	beq.n	8011252 <rmw_create_publisher+0x196>
 8011182:	4629      	mov	r1, r5
 8011184:	4643      	mov	r3, r8
 8011186:	4648      	mov	r0, r9
 8011188:	f008 f826 	bl	80191d8 <create_topic>
 801118c:	6260      	str	r0, [r4, #36]	@ 0x24
 801118e:	2800      	cmp	r0, #0
 8011190:	d063      	beq.n	801125a <rmw_create_publisher+0x19e>
 8011192:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801119a:	2103      	movs	r1, #3
 801119c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80111a0:	1c42      	adds	r2, r0, #1
 80111a2:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80111a6:	f001 ff3d 	bl	8013024 <uxr_object_id>
 80111aa:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80111ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80111b2:	6120      	str	r0, [r4, #16]
 80111b4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80111b8:	6910      	ldr	r0, [r2, #16]
 80111ba:	2506      	movs	r5, #6
 80111bc:	9500      	str	r5, [sp, #0]
 80111be:	6819      	ldr	r1, [r3, #0]
 80111c0:	6922      	ldr	r2, [r4, #16]
 80111c2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80111c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80111ca:	f001 fddd 	bl	8012d88 <uxr_buffer_create_publisher_bin>
 80111ce:	4602      	mov	r2, r0
 80111d0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80111d4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80111d8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80111dc:	f000 fb86 	bl	80118ec <run_xrce_session>
 80111e0:	b3b8      	cbz	r0, 8011252 <rmw_create_publisher+0x196>
 80111e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80111e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80111ea:	2105      	movs	r1, #5
 80111ec:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 80111f0:	1c42      	adds	r2, r0, #1
 80111f2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 80111f6:	f001 ff15 	bl	8013024 <uxr_object_id>
 80111fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80111fe:	6160      	str	r0, [r4, #20]
 8011200:	691e      	ldr	r6, [r3, #16]
 8011202:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011206:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801120a:	f10d 0a10 	add.w	sl, sp, #16
 801120e:	4641      	mov	r1, r8
 8011210:	4650      	mov	r0, sl
 8011212:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 8011216:	f000 fb85 	bl	8011924 <convert_qos_profile>
 801121a:	9503      	str	r5, [sp, #12]
 801121c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8011220:	9001      	str	r0, [sp, #4]
 8011222:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011226:	f8db 3010 	ldr.w	r3, [fp, #16]
 801122a:	9300      	str	r3, [sp, #0]
 801122c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8011230:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8011234:	f8d8 1000 	ldr.w	r1, [r8]
 8011238:	4630      	mov	r0, r6
 801123a:	f001 fe05 	bl	8012e48 <uxr_buffer_create_datawriter_bin>
 801123e:	4602      	mov	r2, r0
 8011240:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011244:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011248:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801124c:	f000 fb4e 	bl	80118ec <run_xrce_session>
 8011250:	b938      	cbnz	r0, 8011262 <rmw_create_publisher+0x1a6>
 8011252:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8011254:	b108      	cbz	r0, 801125a <rmw_create_publisher+0x19e>
 8011256:	f000 fa47 	bl	80116e8 <rmw_uxrce_fini_topic_memory>
 801125a:	4638      	mov	r0, r7
 801125c:	f000 f9ec 	bl	8011638 <rmw_uxrce_fini_publisher_memory>
 8011260:	2700      	movs	r7, #0
 8011262:	4638      	mov	r0, r7
 8011264:	b007      	add	sp, #28
 8011266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801126a:	bf00      	nop
 801126c:	20012b8c 	.word	0x20012b8c
 8011270:	0801de7c 	.word	0x0801de7c
 8011274:	0801de48 	.word	0x0801de48

08011278 <rmw_publisher_get_actual_qos>:
 8011278:	b150      	cbz	r0, 8011290 <rmw_publisher_get_actual_qos+0x18>
 801127a:	b508      	push	{r3, lr}
 801127c:	460b      	mov	r3, r1
 801127e:	b149      	cbz	r1, 8011294 <rmw_publisher_get_actual_qos+0x1c>
 8011280:	6841      	ldr	r1, [r0, #4]
 8011282:	2250      	movs	r2, #80	@ 0x50
 8011284:	3128      	adds	r1, #40	@ 0x28
 8011286:	4618      	mov	r0, r3
 8011288:	f00b fde7 	bl	801ce5a <memcpy>
 801128c:	2000      	movs	r0, #0
 801128e:	bd08      	pop	{r3, pc}
 8011290:	200b      	movs	r0, #11
 8011292:	4770      	bx	lr
 8011294:	200b      	movs	r0, #11
 8011296:	bd08      	pop	{r3, pc}

08011298 <rmw_destroy_publisher>:
 8011298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801129a:	b128      	cbz	r0, 80112a8 <rmw_destroy_publisher+0x10>
 801129c:	4604      	mov	r4, r0
 801129e:	6800      	ldr	r0, [r0, #0]
 80112a0:	460d      	mov	r5, r1
 80112a2:	f000 fba3 	bl	80119ec <is_uxrce_rmw_identifier_valid>
 80112a6:	b910      	cbnz	r0, 80112ae <rmw_destroy_publisher+0x16>
 80112a8:	2401      	movs	r4, #1
 80112aa:	4620      	mov	r0, r4
 80112ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112ae:	6863      	ldr	r3, [r4, #4]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d0f9      	beq.n	80112a8 <rmw_destroy_publisher+0x10>
 80112b4:	2d00      	cmp	r5, #0
 80112b6:	d0f7      	beq.n	80112a8 <rmw_destroy_publisher+0x10>
 80112b8:	6828      	ldr	r0, [r5, #0]
 80112ba:	f000 fb97 	bl	80119ec <is_uxrce_rmw_identifier_valid>
 80112be:	2800      	cmp	r0, #0
 80112c0:	d0f2      	beq.n	80112a8 <rmw_destroy_publisher+0x10>
 80112c2:	686c      	ldr	r4, [r5, #4]
 80112c4:	2c00      	cmp	r4, #0
 80112c6:	d0ef      	beq.n	80112a8 <rmw_destroy_publisher+0x10>
 80112c8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80112ca:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 80112ce:	f007 ffd3 	bl	8019278 <destroy_topic>
 80112d2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80112d6:	6962      	ldr	r2, [r4, #20]
 80112d8:	6918      	ldr	r0, [r3, #16]
 80112da:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80112de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80112e2:	6819      	ldr	r1, [r3, #0]
 80112e4:	f001 fc9c 	bl	8012c20 <uxr_buffer_delete_entity>
 80112e8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80112ec:	6922      	ldr	r2, [r4, #16]
 80112ee:	691b      	ldr	r3, [r3, #16]
 80112f0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80112f4:	4604      	mov	r4, r0
 80112f6:	6809      	ldr	r1, [r1, #0]
 80112f8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80112fc:	f001 fc90 	bl	8012c20 <uxr_buffer_delete_entity>
 8011300:	693e      	ldr	r6, [r7, #16]
 8011302:	4622      	mov	r2, r4
 8011304:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8011308:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 801130c:	4604      	mov	r4, r0
 801130e:	4630      	mov	r0, r6
 8011310:	f000 faec 	bl	80118ec <run_xrce_session>
 8011314:	693e      	ldr	r6, [r7, #16]
 8011316:	4622      	mov	r2, r4
 8011318:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801131c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011320:	4604      	mov	r4, r0
 8011322:	4630      	mov	r0, r6
 8011324:	f000 fae2 	bl	80118ec <run_xrce_session>
 8011328:	b12c      	cbz	r4, 8011336 <rmw_destroy_publisher+0x9e>
 801132a:	b120      	cbz	r0, 8011336 <rmw_destroy_publisher+0x9e>
 801132c:	2400      	movs	r4, #0
 801132e:	4628      	mov	r0, r5
 8011330:	f000 f982 	bl	8011638 <rmw_uxrce_fini_publisher_memory>
 8011334:	e7b9      	b.n	80112aa <rmw_destroy_publisher+0x12>
 8011336:	2402      	movs	r4, #2
 8011338:	e7f9      	b.n	801132e <rmw_destroy_publisher+0x96>
 801133a:	bf00      	nop

0801133c <rmw_uxrce_init_service_memory>:
 801133c:	b1e2      	cbz	r2, 8011378 <rmw_uxrce_init_service_memory+0x3c>
 801133e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011342:	7b05      	ldrb	r5, [r0, #12]
 8011344:	4606      	mov	r6, r0
 8011346:	b9ad      	cbnz	r5, 8011374 <rmw_uxrce_init_service_memory+0x38>
 8011348:	23c8      	movs	r3, #200	@ 0xc8
 801134a:	e9c0 5500 	strd	r5, r5, [r0]
 801134e:	6083      	str	r3, [r0, #8]
 8011350:	f240 1301 	movw	r3, #257	@ 0x101
 8011354:	4617      	mov	r7, r2
 8011356:	8183      	strh	r3, [r0, #12]
 8011358:	460c      	mov	r4, r1
 801135a:	46a8      	mov	r8, r5
 801135c:	4621      	mov	r1, r4
 801135e:	4630      	mov	r0, r6
 8011360:	3501      	adds	r5, #1
 8011362:	f007 fc51 	bl	8018c08 <put_memory>
 8011366:	42af      	cmp	r7, r5
 8011368:	60a4      	str	r4, [r4, #8]
 801136a:	f884 800c 	strb.w	r8, [r4, #12]
 801136e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011372:	d1f3      	bne.n	801135c <rmw_uxrce_init_service_memory+0x20>
 8011374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011378:	4770      	bx	lr
 801137a:	bf00      	nop

0801137c <rmw_uxrce_init_client_memory>:
 801137c:	b1e2      	cbz	r2, 80113b8 <rmw_uxrce_init_client_memory+0x3c>
 801137e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011382:	7b05      	ldrb	r5, [r0, #12]
 8011384:	4606      	mov	r6, r0
 8011386:	b9ad      	cbnz	r5, 80113b4 <rmw_uxrce_init_client_memory+0x38>
 8011388:	23c8      	movs	r3, #200	@ 0xc8
 801138a:	e9c0 5500 	strd	r5, r5, [r0]
 801138e:	6083      	str	r3, [r0, #8]
 8011390:	f240 1301 	movw	r3, #257	@ 0x101
 8011394:	4617      	mov	r7, r2
 8011396:	8183      	strh	r3, [r0, #12]
 8011398:	460c      	mov	r4, r1
 801139a:	46a8      	mov	r8, r5
 801139c:	4621      	mov	r1, r4
 801139e:	4630      	mov	r0, r6
 80113a0:	3501      	adds	r5, #1
 80113a2:	f007 fc31 	bl	8018c08 <put_memory>
 80113a6:	42af      	cmp	r7, r5
 80113a8:	60a4      	str	r4, [r4, #8]
 80113aa:	f884 800c 	strb.w	r8, [r4, #12]
 80113ae:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80113b2:	d1f3      	bne.n	801139c <rmw_uxrce_init_client_memory+0x20>
 80113b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113b8:	4770      	bx	lr
 80113ba:	bf00      	nop

080113bc <rmw_uxrce_init_publisher_memory>:
 80113bc:	b1e2      	cbz	r2, 80113f8 <rmw_uxrce_init_publisher_memory+0x3c>
 80113be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113c2:	7b05      	ldrb	r5, [r0, #12]
 80113c4:	4606      	mov	r6, r0
 80113c6:	b9ad      	cbnz	r5, 80113f4 <rmw_uxrce_init_publisher_memory+0x38>
 80113c8:	23d8      	movs	r3, #216	@ 0xd8
 80113ca:	e9c0 5500 	strd	r5, r5, [r0]
 80113ce:	6083      	str	r3, [r0, #8]
 80113d0:	f240 1301 	movw	r3, #257	@ 0x101
 80113d4:	4617      	mov	r7, r2
 80113d6:	8183      	strh	r3, [r0, #12]
 80113d8:	460c      	mov	r4, r1
 80113da:	46a8      	mov	r8, r5
 80113dc:	4621      	mov	r1, r4
 80113de:	4630      	mov	r0, r6
 80113e0:	3501      	adds	r5, #1
 80113e2:	f007 fc11 	bl	8018c08 <put_memory>
 80113e6:	42af      	cmp	r7, r5
 80113e8:	60a4      	str	r4, [r4, #8]
 80113ea:	f884 800c 	strb.w	r8, [r4, #12]
 80113ee:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80113f2:	d1f3      	bne.n	80113dc <rmw_uxrce_init_publisher_memory+0x20>
 80113f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113f8:	4770      	bx	lr
 80113fa:	bf00      	nop

080113fc <rmw_uxrce_init_subscription_memory>:
 80113fc:	b1e2      	cbz	r2, 8011438 <rmw_uxrce_init_subscription_memory+0x3c>
 80113fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011402:	7b05      	ldrb	r5, [r0, #12]
 8011404:	4606      	mov	r6, r0
 8011406:	b9ad      	cbnz	r5, 8011434 <rmw_uxrce_init_subscription_memory+0x38>
 8011408:	23d8      	movs	r3, #216	@ 0xd8
 801140a:	e9c0 5500 	strd	r5, r5, [r0]
 801140e:	6083      	str	r3, [r0, #8]
 8011410:	f240 1301 	movw	r3, #257	@ 0x101
 8011414:	4617      	mov	r7, r2
 8011416:	8183      	strh	r3, [r0, #12]
 8011418:	460c      	mov	r4, r1
 801141a:	46a8      	mov	r8, r5
 801141c:	4621      	mov	r1, r4
 801141e:	4630      	mov	r0, r6
 8011420:	3501      	adds	r5, #1
 8011422:	f007 fbf1 	bl	8018c08 <put_memory>
 8011426:	42af      	cmp	r7, r5
 8011428:	60a4      	str	r4, [r4, #8]
 801142a:	f884 800c 	strb.w	r8, [r4, #12]
 801142e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011432:	d1f3      	bne.n	801141c <rmw_uxrce_init_subscription_memory+0x20>
 8011434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011438:	4770      	bx	lr
 801143a:	bf00      	nop

0801143c <rmw_uxrce_init_node_memory>:
 801143c:	b1e2      	cbz	r2, 8011478 <rmw_uxrce_init_node_memory+0x3c>
 801143e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011442:	7b05      	ldrb	r5, [r0, #12]
 8011444:	4606      	mov	r6, r0
 8011446:	b9ad      	cbnz	r5, 8011474 <rmw_uxrce_init_node_memory+0x38>
 8011448:	23a4      	movs	r3, #164	@ 0xa4
 801144a:	e9c0 5500 	strd	r5, r5, [r0]
 801144e:	6083      	str	r3, [r0, #8]
 8011450:	f240 1301 	movw	r3, #257	@ 0x101
 8011454:	4617      	mov	r7, r2
 8011456:	8183      	strh	r3, [r0, #12]
 8011458:	460c      	mov	r4, r1
 801145a:	46a8      	mov	r8, r5
 801145c:	4621      	mov	r1, r4
 801145e:	4630      	mov	r0, r6
 8011460:	3501      	adds	r5, #1
 8011462:	f007 fbd1 	bl	8018c08 <put_memory>
 8011466:	42af      	cmp	r7, r5
 8011468:	60a4      	str	r4, [r4, #8]
 801146a:	f884 800c 	strb.w	r8, [r4, #12]
 801146e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8011472:	d1f3      	bne.n	801145c <rmw_uxrce_init_node_memory+0x20>
 8011474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011478:	4770      	bx	lr
 801147a:	bf00      	nop

0801147c <rmw_uxrce_init_session_memory>:
 801147c:	b1ea      	cbz	r2, 80114ba <rmw_uxrce_init_session_memory+0x3e>
 801147e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011482:	7b05      	ldrb	r5, [r0, #12]
 8011484:	4606      	mov	r6, r0
 8011486:	b9b5      	cbnz	r5, 80114b6 <rmw_uxrce_init_session_memory+0x3a>
 8011488:	e9c0 5500 	strd	r5, r5, [r0]
 801148c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8011490:	f240 1301 	movw	r3, #257	@ 0x101
 8011494:	4617      	mov	r7, r2
 8011496:	f8c0 8008 	str.w	r8, [r0, #8]
 801149a:	460c      	mov	r4, r1
 801149c:	8183      	strh	r3, [r0, #12]
 801149e:	46a9      	mov	r9, r5
 80114a0:	4621      	mov	r1, r4
 80114a2:	4630      	mov	r0, r6
 80114a4:	3501      	adds	r5, #1
 80114a6:	f007 fbaf 	bl	8018c08 <put_memory>
 80114aa:	42af      	cmp	r7, r5
 80114ac:	60a4      	str	r4, [r4, #8]
 80114ae:	f884 900c 	strb.w	r9, [r4, #12]
 80114b2:	4444      	add	r4, r8
 80114b4:	d1f4      	bne.n	80114a0 <rmw_uxrce_init_session_memory+0x24>
 80114b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114ba:	4770      	bx	lr

080114bc <rmw_uxrce_init_topic_memory>:
 80114bc:	b1e2      	cbz	r2, 80114f8 <rmw_uxrce_init_topic_memory+0x3c>
 80114be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114c2:	7b05      	ldrb	r5, [r0, #12]
 80114c4:	4606      	mov	r6, r0
 80114c6:	b9ad      	cbnz	r5, 80114f4 <rmw_uxrce_init_topic_memory+0x38>
 80114c8:	231c      	movs	r3, #28
 80114ca:	e9c0 5500 	strd	r5, r5, [r0]
 80114ce:	6083      	str	r3, [r0, #8]
 80114d0:	f240 1301 	movw	r3, #257	@ 0x101
 80114d4:	4617      	mov	r7, r2
 80114d6:	8183      	strh	r3, [r0, #12]
 80114d8:	460c      	mov	r4, r1
 80114da:	46a8      	mov	r8, r5
 80114dc:	4621      	mov	r1, r4
 80114de:	4630      	mov	r0, r6
 80114e0:	3501      	adds	r5, #1
 80114e2:	f007 fb91 	bl	8018c08 <put_memory>
 80114e6:	42af      	cmp	r7, r5
 80114e8:	60a4      	str	r4, [r4, #8]
 80114ea:	f884 800c 	strb.w	r8, [r4, #12]
 80114ee:	f104 041c 	add.w	r4, r4, #28
 80114f2:	d1f3      	bne.n	80114dc <rmw_uxrce_init_topic_memory+0x20>
 80114f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114f8:	4770      	bx	lr
 80114fa:	bf00      	nop

080114fc <rmw_uxrce_init_static_input_buffer_memory>:
 80114fc:	b1ea      	cbz	r2, 801153a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80114fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011502:	7b05      	ldrb	r5, [r0, #12]
 8011504:	4606      	mov	r6, r0
 8011506:	b9b5      	cbnz	r5, 8011536 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8011508:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 801150c:	e9c0 5500 	strd	r5, r5, [r0]
 8011510:	6083      	str	r3, [r0, #8]
 8011512:	f240 1301 	movw	r3, #257	@ 0x101
 8011516:	4617      	mov	r7, r2
 8011518:	8183      	strh	r3, [r0, #12]
 801151a:	460c      	mov	r4, r1
 801151c:	46a8      	mov	r8, r5
 801151e:	4621      	mov	r1, r4
 8011520:	4630      	mov	r0, r6
 8011522:	3501      	adds	r5, #1
 8011524:	f007 fb70 	bl	8018c08 <put_memory>
 8011528:	42af      	cmp	r7, r5
 801152a:	60a4      	str	r4, [r4, #8]
 801152c:	f884 800c 	strb.w	r8, [r4, #12]
 8011530:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8011534:	d1f3      	bne.n	801151e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8011536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801153a:	4770      	bx	lr

0801153c <rmw_uxrce_init_init_options_impl_memory>:
 801153c:	b1e2      	cbz	r2, 8011578 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801153e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011542:	7b05      	ldrb	r5, [r0, #12]
 8011544:	4606      	mov	r6, r0
 8011546:	b9ad      	cbnz	r5, 8011574 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8011548:	232c      	movs	r3, #44	@ 0x2c
 801154a:	e9c0 5500 	strd	r5, r5, [r0]
 801154e:	6083      	str	r3, [r0, #8]
 8011550:	f240 1301 	movw	r3, #257	@ 0x101
 8011554:	4617      	mov	r7, r2
 8011556:	8183      	strh	r3, [r0, #12]
 8011558:	460c      	mov	r4, r1
 801155a:	46a8      	mov	r8, r5
 801155c:	4621      	mov	r1, r4
 801155e:	4630      	mov	r0, r6
 8011560:	3501      	adds	r5, #1
 8011562:	f007 fb51 	bl	8018c08 <put_memory>
 8011566:	42af      	cmp	r7, r5
 8011568:	60a4      	str	r4, [r4, #8]
 801156a:	f884 800c 	strb.w	r8, [r4, #12]
 801156e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8011572:	d1f3      	bne.n	801155c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8011574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop

0801157c <rmw_uxrce_init_wait_set_memory>:
 801157c:	b1e2      	cbz	r2, 80115b8 <rmw_uxrce_init_wait_set_memory+0x3c>
 801157e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011582:	7b05      	ldrb	r5, [r0, #12]
 8011584:	4606      	mov	r6, r0
 8011586:	b9ad      	cbnz	r5, 80115b4 <rmw_uxrce_init_wait_set_memory+0x38>
 8011588:	231c      	movs	r3, #28
 801158a:	e9c0 5500 	strd	r5, r5, [r0]
 801158e:	6083      	str	r3, [r0, #8]
 8011590:	f240 1301 	movw	r3, #257	@ 0x101
 8011594:	4617      	mov	r7, r2
 8011596:	8183      	strh	r3, [r0, #12]
 8011598:	460c      	mov	r4, r1
 801159a:	46a8      	mov	r8, r5
 801159c:	4621      	mov	r1, r4
 801159e:	4630      	mov	r0, r6
 80115a0:	3501      	adds	r5, #1
 80115a2:	f007 fb31 	bl	8018c08 <put_memory>
 80115a6:	42af      	cmp	r7, r5
 80115a8:	60a4      	str	r4, [r4, #8]
 80115aa:	f884 800c 	strb.w	r8, [r4, #12]
 80115ae:	f104 041c 	add.w	r4, r4, #28
 80115b2:	d1f3      	bne.n	801159c <rmw_uxrce_init_wait_set_memory+0x20>
 80115b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b8:	4770      	bx	lr
 80115ba:	bf00      	nop

080115bc <rmw_uxrce_init_guard_condition_memory>:
 80115bc:	b1e2      	cbz	r2, 80115f8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80115be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115c2:	7b05      	ldrb	r5, [r0, #12]
 80115c4:	4606      	mov	r6, r0
 80115c6:	b9ad      	cbnz	r5, 80115f4 <rmw_uxrce_init_guard_condition_memory+0x38>
 80115c8:	2320      	movs	r3, #32
 80115ca:	e9c0 5500 	strd	r5, r5, [r0]
 80115ce:	6083      	str	r3, [r0, #8]
 80115d0:	f240 1301 	movw	r3, #257	@ 0x101
 80115d4:	4617      	mov	r7, r2
 80115d6:	8183      	strh	r3, [r0, #12]
 80115d8:	460c      	mov	r4, r1
 80115da:	46a8      	mov	r8, r5
 80115dc:	4621      	mov	r1, r4
 80115de:	4630      	mov	r0, r6
 80115e0:	3501      	adds	r5, #1
 80115e2:	f007 fb11 	bl	8018c08 <put_memory>
 80115e6:	42af      	cmp	r7, r5
 80115e8:	60a4      	str	r4, [r4, #8]
 80115ea:	f884 800c 	strb.w	r8, [r4, #12]
 80115ee:	f104 0420 	add.w	r4, r4, #32
 80115f2:	d1f3      	bne.n	80115dc <rmw_uxrce_init_guard_condition_memory+0x20>
 80115f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f8:	4770      	bx	lr
 80115fa:	bf00      	nop

080115fc <rmw_uxrce_fini_session_memory>:
 80115fc:	4601      	mov	r1, r0
 80115fe:	4801      	ldr	r0, [pc, #4]	@ (8011604 <rmw_uxrce_fini_session_memory+0x8>)
 8011600:	f007 bb02 	b.w	8018c08 <put_memory>
 8011604:	20012bac 	.word	0x20012bac

08011608 <rmw_uxrce_fini_node_memory>:
 8011608:	b538      	push	{r3, r4, r5, lr}
 801160a:	4604      	mov	r4, r0
 801160c:	6800      	ldr	r0, [r0, #0]
 801160e:	b128      	cbz	r0, 801161c <rmw_uxrce_fini_node_memory+0x14>
 8011610:	4b07      	ldr	r3, [pc, #28]	@ (8011630 <rmw_uxrce_fini_node_memory+0x28>)
 8011612:	6819      	ldr	r1, [r3, #0]
 8011614:	f7ee fddc 	bl	80001d0 <strcmp>
 8011618:	b940      	cbnz	r0, 801162c <rmw_uxrce_fini_node_memory+0x24>
 801161a:	6020      	str	r0, [r4, #0]
 801161c:	6861      	ldr	r1, [r4, #4]
 801161e:	b129      	cbz	r1, 801162c <rmw_uxrce_fini_node_memory+0x24>
 8011620:	2500      	movs	r5, #0
 8011622:	4804      	ldr	r0, [pc, #16]	@ (8011634 <rmw_uxrce_fini_node_memory+0x2c>)
 8011624:	610d      	str	r5, [r1, #16]
 8011626:	f007 faef 	bl	8018c08 <put_memory>
 801162a:	6065      	str	r5, [r4, #4]
 801162c:	bd38      	pop	{r3, r4, r5, pc}
 801162e:	bf00      	nop
 8011630:	0801e5dc 	.word	0x0801e5dc
 8011634:	20012b7c 	.word	0x20012b7c

08011638 <rmw_uxrce_fini_publisher_memory>:
 8011638:	b510      	push	{r4, lr}
 801163a:	4604      	mov	r4, r0
 801163c:	6800      	ldr	r0, [r0, #0]
 801163e:	b128      	cbz	r0, 801164c <rmw_uxrce_fini_publisher_memory+0x14>
 8011640:	4b06      	ldr	r3, [pc, #24]	@ (801165c <rmw_uxrce_fini_publisher_memory+0x24>)
 8011642:	6819      	ldr	r1, [r3, #0]
 8011644:	f7ee fdc4 	bl	80001d0 <strcmp>
 8011648:	b938      	cbnz	r0, 801165a <rmw_uxrce_fini_publisher_memory+0x22>
 801164a:	6020      	str	r0, [r4, #0]
 801164c:	6861      	ldr	r1, [r4, #4]
 801164e:	b121      	cbz	r1, 801165a <rmw_uxrce_fini_publisher_memory+0x22>
 8011650:	4803      	ldr	r0, [pc, #12]	@ (8011660 <rmw_uxrce_fini_publisher_memory+0x28>)
 8011652:	f007 fad9 	bl	8018c08 <put_memory>
 8011656:	2300      	movs	r3, #0
 8011658:	6063      	str	r3, [r4, #4]
 801165a:	bd10      	pop	{r4, pc}
 801165c:	0801e5dc 	.word	0x0801e5dc
 8011660:	20012b8c 	.word	0x20012b8c

08011664 <rmw_uxrce_fini_subscription_memory>:
 8011664:	b510      	push	{r4, lr}
 8011666:	4604      	mov	r4, r0
 8011668:	6800      	ldr	r0, [r0, #0]
 801166a:	b128      	cbz	r0, 8011678 <rmw_uxrce_fini_subscription_memory+0x14>
 801166c:	4b06      	ldr	r3, [pc, #24]	@ (8011688 <rmw_uxrce_fini_subscription_memory+0x24>)
 801166e:	6819      	ldr	r1, [r3, #0]
 8011670:	f7ee fdae 	bl	80001d0 <strcmp>
 8011674:	b938      	cbnz	r0, 8011686 <rmw_uxrce_fini_subscription_memory+0x22>
 8011676:	6020      	str	r0, [r4, #0]
 8011678:	6861      	ldr	r1, [r4, #4]
 801167a:	b121      	cbz	r1, 8011686 <rmw_uxrce_fini_subscription_memory+0x22>
 801167c:	4803      	ldr	r0, [pc, #12]	@ (801168c <rmw_uxrce_fini_subscription_memory+0x28>)
 801167e:	f007 fac3 	bl	8018c08 <put_memory>
 8011682:	2300      	movs	r3, #0
 8011684:	6063      	str	r3, [r4, #4]
 8011686:	bd10      	pop	{r4, pc}
 8011688:	0801e5dc 	.word	0x0801e5dc
 801168c:	20012bcc 	.word	0x20012bcc

08011690 <rmw_uxrce_fini_service_memory>:
 8011690:	b510      	push	{r4, lr}
 8011692:	4604      	mov	r4, r0
 8011694:	6800      	ldr	r0, [r0, #0]
 8011696:	b128      	cbz	r0, 80116a4 <rmw_uxrce_fini_service_memory+0x14>
 8011698:	4b06      	ldr	r3, [pc, #24]	@ (80116b4 <rmw_uxrce_fini_service_memory+0x24>)
 801169a:	6819      	ldr	r1, [r3, #0]
 801169c:	f7ee fd98 	bl	80001d0 <strcmp>
 80116a0:	b938      	cbnz	r0, 80116b2 <rmw_uxrce_fini_service_memory+0x22>
 80116a2:	6020      	str	r0, [r4, #0]
 80116a4:	6861      	ldr	r1, [r4, #4]
 80116a6:	b121      	cbz	r1, 80116b2 <rmw_uxrce_fini_service_memory+0x22>
 80116a8:	4803      	ldr	r0, [pc, #12]	@ (80116b8 <rmw_uxrce_fini_service_memory+0x28>)
 80116aa:	f007 faad 	bl	8018c08 <put_memory>
 80116ae:	2300      	movs	r3, #0
 80116b0:	6063      	str	r3, [r4, #4]
 80116b2:	bd10      	pop	{r4, pc}
 80116b4:	0801e5dc 	.word	0x0801e5dc
 80116b8:	20012b9c 	.word	0x20012b9c

080116bc <rmw_uxrce_fini_client_memory>:
 80116bc:	b510      	push	{r4, lr}
 80116be:	4604      	mov	r4, r0
 80116c0:	6800      	ldr	r0, [r0, #0]
 80116c2:	b128      	cbz	r0, 80116d0 <rmw_uxrce_fini_client_memory+0x14>
 80116c4:	4b06      	ldr	r3, [pc, #24]	@ (80116e0 <rmw_uxrce_fini_client_memory+0x24>)
 80116c6:	6819      	ldr	r1, [r3, #0]
 80116c8:	f7ee fd82 	bl	80001d0 <strcmp>
 80116cc:	b938      	cbnz	r0, 80116de <rmw_uxrce_fini_client_memory+0x22>
 80116ce:	6020      	str	r0, [r4, #0]
 80116d0:	6861      	ldr	r1, [r4, #4]
 80116d2:	b121      	cbz	r1, 80116de <rmw_uxrce_fini_client_memory+0x22>
 80116d4:	4803      	ldr	r0, [pc, #12]	@ (80116e4 <rmw_uxrce_fini_client_memory+0x28>)
 80116d6:	f007 fa97 	bl	8018c08 <put_memory>
 80116da:	2300      	movs	r3, #0
 80116dc:	6063      	str	r3, [r4, #4]
 80116de:	bd10      	pop	{r4, pc}
 80116e0:	0801e5dc 	.word	0x0801e5dc
 80116e4:	2000e2b0 	.word	0x2000e2b0

080116e8 <rmw_uxrce_fini_topic_memory>:
 80116e8:	b510      	push	{r4, lr}
 80116ea:	4604      	mov	r4, r0
 80116ec:	4621      	mov	r1, r4
 80116ee:	4803      	ldr	r0, [pc, #12]	@ (80116fc <rmw_uxrce_fini_topic_memory+0x14>)
 80116f0:	f007 fa8a 	bl	8018c08 <put_memory>
 80116f4:	2300      	movs	r3, #0
 80116f6:	61a3      	str	r3, [r4, #24]
 80116f8:	bd10      	pop	{r4, pc}
 80116fa:	bf00      	nop
 80116fc:	20012bdc 	.word	0x20012bdc

08011700 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8011700:	b082      	sub	sp, #8
 8011702:	b530      	push	{r4, r5, lr}
 8011704:	4925      	ldr	r1, [pc, #148]	@ (801179c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011706:	680d      	ldr	r5, [r1, #0]
 8011708:	ac03      	add	r4, sp, #12
 801170a:	e884 000c 	stmia.w	r4, {r2, r3}
 801170e:	461c      	mov	r4, r3
 8011710:	2d00      	cmp	r5, #0
 8011712:	d041      	beq.n	8011798 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8011714:	462b      	mov	r3, r5
 8011716:	2100      	movs	r1, #0
 8011718:	689a      	ldr	r2, [r3, #8]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8011720:	4290      	cmp	r0, r2
 8011722:	bf08      	it	eq
 8011724:	3101      	addeq	r1, #1
 8011726:	2b00      	cmp	r3, #0
 8011728:	d1f6      	bne.n	8011718 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801172a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801172e:	2b02      	cmp	r3, #2
 8011730:	d029      	beq.n	8011786 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8011732:	d907      	bls.n	8011744 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011734:	2b03      	cmp	r3, #3
 8011736:	d005      	beq.n	8011744 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011738:	2100      	movs	r1, #0
 801173a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801173e:	4608      	mov	r0, r1
 8011740:	b002      	add	sp, #8
 8011742:	4770      	bx	lr
 8011744:	b314      	cbz	r4, 801178c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011746:	428c      	cmp	r4, r1
 8011748:	d820      	bhi.n	801178c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 801174a:	2d00      	cmp	r5, #0
 801174c:	d0f4      	beq.n	8011738 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 801174e:	2100      	movs	r1, #0
 8011750:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8011754:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8011758:	e002      	b.n	8011760 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 801175a:	686d      	ldr	r5, [r5, #4]
 801175c:	2d00      	cmp	r5, #0
 801175e:	d0ec      	beq.n	801173a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8011760:	68ab      	ldr	r3, [r5, #8]
 8011762:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8011766:	4290      	cmp	r0, r2
 8011768:	d1f7      	bne.n	801175a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801176a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 801176e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8011772:	4562      	cmp	r2, ip
 8011774:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011778:	eb73 0e04 	sbcs.w	lr, r3, r4
 801177c:	daed      	bge.n	801175a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801177e:	4694      	mov	ip, r2
 8011780:	461c      	mov	r4, r3
 8011782:	4629      	mov	r1, r5
 8011784:	e7e9      	b.n	801175a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011786:	b10c      	cbz	r4, 801178c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011788:	428c      	cmp	r4, r1
 801178a:	d9d5      	bls.n	8011738 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 801178c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011790:	4802      	ldr	r0, [pc, #8]	@ (801179c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011792:	b002      	add	sp, #8
 8011794:	f007 ba28 	b.w	8018be8 <get_memory>
 8011798:	4629      	mov	r1, r5
 801179a:	e7c6      	b.n	801172a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 801179c:	20012bbc 	.word	0x20012bbc

080117a0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 80117a0:	4b11      	ldr	r3, [pc, #68]	@ (80117e8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	b530      	push	{r4, r5, lr}
 80117a6:	b1e3      	cbz	r3, 80117e2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 80117a8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80117ac:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80117b0:	2400      	movs	r4, #0
 80117b2:	e001      	b.n	80117b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	b193      	cbz	r3, 80117de <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 80117b8:	689a      	ldr	r2, [r3, #8]
 80117ba:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 80117be:	4288      	cmp	r0, r1
 80117c0:	d1f8      	bne.n	80117b4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80117c2:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 80117c6:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 80117ca:	4571      	cmp	r1, lr
 80117cc:	eb72 050c 	sbcs.w	r5, r2, ip
 80117d0:	daf0      	bge.n	80117b4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80117d2:	461c      	mov	r4, r3
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	468e      	mov	lr, r1
 80117d8:	4694      	mov	ip, r2
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d1ec      	bne.n	80117b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80117de:	4620      	mov	r0, r4
 80117e0:	bd30      	pop	{r4, r5, pc}
 80117e2:	461c      	mov	r4, r3
 80117e4:	4620      	mov	r0, r4
 80117e6:	bd30      	pop	{r4, r5, pc}
 80117e8:	20012bbc 	.word	0x20012bbc
 80117ec:	00000000 	.word	0x00000000

080117f0 <rmw_uxrce_clean_expired_static_input_buffer>:
 80117f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f4:	4b3c      	ldr	r3, [pc, #240]	@ (80118e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80117f6:	ed2d 8b06 	vpush	{d8-d10}
 80117fa:	681f      	ldr	r7, [r3, #0]
 80117fc:	b08d      	sub	sp, #52	@ 0x34
 80117fe:	f008 fb5b 	bl	8019eb8 <rmw_uros_epoch_nanos>
 8011802:	2f00      	cmp	r7, #0
 8011804:	d05d      	beq.n	80118c2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011806:	46b8      	mov	r8, r7
 8011808:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 80118d0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801180c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011810:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8011814:	2b04      	cmp	r3, #4
 8011816:	ed9f ab30 	vldr	d10, [pc, #192]	@ 80118d8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 801181a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 80118e0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 801181e:	4681      	mov	r9, r0
 8011820:	468a      	mov	sl, r1
 8011822:	ac04      	add	r4, sp, #16
 8011824:	d03f      	beq.n	80118a6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011826:	2b05      	cmp	r3, #5
 8011828:	d044      	beq.n	80118b4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801182a:	2b03      	cmp	r3, #3
 801182c:	d03b      	beq.n	80118a6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801182e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011832:	ed8d ab06 	vstr	d10, [sp, #24]
 8011836:	ed8d 8b08 	vstr	d8, [sp, #32]
 801183a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 801183e:	ab08      	add	r3, sp, #32
 8011840:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011842:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011846:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801184a:	f007 f801 	bl	8018850 <rmw_time_equal>
 801184e:	b118      	cbz	r0, 8011858 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8011850:	ed8d 9b04 	vstr	d9, [sp, #16]
 8011854:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011858:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801185c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8011860:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 8011864:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8011868:	f007 f846 	bl	80188f8 <rmw_time_total_nsec>
 801186c:	1830      	adds	r0, r6, r0
 801186e:	eb47 0101 	adc.w	r1, r7, r1
 8011872:	4548      	cmp	r0, r9
 8011874:	eb71 030a 	sbcs.w	r3, r1, sl
 8011878:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 801187c:	db05      	blt.n	801188a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 801187e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8011882:	4591      	cmp	r9, r2
 8011884:	eb7a 0303 	sbcs.w	r3, sl, r3
 8011888:	da03      	bge.n	8011892 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801188a:	4817      	ldr	r0, [pc, #92]	@ (80118e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801188c:	4641      	mov	r1, r8
 801188e:	f007 f9bb 	bl	8018c08 <put_memory>
 8011892:	f1bb 0f00 	cmp.w	fp, #0
 8011896:	d014      	beq.n	80118c2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011898:	46d8      	mov	r8, fp
 801189a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801189e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80118a2:	2b04      	cmp	r3, #4
 80118a4:	d1bf      	bne.n	8011826 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 80118a6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80118aa:	3340      	adds	r3, #64	@ 0x40
 80118ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80118ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80118b2:	e7c0      	b.n	8011836 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80118b4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80118b8:	3348      	adds	r3, #72	@ 0x48
 80118ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80118bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80118c0:	e7b9      	b.n	8011836 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80118c2:	b00d      	add	sp, #52	@ 0x34
 80118c4:	ecbd 8b06 	vpop	{d8-d10}
 80118c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118cc:	f3af 8000 	nop.w
	...
 80118d8:	00000001 	.word	0x00000001
 80118dc:	00000000 	.word	0x00000000
 80118e0:	0000001e 	.word	0x0000001e
 80118e4:	00000000 	.word	0x00000000
 80118e8:	20012bbc 	.word	0x20012bbc

080118ec <run_xrce_session>:
 80118ec:	b510      	push	{r4, lr}
 80118ee:	788c      	ldrb	r4, [r1, #2]
 80118f0:	b086      	sub	sp, #24
 80118f2:	2c01      	cmp	r4, #1
 80118f4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80118f8:	d00c      	beq.n	8011914 <run_xrce_session+0x28>
 80118fa:	4619      	mov	r1, r3
 80118fc:	2301      	movs	r3, #1
 80118fe:	9300      	str	r3, [sp, #0]
 8011900:	f10d 020e 	add.w	r2, sp, #14
 8011904:	f10d 0317 	add.w	r3, sp, #23
 8011908:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801190c:	f002 f8be 	bl	8013a8c <uxr_run_session_until_all_status>
 8011910:	b006      	add	sp, #24
 8011912:	bd10      	pop	{r4, pc}
 8011914:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011918:	f001 fcd2 	bl	80132c0 <uxr_flash_output_streams>
 801191c:	4620      	mov	r0, r4
 801191e:	b006      	add	sp, #24
 8011920:	bd10      	pop	{r4, pc}
 8011922:	bf00      	nop

08011924 <convert_qos_profile>:
 8011924:	7a4a      	ldrb	r2, [r1, #9]
 8011926:	f891 c008 	ldrb.w	ip, [r1, #8]
 801192a:	2a02      	cmp	r2, #2
 801192c:	bf18      	it	ne
 801192e:	2200      	movne	r2, #0
 8011930:	7002      	strb	r2, [r0, #0]
 8011932:	780a      	ldrb	r2, [r1, #0]
 8011934:	8889      	ldrh	r1, [r1, #4]
 8011936:	8081      	strh	r1, [r0, #4]
 8011938:	f1ac 0c02 	sub.w	ip, ip, #2
 801193c:	f1a2 0202 	sub.w	r2, r2, #2
 8011940:	fabc fc8c 	clz	ip, ip
 8011944:	fab2 f282 	clz	r2, r2
 8011948:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801194c:	0952      	lsrs	r2, r2, #5
 801194e:	f880 c001 	strb.w	ip, [r0, #1]
 8011952:	7082      	strb	r2, [r0, #2]
 8011954:	4770      	bx	lr
 8011956:	bf00      	nop

08011958 <generate_type_name>:
 8011958:	b530      	push	{r4, r5, lr}
 801195a:	2300      	movs	r3, #0
 801195c:	700b      	strb	r3, [r1, #0]
 801195e:	6803      	ldr	r3, [r0, #0]
 8011960:	b087      	sub	sp, #28
 8011962:	4614      	mov	r4, r2
 8011964:	b1d3      	cbz	r3, 801199c <generate_type_name+0x44>
 8011966:	4a0f      	ldr	r2, [pc, #60]	@ (80119a4 <generate_type_name+0x4c>)
 8011968:	4615      	mov	r5, r2
 801196a:	9203      	str	r2, [sp, #12]
 801196c:	9500      	str	r5, [sp, #0]
 801196e:	6842      	ldr	r2, [r0, #4]
 8011970:	480d      	ldr	r0, [pc, #52]	@ (80119a8 <generate_type_name+0x50>)
 8011972:	9001      	str	r0, [sp, #4]
 8011974:	4608      	mov	r0, r1
 8011976:	490d      	ldr	r1, [pc, #52]	@ (80119ac <generate_type_name+0x54>)
 8011978:	9204      	str	r2, [sp, #16]
 801197a:	9105      	str	r1, [sp, #20]
 801197c:	9102      	str	r1, [sp, #8]
 801197e:	4a0c      	ldr	r2, [pc, #48]	@ (80119b0 <generate_type_name+0x58>)
 8011980:	4621      	mov	r1, r4
 8011982:	f00b f813 	bl	801c9ac <sniprintf>
 8011986:	2800      	cmp	r0, #0
 8011988:	db05      	blt.n	8011996 <generate_type_name+0x3e>
 801198a:	4284      	cmp	r4, r0
 801198c:	bfd4      	ite	le
 801198e:	2000      	movle	r0, #0
 8011990:	2001      	movgt	r0, #1
 8011992:	b007      	add	sp, #28
 8011994:	bd30      	pop	{r4, r5, pc}
 8011996:	2000      	movs	r0, #0
 8011998:	b007      	add	sp, #28
 801199a:	bd30      	pop	{r4, r5, pc}
 801199c:	4b05      	ldr	r3, [pc, #20]	@ (80119b4 <generate_type_name+0x5c>)
 801199e:	4a01      	ldr	r2, [pc, #4]	@ (80119a4 <generate_type_name+0x4c>)
 80119a0:	461d      	mov	r5, r3
 80119a2:	e7e2      	b.n	801196a <generate_type_name+0x12>
 80119a4:	0801de6c 	.word	0x0801de6c
 80119a8:	0801de84 	.word	0x0801de84
 80119ac:	0801de80 	.word	0x0801de80
 80119b0:	0801de70 	.word	0x0801de70
 80119b4:	0801e3b4 	.word	0x0801e3b4

080119b8 <generate_topic_name>:
 80119b8:	b510      	push	{r4, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	4614      	mov	r4, r2
 80119be:	9000      	str	r0, [sp, #0]
 80119c0:	4b08      	ldr	r3, [pc, #32]	@ (80119e4 <generate_topic_name+0x2c>)
 80119c2:	4a09      	ldr	r2, [pc, #36]	@ (80119e8 <generate_topic_name+0x30>)
 80119c4:	4608      	mov	r0, r1
 80119c6:	4621      	mov	r1, r4
 80119c8:	f00a fff0 	bl	801c9ac <sniprintf>
 80119cc:	2800      	cmp	r0, #0
 80119ce:	db05      	blt.n	80119dc <generate_topic_name+0x24>
 80119d0:	4284      	cmp	r4, r0
 80119d2:	bfd4      	ite	le
 80119d4:	2000      	movle	r0, #0
 80119d6:	2001      	movgt	r0, #1
 80119d8:	b002      	add	sp, #8
 80119da:	bd10      	pop	{r4, pc}
 80119dc:	2000      	movs	r0, #0
 80119de:	b002      	add	sp, #8
 80119e0:	bd10      	pop	{r4, pc}
 80119e2:	bf00      	nop
 80119e4:	0801de90 	.word	0x0801de90
 80119e8:	0801de88 	.word	0x0801de88

080119ec <is_uxrce_rmw_identifier_valid>:
 80119ec:	b510      	push	{r4, lr}
 80119ee:	4604      	mov	r4, r0
 80119f0:	b140      	cbz	r0, 8011a04 <is_uxrce_rmw_identifier_valid+0x18>
 80119f2:	f007 f961 	bl	8018cb8 <rmw_get_implementation_identifier>
 80119f6:	4601      	mov	r1, r0
 80119f8:	4620      	mov	r0, r4
 80119fa:	f7ee fbe9 	bl	80001d0 <strcmp>
 80119fe:	fab0 f080 	clz	r0, r0
 8011a02:	0940      	lsrs	r0, r0, #5
 8011a04:	bd10      	pop	{r4, pc}
 8011a06:	bf00      	nop

08011a08 <get_message_typesupport_handle>:
 8011a08:	6883      	ldr	r3, [r0, #8]
 8011a0a:	4718      	bx	r3

08011a0c <get_message_typesupport_handle_function>:
 8011a0c:	b510      	push	{r4, lr}
 8011a0e:	4604      	mov	r4, r0
 8011a10:	6800      	ldr	r0, [r0, #0]
 8011a12:	f7ee fbdd 	bl	80001d0 <strcmp>
 8011a16:	2800      	cmp	r0, #0
 8011a18:	bf0c      	ite	eq
 8011a1a:	4620      	moveq	r0, r4
 8011a1c:	2000      	movne	r0, #0
 8011a1e:	bd10      	pop	{r4, pc}

08011a20 <std_msgs__msg__Empty__init>:
 8011a20:	3800      	subs	r0, #0
 8011a22:	bf18      	it	ne
 8011a24:	2001      	movne	r0, #1
 8011a26:	4770      	bx	lr

08011a28 <std_msgs__msg__Empty__fini>:
 8011a28:	4770      	bx	lr
 8011a2a:	bf00      	nop

08011a2c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Empty>:
 8011a2c:	4b04      	ldr	r3, [pc, #16]	@ (8011a40 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Empty+0x14>)
 8011a2e:	681a      	ldr	r2, [r3, #0]
 8011a30:	b10a      	cbz	r2, 8011a36 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Empty+0xa>
 8011a32:	4803      	ldr	r0, [pc, #12]	@ (8011a40 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Empty+0x14>)
 8011a34:	4770      	bx	lr
 8011a36:	4a03      	ldr	r2, [pc, #12]	@ (8011a44 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Empty+0x18>)
 8011a38:	4801      	ldr	r0, [pc, #4]	@ (8011a40 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Empty+0x14>)
 8011a3a:	6812      	ldr	r2, [r2, #0]
 8011a3c:	601a      	str	r2, [r3, #0]
 8011a3e:	4770      	bx	lr
 8011a40:	20000054 	.word	0x20000054
 8011a44:	20000154 	.word	0x20000154

08011a48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Empty>:
 8011a48:	4a02      	ldr	r2, [pc, #8]	@ (8011a54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Empty+0xc>)
 8011a4a:	4b03      	ldr	r3, [pc, #12]	@ (8011a58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Empty+0x10>)
 8011a4c:	6812      	ldr	r2, [r2, #0]
 8011a4e:	601a      	str	r2, [r3, #0]
 8011a50:	4770      	bx	lr
 8011a52:	bf00      	nop
 8011a54:	20000154 	.word	0x20000154
 8011a58:	20000054 	.word	0x20000054

08011a5c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8011a5c:	4b04      	ldr	r3, [pc, #16]	@ (8011a70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011a5e:	681a      	ldr	r2, [r3, #0]
 8011a60:	b10a      	cbz	r2, 8011a66 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8011a62:	4803      	ldr	r0, [pc, #12]	@ (8011a70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011a64:	4770      	bx	lr
 8011a66:	4a03      	ldr	r2, [pc, #12]	@ (8011a74 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8011a68:	4801      	ldr	r0, [pc, #4]	@ (8011a70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011a6a:	6812      	ldr	r2, [r2, #0]
 8011a6c:	601a      	str	r2, [r3, #0]
 8011a6e:	4770      	bx	lr
 8011a70:	20000068 	.word	0x20000068
 8011a74:	20000154 	.word	0x20000154

08011a78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8011a78:	4a02      	ldr	r2, [pc, #8]	@ (8011a84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8011a7a:	4b03      	ldr	r3, [pc, #12]	@ (8011a88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8011a7c:	6812      	ldr	r2, [r2, #0]
 8011a7e:	601a      	str	r2, [r3, #0]
 8011a80:	4770      	bx	lr
 8011a82:	bf00      	nop
 8011a84:	20000154 	.word	0x20000154
 8011a88:	20000068 	.word	0x20000068

08011a8c <std_msgs__msg__Empty__rosidl_typesupport_introspection_c__Empty_init_function>:
 8011a8c:	f7ff bfc8 	b.w	8011a20 <std_msgs__msg__Empty__init>

08011a90 <std_msgs__msg__Empty__rosidl_typesupport_introspection_c__Empty_fini_function>:
 8011a90:	f7ff bfca 	b.w	8011a28 <std_msgs__msg__Empty__fini>

08011a94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Empty>:
 8011a94:	4b04      	ldr	r3, [pc, #16]	@ (8011aa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Empty+0x14>)
 8011a96:	681a      	ldr	r2, [r3, #0]
 8011a98:	b10a      	cbz	r2, 8011a9e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Empty+0xa>
 8011a9a:	4803      	ldr	r0, [pc, #12]	@ (8011aa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Empty+0x14>)
 8011a9c:	4770      	bx	lr
 8011a9e:	4a03      	ldr	r2, [pc, #12]	@ (8011aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Empty+0x18>)
 8011aa0:	4801      	ldr	r0, [pc, #4]	@ (8011aa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Empty+0x14>)
 8011aa2:	6812      	ldr	r2, [r2, #0]
 8011aa4:	601a      	str	r2, [r3, #0]
 8011aa6:	4770      	bx	lr
 8011aa8:	200000b0 	.word	0x200000b0
 8011aac:	20000158 	.word	0x20000158

08011ab0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8011ab0:	f008 ba3e 	b.w	8019f30 <std_msgs__msg__Int32__init>

08011ab4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8011ab4:	f008 ba40 	b.w	8019f38 <std_msgs__msg__Int32__fini>

08011ab8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8011ab8:	4b04      	ldr	r3, [pc, #16]	@ (8011acc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011aba:	681a      	ldr	r2, [r3, #0]
 8011abc:	b10a      	cbz	r2, 8011ac2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8011abe:	4803      	ldr	r0, [pc, #12]	@ (8011acc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011ac0:	4770      	bx	lr
 8011ac2:	4a03      	ldr	r2, [pc, #12]	@ (8011ad0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8011ac4:	4801      	ldr	r0, [pc, #4]	@ (8011acc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011ac6:	6812      	ldr	r2, [r2, #0]
 8011ac8:	601a      	str	r2, [r3, #0]
 8011aca:	4770      	bx	lr
 8011acc:	200000f8 	.word	0x200000f8
 8011ad0:	20000158 	.word	0x20000158

08011ad4 <_Empty__max_serialized_size>:
 8011ad4:	b508      	push	{r3, lr}
 8011ad6:	2101      	movs	r1, #1
 8011ad8:	2000      	movs	r0, #0
 8011ada:	f001 f835 	bl	8012b48 <ucdr_alignment>
 8011ade:	3001      	adds	r0, #1
 8011ae0:	bd08      	pop	{r3, pc}
 8011ae2:	bf00      	nop

08011ae4 <_Empty__cdr_deserialize>:
 8011ae4:	b109      	cbz	r1, 8011aea <_Empty__cdr_deserialize+0x6>
 8011ae6:	f000 b895 	b.w	8011c14 <ucdr_deserialize_uint8_t>
 8011aea:	4608      	mov	r0, r1
 8011aec:	4770      	bx	lr
 8011aee:	bf00      	nop

08011af0 <get_serialized_size_std_msgs__msg__Empty>:
 8011af0:	b138      	cbz	r0, 8011b02 <get_serialized_size_std_msgs__msg__Empty+0x12>
 8011af2:	b508      	push	{r3, lr}
 8011af4:	460b      	mov	r3, r1
 8011af6:	4618      	mov	r0, r3
 8011af8:	2101      	movs	r1, #1
 8011afa:	f001 f825 	bl	8012b48 <ucdr_alignment>
 8011afe:	3001      	adds	r0, #1
 8011b00:	bd08      	pop	{r3, pc}
 8011b02:	4770      	bx	lr

08011b04 <_Empty__cdr_serialize>:
 8011b04:	460a      	mov	r2, r1
 8011b06:	b118      	cbz	r0, 8011b10 <_Empty__cdr_serialize+0xc>
 8011b08:	7801      	ldrb	r1, [r0, #0]
 8011b0a:	4610      	mov	r0, r2
 8011b0c:	f000 b86c 	b.w	8011be8 <ucdr_serialize_uint8_t>
 8011b10:	4770      	bx	lr
 8011b12:	bf00      	nop

08011b14 <_Empty__get_serialized_size>:
 8011b14:	b130      	cbz	r0, 8011b24 <_Empty__get_serialized_size+0x10>
 8011b16:	b508      	push	{r3, lr}
 8011b18:	2101      	movs	r1, #1
 8011b1a:	2000      	movs	r0, #0
 8011b1c:	f001 f814 	bl	8012b48 <ucdr_alignment>
 8011b20:	3001      	adds	r0, #1
 8011b22:	bd08      	pop	{r3, pc}
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop

08011b28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Empty>:
 8011b28:	4800      	ldr	r0, [pc, #0]	@ (8011b2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Empty+0x4>)
 8011b2a:	4770      	bx	lr
 8011b2c:	20000104 	.word	0x20000104

08011b30 <_Int32__max_serialized_size>:
 8011b30:	b508      	push	{r3, lr}
 8011b32:	2104      	movs	r1, #4
 8011b34:	2000      	movs	r0, #0
 8011b36:	f001 f807 	bl	8012b48 <ucdr_alignment>
 8011b3a:	3004      	adds	r0, #4
 8011b3c:	bd08      	pop	{r3, pc}
 8011b3e:	bf00      	nop

08011b40 <_Int32__cdr_deserialize>:
 8011b40:	b109      	cbz	r1, 8011b46 <_Int32__cdr_deserialize+0x6>
 8011b42:	f000 bf19 	b.w	8012978 <ucdr_deserialize_int32_t>
 8011b46:	4608      	mov	r0, r1
 8011b48:	4770      	bx	lr
 8011b4a:	bf00      	nop

08011b4c <get_serialized_size_std_msgs__msg__Int32>:
 8011b4c:	b138      	cbz	r0, 8011b5e <get_serialized_size_std_msgs__msg__Int32+0x12>
 8011b4e:	b508      	push	{r3, lr}
 8011b50:	460b      	mov	r3, r1
 8011b52:	4618      	mov	r0, r3
 8011b54:	2104      	movs	r1, #4
 8011b56:	f000 fff7 	bl	8012b48 <ucdr_alignment>
 8011b5a:	3004      	adds	r0, #4
 8011b5c:	bd08      	pop	{r3, pc}
 8011b5e:	4770      	bx	lr

08011b60 <_Int32__cdr_serialize>:
 8011b60:	460a      	mov	r2, r1
 8011b62:	b118      	cbz	r0, 8011b6c <_Int32__cdr_serialize+0xc>
 8011b64:	6801      	ldr	r1, [r0, #0]
 8011b66:	4610      	mov	r0, r2
 8011b68:	f000 be6e 	b.w	8012848 <ucdr_serialize_int32_t>
 8011b6c:	4770      	bx	lr
 8011b6e:	bf00      	nop

08011b70 <_Int32__get_serialized_size>:
 8011b70:	b130      	cbz	r0, 8011b80 <_Int32__get_serialized_size+0x10>
 8011b72:	b508      	push	{r3, lr}
 8011b74:	2104      	movs	r1, #4
 8011b76:	2000      	movs	r0, #0
 8011b78:	f000 ffe6 	bl	8012b48 <ucdr_alignment>
 8011b7c:	3004      	adds	r0, #4
 8011b7e:	bd08      	pop	{r3, pc}
 8011b80:	4770      	bx	lr
 8011b82:	bf00      	nop

08011b84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8011b84:	4800      	ldr	r0, [pc, #0]	@ (8011b88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8011b86:	4770      	bx	lr
 8011b88:	2000012c 	.word	0x2000012c

08011b8c <ucdr_serialize_bool>:
 8011b8c:	b538      	push	{r3, r4, r5, lr}
 8011b8e:	460d      	mov	r5, r1
 8011b90:	2101      	movs	r1, #1
 8011b92:	4604      	mov	r4, r0
 8011b94:	f000 ff8c 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8011b98:	b148      	cbz	r0, 8011bae <ucdr_serialize_bool+0x22>
 8011b9a:	68a3      	ldr	r3, [r4, #8]
 8011b9c:	701d      	strb	r5, [r3, #0]
 8011b9e:	68a2      	ldr	r2, [r4, #8]
 8011ba0:	6923      	ldr	r3, [r4, #16]
 8011ba2:	2101      	movs	r1, #1
 8011ba4:	440a      	add	r2, r1
 8011ba6:	440b      	add	r3, r1
 8011ba8:	60a2      	str	r2, [r4, #8]
 8011baa:	6123      	str	r3, [r4, #16]
 8011bac:	7561      	strb	r1, [r4, #21]
 8011bae:	7da0      	ldrb	r0, [r4, #22]
 8011bb0:	f080 0001 	eor.w	r0, r0, #1
 8011bb4:	bd38      	pop	{r3, r4, r5, pc}
 8011bb6:	bf00      	nop

08011bb8 <ucdr_deserialize_bool>:
 8011bb8:	b538      	push	{r3, r4, r5, lr}
 8011bba:	460d      	mov	r5, r1
 8011bbc:	2101      	movs	r1, #1
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	f000 ff76 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8011bc4:	b160      	cbz	r0, 8011be0 <ucdr_deserialize_bool+0x28>
 8011bc6:	68a2      	ldr	r2, [r4, #8]
 8011bc8:	6923      	ldr	r3, [r4, #16]
 8011bca:	f812 1b01 	ldrb.w	r1, [r2], #1
 8011bce:	3900      	subs	r1, #0
 8011bd0:	bf18      	it	ne
 8011bd2:	2101      	movne	r1, #1
 8011bd4:	7029      	strb	r1, [r5, #0]
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	2101      	movs	r1, #1
 8011bda:	60a2      	str	r2, [r4, #8]
 8011bdc:	6123      	str	r3, [r4, #16]
 8011bde:	7561      	strb	r1, [r4, #21]
 8011be0:	7da0      	ldrb	r0, [r4, #22]
 8011be2:	f080 0001 	eor.w	r0, r0, #1
 8011be6:	bd38      	pop	{r3, r4, r5, pc}

08011be8 <ucdr_serialize_uint8_t>:
 8011be8:	b538      	push	{r3, r4, r5, lr}
 8011bea:	460d      	mov	r5, r1
 8011bec:	2101      	movs	r1, #1
 8011bee:	4604      	mov	r4, r0
 8011bf0:	f000 ff5e 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8011bf4:	b148      	cbz	r0, 8011c0a <ucdr_serialize_uint8_t+0x22>
 8011bf6:	68a3      	ldr	r3, [r4, #8]
 8011bf8:	701d      	strb	r5, [r3, #0]
 8011bfa:	68a2      	ldr	r2, [r4, #8]
 8011bfc:	6923      	ldr	r3, [r4, #16]
 8011bfe:	2101      	movs	r1, #1
 8011c00:	440a      	add	r2, r1
 8011c02:	440b      	add	r3, r1
 8011c04:	60a2      	str	r2, [r4, #8]
 8011c06:	6123      	str	r3, [r4, #16]
 8011c08:	7561      	strb	r1, [r4, #21]
 8011c0a:	7da0      	ldrb	r0, [r4, #22]
 8011c0c:	f080 0001 	eor.w	r0, r0, #1
 8011c10:	bd38      	pop	{r3, r4, r5, pc}
 8011c12:	bf00      	nop

08011c14 <ucdr_deserialize_uint8_t>:
 8011c14:	b538      	push	{r3, r4, r5, lr}
 8011c16:	460d      	mov	r5, r1
 8011c18:	2101      	movs	r1, #1
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	f000 ff48 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8011c20:	b150      	cbz	r0, 8011c38 <ucdr_deserialize_uint8_t+0x24>
 8011c22:	68a3      	ldr	r3, [r4, #8]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	702b      	strb	r3, [r5, #0]
 8011c28:	68a2      	ldr	r2, [r4, #8]
 8011c2a:	6923      	ldr	r3, [r4, #16]
 8011c2c:	2101      	movs	r1, #1
 8011c2e:	440a      	add	r2, r1
 8011c30:	440b      	add	r3, r1
 8011c32:	60a2      	str	r2, [r4, #8]
 8011c34:	6123      	str	r3, [r4, #16]
 8011c36:	7561      	strb	r1, [r4, #21]
 8011c38:	7da0      	ldrb	r0, [r4, #22]
 8011c3a:	f080 0001 	eor.w	r0, r0, #1
 8011c3e:	bd38      	pop	{r3, r4, r5, pc}

08011c40 <ucdr_serialize_uint16_t>:
 8011c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c44:	b082      	sub	sp, #8
 8011c46:	460b      	mov	r3, r1
 8011c48:	2102      	movs	r1, #2
 8011c4a:	4604      	mov	r4, r0
 8011c4c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011c50:	f000 ff82 	bl	8012b58 <ucdr_buffer_alignment>
 8011c54:	4601      	mov	r1, r0
 8011c56:	4620      	mov	r0, r4
 8011c58:	7d67      	ldrb	r7, [r4, #21]
 8011c5a:	f000 ffc1 	bl	8012be0 <ucdr_advance_buffer>
 8011c5e:	2102      	movs	r1, #2
 8011c60:	4620      	mov	r0, r4
 8011c62:	f000 ff19 	bl	8012a98 <ucdr_check_buffer_available_for>
 8011c66:	bb78      	cbnz	r0, 8011cc8 <ucdr_serialize_uint16_t+0x88>
 8011c68:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011c6c:	42ab      	cmp	r3, r5
 8011c6e:	d926      	bls.n	8011cbe <ucdr_serialize_uint16_t+0x7e>
 8011c70:	1b5e      	subs	r6, r3, r5
 8011c72:	60a3      	str	r3, [r4, #8]
 8011c74:	6923      	ldr	r3, [r4, #16]
 8011c76:	f1c6 0802 	rsb	r8, r6, #2
 8011c7a:	4433      	add	r3, r6
 8011c7c:	6123      	str	r3, [r4, #16]
 8011c7e:	4641      	mov	r1, r8
 8011c80:	4620      	mov	r0, r4
 8011c82:	f000 ff15 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8011c86:	2800      	cmp	r0, #0
 8011c88:	d03b      	beq.n	8011d02 <ucdr_serialize_uint16_t+0xc2>
 8011c8a:	7d23      	ldrb	r3, [r4, #20]
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	d04a      	beq.n	8011d26 <ucdr_serialize_uint16_t+0xe6>
 8011c90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011c94:	702b      	strb	r3, [r5, #0]
 8011c96:	2e00      	cmp	r6, #0
 8011c98:	d040      	beq.n	8011d1c <ucdr_serialize_uint16_t+0xdc>
 8011c9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011c9e:	706b      	strb	r3, [r5, #1]
 8011ca0:	6923      	ldr	r3, [r4, #16]
 8011ca2:	68a2      	ldr	r2, [r4, #8]
 8011ca4:	7da0      	ldrb	r0, [r4, #22]
 8011ca6:	3302      	adds	r3, #2
 8011ca8:	1b9e      	subs	r6, r3, r6
 8011caa:	4442      	add	r2, r8
 8011cac:	2302      	movs	r3, #2
 8011cae:	f080 0001 	eor.w	r0, r0, #1
 8011cb2:	60a2      	str	r2, [r4, #8]
 8011cb4:	6126      	str	r6, [r4, #16]
 8011cb6:	7563      	strb	r3, [r4, #21]
 8011cb8:	b002      	add	sp, #8
 8011cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cbe:	2102      	movs	r1, #2
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	f000 fef5 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8011cc6:	b190      	cbz	r0, 8011cee <ucdr_serialize_uint16_t+0xae>
 8011cc8:	7d23      	ldrb	r3, [r4, #20]
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	68a3      	ldr	r3, [r4, #8]
 8011cce:	d014      	beq.n	8011cfa <ucdr_serialize_uint16_t+0xba>
 8011cd0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011cd4:	701a      	strb	r2, [r3, #0]
 8011cd6:	68a3      	ldr	r3, [r4, #8]
 8011cd8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011cdc:	705a      	strb	r2, [r3, #1]
 8011cde:	68a2      	ldr	r2, [r4, #8]
 8011ce0:	6923      	ldr	r3, [r4, #16]
 8011ce2:	3202      	adds	r2, #2
 8011ce4:	3302      	adds	r3, #2
 8011ce6:	2102      	movs	r1, #2
 8011ce8:	60a2      	str	r2, [r4, #8]
 8011cea:	6123      	str	r3, [r4, #16]
 8011cec:	7561      	strb	r1, [r4, #21]
 8011cee:	7da0      	ldrb	r0, [r4, #22]
 8011cf0:	f080 0001 	eor.w	r0, r0, #1
 8011cf4:	b002      	add	sp, #8
 8011cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cfa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011cfe:	801a      	strh	r2, [r3, #0]
 8011d00:	e7ed      	b.n	8011cde <ucdr_serialize_uint16_t+0x9e>
 8011d02:	68a2      	ldr	r2, [r4, #8]
 8011d04:	6923      	ldr	r3, [r4, #16]
 8011d06:	7da0      	ldrb	r0, [r4, #22]
 8011d08:	7567      	strb	r7, [r4, #21]
 8011d0a:	1b92      	subs	r2, r2, r6
 8011d0c:	1b9b      	subs	r3, r3, r6
 8011d0e:	f080 0001 	eor.w	r0, r0, #1
 8011d12:	60a2      	str	r2, [r4, #8]
 8011d14:	6123      	str	r3, [r4, #16]
 8011d16:	b002      	add	sp, #8
 8011d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d1c:	68a3      	ldr	r3, [r4, #8]
 8011d1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011d22:	701a      	strb	r2, [r3, #0]
 8011d24:	e7bc      	b.n	8011ca0 <ucdr_serialize_uint16_t+0x60>
 8011d26:	4628      	mov	r0, r5
 8011d28:	f10d 0506 	add.w	r5, sp, #6
 8011d2c:	4629      	mov	r1, r5
 8011d2e:	4632      	mov	r2, r6
 8011d30:	f00b f893 	bl	801ce5a <memcpy>
 8011d34:	68a0      	ldr	r0, [r4, #8]
 8011d36:	4642      	mov	r2, r8
 8011d38:	19a9      	adds	r1, r5, r6
 8011d3a:	f00b f88e 	bl	801ce5a <memcpy>
 8011d3e:	e7af      	b.n	8011ca0 <ucdr_serialize_uint16_t+0x60>

08011d40 <ucdr_serialize_endian_uint16_t>:
 8011d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d44:	b083      	sub	sp, #12
 8011d46:	460d      	mov	r5, r1
 8011d48:	2102      	movs	r1, #2
 8011d4a:	4604      	mov	r4, r0
 8011d4c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011d50:	f000 ff02 	bl	8012b58 <ucdr_buffer_alignment>
 8011d54:	4601      	mov	r1, r0
 8011d56:	4620      	mov	r0, r4
 8011d58:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011d5c:	f000 ff40 	bl	8012be0 <ucdr_advance_buffer>
 8011d60:	2102      	movs	r1, #2
 8011d62:	4620      	mov	r0, r4
 8011d64:	f000 fe98 	bl	8012a98 <ucdr_check_buffer_available_for>
 8011d68:	bb70      	cbnz	r0, 8011dc8 <ucdr_serialize_endian_uint16_t+0x88>
 8011d6a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011d6e:	42be      	cmp	r6, r7
 8011d70:	d925      	bls.n	8011dbe <ucdr_serialize_endian_uint16_t+0x7e>
 8011d72:	6923      	ldr	r3, [r4, #16]
 8011d74:	60a6      	str	r6, [r4, #8]
 8011d76:	1bf6      	subs	r6, r6, r7
 8011d78:	4433      	add	r3, r6
 8011d7a:	f1c6 0902 	rsb	r9, r6, #2
 8011d7e:	6123      	str	r3, [r4, #16]
 8011d80:	4649      	mov	r1, r9
 8011d82:	4620      	mov	r0, r4
 8011d84:	f000 fe94 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	d039      	beq.n	8011e00 <ucdr_serialize_endian_uint16_t+0xc0>
 8011d8c:	2d01      	cmp	r5, #1
 8011d8e:	d04a      	beq.n	8011e26 <ucdr_serialize_endian_uint16_t+0xe6>
 8011d90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011d94:	703b      	strb	r3, [r7, #0]
 8011d96:	2e00      	cmp	r6, #0
 8011d98:	d040      	beq.n	8011e1c <ucdr_serialize_endian_uint16_t+0xdc>
 8011d9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011d9e:	707b      	strb	r3, [r7, #1]
 8011da0:	6923      	ldr	r3, [r4, #16]
 8011da2:	68a2      	ldr	r2, [r4, #8]
 8011da4:	7da0      	ldrb	r0, [r4, #22]
 8011da6:	3302      	adds	r3, #2
 8011da8:	444a      	add	r2, r9
 8011daa:	1b9b      	subs	r3, r3, r6
 8011dac:	2102      	movs	r1, #2
 8011dae:	f080 0001 	eor.w	r0, r0, #1
 8011db2:	60a2      	str	r2, [r4, #8]
 8011db4:	6123      	str	r3, [r4, #16]
 8011db6:	7561      	strb	r1, [r4, #21]
 8011db8:	b003      	add	sp, #12
 8011dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dbe:	2102      	movs	r1, #2
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	f000 fe75 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8011dc6:	b188      	cbz	r0, 8011dec <ucdr_serialize_endian_uint16_t+0xac>
 8011dc8:	2d01      	cmp	r5, #1
 8011dca:	68a3      	ldr	r3, [r4, #8]
 8011dcc:	d014      	beq.n	8011df8 <ucdr_serialize_endian_uint16_t+0xb8>
 8011dce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011dd2:	701a      	strb	r2, [r3, #0]
 8011dd4:	68a3      	ldr	r3, [r4, #8]
 8011dd6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011dda:	705a      	strb	r2, [r3, #1]
 8011ddc:	68a2      	ldr	r2, [r4, #8]
 8011dde:	6923      	ldr	r3, [r4, #16]
 8011de0:	3202      	adds	r2, #2
 8011de2:	3302      	adds	r3, #2
 8011de4:	2102      	movs	r1, #2
 8011de6:	60a2      	str	r2, [r4, #8]
 8011de8:	6123      	str	r3, [r4, #16]
 8011dea:	7561      	strb	r1, [r4, #21]
 8011dec:	7da0      	ldrb	r0, [r4, #22]
 8011dee:	f080 0001 	eor.w	r0, r0, #1
 8011df2:	b003      	add	sp, #12
 8011df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011df8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011dfc:	801a      	strh	r2, [r3, #0]
 8011dfe:	e7ed      	b.n	8011ddc <ucdr_serialize_endian_uint16_t+0x9c>
 8011e00:	68a2      	ldr	r2, [r4, #8]
 8011e02:	6923      	ldr	r3, [r4, #16]
 8011e04:	7da0      	ldrb	r0, [r4, #22]
 8011e06:	f884 8015 	strb.w	r8, [r4, #21]
 8011e0a:	1b92      	subs	r2, r2, r6
 8011e0c:	1b9b      	subs	r3, r3, r6
 8011e0e:	f080 0001 	eor.w	r0, r0, #1
 8011e12:	60a2      	str	r2, [r4, #8]
 8011e14:	6123      	str	r3, [r4, #16]
 8011e16:	b003      	add	sp, #12
 8011e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e1c:	68a3      	ldr	r3, [r4, #8]
 8011e1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e22:	701a      	strb	r2, [r3, #0]
 8011e24:	e7bc      	b.n	8011da0 <ucdr_serialize_endian_uint16_t+0x60>
 8011e26:	f10d 0506 	add.w	r5, sp, #6
 8011e2a:	4629      	mov	r1, r5
 8011e2c:	4632      	mov	r2, r6
 8011e2e:	4638      	mov	r0, r7
 8011e30:	f00b f813 	bl	801ce5a <memcpy>
 8011e34:	68a0      	ldr	r0, [r4, #8]
 8011e36:	464a      	mov	r2, r9
 8011e38:	19a9      	adds	r1, r5, r6
 8011e3a:	f00b f80e 	bl	801ce5a <memcpy>
 8011e3e:	e7af      	b.n	8011da0 <ucdr_serialize_endian_uint16_t+0x60>

08011e40 <ucdr_deserialize_uint16_t>:
 8011e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e44:	460d      	mov	r5, r1
 8011e46:	2102      	movs	r1, #2
 8011e48:	4604      	mov	r4, r0
 8011e4a:	f000 fe85 	bl	8012b58 <ucdr_buffer_alignment>
 8011e4e:	4601      	mov	r1, r0
 8011e50:	4620      	mov	r0, r4
 8011e52:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011e56:	f000 fec3 	bl	8012be0 <ucdr_advance_buffer>
 8011e5a:	2102      	movs	r1, #2
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f000 fe1b 	bl	8012a98 <ucdr_check_buffer_available_for>
 8011e62:	bb60      	cbnz	r0, 8011ebe <ucdr_deserialize_uint16_t+0x7e>
 8011e64:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011e68:	42be      	cmp	r6, r7
 8011e6a:	d923      	bls.n	8011eb4 <ucdr_deserialize_uint16_t+0x74>
 8011e6c:	6923      	ldr	r3, [r4, #16]
 8011e6e:	60a6      	str	r6, [r4, #8]
 8011e70:	1bf6      	subs	r6, r6, r7
 8011e72:	4433      	add	r3, r6
 8011e74:	f1c6 0902 	rsb	r9, r6, #2
 8011e78:	6123      	str	r3, [r4, #16]
 8011e7a:	4649      	mov	r1, r9
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	f000 fe17 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8011e82:	2800      	cmp	r0, #0
 8011e84:	d034      	beq.n	8011ef0 <ucdr_deserialize_uint16_t+0xb0>
 8011e86:	7d23      	ldrb	r3, [r4, #20]
 8011e88:	2b01      	cmp	r3, #1
 8011e8a:	d042      	beq.n	8011f12 <ucdr_deserialize_uint16_t+0xd2>
 8011e8c:	787b      	ldrb	r3, [r7, #1]
 8011e8e:	702b      	strb	r3, [r5, #0]
 8011e90:	2e00      	cmp	r6, #0
 8011e92:	d03a      	beq.n	8011f0a <ucdr_deserialize_uint16_t+0xca>
 8011e94:	783b      	ldrb	r3, [r7, #0]
 8011e96:	706b      	strb	r3, [r5, #1]
 8011e98:	6923      	ldr	r3, [r4, #16]
 8011e9a:	68a2      	ldr	r2, [r4, #8]
 8011e9c:	7da0      	ldrb	r0, [r4, #22]
 8011e9e:	2102      	movs	r1, #2
 8011ea0:	3302      	adds	r3, #2
 8011ea2:	444a      	add	r2, r9
 8011ea4:	1b9b      	subs	r3, r3, r6
 8011ea6:	7561      	strb	r1, [r4, #21]
 8011ea8:	60a2      	str	r2, [r4, #8]
 8011eaa:	6123      	str	r3, [r4, #16]
 8011eac:	f080 0001 	eor.w	r0, r0, #1
 8011eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eb4:	2102      	movs	r1, #2
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	f000 fdfa 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8011ebc:	b180      	cbz	r0, 8011ee0 <ucdr_deserialize_uint16_t+0xa0>
 8011ebe:	7d23      	ldrb	r3, [r4, #20]
 8011ec0:	2b01      	cmp	r3, #1
 8011ec2:	68a3      	ldr	r3, [r4, #8]
 8011ec4:	d011      	beq.n	8011eea <ucdr_deserialize_uint16_t+0xaa>
 8011ec6:	785b      	ldrb	r3, [r3, #1]
 8011ec8:	702b      	strb	r3, [r5, #0]
 8011eca:	68a3      	ldr	r3, [r4, #8]
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	706b      	strb	r3, [r5, #1]
 8011ed0:	68a2      	ldr	r2, [r4, #8]
 8011ed2:	6923      	ldr	r3, [r4, #16]
 8011ed4:	3202      	adds	r2, #2
 8011ed6:	3302      	adds	r3, #2
 8011ed8:	2102      	movs	r1, #2
 8011eda:	60a2      	str	r2, [r4, #8]
 8011edc:	6123      	str	r3, [r4, #16]
 8011ede:	7561      	strb	r1, [r4, #21]
 8011ee0:	7da0      	ldrb	r0, [r4, #22]
 8011ee2:	f080 0001 	eor.w	r0, r0, #1
 8011ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eea:	881b      	ldrh	r3, [r3, #0]
 8011eec:	802b      	strh	r3, [r5, #0]
 8011eee:	e7ef      	b.n	8011ed0 <ucdr_deserialize_uint16_t+0x90>
 8011ef0:	68a2      	ldr	r2, [r4, #8]
 8011ef2:	6923      	ldr	r3, [r4, #16]
 8011ef4:	7da0      	ldrb	r0, [r4, #22]
 8011ef6:	f884 8015 	strb.w	r8, [r4, #21]
 8011efa:	1b92      	subs	r2, r2, r6
 8011efc:	1b9b      	subs	r3, r3, r6
 8011efe:	60a2      	str	r2, [r4, #8]
 8011f00:	6123      	str	r3, [r4, #16]
 8011f02:	f080 0001 	eor.w	r0, r0, #1
 8011f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f0a:	68a3      	ldr	r3, [r4, #8]
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	706b      	strb	r3, [r5, #1]
 8011f10:	e7c2      	b.n	8011e98 <ucdr_deserialize_uint16_t+0x58>
 8011f12:	4639      	mov	r1, r7
 8011f14:	4632      	mov	r2, r6
 8011f16:	4628      	mov	r0, r5
 8011f18:	f00a ff9f 	bl	801ce5a <memcpy>
 8011f1c:	68a1      	ldr	r1, [r4, #8]
 8011f1e:	464a      	mov	r2, r9
 8011f20:	19a8      	adds	r0, r5, r6
 8011f22:	f00a ff9a 	bl	801ce5a <memcpy>
 8011f26:	e7b7      	b.n	8011e98 <ucdr_deserialize_uint16_t+0x58>

08011f28 <ucdr_deserialize_endian_uint16_t>:
 8011f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f2c:	460e      	mov	r6, r1
 8011f2e:	2102      	movs	r1, #2
 8011f30:	4604      	mov	r4, r0
 8011f32:	4615      	mov	r5, r2
 8011f34:	f000 fe10 	bl	8012b58 <ucdr_buffer_alignment>
 8011f38:	4601      	mov	r1, r0
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8011f40:	f000 fe4e 	bl	8012be0 <ucdr_advance_buffer>
 8011f44:	2102      	movs	r1, #2
 8011f46:	4620      	mov	r0, r4
 8011f48:	f000 fda6 	bl	8012a98 <ucdr_check_buffer_available_for>
 8011f4c:	bb70      	cbnz	r0, 8011fac <ucdr_deserialize_endian_uint16_t+0x84>
 8011f4e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8011f52:	4547      	cmp	r7, r8
 8011f54:	d925      	bls.n	8011fa2 <ucdr_deserialize_endian_uint16_t+0x7a>
 8011f56:	6923      	ldr	r3, [r4, #16]
 8011f58:	60a7      	str	r7, [r4, #8]
 8011f5a:	eba7 0708 	sub.w	r7, r7, r8
 8011f5e:	443b      	add	r3, r7
 8011f60:	f1c7 0a02 	rsb	sl, r7, #2
 8011f64:	6123      	str	r3, [r4, #16]
 8011f66:	4651      	mov	r1, sl
 8011f68:	4620      	mov	r0, r4
 8011f6a:	f000 fda1 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8011f6e:	2800      	cmp	r0, #0
 8011f70:	d034      	beq.n	8011fdc <ucdr_deserialize_endian_uint16_t+0xb4>
 8011f72:	2e01      	cmp	r6, #1
 8011f74:	d043      	beq.n	8011ffe <ucdr_deserialize_endian_uint16_t+0xd6>
 8011f76:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011f7a:	702b      	strb	r3, [r5, #0]
 8011f7c:	2f00      	cmp	r7, #0
 8011f7e:	d03a      	beq.n	8011ff6 <ucdr_deserialize_endian_uint16_t+0xce>
 8011f80:	f898 3000 	ldrb.w	r3, [r8]
 8011f84:	706b      	strb	r3, [r5, #1]
 8011f86:	6923      	ldr	r3, [r4, #16]
 8011f88:	68a2      	ldr	r2, [r4, #8]
 8011f8a:	7da0      	ldrb	r0, [r4, #22]
 8011f8c:	2102      	movs	r1, #2
 8011f8e:	3302      	adds	r3, #2
 8011f90:	4452      	add	r2, sl
 8011f92:	1bdb      	subs	r3, r3, r7
 8011f94:	7561      	strb	r1, [r4, #21]
 8011f96:	60a2      	str	r2, [r4, #8]
 8011f98:	6123      	str	r3, [r4, #16]
 8011f9a:	f080 0001 	eor.w	r0, r0, #1
 8011f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fa2:	2102      	movs	r1, #2
 8011fa4:	4620      	mov	r0, r4
 8011fa6:	f000 fd83 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8011faa:	b178      	cbz	r0, 8011fcc <ucdr_deserialize_endian_uint16_t+0xa4>
 8011fac:	2e01      	cmp	r6, #1
 8011fae:	68a3      	ldr	r3, [r4, #8]
 8011fb0:	d011      	beq.n	8011fd6 <ucdr_deserialize_endian_uint16_t+0xae>
 8011fb2:	785b      	ldrb	r3, [r3, #1]
 8011fb4:	702b      	strb	r3, [r5, #0]
 8011fb6:	68a3      	ldr	r3, [r4, #8]
 8011fb8:	781b      	ldrb	r3, [r3, #0]
 8011fba:	706b      	strb	r3, [r5, #1]
 8011fbc:	68a2      	ldr	r2, [r4, #8]
 8011fbe:	6923      	ldr	r3, [r4, #16]
 8011fc0:	3202      	adds	r2, #2
 8011fc2:	3302      	adds	r3, #2
 8011fc4:	2102      	movs	r1, #2
 8011fc6:	60a2      	str	r2, [r4, #8]
 8011fc8:	6123      	str	r3, [r4, #16]
 8011fca:	7561      	strb	r1, [r4, #21]
 8011fcc:	7da0      	ldrb	r0, [r4, #22]
 8011fce:	f080 0001 	eor.w	r0, r0, #1
 8011fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fd6:	881b      	ldrh	r3, [r3, #0]
 8011fd8:	802b      	strh	r3, [r5, #0]
 8011fda:	e7ef      	b.n	8011fbc <ucdr_deserialize_endian_uint16_t+0x94>
 8011fdc:	68a2      	ldr	r2, [r4, #8]
 8011fde:	6923      	ldr	r3, [r4, #16]
 8011fe0:	7da0      	ldrb	r0, [r4, #22]
 8011fe2:	f884 9015 	strb.w	r9, [r4, #21]
 8011fe6:	1bd2      	subs	r2, r2, r7
 8011fe8:	1bdb      	subs	r3, r3, r7
 8011fea:	60a2      	str	r2, [r4, #8]
 8011fec:	6123      	str	r3, [r4, #16]
 8011fee:	f080 0001 	eor.w	r0, r0, #1
 8011ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ff6:	68a3      	ldr	r3, [r4, #8]
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	706b      	strb	r3, [r5, #1]
 8011ffc:	e7c3      	b.n	8011f86 <ucdr_deserialize_endian_uint16_t+0x5e>
 8011ffe:	4641      	mov	r1, r8
 8012000:	463a      	mov	r2, r7
 8012002:	4628      	mov	r0, r5
 8012004:	f00a ff29 	bl	801ce5a <memcpy>
 8012008:	68a1      	ldr	r1, [r4, #8]
 801200a:	4652      	mov	r2, sl
 801200c:	19e8      	adds	r0, r5, r7
 801200e:	f00a ff24 	bl	801ce5a <memcpy>
 8012012:	e7b8      	b.n	8011f86 <ucdr_deserialize_endian_uint16_t+0x5e>

08012014 <ucdr_serialize_uint32_t>:
 8012014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012018:	b082      	sub	sp, #8
 801201a:	4604      	mov	r4, r0
 801201c:	9101      	str	r1, [sp, #4]
 801201e:	2104      	movs	r1, #4
 8012020:	f000 fd9a 	bl	8012b58 <ucdr_buffer_alignment>
 8012024:	4601      	mov	r1, r0
 8012026:	4620      	mov	r0, r4
 8012028:	7d67      	ldrb	r7, [r4, #21]
 801202a:	f000 fdd9 	bl	8012be0 <ucdr_advance_buffer>
 801202e:	2104      	movs	r1, #4
 8012030:	4620      	mov	r0, r4
 8012032:	f000 fd31 	bl	8012a98 <ucdr_check_buffer_available_for>
 8012036:	2800      	cmp	r0, #0
 8012038:	d139      	bne.n	80120ae <ucdr_serialize_uint32_t+0x9a>
 801203a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801203e:	42ab      	cmp	r3, r5
 8012040:	d930      	bls.n	80120a4 <ucdr_serialize_uint32_t+0x90>
 8012042:	1b5e      	subs	r6, r3, r5
 8012044:	60a3      	str	r3, [r4, #8]
 8012046:	6923      	ldr	r3, [r4, #16]
 8012048:	f1c6 0804 	rsb	r8, r6, #4
 801204c:	4433      	add	r3, r6
 801204e:	6123      	str	r3, [r4, #16]
 8012050:	4641      	mov	r1, r8
 8012052:	4620      	mov	r0, r4
 8012054:	f000 fd2c 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8012058:	2800      	cmp	r0, #0
 801205a:	d04c      	beq.n	80120f6 <ucdr_serialize_uint32_t+0xe2>
 801205c:	7d23      	ldrb	r3, [r4, #20]
 801205e:	2b01      	cmp	r3, #1
 8012060:	d063      	beq.n	801212a <ucdr_serialize_uint32_t+0x116>
 8012062:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012066:	702b      	strb	r3, [r5, #0]
 8012068:	2e00      	cmp	r6, #0
 801206a:	d051      	beq.n	8012110 <ucdr_serialize_uint32_t+0xfc>
 801206c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012070:	706b      	strb	r3, [r5, #1]
 8012072:	2e01      	cmp	r6, #1
 8012074:	d050      	beq.n	8012118 <ucdr_serialize_uint32_t+0x104>
 8012076:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801207a:	70ab      	strb	r3, [r5, #2]
 801207c:	2e02      	cmp	r6, #2
 801207e:	d04f      	beq.n	8012120 <ucdr_serialize_uint32_t+0x10c>
 8012080:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012084:	70eb      	strb	r3, [r5, #3]
 8012086:	6923      	ldr	r3, [r4, #16]
 8012088:	68a2      	ldr	r2, [r4, #8]
 801208a:	7da0      	ldrb	r0, [r4, #22]
 801208c:	3304      	adds	r3, #4
 801208e:	1b9e      	subs	r6, r3, r6
 8012090:	4442      	add	r2, r8
 8012092:	2304      	movs	r3, #4
 8012094:	f080 0001 	eor.w	r0, r0, #1
 8012098:	60a2      	str	r2, [r4, #8]
 801209a:	6126      	str	r6, [r4, #16]
 801209c:	7563      	strb	r3, [r4, #21]
 801209e:	b002      	add	sp, #8
 80120a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120a4:	2104      	movs	r1, #4
 80120a6:	4620      	mov	r0, r4
 80120a8:	f000 fd02 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 80120ac:	b1d0      	cbz	r0, 80120e4 <ucdr_serialize_uint32_t+0xd0>
 80120ae:	7d23      	ldrb	r3, [r4, #20]
 80120b0:	2b01      	cmp	r3, #1
 80120b2:	68a3      	ldr	r3, [r4, #8]
 80120b4:	d01c      	beq.n	80120f0 <ucdr_serialize_uint32_t+0xdc>
 80120b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80120ba:	701a      	strb	r2, [r3, #0]
 80120bc:	68a3      	ldr	r3, [r4, #8]
 80120be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80120c2:	705a      	strb	r2, [r3, #1]
 80120c4:	68a3      	ldr	r3, [r4, #8]
 80120c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80120ca:	709a      	strb	r2, [r3, #2]
 80120cc:	68a3      	ldr	r3, [r4, #8]
 80120ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80120d2:	70da      	strb	r2, [r3, #3]
 80120d4:	68a2      	ldr	r2, [r4, #8]
 80120d6:	6923      	ldr	r3, [r4, #16]
 80120d8:	3204      	adds	r2, #4
 80120da:	3304      	adds	r3, #4
 80120dc:	2104      	movs	r1, #4
 80120de:	60a2      	str	r2, [r4, #8]
 80120e0:	6123      	str	r3, [r4, #16]
 80120e2:	7561      	strb	r1, [r4, #21]
 80120e4:	7da0      	ldrb	r0, [r4, #22]
 80120e6:	f080 0001 	eor.w	r0, r0, #1
 80120ea:	b002      	add	sp, #8
 80120ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f0:	9a01      	ldr	r2, [sp, #4]
 80120f2:	601a      	str	r2, [r3, #0]
 80120f4:	e7ee      	b.n	80120d4 <ucdr_serialize_uint32_t+0xc0>
 80120f6:	68a2      	ldr	r2, [r4, #8]
 80120f8:	6923      	ldr	r3, [r4, #16]
 80120fa:	7da0      	ldrb	r0, [r4, #22]
 80120fc:	7567      	strb	r7, [r4, #21]
 80120fe:	1b92      	subs	r2, r2, r6
 8012100:	1b9b      	subs	r3, r3, r6
 8012102:	f080 0001 	eor.w	r0, r0, #1
 8012106:	60a2      	str	r2, [r4, #8]
 8012108:	6123      	str	r3, [r4, #16]
 801210a:	b002      	add	sp, #8
 801210c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012110:	68a3      	ldr	r3, [r4, #8]
 8012112:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012116:	701a      	strb	r2, [r3, #0]
 8012118:	68a3      	ldr	r3, [r4, #8]
 801211a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801211e:	701a      	strb	r2, [r3, #0]
 8012120:	68a3      	ldr	r3, [r4, #8]
 8012122:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012126:	701a      	strb	r2, [r3, #0]
 8012128:	e7ad      	b.n	8012086 <ucdr_serialize_uint32_t+0x72>
 801212a:	4628      	mov	r0, r5
 801212c:	ad01      	add	r5, sp, #4
 801212e:	4629      	mov	r1, r5
 8012130:	4632      	mov	r2, r6
 8012132:	f00a fe92 	bl	801ce5a <memcpy>
 8012136:	68a0      	ldr	r0, [r4, #8]
 8012138:	4642      	mov	r2, r8
 801213a:	19a9      	adds	r1, r5, r6
 801213c:	f00a fe8d 	bl	801ce5a <memcpy>
 8012140:	e7a1      	b.n	8012086 <ucdr_serialize_uint32_t+0x72>
 8012142:	bf00      	nop

08012144 <ucdr_serialize_endian_uint32_t>:
 8012144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012148:	b083      	sub	sp, #12
 801214a:	460d      	mov	r5, r1
 801214c:	2104      	movs	r1, #4
 801214e:	4604      	mov	r4, r0
 8012150:	9201      	str	r2, [sp, #4]
 8012152:	f000 fd01 	bl	8012b58 <ucdr_buffer_alignment>
 8012156:	4601      	mov	r1, r0
 8012158:	4620      	mov	r0, r4
 801215a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801215e:	f000 fd3f 	bl	8012be0 <ucdr_advance_buffer>
 8012162:	2104      	movs	r1, #4
 8012164:	4620      	mov	r0, r4
 8012166:	f000 fc97 	bl	8012a98 <ucdr_check_buffer_available_for>
 801216a:	2800      	cmp	r0, #0
 801216c:	d138      	bne.n	80121e0 <ucdr_serialize_endian_uint32_t+0x9c>
 801216e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012172:	42b7      	cmp	r7, r6
 8012174:	d92f      	bls.n	80121d6 <ucdr_serialize_endian_uint32_t+0x92>
 8012176:	6923      	ldr	r3, [r4, #16]
 8012178:	60a7      	str	r7, [r4, #8]
 801217a:	1bbf      	subs	r7, r7, r6
 801217c:	443b      	add	r3, r7
 801217e:	f1c7 0904 	rsb	r9, r7, #4
 8012182:	6123      	str	r3, [r4, #16]
 8012184:	4649      	mov	r1, r9
 8012186:	4620      	mov	r0, r4
 8012188:	f000 fc92 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 801218c:	2800      	cmp	r0, #0
 801218e:	d04a      	beq.n	8012226 <ucdr_serialize_endian_uint32_t+0xe2>
 8012190:	2d01      	cmp	r5, #1
 8012192:	d063      	beq.n	801225c <ucdr_serialize_endian_uint32_t+0x118>
 8012194:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012198:	7033      	strb	r3, [r6, #0]
 801219a:	2f00      	cmp	r7, #0
 801219c:	d051      	beq.n	8012242 <ucdr_serialize_endian_uint32_t+0xfe>
 801219e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80121a2:	7073      	strb	r3, [r6, #1]
 80121a4:	2f01      	cmp	r7, #1
 80121a6:	d050      	beq.n	801224a <ucdr_serialize_endian_uint32_t+0x106>
 80121a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80121ac:	70b3      	strb	r3, [r6, #2]
 80121ae:	2f02      	cmp	r7, #2
 80121b0:	d04f      	beq.n	8012252 <ucdr_serialize_endian_uint32_t+0x10e>
 80121b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80121b6:	70f3      	strb	r3, [r6, #3]
 80121b8:	6923      	ldr	r3, [r4, #16]
 80121ba:	68a2      	ldr	r2, [r4, #8]
 80121bc:	7da0      	ldrb	r0, [r4, #22]
 80121be:	3304      	adds	r3, #4
 80121c0:	444a      	add	r2, r9
 80121c2:	1bdb      	subs	r3, r3, r7
 80121c4:	2104      	movs	r1, #4
 80121c6:	f080 0001 	eor.w	r0, r0, #1
 80121ca:	60a2      	str	r2, [r4, #8]
 80121cc:	6123      	str	r3, [r4, #16]
 80121ce:	7561      	strb	r1, [r4, #21]
 80121d0:	b003      	add	sp, #12
 80121d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121d6:	2104      	movs	r1, #4
 80121d8:	4620      	mov	r0, r4
 80121da:	f000 fc69 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 80121de:	b1c8      	cbz	r0, 8012214 <ucdr_serialize_endian_uint32_t+0xd0>
 80121e0:	2d01      	cmp	r5, #1
 80121e2:	68a3      	ldr	r3, [r4, #8]
 80121e4:	d01c      	beq.n	8012220 <ucdr_serialize_endian_uint32_t+0xdc>
 80121e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80121ea:	701a      	strb	r2, [r3, #0]
 80121ec:	68a3      	ldr	r3, [r4, #8]
 80121ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121f2:	705a      	strb	r2, [r3, #1]
 80121f4:	68a3      	ldr	r3, [r4, #8]
 80121f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80121fa:	709a      	strb	r2, [r3, #2]
 80121fc:	68a3      	ldr	r3, [r4, #8]
 80121fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012202:	70da      	strb	r2, [r3, #3]
 8012204:	68a2      	ldr	r2, [r4, #8]
 8012206:	6923      	ldr	r3, [r4, #16]
 8012208:	3204      	adds	r2, #4
 801220a:	3304      	adds	r3, #4
 801220c:	2104      	movs	r1, #4
 801220e:	60a2      	str	r2, [r4, #8]
 8012210:	6123      	str	r3, [r4, #16]
 8012212:	7561      	strb	r1, [r4, #21]
 8012214:	7da0      	ldrb	r0, [r4, #22]
 8012216:	f080 0001 	eor.w	r0, r0, #1
 801221a:	b003      	add	sp, #12
 801221c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012220:	9a01      	ldr	r2, [sp, #4]
 8012222:	601a      	str	r2, [r3, #0]
 8012224:	e7ee      	b.n	8012204 <ucdr_serialize_endian_uint32_t+0xc0>
 8012226:	68a2      	ldr	r2, [r4, #8]
 8012228:	6923      	ldr	r3, [r4, #16]
 801222a:	7da0      	ldrb	r0, [r4, #22]
 801222c:	f884 8015 	strb.w	r8, [r4, #21]
 8012230:	1bd2      	subs	r2, r2, r7
 8012232:	1bdb      	subs	r3, r3, r7
 8012234:	f080 0001 	eor.w	r0, r0, #1
 8012238:	60a2      	str	r2, [r4, #8]
 801223a:	6123      	str	r3, [r4, #16]
 801223c:	b003      	add	sp, #12
 801223e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012242:	68a3      	ldr	r3, [r4, #8]
 8012244:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012248:	701a      	strb	r2, [r3, #0]
 801224a:	68a3      	ldr	r3, [r4, #8]
 801224c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012250:	701a      	strb	r2, [r3, #0]
 8012252:	68a3      	ldr	r3, [r4, #8]
 8012254:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012258:	701a      	strb	r2, [r3, #0]
 801225a:	e7ad      	b.n	80121b8 <ucdr_serialize_endian_uint32_t+0x74>
 801225c:	ad01      	add	r5, sp, #4
 801225e:	4629      	mov	r1, r5
 8012260:	463a      	mov	r2, r7
 8012262:	4630      	mov	r0, r6
 8012264:	f00a fdf9 	bl	801ce5a <memcpy>
 8012268:	68a0      	ldr	r0, [r4, #8]
 801226a:	464a      	mov	r2, r9
 801226c:	19e9      	adds	r1, r5, r7
 801226e:	f00a fdf4 	bl	801ce5a <memcpy>
 8012272:	e7a1      	b.n	80121b8 <ucdr_serialize_endian_uint32_t+0x74>

08012274 <ucdr_deserialize_uint32_t>:
 8012274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012278:	460d      	mov	r5, r1
 801227a:	2104      	movs	r1, #4
 801227c:	4604      	mov	r4, r0
 801227e:	f000 fc6b 	bl	8012b58 <ucdr_buffer_alignment>
 8012282:	4601      	mov	r1, r0
 8012284:	4620      	mov	r0, r4
 8012286:	f894 8015 	ldrb.w	r8, [r4, #21]
 801228a:	f000 fca9 	bl	8012be0 <ucdr_advance_buffer>
 801228e:	2104      	movs	r1, #4
 8012290:	4620      	mov	r0, r4
 8012292:	f000 fc01 	bl	8012a98 <ucdr_check_buffer_available_for>
 8012296:	2800      	cmp	r0, #0
 8012298:	d138      	bne.n	801230c <ucdr_deserialize_uint32_t+0x98>
 801229a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801229e:	42b7      	cmp	r7, r6
 80122a0:	d92f      	bls.n	8012302 <ucdr_deserialize_uint32_t+0x8e>
 80122a2:	6923      	ldr	r3, [r4, #16]
 80122a4:	60a7      	str	r7, [r4, #8]
 80122a6:	1bbf      	subs	r7, r7, r6
 80122a8:	443b      	add	r3, r7
 80122aa:	f1c7 0904 	rsb	r9, r7, #4
 80122ae:	6123      	str	r3, [r4, #16]
 80122b0:	4649      	mov	r1, r9
 80122b2:	4620      	mov	r0, r4
 80122b4:	f000 fbfc 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d046      	beq.n	801234a <ucdr_deserialize_uint32_t+0xd6>
 80122bc:	7d23      	ldrb	r3, [r4, #20]
 80122be:	2b01      	cmp	r3, #1
 80122c0:	d05c      	beq.n	801237c <ucdr_deserialize_uint32_t+0x108>
 80122c2:	78f3      	ldrb	r3, [r6, #3]
 80122c4:	702b      	strb	r3, [r5, #0]
 80122c6:	2f00      	cmp	r7, #0
 80122c8:	d04c      	beq.n	8012364 <ucdr_deserialize_uint32_t+0xf0>
 80122ca:	78b3      	ldrb	r3, [r6, #2]
 80122cc:	706b      	strb	r3, [r5, #1]
 80122ce:	2f01      	cmp	r7, #1
 80122d0:	f105 0302 	add.w	r3, r5, #2
 80122d4:	d04a      	beq.n	801236c <ucdr_deserialize_uint32_t+0xf8>
 80122d6:	7873      	ldrb	r3, [r6, #1]
 80122d8:	70ab      	strb	r3, [r5, #2]
 80122da:	2f02      	cmp	r7, #2
 80122dc:	f105 0303 	add.w	r3, r5, #3
 80122e0:	d048      	beq.n	8012374 <ucdr_deserialize_uint32_t+0x100>
 80122e2:	7833      	ldrb	r3, [r6, #0]
 80122e4:	70eb      	strb	r3, [r5, #3]
 80122e6:	6923      	ldr	r3, [r4, #16]
 80122e8:	68a2      	ldr	r2, [r4, #8]
 80122ea:	7da0      	ldrb	r0, [r4, #22]
 80122ec:	2104      	movs	r1, #4
 80122ee:	3304      	adds	r3, #4
 80122f0:	444a      	add	r2, r9
 80122f2:	1bdb      	subs	r3, r3, r7
 80122f4:	7561      	strb	r1, [r4, #21]
 80122f6:	60a2      	str	r2, [r4, #8]
 80122f8:	6123      	str	r3, [r4, #16]
 80122fa:	f080 0001 	eor.w	r0, r0, #1
 80122fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012302:	2104      	movs	r1, #4
 8012304:	4620      	mov	r0, r4
 8012306:	f000 fbd3 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 801230a:	b1b0      	cbz	r0, 801233a <ucdr_deserialize_uint32_t+0xc6>
 801230c:	7d23      	ldrb	r3, [r4, #20]
 801230e:	2b01      	cmp	r3, #1
 8012310:	68a3      	ldr	r3, [r4, #8]
 8012312:	d017      	beq.n	8012344 <ucdr_deserialize_uint32_t+0xd0>
 8012314:	78db      	ldrb	r3, [r3, #3]
 8012316:	702b      	strb	r3, [r5, #0]
 8012318:	68a3      	ldr	r3, [r4, #8]
 801231a:	789b      	ldrb	r3, [r3, #2]
 801231c:	706b      	strb	r3, [r5, #1]
 801231e:	68a3      	ldr	r3, [r4, #8]
 8012320:	785b      	ldrb	r3, [r3, #1]
 8012322:	70ab      	strb	r3, [r5, #2]
 8012324:	68a3      	ldr	r3, [r4, #8]
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	70eb      	strb	r3, [r5, #3]
 801232a:	68a2      	ldr	r2, [r4, #8]
 801232c:	6923      	ldr	r3, [r4, #16]
 801232e:	3204      	adds	r2, #4
 8012330:	3304      	adds	r3, #4
 8012332:	2104      	movs	r1, #4
 8012334:	60a2      	str	r2, [r4, #8]
 8012336:	6123      	str	r3, [r4, #16]
 8012338:	7561      	strb	r1, [r4, #21]
 801233a:	7da0      	ldrb	r0, [r4, #22]
 801233c:	f080 0001 	eor.w	r0, r0, #1
 8012340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	602b      	str	r3, [r5, #0]
 8012348:	e7ef      	b.n	801232a <ucdr_deserialize_uint32_t+0xb6>
 801234a:	68a2      	ldr	r2, [r4, #8]
 801234c:	6923      	ldr	r3, [r4, #16]
 801234e:	7da0      	ldrb	r0, [r4, #22]
 8012350:	f884 8015 	strb.w	r8, [r4, #21]
 8012354:	1bd2      	subs	r2, r2, r7
 8012356:	1bdb      	subs	r3, r3, r7
 8012358:	60a2      	str	r2, [r4, #8]
 801235a:	6123      	str	r3, [r4, #16]
 801235c:	f080 0001 	eor.w	r0, r0, #1
 8012360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012364:	68a3      	ldr	r3, [r4, #8]
 8012366:	789b      	ldrb	r3, [r3, #2]
 8012368:	706b      	strb	r3, [r5, #1]
 801236a:	1cab      	adds	r3, r5, #2
 801236c:	68a2      	ldr	r2, [r4, #8]
 801236e:	7852      	ldrb	r2, [r2, #1]
 8012370:	f803 2b01 	strb.w	r2, [r3], #1
 8012374:	68a2      	ldr	r2, [r4, #8]
 8012376:	7812      	ldrb	r2, [r2, #0]
 8012378:	701a      	strb	r2, [r3, #0]
 801237a:	e7b4      	b.n	80122e6 <ucdr_deserialize_uint32_t+0x72>
 801237c:	4631      	mov	r1, r6
 801237e:	463a      	mov	r2, r7
 8012380:	4628      	mov	r0, r5
 8012382:	f00a fd6a 	bl	801ce5a <memcpy>
 8012386:	68a1      	ldr	r1, [r4, #8]
 8012388:	464a      	mov	r2, r9
 801238a:	19e8      	adds	r0, r5, r7
 801238c:	f00a fd65 	bl	801ce5a <memcpy>
 8012390:	e7a9      	b.n	80122e6 <ucdr_deserialize_uint32_t+0x72>
 8012392:	bf00      	nop

08012394 <ucdr_deserialize_endian_uint32_t>:
 8012394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012398:	460e      	mov	r6, r1
 801239a:	2104      	movs	r1, #4
 801239c:	4604      	mov	r4, r0
 801239e:	4615      	mov	r5, r2
 80123a0:	f000 fbda 	bl	8012b58 <ucdr_buffer_alignment>
 80123a4:	4601      	mov	r1, r0
 80123a6:	4620      	mov	r0, r4
 80123a8:	f894 9015 	ldrb.w	r9, [r4, #21]
 80123ac:	f000 fc18 	bl	8012be0 <ucdr_advance_buffer>
 80123b0:	2104      	movs	r1, #4
 80123b2:	4620      	mov	r0, r4
 80123b4:	f000 fb70 	bl	8012a98 <ucdr_check_buffer_available_for>
 80123b8:	2800      	cmp	r0, #0
 80123ba:	d13c      	bne.n	8012436 <ucdr_deserialize_endian_uint32_t+0xa2>
 80123bc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80123c0:	42bb      	cmp	r3, r7
 80123c2:	d933      	bls.n	801242c <ucdr_deserialize_endian_uint32_t+0x98>
 80123c4:	eba3 0807 	sub.w	r8, r3, r7
 80123c8:	60a3      	str	r3, [r4, #8]
 80123ca:	6923      	ldr	r3, [r4, #16]
 80123cc:	f1c8 0a04 	rsb	sl, r8, #4
 80123d0:	4443      	add	r3, r8
 80123d2:	6123      	str	r3, [r4, #16]
 80123d4:	4651      	mov	r1, sl
 80123d6:	4620      	mov	r0, r4
 80123d8:	f000 fb6a 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 80123dc:	2800      	cmp	r0, #0
 80123de:	d048      	beq.n	8012472 <ucdr_deserialize_endian_uint32_t+0xde>
 80123e0:	2e01      	cmp	r6, #1
 80123e2:	d061      	beq.n	80124a8 <ucdr_deserialize_endian_uint32_t+0x114>
 80123e4:	78fb      	ldrb	r3, [r7, #3]
 80123e6:	702b      	strb	r3, [r5, #0]
 80123e8:	f1b8 0f00 	cmp.w	r8, #0
 80123ec:	d050      	beq.n	8012490 <ucdr_deserialize_endian_uint32_t+0xfc>
 80123ee:	78bb      	ldrb	r3, [r7, #2]
 80123f0:	706b      	strb	r3, [r5, #1]
 80123f2:	f1b8 0f01 	cmp.w	r8, #1
 80123f6:	f105 0302 	add.w	r3, r5, #2
 80123fa:	d04d      	beq.n	8012498 <ucdr_deserialize_endian_uint32_t+0x104>
 80123fc:	787b      	ldrb	r3, [r7, #1]
 80123fe:	70ab      	strb	r3, [r5, #2]
 8012400:	f1b8 0f02 	cmp.w	r8, #2
 8012404:	f105 0303 	add.w	r3, r5, #3
 8012408:	d04a      	beq.n	80124a0 <ucdr_deserialize_endian_uint32_t+0x10c>
 801240a:	783b      	ldrb	r3, [r7, #0]
 801240c:	70eb      	strb	r3, [r5, #3]
 801240e:	6923      	ldr	r3, [r4, #16]
 8012410:	68a2      	ldr	r2, [r4, #8]
 8012412:	7da0      	ldrb	r0, [r4, #22]
 8012414:	2104      	movs	r1, #4
 8012416:	3304      	adds	r3, #4
 8012418:	4452      	add	r2, sl
 801241a:	eba3 0308 	sub.w	r3, r3, r8
 801241e:	7561      	strb	r1, [r4, #21]
 8012420:	60a2      	str	r2, [r4, #8]
 8012422:	6123      	str	r3, [r4, #16]
 8012424:	f080 0001 	eor.w	r0, r0, #1
 8012428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801242c:	2104      	movs	r1, #4
 801242e:	4620      	mov	r0, r4
 8012430:	f000 fb3e 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8012434:	b1a8      	cbz	r0, 8012462 <ucdr_deserialize_endian_uint32_t+0xce>
 8012436:	2e01      	cmp	r6, #1
 8012438:	68a3      	ldr	r3, [r4, #8]
 801243a:	d017      	beq.n	801246c <ucdr_deserialize_endian_uint32_t+0xd8>
 801243c:	78db      	ldrb	r3, [r3, #3]
 801243e:	702b      	strb	r3, [r5, #0]
 8012440:	68a3      	ldr	r3, [r4, #8]
 8012442:	789b      	ldrb	r3, [r3, #2]
 8012444:	706b      	strb	r3, [r5, #1]
 8012446:	68a3      	ldr	r3, [r4, #8]
 8012448:	785b      	ldrb	r3, [r3, #1]
 801244a:	70ab      	strb	r3, [r5, #2]
 801244c:	68a3      	ldr	r3, [r4, #8]
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	70eb      	strb	r3, [r5, #3]
 8012452:	68a2      	ldr	r2, [r4, #8]
 8012454:	6923      	ldr	r3, [r4, #16]
 8012456:	3204      	adds	r2, #4
 8012458:	3304      	adds	r3, #4
 801245a:	2104      	movs	r1, #4
 801245c:	60a2      	str	r2, [r4, #8]
 801245e:	6123      	str	r3, [r4, #16]
 8012460:	7561      	strb	r1, [r4, #21]
 8012462:	7da0      	ldrb	r0, [r4, #22]
 8012464:	f080 0001 	eor.w	r0, r0, #1
 8012468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	602b      	str	r3, [r5, #0]
 8012470:	e7ef      	b.n	8012452 <ucdr_deserialize_endian_uint32_t+0xbe>
 8012472:	68a2      	ldr	r2, [r4, #8]
 8012474:	6923      	ldr	r3, [r4, #16]
 8012476:	7da0      	ldrb	r0, [r4, #22]
 8012478:	f884 9015 	strb.w	r9, [r4, #21]
 801247c:	eba2 0208 	sub.w	r2, r2, r8
 8012480:	eba3 0308 	sub.w	r3, r3, r8
 8012484:	60a2      	str	r2, [r4, #8]
 8012486:	6123      	str	r3, [r4, #16]
 8012488:	f080 0001 	eor.w	r0, r0, #1
 801248c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012490:	68a3      	ldr	r3, [r4, #8]
 8012492:	789b      	ldrb	r3, [r3, #2]
 8012494:	706b      	strb	r3, [r5, #1]
 8012496:	1cab      	adds	r3, r5, #2
 8012498:	68a2      	ldr	r2, [r4, #8]
 801249a:	7852      	ldrb	r2, [r2, #1]
 801249c:	f803 2b01 	strb.w	r2, [r3], #1
 80124a0:	68a2      	ldr	r2, [r4, #8]
 80124a2:	7812      	ldrb	r2, [r2, #0]
 80124a4:	701a      	strb	r2, [r3, #0]
 80124a6:	e7b2      	b.n	801240e <ucdr_deserialize_endian_uint32_t+0x7a>
 80124a8:	4639      	mov	r1, r7
 80124aa:	4642      	mov	r2, r8
 80124ac:	4628      	mov	r0, r5
 80124ae:	f00a fcd4 	bl	801ce5a <memcpy>
 80124b2:	68a1      	ldr	r1, [r4, #8]
 80124b4:	4652      	mov	r2, sl
 80124b6:	eb05 0008 	add.w	r0, r5, r8
 80124ba:	f00a fcce 	bl	801ce5a <memcpy>
 80124be:	e7a6      	b.n	801240e <ucdr_deserialize_endian_uint32_t+0x7a>

080124c0 <ucdr_serialize_uint64_t>:
 80124c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124c4:	2108      	movs	r1, #8
 80124c6:	b082      	sub	sp, #8
 80124c8:	4604      	mov	r4, r0
 80124ca:	e9cd 2300 	strd	r2, r3, [sp]
 80124ce:	f000 fb43 	bl	8012b58 <ucdr_buffer_alignment>
 80124d2:	4601      	mov	r1, r0
 80124d4:	4620      	mov	r0, r4
 80124d6:	7d67      	ldrb	r7, [r4, #21]
 80124d8:	f000 fb82 	bl	8012be0 <ucdr_advance_buffer>
 80124dc:	2108      	movs	r1, #8
 80124de:	4620      	mov	r0, r4
 80124e0:	f000 fada 	bl	8012a98 <ucdr_check_buffer_available_for>
 80124e4:	2800      	cmp	r0, #0
 80124e6:	d14e      	bne.n	8012586 <ucdr_serialize_uint64_t+0xc6>
 80124e8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80124ec:	42ab      	cmp	r3, r5
 80124ee:	d945      	bls.n	801257c <ucdr_serialize_uint64_t+0xbc>
 80124f0:	1b5e      	subs	r6, r3, r5
 80124f2:	60a3      	str	r3, [r4, #8]
 80124f4:	6923      	ldr	r3, [r4, #16]
 80124f6:	f1c6 0808 	rsb	r8, r6, #8
 80124fa:	4433      	add	r3, r6
 80124fc:	6123      	str	r3, [r4, #16]
 80124fe:	4641      	mov	r1, r8
 8012500:	4620      	mov	r0, r4
 8012502:	f000 fad5 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8012506:	2800      	cmp	r0, #0
 8012508:	d074      	beq.n	80125f4 <ucdr_serialize_uint64_t+0x134>
 801250a:	7d23      	ldrb	r3, [r4, #20]
 801250c:	2b01      	cmp	r3, #1
 801250e:	f000 809b 	beq.w	8012648 <ucdr_serialize_uint64_t+0x188>
 8012512:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012516:	702b      	strb	r3, [r5, #0]
 8012518:	2e00      	cmp	r6, #0
 801251a:	d078      	beq.n	801260e <ucdr_serialize_uint64_t+0x14e>
 801251c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012520:	706b      	strb	r3, [r5, #1]
 8012522:	2e01      	cmp	r6, #1
 8012524:	d077      	beq.n	8012616 <ucdr_serialize_uint64_t+0x156>
 8012526:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801252a:	70ab      	strb	r3, [r5, #2]
 801252c:	2e02      	cmp	r6, #2
 801252e:	d076      	beq.n	801261e <ucdr_serialize_uint64_t+0x15e>
 8012530:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012534:	70eb      	strb	r3, [r5, #3]
 8012536:	2e03      	cmp	r6, #3
 8012538:	d075      	beq.n	8012626 <ucdr_serialize_uint64_t+0x166>
 801253a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801253e:	712b      	strb	r3, [r5, #4]
 8012540:	2e04      	cmp	r6, #4
 8012542:	d074      	beq.n	801262e <ucdr_serialize_uint64_t+0x16e>
 8012544:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012548:	716b      	strb	r3, [r5, #5]
 801254a:	2e05      	cmp	r6, #5
 801254c:	d073      	beq.n	8012636 <ucdr_serialize_uint64_t+0x176>
 801254e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012552:	71ab      	strb	r3, [r5, #6]
 8012554:	2e06      	cmp	r6, #6
 8012556:	d072      	beq.n	801263e <ucdr_serialize_uint64_t+0x17e>
 8012558:	f89d 3000 	ldrb.w	r3, [sp]
 801255c:	71eb      	strb	r3, [r5, #7]
 801255e:	6923      	ldr	r3, [r4, #16]
 8012560:	68a2      	ldr	r2, [r4, #8]
 8012562:	7da0      	ldrb	r0, [r4, #22]
 8012564:	3308      	adds	r3, #8
 8012566:	1b9e      	subs	r6, r3, r6
 8012568:	4442      	add	r2, r8
 801256a:	2308      	movs	r3, #8
 801256c:	f080 0001 	eor.w	r0, r0, #1
 8012570:	60a2      	str	r2, [r4, #8]
 8012572:	6126      	str	r6, [r4, #16]
 8012574:	7563      	strb	r3, [r4, #21]
 8012576:	b002      	add	sp, #8
 8012578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801257c:	2108      	movs	r1, #8
 801257e:	4620      	mov	r0, r4
 8012580:	f000 fa96 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8012584:	b350      	cbz	r0, 80125dc <ucdr_serialize_uint64_t+0x11c>
 8012586:	7d23      	ldrb	r3, [r4, #20]
 8012588:	2b01      	cmp	r3, #1
 801258a:	d02d      	beq.n	80125e8 <ucdr_serialize_uint64_t+0x128>
 801258c:	68a3      	ldr	r3, [r4, #8]
 801258e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012592:	701a      	strb	r2, [r3, #0]
 8012594:	68a3      	ldr	r3, [r4, #8]
 8012596:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801259a:	705a      	strb	r2, [r3, #1]
 801259c:	68a3      	ldr	r3, [r4, #8]
 801259e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125a2:	709a      	strb	r2, [r3, #2]
 80125a4:	68a3      	ldr	r3, [r4, #8]
 80125a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125aa:	70da      	strb	r2, [r3, #3]
 80125ac:	68a3      	ldr	r3, [r4, #8]
 80125ae:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80125b2:	711a      	strb	r2, [r3, #4]
 80125b4:	68a3      	ldr	r3, [r4, #8]
 80125b6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80125ba:	715a      	strb	r2, [r3, #5]
 80125bc:	68a3      	ldr	r3, [r4, #8]
 80125be:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80125c2:	719a      	strb	r2, [r3, #6]
 80125c4:	68a3      	ldr	r3, [r4, #8]
 80125c6:	f89d 2000 	ldrb.w	r2, [sp]
 80125ca:	71da      	strb	r2, [r3, #7]
 80125cc:	68a2      	ldr	r2, [r4, #8]
 80125ce:	6923      	ldr	r3, [r4, #16]
 80125d0:	3208      	adds	r2, #8
 80125d2:	3308      	adds	r3, #8
 80125d4:	2108      	movs	r1, #8
 80125d6:	60a2      	str	r2, [r4, #8]
 80125d8:	6123      	str	r3, [r4, #16]
 80125da:	7561      	strb	r1, [r4, #21]
 80125dc:	7da0      	ldrb	r0, [r4, #22]
 80125de:	f080 0001 	eor.w	r0, r0, #1
 80125e2:	b002      	add	sp, #8
 80125e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125e8:	466b      	mov	r3, sp
 80125ea:	cb03      	ldmia	r3!, {r0, r1}
 80125ec:	68a3      	ldr	r3, [r4, #8]
 80125ee:	6018      	str	r0, [r3, #0]
 80125f0:	6059      	str	r1, [r3, #4]
 80125f2:	e7eb      	b.n	80125cc <ucdr_serialize_uint64_t+0x10c>
 80125f4:	68a2      	ldr	r2, [r4, #8]
 80125f6:	6923      	ldr	r3, [r4, #16]
 80125f8:	7da0      	ldrb	r0, [r4, #22]
 80125fa:	7567      	strb	r7, [r4, #21]
 80125fc:	1b92      	subs	r2, r2, r6
 80125fe:	1b9b      	subs	r3, r3, r6
 8012600:	f080 0001 	eor.w	r0, r0, #1
 8012604:	60a2      	str	r2, [r4, #8]
 8012606:	6123      	str	r3, [r4, #16]
 8012608:	b002      	add	sp, #8
 801260a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801260e:	68a3      	ldr	r3, [r4, #8]
 8012610:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012614:	701a      	strb	r2, [r3, #0]
 8012616:	68a3      	ldr	r3, [r4, #8]
 8012618:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801261c:	701a      	strb	r2, [r3, #0]
 801261e:	68a3      	ldr	r3, [r4, #8]
 8012620:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012624:	701a      	strb	r2, [r3, #0]
 8012626:	68a3      	ldr	r3, [r4, #8]
 8012628:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801262c:	701a      	strb	r2, [r3, #0]
 801262e:	68a3      	ldr	r3, [r4, #8]
 8012630:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012634:	701a      	strb	r2, [r3, #0]
 8012636:	68a3      	ldr	r3, [r4, #8]
 8012638:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801263c:	701a      	strb	r2, [r3, #0]
 801263e:	68a3      	ldr	r3, [r4, #8]
 8012640:	f89d 2000 	ldrb.w	r2, [sp]
 8012644:	701a      	strb	r2, [r3, #0]
 8012646:	e78a      	b.n	801255e <ucdr_serialize_uint64_t+0x9e>
 8012648:	4628      	mov	r0, r5
 801264a:	466d      	mov	r5, sp
 801264c:	4629      	mov	r1, r5
 801264e:	4632      	mov	r2, r6
 8012650:	f00a fc03 	bl	801ce5a <memcpy>
 8012654:	68a0      	ldr	r0, [r4, #8]
 8012656:	4642      	mov	r2, r8
 8012658:	19a9      	adds	r1, r5, r6
 801265a:	f00a fbfe 	bl	801ce5a <memcpy>
 801265e:	e77e      	b.n	801255e <ucdr_serialize_uint64_t+0x9e>

08012660 <ucdr_serialize_int16_t>:
 8012660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012664:	b082      	sub	sp, #8
 8012666:	460b      	mov	r3, r1
 8012668:	2102      	movs	r1, #2
 801266a:	4604      	mov	r4, r0
 801266c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012670:	f000 fa72 	bl	8012b58 <ucdr_buffer_alignment>
 8012674:	4601      	mov	r1, r0
 8012676:	4620      	mov	r0, r4
 8012678:	7d67      	ldrb	r7, [r4, #21]
 801267a:	f000 fab1 	bl	8012be0 <ucdr_advance_buffer>
 801267e:	2102      	movs	r1, #2
 8012680:	4620      	mov	r0, r4
 8012682:	f000 fa09 	bl	8012a98 <ucdr_check_buffer_available_for>
 8012686:	bb78      	cbnz	r0, 80126e8 <ucdr_serialize_int16_t+0x88>
 8012688:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801268c:	42ab      	cmp	r3, r5
 801268e:	d926      	bls.n	80126de <ucdr_serialize_int16_t+0x7e>
 8012690:	1b5e      	subs	r6, r3, r5
 8012692:	60a3      	str	r3, [r4, #8]
 8012694:	6923      	ldr	r3, [r4, #16]
 8012696:	f1c6 0802 	rsb	r8, r6, #2
 801269a:	4433      	add	r3, r6
 801269c:	6123      	str	r3, [r4, #16]
 801269e:	4641      	mov	r1, r8
 80126a0:	4620      	mov	r0, r4
 80126a2:	f000 fa05 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 80126a6:	2800      	cmp	r0, #0
 80126a8:	d03b      	beq.n	8012722 <ucdr_serialize_int16_t+0xc2>
 80126aa:	7d23      	ldrb	r3, [r4, #20]
 80126ac:	2b01      	cmp	r3, #1
 80126ae:	d04a      	beq.n	8012746 <ucdr_serialize_int16_t+0xe6>
 80126b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80126b4:	702b      	strb	r3, [r5, #0]
 80126b6:	2e00      	cmp	r6, #0
 80126b8:	d040      	beq.n	801273c <ucdr_serialize_int16_t+0xdc>
 80126ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80126be:	706b      	strb	r3, [r5, #1]
 80126c0:	6923      	ldr	r3, [r4, #16]
 80126c2:	68a2      	ldr	r2, [r4, #8]
 80126c4:	7da0      	ldrb	r0, [r4, #22]
 80126c6:	3302      	adds	r3, #2
 80126c8:	1b9e      	subs	r6, r3, r6
 80126ca:	4442      	add	r2, r8
 80126cc:	2302      	movs	r3, #2
 80126ce:	f080 0001 	eor.w	r0, r0, #1
 80126d2:	60a2      	str	r2, [r4, #8]
 80126d4:	6126      	str	r6, [r4, #16]
 80126d6:	7563      	strb	r3, [r4, #21]
 80126d8:	b002      	add	sp, #8
 80126da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126de:	2102      	movs	r1, #2
 80126e0:	4620      	mov	r0, r4
 80126e2:	f000 f9e5 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 80126e6:	b190      	cbz	r0, 801270e <ucdr_serialize_int16_t+0xae>
 80126e8:	7d23      	ldrb	r3, [r4, #20]
 80126ea:	2b01      	cmp	r3, #1
 80126ec:	68a3      	ldr	r3, [r4, #8]
 80126ee:	d014      	beq.n	801271a <ucdr_serialize_int16_t+0xba>
 80126f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80126f4:	701a      	strb	r2, [r3, #0]
 80126f6:	68a3      	ldr	r3, [r4, #8]
 80126f8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80126fc:	705a      	strb	r2, [r3, #1]
 80126fe:	68a2      	ldr	r2, [r4, #8]
 8012700:	6923      	ldr	r3, [r4, #16]
 8012702:	3202      	adds	r2, #2
 8012704:	3302      	adds	r3, #2
 8012706:	2102      	movs	r1, #2
 8012708:	60a2      	str	r2, [r4, #8]
 801270a:	6123      	str	r3, [r4, #16]
 801270c:	7561      	strb	r1, [r4, #21]
 801270e:	7da0      	ldrb	r0, [r4, #22]
 8012710:	f080 0001 	eor.w	r0, r0, #1
 8012714:	b002      	add	sp, #8
 8012716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801271a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801271e:	801a      	strh	r2, [r3, #0]
 8012720:	e7ed      	b.n	80126fe <ucdr_serialize_int16_t+0x9e>
 8012722:	68a2      	ldr	r2, [r4, #8]
 8012724:	6923      	ldr	r3, [r4, #16]
 8012726:	7da0      	ldrb	r0, [r4, #22]
 8012728:	7567      	strb	r7, [r4, #21]
 801272a:	1b92      	subs	r2, r2, r6
 801272c:	1b9b      	subs	r3, r3, r6
 801272e:	f080 0001 	eor.w	r0, r0, #1
 8012732:	60a2      	str	r2, [r4, #8]
 8012734:	6123      	str	r3, [r4, #16]
 8012736:	b002      	add	sp, #8
 8012738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801273c:	68a3      	ldr	r3, [r4, #8]
 801273e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012742:	701a      	strb	r2, [r3, #0]
 8012744:	e7bc      	b.n	80126c0 <ucdr_serialize_int16_t+0x60>
 8012746:	4628      	mov	r0, r5
 8012748:	f10d 0506 	add.w	r5, sp, #6
 801274c:	4629      	mov	r1, r5
 801274e:	4632      	mov	r2, r6
 8012750:	f00a fb83 	bl	801ce5a <memcpy>
 8012754:	68a0      	ldr	r0, [r4, #8]
 8012756:	4642      	mov	r2, r8
 8012758:	19a9      	adds	r1, r5, r6
 801275a:	f00a fb7e 	bl	801ce5a <memcpy>
 801275e:	e7af      	b.n	80126c0 <ucdr_serialize_int16_t+0x60>

08012760 <ucdr_deserialize_int16_t>:
 8012760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012764:	460d      	mov	r5, r1
 8012766:	2102      	movs	r1, #2
 8012768:	4604      	mov	r4, r0
 801276a:	f000 f9f5 	bl	8012b58 <ucdr_buffer_alignment>
 801276e:	4601      	mov	r1, r0
 8012770:	4620      	mov	r0, r4
 8012772:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012776:	f000 fa33 	bl	8012be0 <ucdr_advance_buffer>
 801277a:	2102      	movs	r1, #2
 801277c:	4620      	mov	r0, r4
 801277e:	f000 f98b 	bl	8012a98 <ucdr_check_buffer_available_for>
 8012782:	bb60      	cbnz	r0, 80127de <ucdr_deserialize_int16_t+0x7e>
 8012784:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012788:	42be      	cmp	r6, r7
 801278a:	d923      	bls.n	80127d4 <ucdr_deserialize_int16_t+0x74>
 801278c:	6923      	ldr	r3, [r4, #16]
 801278e:	60a6      	str	r6, [r4, #8]
 8012790:	1bf6      	subs	r6, r6, r7
 8012792:	4433      	add	r3, r6
 8012794:	f1c6 0902 	rsb	r9, r6, #2
 8012798:	6123      	str	r3, [r4, #16]
 801279a:	4649      	mov	r1, r9
 801279c:	4620      	mov	r0, r4
 801279e:	f000 f987 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 80127a2:	2800      	cmp	r0, #0
 80127a4:	d034      	beq.n	8012810 <ucdr_deserialize_int16_t+0xb0>
 80127a6:	7d23      	ldrb	r3, [r4, #20]
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	d042      	beq.n	8012832 <ucdr_deserialize_int16_t+0xd2>
 80127ac:	787b      	ldrb	r3, [r7, #1]
 80127ae:	702b      	strb	r3, [r5, #0]
 80127b0:	2e00      	cmp	r6, #0
 80127b2:	d03a      	beq.n	801282a <ucdr_deserialize_int16_t+0xca>
 80127b4:	783b      	ldrb	r3, [r7, #0]
 80127b6:	706b      	strb	r3, [r5, #1]
 80127b8:	6923      	ldr	r3, [r4, #16]
 80127ba:	68a2      	ldr	r2, [r4, #8]
 80127bc:	7da0      	ldrb	r0, [r4, #22]
 80127be:	2102      	movs	r1, #2
 80127c0:	3302      	adds	r3, #2
 80127c2:	444a      	add	r2, r9
 80127c4:	1b9b      	subs	r3, r3, r6
 80127c6:	7561      	strb	r1, [r4, #21]
 80127c8:	60a2      	str	r2, [r4, #8]
 80127ca:	6123      	str	r3, [r4, #16]
 80127cc:	f080 0001 	eor.w	r0, r0, #1
 80127d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127d4:	2102      	movs	r1, #2
 80127d6:	4620      	mov	r0, r4
 80127d8:	f000 f96a 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 80127dc:	b180      	cbz	r0, 8012800 <ucdr_deserialize_int16_t+0xa0>
 80127de:	7d23      	ldrb	r3, [r4, #20]
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	68a3      	ldr	r3, [r4, #8]
 80127e4:	d011      	beq.n	801280a <ucdr_deserialize_int16_t+0xaa>
 80127e6:	785b      	ldrb	r3, [r3, #1]
 80127e8:	702b      	strb	r3, [r5, #0]
 80127ea:	68a3      	ldr	r3, [r4, #8]
 80127ec:	781b      	ldrb	r3, [r3, #0]
 80127ee:	706b      	strb	r3, [r5, #1]
 80127f0:	68a2      	ldr	r2, [r4, #8]
 80127f2:	6923      	ldr	r3, [r4, #16]
 80127f4:	3202      	adds	r2, #2
 80127f6:	3302      	adds	r3, #2
 80127f8:	2102      	movs	r1, #2
 80127fa:	60a2      	str	r2, [r4, #8]
 80127fc:	6123      	str	r3, [r4, #16]
 80127fe:	7561      	strb	r1, [r4, #21]
 8012800:	7da0      	ldrb	r0, [r4, #22]
 8012802:	f080 0001 	eor.w	r0, r0, #1
 8012806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801280a:	881b      	ldrh	r3, [r3, #0]
 801280c:	802b      	strh	r3, [r5, #0]
 801280e:	e7ef      	b.n	80127f0 <ucdr_deserialize_int16_t+0x90>
 8012810:	68a2      	ldr	r2, [r4, #8]
 8012812:	6923      	ldr	r3, [r4, #16]
 8012814:	7da0      	ldrb	r0, [r4, #22]
 8012816:	f884 8015 	strb.w	r8, [r4, #21]
 801281a:	1b92      	subs	r2, r2, r6
 801281c:	1b9b      	subs	r3, r3, r6
 801281e:	60a2      	str	r2, [r4, #8]
 8012820:	6123      	str	r3, [r4, #16]
 8012822:	f080 0001 	eor.w	r0, r0, #1
 8012826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801282a:	68a3      	ldr	r3, [r4, #8]
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	706b      	strb	r3, [r5, #1]
 8012830:	e7c2      	b.n	80127b8 <ucdr_deserialize_int16_t+0x58>
 8012832:	4639      	mov	r1, r7
 8012834:	4632      	mov	r2, r6
 8012836:	4628      	mov	r0, r5
 8012838:	f00a fb0f 	bl	801ce5a <memcpy>
 801283c:	68a1      	ldr	r1, [r4, #8]
 801283e:	464a      	mov	r2, r9
 8012840:	19a8      	adds	r0, r5, r6
 8012842:	f00a fb0a 	bl	801ce5a <memcpy>
 8012846:	e7b7      	b.n	80127b8 <ucdr_deserialize_int16_t+0x58>

08012848 <ucdr_serialize_int32_t>:
 8012848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801284c:	b082      	sub	sp, #8
 801284e:	4604      	mov	r4, r0
 8012850:	9101      	str	r1, [sp, #4]
 8012852:	2104      	movs	r1, #4
 8012854:	f000 f980 	bl	8012b58 <ucdr_buffer_alignment>
 8012858:	4601      	mov	r1, r0
 801285a:	4620      	mov	r0, r4
 801285c:	7d67      	ldrb	r7, [r4, #21]
 801285e:	f000 f9bf 	bl	8012be0 <ucdr_advance_buffer>
 8012862:	2104      	movs	r1, #4
 8012864:	4620      	mov	r0, r4
 8012866:	f000 f917 	bl	8012a98 <ucdr_check_buffer_available_for>
 801286a:	2800      	cmp	r0, #0
 801286c:	d139      	bne.n	80128e2 <ucdr_serialize_int32_t+0x9a>
 801286e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012872:	42ab      	cmp	r3, r5
 8012874:	d930      	bls.n	80128d8 <ucdr_serialize_int32_t+0x90>
 8012876:	1b5e      	subs	r6, r3, r5
 8012878:	60a3      	str	r3, [r4, #8]
 801287a:	6923      	ldr	r3, [r4, #16]
 801287c:	f1c6 0804 	rsb	r8, r6, #4
 8012880:	4433      	add	r3, r6
 8012882:	6123      	str	r3, [r4, #16]
 8012884:	4641      	mov	r1, r8
 8012886:	4620      	mov	r0, r4
 8012888:	f000 f912 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 801288c:	2800      	cmp	r0, #0
 801288e:	d04c      	beq.n	801292a <ucdr_serialize_int32_t+0xe2>
 8012890:	7d23      	ldrb	r3, [r4, #20]
 8012892:	2b01      	cmp	r3, #1
 8012894:	d063      	beq.n	801295e <ucdr_serialize_int32_t+0x116>
 8012896:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801289a:	702b      	strb	r3, [r5, #0]
 801289c:	2e00      	cmp	r6, #0
 801289e:	d051      	beq.n	8012944 <ucdr_serialize_int32_t+0xfc>
 80128a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80128a4:	706b      	strb	r3, [r5, #1]
 80128a6:	2e01      	cmp	r6, #1
 80128a8:	d050      	beq.n	801294c <ucdr_serialize_int32_t+0x104>
 80128aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80128ae:	70ab      	strb	r3, [r5, #2]
 80128b0:	2e02      	cmp	r6, #2
 80128b2:	d04f      	beq.n	8012954 <ucdr_serialize_int32_t+0x10c>
 80128b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80128b8:	70eb      	strb	r3, [r5, #3]
 80128ba:	6923      	ldr	r3, [r4, #16]
 80128bc:	68a2      	ldr	r2, [r4, #8]
 80128be:	7da0      	ldrb	r0, [r4, #22]
 80128c0:	3304      	adds	r3, #4
 80128c2:	1b9e      	subs	r6, r3, r6
 80128c4:	4442      	add	r2, r8
 80128c6:	2304      	movs	r3, #4
 80128c8:	f080 0001 	eor.w	r0, r0, #1
 80128cc:	60a2      	str	r2, [r4, #8]
 80128ce:	6126      	str	r6, [r4, #16]
 80128d0:	7563      	strb	r3, [r4, #21]
 80128d2:	b002      	add	sp, #8
 80128d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128d8:	2104      	movs	r1, #4
 80128da:	4620      	mov	r0, r4
 80128dc:	f000 f8e8 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 80128e0:	b1d0      	cbz	r0, 8012918 <ucdr_serialize_int32_t+0xd0>
 80128e2:	7d23      	ldrb	r3, [r4, #20]
 80128e4:	2b01      	cmp	r3, #1
 80128e6:	68a3      	ldr	r3, [r4, #8]
 80128e8:	d01c      	beq.n	8012924 <ucdr_serialize_int32_t+0xdc>
 80128ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80128ee:	701a      	strb	r2, [r3, #0]
 80128f0:	68a3      	ldr	r3, [r4, #8]
 80128f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80128f6:	705a      	strb	r2, [r3, #1]
 80128f8:	68a3      	ldr	r3, [r4, #8]
 80128fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80128fe:	709a      	strb	r2, [r3, #2]
 8012900:	68a3      	ldr	r3, [r4, #8]
 8012902:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012906:	70da      	strb	r2, [r3, #3]
 8012908:	68a2      	ldr	r2, [r4, #8]
 801290a:	6923      	ldr	r3, [r4, #16]
 801290c:	3204      	adds	r2, #4
 801290e:	3304      	adds	r3, #4
 8012910:	2104      	movs	r1, #4
 8012912:	60a2      	str	r2, [r4, #8]
 8012914:	6123      	str	r3, [r4, #16]
 8012916:	7561      	strb	r1, [r4, #21]
 8012918:	7da0      	ldrb	r0, [r4, #22]
 801291a:	f080 0001 	eor.w	r0, r0, #1
 801291e:	b002      	add	sp, #8
 8012920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012924:	9a01      	ldr	r2, [sp, #4]
 8012926:	601a      	str	r2, [r3, #0]
 8012928:	e7ee      	b.n	8012908 <ucdr_serialize_int32_t+0xc0>
 801292a:	68a2      	ldr	r2, [r4, #8]
 801292c:	6923      	ldr	r3, [r4, #16]
 801292e:	7da0      	ldrb	r0, [r4, #22]
 8012930:	7567      	strb	r7, [r4, #21]
 8012932:	1b92      	subs	r2, r2, r6
 8012934:	1b9b      	subs	r3, r3, r6
 8012936:	f080 0001 	eor.w	r0, r0, #1
 801293a:	60a2      	str	r2, [r4, #8]
 801293c:	6123      	str	r3, [r4, #16]
 801293e:	b002      	add	sp, #8
 8012940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012944:	68a3      	ldr	r3, [r4, #8]
 8012946:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801294a:	701a      	strb	r2, [r3, #0]
 801294c:	68a3      	ldr	r3, [r4, #8]
 801294e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012952:	701a      	strb	r2, [r3, #0]
 8012954:	68a3      	ldr	r3, [r4, #8]
 8012956:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801295a:	701a      	strb	r2, [r3, #0]
 801295c:	e7ad      	b.n	80128ba <ucdr_serialize_int32_t+0x72>
 801295e:	4628      	mov	r0, r5
 8012960:	ad01      	add	r5, sp, #4
 8012962:	4629      	mov	r1, r5
 8012964:	4632      	mov	r2, r6
 8012966:	f00a fa78 	bl	801ce5a <memcpy>
 801296a:	68a0      	ldr	r0, [r4, #8]
 801296c:	4642      	mov	r2, r8
 801296e:	19a9      	adds	r1, r5, r6
 8012970:	f00a fa73 	bl	801ce5a <memcpy>
 8012974:	e7a1      	b.n	80128ba <ucdr_serialize_int32_t+0x72>
 8012976:	bf00      	nop

08012978 <ucdr_deserialize_int32_t>:
 8012978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801297c:	460d      	mov	r5, r1
 801297e:	2104      	movs	r1, #4
 8012980:	4604      	mov	r4, r0
 8012982:	f000 f8e9 	bl	8012b58 <ucdr_buffer_alignment>
 8012986:	4601      	mov	r1, r0
 8012988:	4620      	mov	r0, r4
 801298a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801298e:	f000 f927 	bl	8012be0 <ucdr_advance_buffer>
 8012992:	2104      	movs	r1, #4
 8012994:	4620      	mov	r0, r4
 8012996:	f000 f87f 	bl	8012a98 <ucdr_check_buffer_available_for>
 801299a:	2800      	cmp	r0, #0
 801299c:	d138      	bne.n	8012a10 <ucdr_deserialize_int32_t+0x98>
 801299e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80129a2:	42b7      	cmp	r7, r6
 80129a4:	d92f      	bls.n	8012a06 <ucdr_deserialize_int32_t+0x8e>
 80129a6:	6923      	ldr	r3, [r4, #16]
 80129a8:	60a7      	str	r7, [r4, #8]
 80129aa:	1bbf      	subs	r7, r7, r6
 80129ac:	443b      	add	r3, r7
 80129ae:	f1c7 0904 	rsb	r9, r7, #4
 80129b2:	6123      	str	r3, [r4, #16]
 80129b4:	4649      	mov	r1, r9
 80129b6:	4620      	mov	r0, r4
 80129b8:	f000 f87a 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 80129bc:	2800      	cmp	r0, #0
 80129be:	d046      	beq.n	8012a4e <ucdr_deserialize_int32_t+0xd6>
 80129c0:	7d23      	ldrb	r3, [r4, #20]
 80129c2:	2b01      	cmp	r3, #1
 80129c4:	d05c      	beq.n	8012a80 <ucdr_deserialize_int32_t+0x108>
 80129c6:	78f3      	ldrb	r3, [r6, #3]
 80129c8:	702b      	strb	r3, [r5, #0]
 80129ca:	2f00      	cmp	r7, #0
 80129cc:	d04c      	beq.n	8012a68 <ucdr_deserialize_int32_t+0xf0>
 80129ce:	78b3      	ldrb	r3, [r6, #2]
 80129d0:	706b      	strb	r3, [r5, #1]
 80129d2:	2f01      	cmp	r7, #1
 80129d4:	f105 0302 	add.w	r3, r5, #2
 80129d8:	d04a      	beq.n	8012a70 <ucdr_deserialize_int32_t+0xf8>
 80129da:	7873      	ldrb	r3, [r6, #1]
 80129dc:	70ab      	strb	r3, [r5, #2]
 80129de:	2f02      	cmp	r7, #2
 80129e0:	f105 0303 	add.w	r3, r5, #3
 80129e4:	d048      	beq.n	8012a78 <ucdr_deserialize_int32_t+0x100>
 80129e6:	7833      	ldrb	r3, [r6, #0]
 80129e8:	70eb      	strb	r3, [r5, #3]
 80129ea:	6923      	ldr	r3, [r4, #16]
 80129ec:	68a2      	ldr	r2, [r4, #8]
 80129ee:	7da0      	ldrb	r0, [r4, #22]
 80129f0:	2104      	movs	r1, #4
 80129f2:	3304      	adds	r3, #4
 80129f4:	444a      	add	r2, r9
 80129f6:	1bdb      	subs	r3, r3, r7
 80129f8:	7561      	strb	r1, [r4, #21]
 80129fa:	60a2      	str	r2, [r4, #8]
 80129fc:	6123      	str	r3, [r4, #16]
 80129fe:	f080 0001 	eor.w	r0, r0, #1
 8012a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a06:	2104      	movs	r1, #4
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f000 f851 	bl	8012ab0 <ucdr_check_final_buffer_behavior>
 8012a0e:	b1b0      	cbz	r0, 8012a3e <ucdr_deserialize_int32_t+0xc6>
 8012a10:	7d23      	ldrb	r3, [r4, #20]
 8012a12:	2b01      	cmp	r3, #1
 8012a14:	68a3      	ldr	r3, [r4, #8]
 8012a16:	d017      	beq.n	8012a48 <ucdr_deserialize_int32_t+0xd0>
 8012a18:	78db      	ldrb	r3, [r3, #3]
 8012a1a:	702b      	strb	r3, [r5, #0]
 8012a1c:	68a3      	ldr	r3, [r4, #8]
 8012a1e:	789b      	ldrb	r3, [r3, #2]
 8012a20:	706b      	strb	r3, [r5, #1]
 8012a22:	68a3      	ldr	r3, [r4, #8]
 8012a24:	785b      	ldrb	r3, [r3, #1]
 8012a26:	70ab      	strb	r3, [r5, #2]
 8012a28:	68a3      	ldr	r3, [r4, #8]
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	70eb      	strb	r3, [r5, #3]
 8012a2e:	68a2      	ldr	r2, [r4, #8]
 8012a30:	6923      	ldr	r3, [r4, #16]
 8012a32:	3204      	adds	r2, #4
 8012a34:	3304      	adds	r3, #4
 8012a36:	2104      	movs	r1, #4
 8012a38:	60a2      	str	r2, [r4, #8]
 8012a3a:	6123      	str	r3, [r4, #16]
 8012a3c:	7561      	strb	r1, [r4, #21]
 8012a3e:	7da0      	ldrb	r0, [r4, #22]
 8012a40:	f080 0001 	eor.w	r0, r0, #1
 8012a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	602b      	str	r3, [r5, #0]
 8012a4c:	e7ef      	b.n	8012a2e <ucdr_deserialize_int32_t+0xb6>
 8012a4e:	68a2      	ldr	r2, [r4, #8]
 8012a50:	6923      	ldr	r3, [r4, #16]
 8012a52:	7da0      	ldrb	r0, [r4, #22]
 8012a54:	f884 8015 	strb.w	r8, [r4, #21]
 8012a58:	1bd2      	subs	r2, r2, r7
 8012a5a:	1bdb      	subs	r3, r3, r7
 8012a5c:	60a2      	str	r2, [r4, #8]
 8012a5e:	6123      	str	r3, [r4, #16]
 8012a60:	f080 0001 	eor.w	r0, r0, #1
 8012a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a68:	68a3      	ldr	r3, [r4, #8]
 8012a6a:	789b      	ldrb	r3, [r3, #2]
 8012a6c:	706b      	strb	r3, [r5, #1]
 8012a6e:	1cab      	adds	r3, r5, #2
 8012a70:	68a2      	ldr	r2, [r4, #8]
 8012a72:	7852      	ldrb	r2, [r2, #1]
 8012a74:	f803 2b01 	strb.w	r2, [r3], #1
 8012a78:	68a2      	ldr	r2, [r4, #8]
 8012a7a:	7812      	ldrb	r2, [r2, #0]
 8012a7c:	701a      	strb	r2, [r3, #0]
 8012a7e:	e7b4      	b.n	80129ea <ucdr_deserialize_int32_t+0x72>
 8012a80:	4631      	mov	r1, r6
 8012a82:	463a      	mov	r2, r7
 8012a84:	4628      	mov	r0, r5
 8012a86:	f00a f9e8 	bl	801ce5a <memcpy>
 8012a8a:	68a1      	ldr	r1, [r4, #8]
 8012a8c:	464a      	mov	r2, r9
 8012a8e:	19e8      	adds	r0, r5, r7
 8012a90:	f00a f9e3 	bl	801ce5a <memcpy>
 8012a94:	e7a9      	b.n	80129ea <ucdr_deserialize_int32_t+0x72>
 8012a96:	bf00      	nop

08012a98 <ucdr_check_buffer_available_for>:
 8012a98:	7d83      	ldrb	r3, [r0, #22]
 8012a9a:	b93b      	cbnz	r3, 8012aac <ucdr_check_buffer_available_for+0x14>
 8012a9c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8012aa0:	4419      	add	r1, r3
 8012aa2:	4288      	cmp	r0, r1
 8012aa4:	bf34      	ite	cc
 8012aa6:	2000      	movcc	r0, #0
 8012aa8:	2001      	movcs	r0, #1
 8012aaa:	4770      	bx	lr
 8012aac:	2000      	movs	r0, #0
 8012aae:	4770      	bx	lr

08012ab0 <ucdr_check_final_buffer_behavior>:
 8012ab0:	7d83      	ldrb	r3, [r0, #22]
 8012ab2:	b943      	cbnz	r3, 8012ac6 <ucdr_check_final_buffer_behavior+0x16>
 8012ab4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8012ab8:	4291      	cmp	r1, r2
 8012aba:	b510      	push	{r4, lr}
 8012abc:	4604      	mov	r4, r0
 8012abe:	d205      	bcs.n	8012acc <ucdr_check_final_buffer_behavior+0x1c>
 8012ac0:	2301      	movs	r3, #1
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	bd10      	pop	{r4, pc}
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	4618      	mov	r0, r3
 8012aca:	4770      	bx	lr
 8012acc:	6982      	ldr	r2, [r0, #24]
 8012ace:	b13a      	cbz	r2, 8012ae0 <ucdr_check_final_buffer_behavior+0x30>
 8012ad0:	69c1      	ldr	r1, [r0, #28]
 8012ad2:	4790      	blx	r2
 8012ad4:	f080 0301 	eor.w	r3, r0, #1
 8012ad8:	b2db      	uxtb	r3, r3
 8012ada:	75a0      	strb	r0, [r4, #22]
 8012adc:	4618      	mov	r0, r3
 8012ade:	bd10      	pop	{r4, pc}
 8012ae0:	2001      	movs	r0, #1
 8012ae2:	75a0      	strb	r0, [r4, #22]
 8012ae4:	e7fa      	b.n	8012adc <ucdr_check_final_buffer_behavior+0x2c>
 8012ae6:	bf00      	nop

08012ae8 <ucdr_set_on_full_buffer_callback>:
 8012ae8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop

08012af0 <ucdr_init_buffer_origin_offset_endian>:
 8012af0:	b410      	push	{r4}
 8012af2:	9c01      	ldr	r4, [sp, #4]
 8012af4:	6001      	str	r1, [r0, #0]
 8012af6:	440a      	add	r2, r1
 8012af8:	6042      	str	r2, [r0, #4]
 8012afa:	190a      	adds	r2, r1, r4
 8012afc:	441c      	add	r4, r3
 8012afe:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8012b02:	6082      	str	r2, [r0, #8]
 8012b04:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012b08:	7503      	strb	r3, [r0, #20]
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8012b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b14:	7542      	strb	r2, [r0, #21]
 8012b16:	7582      	strb	r2, [r0, #22]
 8012b18:	4770      	bx	lr
 8012b1a:	bf00      	nop

08012b1c <ucdr_init_buffer_origin_offset>:
 8012b1c:	b510      	push	{r4, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	9c04      	ldr	r4, [sp, #16]
 8012b22:	9400      	str	r4, [sp, #0]
 8012b24:	2401      	movs	r4, #1
 8012b26:	9401      	str	r4, [sp, #4]
 8012b28:	f7ff ffe2 	bl	8012af0 <ucdr_init_buffer_origin_offset_endian>
 8012b2c:	b002      	add	sp, #8
 8012b2e:	bd10      	pop	{r4, pc}

08012b30 <ucdr_init_buffer_origin>:
 8012b30:	b510      	push	{r4, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	2400      	movs	r4, #0
 8012b36:	9400      	str	r4, [sp, #0]
 8012b38:	f7ff fff0 	bl	8012b1c <ucdr_init_buffer_origin_offset>
 8012b3c:	b002      	add	sp, #8
 8012b3e:	bd10      	pop	{r4, pc}

08012b40 <ucdr_init_buffer>:
 8012b40:	2300      	movs	r3, #0
 8012b42:	f7ff bff5 	b.w	8012b30 <ucdr_init_buffer_origin>
 8012b46:	bf00      	nop

08012b48 <ucdr_alignment>:
 8012b48:	fbb0 f3f1 	udiv	r3, r0, r1
 8012b4c:	fb03 0011 	mls	r0, r3, r1, r0
 8012b50:	1a08      	subs	r0, r1, r0
 8012b52:	3901      	subs	r1, #1
 8012b54:	4008      	ands	r0, r1
 8012b56:	4770      	bx	lr

08012b58 <ucdr_buffer_alignment>:
 8012b58:	7d43      	ldrb	r3, [r0, #21]
 8012b5a:	428b      	cmp	r3, r1
 8012b5c:	d208      	bcs.n	8012b70 <ucdr_buffer_alignment+0x18>
 8012b5e:	6900      	ldr	r0, [r0, #16]
 8012b60:	fbb0 f3f1 	udiv	r3, r0, r1
 8012b64:	fb01 0013 	mls	r0, r1, r3, r0
 8012b68:	1a08      	subs	r0, r1, r0
 8012b6a:	3901      	subs	r1, #1
 8012b6c:	4008      	ands	r0, r1
 8012b6e:	4770      	bx	lr
 8012b70:	2000      	movs	r0, #0
 8012b72:	4770      	bx	lr

08012b74 <ucdr_align_to>:
 8012b74:	b538      	push	{r3, r4, r5, lr}
 8012b76:	4604      	mov	r4, r0
 8012b78:	460d      	mov	r5, r1
 8012b7a:	f7ff ffed 	bl	8012b58 <ucdr_buffer_alignment>
 8012b7e:	68a3      	ldr	r3, [r4, #8]
 8012b80:	6921      	ldr	r1, [r4, #16]
 8012b82:	7565      	strb	r5, [r4, #21]
 8012b84:	181a      	adds	r2, r3, r0
 8012b86:	6863      	ldr	r3, [r4, #4]
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	4408      	add	r0, r1
 8012b8c:	bf28      	it	cs
 8012b8e:	4613      	movcs	r3, r2
 8012b90:	6120      	str	r0, [r4, #16]
 8012b92:	60a3      	str	r3, [r4, #8]
 8012b94:	bd38      	pop	{r3, r4, r5, pc}
 8012b96:	bf00      	nop

08012b98 <ucdr_buffer_length>:
 8012b98:	6882      	ldr	r2, [r0, #8]
 8012b9a:	6800      	ldr	r0, [r0, #0]
 8012b9c:	1a10      	subs	r0, r2, r0
 8012b9e:	4770      	bx	lr

08012ba0 <ucdr_buffer_remaining>:
 8012ba0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8012ba4:	1a10      	subs	r0, r2, r0
 8012ba6:	4770      	bx	lr

08012ba8 <ucdr_check_final_buffer_behavior_array>:
 8012ba8:	b538      	push	{r3, r4, r5, lr}
 8012baa:	7d83      	ldrb	r3, [r0, #22]
 8012bac:	b963      	cbnz	r3, 8012bc8 <ucdr_check_final_buffer_behavior_array+0x20>
 8012bae:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	460d      	mov	r5, r1
 8012bb8:	d308      	bcc.n	8012bcc <ucdr_check_final_buffer_behavior_array+0x24>
 8012bba:	b139      	cbz	r1, 8012bcc <ucdr_check_final_buffer_behavior_array+0x24>
 8012bbc:	6983      	ldr	r3, [r0, #24]
 8012bbe:	b163      	cbz	r3, 8012bda <ucdr_check_final_buffer_behavior_array+0x32>
 8012bc0:	69c1      	ldr	r1, [r0, #28]
 8012bc2:	4798      	blx	r3
 8012bc4:	75a0      	strb	r0, [r4, #22]
 8012bc6:	b108      	cbz	r0, 8012bcc <ucdr_check_final_buffer_behavior_array+0x24>
 8012bc8:	2000      	movs	r0, #0
 8012bca:	bd38      	pop	{r3, r4, r5, pc}
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f7ff ffe7 	bl	8012ba0 <ucdr_buffer_remaining>
 8012bd2:	42a8      	cmp	r0, r5
 8012bd4:	bf28      	it	cs
 8012bd6:	4628      	movcs	r0, r5
 8012bd8:	bd38      	pop	{r3, r4, r5, pc}
 8012bda:	2301      	movs	r3, #1
 8012bdc:	7583      	strb	r3, [r0, #22]
 8012bde:	e7f3      	b.n	8012bc8 <ucdr_check_final_buffer_behavior_array+0x20>

08012be0 <ucdr_advance_buffer>:
 8012be0:	b538      	push	{r3, r4, r5, lr}
 8012be2:	4604      	mov	r4, r0
 8012be4:	460d      	mov	r5, r1
 8012be6:	f7ff ff57 	bl	8012a98 <ucdr_check_buffer_available_for>
 8012bea:	b178      	cbz	r0, 8012c0c <ucdr_advance_buffer+0x2c>
 8012bec:	6923      	ldr	r3, [r4, #16]
 8012bee:	68a2      	ldr	r2, [r4, #8]
 8012bf0:	442b      	add	r3, r5
 8012bf2:	6123      	str	r3, [r4, #16]
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	442a      	add	r2, r5
 8012bf8:	7563      	strb	r3, [r4, #21]
 8012bfa:	60a2      	str	r2, [r4, #8]
 8012bfc:	bd38      	pop	{r3, r4, r5, pc}
 8012bfe:	68a2      	ldr	r2, [r4, #8]
 8012c00:	6923      	ldr	r3, [r4, #16]
 8012c02:	4402      	add	r2, r0
 8012c04:	4403      	add	r3, r0
 8012c06:	1a2d      	subs	r5, r5, r0
 8012c08:	60a2      	str	r2, [r4, #8]
 8012c0a:	6123      	str	r3, [r4, #16]
 8012c0c:	4629      	mov	r1, r5
 8012c0e:	2201      	movs	r2, #1
 8012c10:	4620      	mov	r0, r4
 8012c12:	f7ff ffc9 	bl	8012ba8 <ucdr_check_final_buffer_behavior_array>
 8012c16:	2800      	cmp	r0, #0
 8012c18:	d1f1      	bne.n	8012bfe <ucdr_advance_buffer+0x1e>
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	7563      	strb	r3, [r4, #21]
 8012c1e:	bd38      	pop	{r3, r4, r5, pc}

08012c20 <uxr_buffer_delete_entity>:
 8012c20:	b510      	push	{r4, lr}
 8012c22:	2300      	movs	r3, #0
 8012c24:	b08e      	sub	sp, #56	@ 0x38
 8012c26:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012c2a:	2303      	movs	r3, #3
 8012c2c:	9300      	str	r3, [sp, #0]
 8012c2e:	2204      	movs	r2, #4
 8012c30:	ab06      	add	r3, sp, #24
 8012c32:	4604      	mov	r4, r0
 8012c34:	9103      	str	r1, [sp, #12]
 8012c36:	f001 f951 	bl	8013edc <uxr_prepare_stream_to_write_submessage>
 8012c3a:	b918      	cbnz	r0, 8012c44 <uxr_buffer_delete_entity+0x24>
 8012c3c:	4604      	mov	r4, r0
 8012c3e:	4620      	mov	r0, r4
 8012c40:	b00e      	add	sp, #56	@ 0x38
 8012c42:	bd10      	pop	{r4, pc}
 8012c44:	9902      	ldr	r1, [sp, #8]
 8012c46:	aa05      	add	r2, sp, #20
 8012c48:	4620      	mov	r0, r4
 8012c4a:	f001 fa7d 	bl	8014148 <uxr_init_base_object_request>
 8012c4e:	a905      	add	r1, sp, #20
 8012c50:	4604      	mov	r4, r0
 8012c52:	a806      	add	r0, sp, #24
 8012c54:	f002 fcce 	bl	80155f4 <uxr_serialize_DELETE_Payload>
 8012c58:	4620      	mov	r0, r4
 8012c5a:	b00e      	add	sp, #56	@ 0x38
 8012c5c:	bd10      	pop	{r4, pc}
 8012c5e:	bf00      	nop

08012c60 <uxr_common_create_entity>:
 8012c60:	b510      	push	{r4, lr}
 8012c62:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012c66:	b08c      	sub	sp, #48	@ 0x30
 8012c68:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012c6c:	f1bc 0f01 	cmp.w	ip, #1
 8012c70:	bf0c      	ite	eq
 8012c72:	f003 0201 	andeq.w	r2, r3, #1
 8012c76:	2200      	movne	r2, #0
 8012c78:	330e      	adds	r3, #14
 8012c7a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8012c7e:	9101      	str	r1, [sp, #4]
 8012c80:	441a      	add	r2, r3
 8012c82:	2301      	movs	r3, #1
 8012c84:	9300      	str	r3, [sp, #0]
 8012c86:	9903      	ldr	r1, [sp, #12]
 8012c88:	ab04      	add	r3, sp, #16
 8012c8a:	b292      	uxth	r2, r2
 8012c8c:	4604      	mov	r4, r0
 8012c8e:	f001 f925 	bl	8013edc <uxr_prepare_stream_to_write_submessage>
 8012c92:	b918      	cbnz	r0, 8012c9c <uxr_common_create_entity+0x3c>
 8012c94:	4604      	mov	r4, r0
 8012c96:	4620      	mov	r0, r4
 8012c98:	b00c      	add	sp, #48	@ 0x30
 8012c9a:	bd10      	pop	{r4, pc}
 8012c9c:	9902      	ldr	r1, [sp, #8]
 8012c9e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	f001 fa51 	bl	8014148 <uxr_init_base_object_request>
 8012ca6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012ca8:	4604      	mov	r4, r0
 8012caa:	a804      	add	r0, sp, #16
 8012cac:	f002 fbfe 	bl	80154ac <uxr_serialize_CREATE_Payload>
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	b00c      	add	sp, #48	@ 0x30
 8012cb4:	bd10      	pop	{r4, pc}
 8012cb6:	bf00      	nop

08012cb8 <uxr_buffer_create_participant_bin>:
 8012cb8:	b570      	push	{r4, r5, r6, lr}
 8012cba:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8012cbe:	ac11      	add	r4, sp, #68	@ 0x44
 8012cc0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8012cc4:	2303      	movs	r3, #3
 8012cc6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012cca:	7223      	strb	r3, [r4, #8]
 8012ccc:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8012cce:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8012cd2:	2201      	movs	r2, #1
 8012cd4:	2100      	movs	r1, #0
 8012cd6:	4605      	mov	r5, r0
 8012cd8:	7122      	strb	r2, [r4, #4]
 8012cda:	f88d 1014 	strb.w	r1, [sp, #20]
 8012cde:	b1cb      	cbz	r3, 8012d14 <uxr_buffer_create_participant_bin+0x5c>
 8012ce0:	f88d 201c 	strb.w	r2, [sp, #28]
 8012ce4:	9308      	str	r3, [sp, #32]
 8012ce6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012cea:	a915      	add	r1, sp, #84	@ 0x54
 8012cec:	a809      	add	r0, sp, #36	@ 0x24
 8012cee:	f7ff ff27 	bl	8012b40 <ucdr_init_buffer>
 8012cf2:	a905      	add	r1, sp, #20
 8012cf4:	a809      	add	r0, sp, #36	@ 0x24
 8012cf6:	f001 ffbb 	bl	8014c70 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8012cfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012cfc:	9600      	str	r6, [sp, #0]
 8012cfe:	9401      	str	r4, [sp, #4]
 8012d00:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012d04:	60e3      	str	r3, [r4, #12]
 8012d06:	4628      	mov	r0, r5
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	f7ff ffa9 	bl	8012c60 <uxr_common_create_entity>
 8012d0e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8012d12:	bd70      	pop	{r4, r5, r6, pc}
 8012d14:	f88d 301c 	strb.w	r3, [sp, #28]
 8012d18:	e7e5      	b.n	8012ce6 <uxr_buffer_create_participant_bin+0x2e>
 8012d1a:	bf00      	nop

08012d1c <uxr_buffer_create_topic_bin>:
 8012d1c:	b570      	push	{r4, r5, r6, lr}
 8012d1e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8012d22:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012d26:	9105      	str	r1, [sp, #20]
 8012d28:	4605      	mov	r5, r0
 8012d2a:	a997      	add	r1, sp, #604	@ 0x25c
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	2302      	movs	r3, #2
 8012d30:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8012d34:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8012d38:	f000 f996 	bl	8013068 <uxr_object_id_to_raw>
 8012d3c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8012d3e:	9306      	str	r3, [sp, #24]
 8012d40:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8012d42:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d44:	2303      	movs	r3, #3
 8012d46:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d50:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012d54:	a917      	add	r1, sp, #92	@ 0x5c
 8012d56:	2300      	movs	r3, #0
 8012d58:	a80b      	add	r0, sp, #44	@ 0x2c
 8012d5a:	f88d 301c 	strb.w	r3, [sp, #28]
 8012d5e:	f7ff feef 	bl	8012b40 <ucdr_init_buffer>
 8012d62:	a906      	add	r1, sp, #24
 8012d64:	a80b      	add	r0, sp, #44	@ 0x2c
 8012d66:	f001 ffa5 	bl	8014cb4 <uxr_serialize_OBJK_Topic_Binary>
 8012d6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d6c:	9316      	str	r3, [sp, #88]	@ 0x58
 8012d6e:	ac13      	add	r4, sp, #76	@ 0x4c
 8012d70:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012d74:	9600      	str	r6, [sp, #0]
 8012d76:	9401      	str	r4, [sp, #4]
 8012d78:	b29b      	uxth	r3, r3
 8012d7a:	4628      	mov	r0, r5
 8012d7c:	f7ff ff70 	bl	8012c60 <uxr_common_create_entity>
 8012d80:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8012d84:	bd70      	pop	{r4, r5, r6, pc}
 8012d86:	bf00      	nop

08012d88 <uxr_buffer_create_publisher_bin>:
 8012d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d8a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8012d8e:	4605      	mov	r5, r0
 8012d90:	9105      	str	r1, [sp, #20]
 8012d92:	4618      	mov	r0, r3
 8012d94:	2603      	movs	r6, #3
 8012d96:	a992      	add	r1, sp, #584	@ 0x248
 8012d98:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012d9c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8012da0:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8012da4:	f000 f960 	bl	8013068 <uxr_object_id_to_raw>
 8012da8:	2300      	movs	r3, #0
 8012daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012dae:	a912      	add	r1, sp, #72	@ 0x48
 8012db0:	a806      	add	r0, sp, #24
 8012db2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012db6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012dba:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8012dbe:	f7ff febf 	bl	8012b40 <ucdr_init_buffer>
 8012dc2:	a993      	add	r1, sp, #588	@ 0x24c
 8012dc4:	a806      	add	r0, sp, #24
 8012dc6:	f002 f829 	bl	8014e1c <uxr_serialize_OBJK_Publisher_Binary>
 8012dca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012dcc:	9311      	str	r3, [sp, #68]	@ 0x44
 8012dce:	ac0e      	add	r4, sp, #56	@ 0x38
 8012dd0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012dd4:	9700      	str	r7, [sp, #0]
 8012dd6:	9401      	str	r4, [sp, #4]
 8012dd8:	b29b      	uxth	r3, r3
 8012dda:	4628      	mov	r0, r5
 8012ddc:	f7ff ff40 	bl	8012c60 <uxr_common_create_entity>
 8012de0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8012de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012de6:	bf00      	nop

08012de8 <uxr_buffer_create_subscriber_bin>:
 8012de8:	b570      	push	{r4, r5, r6, lr}
 8012dea:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8012dee:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012df2:	9105      	str	r1, [sp, #20]
 8012df4:	4605      	mov	r5, r0
 8012df6:	a992      	add	r1, sp, #584	@ 0x248
 8012df8:	4618      	mov	r0, r3
 8012dfa:	2304      	movs	r3, #4
 8012dfc:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8012e00:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8012e04:	f000 f930 	bl	8013068 <uxr_object_id_to_raw>
 8012e08:	2300      	movs	r3, #0
 8012e0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e0e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012e12:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012e16:	a912      	add	r1, sp, #72	@ 0x48
 8012e18:	2303      	movs	r3, #3
 8012e1a:	a806      	add	r0, sp, #24
 8012e1c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012e20:	f7ff fe8e 	bl	8012b40 <ucdr_init_buffer>
 8012e24:	a993      	add	r1, sp, #588	@ 0x24c
 8012e26:	a806      	add	r0, sp, #24
 8012e28:	f002 f8a8 	bl	8014f7c <uxr_serialize_OBJK_Subscriber_Binary>
 8012e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e2e:	9311      	str	r3, [sp, #68]	@ 0x44
 8012e30:	ac0e      	add	r4, sp, #56	@ 0x38
 8012e32:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012e36:	9600      	str	r6, [sp, #0]
 8012e38:	9401      	str	r4, [sp, #4]
 8012e3a:	b29b      	uxth	r3, r3
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	f7ff ff0f 	bl	8012c60 <uxr_common_create_entity>
 8012e42:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8012e46:	bd70      	pop	{r4, r5, r6, pc}

08012e48 <uxr_buffer_create_datawriter_bin>:
 8012e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e4c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012e50:	ac1d      	add	r4, sp, #116	@ 0x74
 8012e52:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012e56:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8012e5a:	9105      	str	r1, [sp, #20]
 8012e5c:	4606      	mov	r6, r0
 8012e5e:	a9a1      	add	r1, sp, #644	@ 0x284
 8012e60:	4618      	mov	r0, r3
 8012e62:	2305      	movs	r3, #5
 8012e64:	7123      	strb	r3, [r4, #4]
 8012e66:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8012e6a:	2703      	movs	r7, #3
 8012e6c:	f000 f8fc 	bl	8013068 <uxr_object_id_to_raw>
 8012e70:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8012e72:	7227      	strb	r7, [r4, #8]
 8012e74:	a90e      	add	r1, sp, #56	@ 0x38
 8012e76:	f000 f8f7 	bl	8013068 <uxr_object_id_to_raw>
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8012e80:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8012e84:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012e88:	3d00      	subs	r5, #0
 8012e8a:	bf18      	it	ne
 8012e8c:	2501      	movne	r5, #1
 8012e8e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012e92:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012e96:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012e9a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012ea4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012ea8:	bb8a      	cbnz	r2, 8012f0e <uxr_buffer_create_datawriter_bin+0xc6>
 8012eaa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012eae:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8012eb2:	f04f 0c13 	mov.w	ip, #19
 8012eb6:	250b      	movs	r5, #11
 8012eb8:	2221      	movs	r2, #33	@ 0x21
 8012eba:	2111      	movs	r1, #17
 8012ebc:	2009      	movs	r0, #9
 8012ebe:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8012ec2:	b923      	cbnz	r3, 8012ece <uxr_buffer_create_datawriter_bin+0x86>
 8012ec4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8012ec8:	4672      	mov	r2, lr
 8012eca:	4661      	mov	r1, ip
 8012ecc:	4628      	mov	r0, r5
 8012ece:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8012ed2:	2b01      	cmp	r3, #1
 8012ed4:	d025      	beq.n	8012f22 <uxr_buffer_create_datawriter_bin+0xda>
 8012ed6:	2b03      	cmp	r3, #3
 8012ed8:	d029      	beq.n	8012f2e <uxr_buffer_create_datawriter_bin+0xe6>
 8012eda:	b32b      	cbz	r3, 8012f28 <uxr_buffer_create_datawriter_bin+0xe0>
 8012edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ee0:	a921      	add	r1, sp, #132	@ 0x84
 8012ee2:	a806      	add	r0, sp, #24
 8012ee4:	f7ff fe2c 	bl	8012b40 <ucdr_init_buffer>
 8012ee8:	a90e      	add	r1, sp, #56	@ 0x38
 8012eea:	a806      	add	r0, sp, #24
 8012eec:	f002 f8f8 	bl	80150e0 <uxr_serialize_OBJK_DataWriter_Binary>
 8012ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ef2:	f8cd 8000 	str.w	r8, [sp]
 8012ef6:	9401      	str	r4, [sp, #4]
 8012ef8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012efc:	60e3      	str	r3, [r4, #12]
 8012efe:	4630      	mov	r0, r6
 8012f00:	b29b      	uxth	r3, r3
 8012f02:	f7ff fead 	bl	8012c60 <uxr_common_create_entity>
 8012f06:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f0e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8012f12:	f04f 0c12 	mov.w	ip, #18
 8012f16:	250a      	movs	r5, #10
 8012f18:	2220      	movs	r2, #32
 8012f1a:	2110      	movs	r1, #16
 8012f1c:	2008      	movs	r0, #8
 8012f1e:	2702      	movs	r7, #2
 8012f20:	e7cd      	b.n	8012ebe <uxr_buffer_create_datawriter_bin+0x76>
 8012f22:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8012f26:	e7d9      	b.n	8012edc <uxr_buffer_create_datawriter_bin+0x94>
 8012f28:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8012f2c:	e7d6      	b.n	8012edc <uxr_buffer_create_datawriter_bin+0x94>
 8012f2e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8012f32:	e7d3      	b.n	8012edc <uxr_buffer_create_datawriter_bin+0x94>

08012f34 <uxr_buffer_create_datareader_bin>:
 8012f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f38:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8012f3c:	ac1f      	add	r4, sp, #124	@ 0x7c
 8012f3e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012f42:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8012f46:	9105      	str	r1, [sp, #20]
 8012f48:	4606      	mov	r6, r0
 8012f4a:	a9a3      	add	r1, sp, #652	@ 0x28c
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	2306      	movs	r3, #6
 8012f50:	7123      	strb	r3, [r4, #4]
 8012f52:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8012f56:	2703      	movs	r7, #3
 8012f58:	f000 f886 	bl	8013068 <uxr_object_id_to_raw>
 8012f5c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8012f5e:	7227      	strb	r7, [r4, #8]
 8012f60:	a90e      	add	r1, sp, #56	@ 0x38
 8012f62:	f000 f881 	bl	8013068 <uxr_object_id_to_raw>
 8012f66:	2300      	movs	r3, #0
 8012f68:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8012f6c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8012f70:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8012f74:	3d00      	subs	r5, #0
 8012f76:	bf18      	it	ne
 8012f78:	2501      	movne	r5, #1
 8012f7a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012f7e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012f82:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012f86:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012f8a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012f8e:	2301      	movs	r3, #1
 8012f90:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012f94:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012f98:	bb8a      	cbnz	r2, 8012ffe <uxr_buffer_create_datareader_bin+0xca>
 8012f9a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012f9e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8012fa2:	f04f 0c13 	mov.w	ip, #19
 8012fa6:	250b      	movs	r5, #11
 8012fa8:	2221      	movs	r2, #33	@ 0x21
 8012faa:	2111      	movs	r1, #17
 8012fac:	2009      	movs	r0, #9
 8012fae:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8012fb2:	b923      	cbnz	r3, 8012fbe <uxr_buffer_create_datareader_bin+0x8a>
 8012fb4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8012fb8:	4672      	mov	r2, lr
 8012fba:	4661      	mov	r1, ip
 8012fbc:	4628      	mov	r0, r5
 8012fbe:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8012fc2:	2b01      	cmp	r3, #1
 8012fc4:	d025      	beq.n	8013012 <uxr_buffer_create_datareader_bin+0xde>
 8012fc6:	2b03      	cmp	r3, #3
 8012fc8:	d029      	beq.n	801301e <uxr_buffer_create_datareader_bin+0xea>
 8012fca:	b32b      	cbz	r3, 8013018 <uxr_buffer_create_datareader_bin+0xe4>
 8012fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012fd0:	a923      	add	r1, sp, #140	@ 0x8c
 8012fd2:	a806      	add	r0, sp, #24
 8012fd4:	f7ff fdb4 	bl	8012b40 <ucdr_init_buffer>
 8012fd8:	a90e      	add	r1, sp, #56	@ 0x38
 8012fda:	a806      	add	r0, sp, #24
 8012fdc:	f002 f844 	bl	8015068 <uxr_serialize_OBJK_DataReader_Binary>
 8012fe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fe2:	f8cd 8000 	str.w	r8, [sp]
 8012fe6:	9401      	str	r4, [sp, #4]
 8012fe8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012fec:	60e3      	str	r3, [r4, #12]
 8012fee:	4630      	mov	r0, r6
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	f7ff fe35 	bl	8012c60 <uxr_common_create_entity>
 8012ff6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8012ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ffe:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8013002:	f04f 0c12 	mov.w	ip, #18
 8013006:	250a      	movs	r5, #10
 8013008:	2220      	movs	r2, #32
 801300a:	2110      	movs	r1, #16
 801300c:	2008      	movs	r0, #8
 801300e:	2702      	movs	r7, #2
 8013010:	e7cd      	b.n	8012fae <uxr_buffer_create_datareader_bin+0x7a>
 8013012:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8013016:	e7d9      	b.n	8012fcc <uxr_buffer_create_datareader_bin+0x98>
 8013018:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801301c:	e7d6      	b.n	8012fcc <uxr_buffer_create_datareader_bin+0x98>
 801301e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8013022:	e7d3      	b.n	8012fcc <uxr_buffer_create_datareader_bin+0x98>

08013024 <uxr_object_id>:
 8013024:	b082      	sub	sp, #8
 8013026:	2300      	movs	r3, #0
 8013028:	f88d 1006 	strb.w	r1, [sp, #6]
 801302c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013030:	f360 030f 	bfi	r3, r0, #0, #16
 8013034:	f362 431f 	bfi	r3, r2, #16, #16
 8013038:	4618      	mov	r0, r3
 801303a:	b002      	add	sp, #8
 801303c:	4770      	bx	lr
 801303e:	bf00      	nop

08013040 <uxr_object_id_from_raw>:
 8013040:	7843      	ldrb	r3, [r0, #1]
 8013042:	7801      	ldrb	r1, [r0, #0]
 8013044:	b082      	sub	sp, #8
 8013046:	f003 020f 	and.w	r2, r3, #15
 801304a:	f88d 2006 	strb.w	r2, [sp, #6]
 801304e:	091b      	lsrs	r3, r3, #4
 8013050:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013054:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8013058:	2000      	movs	r0, #0
 801305a:	f363 000f 	bfi	r0, r3, #0, #16
 801305e:	f362 401f 	bfi	r0, r2, #16, #16
 8013062:	b002      	add	sp, #8
 8013064:	4770      	bx	lr
 8013066:	bf00      	nop

08013068 <uxr_object_id_to_raw>:
 8013068:	4602      	mov	r2, r0
 801306a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801306e:	b082      	sub	sp, #8
 8013070:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8013074:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8013078:	f881 c000 	strb.w	ip, [r1]
 801307c:	7048      	strb	r0, [r1, #1]
 801307e:	b002      	add	sp, #8
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop

08013084 <on_get_fragmentation_info>:
 8013084:	b500      	push	{lr}
 8013086:	b08b      	sub	sp, #44	@ 0x2c
 8013088:	4601      	mov	r1, r0
 801308a:	2204      	movs	r2, #4
 801308c:	a802      	add	r0, sp, #8
 801308e:	f7ff fd57 	bl	8012b40 <ucdr_init_buffer>
 8013092:	f10d 0305 	add.w	r3, sp, #5
 8013096:	f10d 0206 	add.w	r2, sp, #6
 801309a:	a901      	add	r1, sp, #4
 801309c:	a802      	add	r0, sp, #8
 801309e:	f001 f9d5 	bl	801444c <uxr_read_submessage_header>
 80130a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80130a6:	2b0d      	cmp	r3, #13
 80130a8:	d003      	beq.n	80130b2 <on_get_fragmentation_info+0x2e>
 80130aa:	2000      	movs	r0, #0
 80130ac:	b00b      	add	sp, #44	@ 0x2c
 80130ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80130b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80130b6:	f013 0f02 	tst.w	r3, #2
 80130ba:	bf14      	ite	ne
 80130bc:	2002      	movne	r0, #2
 80130be:	2001      	moveq	r0, #1
 80130c0:	b00b      	add	sp, #44	@ 0x2c
 80130c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80130c6:	bf00      	nop

080130c8 <read_submessage_get_info>:
 80130c8:	b570      	push	{r4, r5, r6, lr}
 80130ca:	2500      	movs	r5, #0
 80130cc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80130d0:	4604      	mov	r4, r0
 80130d2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80130d6:	460e      	mov	r6, r1
 80130d8:	a810      	add	r0, sp, #64	@ 0x40
 80130da:	4629      	mov	r1, r5
 80130dc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80130e0:	f009 fdf2 	bl	801ccc8 <memset>
 80130e4:	a903      	add	r1, sp, #12
 80130e6:	4630      	mov	r0, r6
 80130e8:	f002 fa70 	bl	80155cc <uxr_deserialize_GET_INFO_Payload>
 80130ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80130f0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80130f4:	4620      	mov	r0, r4
 80130f6:	f001 f81f 	bl	8014138 <uxr_session_header_offset>
 80130fa:	462b      	mov	r3, r5
 80130fc:	9000      	str	r0, [sp, #0]
 80130fe:	220c      	movs	r2, #12
 8013100:	a905      	add	r1, sp, #20
 8013102:	a808      	add	r0, sp, #32
 8013104:	f7ff fd0a 	bl	8012b1c <ucdr_init_buffer_origin_offset>
 8013108:	a910      	add	r1, sp, #64	@ 0x40
 801310a:	a808      	add	r0, sp, #32
 801310c:	f002 fad0 	bl	80156b0 <uxr_serialize_INFO_Payload>
 8013110:	9b08      	ldr	r3, [sp, #32]
 8013112:	462a      	mov	r2, r5
 8013114:	4629      	mov	r1, r5
 8013116:	4620      	mov	r0, r4
 8013118:	f000 ffb8 	bl	801408c <uxr_stamp_session_header>
 801311c:	a808      	add	r0, sp, #32
 801311e:	f7ff fd3b 	bl	8012b98 <ucdr_buffer_length>
 8013122:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013124:	4602      	mov	r2, r0
 8013126:	a905      	add	r1, sp, #20
 8013128:	e9d3 0400 	ldrd	r0, r4, [r3]
 801312c:	47a0      	blx	r4
 801312e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8013132:	bd70      	pop	{r4, r5, r6, pc}

08013134 <write_submessage_acknack.isra.0>:
 8013134:	b570      	push	{r4, r5, r6, lr}
 8013136:	b092      	sub	sp, #72	@ 0x48
 8013138:	4605      	mov	r5, r0
 801313a:	460e      	mov	r6, r1
 801313c:	4614      	mov	r4, r2
 801313e:	f000 fffb 	bl	8014138 <uxr_session_header_offset>
 8013142:	a905      	add	r1, sp, #20
 8013144:	9000      	str	r0, [sp, #0]
 8013146:	2300      	movs	r3, #0
 8013148:	a80a      	add	r0, sp, #40	@ 0x28
 801314a:	2211      	movs	r2, #17
 801314c:	f7ff fce6 	bl	8012b1c <ucdr_init_buffer_origin_offset>
 8013150:	2218      	movs	r2, #24
 8013152:	fb02 5404 	mla	r4, r2, r4, r5
 8013156:	2300      	movs	r3, #0
 8013158:	2205      	movs	r2, #5
 801315a:	3450      	adds	r4, #80	@ 0x50
 801315c:	210a      	movs	r1, #10
 801315e:	a80a      	add	r0, sp, #40	@ 0x28
 8013160:	f001 f95a 	bl	8014418 <uxr_buffer_submessage_header>
 8013164:	a903      	add	r1, sp, #12
 8013166:	4620      	mov	r0, r4
 8013168:	f007 fae8 	bl	801a73c <uxr_compute_acknack>
 801316c:	ba40      	rev16	r0, r0
 801316e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8013172:	a903      	add	r1, sp, #12
 8013174:	a80a      	add	r0, sp, #40	@ 0x28
 8013176:	f88d 6010 	strb.w	r6, [sp, #16]
 801317a:	f002 fb09 	bl	8015790 <uxr_serialize_ACKNACK_Payload>
 801317e:	2200      	movs	r2, #0
 8013180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013182:	4611      	mov	r1, r2
 8013184:	4628      	mov	r0, r5
 8013186:	f000 ff81 	bl	801408c <uxr_stamp_session_header>
 801318a:	a80a      	add	r0, sp, #40	@ 0x28
 801318c:	f7ff fd04 	bl	8012b98 <ucdr_buffer_length>
 8013190:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8013192:	4602      	mov	r2, r0
 8013194:	a905      	add	r1, sp, #20
 8013196:	e9d3 0400 	ldrd	r0, r4, [r3]
 801319a:	47a0      	blx	r4
 801319c:	b012      	add	sp, #72	@ 0x48
 801319e:	bd70      	pop	{r4, r5, r6, pc}

080131a0 <uxr_init_session>:
 80131a0:	b510      	push	{r4, lr}
 80131a2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80131d8 <uxr_init_session+0x38>
 80131a6:	2300      	movs	r3, #0
 80131a8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80131ac:	4604      	mov	r4, r0
 80131ae:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80131b2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80131b6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80131ba:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80131be:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80131c2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80131c6:	2181      	movs	r1, #129	@ 0x81
 80131c8:	f000 fecc 	bl	8013f64 <uxr_init_session_info>
 80131cc:	f104 0008 	add.w	r0, r4, #8
 80131d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131d4:	f001 b83c 	b.w	8014250 <uxr_init_stream_storage>
	...

080131e0 <uxr_set_status_callback>:
 80131e0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80131e4:	4770      	bx	lr
 80131e6:	bf00      	nop

080131e8 <uxr_set_topic_callback>:
 80131e8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80131ec:	4770      	bx	lr
 80131ee:	bf00      	nop

080131f0 <uxr_set_request_callback>:
 80131f0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80131f4:	4770      	bx	lr
 80131f6:	bf00      	nop

080131f8 <uxr_set_reply_callback>:
 80131f8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80131fc:	4770      	bx	lr
 80131fe:	bf00      	nop

08013200 <uxr_create_output_best_effort_stream>:
 8013200:	b510      	push	{r4, lr}
 8013202:	b084      	sub	sp, #16
 8013204:	e9cd 2100 	strd	r2, r1, [sp]
 8013208:	4604      	mov	r4, r0
 801320a:	f000 ff95 	bl	8014138 <uxr_session_header_offset>
 801320e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8013212:	4603      	mov	r3, r0
 8013214:	f104 0008 	add.w	r0, r4, #8
 8013218:	b004      	add	sp, #16
 801321a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801321e:	f001 b861 	b.w	80142e4 <uxr_add_output_best_effort_buffer>
 8013222:	bf00      	nop

08013224 <uxr_create_output_reliable_stream>:
 8013224:	b510      	push	{r4, lr}
 8013226:	b088      	sub	sp, #32
 8013228:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801322c:	4604      	mov	r4, r0
 801322e:	9303      	str	r3, [sp, #12]
 8013230:	f000 ff82 	bl	8014138 <uxr_session_header_offset>
 8013234:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013238:	9000      	str	r0, [sp, #0]
 801323a:	9905      	ldr	r1, [sp, #20]
 801323c:	f104 0008 	add.w	r0, r4, #8
 8013240:	f001 f864 	bl	801430c <uxr_add_output_reliable_buffer>
 8013244:	2200      	movs	r2, #0
 8013246:	b2c3      	uxtb	r3, r0
 8013248:	f363 0207 	bfi	r2, r3, #0, #8
 801324c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013250:	f363 220f 	bfi	r2, r3, #8, #8
 8013254:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013258:	f363 4217 	bfi	r2, r3, #16, #8
 801325c:	0e03      	lsrs	r3, r0, #24
 801325e:	f363 621f 	bfi	r2, r3, #24, #8
 8013262:	4610      	mov	r0, r2
 8013264:	b008      	add	sp, #32
 8013266:	bd10      	pop	{r4, pc}

08013268 <uxr_create_input_best_effort_stream>:
 8013268:	b082      	sub	sp, #8
 801326a:	3008      	adds	r0, #8
 801326c:	b002      	add	sp, #8
 801326e:	f001 b867 	b.w	8014340 <uxr_add_input_best_effort_buffer>
 8013272:	bf00      	nop

08013274 <uxr_create_input_reliable_stream>:
 8013274:	b510      	push	{r4, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	4c0b      	ldr	r4, [pc, #44]	@ (80132a8 <uxr_create_input_reliable_stream+0x34>)
 801327a:	9400      	str	r4, [sp, #0]
 801327c:	3008      	adds	r0, #8
 801327e:	f001 f875 	bl	801436c <uxr_add_input_reliable_buffer>
 8013282:	2200      	movs	r2, #0
 8013284:	b2c3      	uxtb	r3, r0
 8013286:	f363 0207 	bfi	r2, r3, #0, #8
 801328a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801328e:	f363 220f 	bfi	r2, r3, #8, #8
 8013292:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013296:	f363 4217 	bfi	r2, r3, #16, #8
 801329a:	0e03      	lsrs	r3, r0, #24
 801329c:	f363 621f 	bfi	r2, r3, #24, #8
 80132a0:	4610      	mov	r0, r2
 80132a2:	b004      	add	sp, #16
 80132a4:	bd10      	pop	{r4, pc}
 80132a6:	bf00      	nop
 80132a8:	08013085 	.word	0x08013085

080132ac <uxr_epoch_nanos>:
 80132ac:	b510      	push	{r4, lr}
 80132ae:	4604      	mov	r4, r0
 80132b0:	f001 f912 	bl	80144d8 <uxr_nanos>
 80132b4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80132b8:	1ac0      	subs	r0, r0, r3
 80132ba:	eb61 0102 	sbc.w	r1, r1, r2
 80132be:	bd10      	pop	{r4, pc}

080132c0 <uxr_flash_output_streams>:
 80132c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132c4:	7e03      	ldrb	r3, [r0, #24]
 80132c6:	b084      	sub	sp, #16
 80132c8:	4604      	mov	r4, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d035      	beq.n	801333a <uxr_flash_output_streams+0x7a>
 80132ce:	f04f 0900 	mov.w	r9, #0
 80132d2:	4648      	mov	r0, r9
 80132d4:	f10d 0802 	add.w	r8, sp, #2
 80132d8:	af03      	add	r7, sp, #12
 80132da:	ae02      	add	r6, sp, #8
 80132dc:	e006      	b.n	80132ec <uxr_flash_output_streams+0x2c>
 80132de:	7e23      	ldrb	r3, [r4, #24]
 80132e0:	f109 0901 	add.w	r9, r9, #1
 80132e4:	fa5f f089 	uxtb.w	r0, r9
 80132e8:	4283      	cmp	r3, r0
 80132ea:	d926      	bls.n	801333a <uxr_flash_output_streams+0x7a>
 80132ec:	2201      	movs	r2, #1
 80132ee:	4611      	mov	r1, r2
 80132f0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80132f4:	f000 ff58 	bl	80141a8 <uxr_stream_id>
 80132f8:	3508      	adds	r5, #8
 80132fa:	4684      	mov	ip, r0
 80132fc:	4643      	mov	r3, r8
 80132fe:	463a      	mov	r2, r7
 8013300:	4631      	mov	r1, r6
 8013302:	4628      	mov	r0, r5
 8013304:	f8cd c004 	str.w	ip, [sp, #4]
 8013308:	f007 fa9e 	bl	801a848 <uxr_prepare_best_effort_buffer_to_send>
 801330c:	2800      	cmp	r0, #0
 801330e:	d0e6      	beq.n	80132de <uxr_flash_output_streams+0x1e>
 8013310:	9b02      	ldr	r3, [sp, #8]
 8013312:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013316:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801331a:	4620      	mov	r0, r4
 801331c:	f000 feb6 	bl	801408c <uxr_stamp_session_header>
 8013320:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013322:	9a03      	ldr	r2, [sp, #12]
 8013324:	685d      	ldr	r5, [r3, #4]
 8013326:	6818      	ldr	r0, [r3, #0]
 8013328:	9902      	ldr	r1, [sp, #8]
 801332a:	47a8      	blx	r5
 801332c:	f109 0901 	add.w	r9, r9, #1
 8013330:	7e23      	ldrb	r3, [r4, #24]
 8013332:	fa5f f089 	uxtb.w	r0, r9
 8013336:	4283      	cmp	r3, r0
 8013338:	d8d8      	bhi.n	80132ec <uxr_flash_output_streams+0x2c>
 801333a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801333e:	b38b      	cbz	r3, 80133a4 <uxr_flash_output_streams+0xe4>
 8013340:	f04f 0900 	mov.w	r9, #0
 8013344:	f10d 0802 	add.w	r8, sp, #2
 8013348:	af03      	add	r7, sp, #12
 801334a:	ae02      	add	r6, sp, #8
 801334c:	4648      	mov	r0, r9
 801334e:	2201      	movs	r2, #1
 8013350:	2102      	movs	r1, #2
 8013352:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8013356:	f000 ff27 	bl	80141a8 <uxr_stream_id>
 801335a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801335e:	3520      	adds	r5, #32
 8013360:	9001      	str	r0, [sp, #4]
 8013362:	e00d      	b.n	8013380 <uxr_flash_output_streams+0xc0>
 8013364:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013368:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801336c:	9b02      	ldr	r3, [sp, #8]
 801336e:	f000 fe8d 	bl	801408c <uxr_stamp_session_header>
 8013372:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013374:	9a03      	ldr	r2, [sp, #12]
 8013376:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801337a:	9902      	ldr	r1, [sp, #8]
 801337c:	6818      	ldr	r0, [r3, #0]
 801337e:	47d0      	blx	sl
 8013380:	4643      	mov	r3, r8
 8013382:	463a      	mov	r2, r7
 8013384:	4631      	mov	r1, r6
 8013386:	4628      	mov	r0, r5
 8013388:	f007 fc7c 	bl	801ac84 <uxr_prepare_next_reliable_buffer_to_send>
 801338c:	4603      	mov	r3, r0
 801338e:	4620      	mov	r0, r4
 8013390:	2b00      	cmp	r3, #0
 8013392:	d1e7      	bne.n	8013364 <uxr_flash_output_streams+0xa4>
 8013394:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8013398:	f109 0901 	add.w	r9, r9, #1
 801339c:	fa5f f089 	uxtb.w	r0, r9
 80133a0:	4283      	cmp	r3, r0
 80133a2:	d8d4      	bhi.n	801334e <uxr_flash_output_streams+0x8e>
 80133a4:	b004      	add	sp, #16
 80133a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133aa:	bf00      	nop

080133ac <read_submessage_info>:
 80133ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133b0:	460d      	mov	r5, r1
 80133b2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80133b6:	4669      	mov	r1, sp
 80133b8:	4607      	mov	r7, r0
 80133ba:	4628      	mov	r0, r5
 80133bc:	f002 f814 	bl	80153e8 <uxr_deserialize_BaseObjectReply>
 80133c0:	a902      	add	r1, sp, #8
 80133c2:	4604      	mov	r4, r0
 80133c4:	4628      	mov	r0, r5
 80133c6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80133ca:	f7fe fbf5 	bl	8011bb8 <ucdr_deserialize_bool>
 80133ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80133d2:	4004      	ands	r4, r0
 80133d4:	b2e4      	uxtb	r4, r4
 80133d6:	b95b      	cbnz	r3, 80133f0 <read_submessage_info+0x44>
 80133d8:	a987      	add	r1, sp, #540	@ 0x21c
 80133da:	4628      	mov	r0, r5
 80133dc:	f7fe fbec 	bl	8011bb8 <ucdr_deserialize_bool>
 80133e0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80133e4:	4606      	mov	r6, r0
 80133e6:	b94b      	cbnz	r3, 80133fc <read_submessage_info+0x50>
 80133e8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80133ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133f0:	a903      	add	r1, sp, #12
 80133f2:	4628      	mov	r0, r5
 80133f4:	f001 fea0 	bl	8015138 <uxr_deserialize_ObjectVariant>
 80133f8:	4004      	ands	r4, r0
 80133fa:	e7ed      	b.n	80133d8 <read_submessage_info+0x2c>
 80133fc:	a988      	add	r1, sp, #544	@ 0x220
 80133fe:	4628      	mov	r0, r5
 8013400:	f7fe fc08 	bl	8011c14 <ucdr_deserialize_uint8_t>
 8013404:	4234      	tst	r4, r6
 8013406:	d0ef      	beq.n	80133e8 <read_submessage_info+0x3c>
 8013408:	2800      	cmp	r0, #0
 801340a:	d0ed      	beq.n	80133e8 <read_submessage_info+0x3c>
 801340c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8013410:	2b0d      	cmp	r3, #13
 8013412:	d1e9      	bne.n	80133e8 <read_submessage_info+0x3c>
 8013414:	a98a      	add	r1, sp, #552	@ 0x228
 8013416:	4628      	mov	r0, r5
 8013418:	f7ff f9a2 	bl	8012760 <ucdr_deserialize_int16_t>
 801341c:	b140      	cbz	r0, 8013430 <read_submessage_info+0x84>
 801341e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8013422:	2b00      	cmp	r3, #0
 8013424:	dd07      	ble.n	8013436 <read_submessage_info+0x8a>
 8013426:	f1b8 0f00 	cmp.w	r8, #0
 801342a:	bf14      	ite	ne
 801342c:	2001      	movne	r0, #1
 801342e:	2002      	moveq	r0, #2
 8013430:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8013434:	e7d8      	b.n	80133e8 <read_submessage_info+0x3c>
 8013436:	2000      	movs	r0, #0
 8013438:	e7fa      	b.n	8013430 <read_submessage_info+0x84>
 801343a:	bf00      	nop

0801343c <read_submessage_list>:
 801343c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013440:	b097      	sub	sp, #92	@ 0x5c
 8013442:	4ec1      	ldr	r6, [pc, #772]	@ (8013748 <read_submessage_list+0x30c>)
 8013444:	9209      	str	r2, [sp, #36]	@ 0x24
 8013446:	4604      	mov	r4, r0
 8013448:	460d      	mov	r5, r1
 801344a:	f04f 0801 	mov.w	r8, #1
 801344e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8013452:	aa0c      	add	r2, sp, #48	@ 0x30
 8013454:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8013458:	4628      	mov	r0, r5
 801345a:	f000 fff7 	bl	801444c <uxr_read_submessage_header>
 801345e:	2800      	cmp	r0, #0
 8013460:	f000 813e 	beq.w	80136e0 <read_submessage_list+0x2a4>
 8013464:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8013468:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 801346c:	3b02      	subs	r3, #2
 801346e:	2b0d      	cmp	r3, #13
 8013470:	d8ed      	bhi.n	801344e <read_submessage_list+0x12>
 8013472:	a101      	add	r1, pc, #4	@ (adr r1, 8013478 <read_submessage_list+0x3c>)
 8013474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013478:	080136d7 	.word	0x080136d7
 801347c:	0801344f 	.word	0x0801344f
 8013480:	080136c7 	.word	0x080136c7
 8013484:	08013665 	.word	0x08013665
 8013488:	0801365b 	.word	0x0801365b
 801348c:	0801344f 	.word	0x0801344f
 8013490:	0801344f 	.word	0x0801344f
 8013494:	080135bb 	.word	0x080135bb
 8013498:	0801354b 	.word	0x0801354b
 801349c:	0801350b 	.word	0x0801350b
 80134a0:	0801344f 	.word	0x0801344f
 80134a4:	0801344f 	.word	0x0801344f
 80134a8:	0801344f 	.word	0x0801344f
 80134ac:	080134b1 	.word	0x080134b1
 80134b0:	a910      	add	r1, sp, #64	@ 0x40
 80134b2:	4628      	mov	r0, r5
 80134b4:	f002 f9bc 	bl	8015830 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80134b8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80134bc:	f1b9 0f00 	cmp.w	r9, #0
 80134c0:	f000 8116 	beq.w	80136f0 <read_submessage_list+0x2b4>
 80134c4:	f001 f808 	bl	80144d8 <uxr_nanos>
 80134c8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80134ca:	4602      	mov	r2, r0
 80134cc:	460b      	mov	r3, r1
 80134ce:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80134d0:	2100      	movs	r1, #0
 80134d2:	468c      	mov	ip, r1
 80134d4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80134d8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80134dc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80134de:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80134e0:	468c      	mov	ip, r1
 80134e2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80134e6:	46e2      	mov	sl, ip
 80134e8:	46bc      	mov	ip, r7
 80134ea:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80134ee:	fbc0 7106 	smlal	r7, r1, r0, r6
 80134f2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80134f6:	e9cd 7100 	strd	r7, r1, [sp]
 80134fa:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80134fe:	9106      	str	r1, [sp, #24]
 8013500:	4620      	mov	r0, r4
 8013502:	47c8      	blx	r9
 8013504:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8013508:	e7a1      	b.n	801344e <read_submessage_list+0x12>
 801350a:	a910      	add	r1, sp, #64	@ 0x40
 801350c:	4628      	mov	r0, r5
 801350e:	f002 f97d 	bl	801580c <uxr_deserialize_HEARTBEAT_Payload>
 8013512:	2100      	movs	r1, #0
 8013514:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013518:	f000 fe70 	bl	80141fc <uxr_stream_id_from_raw>
 801351c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8013520:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013522:	4639      	mov	r1, r7
 8013524:	f104 0008 	add.w	r0, r4, #8
 8013528:	f000 ff56 	bl	80143d8 <uxr_get_input_reliable_stream>
 801352c:	2800      	cmp	r0, #0
 801352e:	d08e      	beq.n	801344e <read_submessage_list+0x12>
 8013530:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8013534:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8013538:	f007 f8f4 	bl	801a724 <uxr_process_heartbeat>
 801353c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8013540:	463a      	mov	r2, r7
 8013542:	4620      	mov	r0, r4
 8013544:	f7ff fdf6 	bl	8013134 <write_submessage_acknack.isra.0>
 8013548:	e781      	b.n	801344e <read_submessage_list+0x12>
 801354a:	a910      	add	r1, sp, #64	@ 0x40
 801354c:	4628      	mov	r0, r5
 801354e:	f002 f935 	bl	80157bc <uxr_deserialize_ACKNACK_Payload>
 8013552:	2100      	movs	r1, #0
 8013554:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013558:	f000 fe50 	bl	80141fc <uxr_stream_id_from_raw>
 801355c:	900d      	str	r0, [sp, #52]	@ 0x34
 801355e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8013562:	f104 0008 	add.w	r0, r4, #8
 8013566:	f000 ff23 	bl	80143b0 <uxr_get_output_reliable_stream>
 801356a:	4607      	mov	r7, r0
 801356c:	2800      	cmp	r0, #0
 801356e:	f43f af6e 	beq.w	801344e <read_submessage_list+0x12>
 8013572:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8013576:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801357a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801357e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8013582:	b289      	uxth	r1, r1
 8013584:	f007 fc28 	bl	801add8 <uxr_process_acknack>
 8013588:	4638      	mov	r0, r7
 801358a:	f007 fbe5 	bl	801ad58 <uxr_begin_output_nack_buffer_it>
 801358e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8013592:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8013596:	e006      	b.n	80135a6 <read_submessage_list+0x16a>
 8013598:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801359a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801359c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80135a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80135a2:	6818      	ldr	r0, [r3, #0]
 80135a4:	47c8      	blx	r9
 80135a6:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80135aa:	aa0f      	add	r2, sp, #60	@ 0x3c
 80135ac:	4651      	mov	r1, sl
 80135ae:	4638      	mov	r0, r7
 80135b0:	f007 fbd4 	bl	801ad5c <uxr_next_reliable_nack_buffer_to_send>
 80135b4:	2800      	cmp	r0, #0
 80135b6:	d1ef      	bne.n	8013598 <read_submessage_list+0x15c>
 80135b8:	e749      	b.n	801344e <read_submessage_list+0x12>
 80135ba:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80135be:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80135c2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80135c6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80135ca:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80135ce:	4651      	mov	r1, sl
 80135d0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80135d4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80135d8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80135dc:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80135e0:	4628      	mov	r0, r5
 80135e2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80135e6:	f001 fe49 	bl	801527c <uxr_deserialize_BaseObjectRequest>
 80135ea:	4650      	mov	r0, sl
 80135ec:	a90f      	add	r1, sp, #60	@ 0x3c
 80135ee:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80135f2:	f000 fdc7 	bl	8014184 <uxr_parse_base_object_request>
 80135f6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80135fa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80135fc:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8013600:	9110      	str	r1, [sp, #64]	@ 0x40
 8013602:	3f04      	subs	r7, #4
 8013604:	f009 090e 	and.w	r9, r9, #14
 8013608:	b2bf      	uxth	r7, r7
 801360a:	f1bb 0f00 	cmp.w	fp, #0
 801360e:	d006      	beq.n	801361e <read_submessage_list+0x1e2>
 8013610:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013614:	9300      	str	r3, [sp, #0]
 8013616:	4652      	mov	r2, sl
 8013618:	2300      	movs	r3, #0
 801361a:	4620      	mov	r0, r4
 801361c:	47d8      	blx	fp
 801361e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013620:	b16a      	cbz	r2, 801363e <read_submessage_list+0x202>
 8013622:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8013624:	2100      	movs	r1, #0
 8013626:	3802      	subs	r0, #2
 8013628:	e002      	b.n	8013630 <read_submessage_list+0x1f4>
 801362a:	3101      	adds	r1, #1
 801362c:	4291      	cmp	r1, r2
 801362e:	d006      	beq.n	801363e <read_submessage_list+0x202>
 8013630:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013634:	4553      	cmp	r3, sl
 8013636:	d1f8      	bne.n	801362a <read_submessage_list+0x1ee>
 8013638:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801363a:	2200      	movs	r2, #0
 801363c:	545a      	strb	r2, [r3, r1]
 801363e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8013642:	9102      	str	r1, [sp, #8]
 8013644:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013646:	9101      	str	r1, [sp, #4]
 8013648:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801364a:	9100      	str	r1, [sp, #0]
 801364c:	464b      	mov	r3, r9
 801364e:	463a      	mov	r2, r7
 8013650:	4629      	mov	r1, r5
 8013652:	4620      	mov	r0, r4
 8013654:	f007 fc7e 	bl	801af54 <read_submessage_format>
 8013658:	e6f9      	b.n	801344e <read_submessage_list+0x12>
 801365a:	4629      	mov	r1, r5
 801365c:	4620      	mov	r0, r4
 801365e:	f7ff fea5 	bl	80133ac <read_submessage_info>
 8013662:	e6f4      	b.n	801344e <read_submessage_list+0x12>
 8013664:	2a00      	cmp	r2, #0
 8013666:	d03e      	beq.n	80136e6 <read_submessage_list+0x2aa>
 8013668:	a910      	add	r1, sp, #64	@ 0x40
 801366a:	4628      	mov	r0, r5
 801366c:	f002 f802 	bl	8015674 <uxr_deserialize_STATUS_Payload>
 8013670:	a90e      	add	r1, sp, #56	@ 0x38
 8013672:	aa0d      	add	r2, sp, #52	@ 0x34
 8013674:	a810      	add	r0, sp, #64	@ 0x40
 8013676:	f000 fd85 	bl	8014184 <uxr_parse_base_object_request>
 801367a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801367e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013680:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8013684:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8013688:	910f      	str	r1, [sp, #60]	@ 0x3c
 801368a:	f1ba 0f00 	cmp.w	sl, #0
 801368e:	d006      	beq.n	801369e <read_submessage_list+0x262>
 8013690:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013694:	9300      	str	r3, [sp, #0]
 8013696:	463a      	mov	r2, r7
 8013698:	464b      	mov	r3, r9
 801369a:	4620      	mov	r0, r4
 801369c:	47d0      	blx	sl
 801369e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80136a0:	2a00      	cmp	r2, #0
 80136a2:	f43f aed4 	beq.w	801344e <read_submessage_list+0x12>
 80136a6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80136a8:	2100      	movs	r1, #0
 80136aa:	3802      	subs	r0, #2
 80136ac:	e003      	b.n	80136b6 <read_submessage_list+0x27a>
 80136ae:	3101      	adds	r1, #1
 80136b0:	4291      	cmp	r1, r2
 80136b2:	f43f aecc 	beq.w	801344e <read_submessage_list+0x12>
 80136b6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80136ba:	42bb      	cmp	r3, r7
 80136bc:	d1f7      	bne.n	80136ae <read_submessage_list+0x272>
 80136be:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80136c0:	f803 9001 	strb.w	r9, [r3, r1]
 80136c4:	e6c3      	b.n	801344e <read_submessage_list+0x12>
 80136c6:	2a00      	cmp	r2, #0
 80136c8:	f47f aec1 	bne.w	801344e <read_submessage_list+0x12>
 80136cc:	4629      	mov	r1, r5
 80136ce:	4620      	mov	r0, r4
 80136d0:	f000 fc9e 	bl	8014010 <uxr_read_create_session_status>
 80136d4:	e6bb      	b.n	801344e <read_submessage_list+0x12>
 80136d6:	4629      	mov	r1, r5
 80136d8:	4620      	mov	r0, r4
 80136da:	f7ff fcf5 	bl	80130c8 <read_submessage_get_info>
 80136de:	e6b6      	b.n	801344e <read_submessage_list+0x12>
 80136e0:	b017      	add	sp, #92	@ 0x5c
 80136e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136e6:	4629      	mov	r1, r5
 80136e8:	4620      	mov	r0, r4
 80136ea:	f000 fc9d 	bl	8014028 <uxr_read_delete_session_status>
 80136ee:	e6ae      	b.n	801344e <read_submessage_list+0x12>
 80136f0:	f000 fef2 	bl	80144d8 <uxr_nanos>
 80136f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80136f6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80136f8:	464f      	mov	r7, r9
 80136fa:	fbc3 2706 	smlal	r2, r7, r3, r6
 80136fe:	1812      	adds	r2, r2, r0
 8013700:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013702:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013704:	eb47 0101 	adc.w	r1, r7, r1
 8013708:	464f      	mov	r7, r9
 801370a:	fbc3 0706 	smlal	r0, r7, r3, r6
 801370e:	463b      	mov	r3, r7
 8013710:	4684      	mov	ip, r0
 8013712:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8013716:	fbc7 0906 	smlal	r0, r9, r7, r6
 801371a:	eb1c 0c00 	adds.w	ip, ip, r0
 801371e:	464f      	mov	r7, r9
 8013720:	eb43 0307 	adc.w	r3, r3, r7
 8013724:	ebb2 0c0c 	subs.w	ip, r2, ip
 8013728:	eb61 0303 	sbc.w	r3, r1, r3
 801372c:	0fda      	lsrs	r2, r3, #31
 801372e:	eb12 020c 	adds.w	r2, r2, ip
 8013732:	f143 0300 	adc.w	r3, r3, #0
 8013736:	0852      	lsrs	r2, r2, #1
 8013738:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 801373c:	105b      	asrs	r3, r3, #1
 801373e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8013742:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8013746:	e6dd      	b.n	8013504 <read_submessage_list+0xc8>
 8013748:	3b9aca00 	.word	0x3b9aca00

0801374c <listen_message_reliably>:
 801374c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013750:	1e0b      	subs	r3, r1, #0
 8013752:	b09d      	sub	sp, #116	@ 0x74
 8013754:	bfb8      	it	lt
 8013756:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801375a:	4680      	mov	r8, r0
 801375c:	9305      	str	r3, [sp, #20]
 801375e:	f000 fea1 	bl	80144a4 <uxr_millis>
 8013762:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8013766:	4681      	mov	r9, r0
 8013768:	2a00      	cmp	r2, #0
 801376a:	f000 80a1 	beq.w	80138b0 <listen_message_reliably+0x164>
 801376e:	2600      	movs	r6, #0
 8013770:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013774:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8013778:	9303      	str	r3, [sp, #12]
 801377a:	4630      	mov	r0, r6
 801377c:	460f      	mov	r7, r1
 801377e:	e00f      	b.n	80137a0 <listen_message_reliably+0x54>
 8013780:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013784:	9903      	ldr	r1, [sp, #12]
 8013786:	455a      	cmp	r2, fp
 8013788:	f106 0601 	add.w	r6, r6, #1
 801378c:	eb73 0101 	sbcs.w	r1, r3, r1
 8013790:	b2f0      	uxtb	r0, r6
 8013792:	da01      	bge.n	8013798 <listen_message_reliably+0x4c>
 8013794:	4693      	mov	fp, r2
 8013796:	9303      	str	r3, [sp, #12]
 8013798:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801379c:	4283      	cmp	r3, r0
 801379e:	d960      	bls.n	8013862 <listen_message_reliably+0x116>
 80137a0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80137a4:	2102      	movs	r1, #2
 80137a6:	2201      	movs	r2, #1
 80137a8:	f000 fcfe 	bl	80141a8 <uxr_stream_id>
 80137ac:	00e4      	lsls	r4, r4, #3
 80137ae:	f104 0520 	add.w	r5, r4, #32
 80137b2:	4445      	add	r5, r8
 80137b4:	4601      	mov	r1, r0
 80137b6:	463b      	mov	r3, r7
 80137b8:	464a      	mov	r2, r9
 80137ba:	4628      	mov	r0, r5
 80137bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80137be:	f007 faa1 	bl	801ad04 <uxr_update_output_stream_heartbeat_timestamp>
 80137c2:	eb08 0304 	add.w	r3, r8, r4
 80137c6:	2800      	cmp	r0, #0
 80137c8:	d0da      	beq.n	8013780 <listen_message_reliably+0x34>
 80137ca:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80137ce:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80137d2:	9304      	str	r3, [sp, #16]
 80137d4:	4640      	mov	r0, r8
 80137d6:	f000 fcaf 	bl	8014138 <uxr_session_header_offset>
 80137da:	3501      	adds	r5, #1
 80137dc:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80137e0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80137e4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80137e8:	2300      	movs	r3, #0
 80137ea:	2211      	movs	r2, #17
 80137ec:	9000      	str	r0, [sp, #0]
 80137ee:	a90c      	add	r1, sp, #48	@ 0x30
 80137f0:	4650      	mov	r0, sl
 80137f2:	f7ff f993 	bl	8012b1c <ucdr_init_buffer_origin_offset>
 80137f6:	2300      	movs	r3, #0
 80137f8:	2205      	movs	r2, #5
 80137fa:	210b      	movs	r1, #11
 80137fc:	4650      	mov	r0, sl
 80137fe:	f000 fe0b 	bl	8014418 <uxr_buffer_submessage_header>
 8013802:	8968      	ldrh	r0, [r5, #10]
 8013804:	2101      	movs	r1, #1
 8013806:	f007 fc6f 	bl	801b0e8 <uxr_seq_num_add>
 801380a:	892b      	ldrh	r3, [r5, #8]
 801380c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8013810:	4602      	mov	r2, r0
 8013812:	9b04      	ldr	r3, [sp, #16]
 8013814:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8013818:	a90a      	add	r1, sp, #40	@ 0x28
 801381a:	4650      	mov	r0, sl
 801381c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8013820:	f001 ffe0 	bl	80157e4 <uxr_serialize_HEARTBEAT_Payload>
 8013824:	2200      	movs	r2, #0
 8013826:	4611      	mov	r1, r2
 8013828:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801382a:	4640      	mov	r0, r8
 801382c:	f000 fc2e 	bl	801408c <uxr_stamp_session_header>
 8013830:	4650      	mov	r0, sl
 8013832:	f7ff f9b1 	bl	8012b98 <ucdr_buffer_length>
 8013836:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801383a:	4602      	mov	r2, r0
 801383c:	a90c      	add	r1, sp, #48	@ 0x30
 801383e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013842:	4444      	add	r4, r8
 8013844:	47a8      	blx	r5
 8013846:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801384a:	9903      	ldr	r1, [sp, #12]
 801384c:	455a      	cmp	r2, fp
 801384e:	f106 0601 	add.w	r6, r6, #1
 8013852:	eb73 0101 	sbcs.w	r1, r3, r1
 8013856:	b2f0      	uxtb	r0, r6
 8013858:	db9c      	blt.n	8013794 <listen_message_reliably+0x48>
 801385a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801385e:	4283      	cmp	r3, r0
 8013860:	d89e      	bhi.n	80137a0 <listen_message_reliably+0x54>
 8013862:	9a03      	ldr	r2, [sp, #12]
 8013864:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013868:	429a      	cmp	r2, r3
 801386a:	bf08      	it	eq
 801386c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8013870:	d01e      	beq.n	80138b0 <listen_message_reliably+0x164>
 8013872:	ebab 0309 	sub.w	r3, fp, r9
 8013876:	9905      	ldr	r1, [sp, #20]
 8013878:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 801387c:	2b00      	cmp	r3, #0
 801387e:	bf08      	it	eq
 8013880:	2301      	moveq	r3, #1
 8013882:	4299      	cmp	r1, r3
 8013884:	bfa8      	it	ge
 8013886:	4619      	movge	r1, r3
 8013888:	6894      	ldr	r4, [r2, #8]
 801388a:	6810      	ldr	r0, [r2, #0]
 801388c:	4689      	mov	r9, r1
 801388e:	460b      	mov	r3, r1
 8013890:	aa08      	add	r2, sp, #32
 8013892:	a907      	add	r1, sp, #28
 8013894:	47a0      	blx	r4
 8013896:	b968      	cbnz	r0, 80138b4 <listen_message_reliably+0x168>
 8013898:	9b05      	ldr	r3, [sp, #20]
 801389a:	eba3 0309 	sub.w	r3, r3, r9
 801389e:	2b00      	cmp	r3, #0
 80138a0:	9305      	str	r3, [sp, #20]
 80138a2:	f73f af5c 	bgt.w	801375e <listen_message_reliably+0x12>
 80138a6:	4604      	mov	r4, r0
 80138a8:	4620      	mov	r0, r4
 80138aa:	b01d      	add	sp, #116	@ 0x74
 80138ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138b0:	9b05      	ldr	r3, [sp, #20]
 80138b2:	e7e0      	b.n	8013876 <listen_message_reliably+0x12a>
 80138b4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80138b8:	4604      	mov	r4, r0
 80138ba:	a80c      	add	r0, sp, #48	@ 0x30
 80138bc:	f7ff f940 	bl	8012b40 <ucdr_init_buffer>
 80138c0:	2500      	movs	r5, #0
 80138c2:	f10d 031a 	add.w	r3, sp, #26
 80138c6:	aa06      	add	r2, sp, #24
 80138c8:	a90c      	add	r1, sp, #48	@ 0x30
 80138ca:	4640      	mov	r0, r8
 80138cc:	f88d 5018 	strb.w	r5, [sp, #24]
 80138d0:	f000 fbf0 	bl	80140b4 <uxr_read_session_header>
 80138d4:	b918      	cbnz	r0, 80138de <listen_message_reliably+0x192>
 80138d6:	4620      	mov	r0, r4
 80138d8:	b01d      	add	sp, #116	@ 0x74
 80138da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138de:	4629      	mov	r1, r5
 80138e0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80138e4:	f000 fc8a 	bl	80141fc <uxr_stream_id_from_raw>
 80138e8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80138ec:	2d01      	cmp	r5, #1
 80138ee:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80138f2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80138f6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80138fa:	d04b      	beq.n	8013994 <listen_message_reliably+0x248>
 80138fc:	2d02      	cmp	r5, #2
 80138fe:	d00f      	beq.n	8013920 <listen_message_reliably+0x1d4>
 8013900:	2d00      	cmp	r5, #0
 8013902:	d1e8      	bne.n	80138d6 <listen_message_reliably+0x18a>
 8013904:	4629      	mov	r1, r5
 8013906:	4628      	mov	r0, r5
 8013908:	f000 fc78 	bl	80141fc <uxr_stream_id_from_raw>
 801390c:	a90c      	add	r1, sp, #48	@ 0x30
 801390e:	4602      	mov	r2, r0
 8013910:	4640      	mov	r0, r8
 8013912:	920a      	str	r2, [sp, #40]	@ 0x28
 8013914:	f7ff fd92 	bl	801343c <read_submessage_list>
 8013918:	4620      	mov	r0, r4
 801391a:	b01d      	add	sp, #116	@ 0x74
 801391c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013920:	4631      	mov	r1, r6
 8013922:	f108 0008 	add.w	r0, r8, #8
 8013926:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 801392a:	f000 fd55 	bl	80143d8 <uxr_get_input_reliable_stream>
 801392e:	4607      	mov	r7, r0
 8013930:	b338      	cbz	r0, 8013982 <listen_message_reliably+0x236>
 8013932:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013934:	9203      	str	r2, [sp, #12]
 8013936:	a80c      	add	r0, sp, #48	@ 0x30
 8013938:	f7ff f932 	bl	8012ba0 <ucdr_buffer_remaining>
 801393c:	4603      	mov	r3, r0
 801393e:	f10d 0019 	add.w	r0, sp, #25
 8013942:	9000      	str	r0, [sp, #0]
 8013944:	9a03      	ldr	r2, [sp, #12]
 8013946:	4651      	mov	r1, sl
 8013948:	4638      	mov	r0, r7
 801394a:	f006 fdf1 	bl	801a530 <uxr_receive_reliable_message>
 801394e:	b1c0      	cbz	r0, 8013982 <listen_message_reliably+0x236>
 8013950:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013954:	b393      	cbz	r3, 80139bc <listen_message_reliably+0x270>
 8013956:	ad14      	add	r5, sp, #80	@ 0x50
 8013958:	f04f 0a02 	mov.w	sl, #2
 801395c:	e00a      	b.n	8013974 <listen_message_reliably+0x228>
 801395e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8013962:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8013966:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801396a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801396c:	4629      	mov	r1, r5
 801396e:	4640      	mov	r0, r8
 8013970:	f7ff fd64 	bl	801343c <read_submessage_list>
 8013974:	2204      	movs	r2, #4
 8013976:	4629      	mov	r1, r5
 8013978:	4638      	mov	r0, r7
 801397a:	f006 fe59 	bl	801a630 <uxr_next_input_reliable_buffer_available>
 801397e:	2800      	cmp	r0, #0
 8013980:	d1ed      	bne.n	801395e <listen_message_reliably+0x212>
 8013982:	4640      	mov	r0, r8
 8013984:	4632      	mov	r2, r6
 8013986:	4649      	mov	r1, r9
 8013988:	f7ff fbd4 	bl	8013134 <write_submessage_acknack.isra.0>
 801398c:	4620      	mov	r0, r4
 801398e:	b01d      	add	sp, #116	@ 0x74
 8013990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013994:	4631      	mov	r1, r6
 8013996:	f108 0008 	add.w	r0, r8, #8
 801399a:	f000 fd13 	bl	80143c4 <uxr_get_input_best_effort_stream>
 801399e:	2800      	cmp	r0, #0
 80139a0:	d099      	beq.n	80138d6 <listen_message_reliably+0x18a>
 80139a2:	4651      	mov	r1, sl
 80139a4:	f006 fd30 	bl	801a408 <uxr_receive_best_effort_message>
 80139a8:	2800      	cmp	r0, #0
 80139aa:	d094      	beq.n	80138d6 <listen_message_reliably+0x18a>
 80139ac:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80139b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80139b2:	a90c      	add	r1, sp, #48	@ 0x30
 80139b4:	4640      	mov	r0, r8
 80139b6:	f7ff fd41 	bl	801343c <read_submessage_list>
 80139ba:	e78c      	b.n	80138d6 <listen_message_reliably+0x18a>
 80139bc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80139c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80139c2:	a90c      	add	r1, sp, #48	@ 0x30
 80139c4:	4640      	mov	r0, r8
 80139c6:	f7ff fd39 	bl	801343c <read_submessage_list>
 80139ca:	e7c4      	b.n	8013956 <listen_message_reliably+0x20a>

080139cc <uxr_run_session_timeout>:
 80139cc:	b570      	push	{r4, r5, r6, lr}
 80139ce:	4604      	mov	r4, r0
 80139d0:	460d      	mov	r5, r1
 80139d2:	f000 fd67 	bl	80144a4 <uxr_millis>
 80139d6:	4606      	mov	r6, r0
 80139d8:	4620      	mov	r0, r4
 80139da:	f7ff fc71 	bl	80132c0 <uxr_flash_output_streams>
 80139de:	4629      	mov	r1, r5
 80139e0:	4620      	mov	r0, r4
 80139e2:	f7ff feb3 	bl	801374c <listen_message_reliably>
 80139e6:	f000 fd5d 	bl	80144a4 <uxr_millis>
 80139ea:	1b83      	subs	r3, r0, r6
 80139ec:	1ae9      	subs	r1, r5, r3
 80139ee:	2900      	cmp	r1, #0
 80139f0:	dcf6      	bgt.n	80139e0 <uxr_run_session_timeout+0x14>
 80139f2:	f104 0008 	add.w	r0, r4, #8
 80139f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139fa:	f000 bcf7 	b.w	80143ec <uxr_output_streams_confirmed>
 80139fe:	bf00      	nop

08013a00 <uxr_run_session_until_data>:
 8013a00:	b570      	push	{r4, r5, r6, lr}
 8013a02:	4604      	mov	r4, r0
 8013a04:	460d      	mov	r5, r1
 8013a06:	f000 fd4d 	bl	80144a4 <uxr_millis>
 8013a0a:	4606      	mov	r6, r0
 8013a0c:	4620      	mov	r0, r4
 8013a0e:	f7ff fc57 	bl	80132c0 <uxr_flash_output_streams>
 8013a12:	2300      	movs	r3, #0
 8013a14:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8013a18:	4629      	mov	r1, r5
 8013a1a:	e005      	b.n	8013a28 <uxr_run_session_until_data+0x28>
 8013a1c:	f000 fd42 	bl	80144a4 <uxr_millis>
 8013a20:	1b83      	subs	r3, r0, r6
 8013a22:	1ae9      	subs	r1, r5, r3
 8013a24:	2900      	cmp	r1, #0
 8013a26:	dd07      	ble.n	8013a38 <uxr_run_session_until_data+0x38>
 8013a28:	4620      	mov	r0, r4
 8013a2a:	f7ff fe8f 	bl	801374c <listen_message_reliably>
 8013a2e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013a32:	2800      	cmp	r0, #0
 8013a34:	d0f2      	beq.n	8013a1c <uxr_run_session_until_data+0x1c>
 8013a36:	bd70      	pop	{r4, r5, r6, pc}
 8013a38:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013a3c:	bd70      	pop	{r4, r5, r6, pc}
 8013a3e:	bf00      	nop

08013a40 <uxr_run_session_until_confirm_delivery>:
 8013a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a44:	4606      	mov	r6, r0
 8013a46:	460d      	mov	r5, r1
 8013a48:	f000 fd2c 	bl	80144a4 <uxr_millis>
 8013a4c:	4607      	mov	r7, r0
 8013a4e:	4630      	mov	r0, r6
 8013a50:	f7ff fc36 	bl	80132c0 <uxr_flash_output_streams>
 8013a54:	2d00      	cmp	r5, #0
 8013a56:	f106 0808 	add.w	r8, r6, #8
 8013a5a:	bfa8      	it	ge
 8013a5c:	462c      	movge	r4, r5
 8013a5e:	da07      	bge.n	8013a70 <uxr_run_session_until_confirm_delivery+0x30>
 8013a60:	e00e      	b.n	8013a80 <uxr_run_session_until_confirm_delivery+0x40>
 8013a62:	f7ff fe73 	bl	801374c <listen_message_reliably>
 8013a66:	f000 fd1d 	bl	80144a4 <uxr_millis>
 8013a6a:	1bc3      	subs	r3, r0, r7
 8013a6c:	1aec      	subs	r4, r5, r3
 8013a6e:	d407      	bmi.n	8013a80 <uxr_run_session_until_confirm_delivery+0x40>
 8013a70:	4640      	mov	r0, r8
 8013a72:	f000 fcbb 	bl	80143ec <uxr_output_streams_confirmed>
 8013a76:	4603      	mov	r3, r0
 8013a78:	4621      	mov	r1, r4
 8013a7a:	4630      	mov	r0, r6
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d0f0      	beq.n	8013a62 <uxr_run_session_until_confirm_delivery+0x22>
 8013a80:	4640      	mov	r0, r8
 8013a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a86:	f000 bcb1 	b.w	80143ec <uxr_output_streams_confirmed>
 8013a8a:	bf00      	nop

08013a8c <uxr_run_session_until_all_status>:
 8013a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a90:	9c08      	ldr	r4, [sp, #32]
 8013a92:	4606      	mov	r6, r0
 8013a94:	460f      	mov	r7, r1
 8013a96:	4691      	mov	r9, r2
 8013a98:	461d      	mov	r5, r3
 8013a9a:	f7ff fc11 	bl	80132c0 <uxr_flash_output_streams>
 8013a9e:	b124      	cbz	r4, 8013aaa <uxr_run_session_until_all_status+0x1e>
 8013aa0:	4622      	mov	r2, r4
 8013aa2:	21ff      	movs	r1, #255	@ 0xff
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	f009 f90f 	bl	801ccc8 <memset>
 8013aaa:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8013aae:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8013ab0:	f000 fcf8 	bl	80144a4 <uxr_millis>
 8013ab4:	3d01      	subs	r5, #1
 8013ab6:	f1a9 0902 	sub.w	r9, r9, #2
 8013aba:	4680      	mov	r8, r0
 8013abc:	4639      	mov	r1, r7
 8013abe:	4630      	mov	r0, r6
 8013ac0:	f7ff fe44 	bl	801374c <listen_message_reliably>
 8013ac4:	f000 fcee 	bl	80144a4 <uxr_millis>
 8013ac8:	eba0 0008 	sub.w	r0, r0, r8
 8013acc:	1a39      	subs	r1, r7, r0
 8013ace:	b344      	cbz	r4, 8013b22 <uxr_run_session_until_all_status+0x96>
 8013ad0:	4628      	mov	r0, r5
 8013ad2:	46ac      	mov	ip, r5
 8013ad4:	2301      	movs	r3, #1
 8013ad6:	e002      	b.n	8013ade <uxr_run_session_until_all_status+0x52>
 8013ad8:	42a3      	cmp	r3, r4
 8013ada:	d20d      	bcs.n	8013af8 <uxr_run_session_until_all_status+0x6c>
 8013adc:	3301      	adds	r3, #1
 8013ade:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8013ae2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8013ae6:	d1f7      	bne.n	8013ad8 <uxr_run_session_until_all_status+0x4c>
 8013ae8:	42a3      	cmp	r3, r4
 8013aea:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8013aee:	d213      	bcs.n	8013b18 <uxr_run_session_until_all_status+0x8c>
 8013af0:	2a00      	cmp	r2, #0
 8013af2:	d0f3      	beq.n	8013adc <uxr_run_session_until_all_status+0x50>
 8013af4:	2900      	cmp	r1, #0
 8013af6:	dce2      	bgt.n	8013abe <uxr_run_session_until_all_status+0x32>
 8013af8:	2300      	movs	r3, #0
 8013afa:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8013afc:	442c      	add	r4, r5
 8013afe:	e001      	b.n	8013b04 <uxr_run_session_until_all_status+0x78>
 8013b00:	2b01      	cmp	r3, #1
 8013b02:	d812      	bhi.n	8013b2a <uxr_run_session_until_all_status+0x9e>
 8013b04:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013b08:	4284      	cmp	r4, r0
 8013b0a:	d1f9      	bne.n	8013b00 <uxr_run_session_until_all_status+0x74>
 8013b0c:	2b01      	cmp	r3, #1
 8013b0e:	bf8c      	ite	hi
 8013b10:	2000      	movhi	r0, #0
 8013b12:	2001      	movls	r0, #1
 8013b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b18:	2900      	cmp	r1, #0
 8013b1a:	dded      	ble.n	8013af8 <uxr_run_session_until_all_status+0x6c>
 8013b1c:	2a00      	cmp	r2, #0
 8013b1e:	d1ce      	bne.n	8013abe <uxr_run_session_until_all_status+0x32>
 8013b20:	e7ea      	b.n	8013af8 <uxr_run_session_until_all_status+0x6c>
 8013b22:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8013b24:	2001      	movs	r0, #1
 8013b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b2a:	2000      	movs	r0, #0
 8013b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013b30 <wait_session_status>:
 8013b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b34:	4604      	mov	r4, r0
 8013b36:	b09d      	sub	sp, #116	@ 0x74
 8013b38:	20ff      	movs	r0, #255	@ 0xff
 8013b3a:	7160      	strb	r0, [r4, #5]
 8013b3c:	9303      	str	r3, [sp, #12]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	f000 80b6 	beq.w	8013cb0 <wait_session_status+0x180>
 8013b44:	468a      	mov	sl, r1
 8013b46:	4691      	mov	r9, r2
 8013b48:	f04f 0b00 	mov.w	fp, #0
 8013b4c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013b4e:	464a      	mov	r2, r9
 8013b50:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013b54:	4651      	mov	r1, sl
 8013b56:	47a8      	blx	r5
 8013b58:	f000 fca4 	bl	80144a4 <uxr_millis>
 8013b5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013b60:	4605      	mov	r5, r0
 8013b62:	e009      	b.n	8013b78 <wait_session_status+0x48>
 8013b64:	f000 fc9e 	bl	80144a4 <uxr_millis>
 8013b68:	1b40      	subs	r0, r0, r5
 8013b6a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	dd40      	ble.n	8013bf4 <wait_session_status+0xc4>
 8013b72:	7960      	ldrb	r0, [r4, #5]
 8013b74:	28ff      	cmp	r0, #255	@ 0xff
 8013b76:	d145      	bne.n	8013c04 <wait_session_status+0xd4>
 8013b78:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8013b7a:	a908      	add	r1, sp, #32
 8013b7c:	6896      	ldr	r6, [r2, #8]
 8013b7e:	6810      	ldr	r0, [r2, #0]
 8013b80:	aa09      	add	r2, sp, #36	@ 0x24
 8013b82:	47b0      	blx	r6
 8013b84:	2800      	cmp	r0, #0
 8013b86:	d0ed      	beq.n	8013b64 <wait_session_status+0x34>
 8013b88:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8013b8c:	a80c      	add	r0, sp, #48	@ 0x30
 8013b8e:	f7fe ffd7 	bl	8012b40 <ucdr_init_buffer>
 8013b92:	2600      	movs	r6, #0
 8013b94:	f10d 031e 	add.w	r3, sp, #30
 8013b98:	aa07      	add	r2, sp, #28
 8013b9a:	a90c      	add	r1, sp, #48	@ 0x30
 8013b9c:	4620      	mov	r0, r4
 8013b9e:	f88d 601c 	strb.w	r6, [sp, #28]
 8013ba2:	f000 fa87 	bl	80140b4 <uxr_read_session_header>
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	d0dc      	beq.n	8013b64 <wait_session_status+0x34>
 8013baa:	4631      	mov	r1, r6
 8013bac:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8013bb0:	f000 fb24 	bl	80141fc <uxr_stream_id_from_raw>
 8013bb4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013bb8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013bbc:	9302      	str	r3, [sp, #8]
 8013bbe:	2f01      	cmp	r7, #1
 8013bc0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8013bc4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013bc8:	d05c      	beq.n	8013c84 <wait_session_status+0x154>
 8013bca:	2f02      	cmp	r7, #2
 8013bcc:	d020      	beq.n	8013c10 <wait_session_status+0xe0>
 8013bce:	2f00      	cmp	r7, #0
 8013bd0:	d1c8      	bne.n	8013b64 <wait_session_status+0x34>
 8013bd2:	4639      	mov	r1, r7
 8013bd4:	4638      	mov	r0, r7
 8013bd6:	f000 fb11 	bl	80141fc <uxr_stream_id_from_raw>
 8013bda:	a90c      	add	r1, sp, #48	@ 0x30
 8013bdc:	4602      	mov	r2, r0
 8013bde:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013be0:	4620      	mov	r0, r4
 8013be2:	f7ff fc2b 	bl	801343c <read_submessage_list>
 8013be6:	f000 fc5d 	bl	80144a4 <uxr_millis>
 8013bea:	1b40      	subs	r0, r0, r5
 8013bec:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	dcbe      	bgt.n	8013b72 <wait_session_status+0x42>
 8013bf4:	9b03      	ldr	r3, [sp, #12]
 8013bf6:	7960      	ldrb	r0, [r4, #5]
 8013bf8:	f10b 0b01 	add.w	fp, fp, #1
 8013bfc:	455b      	cmp	r3, fp
 8013bfe:	d001      	beq.n	8013c04 <wait_session_status+0xd4>
 8013c00:	28ff      	cmp	r0, #255	@ 0xff
 8013c02:	d0a3      	beq.n	8013b4c <wait_session_status+0x1c>
 8013c04:	38ff      	subs	r0, #255	@ 0xff
 8013c06:	bf18      	it	ne
 8013c08:	2001      	movne	r0, #1
 8013c0a:	b01d      	add	sp, #116	@ 0x74
 8013c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c10:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8013c14:	9304      	str	r3, [sp, #16]
 8013c16:	4631      	mov	r1, r6
 8013c18:	f104 0008 	add.w	r0, r4, #8
 8013c1c:	f000 fbdc 	bl	80143d8 <uxr_get_input_reliable_stream>
 8013c20:	4680      	mov	r8, r0
 8013c22:	b348      	cbz	r0, 8013c78 <wait_session_status+0x148>
 8013c24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013c26:	9205      	str	r2, [sp, #20]
 8013c28:	a80c      	add	r0, sp, #48	@ 0x30
 8013c2a:	f7fe ffb9 	bl	8012ba0 <ucdr_buffer_remaining>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	f10d 001d 	add.w	r0, sp, #29
 8013c34:	9000      	str	r0, [sp, #0]
 8013c36:	9a05      	ldr	r2, [sp, #20]
 8013c38:	9902      	ldr	r1, [sp, #8]
 8013c3a:	4640      	mov	r0, r8
 8013c3c:	f006 fc78 	bl	801a530 <uxr_receive_reliable_message>
 8013c40:	b1d0      	cbz	r0, 8013c78 <wait_session_status+0x148>
 8013c42:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d03a      	beq.n	8013cc0 <wait_session_status+0x190>
 8013c4a:	9f04      	ldr	r7, [sp, #16]
 8013c4c:	e00a      	b.n	8013c64 <wait_session_status+0x134>
 8013c4e:	f04f 0302 	mov.w	r3, #2
 8013c52:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8013c56:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8013c5a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8013c5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013c60:	f7ff fbec 	bl	801343c <read_submessage_list>
 8013c64:	a914      	add	r1, sp, #80	@ 0x50
 8013c66:	2204      	movs	r2, #4
 8013c68:	4640      	mov	r0, r8
 8013c6a:	f006 fce1 	bl	801a630 <uxr_next_input_reliable_buffer_available>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	a914      	add	r1, sp, #80	@ 0x50
 8013c72:	4620      	mov	r0, r4
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d1ea      	bne.n	8013c4e <wait_session_status+0x11e>
 8013c78:	9904      	ldr	r1, [sp, #16]
 8013c7a:	4632      	mov	r2, r6
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	f7ff fa59 	bl	8013134 <write_submessage_acknack.isra.0>
 8013c82:	e76f      	b.n	8013b64 <wait_session_status+0x34>
 8013c84:	4631      	mov	r1, r6
 8013c86:	f104 0008 	add.w	r0, r4, #8
 8013c8a:	f000 fb9b 	bl	80143c4 <uxr_get_input_best_effort_stream>
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	f43f af68 	beq.w	8013b64 <wait_session_status+0x34>
 8013c94:	9902      	ldr	r1, [sp, #8]
 8013c96:	f006 fbb7 	bl	801a408 <uxr_receive_best_effort_message>
 8013c9a:	2800      	cmp	r0, #0
 8013c9c:	f43f af62 	beq.w	8013b64 <wait_session_status+0x34>
 8013ca0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8013ca4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013ca6:	a90c      	add	r1, sp, #48	@ 0x30
 8013ca8:	4620      	mov	r0, r4
 8013caa:	f7ff fbc7 	bl	801343c <read_submessage_list>
 8013cae:	e759      	b.n	8013b64 <wait_session_status+0x34>
 8013cb0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013cb2:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013cb6:	47a0      	blx	r4
 8013cb8:	2001      	movs	r0, #1
 8013cba:	b01d      	add	sp, #116	@ 0x74
 8013cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8013cc4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013cc6:	a90c      	add	r1, sp, #48	@ 0x30
 8013cc8:	4620      	mov	r0, r4
 8013cca:	f7ff fbb7 	bl	801343c <read_submessage_list>
 8013cce:	e7bc      	b.n	8013c4a <wait_session_status+0x11a>

08013cd0 <uxr_delete_session_retries>:
 8013cd0:	b530      	push	{r4, r5, lr}
 8013cd2:	b08f      	sub	sp, #60	@ 0x3c
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	460d      	mov	r5, r1
 8013cd8:	f000 fa2e 	bl	8014138 <uxr_session_header_offset>
 8013cdc:	2300      	movs	r3, #0
 8013cde:	2210      	movs	r2, #16
 8013ce0:	9000      	str	r0, [sp, #0]
 8013ce2:	a902      	add	r1, sp, #8
 8013ce4:	a806      	add	r0, sp, #24
 8013ce6:	f7fe ff19 	bl	8012b1c <ucdr_init_buffer_origin_offset>
 8013cea:	a906      	add	r1, sp, #24
 8013cec:	4620      	mov	r0, r4
 8013cee:	f000 f973 	bl	8013fd8 <uxr_buffer_delete_session>
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	4611      	mov	r1, r2
 8013cf6:	9b06      	ldr	r3, [sp, #24]
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f000 f9c7 	bl	801408c <uxr_stamp_session_header>
 8013cfe:	a806      	add	r0, sp, #24
 8013d00:	f7fe ff4a 	bl	8012b98 <ucdr_buffer_length>
 8013d04:	462b      	mov	r3, r5
 8013d06:	4602      	mov	r2, r0
 8013d08:	a902      	add	r1, sp, #8
 8013d0a:	4620      	mov	r0, r4
 8013d0c:	f7ff ff10 	bl	8013b30 <wait_session_status>
 8013d10:	b118      	cbz	r0, 8013d1a <uxr_delete_session_retries+0x4a>
 8013d12:	7960      	ldrb	r0, [r4, #5]
 8013d14:	fab0 f080 	clz	r0, r0
 8013d18:	0940      	lsrs	r0, r0, #5
 8013d1a:	b00f      	add	sp, #60	@ 0x3c
 8013d1c:	bd30      	pop	{r4, r5, pc}
 8013d1e:	bf00      	nop

08013d20 <uxr_create_session>:
 8013d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d24:	f100 0b08 	add.w	fp, r0, #8
 8013d28:	b0ab      	sub	sp, #172	@ 0xac
 8013d2a:	4604      	mov	r4, r0
 8013d2c:	4658      	mov	r0, fp
 8013d2e:	f000 fa99 	bl	8014264 <uxr_reset_stream_storage>
 8013d32:	4620      	mov	r0, r4
 8013d34:	f000 fa00 	bl	8014138 <uxr_session_header_offset>
 8013d38:	2300      	movs	r3, #0
 8013d3a:	9000      	str	r0, [sp, #0]
 8013d3c:	221c      	movs	r2, #28
 8013d3e:	a90b      	add	r1, sp, #44	@ 0x2c
 8013d40:	a812      	add	r0, sp, #72	@ 0x48
 8013d42:	f7fe feeb 	bl	8012b1c <ucdr_init_buffer_origin_offset>
 8013d46:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013d48:	8a1a      	ldrh	r2, [r3, #16]
 8013d4a:	3a04      	subs	r2, #4
 8013d4c:	b292      	uxth	r2, r2
 8013d4e:	a912      	add	r1, sp, #72	@ 0x48
 8013d50:	4620      	mov	r0, r4
 8013d52:	f000 f917 	bl	8013f84 <uxr_buffer_create_session>
 8013d56:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013d58:	4620      	mov	r0, r4
 8013d5a:	f000 f983 	bl	8014064 <uxr_stamp_create_session_header>
 8013d5e:	a812      	add	r0, sp, #72	@ 0x48
 8013d60:	f7fe ff1a 	bl	8012b98 <ucdr_buffer_length>
 8013d64:	23ff      	movs	r3, #255	@ 0xff
 8013d66:	7163      	strb	r3, [r4, #5]
 8013d68:	230a      	movs	r3, #10
 8013d6a:	46da      	mov	sl, fp
 8013d6c:	9303      	str	r3, [sp, #12]
 8013d6e:	4683      	mov	fp, r0
 8013d70:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013d72:	465a      	mov	r2, fp
 8013d74:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013d78:	a90b      	add	r1, sp, #44	@ 0x2c
 8013d7a:	47a8      	blx	r5
 8013d7c:	f000 fb92 	bl	80144a4 <uxr_millis>
 8013d80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013d84:	4605      	mov	r5, r0
 8013d86:	e009      	b.n	8013d9c <uxr_create_session+0x7c>
 8013d88:	f000 fb8c 	bl	80144a4 <uxr_millis>
 8013d8c:	1b40      	subs	r0, r0, r5
 8013d8e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	7962      	ldrb	r2, [r4, #5]
 8013d96:	dd38      	ble.n	8013e0a <uxr_create_session+0xea>
 8013d98:	2aff      	cmp	r2, #255	@ 0xff
 8013d9a:	d13c      	bne.n	8013e16 <uxr_create_session+0xf6>
 8013d9c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8013d9e:	a907      	add	r1, sp, #28
 8013da0:	6896      	ldr	r6, [r2, #8]
 8013da2:	6810      	ldr	r0, [r2, #0]
 8013da4:	aa08      	add	r2, sp, #32
 8013da6:	47b0      	blx	r6
 8013da8:	2800      	cmp	r0, #0
 8013daa:	d0ed      	beq.n	8013d88 <uxr_create_session+0x68>
 8013dac:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013db0:	a81a      	add	r0, sp, #104	@ 0x68
 8013db2:	f7fe fec5 	bl	8012b40 <ucdr_init_buffer>
 8013db6:	2600      	movs	r6, #0
 8013db8:	f10d 031a 	add.w	r3, sp, #26
 8013dbc:	aa06      	add	r2, sp, #24
 8013dbe:	a91a      	add	r1, sp, #104	@ 0x68
 8013dc0:	4620      	mov	r0, r4
 8013dc2:	f88d 6018 	strb.w	r6, [sp, #24]
 8013dc6:	f000 f975 	bl	80140b4 <uxr_read_session_header>
 8013dca:	2800      	cmp	r0, #0
 8013dcc:	d0dc      	beq.n	8013d88 <uxr_create_session+0x68>
 8013dce:	4631      	mov	r1, r6
 8013dd0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013dd4:	f000 fa12 	bl	80141fc <uxr_stream_id_from_raw>
 8013dd8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8013ddc:	2e01      	cmp	r6, #1
 8013dde:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013de2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8013de6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8013dea:	d053      	beq.n	8013e94 <uxr_create_session+0x174>
 8013dec:	2e02      	cmp	r6, #2
 8013dee:	d018      	beq.n	8013e22 <uxr_create_session+0x102>
 8013df0:	2e00      	cmp	r6, #0
 8013df2:	d1c9      	bne.n	8013d88 <uxr_create_session+0x68>
 8013df4:	4631      	mov	r1, r6
 8013df6:	4630      	mov	r0, r6
 8013df8:	f000 fa00 	bl	80141fc <uxr_stream_id_from_raw>
 8013dfc:	a91a      	add	r1, sp, #104	@ 0x68
 8013dfe:	4602      	mov	r2, r0
 8013e00:	900a      	str	r0, [sp, #40]	@ 0x28
 8013e02:	4620      	mov	r0, r4
 8013e04:	f7ff fb1a 	bl	801343c <read_submessage_list>
 8013e08:	e7be      	b.n	8013d88 <uxr_create_session+0x68>
 8013e0a:	9b03      	ldr	r3, [sp, #12]
 8013e0c:	3b01      	subs	r3, #1
 8013e0e:	9303      	str	r3, [sp, #12]
 8013e10:	d001      	beq.n	8013e16 <uxr_create_session+0xf6>
 8013e12:	2aff      	cmp	r2, #255	@ 0xff
 8013e14:	d0ac      	beq.n	8013d70 <uxr_create_session+0x50>
 8013e16:	2a00      	cmp	r2, #0
 8013e18:	d051      	beq.n	8013ebe <uxr_create_session+0x19e>
 8013e1a:	2000      	movs	r0, #0
 8013e1c:	b02b      	add	sp, #172	@ 0xac
 8013e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e22:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013e26:	9304      	str	r3, [sp, #16]
 8013e28:	4639      	mov	r1, r7
 8013e2a:	4650      	mov	r0, sl
 8013e2c:	f000 fad4 	bl	80143d8 <uxr_get_input_reliable_stream>
 8013e30:	4680      	mov	r8, r0
 8013e32:	b348      	cbz	r0, 8013e88 <uxr_create_session+0x168>
 8013e34:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013e36:	9205      	str	r2, [sp, #20]
 8013e38:	a81a      	add	r0, sp, #104	@ 0x68
 8013e3a:	f7fe feb1 	bl	8012ba0 <ucdr_buffer_remaining>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	f10d 0019 	add.w	r0, sp, #25
 8013e44:	9000      	str	r0, [sp, #0]
 8013e46:	9a05      	ldr	r2, [sp, #20]
 8013e48:	4649      	mov	r1, r9
 8013e4a:	4640      	mov	r0, r8
 8013e4c:	f006 fb70 	bl	801a530 <uxr_receive_reliable_message>
 8013e50:	b1d0      	cbz	r0, 8013e88 <uxr_create_session+0x168>
 8013e52:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d038      	beq.n	8013ecc <uxr_create_session+0x1ac>
 8013e5a:	9e04      	ldr	r6, [sp, #16]
 8013e5c:	e00a      	b.n	8013e74 <uxr_create_session+0x154>
 8013e5e:	f04f 0302 	mov.w	r3, #2
 8013e62:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8013e66:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8013e6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013e6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013e70:	f7ff fae4 	bl	801343c <read_submessage_list>
 8013e74:	a922      	add	r1, sp, #136	@ 0x88
 8013e76:	2204      	movs	r2, #4
 8013e78:	4640      	mov	r0, r8
 8013e7a:	f006 fbd9 	bl	801a630 <uxr_next_input_reliable_buffer_available>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	a922      	add	r1, sp, #136	@ 0x88
 8013e82:	4620      	mov	r0, r4
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d1ea      	bne.n	8013e5e <uxr_create_session+0x13e>
 8013e88:	9904      	ldr	r1, [sp, #16]
 8013e8a:	463a      	mov	r2, r7
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	f7ff f951 	bl	8013134 <write_submessage_acknack.isra.0>
 8013e92:	e779      	b.n	8013d88 <uxr_create_session+0x68>
 8013e94:	4639      	mov	r1, r7
 8013e96:	4650      	mov	r0, sl
 8013e98:	f000 fa94 	bl	80143c4 <uxr_get_input_best_effort_stream>
 8013e9c:	2800      	cmp	r0, #0
 8013e9e:	f43f af73 	beq.w	8013d88 <uxr_create_session+0x68>
 8013ea2:	4649      	mov	r1, r9
 8013ea4:	f006 fab0 	bl	801a408 <uxr_receive_best_effort_message>
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	f43f af6d 	beq.w	8013d88 <uxr_create_session+0x68>
 8013eae:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8013eb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013eb4:	a91a      	add	r1, sp, #104	@ 0x68
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	f7ff fac0 	bl	801343c <read_submessage_list>
 8013ebc:	e764      	b.n	8013d88 <uxr_create_session+0x68>
 8013ebe:	4650      	mov	r0, sl
 8013ec0:	f000 f9d0 	bl	8014264 <uxr_reset_stream_storage>
 8013ec4:	2001      	movs	r0, #1
 8013ec6:	b02b      	add	sp, #172	@ 0xac
 8013ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ecc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8013ed0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013ed2:	a91a      	add	r1, sp, #104	@ 0x68
 8013ed4:	4620      	mov	r0, r4
 8013ed6:	f7ff fab1 	bl	801343c <read_submessage_list>
 8013eda:	e7be      	b.n	8013e5a <uxr_create_session+0x13a>

08013edc <uxr_prepare_stream_to_write_submessage>:
 8013edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ee0:	b082      	sub	sp, #8
 8013ee2:	4682      	mov	sl, r0
 8013ee4:	4610      	mov	r0, r2
 8013ee6:	4615      	mov	r5, r2
 8013ee8:	461e      	mov	r6, r3
 8013eea:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8013eee:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8013ef2:	9101      	str	r1, [sp, #4]
 8013ef4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8013ef8:	f000 face 	bl	8014498 <uxr_submessage_padding>
 8013efc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013f00:	f105 0904 	add.w	r9, r5, #4
 8013f04:	2b01      	cmp	r3, #1
 8013f06:	4481      	add	r9, r0
 8013f08:	d01d      	beq.n	8013f46 <uxr_prepare_stream_to_write_submessage+0x6a>
 8013f0a:	2b02      	cmp	r3, #2
 8013f0c:	d116      	bne.n	8013f3c <uxr_prepare_stream_to_write_submessage+0x60>
 8013f0e:	4621      	mov	r1, r4
 8013f10:	f10a 0008 	add.w	r0, sl, #8
 8013f14:	f000 fa4c 	bl	80143b0 <uxr_get_output_reliable_stream>
 8013f18:	4604      	mov	r4, r0
 8013f1a:	b158      	cbz	r0, 8013f34 <uxr_prepare_stream_to_write_submessage+0x58>
 8013f1c:	4649      	mov	r1, r9
 8013f1e:	4632      	mov	r2, r6
 8013f20:	f006 fd42 	bl	801a9a8 <uxr_prepare_reliable_buffer_to_write>
 8013f24:	4604      	mov	r4, r0
 8013f26:	b12c      	cbz	r4, 8013f34 <uxr_prepare_stream_to_write_submessage+0x58>
 8013f28:	4643      	mov	r3, r8
 8013f2a:	b2aa      	uxth	r2, r5
 8013f2c:	4639      	mov	r1, r7
 8013f2e:	4630      	mov	r0, r6
 8013f30:	f000 fa72 	bl	8014418 <uxr_buffer_submessage_header>
 8013f34:	4620      	mov	r0, r4
 8013f36:	b002      	add	sp, #8
 8013f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f3c:	2400      	movs	r4, #0
 8013f3e:	4620      	mov	r0, r4
 8013f40:	b002      	add	sp, #8
 8013f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f46:	4621      	mov	r1, r4
 8013f48:	f10a 0008 	add.w	r0, sl, #8
 8013f4c:	f000 fa28 	bl	80143a0 <uxr_get_output_best_effort_stream>
 8013f50:	4604      	mov	r4, r0
 8013f52:	2800      	cmp	r0, #0
 8013f54:	d0ee      	beq.n	8013f34 <uxr_prepare_stream_to_write_submessage+0x58>
 8013f56:	4649      	mov	r1, r9
 8013f58:	4632      	mov	r2, r6
 8013f5a:	f006 fc55 	bl	801a808 <uxr_prepare_best_effort_buffer_to_write>
 8013f5e:	4604      	mov	r4, r0
 8013f60:	e7e1      	b.n	8013f26 <uxr_prepare_stream_to_write_submessage+0x4a>
 8013f62:	bf00      	nop

08013f64 <uxr_init_session_info>:
 8013f64:	0e13      	lsrs	r3, r2, #24
 8013f66:	7043      	strb	r3, [r0, #1]
 8013f68:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8013f6c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013f70:	7001      	strb	r1, [r0, #0]
 8013f72:	70c3      	strb	r3, [r0, #3]
 8013f74:	2109      	movs	r1, #9
 8013f76:	23ff      	movs	r3, #255	@ 0xff
 8013f78:	f880 c002 	strb.w	ip, [r0, #2]
 8013f7c:	7102      	strb	r2, [r0, #4]
 8013f7e:	80c1      	strh	r1, [r0, #6]
 8013f80:	7143      	strb	r3, [r0, #5]
 8013f82:	4770      	bx	lr

08013f84 <uxr_buffer_create_session>:
 8013f84:	b530      	push	{r4, r5, lr}
 8013f86:	b089      	sub	sp, #36	@ 0x24
 8013f88:	2300      	movs	r3, #0
 8013f8a:	4d12      	ldr	r5, [pc, #72]	@ (8013fd4 <uxr_buffer_create_session+0x50>)
 8013f8c:	9307      	str	r3, [sp, #28]
 8013f8e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013f92:	2201      	movs	r2, #1
 8013f94:	9301      	str	r3, [sp, #4]
 8013f96:	80c2      	strh	r2, [r0, #6]
 8013f98:	f88d 2004 	strb.w	r2, [sp, #4]
 8013f9c:	682a      	ldr	r2, [r5, #0]
 8013f9e:	9200      	str	r2, [sp, #0]
 8013fa0:	88aa      	ldrh	r2, [r5, #4]
 8013fa2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013fa6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8013faa:	9202      	str	r2, [sp, #8]
 8013fac:	460c      	mov	r4, r1
 8013fae:	7802      	ldrb	r2, [r0, #0]
 8013fb0:	9303      	str	r3, [sp, #12]
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	f88d 200c 	strb.w	r2, [sp, #12]
 8013fb8:	4620      	mov	r0, r4
 8013fba:	2210      	movs	r2, #16
 8013fbc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8013fc0:	9306      	str	r3, [sp, #24]
 8013fc2:	f000 fa29 	bl	8014418 <uxr_buffer_submessage_header>
 8013fc6:	4669      	mov	r1, sp
 8013fc8:	4620      	mov	r0, r4
 8013fca:	f001 fa6d 	bl	80154a8 <uxr_serialize_CREATE_CLIENT_Payload>
 8013fce:	b009      	add	sp, #36	@ 0x24
 8013fd0:	bd30      	pop	{r4, r5, pc}
 8013fd2:	bf00      	nop
 8013fd4:	0801dc54 	.word	0x0801dc54

08013fd8 <uxr_buffer_delete_session>:
 8013fd8:	b510      	push	{r4, lr}
 8013fda:	4b0c      	ldr	r3, [pc, #48]	@ (801400c <uxr_buffer_delete_session+0x34>)
 8013fdc:	b082      	sub	sp, #8
 8013fde:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8013fe2:	f8ad c006 	strh.w	ip, [sp, #6]
 8013fe6:	460c      	mov	r4, r1
 8013fe8:	2202      	movs	r2, #2
 8013fea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013fee:	80c2      	strh	r2, [r0, #6]
 8013ff0:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013ff4:	2204      	movs	r2, #4
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	2103      	movs	r1, #3
 8013ffa:	4620      	mov	r0, r4
 8013ffc:	f000 fa0c 	bl	8014418 <uxr_buffer_submessage_header>
 8014000:	a901      	add	r1, sp, #4
 8014002:	4620      	mov	r0, r4
 8014004:	f001 faf6 	bl	80155f4 <uxr_serialize_DELETE_Payload>
 8014008:	b002      	add	sp, #8
 801400a:	bd10      	pop	{r4, pc}
 801400c:	0801dc54 	.word	0x0801dc54

08014010 <uxr_read_create_session_status>:
 8014010:	b510      	push	{r4, lr}
 8014012:	b088      	sub	sp, #32
 8014014:	4604      	mov	r4, r0
 8014016:	4608      	mov	r0, r1
 8014018:	a901      	add	r1, sp, #4
 801401a:	f001 fafb 	bl	8015614 <uxr_deserialize_STATUS_AGENT_Payload>
 801401e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014022:	7163      	strb	r3, [r4, #5]
 8014024:	b008      	add	sp, #32
 8014026:	bd10      	pop	{r4, pc}

08014028 <uxr_read_delete_session_status>:
 8014028:	b510      	push	{r4, lr}
 801402a:	4604      	mov	r4, r0
 801402c:	b084      	sub	sp, #16
 801402e:	4608      	mov	r0, r1
 8014030:	a902      	add	r1, sp, #8
 8014032:	f001 fb1f 	bl	8015674 <uxr_deserialize_STATUS_Payload>
 8014036:	88e3      	ldrh	r3, [r4, #6]
 8014038:	2b02      	cmp	r3, #2
 801403a:	d001      	beq.n	8014040 <uxr_read_delete_session_status+0x18>
 801403c:	b004      	add	sp, #16
 801403e:	bd10      	pop	{r4, pc}
 8014040:	f10d 000a 	add.w	r0, sp, #10
 8014044:	f7fe fffc 	bl	8013040 <uxr_object_id_from_raw>
 8014048:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801404c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8014050:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014054:	b29b      	uxth	r3, r3
 8014056:	2b02      	cmp	r3, #2
 8014058:	bf04      	itt	eq
 801405a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801405e:	7163      	strbeq	r3, [r4, #5]
 8014060:	b004      	add	sp, #16
 8014062:	bd10      	pop	{r4, pc}

08014064 <uxr_stamp_create_session_header>:
 8014064:	b510      	push	{r4, lr}
 8014066:	2208      	movs	r2, #8
 8014068:	b08a      	sub	sp, #40	@ 0x28
 801406a:	4604      	mov	r4, r0
 801406c:	eb0d 0002 	add.w	r0, sp, r2
 8014070:	f7fe fd66 	bl	8012b40 <ucdr_init_buffer>
 8014074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014078:	9400      	str	r4, [sp, #0]
 801407a:	2300      	movs	r3, #0
 801407c:	461a      	mov	r2, r3
 801407e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8014082:	a802      	add	r0, sp, #8
 8014084:	f000 fbc2 	bl	801480c <uxr_serialize_message_header>
 8014088:	b00a      	add	sp, #40	@ 0x28
 801408a:	bd10      	pop	{r4, pc}

0801408c <uxr_stamp_session_header>:
 801408c:	b530      	push	{r4, r5, lr}
 801408e:	b08d      	sub	sp, #52	@ 0x34
 8014090:	4604      	mov	r4, r0
 8014092:	460d      	mov	r5, r1
 8014094:	9203      	str	r2, [sp, #12]
 8014096:	4619      	mov	r1, r3
 8014098:	a804      	add	r0, sp, #16
 801409a:	2208      	movs	r2, #8
 801409c:	f7fe fd50 	bl	8012b40 <ucdr_init_buffer>
 80140a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140a4:	9b03      	ldr	r3, [sp, #12]
 80140a6:	9400      	str	r4, [sp, #0]
 80140a8:	462a      	mov	r2, r5
 80140aa:	a804      	add	r0, sp, #16
 80140ac:	f000 fbae 	bl	801480c <uxr_serialize_message_header>
 80140b0:	b00d      	add	sp, #52	@ 0x34
 80140b2:	bd30      	pop	{r4, r5, pc}

080140b4 <uxr_read_session_header>:
 80140b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140b8:	4607      	mov	r7, r0
 80140ba:	b084      	sub	sp, #16
 80140bc:	4608      	mov	r0, r1
 80140be:	460c      	mov	r4, r1
 80140c0:	4615      	mov	r5, r2
 80140c2:	461e      	mov	r6, r3
 80140c4:	f7fe fd6c 	bl	8012ba0 <ucdr_buffer_remaining>
 80140c8:	2808      	cmp	r0, #8
 80140ca:	d803      	bhi.n	80140d4 <uxr_read_session_header+0x20>
 80140cc:	2000      	movs	r0, #0
 80140ce:	b004      	add	sp, #16
 80140d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140d4:	f10d 080c 	add.w	r8, sp, #12
 80140d8:	4633      	mov	r3, r6
 80140da:	462a      	mov	r2, r5
 80140dc:	f8cd 8000 	str.w	r8, [sp]
 80140e0:	4620      	mov	r0, r4
 80140e2:	f10d 010b 	add.w	r1, sp, #11
 80140e6:	f000 fbaf 	bl	8014848 <uxr_deserialize_message_header>
 80140ea:	783a      	ldrb	r2, [r7, #0]
 80140ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80140f0:	4293      	cmp	r3, r2
 80140f2:	d1eb      	bne.n	80140cc <uxr_read_session_header+0x18>
 80140f4:	061b      	lsls	r3, r3, #24
 80140f6:	d41c      	bmi.n	8014132 <uxr_read_session_header+0x7e>
 80140f8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80140fc:	787b      	ldrb	r3, [r7, #1]
 80140fe:	429a      	cmp	r2, r3
 8014100:	d003      	beq.n	801410a <uxr_read_session_header+0x56>
 8014102:	2001      	movs	r0, #1
 8014104:	f080 0001 	eor.w	r0, r0, #1
 8014108:	e7e1      	b.n	80140ce <uxr_read_session_header+0x1a>
 801410a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801410e:	78bb      	ldrb	r3, [r7, #2]
 8014110:	429a      	cmp	r2, r3
 8014112:	f107 0102 	add.w	r1, r7, #2
 8014116:	d1f4      	bne.n	8014102 <uxr_read_session_header+0x4e>
 8014118:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801411c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014120:	429a      	cmp	r2, r3
 8014122:	d1ee      	bne.n	8014102 <uxr_read_session_header+0x4e>
 8014124:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8014128:	784b      	ldrb	r3, [r1, #1]
 801412a:	429a      	cmp	r2, r3
 801412c:	d1e9      	bne.n	8014102 <uxr_read_session_header+0x4e>
 801412e:	2000      	movs	r0, #0
 8014130:	e7e8      	b.n	8014104 <uxr_read_session_header+0x50>
 8014132:	2001      	movs	r0, #1
 8014134:	e7cb      	b.n	80140ce <uxr_read_session_header+0x1a>
 8014136:	bf00      	nop

08014138 <uxr_session_header_offset>:
 8014138:	f990 3000 	ldrsb.w	r3, [r0]
 801413c:	2b00      	cmp	r3, #0
 801413e:	bfac      	ite	ge
 8014140:	2008      	movge	r0, #8
 8014142:	2004      	movlt	r0, #4
 8014144:	4770      	bx	lr
 8014146:	bf00      	nop

08014148 <uxr_init_base_object_request>:
 8014148:	b510      	push	{r4, lr}
 801414a:	88c3      	ldrh	r3, [r0, #6]
 801414c:	b082      	sub	sp, #8
 801414e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8014152:	9101      	str	r1, [sp, #4]
 8014154:	f1a3 010a 	sub.w	r1, r3, #10
 8014158:	b289      	uxth	r1, r1
 801415a:	42a1      	cmp	r1, r4
 801415c:	d80e      	bhi.n	801417c <uxr_init_base_object_request+0x34>
 801415e:	3301      	adds	r3, #1
 8014160:	b29c      	uxth	r4, r3
 8014162:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014166:	b2db      	uxtb	r3, r3
 8014168:	80c4      	strh	r4, [r0, #6]
 801416a:	9801      	ldr	r0, [sp, #4]
 801416c:	7011      	strb	r1, [r2, #0]
 801416e:	7053      	strb	r3, [r2, #1]
 8014170:	1c91      	adds	r1, r2, #2
 8014172:	f7fe ff79 	bl	8013068 <uxr_object_id_to_raw>
 8014176:	4620      	mov	r0, r4
 8014178:	b002      	add	sp, #8
 801417a:	bd10      	pop	{r4, pc}
 801417c:	230a      	movs	r3, #10
 801417e:	2100      	movs	r1, #0
 8014180:	461c      	mov	r4, r3
 8014182:	e7f1      	b.n	8014168 <uxr_init_base_object_request+0x20>

08014184 <uxr_parse_base_object_request>:
 8014184:	b570      	push	{r4, r5, r6, lr}
 8014186:	4604      	mov	r4, r0
 8014188:	3002      	adds	r0, #2
 801418a:	460d      	mov	r5, r1
 801418c:	4616      	mov	r6, r2
 801418e:	f7fe ff57 	bl	8013040 <uxr_object_id_from_raw>
 8014192:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8014196:	8028      	strh	r0, [r5, #0]
 8014198:	806b      	strh	r3, [r5, #2]
 801419a:	7822      	ldrb	r2, [r4, #0]
 801419c:	7863      	ldrb	r3, [r4, #1]
 801419e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80141a2:	8033      	strh	r3, [r6, #0]
 80141a4:	bd70      	pop	{r4, r5, r6, pc}
 80141a6:	bf00      	nop

080141a8 <uxr_stream_id>:
 80141a8:	2901      	cmp	r1, #1
 80141aa:	b082      	sub	sp, #8
 80141ac:	d01d      	beq.n	80141ea <uxr_stream_id+0x42>
 80141ae:	2902      	cmp	r1, #2
 80141b0:	f04f 0c00 	mov.w	ip, #0
 80141b4:	d01e      	beq.n	80141f4 <uxr_stream_id+0x4c>
 80141b6:	2300      	movs	r3, #0
 80141b8:	f36c 0307 	bfi	r3, ip, #0, #8
 80141bc:	f360 230f 	bfi	r3, r0, #8, #8
 80141c0:	f361 4317 	bfi	r3, r1, #16, #8
 80141c4:	f362 631f 	bfi	r3, r2, #24, #8
 80141c8:	b2da      	uxtb	r2, r3
 80141ca:	2000      	movs	r0, #0
 80141cc:	f362 0007 	bfi	r0, r2, #0, #8
 80141d0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80141d4:	f362 200f 	bfi	r0, r2, #8, #8
 80141d8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80141dc:	f362 4017 	bfi	r0, r2, #16, #8
 80141e0:	0e1b      	lsrs	r3, r3, #24
 80141e2:	f363 601f 	bfi	r0, r3, #24, #8
 80141e6:	b002      	add	sp, #8
 80141e8:	4770      	bx	lr
 80141ea:	f100 0c01 	add.w	ip, r0, #1
 80141ee:	fa5f fc8c 	uxtb.w	ip, ip
 80141f2:	e7e0      	b.n	80141b6 <uxr_stream_id+0xe>
 80141f4:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80141f8:	e7dd      	b.n	80141b6 <uxr_stream_id+0xe>
 80141fa:	bf00      	nop

080141fc <uxr_stream_id_from_raw>:
 80141fc:	b082      	sub	sp, #8
 80141fe:	b130      	cbz	r0, 801420e <uxr_stream_id_from_raw+0x12>
 8014200:	0603      	lsls	r3, r0, #24
 8014202:	d420      	bmi.n	8014246 <uxr_stream_id_from_raw+0x4a>
 8014204:	1e42      	subs	r2, r0, #1
 8014206:	b2d2      	uxtb	r2, r2
 8014208:	f04f 0c01 	mov.w	ip, #1
 801420c:	e001      	b.n	8014212 <uxr_stream_id_from_raw+0x16>
 801420e:	4684      	mov	ip, r0
 8014210:	4602      	mov	r2, r0
 8014212:	2300      	movs	r3, #0
 8014214:	f360 0307 	bfi	r3, r0, #0, #8
 8014218:	f362 230f 	bfi	r3, r2, #8, #8
 801421c:	f36c 4317 	bfi	r3, ip, #16, #8
 8014220:	f361 631f 	bfi	r3, r1, #24, #8
 8014224:	b2da      	uxtb	r2, r3
 8014226:	2000      	movs	r0, #0
 8014228:	f362 0007 	bfi	r0, r2, #0, #8
 801422c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014230:	f362 200f 	bfi	r0, r2, #8, #8
 8014234:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014238:	f362 4017 	bfi	r0, r2, #16, #8
 801423c:	0e1b      	lsrs	r3, r3, #24
 801423e:	f363 601f 	bfi	r0, r3, #24, #8
 8014242:	b002      	add	sp, #8
 8014244:	4770      	bx	lr
 8014246:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801424a:	f04f 0c02 	mov.w	ip, #2
 801424e:	e7e0      	b.n	8014212 <uxr_stream_id_from_raw+0x16>

08014250 <uxr_init_stream_storage>:
 8014250:	2300      	movs	r3, #0
 8014252:	7403      	strb	r3, [r0, #16]
 8014254:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8014258:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801425c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8014260:	4770      	bx	lr
 8014262:	bf00      	nop

08014264 <uxr_reset_stream_storage>:
 8014264:	b570      	push	{r4, r5, r6, lr}
 8014266:	7c03      	ldrb	r3, [r0, #16]
 8014268:	4604      	mov	r4, r0
 801426a:	b153      	cbz	r3, 8014282 <uxr_reset_stream_storage+0x1e>
 801426c:	4606      	mov	r6, r0
 801426e:	2500      	movs	r5, #0
 8014270:	4630      	mov	r0, r6
 8014272:	f006 fac3 	bl	801a7fc <uxr_reset_output_best_effort_stream>
 8014276:	7c23      	ldrb	r3, [r4, #16]
 8014278:	3501      	adds	r5, #1
 801427a:	42ab      	cmp	r3, r5
 801427c:	f106 0610 	add.w	r6, r6, #16
 8014280:	d8f6      	bhi.n	8014270 <uxr_reset_stream_storage+0xc>
 8014282:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014286:	b163      	cbz	r3, 80142a2 <uxr_reset_stream_storage+0x3e>
 8014288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801428c:	2500      	movs	r5, #0
 801428e:	4630      	mov	r0, r6
 8014290:	f006 f8b6 	bl	801a400 <uxr_reset_input_best_effort_stream>
 8014294:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014298:	3501      	adds	r5, #1
 801429a:	42ab      	cmp	r3, r5
 801429c:	f106 0602 	add.w	r6, r6, #2
 80142a0:	d8f5      	bhi.n	801428e <uxr_reset_stream_storage+0x2a>
 80142a2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80142a6:	b163      	cbz	r3, 80142c2 <uxr_reset_stream_storage+0x5e>
 80142a8:	f104 0618 	add.w	r6, r4, #24
 80142ac:	2500      	movs	r5, #0
 80142ae:	4630      	mov	r0, r6
 80142b0:	f006 fb50 	bl	801a954 <uxr_reset_output_reliable_stream>
 80142b4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80142b8:	3501      	adds	r5, #1
 80142ba:	42ab      	cmp	r3, r5
 80142bc:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80142c0:	d8f5      	bhi.n	80142ae <uxr_reset_stream_storage+0x4a>
 80142c2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80142c6:	b163      	cbz	r3, 80142e2 <uxr_reset_stream_storage+0x7e>
 80142c8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80142cc:	2500      	movs	r5, #0
 80142ce:	4630      	mov	r0, r6
 80142d0:	f006 f90a 	bl	801a4e8 <uxr_reset_input_reliable_stream>
 80142d4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80142d8:	3501      	adds	r5, #1
 80142da:	42ab      	cmp	r3, r5
 80142dc:	f106 0618 	add.w	r6, r6, #24
 80142e0:	d8f5      	bhi.n	80142ce <uxr_reset_stream_storage+0x6a>
 80142e2:	bd70      	pop	{r4, r5, r6, pc}

080142e4 <uxr_add_output_best_effort_buffer>:
 80142e4:	b510      	push	{r4, lr}
 80142e6:	7c04      	ldrb	r4, [r0, #16]
 80142e8:	f104 0c01 	add.w	ip, r4, #1
 80142ec:	b082      	sub	sp, #8
 80142ee:	f880 c010 	strb.w	ip, [r0, #16]
 80142f2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80142f6:	f006 fa77 	bl	801a7e8 <uxr_init_output_best_effort_stream>
 80142fa:	2201      	movs	r2, #1
 80142fc:	4611      	mov	r1, r2
 80142fe:	4620      	mov	r0, r4
 8014300:	b002      	add	sp, #8
 8014302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014306:	f7ff bf4f 	b.w	80141a8 <uxr_stream_id>
 801430a:	bf00      	nop

0801430c <uxr_add_output_reliable_buffer>:
 801430c:	b510      	push	{r4, lr}
 801430e:	b084      	sub	sp, #16
 8014310:	4684      	mov	ip, r0
 8014312:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014316:	9000      	str	r0, [sp, #0]
 8014318:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801431c:	2028      	movs	r0, #40	@ 0x28
 801431e:	fb00 c004 	mla	r0, r0, r4, ip
 8014322:	f104 0e01 	add.w	lr, r4, #1
 8014326:	3018      	adds	r0, #24
 8014328:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801432c:	f006 fada 	bl	801a8e4 <uxr_init_output_reliable_stream>
 8014330:	2201      	movs	r2, #1
 8014332:	2102      	movs	r1, #2
 8014334:	4620      	mov	r0, r4
 8014336:	b004      	add	sp, #16
 8014338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801433c:	f7ff bf34 	b.w	80141a8 <uxr_stream_id>

08014340 <uxr_add_input_best_effort_buffer>:
 8014340:	b510      	push	{r4, lr}
 8014342:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8014346:	4603      	mov	r3, r0
 8014348:	1c62      	adds	r2, r4, #1
 801434a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801434e:	b082      	sub	sp, #8
 8014350:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8014354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014358:	f006 f84e 	bl	801a3f8 <uxr_init_input_best_effort_stream>
 801435c:	2200      	movs	r2, #0
 801435e:	2101      	movs	r1, #1
 8014360:	4620      	mov	r0, r4
 8014362:	b002      	add	sp, #8
 8014364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014368:	f7ff bf1e 	b.w	80141a8 <uxr_stream_id>

0801436c <uxr_add_input_reliable_buffer>:
 801436c:	b510      	push	{r4, lr}
 801436e:	b084      	sub	sp, #16
 8014370:	4684      	mov	ip, r0
 8014372:	9806      	ldr	r0, [sp, #24]
 8014374:	9000      	str	r0, [sp, #0]
 8014376:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801437a:	2018      	movs	r0, #24
 801437c:	fb00 c004 	mla	r0, r0, r4, ip
 8014380:	f104 0e01 	add.w	lr, r4, #1
 8014384:	3048      	adds	r0, #72	@ 0x48
 8014386:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801438a:	f006 f881 	bl	801a490 <uxr_init_input_reliable_stream>
 801438e:	2200      	movs	r2, #0
 8014390:	2102      	movs	r1, #2
 8014392:	4620      	mov	r0, r4
 8014394:	b004      	add	sp, #16
 8014396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801439a:	f7ff bf05 	b.w	80141a8 <uxr_stream_id>
 801439e:	bf00      	nop

080143a0 <uxr_get_output_best_effort_stream>:
 80143a0:	7c03      	ldrb	r3, [r0, #16]
 80143a2:	428b      	cmp	r3, r1
 80143a4:	bf8c      	ite	hi
 80143a6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80143aa:	2000      	movls	r0, #0
 80143ac:	4770      	bx	lr
 80143ae:	bf00      	nop

080143b0 <uxr_get_output_reliable_stream>:
 80143b0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80143b4:	428b      	cmp	r3, r1
 80143b6:	bf83      	ittte	hi
 80143b8:	2328      	movhi	r3, #40	@ 0x28
 80143ba:	fb03 0001 	mlahi	r0, r3, r1, r0
 80143be:	3018      	addhi	r0, #24
 80143c0:	2000      	movls	r0, #0
 80143c2:	4770      	bx	lr

080143c4 <uxr_get_input_best_effort_stream>:
 80143c4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80143c8:	428b      	cmp	r3, r1
 80143ca:	bf86      	itte	hi
 80143cc:	3121      	addhi	r1, #33	@ 0x21
 80143ce:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80143d2:	2000      	movls	r0, #0
 80143d4:	4770      	bx	lr
 80143d6:	bf00      	nop

080143d8 <uxr_get_input_reliable_stream>:
 80143d8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80143dc:	428b      	cmp	r3, r1
 80143de:	bf83      	ittte	hi
 80143e0:	2318      	movhi	r3, #24
 80143e2:	fb03 0001 	mlahi	r0, r3, r1, r0
 80143e6:	3048      	addhi	r0, #72	@ 0x48
 80143e8:	2000      	movls	r0, #0
 80143ea:	4770      	bx	lr

080143ec <uxr_output_streams_confirmed>:
 80143ec:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80143f0:	b183      	cbz	r3, 8014414 <uxr_output_streams_confirmed+0x28>
 80143f2:	b570      	push	{r4, r5, r6, lr}
 80143f4:	4606      	mov	r6, r0
 80143f6:	f100 0518 	add.w	r5, r0, #24
 80143fa:	2400      	movs	r4, #0
 80143fc:	e001      	b.n	8014402 <uxr_output_streams_confirmed+0x16>
 80143fe:	3528      	adds	r5, #40	@ 0x28
 8014400:	b138      	cbz	r0, 8014412 <uxr_output_streams_confirmed+0x26>
 8014402:	4628      	mov	r0, r5
 8014404:	f006 fd16 	bl	801ae34 <uxr_is_output_up_to_date>
 8014408:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801440c:	3401      	adds	r4, #1
 801440e:	42a3      	cmp	r3, r4
 8014410:	d8f5      	bhi.n	80143fe <uxr_output_streams_confirmed+0x12>
 8014412:	bd70      	pop	{r4, r5, r6, pc}
 8014414:	2001      	movs	r0, #1
 8014416:	4770      	bx	lr

08014418 <uxr_buffer_submessage_header>:
 8014418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801441a:	4604      	mov	r4, r0
 801441c:	460e      	mov	r6, r1
 801441e:	2104      	movs	r1, #4
 8014420:	4615      	mov	r5, r2
 8014422:	461f      	mov	r7, r3
 8014424:	f7fe fba6 	bl	8012b74 <ucdr_align_to>
 8014428:	2301      	movs	r3, #1
 801442a:	ea47 0203 	orr.w	r2, r7, r3
 801442e:	4631      	mov	r1, r6
 8014430:	7523      	strb	r3, [r4, #20]
 8014432:	4620      	mov	r0, r4
 8014434:	462b      	mov	r3, r5
 8014436:	f000 fa27 	bl	8014888 <uxr_serialize_submessage_header>
 801443a:	4620      	mov	r0, r4
 801443c:	f7fe fbb0 	bl	8012ba0 <ucdr_buffer_remaining>
 8014440:	42a8      	cmp	r0, r5
 8014442:	bf34      	ite	cc
 8014444:	2000      	movcc	r0, #0
 8014446:	2001      	movcs	r0, #1
 8014448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801444a:	bf00      	nop

0801444c <uxr_read_submessage_header>:
 801444c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014450:	4604      	mov	r4, r0
 8014452:	460d      	mov	r5, r1
 8014454:	2104      	movs	r1, #4
 8014456:	4616      	mov	r6, r2
 8014458:	4698      	mov	r8, r3
 801445a:	f7fe fb8b 	bl	8012b74 <ucdr_align_to>
 801445e:	4620      	mov	r0, r4
 8014460:	f7fe fb9e 	bl	8012ba0 <ucdr_buffer_remaining>
 8014464:	2803      	cmp	r0, #3
 8014466:	bf8c      	ite	hi
 8014468:	2701      	movhi	r7, #1
 801446a:	2700      	movls	r7, #0
 801446c:	d802      	bhi.n	8014474 <uxr_read_submessage_header+0x28>
 801446e:	4638      	mov	r0, r7
 8014470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014474:	4633      	mov	r3, r6
 8014476:	4642      	mov	r2, r8
 8014478:	4620      	mov	r0, r4
 801447a:	4629      	mov	r1, r5
 801447c:	f000 fa18 	bl	80148b0 <uxr_deserialize_submessage_header>
 8014480:	f898 3000 	ldrb.w	r3, [r8]
 8014484:	f003 0201 	and.w	r2, r3, #1
 8014488:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801448c:	f888 3000 	strb.w	r3, [r8]
 8014490:	7522      	strb	r2, [r4, #20]
 8014492:	4638      	mov	r0, r7
 8014494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014498 <uxr_submessage_padding>:
 8014498:	f010 0003 	ands.w	r0, r0, #3
 801449c:	bf18      	it	ne
 801449e:	f1c0 0004 	rsbne	r0, r0, #4
 80144a2:	4770      	bx	lr

080144a4 <uxr_millis>:
 80144a4:	b510      	push	{r4, lr}
 80144a6:	b084      	sub	sp, #16
 80144a8:	4669      	mov	r1, sp
 80144aa:	2001      	movs	r0, #1
 80144ac:	f7ed fa00 	bl	80018b0 <clock_gettime>
 80144b0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80144b4:	4906      	ldr	r1, [pc, #24]	@ (80144d0 <uxr_millis+0x2c>)
 80144b6:	fba0 0301 	umull	r0, r3, r0, r1
 80144ba:	1900      	adds	r0, r0, r4
 80144bc:	fb01 3102 	mla	r1, r1, r2, r3
 80144c0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80144c4:	4a03      	ldr	r2, [pc, #12]	@ (80144d4 <uxr_millis+0x30>)
 80144c6:	2300      	movs	r3, #0
 80144c8:	f7eb feea 	bl	80002a0 <__aeabi_ldivmod>
 80144cc:	b004      	add	sp, #16
 80144ce:	bd10      	pop	{r4, pc}
 80144d0:	3b9aca00 	.word	0x3b9aca00
 80144d4:	000f4240 	.word	0x000f4240

080144d8 <uxr_nanos>:
 80144d8:	b510      	push	{r4, lr}
 80144da:	b084      	sub	sp, #16
 80144dc:	4669      	mov	r1, sp
 80144de:	2001      	movs	r0, #1
 80144e0:	f7ed f9e6 	bl	80018b0 <clock_gettime>
 80144e4:	4a06      	ldr	r2, [pc, #24]	@ (8014500 <uxr_nanos+0x28>)
 80144e6:	9800      	ldr	r0, [sp, #0]
 80144e8:	9902      	ldr	r1, [sp, #8]
 80144ea:	9c01      	ldr	r4, [sp, #4]
 80144ec:	fba0 0302 	umull	r0, r3, r0, r2
 80144f0:	1840      	adds	r0, r0, r1
 80144f2:	fb02 3304 	mla	r3, r2, r4, r3
 80144f6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80144fa:	b004      	add	sp, #16
 80144fc:	bd10      	pop	{r4, pc}
 80144fe:	bf00      	nop
 8014500:	3b9aca00 	.word	0x3b9aca00

08014504 <on_full_output_buffer_fragmented>:
 8014504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014508:	460c      	mov	r4, r1
 801450a:	b08a      	sub	sp, #40	@ 0x28
 801450c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8014510:	4606      	mov	r6, r0
 8014512:	f104 0008 	add.w	r0, r4, #8
 8014516:	f7ff ff4b 	bl	80143b0 <uxr_get_output_reliable_stream>
 801451a:	4605      	mov	r5, r0
 801451c:	f006 fc94 	bl	801ae48 <get_available_free_slots>
 8014520:	b968      	cbnz	r0, 801453e <on_full_output_buffer_fragmented+0x3a>
 8014522:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8014526:	4620      	mov	r0, r4
 8014528:	4798      	blx	r3
 801452a:	b918      	cbnz	r0, 8014534 <on_full_output_buffer_fragmented+0x30>
 801452c:	2001      	movs	r0, #1
 801452e:	b00a      	add	sp, #40	@ 0x28
 8014530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014534:	4628      	mov	r0, r5
 8014536:	f006 fc87 	bl	801ae48 <get_available_free_slots>
 801453a:	2800      	cmp	r0, #0
 801453c:	d0f6      	beq.n	801452c <on_full_output_buffer_fragmented+0x28>
 801453e:	8929      	ldrh	r1, [r5, #8]
 8014540:	89eb      	ldrh	r3, [r5, #14]
 8014542:	7b28      	ldrb	r0, [r5, #12]
 8014544:	686a      	ldr	r2, [r5, #4]
 8014546:	fbb2 f8f1 	udiv	r8, r2, r1
 801454a:	fbb3 f2f1 	udiv	r2, r3, r1
 801454e:	fb01 3112 	mls	r1, r1, r2, r3
 8014552:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8014556:	b289      	uxth	r1, r1
 8014558:	fb08 f101 	mul.w	r1, r8, r1
 801455c:	30fc      	adds	r0, #252	@ 0xfc
 801455e:	f1a8 0804 	sub.w	r8, r8, #4
 8014562:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8014566:	4440      	add	r0, r8
 8014568:	b287      	uxth	r7, r0
 801456a:	1bdb      	subs	r3, r3, r7
 801456c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8014570:	682b      	ldr	r3, [r5, #0]
 8014572:	3104      	adds	r1, #4
 8014574:	4419      	add	r1, r3
 8014576:	4642      	mov	r2, r8
 8014578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801457c:	9300      	str	r3, [sp, #0]
 801457e:	a802      	add	r0, sp, #8
 8014580:	2300      	movs	r3, #0
 8014582:	f7fe facb 	bl	8012b1c <ucdr_init_buffer_origin_offset>
 8014586:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801458a:	f102 0308 	add.w	r3, r2, #8
 801458e:	4543      	cmp	r3, r8
 8014590:	d928      	bls.n	80145e4 <on_full_output_buffer_fragmented+0xe0>
 8014592:	463a      	mov	r2, r7
 8014594:	2300      	movs	r3, #0
 8014596:	210d      	movs	r1, #13
 8014598:	a802      	add	r0, sp, #8
 801459a:	f7ff ff3d 	bl	8014418 <uxr_buffer_submessage_header>
 801459e:	8929      	ldrh	r1, [r5, #8]
 80145a0:	89eb      	ldrh	r3, [r5, #14]
 80145a2:	fbb3 f2f1 	udiv	r2, r3, r1
 80145a6:	fb01 3312 	mls	r3, r1, r2, r3
 80145aa:	b29b      	uxth	r3, r3
 80145ac:	686a      	ldr	r2, [r5, #4]
 80145ae:	fbb2 f2f1 	udiv	r2, r2, r1
 80145b2:	fb02 f303 	mul.w	r3, r2, r3
 80145b6:	682a      	ldr	r2, [r5, #0]
 80145b8:	f842 8003 	str.w	r8, [r2, r3]
 80145bc:	89e8      	ldrh	r0, [r5, #14]
 80145be:	2101      	movs	r1, #1
 80145c0:	f006 fd92 	bl	801b0e8 <uxr_seq_num_add>
 80145c4:	9904      	ldr	r1, [sp, #16]
 80145c6:	9a03      	ldr	r2, [sp, #12]
 80145c8:	81e8      	strh	r0, [r5, #14]
 80145ca:	1a52      	subs	r2, r2, r1
 80145cc:	4630      	mov	r0, r6
 80145ce:	f7fe fab7 	bl	8012b40 <ucdr_init_buffer>
 80145d2:	4630      	mov	r0, r6
 80145d4:	490f      	ldr	r1, [pc, #60]	@ (8014614 <on_full_output_buffer_fragmented+0x110>)
 80145d6:	4622      	mov	r2, r4
 80145d8:	f7fe fa86 	bl	8012ae8 <ucdr_set_on_full_buffer_callback>
 80145dc:	2000      	movs	r0, #0
 80145de:	b00a      	add	sp, #40	@ 0x28
 80145e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145e4:	b292      	uxth	r2, r2
 80145e6:	2302      	movs	r3, #2
 80145e8:	210d      	movs	r1, #13
 80145ea:	a802      	add	r0, sp, #8
 80145ec:	f7ff ff14 	bl	8014418 <uxr_buffer_submessage_header>
 80145f0:	8928      	ldrh	r0, [r5, #8]
 80145f2:	89eb      	ldrh	r3, [r5, #14]
 80145f4:	fbb3 f1f0 	udiv	r1, r3, r0
 80145f8:	fb00 3311 	mls	r3, r0, r1, r3
 80145fc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8014600:	6869      	ldr	r1, [r5, #4]
 8014602:	fbb1 f1f0 	udiv	r1, r1, r0
 8014606:	b29b      	uxth	r3, r3
 8014608:	fb01 f303 	mul.w	r3, r1, r3
 801460c:	6829      	ldr	r1, [r5, #0]
 801460e:	3208      	adds	r2, #8
 8014610:	50ca      	str	r2, [r1, r3]
 8014612:	e7d3      	b.n	80145bc <on_full_output_buffer_fragmented+0xb8>
 8014614:	08014505 	.word	0x08014505

08014618 <uxr_prepare_output_stream>:
 8014618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801461a:	b087      	sub	sp, #28
 801461c:	2707      	movs	r7, #7
 801461e:	9202      	str	r2, [sp, #8]
 8014620:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014622:	9103      	str	r1, [sp, #12]
 8014624:	2500      	movs	r5, #0
 8014626:	3204      	adds	r2, #4
 8014628:	e9cd 7500 	strd	r7, r5, [sp]
 801462c:	461c      	mov	r4, r3
 801462e:	4606      	mov	r6, r0
 8014630:	f7ff fc54 	bl	8013edc <uxr_prepare_stream_to_write_submessage>
 8014634:	f080 0201 	eor.w	r2, r0, #1
 8014638:	b2d2      	uxtb	r2, r2
 801463a:	75a2      	strb	r2, [r4, #22]
 801463c:	b112      	cbz	r2, 8014644 <uxr_prepare_output_stream+0x2c>
 801463e:	4628      	mov	r0, r5
 8014640:	b007      	add	sp, #28
 8014642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014644:	aa05      	add	r2, sp, #20
 8014646:	9902      	ldr	r1, [sp, #8]
 8014648:	4630      	mov	r0, r6
 801464a:	f7ff fd7d 	bl	8014148 <uxr_init_base_object_request>
 801464e:	a905      	add	r1, sp, #20
 8014650:	4605      	mov	r5, r0
 8014652:	4620      	mov	r0, r4
 8014654:	f001 f88c 	bl	8015770 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014658:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801465c:	69a6      	ldr	r6, [r4, #24]
 801465e:	69e7      	ldr	r7, [r4, #28]
 8014660:	1a52      	subs	r2, r2, r1
 8014662:	4620      	mov	r0, r4
 8014664:	f7fe fa6c 	bl	8012b40 <ucdr_init_buffer>
 8014668:	4620      	mov	r0, r4
 801466a:	463a      	mov	r2, r7
 801466c:	4631      	mov	r1, r6
 801466e:	f7fe fa3b 	bl	8012ae8 <ucdr_set_on_full_buffer_callback>
 8014672:	4628      	mov	r0, r5
 8014674:	b007      	add	sp, #28
 8014676:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014678 <uxr_prepare_output_stream_fragmented>:
 8014678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801467c:	b091      	sub	sp, #68	@ 0x44
 801467e:	4605      	mov	r5, r0
 8014680:	9105      	str	r1, [sp, #20]
 8014682:	3008      	adds	r0, #8
 8014684:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014688:	461e      	mov	r6, r3
 801468a:	9204      	str	r2, [sp, #16]
 801468c:	f7ff fe90 	bl	80143b0 <uxr_get_output_reliable_stream>
 8014690:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8014694:	2b01      	cmp	r3, #1
 8014696:	f000 8091 	beq.w	80147bc <uxr_prepare_output_stream_fragmented+0x144>
 801469a:	4604      	mov	r4, r0
 801469c:	2800      	cmp	r0, #0
 801469e:	f000 808d 	beq.w	80147bc <uxr_prepare_output_stream_fragmented+0x144>
 80146a2:	f006 fbd1 	bl	801ae48 <get_available_free_slots>
 80146a6:	2800      	cmp	r0, #0
 80146a8:	f000 8083 	beq.w	80147b2 <uxr_prepare_output_stream_fragmented+0x13a>
 80146ac:	8922      	ldrh	r2, [r4, #8]
 80146ae:	89e7      	ldrh	r7, [r4, #14]
 80146b0:	fbb7 f9f2 	udiv	r9, r7, r2
 80146b4:	fb02 7919 	mls	r9, r2, r9, r7
 80146b8:	fa1f f989 	uxth.w	r9, r9
 80146bc:	6863      	ldr	r3, [r4, #4]
 80146be:	fbb3 f2f2 	udiv	r2, r3, r2
 80146c2:	6823      	ldr	r3, [r4, #0]
 80146c4:	9203      	str	r2, [sp, #12]
 80146c6:	fb02 f909 	mul.w	r9, r2, r9
 80146ca:	f109 0904 	add.w	r9, r9, #4
 80146ce:	4499      	add	r9, r3
 80146d0:	7b23      	ldrb	r3, [r4, #12]
 80146d2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80146d6:	4543      	cmp	r3, r8
 80146d8:	f1a2 0b04 	sub.w	fp, r2, #4
 80146dc:	d37a      	bcc.n	80147d4 <uxr_prepare_output_stream_fragmented+0x15c>
 80146de:	f1ab 0a04 	sub.w	sl, fp, #4
 80146e2:	ebaa 0a03 	sub.w	sl, sl, r3
 80146e6:	465a      	mov	r2, fp
 80146e8:	2300      	movs	r3, #0
 80146ea:	4649      	mov	r1, r9
 80146ec:	a808      	add	r0, sp, #32
 80146ee:	f8cd 8000 	str.w	r8, [sp]
 80146f2:	f7fe fa13 	bl	8012b1c <ucdr_init_buffer_origin_offset>
 80146f6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80146f8:	fa1f fa8a 	uxth.w	sl, sl
 80146fc:	4652      	mov	r2, sl
 80146fe:	f103 0a08 	add.w	sl, r3, #8
 8014702:	45da      	cmp	sl, fp
 8014704:	bf34      	ite	cc
 8014706:	2302      	movcc	r3, #2
 8014708:	2300      	movcs	r3, #0
 801470a:	210d      	movs	r1, #13
 801470c:	a808      	add	r0, sp, #32
 801470e:	f7ff fe83 	bl	8014418 <uxr_buffer_submessage_header>
 8014712:	8921      	ldrh	r1, [r4, #8]
 8014714:	fbb7 f2f1 	udiv	r2, r7, r1
 8014718:	fb01 7212 	mls	r2, r1, r2, r7
 801471c:	b292      	uxth	r2, r2
 801471e:	6863      	ldr	r3, [r4, #4]
 8014720:	fbb3 f3f1 	udiv	r3, r3, r1
 8014724:	fb02 f303 	mul.w	r3, r2, r3
 8014728:	6822      	ldr	r2, [r4, #0]
 801472a:	4638      	mov	r0, r7
 801472c:	f842 b003 	str.w	fp, [r2, r3]
 8014730:	2101      	movs	r1, #1
 8014732:	f006 fcd9 	bl	801b0e8 <uxr_seq_num_add>
 8014736:	9b03      	ldr	r3, [sp, #12]
 8014738:	f108 0104 	add.w	r1, r8, #4
 801473c:	f1a3 0208 	sub.w	r2, r3, #8
 8014740:	eba2 0208 	sub.w	r2, r2, r8
 8014744:	4449      	add	r1, r9
 8014746:	4607      	mov	r7, r0
 8014748:	4630      	mov	r0, r6
 801474a:	f7fe f9f9 	bl	8012b40 <ucdr_init_buffer>
 801474e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8014750:	81e7      	strh	r7, [r4, #14]
 8014752:	1d1a      	adds	r2, r3, #4
 8014754:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8014758:	bf28      	it	cs
 801475a:	2200      	movcs	r2, #0
 801475c:	2300      	movs	r3, #0
 801475e:	b292      	uxth	r2, r2
 8014760:	2107      	movs	r1, #7
 8014762:	4630      	mov	r0, r6
 8014764:	f7ff fe58 	bl	8014418 <uxr_buffer_submessage_header>
 8014768:	9904      	ldr	r1, [sp, #16]
 801476a:	aa07      	add	r2, sp, #28
 801476c:	4628      	mov	r0, r5
 801476e:	f7ff fceb 	bl	8014148 <uxr_init_base_object_request>
 8014772:	4604      	mov	r4, r0
 8014774:	b318      	cbz	r0, 80147be <uxr_prepare_output_stream_fragmented+0x146>
 8014776:	a907      	add	r1, sp, #28
 8014778:	4630      	mov	r0, r6
 801477a:	f000 fff9 	bl	8015770 <uxr_serialize_WRITE_DATA_Payload_Data>
 801477e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8014782:	4630      	mov	r0, r6
 8014784:	1a52      	subs	r2, r2, r1
 8014786:	f7fe f9db 	bl	8012b40 <ucdr_init_buffer>
 801478a:	9b05      	ldr	r3, [sp, #20]
 801478c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8014790:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014792:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8014796:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8014798:	491b      	ldr	r1, [pc, #108]	@ (8014808 <uxr_prepare_output_stream_fragmented+0x190>)
 801479a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801479e:	4630      	mov	r0, r6
 80147a0:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80147a4:	462a      	mov	r2, r5
 80147a6:	f7fe f99f 	bl	8012ae8 <ucdr_set_on_full_buffer_callback>
 80147aa:	4620      	mov	r0, r4
 80147ac:	b011      	add	sp, #68	@ 0x44
 80147ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147b2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80147b4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80147b6:	4628      	mov	r0, r5
 80147b8:	4798      	blx	r3
 80147ba:	b920      	cbnz	r0, 80147c6 <uxr_prepare_output_stream_fragmented+0x14e>
 80147bc:	2400      	movs	r4, #0
 80147be:	4620      	mov	r0, r4
 80147c0:	b011      	add	sp, #68	@ 0x44
 80147c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147c6:	4620      	mov	r0, r4
 80147c8:	f006 fb3e 	bl	801ae48 <get_available_free_slots>
 80147cc:	2800      	cmp	r0, #0
 80147ce:	f47f af6d 	bne.w	80146ac <uxr_prepare_output_stream_fragmented+0x34>
 80147d2:	e7f3      	b.n	80147bc <uxr_prepare_output_stream_fragmented+0x144>
 80147d4:	4638      	mov	r0, r7
 80147d6:	2101      	movs	r1, #1
 80147d8:	f006 fc86 	bl	801b0e8 <uxr_seq_num_add>
 80147dc:	8921      	ldrh	r1, [r4, #8]
 80147de:	fbb0 f2f1 	udiv	r2, r0, r1
 80147e2:	fb01 0912 	mls	r9, r1, r2, r0
 80147e6:	fa1f f289 	uxth.w	r2, r9
 80147ea:	6863      	ldr	r3, [r4, #4]
 80147ec:	fbb3 f9f1 	udiv	r9, r3, r1
 80147f0:	6823      	ldr	r3, [r4, #0]
 80147f2:	fb02 f909 	mul.w	r9, r2, r9
 80147f6:	f109 0904 	add.w	r9, r9, #4
 80147fa:	4499      	add	r9, r3
 80147fc:	4607      	mov	r7, r0
 80147fe:	7b23      	ldrb	r3, [r4, #12]
 8014800:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8014804:	e76b      	b.n	80146de <uxr_prepare_output_stream_fragmented+0x66>
 8014806:	bf00      	nop
 8014808:	08014505 	.word	0x08014505

0801480c <uxr_serialize_message_header>:
 801480c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801480e:	b083      	sub	sp, #12
 8014810:	4616      	mov	r6, r2
 8014812:	4604      	mov	r4, r0
 8014814:	9301      	str	r3, [sp, #4]
 8014816:	460d      	mov	r5, r1
 8014818:	9f08      	ldr	r7, [sp, #32]
 801481a:	f7fd f9e5 	bl	8011be8 <ucdr_serialize_uint8_t>
 801481e:	4631      	mov	r1, r6
 8014820:	4620      	mov	r0, r4
 8014822:	f7fd f9e1 	bl	8011be8 <ucdr_serialize_uint8_t>
 8014826:	9a01      	ldr	r2, [sp, #4]
 8014828:	2101      	movs	r1, #1
 801482a:	4620      	mov	r0, r4
 801482c:	f7fd fa88 	bl	8011d40 <ucdr_serialize_endian_uint16_t>
 8014830:	062b      	lsls	r3, r5, #24
 8014832:	d501      	bpl.n	8014838 <uxr_serialize_message_header+0x2c>
 8014834:	b003      	add	sp, #12
 8014836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014838:	2204      	movs	r2, #4
 801483a:	4639      	mov	r1, r7
 801483c:	4620      	mov	r0, r4
 801483e:	b003      	add	sp, #12
 8014840:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014844:	f005 bbde 	b.w	801a004 <ucdr_serialize_array_uint8_t>

08014848 <uxr_deserialize_message_header>:
 8014848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801484a:	b083      	sub	sp, #12
 801484c:	4616      	mov	r6, r2
 801484e:	4604      	mov	r4, r0
 8014850:	9301      	str	r3, [sp, #4]
 8014852:	460d      	mov	r5, r1
 8014854:	9f08      	ldr	r7, [sp, #32]
 8014856:	f7fd f9dd 	bl	8011c14 <ucdr_deserialize_uint8_t>
 801485a:	4631      	mov	r1, r6
 801485c:	4620      	mov	r0, r4
 801485e:	f7fd f9d9 	bl	8011c14 <ucdr_deserialize_uint8_t>
 8014862:	9a01      	ldr	r2, [sp, #4]
 8014864:	2101      	movs	r1, #1
 8014866:	4620      	mov	r0, r4
 8014868:	f7fd fb5e 	bl	8011f28 <ucdr_deserialize_endian_uint16_t>
 801486c:	f995 3000 	ldrsb.w	r3, [r5]
 8014870:	2b00      	cmp	r3, #0
 8014872:	da01      	bge.n	8014878 <uxr_deserialize_message_header+0x30>
 8014874:	b003      	add	sp, #12
 8014876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014878:	2204      	movs	r2, #4
 801487a:	4639      	mov	r1, r7
 801487c:	4620      	mov	r0, r4
 801487e:	b003      	add	sp, #12
 8014880:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014884:	f005 bc22 	b.w	801a0cc <ucdr_deserialize_array_uint8_t>

08014888 <uxr_serialize_submessage_header>:
 8014888:	b530      	push	{r4, r5, lr}
 801488a:	b083      	sub	sp, #12
 801488c:	4615      	mov	r5, r2
 801488e:	4604      	mov	r4, r0
 8014890:	9301      	str	r3, [sp, #4]
 8014892:	f7fd f9a9 	bl	8011be8 <ucdr_serialize_uint8_t>
 8014896:	4629      	mov	r1, r5
 8014898:	4620      	mov	r0, r4
 801489a:	f7fd f9a5 	bl	8011be8 <ucdr_serialize_uint8_t>
 801489e:	9a01      	ldr	r2, [sp, #4]
 80148a0:	2101      	movs	r1, #1
 80148a2:	4620      	mov	r0, r4
 80148a4:	b003      	add	sp, #12
 80148a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80148aa:	f7fd ba49 	b.w	8011d40 <ucdr_serialize_endian_uint16_t>
 80148ae:	bf00      	nop

080148b0 <uxr_deserialize_submessage_header>:
 80148b0:	b530      	push	{r4, r5, lr}
 80148b2:	b083      	sub	sp, #12
 80148b4:	4615      	mov	r5, r2
 80148b6:	4604      	mov	r4, r0
 80148b8:	9301      	str	r3, [sp, #4]
 80148ba:	f7fd f9ab 	bl	8011c14 <ucdr_deserialize_uint8_t>
 80148be:	4629      	mov	r1, r5
 80148c0:	4620      	mov	r0, r4
 80148c2:	f7fd f9a7 	bl	8011c14 <ucdr_deserialize_uint8_t>
 80148c6:	9a01      	ldr	r2, [sp, #4]
 80148c8:	2101      	movs	r1, #1
 80148ca:	4620      	mov	r0, r4
 80148cc:	b003      	add	sp, #12
 80148ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80148d2:	f7fd bb29 	b.w	8011f28 <ucdr_deserialize_endian_uint16_t>
 80148d6:	bf00      	nop

080148d8 <uxr_serialize_CLIENT_Representation>:
 80148d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148dc:	2204      	movs	r2, #4
 80148de:	460e      	mov	r6, r1
 80148e0:	4605      	mov	r5, r0
 80148e2:	f005 fb8f 	bl	801a004 <ucdr_serialize_array_uint8_t>
 80148e6:	2202      	movs	r2, #2
 80148e8:	4607      	mov	r7, r0
 80148ea:	1d31      	adds	r1, r6, #4
 80148ec:	4628      	mov	r0, r5
 80148ee:	f005 fb89 	bl	801a004 <ucdr_serialize_array_uint8_t>
 80148f2:	4038      	ands	r0, r7
 80148f4:	2202      	movs	r2, #2
 80148f6:	1db1      	adds	r1, r6, #6
 80148f8:	b2c7      	uxtb	r7, r0
 80148fa:	4628      	mov	r0, r5
 80148fc:	f005 fb82 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8014900:	2204      	movs	r2, #4
 8014902:	4007      	ands	r7, r0
 8014904:	f106 0108 	add.w	r1, r6, #8
 8014908:	4628      	mov	r0, r5
 801490a:	f005 fb7b 	bl	801a004 <ucdr_serialize_array_uint8_t>
 801490e:	7b31      	ldrb	r1, [r6, #12]
 8014910:	4007      	ands	r7, r0
 8014912:	4628      	mov	r0, r5
 8014914:	f7fd f968 	bl	8011be8 <ucdr_serialize_uint8_t>
 8014918:	7b71      	ldrb	r1, [r6, #13]
 801491a:	4007      	ands	r7, r0
 801491c:	4628      	mov	r0, r5
 801491e:	f7fd f935 	bl	8011b8c <ucdr_serialize_bool>
 8014922:	7b73      	ldrb	r3, [r6, #13]
 8014924:	ea07 0800 	and.w	r8, r7, r0
 8014928:	b93b      	cbnz	r3, 801493a <uxr_serialize_CLIENT_Representation+0x62>
 801492a:	8bb1      	ldrh	r1, [r6, #28]
 801492c:	4628      	mov	r0, r5
 801492e:	f7fd f987 	bl	8011c40 <ucdr_serialize_uint16_t>
 8014932:	ea08 0000 	and.w	r0, r8, r0
 8014936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801493a:	6931      	ldr	r1, [r6, #16]
 801493c:	4628      	mov	r0, r5
 801493e:	f7fd fb69 	bl	8012014 <ucdr_serialize_uint32_t>
 8014942:	6933      	ldr	r3, [r6, #16]
 8014944:	b1e3      	cbz	r3, 8014980 <uxr_serialize_CLIENT_Representation+0xa8>
 8014946:	b1c0      	cbz	r0, 801497a <uxr_serialize_CLIENT_Representation+0xa2>
 8014948:	4637      	mov	r7, r6
 801494a:	f04f 0900 	mov.w	r9, #0
 801494e:	e001      	b.n	8014954 <uxr_serialize_CLIENT_Representation+0x7c>
 8014950:	3708      	adds	r7, #8
 8014952:	b194      	cbz	r4, 801497a <uxr_serialize_CLIENT_Representation+0xa2>
 8014954:	6979      	ldr	r1, [r7, #20]
 8014956:	4628      	mov	r0, r5
 8014958:	f005 fc74 	bl	801a244 <ucdr_serialize_string>
 801495c:	69b9      	ldr	r1, [r7, #24]
 801495e:	4604      	mov	r4, r0
 8014960:	4628      	mov	r0, r5
 8014962:	f005 fc6f 	bl	801a244 <ucdr_serialize_string>
 8014966:	6933      	ldr	r3, [r6, #16]
 8014968:	f109 0901 	add.w	r9, r9, #1
 801496c:	4004      	ands	r4, r0
 801496e:	4599      	cmp	r9, r3
 8014970:	b2e4      	uxtb	r4, r4
 8014972:	d3ed      	bcc.n	8014950 <uxr_serialize_CLIENT_Representation+0x78>
 8014974:	ea08 0804 	and.w	r8, r8, r4
 8014978:	e7d7      	b.n	801492a <uxr_serialize_CLIENT_Representation+0x52>
 801497a:	f04f 0800 	mov.w	r8, #0
 801497e:	e7d4      	b.n	801492a <uxr_serialize_CLIENT_Representation+0x52>
 8014980:	ea08 0800 	and.w	r8, r8, r0
 8014984:	e7d1      	b.n	801492a <uxr_serialize_CLIENT_Representation+0x52>
 8014986:	bf00      	nop

08014988 <uxr_deserialize_CLIENT_Representation>:
 8014988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801498c:	2204      	movs	r2, #4
 801498e:	460c      	mov	r4, r1
 8014990:	4605      	mov	r5, r0
 8014992:	f005 fb9b 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 8014996:	2202      	movs	r2, #2
 8014998:	4607      	mov	r7, r0
 801499a:	1d21      	adds	r1, r4, #4
 801499c:	4628      	mov	r0, r5
 801499e:	f005 fb95 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 80149a2:	4038      	ands	r0, r7
 80149a4:	2202      	movs	r2, #2
 80149a6:	1da1      	adds	r1, r4, #6
 80149a8:	b2c6      	uxtb	r6, r0
 80149aa:	4628      	mov	r0, r5
 80149ac:	f005 fb8e 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 80149b0:	2204      	movs	r2, #4
 80149b2:	4006      	ands	r6, r0
 80149b4:	f104 0108 	add.w	r1, r4, #8
 80149b8:	4628      	mov	r0, r5
 80149ba:	f005 fb87 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 80149be:	f104 010c 	add.w	r1, r4, #12
 80149c2:	4006      	ands	r6, r0
 80149c4:	4628      	mov	r0, r5
 80149c6:	f7fd f925 	bl	8011c14 <ucdr_deserialize_uint8_t>
 80149ca:	f104 010d 	add.w	r1, r4, #13
 80149ce:	ea06 0700 	and.w	r7, r6, r0
 80149d2:	4628      	mov	r0, r5
 80149d4:	f7fd f8f0 	bl	8011bb8 <ucdr_deserialize_bool>
 80149d8:	7b63      	ldrb	r3, [r4, #13]
 80149da:	4007      	ands	r7, r0
 80149dc:	b93b      	cbnz	r3, 80149ee <uxr_deserialize_CLIENT_Representation+0x66>
 80149de:	f104 011c 	add.w	r1, r4, #28
 80149e2:	4628      	mov	r0, r5
 80149e4:	f7fd fa2c 	bl	8011e40 <ucdr_deserialize_uint16_t>
 80149e8:	4038      	ands	r0, r7
 80149ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149ee:	f104 0110 	add.w	r1, r4, #16
 80149f2:	4628      	mov	r0, r5
 80149f4:	f7fd fc3e 	bl	8012274 <ucdr_deserialize_uint32_t>
 80149f8:	6923      	ldr	r3, [r4, #16]
 80149fa:	2b01      	cmp	r3, #1
 80149fc:	d903      	bls.n	8014a06 <uxr_deserialize_CLIENT_Representation+0x7e>
 80149fe:	2301      	movs	r3, #1
 8014a00:	75ab      	strb	r3, [r5, #22]
 8014a02:	2700      	movs	r7, #0
 8014a04:	e7eb      	b.n	80149de <uxr_deserialize_CLIENT_Representation+0x56>
 8014a06:	b30b      	cbz	r3, 8014a4c <uxr_deserialize_CLIENT_Representation+0xc4>
 8014a08:	2800      	cmp	r0, #0
 8014a0a:	d0fa      	beq.n	8014a02 <uxr_deserialize_CLIENT_Representation+0x7a>
 8014a0c:	46a0      	mov	r8, r4
 8014a0e:	f04f 0900 	mov.w	r9, #0
 8014a12:	e001      	b.n	8014a18 <uxr_deserialize_CLIENT_Representation+0x90>
 8014a14:	2e00      	cmp	r6, #0
 8014a16:	d0f4      	beq.n	8014a02 <uxr_deserialize_CLIENT_Representation+0x7a>
 8014a18:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a20:	4628      	mov	r0, r5
 8014a22:	f005 fc1f 	bl	801a264 <ucdr_deserialize_string>
 8014a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a2a:	4606      	mov	r6, r0
 8014a2c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8014a30:	4628      	mov	r0, r5
 8014a32:	f005 fc17 	bl	801a264 <ucdr_deserialize_string>
 8014a36:	6923      	ldr	r3, [r4, #16]
 8014a38:	f109 0901 	add.w	r9, r9, #1
 8014a3c:	4006      	ands	r6, r0
 8014a3e:	4599      	cmp	r9, r3
 8014a40:	f108 0808 	add.w	r8, r8, #8
 8014a44:	b2f6      	uxtb	r6, r6
 8014a46:	d3e5      	bcc.n	8014a14 <uxr_deserialize_CLIENT_Representation+0x8c>
 8014a48:	4037      	ands	r7, r6
 8014a4a:	e7c8      	b.n	80149de <uxr_deserialize_CLIENT_Representation+0x56>
 8014a4c:	4007      	ands	r7, r0
 8014a4e:	e7c6      	b.n	80149de <uxr_deserialize_CLIENT_Representation+0x56>

08014a50 <uxr_serialize_AGENT_Representation>:
 8014a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a54:	2204      	movs	r2, #4
 8014a56:	460f      	mov	r7, r1
 8014a58:	4605      	mov	r5, r0
 8014a5a:	f005 fad3 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8014a5e:	2202      	movs	r2, #2
 8014a60:	4604      	mov	r4, r0
 8014a62:	1d39      	adds	r1, r7, #4
 8014a64:	4628      	mov	r0, r5
 8014a66:	f005 facd 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8014a6a:	4020      	ands	r0, r4
 8014a6c:	2202      	movs	r2, #2
 8014a6e:	1db9      	adds	r1, r7, #6
 8014a70:	b2c4      	uxtb	r4, r0
 8014a72:	4628      	mov	r0, r5
 8014a74:	f005 fac6 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8014a78:	7a39      	ldrb	r1, [r7, #8]
 8014a7a:	4004      	ands	r4, r0
 8014a7c:	4628      	mov	r0, r5
 8014a7e:	f7fd f885 	bl	8011b8c <ucdr_serialize_bool>
 8014a82:	7a3b      	ldrb	r3, [r7, #8]
 8014a84:	ea00 0804 	and.w	r8, r0, r4
 8014a88:	b913      	cbnz	r3, 8014a90 <uxr_serialize_AGENT_Representation+0x40>
 8014a8a:	4640      	mov	r0, r8
 8014a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a90:	68f9      	ldr	r1, [r7, #12]
 8014a92:	4628      	mov	r0, r5
 8014a94:	f7fd fabe 	bl	8012014 <ucdr_serialize_uint32_t>
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	b303      	cbz	r3, 8014ade <uxr_serialize_AGENT_Representation+0x8e>
 8014a9c:	b1d0      	cbz	r0, 8014ad4 <uxr_serialize_AGENT_Representation+0x84>
 8014a9e:	463e      	mov	r6, r7
 8014aa0:	f04f 0900 	mov.w	r9, #0
 8014aa4:	e001      	b.n	8014aaa <uxr_serialize_AGENT_Representation+0x5a>
 8014aa6:	3608      	adds	r6, #8
 8014aa8:	b1a4      	cbz	r4, 8014ad4 <uxr_serialize_AGENT_Representation+0x84>
 8014aaa:	6931      	ldr	r1, [r6, #16]
 8014aac:	4628      	mov	r0, r5
 8014aae:	f005 fbc9 	bl	801a244 <ucdr_serialize_string>
 8014ab2:	6971      	ldr	r1, [r6, #20]
 8014ab4:	4604      	mov	r4, r0
 8014ab6:	4628      	mov	r0, r5
 8014ab8:	f005 fbc4 	bl	801a244 <ucdr_serialize_string>
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	f109 0901 	add.w	r9, r9, #1
 8014ac2:	4004      	ands	r4, r0
 8014ac4:	4599      	cmp	r9, r3
 8014ac6:	b2e4      	uxtb	r4, r4
 8014ac8:	d3ed      	bcc.n	8014aa6 <uxr_serialize_AGENT_Representation+0x56>
 8014aca:	ea08 0804 	and.w	r8, r8, r4
 8014ace:	4640      	mov	r0, r8
 8014ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ad4:	f04f 0800 	mov.w	r8, #0
 8014ad8:	4640      	mov	r0, r8
 8014ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ade:	ea08 0800 	and.w	r8, r8, r0
 8014ae2:	e7d2      	b.n	8014a8a <uxr_serialize_AGENT_Representation+0x3a>

08014ae4 <uxr_serialize_DATAWRITER_Representation>:
 8014ae4:	b570      	push	{r4, r5, r6, lr}
 8014ae6:	460d      	mov	r5, r1
 8014ae8:	7809      	ldrb	r1, [r1, #0]
 8014aea:	4606      	mov	r6, r0
 8014aec:	f7fd f87c 	bl	8011be8 <ucdr_serialize_uint8_t>
 8014af0:	4604      	mov	r4, r0
 8014af2:	b130      	cbz	r0, 8014b02 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014af4:	782b      	ldrb	r3, [r5, #0]
 8014af6:	2b02      	cmp	r3, #2
 8014af8:	d00c      	beq.n	8014b14 <uxr_serialize_DATAWRITER_Representation+0x30>
 8014afa:	2b03      	cmp	r3, #3
 8014afc:	d010      	beq.n	8014b20 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8014afe:	2b01      	cmp	r3, #1
 8014b00:	d008      	beq.n	8014b14 <uxr_serialize_DATAWRITER_Representation+0x30>
 8014b02:	2202      	movs	r2, #2
 8014b04:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8014b08:	4630      	mov	r0, r6
 8014b0a:	f005 fa7b 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8014b0e:	4020      	ands	r0, r4
 8014b10:	b2c0      	uxtb	r0, r0
 8014b12:	bd70      	pop	{r4, r5, r6, pc}
 8014b14:	6869      	ldr	r1, [r5, #4]
 8014b16:	4630      	mov	r0, r6
 8014b18:	f005 fb94 	bl	801a244 <ucdr_serialize_string>
 8014b1c:	4604      	mov	r4, r0
 8014b1e:	e7f0      	b.n	8014b02 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014b20:	4629      	mov	r1, r5
 8014b22:	4630      	mov	r0, r6
 8014b24:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8014b28:	3104      	adds	r1, #4
 8014b2a:	f005 fb5f 	bl	801a1ec <ucdr_serialize_sequence_uint8_t>
 8014b2e:	4604      	mov	r4, r0
 8014b30:	e7e7      	b.n	8014b02 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014b32:	bf00      	nop

08014b34 <uxr_serialize_ObjectVariant.part.0>:
 8014b34:	b570      	push	{r4, r5, r6, lr}
 8014b36:	780b      	ldrb	r3, [r1, #0]
 8014b38:	3b01      	subs	r3, #1
 8014b3a:	460c      	mov	r4, r1
 8014b3c:	4605      	mov	r5, r0
 8014b3e:	2b0d      	cmp	r3, #13
 8014b40:	d854      	bhi.n	8014bec <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014b42:	e8df f003 	tbb	[pc, r3]
 8014b46:	0730      	.short	0x0730
 8014b48:	07071b1b 	.word	0x07071b1b
 8014b4c:	0c530707 	.word	0x0c530707
 8014b50:	494e0c0c 	.word	0x494e0c0c
 8014b54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b58:	3104      	adds	r1, #4
 8014b5a:	f7ff bfc3 	b.w	8014ae4 <uxr_serialize_DATAWRITER_Representation>
 8014b5e:	7909      	ldrb	r1, [r1, #4]
 8014b60:	f7fd f842 	bl	8011be8 <ucdr_serialize_uint8_t>
 8014b64:	b1e8      	cbz	r0, 8014ba2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8014b66:	7923      	ldrb	r3, [r4, #4]
 8014b68:	2b01      	cmp	r3, #1
 8014b6a:	d001      	beq.n	8014b70 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8014b6c:	2b02      	cmp	r3, #2
 8014b6e:	d13d      	bne.n	8014bec <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014b70:	68a1      	ldr	r1, [r4, #8]
 8014b72:	4628      	mov	r0, r5
 8014b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b78:	f005 bb64 	b.w	801a244 <ucdr_serialize_string>
 8014b7c:	7909      	ldrb	r1, [r1, #4]
 8014b7e:	f7fd f833 	bl	8011be8 <ucdr_serialize_uint8_t>
 8014b82:	4606      	mov	r6, r0
 8014b84:	b120      	cbz	r0, 8014b90 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014b86:	7923      	ldrb	r3, [r4, #4]
 8014b88:	2b02      	cmp	r3, #2
 8014b8a:	d039      	beq.n	8014c00 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8014b8c:	2b03      	cmp	r3, #3
 8014b8e:	d02f      	beq.n	8014bf0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8014b90:	2202      	movs	r2, #2
 8014b92:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8014b96:	4628      	mov	r0, r5
 8014b98:	f005 fa34 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8014b9c:	4030      	ands	r0, r6
 8014b9e:	b2c0      	uxtb	r0, r0
 8014ba0:	bd70      	pop	{r4, r5, r6, pc}
 8014ba2:	2000      	movs	r0, #0
 8014ba4:	bd70      	pop	{r4, r5, r6, pc}
 8014ba6:	7909      	ldrb	r1, [r1, #4]
 8014ba8:	f7fd f81e 	bl	8011be8 <ucdr_serialize_uint8_t>
 8014bac:	4606      	mov	r6, r0
 8014bae:	b158      	cbz	r0, 8014bc8 <uxr_serialize_ObjectVariant.part.0+0x94>
 8014bb0:	7923      	ldrb	r3, [r4, #4]
 8014bb2:	2b02      	cmp	r3, #2
 8014bb4:	d003      	beq.n	8014bbe <uxr_serialize_ObjectVariant.part.0+0x8a>
 8014bb6:	2b03      	cmp	r3, #3
 8014bb8:	d028      	beq.n	8014c0c <uxr_serialize_ObjectVariant.part.0+0xd8>
 8014bba:	2b01      	cmp	r3, #1
 8014bbc:	d104      	bne.n	8014bc8 <uxr_serialize_ObjectVariant.part.0+0x94>
 8014bbe:	68a1      	ldr	r1, [r4, #8]
 8014bc0:	4628      	mov	r0, r5
 8014bc2:	f005 fb3f 	bl	801a244 <ucdr_serialize_string>
 8014bc6:	4606      	mov	r6, r0
 8014bc8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8014bcc:	4628      	mov	r0, r5
 8014bce:	f7fd fd47 	bl	8012660 <ucdr_serialize_int16_t>
 8014bd2:	4030      	ands	r0, r6
 8014bd4:	b2c0      	uxtb	r0, r0
 8014bd6:	bd70      	pop	{r4, r5, r6, pc}
 8014bd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014bdc:	3104      	adds	r1, #4
 8014bde:	f7ff be7b 	b.w	80148d8 <uxr_serialize_CLIENT_Representation>
 8014be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014be6:	3104      	adds	r1, #4
 8014be8:	f7ff bf32 	b.w	8014a50 <uxr_serialize_AGENT_Representation>
 8014bec:	2001      	movs	r0, #1
 8014bee:	bd70      	pop	{r4, r5, r6, pc}
 8014bf0:	68a2      	ldr	r2, [r4, #8]
 8014bf2:	f104 010c 	add.w	r1, r4, #12
 8014bf6:	4628      	mov	r0, r5
 8014bf8:	f005 faf8 	bl	801a1ec <ucdr_serialize_sequence_uint8_t>
 8014bfc:	4606      	mov	r6, r0
 8014bfe:	e7c7      	b.n	8014b90 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014c00:	68a1      	ldr	r1, [r4, #8]
 8014c02:	4628      	mov	r0, r5
 8014c04:	f005 fb1e 	bl	801a244 <ucdr_serialize_string>
 8014c08:	4606      	mov	r6, r0
 8014c0a:	e7c1      	b.n	8014b90 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014c0c:	68a2      	ldr	r2, [r4, #8]
 8014c0e:	f104 010c 	add.w	r1, r4, #12
 8014c12:	4628      	mov	r0, r5
 8014c14:	f005 faea 	bl	801a1ec <ucdr_serialize_sequence_uint8_t>
 8014c18:	4606      	mov	r6, r0
 8014c1a:	e7d5      	b.n	8014bc8 <uxr_serialize_ObjectVariant.part.0+0x94>

08014c1c <uxr_deserialize_DATAWRITER_Representation>:
 8014c1c:	b570      	push	{r4, r5, r6, lr}
 8014c1e:	4606      	mov	r6, r0
 8014c20:	460d      	mov	r5, r1
 8014c22:	f7fc fff7 	bl	8011c14 <ucdr_deserialize_uint8_t>
 8014c26:	4604      	mov	r4, r0
 8014c28:	b130      	cbz	r0, 8014c38 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014c2a:	782b      	ldrb	r3, [r5, #0]
 8014c2c:	2b02      	cmp	r3, #2
 8014c2e:	d00c      	beq.n	8014c4a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014c30:	2b03      	cmp	r3, #3
 8014c32:	d012      	beq.n	8014c5a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8014c34:	2b01      	cmp	r3, #1
 8014c36:	d008      	beq.n	8014c4a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014c38:	2202      	movs	r2, #2
 8014c3a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8014c3e:	4630      	mov	r0, r6
 8014c40:	f005 fa44 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 8014c44:	4020      	ands	r0, r4
 8014c46:	b2c0      	uxtb	r0, r0
 8014c48:	bd70      	pop	{r4, r5, r6, pc}
 8014c4a:	6869      	ldr	r1, [r5, #4]
 8014c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014c50:	4630      	mov	r0, r6
 8014c52:	f005 fb07 	bl	801a264 <ucdr_deserialize_string>
 8014c56:	4604      	mov	r4, r0
 8014c58:	e7ee      	b.n	8014c38 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014c5a:	1d2b      	adds	r3, r5, #4
 8014c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014c60:	f105 0108 	add.w	r1, r5, #8
 8014c64:	4630      	mov	r0, r6
 8014c66:	f005 fad3 	bl	801a210 <ucdr_deserialize_sequence_uint8_t>
 8014c6a:	4604      	mov	r4, r0
 8014c6c:	e7e4      	b.n	8014c38 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014c6e:	bf00      	nop

08014c70 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8014c70:	b570      	push	{r4, r5, r6, lr}
 8014c72:	460d      	mov	r5, r1
 8014c74:	7809      	ldrb	r1, [r1, #0]
 8014c76:	4606      	mov	r6, r0
 8014c78:	f7fc ff88 	bl	8011b8c <ucdr_serialize_bool>
 8014c7c:	782b      	ldrb	r3, [r5, #0]
 8014c7e:	4604      	mov	r4, r0
 8014c80:	b94b      	cbnz	r3, 8014c96 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8014c82:	7a29      	ldrb	r1, [r5, #8]
 8014c84:	4630      	mov	r0, r6
 8014c86:	f7fc ff81 	bl	8011b8c <ucdr_serialize_bool>
 8014c8a:	7a2b      	ldrb	r3, [r5, #8]
 8014c8c:	4004      	ands	r4, r0
 8014c8e:	b2e4      	uxtb	r4, r4
 8014c90:	b943      	cbnz	r3, 8014ca4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8014c92:	4620      	mov	r0, r4
 8014c94:	bd70      	pop	{r4, r5, r6, pc}
 8014c96:	6869      	ldr	r1, [r5, #4]
 8014c98:	4630      	mov	r0, r6
 8014c9a:	f005 fad3 	bl	801a244 <ucdr_serialize_string>
 8014c9e:	4004      	ands	r4, r0
 8014ca0:	b2e4      	uxtb	r4, r4
 8014ca2:	e7ee      	b.n	8014c82 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8014ca4:	68e9      	ldr	r1, [r5, #12]
 8014ca6:	4630      	mov	r0, r6
 8014ca8:	f005 facc 	bl	801a244 <ucdr_serialize_string>
 8014cac:	4004      	ands	r4, r0
 8014cae:	4620      	mov	r0, r4
 8014cb0:	bd70      	pop	{r4, r5, r6, pc}
 8014cb2:	bf00      	nop

08014cb4 <uxr_serialize_OBJK_Topic_Binary>:
 8014cb4:	b570      	push	{r4, r5, r6, lr}
 8014cb6:	460d      	mov	r5, r1
 8014cb8:	6809      	ldr	r1, [r1, #0]
 8014cba:	4606      	mov	r6, r0
 8014cbc:	f005 fac2 	bl	801a244 <ucdr_serialize_string>
 8014cc0:	7929      	ldrb	r1, [r5, #4]
 8014cc2:	4604      	mov	r4, r0
 8014cc4:	4630      	mov	r0, r6
 8014cc6:	f7fc ff61 	bl	8011b8c <ucdr_serialize_bool>
 8014cca:	792b      	ldrb	r3, [r5, #4]
 8014ccc:	4004      	ands	r4, r0
 8014cce:	b2e4      	uxtb	r4, r4
 8014cd0:	b943      	cbnz	r3, 8014ce4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8014cd2:	7b29      	ldrb	r1, [r5, #12]
 8014cd4:	4630      	mov	r0, r6
 8014cd6:	f7fc ff59 	bl	8011b8c <ucdr_serialize_bool>
 8014cda:	7b2b      	ldrb	r3, [r5, #12]
 8014cdc:	4004      	ands	r4, r0
 8014cde:	b93b      	cbnz	r3, 8014cf0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	bd70      	pop	{r4, r5, r6, pc}
 8014ce4:	68a9      	ldr	r1, [r5, #8]
 8014ce6:	4630      	mov	r0, r6
 8014ce8:	f005 faac 	bl	801a244 <ucdr_serialize_string>
 8014cec:	4004      	ands	r4, r0
 8014cee:	e7f0      	b.n	8014cd2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8014cf0:	6929      	ldr	r1, [r5, #16]
 8014cf2:	4630      	mov	r0, r6
 8014cf4:	f005 faa6 	bl	801a244 <ucdr_serialize_string>
 8014cf8:	4004      	ands	r4, r0
 8014cfa:	b2e4      	uxtb	r4, r4
 8014cfc:	4620      	mov	r0, r4
 8014cfe:	bd70      	pop	{r4, r5, r6, pc}

08014d00 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8014d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d04:	460c      	mov	r4, r1
 8014d06:	7809      	ldrb	r1, [r1, #0]
 8014d08:	4606      	mov	r6, r0
 8014d0a:	f7fc ff3f 	bl	8011b8c <ucdr_serialize_bool>
 8014d0e:	7823      	ldrb	r3, [r4, #0]
 8014d10:	4605      	mov	r5, r0
 8014d12:	b96b      	cbnz	r3, 8014d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8014d14:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8014d18:	4630      	mov	r0, r6
 8014d1a:	f7fc ff37 	bl	8011b8c <ucdr_serialize_bool>
 8014d1e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8014d22:	4005      	ands	r5, r0
 8014d24:	b2ed      	uxtb	r5, r5
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d169      	bne.n	8014dfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d30:	6861      	ldr	r1, [r4, #4]
 8014d32:	4630      	mov	r0, r6
 8014d34:	f7fd f96e 	bl	8012014 <ucdr_serialize_uint32_t>
 8014d38:	6863      	ldr	r3, [r4, #4]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d06b      	beq.n	8014e16 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8014d3e:	2800      	cmp	r0, #0
 8014d40:	d067      	beq.n	8014e12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014d42:	68a1      	ldr	r1, [r4, #8]
 8014d44:	4630      	mov	r0, r6
 8014d46:	f005 fa7d 	bl	801a244 <ucdr_serialize_string>
 8014d4a:	6863      	ldr	r3, [r4, #4]
 8014d4c:	2b01      	cmp	r3, #1
 8014d4e:	d953      	bls.n	8014df8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014d50:	2800      	cmp	r0, #0
 8014d52:	d05e      	beq.n	8014e12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014d54:	68e1      	ldr	r1, [r4, #12]
 8014d56:	4630      	mov	r0, r6
 8014d58:	f005 fa74 	bl	801a244 <ucdr_serialize_string>
 8014d5c:	6863      	ldr	r3, [r4, #4]
 8014d5e:	2b02      	cmp	r3, #2
 8014d60:	d94a      	bls.n	8014df8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014d62:	2800      	cmp	r0, #0
 8014d64:	d055      	beq.n	8014e12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014d66:	6921      	ldr	r1, [r4, #16]
 8014d68:	4630      	mov	r0, r6
 8014d6a:	f005 fa6b 	bl	801a244 <ucdr_serialize_string>
 8014d6e:	6863      	ldr	r3, [r4, #4]
 8014d70:	2b03      	cmp	r3, #3
 8014d72:	d941      	bls.n	8014df8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014d74:	2800      	cmp	r0, #0
 8014d76:	d04c      	beq.n	8014e12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014d78:	6961      	ldr	r1, [r4, #20]
 8014d7a:	4630      	mov	r0, r6
 8014d7c:	f005 fa62 	bl	801a244 <ucdr_serialize_string>
 8014d80:	6863      	ldr	r3, [r4, #4]
 8014d82:	2b04      	cmp	r3, #4
 8014d84:	d938      	bls.n	8014df8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014d86:	2800      	cmp	r0, #0
 8014d88:	d043      	beq.n	8014e12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014d8a:	69a1      	ldr	r1, [r4, #24]
 8014d8c:	4630      	mov	r0, r6
 8014d8e:	f005 fa59 	bl	801a244 <ucdr_serialize_string>
 8014d92:	6863      	ldr	r3, [r4, #4]
 8014d94:	2b05      	cmp	r3, #5
 8014d96:	d92f      	bls.n	8014df8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	d03a      	beq.n	8014e12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014d9c:	69e1      	ldr	r1, [r4, #28]
 8014d9e:	4630      	mov	r0, r6
 8014da0:	f005 fa50 	bl	801a244 <ucdr_serialize_string>
 8014da4:	6863      	ldr	r3, [r4, #4]
 8014da6:	2b06      	cmp	r3, #6
 8014da8:	d926      	bls.n	8014df8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014daa:	b390      	cbz	r0, 8014e12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014dac:	6a21      	ldr	r1, [r4, #32]
 8014dae:	4630      	mov	r0, r6
 8014db0:	f005 fa48 	bl	801a244 <ucdr_serialize_string>
 8014db4:	6863      	ldr	r3, [r4, #4]
 8014db6:	2b07      	cmp	r3, #7
 8014db8:	d91e      	bls.n	8014df8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014dba:	b350      	cbz	r0, 8014e12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014dbc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014dbe:	4630      	mov	r0, r6
 8014dc0:	f005 fa40 	bl	801a244 <ucdr_serialize_string>
 8014dc4:	6863      	ldr	r3, [r4, #4]
 8014dc6:	2b08      	cmp	r3, #8
 8014dc8:	d916      	bls.n	8014df8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014dca:	b310      	cbz	r0, 8014e12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014dcc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8014dce:	4630      	mov	r0, r6
 8014dd0:	f005 fa38 	bl	801a244 <ucdr_serialize_string>
 8014dd4:	6863      	ldr	r3, [r4, #4]
 8014dd6:	2b09      	cmp	r3, #9
 8014dd8:	d90e      	bls.n	8014df8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014dda:	b1d0      	cbz	r0, 8014e12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014ddc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8014de0:	2709      	movs	r7, #9
 8014de2:	e000      	b.n	8014de6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8014de4:	b1a8      	cbz	r0, 8014e12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014de6:	f858 1b04 	ldr.w	r1, [r8], #4
 8014dea:	4630      	mov	r0, r6
 8014dec:	f005 fa2a 	bl	801a244 <ucdr_serialize_string>
 8014df0:	6862      	ldr	r2, [r4, #4]
 8014df2:	3701      	adds	r7, #1
 8014df4:	4297      	cmp	r7, r2
 8014df6:	d3f5      	bcc.n	8014de4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8014df8:	4005      	ands	r5, r0
 8014dfa:	b2ed      	uxtb	r5, r5
 8014dfc:	e78a      	b.n	8014d14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014dfe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014e00:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014e04:	4630      	mov	r0, r6
 8014e06:	f005 f9f1 	bl	801a1ec <ucdr_serialize_sequence_uint8_t>
 8014e0a:	4005      	ands	r5, r0
 8014e0c:	4628      	mov	r0, r5
 8014e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e12:	2500      	movs	r5, #0
 8014e14:	e77e      	b.n	8014d14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014e16:	4028      	ands	r0, r5
 8014e18:	b2c5      	uxtb	r5, r0
 8014e1a:	e77b      	b.n	8014d14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08014e1c <uxr_serialize_OBJK_Publisher_Binary>:
 8014e1c:	b570      	push	{r4, r5, r6, lr}
 8014e1e:	460d      	mov	r5, r1
 8014e20:	7809      	ldrb	r1, [r1, #0]
 8014e22:	4606      	mov	r6, r0
 8014e24:	f7fc feb2 	bl	8011b8c <ucdr_serialize_bool>
 8014e28:	782b      	ldrb	r3, [r5, #0]
 8014e2a:	4604      	mov	r4, r0
 8014e2c:	b94b      	cbnz	r3, 8014e42 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8014e2e:	7a29      	ldrb	r1, [r5, #8]
 8014e30:	4630      	mov	r0, r6
 8014e32:	f7fc feab 	bl	8011b8c <ucdr_serialize_bool>
 8014e36:	7a2b      	ldrb	r3, [r5, #8]
 8014e38:	4004      	ands	r4, r0
 8014e3a:	b2e4      	uxtb	r4, r4
 8014e3c:	b943      	cbnz	r3, 8014e50 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8014e3e:	4620      	mov	r0, r4
 8014e40:	bd70      	pop	{r4, r5, r6, pc}
 8014e42:	6869      	ldr	r1, [r5, #4]
 8014e44:	4630      	mov	r0, r6
 8014e46:	f005 f9fd 	bl	801a244 <ucdr_serialize_string>
 8014e4a:	4004      	ands	r4, r0
 8014e4c:	b2e4      	uxtb	r4, r4
 8014e4e:	e7ee      	b.n	8014e2e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8014e50:	f105 010c 	add.w	r1, r5, #12
 8014e54:	4630      	mov	r0, r6
 8014e56:	f7ff ff53 	bl	8014d00 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8014e5a:	4004      	ands	r4, r0
 8014e5c:	4620      	mov	r0, r4
 8014e5e:	bd70      	pop	{r4, r5, r6, pc}

08014e60 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8014e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e64:	460c      	mov	r4, r1
 8014e66:	7809      	ldrb	r1, [r1, #0]
 8014e68:	4606      	mov	r6, r0
 8014e6a:	f7fc fe8f 	bl	8011b8c <ucdr_serialize_bool>
 8014e6e:	7823      	ldrb	r3, [r4, #0]
 8014e70:	4605      	mov	r5, r0
 8014e72:	b96b      	cbnz	r3, 8014e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8014e74:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8014e78:	4630      	mov	r0, r6
 8014e7a:	f7fc fe87 	bl	8011b8c <ucdr_serialize_bool>
 8014e7e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8014e82:	4005      	ands	r5, r0
 8014e84:	b2ed      	uxtb	r5, r5
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d169      	bne.n	8014f5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8014e8a:	4628      	mov	r0, r5
 8014e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e90:	6861      	ldr	r1, [r4, #4]
 8014e92:	4630      	mov	r0, r6
 8014e94:	f7fd f8be 	bl	8012014 <ucdr_serialize_uint32_t>
 8014e98:	6863      	ldr	r3, [r4, #4]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d06b      	beq.n	8014f76 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8014e9e:	2800      	cmp	r0, #0
 8014ea0:	d067      	beq.n	8014f72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014ea2:	68a1      	ldr	r1, [r4, #8]
 8014ea4:	4630      	mov	r0, r6
 8014ea6:	f005 f9cd 	bl	801a244 <ucdr_serialize_string>
 8014eaa:	6863      	ldr	r3, [r4, #4]
 8014eac:	2b01      	cmp	r3, #1
 8014eae:	d953      	bls.n	8014f58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014eb0:	2800      	cmp	r0, #0
 8014eb2:	d05e      	beq.n	8014f72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014eb4:	68e1      	ldr	r1, [r4, #12]
 8014eb6:	4630      	mov	r0, r6
 8014eb8:	f005 f9c4 	bl	801a244 <ucdr_serialize_string>
 8014ebc:	6863      	ldr	r3, [r4, #4]
 8014ebe:	2b02      	cmp	r3, #2
 8014ec0:	d94a      	bls.n	8014f58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014ec2:	2800      	cmp	r0, #0
 8014ec4:	d055      	beq.n	8014f72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014ec6:	6921      	ldr	r1, [r4, #16]
 8014ec8:	4630      	mov	r0, r6
 8014eca:	f005 f9bb 	bl	801a244 <ucdr_serialize_string>
 8014ece:	6863      	ldr	r3, [r4, #4]
 8014ed0:	2b03      	cmp	r3, #3
 8014ed2:	d941      	bls.n	8014f58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014ed4:	2800      	cmp	r0, #0
 8014ed6:	d04c      	beq.n	8014f72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014ed8:	6961      	ldr	r1, [r4, #20]
 8014eda:	4630      	mov	r0, r6
 8014edc:	f005 f9b2 	bl	801a244 <ucdr_serialize_string>
 8014ee0:	6863      	ldr	r3, [r4, #4]
 8014ee2:	2b04      	cmp	r3, #4
 8014ee4:	d938      	bls.n	8014f58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014ee6:	2800      	cmp	r0, #0
 8014ee8:	d043      	beq.n	8014f72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014eea:	69a1      	ldr	r1, [r4, #24]
 8014eec:	4630      	mov	r0, r6
 8014eee:	f005 f9a9 	bl	801a244 <ucdr_serialize_string>
 8014ef2:	6863      	ldr	r3, [r4, #4]
 8014ef4:	2b05      	cmp	r3, #5
 8014ef6:	d92f      	bls.n	8014f58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014ef8:	2800      	cmp	r0, #0
 8014efa:	d03a      	beq.n	8014f72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014efc:	69e1      	ldr	r1, [r4, #28]
 8014efe:	4630      	mov	r0, r6
 8014f00:	f005 f9a0 	bl	801a244 <ucdr_serialize_string>
 8014f04:	6863      	ldr	r3, [r4, #4]
 8014f06:	2b06      	cmp	r3, #6
 8014f08:	d926      	bls.n	8014f58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014f0a:	b390      	cbz	r0, 8014f72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014f0c:	6a21      	ldr	r1, [r4, #32]
 8014f0e:	4630      	mov	r0, r6
 8014f10:	f005 f998 	bl	801a244 <ucdr_serialize_string>
 8014f14:	6863      	ldr	r3, [r4, #4]
 8014f16:	2b07      	cmp	r3, #7
 8014f18:	d91e      	bls.n	8014f58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014f1a:	b350      	cbz	r0, 8014f72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014f1c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014f1e:	4630      	mov	r0, r6
 8014f20:	f005 f990 	bl	801a244 <ucdr_serialize_string>
 8014f24:	6863      	ldr	r3, [r4, #4]
 8014f26:	2b08      	cmp	r3, #8
 8014f28:	d916      	bls.n	8014f58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014f2a:	b310      	cbz	r0, 8014f72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014f2c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8014f2e:	4630      	mov	r0, r6
 8014f30:	f005 f988 	bl	801a244 <ucdr_serialize_string>
 8014f34:	6863      	ldr	r3, [r4, #4]
 8014f36:	2b09      	cmp	r3, #9
 8014f38:	d90e      	bls.n	8014f58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014f3a:	b1d0      	cbz	r0, 8014f72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014f3c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8014f40:	2709      	movs	r7, #9
 8014f42:	e000      	b.n	8014f46 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8014f44:	b1a8      	cbz	r0, 8014f72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014f46:	f858 1b04 	ldr.w	r1, [r8], #4
 8014f4a:	4630      	mov	r0, r6
 8014f4c:	f005 f97a 	bl	801a244 <ucdr_serialize_string>
 8014f50:	6862      	ldr	r2, [r4, #4]
 8014f52:	3701      	adds	r7, #1
 8014f54:	4297      	cmp	r7, r2
 8014f56:	d3f5      	bcc.n	8014f44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8014f58:	4005      	ands	r5, r0
 8014f5a:	b2ed      	uxtb	r5, r5
 8014f5c:	e78a      	b.n	8014e74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014f5e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014f60:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014f64:	4630      	mov	r0, r6
 8014f66:	f005 f941 	bl	801a1ec <ucdr_serialize_sequence_uint8_t>
 8014f6a:	4005      	ands	r5, r0
 8014f6c:	4628      	mov	r0, r5
 8014f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f72:	2500      	movs	r5, #0
 8014f74:	e77e      	b.n	8014e74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014f76:	4028      	ands	r0, r5
 8014f78:	b2c5      	uxtb	r5, r0
 8014f7a:	e77b      	b.n	8014e74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08014f7c <uxr_serialize_OBJK_Subscriber_Binary>:
 8014f7c:	b570      	push	{r4, r5, r6, lr}
 8014f7e:	460d      	mov	r5, r1
 8014f80:	7809      	ldrb	r1, [r1, #0]
 8014f82:	4606      	mov	r6, r0
 8014f84:	f7fc fe02 	bl	8011b8c <ucdr_serialize_bool>
 8014f88:	782b      	ldrb	r3, [r5, #0]
 8014f8a:	4604      	mov	r4, r0
 8014f8c:	b94b      	cbnz	r3, 8014fa2 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8014f8e:	7a29      	ldrb	r1, [r5, #8]
 8014f90:	4630      	mov	r0, r6
 8014f92:	f7fc fdfb 	bl	8011b8c <ucdr_serialize_bool>
 8014f96:	7a2b      	ldrb	r3, [r5, #8]
 8014f98:	4004      	ands	r4, r0
 8014f9a:	b2e4      	uxtb	r4, r4
 8014f9c:	b943      	cbnz	r3, 8014fb0 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8014f9e:	4620      	mov	r0, r4
 8014fa0:	bd70      	pop	{r4, r5, r6, pc}
 8014fa2:	6869      	ldr	r1, [r5, #4]
 8014fa4:	4630      	mov	r0, r6
 8014fa6:	f005 f94d 	bl	801a244 <ucdr_serialize_string>
 8014faa:	4004      	ands	r4, r0
 8014fac:	b2e4      	uxtb	r4, r4
 8014fae:	e7ee      	b.n	8014f8e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8014fb0:	f105 010c 	add.w	r1, r5, #12
 8014fb4:	4630      	mov	r0, r6
 8014fb6:	f7ff ff53 	bl	8014e60 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8014fba:	4004      	ands	r4, r0
 8014fbc:	4620      	mov	r0, r4
 8014fbe:	bd70      	pop	{r4, r5, r6, pc}

08014fc0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8014fc0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8014fc4:	4688      	mov	r8, r1
 8014fc6:	8809      	ldrh	r1, [r1, #0]
 8014fc8:	4681      	mov	r9, r0
 8014fca:	f7fc fe39 	bl	8011c40 <ucdr_serialize_uint16_t>
 8014fce:	f898 1002 	ldrb.w	r1, [r8, #2]
 8014fd2:	4606      	mov	r6, r0
 8014fd4:	4648      	mov	r0, r9
 8014fd6:	f7fc fdd9 	bl	8011b8c <ucdr_serialize_bool>
 8014fda:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014fde:	4006      	ands	r6, r0
 8014fe0:	b2f5      	uxtb	r5, r6
 8014fe2:	b9eb      	cbnz	r3, 8015020 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014fe4:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014fe8:	4648      	mov	r0, r9
 8014fea:	f7fc fdcf 	bl	8011b8c <ucdr_serialize_bool>
 8014fee:	f898 3006 	ldrb.w	r3, [r8, #6]
 8014ff2:	4005      	ands	r5, r0
 8014ff4:	bb7b      	cbnz	r3, 8015056 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8014ff6:	f898 100c 	ldrb.w	r1, [r8, #12]
 8014ffa:	4648      	mov	r0, r9
 8014ffc:	f7fc fdc6 	bl	8011b8c <ucdr_serialize_bool>
 8015000:	f898 300c 	ldrb.w	r3, [r8, #12]
 8015004:	4005      	ands	r5, r0
 8015006:	b9f3      	cbnz	r3, 8015046 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8015008:	f898 1014 	ldrb.w	r1, [r8, #20]
 801500c:	4648      	mov	r0, r9
 801500e:	f7fc fdbd 	bl	8011b8c <ucdr_serialize_bool>
 8015012:	f898 3014 	ldrb.w	r3, [r8, #20]
 8015016:	4005      	ands	r5, r0
 8015018:	b94b      	cbnz	r3, 801502e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801501a:	4628      	mov	r0, r5
 801501c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015020:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8015024:	4648      	mov	r0, r9
 8015026:	f7fc fe0b 	bl	8011c40 <ucdr_serialize_uint16_t>
 801502a:	4005      	ands	r5, r0
 801502c:	e7da      	b.n	8014fe4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801502e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8015032:	f108 011c 	add.w	r1, r8, #28
 8015036:	4648      	mov	r0, r9
 8015038:	f005 f8d8 	bl	801a1ec <ucdr_serialize_sequence_uint8_t>
 801503c:	4028      	ands	r0, r5
 801503e:	b2c5      	uxtb	r5, r0
 8015040:	4628      	mov	r0, r5
 8015042:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015046:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801504a:	4648      	mov	r0, r9
 801504c:	f7fc ffe2 	bl	8012014 <ucdr_serialize_uint32_t>
 8015050:	4028      	ands	r0, r5
 8015052:	b2c5      	uxtb	r5, r0
 8015054:	e7d8      	b.n	8015008 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8015056:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801505a:	4648      	mov	r0, r9
 801505c:	f7fc ffda 	bl	8012014 <ucdr_serialize_uint32_t>
 8015060:	4028      	ands	r0, r5
 8015062:	b2c5      	uxtb	r5, r0
 8015064:	e7c7      	b.n	8014ff6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8015066:	bf00      	nop

08015068 <uxr_serialize_OBJK_DataReader_Binary>:
 8015068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801506a:	2202      	movs	r2, #2
 801506c:	460c      	mov	r4, r1
 801506e:	4606      	mov	r6, r0
 8015070:	f004 ffc8 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8015074:	78a1      	ldrb	r1, [r4, #2]
 8015076:	4605      	mov	r5, r0
 8015078:	4630      	mov	r0, r6
 801507a:	f7fc fd87 	bl	8011b8c <ucdr_serialize_bool>
 801507e:	78a3      	ldrb	r3, [r4, #2]
 8015080:	4005      	ands	r5, r0
 8015082:	b2ed      	uxtb	r5, r5
 8015084:	b90b      	cbnz	r3, 801508a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8015086:	4628      	mov	r0, r5
 8015088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801508a:	f104 0108 	add.w	r1, r4, #8
 801508e:	4630      	mov	r0, r6
 8015090:	f7ff ff96 	bl	8014fc0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015094:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015098:	4607      	mov	r7, r0
 801509a:	4630      	mov	r0, r6
 801509c:	f7fc fd76 	bl	8011b8c <ucdr_serialize_bool>
 80150a0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80150a4:	4038      	ands	r0, r7
 80150a6:	b2c7      	uxtb	r7, r0
 80150a8:	b95b      	cbnz	r3, 80150c2 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80150aa:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80150ae:	4630      	mov	r0, r6
 80150b0:	f7fc fd6c 	bl	8011b8c <ucdr_serialize_bool>
 80150b4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80150b8:	4007      	ands	r7, r0
 80150ba:	b94b      	cbnz	r3, 80150d0 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80150bc:	403d      	ands	r5, r7
 80150be:	4628      	mov	r0, r5
 80150c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150c2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80150c6:	4630      	mov	r0, r6
 80150c8:	f7fd f9fa 	bl	80124c0 <ucdr_serialize_uint64_t>
 80150cc:	4007      	ands	r7, r0
 80150ce:	e7ec      	b.n	80150aa <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80150d0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80150d2:	4630      	mov	r0, r6
 80150d4:	f005 f8b6 	bl	801a244 <ucdr_serialize_string>
 80150d8:	4007      	ands	r7, r0
 80150da:	b2ff      	uxtb	r7, r7
 80150dc:	e7ee      	b.n	80150bc <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80150de:	bf00      	nop

080150e0 <uxr_serialize_OBJK_DataWriter_Binary>:
 80150e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150e2:	2202      	movs	r2, #2
 80150e4:	460d      	mov	r5, r1
 80150e6:	4606      	mov	r6, r0
 80150e8:	f004 ff8c 	bl	801a004 <ucdr_serialize_array_uint8_t>
 80150ec:	78a9      	ldrb	r1, [r5, #2]
 80150ee:	4604      	mov	r4, r0
 80150f0:	4630      	mov	r0, r6
 80150f2:	f7fc fd4b 	bl	8011b8c <ucdr_serialize_bool>
 80150f6:	78ab      	ldrb	r3, [r5, #2]
 80150f8:	4004      	ands	r4, r0
 80150fa:	b2e4      	uxtb	r4, r4
 80150fc:	b90b      	cbnz	r3, 8015102 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80150fe:	4620      	mov	r0, r4
 8015100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015102:	f105 0108 	add.w	r1, r5, #8
 8015106:	4630      	mov	r0, r6
 8015108:	f7ff ff5a 	bl	8014fc0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801510c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8015110:	4607      	mov	r7, r0
 8015112:	4630      	mov	r0, r6
 8015114:	f7fc fd3a 	bl	8011b8c <ucdr_serialize_bool>
 8015118:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801511c:	4038      	ands	r0, r7
 801511e:	b2c7      	uxtb	r7, r0
 8015120:	b913      	cbnz	r3, 8015128 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8015122:	403c      	ands	r4, r7
 8015124:	4620      	mov	r0, r4
 8015126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015128:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801512c:	4630      	mov	r0, r6
 801512e:	f7fd f9c7 	bl	80124c0 <ucdr_serialize_uint64_t>
 8015132:	4007      	ands	r7, r0
 8015134:	e7f5      	b.n	8015122 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8015136:	bf00      	nop

08015138 <uxr_deserialize_ObjectVariant>:
 8015138:	b570      	push	{r4, r5, r6, lr}
 801513a:	4605      	mov	r5, r0
 801513c:	460e      	mov	r6, r1
 801513e:	f7fc fd69 	bl	8011c14 <ucdr_deserialize_uint8_t>
 8015142:	b168      	cbz	r0, 8015160 <uxr_deserialize_ObjectVariant+0x28>
 8015144:	7833      	ldrb	r3, [r6, #0]
 8015146:	3b01      	subs	r3, #1
 8015148:	4604      	mov	r4, r0
 801514a:	2b0d      	cmp	r3, #13
 801514c:	d809      	bhi.n	8015162 <uxr_deserialize_ObjectVariant+0x2a>
 801514e:	e8df f003 	tbb	[pc, r3]
 8015152:	0a41      	.short	0x0a41
 8015154:	0a0a2323 	.word	0x0a0a2323
 8015158:	10080a0a 	.word	0x10080a0a
 801515c:	565c1010 	.word	0x565c1010
 8015160:	2400      	movs	r4, #0
 8015162:	4620      	mov	r0, r4
 8015164:	bd70      	pop	{r4, r5, r6, pc}
 8015166:	1d31      	adds	r1, r6, #4
 8015168:	4628      	mov	r0, r5
 801516a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801516e:	f7ff bd55 	b.w	8014c1c <uxr_deserialize_DATAWRITER_Representation>
 8015172:	1d31      	adds	r1, r6, #4
 8015174:	4628      	mov	r0, r5
 8015176:	f7fc fd4d 	bl	8011c14 <ucdr_deserialize_uint8_t>
 801517a:	2800      	cmp	r0, #0
 801517c:	d0f0      	beq.n	8015160 <uxr_deserialize_ObjectVariant+0x28>
 801517e:	7933      	ldrb	r3, [r6, #4]
 8015180:	2b01      	cmp	r3, #1
 8015182:	d001      	beq.n	8015188 <uxr_deserialize_ObjectVariant+0x50>
 8015184:	2b02      	cmp	r3, #2
 8015186:	d1ec      	bne.n	8015162 <uxr_deserialize_ObjectVariant+0x2a>
 8015188:	68b1      	ldr	r1, [r6, #8]
 801518a:	4628      	mov	r0, r5
 801518c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015194:	f005 b866 	b.w	801a264 <ucdr_deserialize_string>
 8015198:	1d31      	adds	r1, r6, #4
 801519a:	4628      	mov	r0, r5
 801519c:	f7fc fd3a 	bl	8011c14 <ucdr_deserialize_uint8_t>
 80151a0:	4604      	mov	r4, r0
 80151a2:	b170      	cbz	r0, 80151c2 <uxr_deserialize_ObjectVariant+0x8a>
 80151a4:	7933      	ldrb	r3, [r6, #4]
 80151a6:	2b02      	cmp	r3, #2
 80151a8:	d04c      	beq.n	8015244 <uxr_deserialize_ObjectVariant+0x10c>
 80151aa:	2b03      	cmp	r3, #3
 80151ac:	d109      	bne.n	80151c2 <uxr_deserialize_ObjectVariant+0x8a>
 80151ae:	f106 0308 	add.w	r3, r6, #8
 80151b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80151b6:	f106 010c 	add.w	r1, r6, #12
 80151ba:	4628      	mov	r0, r5
 80151bc:	f005 f828 	bl	801a210 <ucdr_deserialize_sequence_uint8_t>
 80151c0:	4604      	mov	r4, r0
 80151c2:	2202      	movs	r2, #2
 80151c4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80151c8:	4628      	mov	r0, r5
 80151ca:	f004 ff7f 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 80151ce:	4020      	ands	r0, r4
 80151d0:	b2c4      	uxtb	r4, r0
 80151d2:	e7c6      	b.n	8015162 <uxr_deserialize_ObjectVariant+0x2a>
 80151d4:	1d31      	adds	r1, r6, #4
 80151d6:	4628      	mov	r0, r5
 80151d8:	f7fc fd1c 	bl	8011c14 <ucdr_deserialize_uint8_t>
 80151dc:	4604      	mov	r4, r0
 80151de:	b130      	cbz	r0, 80151ee <uxr_deserialize_ObjectVariant+0xb6>
 80151e0:	7933      	ldrb	r3, [r6, #4]
 80151e2:	2b02      	cmp	r3, #2
 80151e4:	d036      	beq.n	8015254 <uxr_deserialize_ObjectVariant+0x11c>
 80151e6:	2b03      	cmp	r3, #3
 80151e8:	d03c      	beq.n	8015264 <uxr_deserialize_ObjectVariant+0x12c>
 80151ea:	2b01      	cmp	r3, #1
 80151ec:	d032      	beq.n	8015254 <uxr_deserialize_ObjectVariant+0x11c>
 80151ee:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80151f2:	4628      	mov	r0, r5
 80151f4:	f7fd fab4 	bl	8012760 <ucdr_deserialize_int16_t>
 80151f8:	4020      	ands	r0, r4
 80151fa:	b2c4      	uxtb	r4, r0
 80151fc:	e7b1      	b.n	8015162 <uxr_deserialize_ObjectVariant+0x2a>
 80151fe:	1d31      	adds	r1, r6, #4
 8015200:	4628      	mov	r0, r5
 8015202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015206:	f7ff bbbf 	b.w	8014988 <uxr_deserialize_CLIENT_Representation>
 801520a:	2204      	movs	r2, #4
 801520c:	18b1      	adds	r1, r6, r2
 801520e:	4628      	mov	r0, r5
 8015210:	f004 ff5c 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 8015214:	2202      	movs	r2, #2
 8015216:	f106 0108 	add.w	r1, r6, #8
 801521a:	4604      	mov	r4, r0
 801521c:	4628      	mov	r0, r5
 801521e:	f004 ff55 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 8015222:	2202      	movs	r2, #2
 8015224:	4004      	ands	r4, r0
 8015226:	f106 010a 	add.w	r1, r6, #10
 801522a:	4628      	mov	r0, r5
 801522c:	f004 ff4e 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 8015230:	b2e4      	uxtb	r4, r4
 8015232:	4603      	mov	r3, r0
 8015234:	f106 010c 	add.w	r1, r6, #12
 8015238:	4628      	mov	r0, r5
 801523a:	401c      	ands	r4, r3
 801523c:	f7fc fcbc 	bl	8011bb8 <ucdr_deserialize_bool>
 8015240:	4004      	ands	r4, r0
 8015242:	e78e      	b.n	8015162 <uxr_deserialize_ObjectVariant+0x2a>
 8015244:	68b1      	ldr	r1, [r6, #8]
 8015246:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801524a:	4628      	mov	r0, r5
 801524c:	f005 f80a 	bl	801a264 <ucdr_deserialize_string>
 8015250:	4604      	mov	r4, r0
 8015252:	e7b6      	b.n	80151c2 <uxr_deserialize_ObjectVariant+0x8a>
 8015254:	68b1      	ldr	r1, [r6, #8]
 8015256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801525a:	4628      	mov	r0, r5
 801525c:	f005 f802 	bl	801a264 <ucdr_deserialize_string>
 8015260:	4604      	mov	r4, r0
 8015262:	e7c4      	b.n	80151ee <uxr_deserialize_ObjectVariant+0xb6>
 8015264:	f106 0308 	add.w	r3, r6, #8
 8015268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801526c:	f106 010c 	add.w	r1, r6, #12
 8015270:	4628      	mov	r0, r5
 8015272:	f004 ffcd 	bl	801a210 <ucdr_deserialize_sequence_uint8_t>
 8015276:	4604      	mov	r4, r0
 8015278:	e7b9      	b.n	80151ee <uxr_deserialize_ObjectVariant+0xb6>
 801527a:	bf00      	nop

0801527c <uxr_deserialize_BaseObjectRequest>:
 801527c:	b570      	push	{r4, r5, r6, lr}
 801527e:	2202      	movs	r2, #2
 8015280:	4605      	mov	r5, r0
 8015282:	460e      	mov	r6, r1
 8015284:	f004 ff22 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 8015288:	2202      	movs	r2, #2
 801528a:	4604      	mov	r4, r0
 801528c:	18b1      	adds	r1, r6, r2
 801528e:	4628      	mov	r0, r5
 8015290:	f004 ff1c 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 8015294:	4020      	ands	r0, r4
 8015296:	b2c0      	uxtb	r0, r0
 8015298:	bd70      	pop	{r4, r5, r6, pc}
 801529a:	bf00      	nop

0801529c <uxr_serialize_ActivityInfoVariant>:
 801529c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152a0:	460d      	mov	r5, r1
 80152a2:	7809      	ldrb	r1, [r1, #0]
 80152a4:	4607      	mov	r7, r0
 80152a6:	f7fc fc9f 	bl	8011be8 <ucdr_serialize_uint8_t>
 80152aa:	4681      	mov	r9, r0
 80152ac:	b138      	cbz	r0, 80152be <uxr_serialize_ActivityInfoVariant+0x22>
 80152ae:	782b      	ldrb	r3, [r5, #0]
 80152b0:	2b06      	cmp	r3, #6
 80152b2:	f000 8082 	beq.w	80153ba <uxr_serialize_ActivityInfoVariant+0x11e>
 80152b6:	2b0d      	cmp	r3, #13
 80152b8:	d016      	beq.n	80152e8 <uxr_serialize_ActivityInfoVariant+0x4c>
 80152ba:	2b05      	cmp	r3, #5
 80152bc:	d002      	beq.n	80152c4 <uxr_serialize_ActivityInfoVariant+0x28>
 80152be:	4648      	mov	r0, r9
 80152c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152c4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80152c8:	4638      	mov	r0, r7
 80152ca:	f7fd f9c9 	bl	8012660 <ucdr_serialize_int16_t>
 80152ce:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80152d2:	4681      	mov	r9, r0
 80152d4:	4638      	mov	r0, r7
 80152d6:	f7fd f8f3 	bl	80124c0 <ucdr_serialize_uint64_t>
 80152da:	ea09 0000 	and.w	r0, r9, r0
 80152de:	fa5f f980 	uxtb.w	r9, r0
 80152e2:	4648      	mov	r0, r9
 80152e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152e8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80152ec:	4638      	mov	r0, r7
 80152ee:	f7fd f9b7 	bl	8012660 <ucdr_serialize_int16_t>
 80152f2:	68e9      	ldr	r1, [r5, #12]
 80152f4:	4681      	mov	r9, r0
 80152f6:	4638      	mov	r0, r7
 80152f8:	f7fc fe8c 	bl	8012014 <ucdr_serialize_uint32_t>
 80152fc:	68eb      	ldr	r3, [r5, #12]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d0eb      	beq.n	80152da <uxr_serialize_ActivityInfoVariant+0x3e>
 8015302:	b320      	cbz	r0, 801534e <uxr_serialize_ActivityInfoVariant+0xb2>
 8015304:	f105 080c 	add.w	r8, r5, #12
 8015308:	2600      	movs	r6, #0
 801530a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 801530e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8015312:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8015316:	4638      	mov	r0, r7
 8015318:	f7fc fc66 	bl	8011be8 <ucdr_serialize_uint8_t>
 801531c:	2800      	cmp	r0, #0
 801531e:	d053      	beq.n	80153c8 <uxr_serialize_ActivityInfoVariant+0x12c>
 8015320:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8015324:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015328:	0074      	lsls	r4, r6, #1
 801532a:	00c9      	lsls	r1, r1, #3
 801532c:	2b03      	cmp	r3, #3
 801532e:	d854      	bhi.n	80153da <uxr_serialize_ActivityInfoVariant+0x13e>
 8015330:	e8df f003 	tbb	[pc, r3]
 8015334:	02102132 	.word	0x02102132
 8015338:	4441      	add	r1, r8
 801533a:	4638      	mov	r0, r7
 801533c:	6889      	ldr	r1, [r1, #8]
 801533e:	f004 ff81 	bl	801a244 <ucdr_serialize_string>
 8015342:	68ea      	ldr	r2, [r5, #12]
 8015344:	3601      	adds	r6, #1
 8015346:	4296      	cmp	r6, r2
 8015348:	d242      	bcs.n	80153d0 <uxr_serialize_ActivityInfoVariant+0x134>
 801534a:	2800      	cmp	r0, #0
 801534c:	d1dd      	bne.n	801530a <uxr_serialize_ActivityInfoVariant+0x6e>
 801534e:	f04f 0900 	mov.w	r9, #0
 8015352:	e7b4      	b.n	80152be <uxr_serialize_ActivityInfoVariant+0x22>
 8015354:	3108      	adds	r1, #8
 8015356:	4441      	add	r1, r8
 8015358:	2210      	movs	r2, #16
 801535a:	4638      	mov	r0, r7
 801535c:	f004 fe52 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8015360:	4434      	add	r4, r6
 8015362:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015366:	4604      	mov	r4, r0
 8015368:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801536a:	4638      	mov	r0, r7
 801536c:	f7fc fe52 	bl	8012014 <ucdr_serialize_uint32_t>
 8015370:	4020      	ands	r0, r4
 8015372:	b2c0      	uxtb	r0, r0
 8015374:	e7e5      	b.n	8015342 <uxr_serialize_ActivityInfoVariant+0xa6>
 8015376:	3108      	adds	r1, #8
 8015378:	4441      	add	r1, r8
 801537a:	2204      	movs	r2, #4
 801537c:	4638      	mov	r0, r7
 801537e:	f004 fe41 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8015382:	4434      	add	r4, r6
 8015384:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015388:	4604      	mov	r4, r0
 801538a:	8b19      	ldrh	r1, [r3, #24]
 801538c:	4638      	mov	r0, r7
 801538e:	f7fc fc57 	bl	8011c40 <ucdr_serialize_uint16_t>
 8015392:	4020      	ands	r0, r4
 8015394:	b2c0      	uxtb	r0, r0
 8015396:	e7d4      	b.n	8015342 <uxr_serialize_ActivityInfoVariant+0xa6>
 8015398:	3108      	adds	r1, #8
 801539a:	4441      	add	r1, r8
 801539c:	2202      	movs	r2, #2
 801539e:	4638      	mov	r0, r7
 80153a0:	f004 fe30 	bl	801a004 <ucdr_serialize_array_uint8_t>
 80153a4:	4434      	add	r4, r6
 80153a6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80153aa:	4604      	mov	r4, r0
 80153ac:	7d99      	ldrb	r1, [r3, #22]
 80153ae:	4638      	mov	r0, r7
 80153b0:	f7fc fc1a 	bl	8011be8 <ucdr_serialize_uint8_t>
 80153b4:	4020      	ands	r0, r4
 80153b6:	b2c0      	uxtb	r0, r0
 80153b8:	e7c3      	b.n	8015342 <uxr_serialize_ActivityInfoVariant+0xa6>
 80153ba:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80153be:	4638      	mov	r0, r7
 80153c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153c4:	f7fd b94c 	b.w	8012660 <ucdr_serialize_int16_t>
 80153c8:	68ea      	ldr	r2, [r5, #12]
 80153ca:	3601      	adds	r6, #1
 80153cc:	42b2      	cmp	r2, r6
 80153ce:	d8be      	bhi.n	801534e <uxr_serialize_ActivityInfoVariant+0xb2>
 80153d0:	ea09 0900 	and.w	r9, r9, r0
 80153d4:	fa5f f989 	uxtb.w	r9, r9
 80153d8:	e771      	b.n	80152be <uxr_serialize_ActivityInfoVariant+0x22>
 80153da:	68eb      	ldr	r3, [r5, #12]
 80153dc:	3601      	adds	r6, #1
 80153de:	429e      	cmp	r6, r3
 80153e0:	f10a 0a18 	add.w	sl, sl, #24
 80153e4:	d395      	bcc.n	8015312 <uxr_serialize_ActivityInfoVariant+0x76>
 80153e6:	e76a      	b.n	80152be <uxr_serialize_ActivityInfoVariant+0x22>

080153e8 <uxr_deserialize_BaseObjectReply>:
 80153e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153ec:	2202      	movs	r2, #2
 80153ee:	4606      	mov	r6, r0
 80153f0:	460f      	mov	r7, r1
 80153f2:	f004 fe6b 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 80153f6:	2202      	movs	r2, #2
 80153f8:	18b9      	adds	r1, r7, r2
 80153fa:	4605      	mov	r5, r0
 80153fc:	4630      	mov	r0, r6
 80153fe:	f004 fe65 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 8015402:	1d39      	adds	r1, r7, #4
 8015404:	4680      	mov	r8, r0
 8015406:	4630      	mov	r0, r6
 8015408:	f7fc fc04 	bl	8011c14 <ucdr_deserialize_uint8_t>
 801540c:	1d79      	adds	r1, r7, #5
 801540e:	4604      	mov	r4, r0
 8015410:	4630      	mov	r0, r6
 8015412:	f7fc fbff 	bl	8011c14 <ucdr_deserialize_uint8_t>
 8015416:	ea05 0508 	and.w	r5, r5, r8
 801541a:	402c      	ands	r4, r5
 801541c:	4020      	ands	r0, r4
 801541e:	b2c0      	uxtb	r0, r0
 8015420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015424 <uxr_serialize_ReadSpecification>:
 8015424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015428:	460e      	mov	r6, r1
 801542a:	7809      	ldrb	r1, [r1, #0]
 801542c:	4607      	mov	r7, r0
 801542e:	f7fc fbdb 	bl	8011be8 <ucdr_serialize_uint8_t>
 8015432:	7871      	ldrb	r1, [r6, #1]
 8015434:	4604      	mov	r4, r0
 8015436:	4638      	mov	r0, r7
 8015438:	f7fc fbd6 	bl	8011be8 <ucdr_serialize_uint8_t>
 801543c:	78b1      	ldrb	r1, [r6, #2]
 801543e:	4004      	ands	r4, r0
 8015440:	4638      	mov	r0, r7
 8015442:	f7fc fba3 	bl	8011b8c <ucdr_serialize_bool>
 8015446:	78b3      	ldrb	r3, [r6, #2]
 8015448:	b2e4      	uxtb	r4, r4
 801544a:	4004      	ands	r4, r0
 801544c:	b94b      	cbnz	r3, 8015462 <uxr_serialize_ReadSpecification+0x3e>
 801544e:	7a31      	ldrb	r1, [r6, #8]
 8015450:	4638      	mov	r0, r7
 8015452:	f7fc fb9b 	bl	8011b8c <ucdr_serialize_bool>
 8015456:	7a33      	ldrb	r3, [r6, #8]
 8015458:	4004      	ands	r4, r0
 801545a:	b943      	cbnz	r3, 801546e <uxr_serialize_ReadSpecification+0x4a>
 801545c:	4620      	mov	r0, r4
 801545e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015462:	6871      	ldr	r1, [r6, #4]
 8015464:	4638      	mov	r0, r7
 8015466:	f004 feed 	bl	801a244 <ucdr_serialize_string>
 801546a:	4004      	ands	r4, r0
 801546c:	e7ef      	b.n	801544e <uxr_serialize_ReadSpecification+0x2a>
 801546e:	8971      	ldrh	r1, [r6, #10]
 8015470:	4638      	mov	r0, r7
 8015472:	f7fc fbe5 	bl	8011c40 <ucdr_serialize_uint16_t>
 8015476:	89b1      	ldrh	r1, [r6, #12]
 8015478:	4605      	mov	r5, r0
 801547a:	4638      	mov	r0, r7
 801547c:	f7fc fbe0 	bl	8011c40 <ucdr_serialize_uint16_t>
 8015480:	89f1      	ldrh	r1, [r6, #14]
 8015482:	4005      	ands	r5, r0
 8015484:	4638      	mov	r0, r7
 8015486:	f7fc fbdb 	bl	8011c40 <ucdr_serialize_uint16_t>
 801548a:	8a31      	ldrh	r1, [r6, #16]
 801548c:	4680      	mov	r8, r0
 801548e:	4638      	mov	r0, r7
 8015490:	f7fc fbd6 	bl	8011c40 <ucdr_serialize_uint16_t>
 8015494:	b2ed      	uxtb	r5, r5
 8015496:	4025      	ands	r5, r4
 8015498:	ea08 0505 	and.w	r5, r8, r5
 801549c:	ea00 0405 	and.w	r4, r0, r5
 80154a0:	4620      	mov	r0, r4
 80154a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154a6:	bf00      	nop

080154a8 <uxr_serialize_CREATE_CLIENT_Payload>:
 80154a8:	f7ff ba16 	b.w	80148d8 <uxr_serialize_CLIENT_Representation>

080154ac <uxr_serialize_CREATE_Payload>:
 80154ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ae:	2202      	movs	r2, #2
 80154b0:	4607      	mov	r7, r0
 80154b2:	460e      	mov	r6, r1
 80154b4:	f004 fda6 	bl	801a004 <ucdr_serialize_array_uint8_t>
 80154b8:	2202      	movs	r2, #2
 80154ba:	18b1      	adds	r1, r6, r2
 80154bc:	4605      	mov	r5, r0
 80154be:	4638      	mov	r0, r7
 80154c0:	f004 fda0 	bl	801a004 <ucdr_serialize_array_uint8_t>
 80154c4:	7931      	ldrb	r1, [r6, #4]
 80154c6:	4604      	mov	r4, r0
 80154c8:	4638      	mov	r0, r7
 80154ca:	f7fc fb8d 	bl	8011be8 <ucdr_serialize_uint8_t>
 80154ce:	b170      	cbz	r0, 80154ee <uxr_serialize_CREATE_Payload+0x42>
 80154d0:	7933      	ldrb	r3, [r6, #4]
 80154d2:	402c      	ands	r4, r5
 80154d4:	3b01      	subs	r3, #1
 80154d6:	b2e4      	uxtb	r4, r4
 80154d8:	2b0d      	cmp	r3, #13
 80154da:	d809      	bhi.n	80154f0 <uxr_serialize_CREATE_Payload+0x44>
 80154dc:	e8df f003 	tbb	[pc, r3]
 80154e0:	23230a4c 	.word	0x23230a4c
 80154e4:	0a0a0a0a 	.word	0x0a0a0a0a
 80154e8:	12121208 	.word	0x12121208
 80154ec:	3e45      	.short	0x3e45
 80154ee:	2400      	movs	r4, #0
 80154f0:	4620      	mov	r0, r4
 80154f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154f4:	f106 0108 	add.w	r1, r6, #8
 80154f8:	4638      	mov	r0, r7
 80154fa:	f7ff faf3 	bl	8014ae4 <uxr_serialize_DATAWRITER_Representation>
 80154fe:	4004      	ands	r4, r0
 8015500:	4620      	mov	r0, r4
 8015502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015504:	7a31      	ldrb	r1, [r6, #8]
 8015506:	4638      	mov	r0, r7
 8015508:	f7fc fb6e 	bl	8011be8 <ucdr_serialize_uint8_t>
 801550c:	2800      	cmp	r0, #0
 801550e:	d0ee      	beq.n	80154ee <uxr_serialize_CREATE_Payload+0x42>
 8015510:	7a33      	ldrb	r3, [r6, #8]
 8015512:	2b01      	cmp	r3, #1
 8015514:	d001      	beq.n	801551a <uxr_serialize_CREATE_Payload+0x6e>
 8015516:	2b02      	cmp	r3, #2
 8015518:	d1ea      	bne.n	80154f0 <uxr_serialize_CREATE_Payload+0x44>
 801551a:	68f1      	ldr	r1, [r6, #12]
 801551c:	4638      	mov	r0, r7
 801551e:	f004 fe91 	bl	801a244 <ucdr_serialize_string>
 8015522:	4004      	ands	r4, r0
 8015524:	e7e4      	b.n	80154f0 <uxr_serialize_CREATE_Payload+0x44>
 8015526:	7a31      	ldrb	r1, [r6, #8]
 8015528:	4638      	mov	r0, r7
 801552a:	f7fc fb5d 	bl	8011be8 <ucdr_serialize_uint8_t>
 801552e:	4605      	mov	r5, r0
 8015530:	b158      	cbz	r0, 801554a <uxr_serialize_CREATE_Payload+0x9e>
 8015532:	7a33      	ldrb	r3, [r6, #8]
 8015534:	2b02      	cmp	r3, #2
 8015536:	d034      	beq.n	80155a2 <uxr_serialize_CREATE_Payload+0xf6>
 8015538:	2b03      	cmp	r3, #3
 801553a:	d106      	bne.n	801554a <uxr_serialize_CREATE_Payload+0x9e>
 801553c:	68f2      	ldr	r2, [r6, #12]
 801553e:	f106 0110 	add.w	r1, r6, #16
 8015542:	4638      	mov	r0, r7
 8015544:	f004 fe52 	bl	801a1ec <ucdr_serialize_sequence_uint8_t>
 8015548:	4605      	mov	r5, r0
 801554a:	2202      	movs	r2, #2
 801554c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8015550:	4638      	mov	r0, r7
 8015552:	f004 fd57 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8015556:	4028      	ands	r0, r5
 8015558:	4004      	ands	r4, r0
 801555a:	e7c9      	b.n	80154f0 <uxr_serialize_CREATE_Payload+0x44>
 801555c:	f106 0108 	add.w	r1, r6, #8
 8015560:	4638      	mov	r0, r7
 8015562:	f7ff f9b9 	bl	80148d8 <uxr_serialize_CLIENT_Representation>
 8015566:	4004      	ands	r4, r0
 8015568:	e7c2      	b.n	80154f0 <uxr_serialize_CREATE_Payload+0x44>
 801556a:	f106 0108 	add.w	r1, r6, #8
 801556e:	4638      	mov	r0, r7
 8015570:	f7ff fa6e 	bl	8014a50 <uxr_serialize_AGENT_Representation>
 8015574:	4004      	ands	r4, r0
 8015576:	e7bb      	b.n	80154f0 <uxr_serialize_CREATE_Payload+0x44>
 8015578:	7a31      	ldrb	r1, [r6, #8]
 801557a:	4638      	mov	r0, r7
 801557c:	f7fc fb34 	bl	8011be8 <ucdr_serialize_uint8_t>
 8015580:	4605      	mov	r5, r0
 8015582:	b130      	cbz	r0, 8015592 <uxr_serialize_CREATE_Payload+0xe6>
 8015584:	7a33      	ldrb	r3, [r6, #8]
 8015586:	2b02      	cmp	r3, #2
 8015588:	d011      	beq.n	80155ae <uxr_serialize_CREATE_Payload+0x102>
 801558a:	2b03      	cmp	r3, #3
 801558c:	d015      	beq.n	80155ba <uxr_serialize_CREATE_Payload+0x10e>
 801558e:	2b01      	cmp	r3, #1
 8015590:	d00d      	beq.n	80155ae <uxr_serialize_CREATE_Payload+0x102>
 8015592:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8015596:	4638      	mov	r0, r7
 8015598:	f7fd f862 	bl	8012660 <ucdr_serialize_int16_t>
 801559c:	4028      	ands	r0, r5
 801559e:	4004      	ands	r4, r0
 80155a0:	e7a6      	b.n	80154f0 <uxr_serialize_CREATE_Payload+0x44>
 80155a2:	68f1      	ldr	r1, [r6, #12]
 80155a4:	4638      	mov	r0, r7
 80155a6:	f004 fe4d 	bl	801a244 <ucdr_serialize_string>
 80155aa:	4605      	mov	r5, r0
 80155ac:	e7cd      	b.n	801554a <uxr_serialize_CREATE_Payload+0x9e>
 80155ae:	68f1      	ldr	r1, [r6, #12]
 80155b0:	4638      	mov	r0, r7
 80155b2:	f004 fe47 	bl	801a244 <ucdr_serialize_string>
 80155b6:	4605      	mov	r5, r0
 80155b8:	e7eb      	b.n	8015592 <uxr_serialize_CREATE_Payload+0xe6>
 80155ba:	68f2      	ldr	r2, [r6, #12]
 80155bc:	f106 0110 	add.w	r1, r6, #16
 80155c0:	4638      	mov	r0, r7
 80155c2:	f004 fe13 	bl	801a1ec <ucdr_serialize_sequence_uint8_t>
 80155c6:	4605      	mov	r5, r0
 80155c8:	e7e3      	b.n	8015592 <uxr_serialize_CREATE_Payload+0xe6>
 80155ca:	bf00      	nop

080155cc <uxr_deserialize_GET_INFO_Payload>:
 80155cc:	b570      	push	{r4, r5, r6, lr}
 80155ce:	2202      	movs	r2, #2
 80155d0:	4605      	mov	r5, r0
 80155d2:	460e      	mov	r6, r1
 80155d4:	f004 fd7a 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 80155d8:	2202      	movs	r2, #2
 80155da:	18b1      	adds	r1, r6, r2
 80155dc:	4604      	mov	r4, r0
 80155de:	4628      	mov	r0, r5
 80155e0:	f004 fd74 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 80155e4:	1d31      	adds	r1, r6, #4
 80155e6:	4004      	ands	r4, r0
 80155e8:	4628      	mov	r0, r5
 80155ea:	f7fc fe43 	bl	8012274 <ucdr_deserialize_uint32_t>
 80155ee:	b2e4      	uxtb	r4, r4
 80155f0:	4020      	ands	r0, r4
 80155f2:	bd70      	pop	{r4, r5, r6, pc}

080155f4 <uxr_serialize_DELETE_Payload>:
 80155f4:	b570      	push	{r4, r5, r6, lr}
 80155f6:	2202      	movs	r2, #2
 80155f8:	4605      	mov	r5, r0
 80155fa:	460e      	mov	r6, r1
 80155fc:	f004 fd02 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8015600:	2202      	movs	r2, #2
 8015602:	4604      	mov	r4, r0
 8015604:	18b1      	adds	r1, r6, r2
 8015606:	4628      	mov	r0, r5
 8015608:	f004 fcfc 	bl	801a004 <ucdr_serialize_array_uint8_t>
 801560c:	4020      	ands	r0, r4
 801560e:	b2c0      	uxtb	r0, r0
 8015610:	bd70      	pop	{r4, r5, r6, pc}
 8015612:	bf00      	nop

08015614 <uxr_deserialize_STATUS_AGENT_Payload>:
 8015614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015618:	4605      	mov	r5, r0
 801561a:	460e      	mov	r6, r1
 801561c:	f7fc fafa 	bl	8011c14 <ucdr_deserialize_uint8_t>
 8015620:	1c71      	adds	r1, r6, #1
 8015622:	4604      	mov	r4, r0
 8015624:	4628      	mov	r0, r5
 8015626:	f7fc faf5 	bl	8011c14 <ucdr_deserialize_uint8_t>
 801562a:	2204      	movs	r2, #4
 801562c:	18b1      	adds	r1, r6, r2
 801562e:	4680      	mov	r8, r0
 8015630:	4628      	mov	r0, r5
 8015632:	f004 fd4b 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 8015636:	f106 0108 	add.w	r1, r6, #8
 801563a:	4607      	mov	r7, r0
 801563c:	2202      	movs	r2, #2
 801563e:	4628      	mov	r0, r5
 8015640:	f004 fd44 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 8015644:	ea04 0308 	and.w	r3, r4, r8
 8015648:	b2db      	uxtb	r3, r3
 801564a:	ea03 0407 	and.w	r4, r3, r7
 801564e:	2202      	movs	r2, #2
 8015650:	4607      	mov	r7, r0
 8015652:	f106 010a 	add.w	r1, r6, #10
 8015656:	4628      	mov	r0, r5
 8015658:	f004 fd38 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 801565c:	f106 010c 	add.w	r1, r6, #12
 8015660:	4603      	mov	r3, r0
 8015662:	4628      	mov	r0, r5
 8015664:	461d      	mov	r5, r3
 8015666:	f7fc faa7 	bl	8011bb8 <ucdr_deserialize_bool>
 801566a:	403c      	ands	r4, r7
 801566c:	4025      	ands	r5, r4
 801566e:	4028      	ands	r0, r5
 8015670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015674 <uxr_deserialize_STATUS_Payload>:
 8015674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015678:	2202      	movs	r2, #2
 801567a:	4606      	mov	r6, r0
 801567c:	460f      	mov	r7, r1
 801567e:	f004 fd25 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 8015682:	2202      	movs	r2, #2
 8015684:	18b9      	adds	r1, r7, r2
 8015686:	4605      	mov	r5, r0
 8015688:	4630      	mov	r0, r6
 801568a:	f004 fd1f 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 801568e:	1d39      	adds	r1, r7, #4
 8015690:	4680      	mov	r8, r0
 8015692:	4630      	mov	r0, r6
 8015694:	f7fc fabe 	bl	8011c14 <ucdr_deserialize_uint8_t>
 8015698:	1d79      	adds	r1, r7, #5
 801569a:	4604      	mov	r4, r0
 801569c:	4630      	mov	r0, r6
 801569e:	f7fc fab9 	bl	8011c14 <ucdr_deserialize_uint8_t>
 80156a2:	ea05 0508 	and.w	r5, r5, r8
 80156a6:	402c      	ands	r4, r5
 80156a8:	4020      	ands	r0, r4
 80156aa:	b2c0      	uxtb	r0, r0
 80156ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080156b0 <uxr_serialize_INFO_Payload>:
 80156b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156b4:	2202      	movs	r2, #2
 80156b6:	460c      	mov	r4, r1
 80156b8:	4605      	mov	r5, r0
 80156ba:	f004 fca3 	bl	801a004 <ucdr_serialize_array_uint8_t>
 80156be:	2202      	movs	r2, #2
 80156c0:	18a1      	adds	r1, r4, r2
 80156c2:	4680      	mov	r8, r0
 80156c4:	4628      	mov	r0, r5
 80156c6:	f004 fc9d 	bl	801a004 <ucdr_serialize_array_uint8_t>
 80156ca:	7921      	ldrb	r1, [r4, #4]
 80156cc:	4607      	mov	r7, r0
 80156ce:	4628      	mov	r0, r5
 80156d0:	f7fc fa8a 	bl	8011be8 <ucdr_serialize_uint8_t>
 80156d4:	7961      	ldrb	r1, [r4, #5]
 80156d6:	4606      	mov	r6, r0
 80156d8:	4628      	mov	r0, r5
 80156da:	f7fc fa85 	bl	8011be8 <ucdr_serialize_uint8_t>
 80156de:	ea08 0807 	and.w	r8, r8, r7
 80156e2:	ea06 0608 	and.w	r6, r6, r8
 80156e6:	4006      	ands	r6, r0
 80156e8:	7a21      	ldrb	r1, [r4, #8]
 80156ea:	4628      	mov	r0, r5
 80156ec:	f7fc fa4e 	bl	8011b8c <ucdr_serialize_bool>
 80156f0:	7a23      	ldrb	r3, [r4, #8]
 80156f2:	b2f7      	uxtb	r7, r6
 80156f4:	4606      	mov	r6, r0
 80156f6:	b96b      	cbnz	r3, 8015714 <uxr_serialize_INFO_Payload+0x64>
 80156f8:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80156fc:	4628      	mov	r0, r5
 80156fe:	f7fc fa45 	bl	8011b8c <ucdr_serialize_bool>
 8015702:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8015706:	4030      	ands	r0, r6
 8015708:	b2c6      	uxtb	r6, r0
 801570a:	b983      	cbnz	r3, 801572e <uxr_serialize_INFO_Payload+0x7e>
 801570c:	ea06 0007 	and.w	r0, r6, r7
 8015710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015714:	7b21      	ldrb	r1, [r4, #12]
 8015716:	4628      	mov	r0, r5
 8015718:	f7fc fa66 	bl	8011be8 <ucdr_serialize_uint8_t>
 801571c:	b188      	cbz	r0, 8015742 <uxr_serialize_INFO_Payload+0x92>
 801571e:	f104 010c 	add.w	r1, r4, #12
 8015722:	4628      	mov	r0, r5
 8015724:	f7ff fa06 	bl	8014b34 <uxr_serialize_ObjectVariant.part.0>
 8015728:	4030      	ands	r0, r6
 801572a:	b2c6      	uxtb	r6, r0
 801572c:	e7e4      	b.n	80156f8 <uxr_serialize_INFO_Payload+0x48>
 801572e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8015732:	4628      	mov	r0, r5
 8015734:	f7ff fdb2 	bl	801529c <uxr_serialize_ActivityInfoVariant>
 8015738:	4006      	ands	r6, r0
 801573a:	ea06 0007 	and.w	r0, r6, r7
 801573e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015742:	4606      	mov	r6, r0
 8015744:	e7d8      	b.n	80156f8 <uxr_serialize_INFO_Payload+0x48>
 8015746:	bf00      	nop

08015748 <uxr_serialize_READ_DATA_Payload>:
 8015748:	b570      	push	{r4, r5, r6, lr}
 801574a:	2202      	movs	r2, #2
 801574c:	4605      	mov	r5, r0
 801574e:	460e      	mov	r6, r1
 8015750:	f004 fc58 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8015754:	2202      	movs	r2, #2
 8015756:	18b1      	adds	r1, r6, r2
 8015758:	4604      	mov	r4, r0
 801575a:	4628      	mov	r0, r5
 801575c:	f004 fc52 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8015760:	1d31      	adds	r1, r6, #4
 8015762:	4004      	ands	r4, r0
 8015764:	4628      	mov	r0, r5
 8015766:	f7ff fe5d 	bl	8015424 <uxr_serialize_ReadSpecification>
 801576a:	b2e4      	uxtb	r4, r4
 801576c:	4020      	ands	r0, r4
 801576e:	bd70      	pop	{r4, r5, r6, pc}

08015770 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015770:	b570      	push	{r4, r5, r6, lr}
 8015772:	2202      	movs	r2, #2
 8015774:	4605      	mov	r5, r0
 8015776:	460e      	mov	r6, r1
 8015778:	f004 fc44 	bl	801a004 <ucdr_serialize_array_uint8_t>
 801577c:	2202      	movs	r2, #2
 801577e:	4604      	mov	r4, r0
 8015780:	18b1      	adds	r1, r6, r2
 8015782:	4628      	mov	r0, r5
 8015784:	f004 fc3e 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8015788:	4020      	ands	r0, r4
 801578a:	b2c0      	uxtb	r0, r0
 801578c:	bd70      	pop	{r4, r5, r6, pc}
 801578e:	bf00      	nop

08015790 <uxr_serialize_ACKNACK_Payload>:
 8015790:	b570      	push	{r4, r5, r6, lr}
 8015792:	460c      	mov	r4, r1
 8015794:	460e      	mov	r6, r1
 8015796:	f834 1b02 	ldrh.w	r1, [r4], #2
 801579a:	4605      	mov	r5, r0
 801579c:	f7fc fa50 	bl	8011c40 <ucdr_serialize_uint16_t>
 80157a0:	2202      	movs	r2, #2
 80157a2:	4621      	mov	r1, r4
 80157a4:	4604      	mov	r4, r0
 80157a6:	4628      	mov	r0, r5
 80157a8:	f004 fc2c 	bl	801a004 <ucdr_serialize_array_uint8_t>
 80157ac:	7931      	ldrb	r1, [r6, #4]
 80157ae:	4004      	ands	r4, r0
 80157b0:	4628      	mov	r0, r5
 80157b2:	f7fc fa19 	bl	8011be8 <ucdr_serialize_uint8_t>
 80157b6:	b2e4      	uxtb	r4, r4
 80157b8:	4020      	ands	r0, r4
 80157ba:	bd70      	pop	{r4, r5, r6, pc}

080157bc <uxr_deserialize_ACKNACK_Payload>:
 80157bc:	b570      	push	{r4, r5, r6, lr}
 80157be:	4605      	mov	r5, r0
 80157c0:	460e      	mov	r6, r1
 80157c2:	f7fc fb3d 	bl	8011e40 <ucdr_deserialize_uint16_t>
 80157c6:	2202      	movs	r2, #2
 80157c8:	18b1      	adds	r1, r6, r2
 80157ca:	4604      	mov	r4, r0
 80157cc:	4628      	mov	r0, r5
 80157ce:	f004 fc7d 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 80157d2:	1d31      	adds	r1, r6, #4
 80157d4:	4004      	ands	r4, r0
 80157d6:	4628      	mov	r0, r5
 80157d8:	f7fc fa1c 	bl	8011c14 <ucdr_deserialize_uint8_t>
 80157dc:	b2e4      	uxtb	r4, r4
 80157de:	4020      	ands	r0, r4
 80157e0:	bd70      	pop	{r4, r5, r6, pc}
 80157e2:	bf00      	nop

080157e4 <uxr_serialize_HEARTBEAT_Payload>:
 80157e4:	b570      	push	{r4, r5, r6, lr}
 80157e6:	460d      	mov	r5, r1
 80157e8:	8809      	ldrh	r1, [r1, #0]
 80157ea:	4606      	mov	r6, r0
 80157ec:	f7fc fa28 	bl	8011c40 <ucdr_serialize_uint16_t>
 80157f0:	8869      	ldrh	r1, [r5, #2]
 80157f2:	4604      	mov	r4, r0
 80157f4:	4630      	mov	r0, r6
 80157f6:	f7fc fa23 	bl	8011c40 <ucdr_serialize_uint16_t>
 80157fa:	7929      	ldrb	r1, [r5, #4]
 80157fc:	4004      	ands	r4, r0
 80157fe:	4630      	mov	r0, r6
 8015800:	f7fc f9f2 	bl	8011be8 <ucdr_serialize_uint8_t>
 8015804:	b2e4      	uxtb	r4, r4
 8015806:	4020      	ands	r0, r4
 8015808:	bd70      	pop	{r4, r5, r6, pc}
 801580a:	bf00      	nop

0801580c <uxr_deserialize_HEARTBEAT_Payload>:
 801580c:	b570      	push	{r4, r5, r6, lr}
 801580e:	4605      	mov	r5, r0
 8015810:	460e      	mov	r6, r1
 8015812:	f7fc fb15 	bl	8011e40 <ucdr_deserialize_uint16_t>
 8015816:	1cb1      	adds	r1, r6, #2
 8015818:	4604      	mov	r4, r0
 801581a:	4628      	mov	r0, r5
 801581c:	f7fc fb10 	bl	8011e40 <ucdr_deserialize_uint16_t>
 8015820:	1d31      	adds	r1, r6, #4
 8015822:	4004      	ands	r4, r0
 8015824:	4628      	mov	r0, r5
 8015826:	f7fc f9f5 	bl	8011c14 <ucdr_deserialize_uint8_t>
 801582a:	b2e4      	uxtb	r4, r4
 801582c:	4020      	ands	r0, r4
 801582e:	bd70      	pop	{r4, r5, r6, pc}

08015830 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8015830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015834:	4605      	mov	r5, r0
 8015836:	460e      	mov	r6, r1
 8015838:	f7fd f89e 	bl	8012978 <ucdr_deserialize_int32_t>
 801583c:	1d31      	adds	r1, r6, #4
 801583e:	4607      	mov	r7, r0
 8015840:	4628      	mov	r0, r5
 8015842:	f7fc fd17 	bl	8012274 <ucdr_deserialize_uint32_t>
 8015846:	f106 0108 	add.w	r1, r6, #8
 801584a:	4680      	mov	r8, r0
 801584c:	4628      	mov	r0, r5
 801584e:	f7fd f893 	bl	8012978 <ucdr_deserialize_int32_t>
 8015852:	f106 010c 	add.w	r1, r6, #12
 8015856:	4604      	mov	r4, r0
 8015858:	4628      	mov	r0, r5
 801585a:	f7fc fd0b 	bl	8012274 <ucdr_deserialize_uint32_t>
 801585e:	ea07 0708 	and.w	r7, r7, r8
 8015862:	403c      	ands	r4, r7
 8015864:	f106 0110 	add.w	r1, r6, #16
 8015868:	4004      	ands	r4, r0
 801586a:	4628      	mov	r0, r5
 801586c:	f7fd f884 	bl	8012978 <ucdr_deserialize_int32_t>
 8015870:	f106 0114 	add.w	r1, r6, #20
 8015874:	4607      	mov	r7, r0
 8015876:	4628      	mov	r0, r5
 8015878:	f7fc fcfc 	bl	8012274 <ucdr_deserialize_uint32_t>
 801587c:	b2e4      	uxtb	r4, r4
 801587e:	403c      	ands	r4, r7
 8015880:	4020      	ands	r0, r4
 8015882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015886:	bf00      	nop

08015888 <uxr_serialize_SampleIdentity>:
 8015888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801588c:	220c      	movs	r2, #12
 801588e:	4604      	mov	r4, r0
 8015890:	460d      	mov	r5, r1
 8015892:	f004 fbb7 	bl	801a004 <ucdr_serialize_array_uint8_t>
 8015896:	2203      	movs	r2, #3
 8015898:	f105 010c 	add.w	r1, r5, #12
 801589c:	4607      	mov	r7, r0
 801589e:	4620      	mov	r0, r4
 80158a0:	f004 fbb0 	bl	801a004 <ucdr_serialize_array_uint8_t>
 80158a4:	7be9      	ldrb	r1, [r5, #15]
 80158a6:	4680      	mov	r8, r0
 80158a8:	4620      	mov	r0, r4
 80158aa:	f7fc f99d 	bl	8011be8 <ucdr_serialize_uint8_t>
 80158ae:	6929      	ldr	r1, [r5, #16]
 80158b0:	4606      	mov	r6, r0
 80158b2:	4620      	mov	r0, r4
 80158b4:	f7fc ffc8 	bl	8012848 <ucdr_serialize_int32_t>
 80158b8:	6969      	ldr	r1, [r5, #20]
 80158ba:	4603      	mov	r3, r0
 80158bc:	4620      	mov	r0, r4
 80158be:	ea07 0708 	and.w	r7, r7, r8
 80158c2:	461c      	mov	r4, r3
 80158c4:	f7fc fba6 	bl	8012014 <ucdr_serialize_uint32_t>
 80158c8:	403e      	ands	r6, r7
 80158ca:	4034      	ands	r4, r6
 80158cc:	4020      	ands	r0, r4
 80158ce:	b2c0      	uxtb	r0, r0
 80158d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080158d4 <uxr_deserialize_SampleIdentity>:
 80158d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158d8:	220c      	movs	r2, #12
 80158da:	4604      	mov	r4, r0
 80158dc:	460d      	mov	r5, r1
 80158de:	f004 fbf5 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 80158e2:	2203      	movs	r2, #3
 80158e4:	f105 010c 	add.w	r1, r5, #12
 80158e8:	4607      	mov	r7, r0
 80158ea:	4620      	mov	r0, r4
 80158ec:	f004 fbee 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 80158f0:	f105 010f 	add.w	r1, r5, #15
 80158f4:	4680      	mov	r8, r0
 80158f6:	4620      	mov	r0, r4
 80158f8:	f7fc f98c 	bl	8011c14 <ucdr_deserialize_uint8_t>
 80158fc:	f105 0110 	add.w	r1, r5, #16
 8015900:	4606      	mov	r6, r0
 8015902:	4620      	mov	r0, r4
 8015904:	f7fd f838 	bl	8012978 <ucdr_deserialize_int32_t>
 8015908:	f105 0114 	add.w	r1, r5, #20
 801590c:	4603      	mov	r3, r0
 801590e:	4620      	mov	r0, r4
 8015910:	ea07 0708 	and.w	r7, r7, r8
 8015914:	461c      	mov	r4, r3
 8015916:	f7fc fcad 	bl	8012274 <ucdr_deserialize_uint32_t>
 801591a:	403e      	ands	r6, r7
 801591c:	4034      	ands	r4, r6
 801591e:	4020      	ands	r0, r4
 8015920:	b2c0      	uxtb	r0, r0
 8015922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015926:	bf00      	nop

08015928 <rcl_client_get_rmw_handle>:
 8015928:	b118      	cbz	r0, 8015932 <rcl_client_get_rmw_handle+0xa>
 801592a:	6800      	ldr	r0, [r0, #0]
 801592c:	b108      	cbz	r0, 8015932 <rcl_client_get_rmw_handle+0xa>
 801592e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015932:	4770      	bx	lr

08015934 <rcl_send_request>:
 8015934:	b570      	push	{r4, r5, r6, lr}
 8015936:	b082      	sub	sp, #8
 8015938:	b1e8      	cbz	r0, 8015976 <rcl_send_request+0x42>
 801593a:	4604      	mov	r4, r0
 801593c:	6800      	ldr	r0, [r0, #0]
 801593e:	b1d0      	cbz	r0, 8015976 <rcl_send_request+0x42>
 8015940:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8015944:	b1bb      	cbz	r3, 8015976 <rcl_send_request+0x42>
 8015946:	460e      	mov	r6, r1
 8015948:	b1d1      	cbz	r1, 8015980 <rcl_send_request+0x4c>
 801594a:	4615      	mov	r5, r2
 801594c:	b1c2      	cbz	r2, 8015980 <rcl_send_request+0x4c>
 801594e:	2105      	movs	r1, #5
 8015950:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015954:	f002 fbf8 	bl	8018148 <__atomic_load_8>
 8015958:	6823      	ldr	r3, [r4, #0]
 801595a:	e9c5 0100 	strd	r0, r1, [r5]
 801595e:	462a      	mov	r2, r5
 8015960:	4631      	mov	r1, r6
 8015962:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015966:	f003 fdbd 	bl	80194e4 <rmw_send_request>
 801596a:	4606      	mov	r6, r0
 801596c:	b160      	cbz	r0, 8015988 <rcl_send_request+0x54>
 801596e:	2601      	movs	r6, #1
 8015970:	4630      	mov	r0, r6
 8015972:	b002      	add	sp, #8
 8015974:	bd70      	pop	{r4, r5, r6, pc}
 8015976:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801597a:	4630      	mov	r0, r6
 801597c:	b002      	add	sp, #8
 801597e:	bd70      	pop	{r4, r5, r6, pc}
 8015980:	260b      	movs	r6, #11
 8015982:	4630      	mov	r0, r6
 8015984:	b002      	add	sp, #8
 8015986:	bd70      	pop	{r4, r5, r6, pc}
 8015988:	6820      	ldr	r0, [r4, #0]
 801598a:	2105      	movs	r1, #5
 801598c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015990:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015994:	9100      	str	r1, [sp, #0]
 8015996:	f002 fc43 	bl	8018220 <__atomic_exchange_8>
 801599a:	4630      	mov	r0, r6
 801599c:	b002      	add	sp, #8
 801599e:	bd70      	pop	{r4, r5, r6, pc}

080159a0 <rcl_take_response>:
 80159a0:	b570      	push	{r4, r5, r6, lr}
 80159a2:	468e      	mov	lr, r1
 80159a4:	460c      	mov	r4, r1
 80159a6:	4616      	mov	r6, r2
 80159a8:	4605      	mov	r5, r0
 80159aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159ae:	b08c      	sub	sp, #48	@ 0x30
 80159b0:	f10d 0c18 	add.w	ip, sp, #24
 80159b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159b8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80159bc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80159c0:	b35d      	cbz	r5, 8015a1a <rcl_take_response+0x7a>
 80159c2:	682b      	ldr	r3, [r5, #0]
 80159c4:	b34b      	cbz	r3, 8015a1a <rcl_take_response+0x7a>
 80159c6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80159ca:	b330      	cbz	r0, 8015a1a <rcl_take_response+0x7a>
 80159cc:	b346      	cbz	r6, 8015a20 <rcl_take_response+0x80>
 80159ce:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015a28 <rcl_take_response+0x88>
 80159d2:	2300      	movs	r3, #0
 80159d4:	f88d 3007 	strb.w	r3, [sp, #7]
 80159d8:	4632      	mov	r2, r6
 80159da:	f10d 0307 	add.w	r3, sp, #7
 80159de:	a902      	add	r1, sp, #8
 80159e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80159e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80159e8:	f003 fe84 	bl	80196f4 <rmw_take_response>
 80159ec:	4605      	mov	r5, r0
 80159ee:	b9c8      	cbnz	r0, 8015a24 <rcl_take_response+0x84>
 80159f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80159f4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80159f8:	2a00      	cmp	r2, #0
 80159fa:	bf08      	it	eq
 80159fc:	461d      	moveq	r5, r3
 80159fe:	f10d 0e18 	add.w	lr, sp, #24
 8015a02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a06:	46a4      	mov	ip, r4
 8015a08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a0c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015a10:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015a14:	4628      	mov	r0, r5
 8015a16:	b00c      	add	sp, #48	@ 0x30
 8015a18:	bd70      	pop	{r4, r5, r6, pc}
 8015a1a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8015a1e:	e7ee      	b.n	80159fe <rcl_take_response+0x5e>
 8015a20:	250b      	movs	r5, #11
 8015a22:	e7ec      	b.n	80159fe <rcl_take_response+0x5e>
 8015a24:	2501      	movs	r5, #1
 8015a26:	e7ea      	b.n	80159fe <rcl_take_response+0x5e>
	...

08015a30 <rcl_client_is_valid>:
 8015a30:	b130      	cbz	r0, 8015a40 <rcl_client_is_valid+0x10>
 8015a32:	6800      	ldr	r0, [r0, #0]
 8015a34:	b120      	cbz	r0, 8015a40 <rcl_client_is_valid+0x10>
 8015a36:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015a3a:	3800      	subs	r0, #0
 8015a3c:	bf18      	it	ne
 8015a3e:	2001      	movne	r0, #1
 8015a40:	4770      	bx	lr
 8015a42:	bf00      	nop

08015a44 <rcl_convert_rmw_ret_to_rcl_ret>:
 8015a44:	280b      	cmp	r0, #11
 8015a46:	dc0d      	bgt.n	8015a64 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015a48:	2800      	cmp	r0, #0
 8015a4a:	db09      	blt.n	8015a60 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015a4c:	280b      	cmp	r0, #11
 8015a4e:	d807      	bhi.n	8015a60 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015a50:	e8df f000 	tbb	[pc, r0]
 8015a54:	07060607 	.word	0x07060607
 8015a58:	06060606 	.word	0x06060606
 8015a5c:	07070606 	.word	0x07070606
 8015a60:	2001      	movs	r0, #1
 8015a62:	4770      	bx	lr
 8015a64:	28cb      	cmp	r0, #203	@ 0xcb
 8015a66:	bf18      	it	ne
 8015a68:	2001      	movne	r0, #1
 8015a6a:	4770      	bx	lr

08015a6c <rcl_get_zero_initialized_context>:
 8015a6c:	4a03      	ldr	r2, [pc, #12]	@ (8015a7c <rcl_get_zero_initialized_context+0x10>)
 8015a6e:	4603      	mov	r3, r0
 8015a70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015a74:	e883 0003 	stmia.w	r3, {r0, r1}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	4770      	bx	lr
 8015a7c:	0801e100 	.word	0x0801e100

08015a80 <rcl_context_is_valid>:
 8015a80:	b118      	cbz	r0, 8015a8a <rcl_context_is_valid+0xa>
 8015a82:	6840      	ldr	r0, [r0, #4]
 8015a84:	3800      	subs	r0, #0
 8015a86:	bf18      	it	ne
 8015a88:	2001      	movne	r0, #1
 8015a8a:	4770      	bx	lr

08015a8c <__cleanup_context>:
 8015a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a90:	4606      	mov	r6, r0
 8015a92:	6800      	ldr	r0, [r0, #0]
 8015a94:	2300      	movs	r3, #0
 8015a96:	6073      	str	r3, [r6, #4]
 8015a98:	2800      	cmp	r0, #0
 8015a9a:	d049      	beq.n	8015b30 <__cleanup_context+0xa4>
 8015a9c:	6947      	ldr	r7, [r0, #20]
 8015a9e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015aa2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015aa6:	b137      	cbz	r7, 8015ab6 <__cleanup_context+0x2a>
 8015aa8:	3014      	adds	r0, #20
 8015aaa:	f000 f9a5 	bl	8015df8 <rcl_init_options_fini>
 8015aae:	4607      	mov	r7, r0
 8015ab0:	2800      	cmp	r0, #0
 8015ab2:	d144      	bne.n	8015b3e <__cleanup_context+0xb2>
 8015ab4:	6830      	ldr	r0, [r6, #0]
 8015ab6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015ab8:	b143      	cbz	r3, 8015acc <__cleanup_context+0x40>
 8015aba:	3028      	adds	r0, #40	@ 0x28
 8015abc:	f003 fb5a 	bl	8019174 <rmw_context_fini>
 8015ac0:	b118      	cbz	r0, 8015aca <__cleanup_context+0x3e>
 8015ac2:	2f00      	cmp	r7, #0
 8015ac4:	d03e      	beq.n	8015b44 <__cleanup_context+0xb8>
 8015ac6:	f7fb fa0f 	bl	8010ee8 <rcutils_reset_error>
 8015aca:	6830      	ldr	r0, [r6, #0]
 8015acc:	6a03      	ldr	r3, [r0, #32]
 8015ace:	b1db      	cbz	r3, 8015b08 <__cleanup_context+0x7c>
 8015ad0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8015ad4:	2a01      	cmp	r2, #1
 8015ad6:	f17c 0100 	sbcs.w	r1, ip, #0
 8015ada:	db11      	blt.n	8015b00 <__cleanup_context+0x74>
 8015adc:	2400      	movs	r4, #0
 8015ade:	4625      	mov	r5, r4
 8015ae0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015ae4:	4649      	mov	r1, r9
 8015ae6:	b1b8      	cbz	r0, 8015b18 <__cleanup_context+0x8c>
 8015ae8:	47c0      	blx	r8
 8015aea:	6833      	ldr	r3, [r6, #0]
 8015aec:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8015af0:	3401      	adds	r4, #1
 8015af2:	f145 0500 	adc.w	r5, r5, #0
 8015af6:	4294      	cmp	r4, r2
 8015af8:	eb75 010c 	sbcs.w	r1, r5, ip
 8015afc:	6a1b      	ldr	r3, [r3, #32]
 8015afe:	dbef      	blt.n	8015ae0 <__cleanup_context+0x54>
 8015b00:	4618      	mov	r0, r3
 8015b02:	4649      	mov	r1, r9
 8015b04:	47c0      	blx	r8
 8015b06:	6830      	ldr	r0, [r6, #0]
 8015b08:	4649      	mov	r1, r9
 8015b0a:	47c0      	blx	r8
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	e9c6 3300 	strd	r3, r3, [r6]
 8015b12:	4638      	mov	r0, r7
 8015b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b18:	3401      	adds	r4, #1
 8015b1a:	f145 0500 	adc.w	r5, r5, #0
 8015b1e:	4294      	cmp	r4, r2
 8015b20:	eb75 010c 	sbcs.w	r1, r5, ip
 8015b24:	dbdc      	blt.n	8015ae0 <__cleanup_context+0x54>
 8015b26:	4618      	mov	r0, r3
 8015b28:	4649      	mov	r1, r9
 8015b2a:	47c0      	blx	r8
 8015b2c:	6830      	ldr	r0, [r6, #0]
 8015b2e:	e7eb      	b.n	8015b08 <__cleanup_context+0x7c>
 8015b30:	4607      	mov	r7, r0
 8015b32:	2300      	movs	r3, #0
 8015b34:	e9c6 3300 	strd	r3, r3, [r6]
 8015b38:	4638      	mov	r0, r7
 8015b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b3e:	f7fb f9d3 	bl	8010ee8 <rcutils_reset_error>
 8015b42:	e7b7      	b.n	8015ab4 <__cleanup_context+0x28>
 8015b44:	f7ff ff7e 	bl	8015a44 <rcl_convert_rmw_ret_to_rcl_ret>
 8015b48:	4607      	mov	r7, r0
 8015b4a:	e7bc      	b.n	8015ac6 <__cleanup_context+0x3a>

08015b4c <rcl_init>:
 8015b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b50:	1e05      	subs	r5, r0, #0
 8015b52:	b09c      	sub	sp, #112	@ 0x70
 8015b54:	460e      	mov	r6, r1
 8015b56:	4690      	mov	r8, r2
 8015b58:	461f      	mov	r7, r3
 8015b5a:	f340 8099 	ble.w	8015c90 <rcl_init+0x144>
 8015b5e:	2900      	cmp	r1, #0
 8015b60:	f000 8099 	beq.w	8015c96 <rcl_init+0x14a>
 8015b64:	f1a1 0e04 	sub.w	lr, r1, #4
 8015b68:	f04f 0c00 	mov.w	ip, #0
 8015b6c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015b70:	f10c 0c01 	add.w	ip, ip, #1
 8015b74:	2c00      	cmp	r4, #0
 8015b76:	f000 808e 	beq.w	8015c96 <rcl_init+0x14a>
 8015b7a:	4565      	cmp	r5, ip
 8015b7c:	d1f6      	bne.n	8015b6c <rcl_init+0x20>
 8015b7e:	f1b8 0f00 	cmp.w	r8, #0
 8015b82:	f000 8088 	beq.w	8015c96 <rcl_init+0x14a>
 8015b86:	f8d8 4000 	ldr.w	r4, [r8]
 8015b8a:	2c00      	cmp	r4, #0
 8015b8c:	f000 8083 	beq.w	8015c96 <rcl_init+0x14a>
 8015b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b92:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8015b96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b9a:	6823      	ldr	r3, [r4, #0]
 8015b9c:	f8cc 3000 	str.w	r3, [ip]
 8015ba0:	a817      	add	r0, sp, #92	@ 0x5c
 8015ba2:	f7fb f97d 	bl	8010ea0 <rcutils_allocator_is_valid>
 8015ba6:	2800      	cmp	r0, #0
 8015ba8:	d075      	beq.n	8015c96 <rcl_init+0x14a>
 8015baa:	2f00      	cmp	r7, #0
 8015bac:	d073      	beq.n	8015c96 <rcl_init+0x14a>
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d175      	bne.n	8015ca0 <rcl_init+0x154>
 8015bb4:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8015bb8:	2178      	movs	r1, #120	@ 0x78
 8015bba:	2001      	movs	r0, #1
 8015bbc:	4798      	blx	r3
 8015bbe:	4604      	mov	r4, r0
 8015bc0:	6038      	str	r0, [r7, #0]
 8015bc2:	2800      	cmp	r0, #0
 8015bc4:	f000 80a0 	beq.w	8015d08 <rcl_init+0x1bc>
 8015bc8:	a802      	add	r0, sp, #8
 8015bca:	f002 fdfd 	bl	80187c8 <rmw_get_zero_initialized_context>
 8015bce:	a902      	add	r1, sp, #8
 8015bd0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015bd4:	2250      	movs	r2, #80	@ 0x50
 8015bd6:	ac17      	add	r4, sp, #92	@ 0x5c
 8015bd8:	f007 f93f 	bl	801ce5a <memcpy>
 8015bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015bde:	f8d7 e000 	ldr.w	lr, [r7]
 8015be2:	46f4      	mov	ip, lr
 8015be4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015be8:	6823      	ldr	r3, [r4, #0]
 8015bea:	f8cc 3000 	str.w	r3, [ip]
 8015bee:	f10e 0114 	add.w	r1, lr, #20
 8015bf2:	4640      	mov	r0, r8
 8015bf4:	f000 f92a 	bl	8015e4c <rcl_init_options_copy>
 8015bf8:	4604      	mov	r4, r0
 8015bfa:	2800      	cmp	r0, #0
 8015bfc:	d144      	bne.n	8015c88 <rcl_init+0x13c>
 8015bfe:	f8d7 9000 	ldr.w	r9, [r7]
 8015c02:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015c06:	f8c9 0020 	str.w	r0, [r9, #32]
 8015c0a:	f8c9 5018 	str.w	r5, [r9, #24]
 8015c0e:	f8c9 801c 	str.w	r8, [r9, #28]
 8015c12:	2d00      	cmp	r5, #0
 8015c14:	d04b      	beq.n	8015cae <rcl_init+0x162>
 8015c16:	2e00      	cmp	r6, #0
 8015c18:	d049      	beq.n	8015cae <rcl_init+0x162>
 8015c1a:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8015c1e:	2104      	movs	r1, #4
 8015c20:	4628      	mov	r0, r5
 8015c22:	4798      	blx	r3
 8015c24:	f8c9 0020 	str.w	r0, [r9, #32]
 8015c28:	f8d7 9000 	ldr.w	r9, [r7]
 8015c2c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015c30:	46ca      	mov	sl, r9
 8015c32:	b343      	cbz	r3, 8015c86 <rcl_init+0x13a>
 8015c34:	2d01      	cmp	r5, #1
 8015c36:	f178 0300 	sbcs.w	r3, r8, #0
 8015c3a:	db38      	blt.n	8015cae <rcl_init+0x162>
 8015c3c:	2400      	movs	r4, #0
 8015c3e:	3e04      	subs	r6, #4
 8015c40:	46a1      	mov	r9, r4
 8015c42:	e00b      	b.n	8015c5c <rcl_init+0x110>
 8015c44:	6831      	ldr	r1, [r6, #0]
 8015c46:	f007 f908 	bl	801ce5a <memcpy>
 8015c4a:	3401      	adds	r4, #1
 8015c4c:	f149 0900 	adc.w	r9, r9, #0
 8015c50:	45c8      	cmp	r8, r9
 8015c52:	bf08      	it	eq
 8015c54:	42a5      	cmpeq	r5, r4
 8015c56:	d028      	beq.n	8015caa <rcl_init+0x15e>
 8015c58:	f8d7 a000 	ldr.w	sl, [r7]
 8015c5c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8015c60:	f7ea fac0 	bl	80001e4 <strlen>
 8015c64:	1c42      	adds	r2, r0, #1
 8015c66:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015c68:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015c6a:	f8da a020 	ldr.w	sl, [sl, #32]
 8015c6e:	9201      	str	r2, [sp, #4]
 8015c70:	4610      	mov	r0, r2
 8015c72:	4798      	blx	r3
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8015c7a:	6a1b      	ldr	r3, [r3, #32]
 8015c7c:	9a01      	ldr	r2, [sp, #4]
 8015c7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c82:	2800      	cmp	r0, #0
 8015c84:	d1de      	bne.n	8015c44 <rcl_init+0xf8>
 8015c86:	240a      	movs	r4, #10
 8015c88:	4638      	mov	r0, r7
 8015c8a:	f7ff feff 	bl	8015a8c <__cleanup_context>
 8015c8e:	e003      	b.n	8015c98 <rcl_init+0x14c>
 8015c90:	2900      	cmp	r1, #0
 8015c92:	f43f af74 	beq.w	8015b7e <rcl_init+0x32>
 8015c96:	240b      	movs	r4, #11
 8015c98:	4620      	mov	r0, r4
 8015c9a:	b01c      	add	sp, #112	@ 0x70
 8015c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ca0:	2464      	movs	r4, #100	@ 0x64
 8015ca2:	4620      	mov	r0, r4
 8015ca4:	b01c      	add	sp, #112	@ 0x70
 8015ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015caa:	f8d7 9000 	ldr.w	r9, [r7]
 8015cae:	491d      	ldr	r1, [pc, #116]	@ (8015d24 <rcl_init+0x1d8>)
 8015cb0:	680b      	ldr	r3, [r1, #0]
 8015cb2:	3301      	adds	r3, #1
 8015cb4:	d023      	beq.n	8015cfe <rcl_init+0x1b2>
 8015cb6:	600b      	str	r3, [r1, #0]
 8015cb8:	461a      	mov	r2, r3
 8015cba:	2400      	movs	r4, #0
 8015cbc:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015cc0:	607b      	str	r3, [r7, #4]
 8015cc2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015cc4:	6182      	str	r2, [r0, #24]
 8015cc6:	3301      	adds	r3, #1
 8015cc8:	61c4      	str	r4, [r0, #28]
 8015cca:	d01f      	beq.n	8015d0c <rcl_init+0x1c0>
 8015ccc:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8015cd0:	b94b      	cbnz	r3, 8015ce6 <rcl_init+0x19a>
 8015cd2:	3030      	adds	r0, #48	@ 0x30
 8015cd4:	f000 f926 	bl	8015f24 <rcl_get_localhost_only>
 8015cd8:	4604      	mov	r4, r0
 8015cda:	2800      	cmp	r0, #0
 8015cdc:	d1d4      	bne.n	8015c88 <rcl_init+0x13c>
 8015cde:	f8d7 9000 	ldr.w	r9, [r7]
 8015ce2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015ce6:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8015cea:	3018      	adds	r0, #24
 8015cec:	f003 f90c 	bl	8018f08 <rmw_init>
 8015cf0:	4604      	mov	r4, r0
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	d0d0      	beq.n	8015c98 <rcl_init+0x14c>
 8015cf6:	f7ff fea5 	bl	8015a44 <rcl_convert_rmw_ret_to_rcl_ret>
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	e7c4      	b.n	8015c88 <rcl_init+0x13c>
 8015cfe:	2201      	movs	r2, #1
 8015d00:	461c      	mov	r4, r3
 8015d02:	600a      	str	r2, [r1, #0]
 8015d04:	4613      	mov	r3, r2
 8015d06:	e7d9      	b.n	8015cbc <rcl_init+0x170>
 8015d08:	240a      	movs	r4, #10
 8015d0a:	e7c5      	b.n	8015c98 <rcl_init+0x14c>
 8015d0c:	3024      	adds	r0, #36	@ 0x24
 8015d0e:	f005 fe9d 	bl	801ba4c <rcl_get_default_domain_id>
 8015d12:	4604      	mov	r4, r0
 8015d14:	2800      	cmp	r0, #0
 8015d16:	d1b7      	bne.n	8015c88 <rcl_init+0x13c>
 8015d18:	f8d7 9000 	ldr.w	r9, [r7]
 8015d1c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015d20:	e7d4      	b.n	8015ccc <rcl_init+0x180>
 8015d22:	bf00      	nop
 8015d24:	20012bfc 	.word	0x20012bfc

08015d28 <rcl_get_zero_initialized_init_options>:
 8015d28:	2000      	movs	r0, #0
 8015d2a:	4770      	bx	lr

08015d2c <rcl_init_options_init>:
 8015d2c:	b084      	sub	sp, #16
 8015d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d30:	b097      	sub	sp, #92	@ 0x5c
 8015d32:	ae1d      	add	r6, sp, #116	@ 0x74
 8015d34:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8015d38:	2800      	cmp	r0, #0
 8015d3a:	d058      	beq.n	8015dee <rcl_init_options_init+0xc2>
 8015d3c:	6803      	ldr	r3, [r0, #0]
 8015d3e:	4605      	mov	r5, r0
 8015d40:	b133      	cbz	r3, 8015d50 <rcl_init_options_init+0x24>
 8015d42:	2464      	movs	r4, #100	@ 0x64
 8015d44:	4620      	mov	r0, r4
 8015d46:	b017      	add	sp, #92	@ 0x5c
 8015d48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015d4c:	b004      	add	sp, #16
 8015d4e:	4770      	bx	lr
 8015d50:	4630      	mov	r0, r6
 8015d52:	f7fb f8a5 	bl	8010ea0 <rcutils_allocator_is_valid>
 8015d56:	2800      	cmp	r0, #0
 8015d58:	d049      	beq.n	8015dee <rcl_init_options_init+0xc2>
 8015d5a:	46b4      	mov	ip, r6
 8015d5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015d60:	ac11      	add	r4, sp, #68	@ 0x44
 8015d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d64:	f8dc 3000 	ldr.w	r3, [ip]
 8015d68:	6023      	str	r3, [r4, #0]
 8015d6a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8015d6c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015d6e:	2050      	movs	r0, #80	@ 0x50
 8015d70:	4798      	blx	r3
 8015d72:	4604      	mov	r4, r0
 8015d74:	6028      	str	r0, [r5, #0]
 8015d76:	2800      	cmp	r0, #0
 8015d78:	d03b      	beq.n	8015df2 <rcl_init_options_init+0xc6>
 8015d7a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8015d7e:	4686      	mov	lr, r0
 8015d80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015d84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015d88:	f8dc 3000 	ldr.w	r3, [ip]
 8015d8c:	f8ce 3000 	str.w	r3, [lr]
 8015d90:	a802      	add	r0, sp, #8
 8015d92:	f002 fd29 	bl	80187e8 <rmw_get_zero_initialized_init_options>
 8015d96:	f10d 0e08 	add.w	lr, sp, #8
 8015d9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015d9e:	f104 0c18 	add.w	ip, r4, #24
 8015da2:	682f      	ldr	r7, [r5, #0]
 8015da4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015da8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015dac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015db0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015db4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015db8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015dbc:	ac20      	add	r4, sp, #128	@ 0x80
 8015dbe:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015dc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015dc6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015dca:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8015dce:	f107 0018 	add.w	r0, r7, #24
 8015dd2:	f002 ff77 	bl	8018cc4 <rmw_init_options_init>
 8015dd6:	4604      	mov	r4, r0
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	d0b3      	beq.n	8015d44 <rcl_init_options_init+0x18>
 8015ddc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8015dde:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015de0:	6828      	ldr	r0, [r5, #0]
 8015de2:	4798      	blx	r3
 8015de4:	4620      	mov	r0, r4
 8015de6:	f7ff fe2d 	bl	8015a44 <rcl_convert_rmw_ret_to_rcl_ret>
 8015dea:	4604      	mov	r4, r0
 8015dec:	e7aa      	b.n	8015d44 <rcl_init_options_init+0x18>
 8015dee:	240b      	movs	r4, #11
 8015df0:	e7a8      	b.n	8015d44 <rcl_init_options_init+0x18>
 8015df2:	240a      	movs	r4, #10
 8015df4:	e7a6      	b.n	8015d44 <rcl_init_options_init+0x18>
 8015df6:	bf00      	nop

08015df8 <rcl_init_options_fini>:
 8015df8:	b530      	push	{r4, r5, lr}
 8015dfa:	b087      	sub	sp, #28
 8015dfc:	b1f0      	cbz	r0, 8015e3c <rcl_init_options_fini+0x44>
 8015dfe:	6803      	ldr	r3, [r0, #0]
 8015e00:	4604      	mov	r4, r0
 8015e02:	b1db      	cbz	r3, 8015e3c <rcl_init_options_fini+0x44>
 8015e04:	469c      	mov	ip, r3
 8015e06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e0a:	f10d 0e04 	add.w	lr, sp, #4
 8015e0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015e12:	f8dc 3000 	ldr.w	r3, [ip]
 8015e16:	f8ce 3000 	str.w	r3, [lr]
 8015e1a:	a801      	add	r0, sp, #4
 8015e1c:	f7fb f840 	bl	8010ea0 <rcutils_allocator_is_valid>
 8015e20:	b160      	cbz	r0, 8015e3c <rcl_init_options_fini+0x44>
 8015e22:	6820      	ldr	r0, [r4, #0]
 8015e24:	3018      	adds	r0, #24
 8015e26:	f003 f823 	bl	8018e70 <rmw_init_options_fini>
 8015e2a:	4605      	mov	r5, r0
 8015e2c:	b950      	cbnz	r0, 8015e44 <rcl_init_options_fini+0x4c>
 8015e2e:	6820      	ldr	r0, [r4, #0]
 8015e30:	9b02      	ldr	r3, [sp, #8]
 8015e32:	9905      	ldr	r1, [sp, #20]
 8015e34:	4798      	blx	r3
 8015e36:	4628      	mov	r0, r5
 8015e38:	b007      	add	sp, #28
 8015e3a:	bd30      	pop	{r4, r5, pc}
 8015e3c:	250b      	movs	r5, #11
 8015e3e:	4628      	mov	r0, r5
 8015e40:	b007      	add	sp, #28
 8015e42:	bd30      	pop	{r4, r5, pc}
 8015e44:	f7ff fdfe 	bl	8015a44 <rcl_convert_rmw_ret_to_rcl_ret>
 8015e48:	4605      	mov	r5, r0
 8015e4a:	e7f8      	b.n	8015e3e <rcl_init_options_fini+0x46>

08015e4c <rcl_init_options_copy>:
 8015e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e50:	b094      	sub	sp, #80	@ 0x50
 8015e52:	2800      	cmp	r0, #0
 8015e54:	d058      	beq.n	8015f08 <rcl_init_options_copy+0xbc>
 8015e56:	4604      	mov	r4, r0
 8015e58:	6800      	ldr	r0, [r0, #0]
 8015e5a:	2800      	cmp	r0, #0
 8015e5c:	d054      	beq.n	8015f08 <rcl_init_options_copy+0xbc>
 8015e5e:	460e      	mov	r6, r1
 8015e60:	f7fb f81e 	bl	8010ea0 <rcutils_allocator_is_valid>
 8015e64:	2800      	cmp	r0, #0
 8015e66:	d04f      	beq.n	8015f08 <rcl_init_options_copy+0xbc>
 8015e68:	2e00      	cmp	r6, #0
 8015e6a:	d04d      	beq.n	8015f08 <rcl_init_options_copy+0xbc>
 8015e6c:	6833      	ldr	r3, [r6, #0]
 8015e6e:	b123      	cbz	r3, 8015e7a <rcl_init_options_copy+0x2e>
 8015e70:	2464      	movs	r4, #100	@ 0x64
 8015e72:	4620      	mov	r0, r4
 8015e74:	b014      	add	sp, #80	@ 0x50
 8015e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e7a:	6827      	ldr	r7, [r4, #0]
 8015e7c:	46bc      	mov	ip, r7
 8015e7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e82:	ad0f      	add	r5, sp, #60	@ 0x3c
 8015e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015e86:	f8dc 3000 	ldr.w	r3, [ip]
 8015e8a:	f8d7 8000 	ldr.w	r8, [r7]
 8015e8e:	602b      	str	r3, [r5, #0]
 8015e90:	4619      	mov	r1, r3
 8015e92:	2050      	movs	r0, #80	@ 0x50
 8015e94:	47c0      	blx	r8
 8015e96:	4605      	mov	r5, r0
 8015e98:	6030      	str	r0, [r6, #0]
 8015e9a:	b3d0      	cbz	r0, 8015f12 <rcl_init_options_copy+0xc6>
 8015e9c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8015ea0:	4686      	mov	lr, r0
 8015ea2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015ea6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015eaa:	f8dc 3000 	ldr.w	r3, [ip]
 8015eae:	f8ce 3000 	str.w	r3, [lr]
 8015eb2:	4668      	mov	r0, sp
 8015eb4:	f002 fc98 	bl	80187e8 <rmw_get_zero_initialized_init_options>
 8015eb8:	46ee      	mov	lr, sp
 8015eba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015ebe:	f105 0c18 	add.w	ip, r5, #24
 8015ec2:	6824      	ldr	r4, [r4, #0]
 8015ec4:	6835      	ldr	r5, [r6, #0]
 8015ec6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015eca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015ece:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ed2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015ed6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015eda:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015ede:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015ee2:	f104 0018 	add.w	r0, r4, #24
 8015ee6:	f105 0118 	add.w	r1, r5, #24
 8015eea:	f002 ff4d 	bl	8018d88 <rmw_init_options_copy>
 8015eee:	4604      	mov	r4, r0
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	d0be      	beq.n	8015e72 <rcl_init_options_copy+0x26>
 8015ef4:	f7fa ffe2 	bl	8010ebc <rcutils_get_error_string>
 8015ef8:	f7fa fff6 	bl	8010ee8 <rcutils_reset_error>
 8015efc:	4630      	mov	r0, r6
 8015efe:	f7ff ff7b 	bl	8015df8 <rcl_init_options_fini>
 8015f02:	b140      	cbz	r0, 8015f16 <rcl_init_options_copy+0xca>
 8015f04:	4604      	mov	r4, r0
 8015f06:	e7b4      	b.n	8015e72 <rcl_init_options_copy+0x26>
 8015f08:	240b      	movs	r4, #11
 8015f0a:	4620      	mov	r0, r4
 8015f0c:	b014      	add	sp, #80	@ 0x50
 8015f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f12:	240a      	movs	r4, #10
 8015f14:	e7ad      	b.n	8015e72 <rcl_init_options_copy+0x26>
 8015f16:	4620      	mov	r0, r4
 8015f18:	b014      	add	sp, #80	@ 0x50
 8015f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f1e:	f7ff bd91 	b.w	8015a44 <rcl_convert_rmw_ret_to_rcl_ret>
 8015f22:	bf00      	nop

08015f24 <rcl_get_localhost_only>:
 8015f24:	b510      	push	{r4, lr}
 8015f26:	b082      	sub	sp, #8
 8015f28:	2300      	movs	r3, #0
 8015f2a:	9301      	str	r3, [sp, #4]
 8015f2c:	b1b8      	cbz	r0, 8015f5e <rcl_get_localhost_only+0x3a>
 8015f2e:	4604      	mov	r4, r0
 8015f30:	a901      	add	r1, sp, #4
 8015f32:	480c      	ldr	r0, [pc, #48]	@ (8015f64 <rcl_get_localhost_only+0x40>)
 8015f34:	f002 f9ac 	bl	8018290 <rcutils_get_env>
 8015f38:	b110      	cbz	r0, 8015f40 <rcl_get_localhost_only+0x1c>
 8015f3a:	2001      	movs	r0, #1
 8015f3c:	b002      	add	sp, #8
 8015f3e:	bd10      	pop	{r4, pc}
 8015f40:	9b01      	ldr	r3, [sp, #4]
 8015f42:	b113      	cbz	r3, 8015f4a <rcl_get_localhost_only+0x26>
 8015f44:	781a      	ldrb	r2, [r3, #0]
 8015f46:	2a31      	cmp	r2, #49	@ 0x31
 8015f48:	d004      	beq.n	8015f54 <rcl_get_localhost_only+0x30>
 8015f4a:	2302      	movs	r3, #2
 8015f4c:	2000      	movs	r0, #0
 8015f4e:	7023      	strb	r3, [r4, #0]
 8015f50:	b002      	add	sp, #8
 8015f52:	bd10      	pop	{r4, pc}
 8015f54:	785b      	ldrb	r3, [r3, #1]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d1f7      	bne.n	8015f4a <rcl_get_localhost_only+0x26>
 8015f5a:	2301      	movs	r3, #1
 8015f5c:	e7f6      	b.n	8015f4c <rcl_get_localhost_only+0x28>
 8015f5e:	200b      	movs	r0, #11
 8015f60:	b002      	add	sp, #8
 8015f62:	bd10      	pop	{r4, pc}
 8015f64:	0801e108 	.word	0x0801e108

08015f68 <rcl_get_zero_initialized_node>:
 8015f68:	4a03      	ldr	r2, [pc, #12]	@ (8015f78 <rcl_get_zero_initialized_node+0x10>)
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f70:	e883 0003 	stmia.w	r3, {r0, r1}
 8015f74:	4618      	mov	r0, r3
 8015f76:	4770      	bx	lr
 8015f78:	0801e130 	.word	0x0801e130

08015f7c <rcl_node_init>:
 8015f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f80:	b0a9      	sub	sp, #164	@ 0xa4
 8015f82:	4604      	mov	r4, r0
 8015f84:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8015f88:	a823      	add	r0, sp, #140	@ 0x8c
 8015f8a:	460e      	mov	r6, r1
 8015f8c:	4615      	mov	r5, r2
 8015f8e:	461f      	mov	r7, r3
 8015f90:	f005 ff84 	bl	801be9c <rcl_guard_condition_get_default_options>
 8015f94:	f1b8 0f00 	cmp.w	r8, #0
 8015f98:	f000 80e6 	beq.w	8016168 <rcl_node_init+0x1ec>
 8015f9c:	4640      	mov	r0, r8
 8015f9e:	f7fa ff7f 	bl	8010ea0 <rcutils_allocator_is_valid>
 8015fa2:	2800      	cmp	r0, #0
 8015fa4:	f000 80e0 	beq.w	8016168 <rcl_node_init+0x1ec>
 8015fa8:	2e00      	cmp	r6, #0
 8015faa:	f000 80dd 	beq.w	8016168 <rcl_node_init+0x1ec>
 8015fae:	2d00      	cmp	r5, #0
 8015fb0:	f000 80da 	beq.w	8016168 <rcl_node_init+0x1ec>
 8015fb4:	2c00      	cmp	r4, #0
 8015fb6:	f000 80d7 	beq.w	8016168 <rcl_node_init+0x1ec>
 8015fba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015fbe:	f1b9 0f00 	cmp.w	r9, #0
 8015fc2:	f040 80fd 	bne.w	80161c0 <rcl_node_init+0x244>
 8015fc6:	2f00      	cmp	r7, #0
 8015fc8:	f000 80ce 	beq.w	8016168 <rcl_node_init+0x1ec>
 8015fcc:	4638      	mov	r0, r7
 8015fce:	f7ff fd57 	bl	8015a80 <rcl_context_is_valid>
 8015fd2:	4682      	mov	sl, r0
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	f000 80cd 	beq.w	8016174 <rcl_node_init+0x1f8>
 8015fda:	464a      	mov	r2, r9
 8015fdc:	a922      	add	r1, sp, #136	@ 0x88
 8015fde:	4630      	mov	r0, r6
 8015fe0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8015fe4:	f002 fda2 	bl	8018b2c <rmw_validate_node_name>
 8015fe8:	4681      	mov	r9, r0
 8015fea:	2800      	cmp	r0, #0
 8015fec:	f040 80be 	bne.w	801616c <rcl_node_init+0x1f0>
 8015ff0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8015ff2:	2800      	cmp	r0, #0
 8015ff4:	f040 80f0 	bne.w	80161d8 <rcl_node_init+0x25c>
 8015ff8:	4628      	mov	r0, r5
 8015ffa:	f7ea f8f3 	bl	80001e4 <strlen>
 8015ffe:	2800      	cmp	r0, #0
 8016000:	f040 80bb 	bne.w	801617a <rcl_node_init+0x1fe>
 8016004:	4d7c      	ldr	r5, [pc, #496]	@ (80161f8 <rcl_node_init+0x27c>)
 8016006:	a922      	add	r1, sp, #136	@ 0x88
 8016008:	2200      	movs	r2, #0
 801600a:	4628      	mov	r0, r5
 801600c:	f002 fd70 	bl	8018af0 <rmw_validate_namespace>
 8016010:	4681      	mov	r9, r0
 8016012:	2800      	cmp	r0, #0
 8016014:	f040 80aa 	bne.w	801616c <rcl_node_init+0x1f0>
 8016018:	4682      	mov	sl, r0
 801601a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801601c:	2800      	cmp	r0, #0
 801601e:	f040 80e0 	bne.w	80161e2 <rcl_node_init+0x266>
 8016022:	f8d8 3000 	ldr.w	r3, [r8]
 8016026:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801602a:	2078      	movs	r0, #120	@ 0x78
 801602c:	4798      	blx	r3
 801602e:	4681      	mov	r9, r0
 8016030:	6060      	str	r0, [r4, #4]
 8016032:	2800      	cmp	r0, #0
 8016034:	f000 80ca 	beq.w	80161cc <rcl_node_init+0x250>
 8016038:	2200      	movs	r2, #0
 801603a:	2300      	movs	r3, #0
 801603c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8016040:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8016044:	a808      	add	r0, sp, #32
 8016046:	f000 f907 	bl	8016258 <rcl_node_get_default_options>
 801604a:	a908      	add	r1, sp, #32
 801604c:	4648      	mov	r0, r9
 801604e:	2268      	movs	r2, #104	@ 0x68
 8016050:	f006 ff03 	bl	801ce5a <memcpy>
 8016054:	6861      	ldr	r1, [r4, #4]
 8016056:	6027      	str	r7, [r4, #0]
 8016058:	4640      	mov	r0, r8
 801605a:	f000 f90b 	bl	8016274 <rcl_node_options_copy>
 801605e:	2800      	cmp	r0, #0
 8016060:	d158      	bne.n	8016114 <rcl_node_init+0x198>
 8016062:	4628      	mov	r0, r5
 8016064:	f7ea f8be 	bl	80001e4 <strlen>
 8016068:	4428      	add	r0, r5
 801606a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801606e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8016072:	2b2f      	cmp	r3, #47	@ 0x2f
 8016074:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016078:	9300      	str	r3, [sp, #0]
 801607a:	bf0c      	ite	eq
 801607c:	4b5f      	ldreq	r3, [pc, #380]	@ (80161fc <rcl_node_init+0x280>)
 801607e:	4b60      	ldrne	r3, [pc, #384]	@ (8016200 <rcl_node_init+0x284>)
 8016080:	9302      	str	r3, [sp, #8]
 8016082:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016086:	9301      	str	r3, [sp, #4]
 8016088:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801608c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016090:	f002 f916 	bl	80182c0 <rcutils_format_string_limit>
 8016094:	6823      	ldr	r3, [r4, #0]
 8016096:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801609a:	6818      	ldr	r0, [r3, #0]
 801609c:	4631      	mov	r1, r6
 801609e:	3028      	adds	r0, #40	@ 0x28
 80160a0:	462a      	mov	r2, r5
 80160a2:	6866      	ldr	r6, [r4, #4]
 80160a4:	f003 f984 	bl	80193b0 <rmw_create_node>
 80160a8:	6863      	ldr	r3, [r4, #4]
 80160aa:	66b0      	str	r0, [r6, #104]	@ 0x68
 80160ac:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80160ae:	2800      	cmp	r0, #0
 80160b0:	d032      	beq.n	8016118 <rcl_node_init+0x19c>
 80160b2:	f003 fa11 	bl	80194d8 <rmw_node_get_graph_guard_condition>
 80160b6:	4681      	mov	r9, r0
 80160b8:	b360      	cbz	r0, 8016114 <rcl_node_init+0x198>
 80160ba:	f8d8 3000 	ldr.w	r3, [r8]
 80160be:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80160c2:	6866      	ldr	r6, [r4, #4]
 80160c4:	2008      	movs	r0, #8
 80160c6:	4798      	blx	r3
 80160c8:	6863      	ldr	r3, [r4, #4]
 80160ca:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80160cc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80160d0:	f1bb 0f00 	cmp.w	fp, #0
 80160d4:	d020      	beq.n	8016118 <rcl_node_init+0x19c>
 80160d6:	a806      	add	r0, sp, #24
 80160d8:	f005 fe50 	bl	801bd7c <rcl_get_zero_initialized_guard_condition>
 80160dc:	a806      	add	r0, sp, #24
 80160de:	c803      	ldmia	r0, {r0, r1}
 80160e0:	6863      	ldr	r3, [r4, #4]
 80160e2:	46c4      	mov	ip, r8
 80160e4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80160e8:	e88b 0003 	stmia.w	fp, {r0, r1}
 80160ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80160f0:	ae23      	add	r6, sp, #140	@ 0x8c
 80160f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80160f4:	f8dc 3000 	ldr.w	r3, [ip]
 80160f8:	6033      	str	r3, [r6, #0]
 80160fa:	ab28      	add	r3, sp, #160	@ 0xa0
 80160fc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8016100:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016104:	4649      	mov	r1, r9
 8016106:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016108:	463a      	mov	r2, r7
 801610a:	4670      	mov	r0, lr
 801610c:	f005 fe40 	bl	801bd90 <rcl_guard_condition_init_from_rmw>
 8016110:	4681      	mov	r9, r0
 8016112:	b328      	cbz	r0, 8016160 <rcl_node_init+0x1e4>
 8016114:	6863      	ldr	r3, [r4, #4]
 8016116:	b1f3      	cbz	r3, 8016156 <rcl_node_init+0x1da>
 8016118:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801611a:	b128      	cbz	r0, 8016128 <rcl_node_init+0x1ac>
 801611c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016120:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016124:	4798      	blx	r3
 8016126:	6863      	ldr	r3, [r4, #4]
 8016128:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801612a:	b110      	cbz	r0, 8016132 <rcl_node_init+0x1b6>
 801612c:	f003 f958 	bl	80193e0 <rmw_destroy_node>
 8016130:	6863      	ldr	r3, [r4, #4]
 8016132:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016134:	b148      	cbz	r0, 801614a <rcl_node_init+0x1ce>
 8016136:	f005 fe8b 	bl	801be50 <rcl_guard_condition_fini>
 801613a:	6863      	ldr	r3, [r4, #4]
 801613c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016140:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016142:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016146:	4798      	blx	r3
 8016148:	6863      	ldr	r3, [r4, #4]
 801614a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801614e:	4618      	mov	r0, r3
 8016150:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016154:	4798      	blx	r3
 8016156:	2300      	movs	r3, #0
 8016158:	e9c4 3300 	strd	r3, r3, [r4]
 801615c:	f04f 0901 	mov.w	r9, #1
 8016160:	f1ba 0f00 	cmp.w	sl, #0
 8016164:	d125      	bne.n	80161b2 <rcl_node_init+0x236>
 8016166:	e001      	b.n	801616c <rcl_node_init+0x1f0>
 8016168:	f04f 090b 	mov.w	r9, #11
 801616c:	4648      	mov	r0, r9
 801616e:	b029      	add	sp, #164	@ 0xa4
 8016170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016174:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8016178:	e7f8      	b.n	801616c <rcl_node_init+0x1f0>
 801617a:	782b      	ldrb	r3, [r5, #0]
 801617c:	2b2f      	cmp	r3, #47	@ 0x2f
 801617e:	f43f af42 	beq.w	8016006 <rcl_node_init+0x8a>
 8016182:	9503      	str	r5, [sp, #12]
 8016184:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016188:	9300      	str	r3, [sp, #0]
 801618a:	4b1e      	ldr	r3, [pc, #120]	@ (8016204 <rcl_node_init+0x288>)
 801618c:	9302      	str	r3, [sp, #8]
 801618e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016192:	9301      	str	r3, [sp, #4]
 8016194:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016198:	f002 f892 	bl	80182c0 <rcutils_format_string_limit>
 801619c:	4605      	mov	r5, r0
 801619e:	b340      	cbz	r0, 80161f2 <rcl_node_init+0x276>
 80161a0:	2200      	movs	r2, #0
 80161a2:	a922      	add	r1, sp, #136	@ 0x88
 80161a4:	9222      	str	r2, [sp, #136]	@ 0x88
 80161a6:	f002 fca3 	bl	8018af0 <rmw_validate_namespace>
 80161aa:	4681      	mov	r9, r0
 80161ac:	2800      	cmp	r0, #0
 80161ae:	f43f af34 	beq.w	801601a <rcl_node_init+0x9e>
 80161b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80161b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80161ba:	4628      	mov	r0, r5
 80161bc:	4798      	blx	r3
 80161be:	e7d5      	b.n	801616c <rcl_node_init+0x1f0>
 80161c0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80161c4:	4648      	mov	r0, r9
 80161c6:	b029      	add	sp, #164	@ 0xa4
 80161c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161cc:	f04f 090a 	mov.w	r9, #10
 80161d0:	f1ba 0f00 	cmp.w	sl, #0
 80161d4:	d1ed      	bne.n	80161b2 <rcl_node_init+0x236>
 80161d6:	e7c9      	b.n	801616c <rcl_node_init+0x1f0>
 80161d8:	f002 fcfa 	bl	8018bd0 <rmw_node_name_validation_result_string>
 80161dc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80161e0:	e7c4      	b.n	801616c <rcl_node_init+0x1f0>
 80161e2:	f002 fc97 	bl	8018b14 <rmw_namespace_validation_result_string>
 80161e6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80161ea:	f1ba 0f00 	cmp.w	sl, #0
 80161ee:	d1e0      	bne.n	80161b2 <rcl_node_init+0x236>
 80161f0:	e7bc      	b.n	801616c <rcl_node_init+0x1f0>
 80161f2:	f04f 090a 	mov.w	r9, #10
 80161f6:	e7b9      	b.n	801616c <rcl_node_init+0x1f0>
 80161f8:	0801e120 	.word	0x0801e120
 80161fc:	0801de88 	.word	0x0801de88
 8016200:	0801e128 	.word	0x0801e128
 8016204:	0801e124 	.word	0x0801e124

08016208 <rcl_node_is_valid>:
 8016208:	b130      	cbz	r0, 8016218 <rcl_node_is_valid+0x10>
 801620a:	6843      	ldr	r3, [r0, #4]
 801620c:	b123      	cbz	r3, 8016218 <rcl_node_is_valid+0x10>
 801620e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016210:	b113      	cbz	r3, 8016218 <rcl_node_is_valid+0x10>
 8016212:	6800      	ldr	r0, [r0, #0]
 8016214:	f7ff bc34 	b.w	8015a80 <rcl_context_is_valid>
 8016218:	2000      	movs	r0, #0
 801621a:	4770      	bx	lr

0801621c <rcl_node_get_name>:
 801621c:	b120      	cbz	r0, 8016228 <rcl_node_get_name+0xc>
 801621e:	6840      	ldr	r0, [r0, #4]
 8016220:	b110      	cbz	r0, 8016228 <rcl_node_get_name+0xc>
 8016222:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016224:	b100      	cbz	r0, 8016228 <rcl_node_get_name+0xc>
 8016226:	6880      	ldr	r0, [r0, #8]
 8016228:	4770      	bx	lr
 801622a:	bf00      	nop

0801622c <rcl_node_get_namespace>:
 801622c:	b120      	cbz	r0, 8016238 <rcl_node_get_namespace+0xc>
 801622e:	6840      	ldr	r0, [r0, #4]
 8016230:	b110      	cbz	r0, 8016238 <rcl_node_get_namespace+0xc>
 8016232:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016234:	b100      	cbz	r0, 8016238 <rcl_node_get_namespace+0xc>
 8016236:	68c0      	ldr	r0, [r0, #12]
 8016238:	4770      	bx	lr
 801623a:	bf00      	nop

0801623c <rcl_node_get_options>:
 801623c:	b128      	cbz	r0, 801624a <rcl_node_get_options+0xe>
 801623e:	6840      	ldr	r0, [r0, #4]
 8016240:	b118      	cbz	r0, 801624a <rcl_node_get_options+0xe>
 8016242:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8016244:	2b00      	cmp	r3, #0
 8016246:	bf08      	it	eq
 8016248:	2000      	moveq	r0, #0
 801624a:	4770      	bx	lr

0801624c <rcl_node_get_rmw_handle>:
 801624c:	b110      	cbz	r0, 8016254 <rcl_node_get_rmw_handle+0x8>
 801624e:	6840      	ldr	r0, [r0, #4]
 8016250:	b100      	cbz	r0, 8016254 <rcl_node_get_rmw_handle+0x8>
 8016252:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016254:	4770      	bx	lr
 8016256:	bf00      	nop

08016258 <rcl_node_get_default_options>:
 8016258:	b510      	push	{r4, lr}
 801625a:	2268      	movs	r2, #104	@ 0x68
 801625c:	4604      	mov	r4, r0
 801625e:	2100      	movs	r1, #0
 8016260:	f006 fd32 	bl	801ccc8 <memset>
 8016264:	4620      	mov	r0, r4
 8016266:	f7fa fe0d 	bl	8010e84 <rcutils_get_default_allocator>
 801626a:	2301      	movs	r3, #1
 801626c:	7523      	strb	r3, [r4, #20]
 801626e:	4620      	mov	r0, r4
 8016270:	bd10      	pop	{r4, pc}
 8016272:	bf00      	nop

08016274 <rcl_node_options_copy>:
 8016274:	b1d0      	cbz	r0, 80162ac <rcl_node_options_copy+0x38>
 8016276:	b570      	push	{r4, r5, r6, lr}
 8016278:	460c      	mov	r4, r1
 801627a:	b1a9      	cbz	r1, 80162a8 <rcl_node_options_copy+0x34>
 801627c:	4288      	cmp	r0, r1
 801627e:	4684      	mov	ip, r0
 8016280:	d012      	beq.n	80162a8 <rcl_node_options_copy+0x34>
 8016282:	4605      	mov	r5, r0
 8016284:	8a86      	ldrh	r6, [r0, #20]
 8016286:	468e      	mov	lr, r1
 8016288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801628a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801628e:	682b      	ldr	r3, [r5, #0]
 8016290:	f8ce 3000 	str.w	r3, [lr]
 8016294:	f10c 0118 	add.w	r1, ip, #24
 8016298:	2250      	movs	r2, #80	@ 0x50
 801629a:	82a6      	strh	r6, [r4, #20]
 801629c:	f104 0018 	add.w	r0, r4, #24
 80162a0:	f006 fddb 	bl	801ce5a <memcpy>
 80162a4:	2000      	movs	r0, #0
 80162a6:	bd70      	pop	{r4, r5, r6, pc}
 80162a8:	200b      	movs	r0, #11
 80162aa:	bd70      	pop	{r4, r5, r6, pc}
 80162ac:	200b      	movs	r0, #11
 80162ae:	4770      	bx	lr

080162b0 <rcl_node_resolve_name>:
 80162b0:	b082      	sub	sp, #8
 80162b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b6:	b091      	sub	sp, #68	@ 0x44
 80162b8:	ac1a      	add	r4, sp, #104	@ 0x68
 80162ba:	e884 000c 	stmia.w	r4, {r2, r3}
 80162be:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80162c2:	2800      	cmp	r0, #0
 80162c4:	d03b      	beq.n	801633e <rcl_node_resolve_name+0x8e>
 80162c6:	460c      	mov	r4, r1
 80162c8:	4605      	mov	r5, r0
 80162ca:	f7ff ffb7 	bl	801623c <rcl_node_get_options>
 80162ce:	2800      	cmp	r0, #0
 80162d0:	d037      	beq.n	8016342 <rcl_node_resolve_name+0x92>
 80162d2:	4628      	mov	r0, r5
 80162d4:	f7ff ffa2 	bl	801621c <rcl_node_get_name>
 80162d8:	4606      	mov	r6, r0
 80162da:	4628      	mov	r0, r5
 80162dc:	f7ff ffa6 	bl	801622c <rcl_node_get_namespace>
 80162e0:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80162e4:	4681      	mov	r9, r0
 80162e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80162ea:	ad0b      	add	r5, sp, #44	@ 0x2c
 80162ec:	46ac      	mov	ip, r5
 80162ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80162f2:	f8de 3000 	ldr.w	r3, [lr]
 80162f6:	f8cc 3000 	str.w	r3, [ip]
 80162fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80162fc:	b1fb      	cbz	r3, 801633e <rcl_node_resolve_name+0x8e>
 80162fe:	468a      	mov	sl, r1
 8016300:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8016304:	f002 f934 	bl	8018570 <rcutils_get_zero_initialized_string_map>
 8016308:	ab10      	add	r3, sp, #64	@ 0x40
 801630a:	9008      	str	r0, [sp, #32]
 801630c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016310:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016314:	2100      	movs	r1, #0
 8016316:	e895 000c 	ldmia.w	r5, {r2, r3}
 801631a:	a808      	add	r0, sp, #32
 801631c:	f002 f9a0 	bl	8018660 <rcutils_string_map_init>
 8016320:	4607      	mov	r7, r0
 8016322:	b180      	cbz	r0, 8016346 <rcl_node_resolve_name+0x96>
 8016324:	f7fa fdca 	bl	8010ebc <rcutils_get_error_string>
 8016328:	f7fa fdde 	bl	8010ee8 <rcutils_reset_error>
 801632c:	2f0a      	cmp	r7, #10
 801632e:	bf18      	it	ne
 8016330:	2701      	movne	r7, #1
 8016332:	4638      	mov	r0, r7
 8016334:	b011      	add	sp, #68	@ 0x44
 8016336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801633a:	b002      	add	sp, #8
 801633c:	4770      	bx	lr
 801633e:	270b      	movs	r7, #11
 8016340:	e7f7      	b.n	8016332 <rcl_node_resolve_name+0x82>
 8016342:	2701      	movs	r7, #1
 8016344:	e7f5      	b.n	8016332 <rcl_node_resolve_name+0x82>
 8016346:	9009      	str	r0, [sp, #36]	@ 0x24
 8016348:	9007      	str	r0, [sp, #28]
 801634a:	a808      	add	r0, sp, #32
 801634c:	f005 fd10 	bl	801bd70 <rcl_get_default_topic_name_substitutions>
 8016350:	4607      	mov	r7, r0
 8016352:	b1a8      	cbz	r0, 8016380 <rcl_node_resolve_name+0xd0>
 8016354:	280a      	cmp	r0, #10
 8016356:	9c07      	ldr	r4, [sp, #28]
 8016358:	d000      	beq.n	801635c <rcl_node_resolve_name+0xac>
 801635a:	2701      	movs	r7, #1
 801635c:	a808      	add	r0, sp, #32
 801635e:	f002 f9bf 	bl	80186e0 <rcutils_string_map_fini>
 8016362:	2800      	cmp	r0, #0
 8016364:	d13d      	bne.n	80163e2 <rcl_node_resolve_name+0x132>
 8016366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016368:	4659      	mov	r1, fp
 801636a:	47d0      	blx	sl
 801636c:	4659      	mov	r1, fp
 801636e:	4620      	mov	r0, r4
 8016370:	47d0      	blx	sl
 8016372:	f1b8 0f00 	cmp.w	r8, #0
 8016376:	d0dc      	beq.n	8016332 <rcl_node_resolve_name+0x82>
 8016378:	2f67      	cmp	r7, #103	@ 0x67
 801637a:	bf08      	it	eq
 801637c:	2768      	moveq	r7, #104	@ 0x68
 801637e:	e7d8      	b.n	8016332 <rcl_node_resolve_name+0x82>
 8016380:	ab09      	add	r3, sp, #36	@ 0x24
 8016382:	9305      	str	r3, [sp, #20]
 8016384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016386:	46ec      	mov	ip, sp
 8016388:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801638c:	682b      	ldr	r3, [r5, #0]
 801638e:	f8cc 3000 	str.w	r3, [ip]
 8016392:	464a      	mov	r2, r9
 8016394:	4631      	mov	r1, r6
 8016396:	4620      	mov	r0, r4
 8016398:	ab08      	add	r3, sp, #32
 801639a:	f005 fb8b 	bl	801bab4 <rcl_expand_topic_name>
 801639e:	4607      	mov	r7, r0
 80163a0:	b9b8      	cbnz	r0, 80163d2 <rcl_node_resolve_name+0x122>
 80163a2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80163a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80163a6:	4602      	mov	r2, r0
 80163a8:	a90a      	add	r1, sp, #40	@ 0x28
 80163aa:	4620      	mov	r0, r4
 80163ac:	f002 fadc 	bl	8018968 <rmw_validate_full_topic_name>
 80163b0:	b988      	cbnz	r0, 80163d6 <rcl_node_resolve_name+0x126>
 80163b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80163b4:	b9d5      	cbnz	r5, 80163ec <rcl_node_resolve_name+0x13c>
 80163b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80163b8:	a808      	add	r0, sp, #32
 80163ba:	601c      	str	r4, [r3, #0]
 80163bc:	f002 f990 	bl	80186e0 <rcutils_string_map_fini>
 80163c0:	4607      	mov	r7, r0
 80163c2:	b1a8      	cbz	r0, 80163f0 <rcl_node_resolve_name+0x140>
 80163c4:	f7fa fd7a 	bl	8010ebc <rcutils_get_error_string>
 80163c8:	462c      	mov	r4, r5
 80163ca:	f7fa fd8d 	bl	8010ee8 <rcutils_reset_error>
 80163ce:	2701      	movs	r7, #1
 80163d0:	e7c9      	b.n	8016366 <rcl_node_resolve_name+0xb6>
 80163d2:	9c07      	ldr	r4, [sp, #28]
 80163d4:	e7c2      	b.n	801635c <rcl_node_resolve_name+0xac>
 80163d6:	f7fa fd71 	bl	8010ebc <rcutils_get_error_string>
 80163da:	2701      	movs	r7, #1
 80163dc:	f7fa fd84 	bl	8010ee8 <rcutils_reset_error>
 80163e0:	e7bc      	b.n	801635c <rcl_node_resolve_name+0xac>
 80163e2:	f7fa fd6b 	bl	8010ebc <rcutils_get_error_string>
 80163e6:	f7fa fd7f 	bl	8010ee8 <rcutils_reset_error>
 80163ea:	e7bc      	b.n	8016366 <rcl_node_resolve_name+0xb6>
 80163ec:	2767      	movs	r7, #103	@ 0x67
 80163ee:	e7b5      	b.n	801635c <rcl_node_resolve_name+0xac>
 80163f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163f2:	4659      	mov	r1, fp
 80163f4:	47d0      	blx	sl
 80163f6:	4659      	mov	r1, fp
 80163f8:	4638      	mov	r0, r7
 80163fa:	47d0      	blx	sl
 80163fc:	e799      	b.n	8016332 <rcl_node_resolve_name+0x82>
 80163fe:	bf00      	nop

08016400 <rcl_service_get_rmw_handle>:
 8016400:	b118      	cbz	r0, 801640a <rcl_service_get_rmw_handle+0xa>
 8016402:	6800      	ldr	r0, [r0, #0]
 8016404:	b108      	cbz	r0, 801640a <rcl_service_get_rmw_handle+0xa>
 8016406:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801640a:	4770      	bx	lr

0801640c <rcl_take_request>:
 801640c:	b570      	push	{r4, r5, r6, lr}
 801640e:	468e      	mov	lr, r1
 8016410:	460c      	mov	r4, r1
 8016412:	4616      	mov	r6, r2
 8016414:	4605      	mov	r5, r0
 8016416:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801641a:	b08c      	sub	sp, #48	@ 0x30
 801641c:	f10d 0c18 	add.w	ip, sp, #24
 8016420:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016424:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016428:	e88c 0003 	stmia.w	ip, {r0, r1}
 801642c:	b30d      	cbz	r5, 8016472 <rcl_take_request+0x66>
 801642e:	682b      	ldr	r3, [r5, #0]
 8016430:	b1fb      	cbz	r3, 8016472 <rcl_take_request+0x66>
 8016432:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016436:	b1e0      	cbz	r0, 8016472 <rcl_take_request+0x66>
 8016438:	b336      	cbz	r6, 8016488 <rcl_take_request+0x7c>
 801643a:	2300      	movs	r3, #0
 801643c:	f88d 3007 	strb.w	r3, [sp, #7]
 8016440:	4632      	mov	r2, r6
 8016442:	f10d 0307 	add.w	r3, sp, #7
 8016446:	a902      	add	r1, sp, #8
 8016448:	f003 f89a 	bl	8019580 <rmw_take_request>
 801644c:	4605      	mov	r5, r0
 801644e:	b198      	cbz	r0, 8016478 <rcl_take_request+0x6c>
 8016450:	280a      	cmp	r0, #10
 8016452:	bf18      	it	ne
 8016454:	2501      	movne	r5, #1
 8016456:	f10d 0e18 	add.w	lr, sp, #24
 801645a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801645e:	46a4      	mov	ip, r4
 8016460:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016464:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016468:	e88c 0003 	stmia.w	ip, {r0, r1}
 801646c:	4628      	mov	r0, r5
 801646e:	b00c      	add	sp, #48	@ 0x30
 8016470:	bd70      	pop	{r4, r5, r6, pc}
 8016472:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8016476:	e7ee      	b.n	8016456 <rcl_take_request+0x4a>
 8016478:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801647c:	f240 2359 	movw	r3, #601	@ 0x259
 8016480:	2a00      	cmp	r2, #0
 8016482:	bf08      	it	eq
 8016484:	461d      	moveq	r5, r3
 8016486:	e7e6      	b.n	8016456 <rcl_take_request+0x4a>
 8016488:	250b      	movs	r5, #11
 801648a:	e7e4      	b.n	8016456 <rcl_take_request+0x4a>

0801648c <rcl_send_response>:
 801648c:	b170      	cbz	r0, 80164ac <rcl_send_response+0x20>
 801648e:	6800      	ldr	r0, [r0, #0]
 8016490:	b160      	cbz	r0, 80164ac <rcl_send_response+0x20>
 8016492:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016496:	b148      	cbz	r0, 80164ac <rcl_send_response+0x20>
 8016498:	b159      	cbz	r1, 80164b2 <rcl_send_response+0x26>
 801649a:	b510      	push	{r4, lr}
 801649c:	b15a      	cbz	r2, 80164b6 <rcl_send_response+0x2a>
 801649e:	f003 f8cd 	bl	801963c <rmw_send_response>
 80164a2:	b110      	cbz	r0, 80164aa <rcl_send_response+0x1e>
 80164a4:	2802      	cmp	r0, #2
 80164a6:	bf18      	it	ne
 80164a8:	2001      	movne	r0, #1
 80164aa:	bd10      	pop	{r4, pc}
 80164ac:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80164b0:	4770      	bx	lr
 80164b2:	200b      	movs	r0, #11
 80164b4:	4770      	bx	lr
 80164b6:	200b      	movs	r0, #11
 80164b8:	bd10      	pop	{r4, pc}
 80164ba:	bf00      	nop

080164bc <rcl_service_is_valid>:
 80164bc:	b130      	cbz	r0, 80164cc <rcl_service_is_valid+0x10>
 80164be:	6800      	ldr	r0, [r0, #0]
 80164c0:	b120      	cbz	r0, 80164cc <rcl_service_is_valid+0x10>
 80164c2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80164c6:	3800      	subs	r0, #0
 80164c8:	bf18      	it	ne
 80164ca:	2001      	movne	r0, #1
 80164cc:	4770      	bx	lr
 80164ce:	bf00      	nop

080164d0 <rcl_get_zero_initialized_subscription>:
 80164d0:	4b01      	ldr	r3, [pc, #4]	@ (80164d8 <rcl_get_zero_initialized_subscription+0x8>)
 80164d2:	6818      	ldr	r0, [r3, #0]
 80164d4:	4770      	bx	lr
 80164d6:	bf00      	nop
 80164d8:	0801e138 	.word	0x0801e138

080164dc <rcl_subscription_init>:
 80164dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164e0:	b089      	sub	sp, #36	@ 0x24
 80164e2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80164e4:	b1d6      	cbz	r6, 801651c <rcl_subscription_init+0x40>
 80164e6:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 80164ea:	4604      	mov	r4, r0
 80164ec:	4648      	mov	r0, r9
 80164ee:	460d      	mov	r5, r1
 80164f0:	4690      	mov	r8, r2
 80164f2:	461f      	mov	r7, r3
 80164f4:	f7fa fcd4 	bl	8010ea0 <rcutils_allocator_is_valid>
 80164f8:	b180      	cbz	r0, 801651c <rcl_subscription_init+0x40>
 80164fa:	b17c      	cbz	r4, 801651c <rcl_subscription_init+0x40>
 80164fc:	4628      	mov	r0, r5
 80164fe:	f7ff fe83 	bl	8016208 <rcl_node_is_valid>
 8016502:	2800      	cmp	r0, #0
 8016504:	d054      	beq.n	80165b0 <rcl_subscription_init+0xd4>
 8016506:	f1b8 0f00 	cmp.w	r8, #0
 801650a:	d007      	beq.n	801651c <rcl_subscription_init+0x40>
 801650c:	b137      	cbz	r7, 801651c <rcl_subscription_init+0x40>
 801650e:	6823      	ldr	r3, [r4, #0]
 8016510:	b14b      	cbz	r3, 8016526 <rcl_subscription_init+0x4a>
 8016512:	2764      	movs	r7, #100	@ 0x64
 8016514:	4638      	mov	r0, r7
 8016516:	b009      	add	sp, #36	@ 0x24
 8016518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801651c:	270b      	movs	r7, #11
 801651e:	4638      	mov	r0, r7
 8016520:	b009      	add	sp, #36	@ 0x24
 8016522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016526:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801652a:	aa07      	add	r2, sp, #28
 801652c:	9205      	str	r2, [sp, #20]
 801652e:	9307      	str	r3, [sp, #28]
 8016530:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8016534:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016538:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801653c:	4639      	mov	r1, r7
 801653e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8016542:	4628      	mov	r0, r5
 8016544:	f7ff feb4 	bl	80162b0 <rcl_node_resolve_name>
 8016548:	4607      	mov	r7, r0
 801654a:	2800      	cmp	r0, #0
 801654c:	d15f      	bne.n	801660e <rcl_subscription_init+0x132>
 801654e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8016552:	21c8      	movs	r1, #200	@ 0xc8
 8016554:	2001      	movs	r0, #1
 8016556:	4798      	blx	r3
 8016558:	6020      	str	r0, [r4, #0]
 801655a:	2800      	cmp	r0, #0
 801655c:	d05d      	beq.n	801661a <rcl_subscription_init+0x13e>
 801655e:	4628      	mov	r0, r5
 8016560:	f7ff fe74 	bl	801624c <rcl_node_get_rmw_handle>
 8016564:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8016568:	9300      	str	r3, [sp, #0]
 801656a:	9a07      	ldr	r2, [sp, #28]
 801656c:	6827      	ldr	r7, [r4, #0]
 801656e:	4641      	mov	r1, r8
 8016570:	4633      	mov	r3, r6
 8016572:	f003 f94d 	bl	8019810 <rmw_create_subscription>
 8016576:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 801657a:	6827      	ldr	r7, [r4, #0]
 801657c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8016580:	b348      	cbz	r0, 80165d6 <rcl_subscription_init+0xfa>
 8016582:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8016586:	f003 fa25 	bl	80199d4 <rmw_subscription_get_actual_qos>
 801658a:	4607      	mov	r7, r0
 801658c:	b9a8      	cbnz	r0, 80165ba <rcl_subscription_init+0xde>
 801658e:	6820      	ldr	r0, [r4, #0]
 8016590:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8016594:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8016598:	2270      	movs	r2, #112	@ 0x70
 801659a:	4631      	mov	r1, r6
 801659c:	f006 fc5d 	bl	801ce5a <memcpy>
 80165a0:	9807      	ldr	r0, [sp, #28]
 80165a2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80165a4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80165a6:	4798      	blx	r3
 80165a8:	4638      	mov	r0, r7
 80165aa:	b009      	add	sp, #36	@ 0x24
 80165ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165b0:	27c8      	movs	r7, #200	@ 0xc8
 80165b2:	4638      	mov	r0, r7
 80165b4:	b009      	add	sp, #36	@ 0x24
 80165b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165ba:	6827      	ldr	r7, [r4, #0]
 80165bc:	b32f      	cbz	r7, 801660a <rcl_subscription_init+0x12e>
 80165be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80165c2:	b14b      	cbz	r3, 80165d8 <rcl_subscription_init+0xfc>
 80165c4:	4628      	mov	r0, r5
 80165c6:	f7ff fe41 	bl	801624c <rcl_node_get_rmw_handle>
 80165ca:	6823      	ldr	r3, [r4, #0]
 80165cc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80165d0:	f003 fa10 	bl	80199f4 <rmw_destroy_subscription>
 80165d4:	6827      	ldr	r7, [r4, #0]
 80165d6:	b197      	cbz	r7, 80165fe <rcl_subscription_init+0x122>
 80165d8:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80165dc:	4628      	mov	r0, r5
 80165de:	f7fa fc5f 	bl	8010ea0 <rcutils_allocator_is_valid>
 80165e2:	b158      	cbz	r0, 80165fc <rcl_subscription_init+0x120>
 80165e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80165e6:	b148      	cbz	r0, 80165fc <rcl_subscription_init+0x120>
 80165e8:	4629      	mov	r1, r5
 80165ea:	f002 f911 	bl	8018810 <rmw_subscription_content_filter_options_fini>
 80165ee:	4605      	mov	r5, r0
 80165f0:	b9b8      	cbnz	r0, 8016622 <rcl_subscription_init+0x146>
 80165f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165f4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80165f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80165f8:	4798      	blx	r3
 80165fa:	66fd      	str	r5, [r7, #108]	@ 0x6c
 80165fc:	6827      	ldr	r7, [r4, #0]
 80165fe:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8016600:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8016602:	4638      	mov	r0, r7
 8016604:	4798      	blx	r3
 8016606:	2300      	movs	r3, #0
 8016608:	6023      	str	r3, [r4, #0]
 801660a:	2701      	movs	r7, #1
 801660c:	e7c8      	b.n	80165a0 <rcl_subscription_init+0xc4>
 801660e:	2867      	cmp	r0, #103	@ 0x67
 8016610:	d0c6      	beq.n	80165a0 <rcl_subscription_init+0xc4>
 8016612:	2869      	cmp	r0, #105	@ 0x69
 8016614:	d003      	beq.n	801661e <rcl_subscription_init+0x142>
 8016616:	280a      	cmp	r0, #10
 8016618:	d1f7      	bne.n	801660a <rcl_subscription_init+0x12e>
 801661a:	270a      	movs	r7, #10
 801661c:	e7c0      	b.n	80165a0 <rcl_subscription_init+0xc4>
 801661e:	2767      	movs	r7, #103	@ 0x67
 8016620:	e7be      	b.n	80165a0 <rcl_subscription_init+0xc4>
 8016622:	f7ff fa0f 	bl	8015a44 <rcl_convert_rmw_ret_to_rcl_ret>
 8016626:	6827      	ldr	r7, [r4, #0]
 8016628:	e7e9      	b.n	80165fe <rcl_subscription_init+0x122>
 801662a:	bf00      	nop

0801662c <rcl_subscription_get_default_options>:
 801662c:	b570      	push	{r4, r5, r6, lr}
 801662e:	4d14      	ldr	r5, [pc, #80]	@ (8016680 <rcl_subscription_get_default_options+0x54>)
 8016630:	4914      	ldr	r1, [pc, #80]	@ (8016684 <rcl_subscription_get_default_options+0x58>)
 8016632:	b08a      	sub	sp, #40	@ 0x28
 8016634:	4604      	mov	r4, r0
 8016636:	2250      	movs	r2, #80	@ 0x50
 8016638:	4628      	mov	r0, r5
 801663a:	f006 fc0e 	bl	801ce5a <memcpy>
 801663e:	a804      	add	r0, sp, #16
 8016640:	f7fa fc20 	bl	8010e84 <rcutils_get_default_allocator>
 8016644:	f10d 0c10 	add.w	ip, sp, #16
 8016648:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801664c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8016650:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016654:	466e      	mov	r6, sp
 8016656:	f8dc 3000 	ldr.w	r3, [ip]
 801665a:	f8ce 3000 	str.w	r3, [lr]
 801665e:	4630      	mov	r0, r6
 8016660:	f002 f8f0 	bl	8018844 <rmw_get_default_subscription_options>
 8016664:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016668:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801666c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016670:	2270      	movs	r2, #112	@ 0x70
 8016672:	4629      	mov	r1, r5
 8016674:	4620      	mov	r0, r4
 8016676:	f006 fbf0 	bl	801ce5a <memcpy>
 801667a:	4620      	mov	r0, r4
 801667c:	b00a      	add	sp, #40	@ 0x28
 801667e:	bd70      	pop	{r4, r5, r6, pc}
 8016680:	20012c00 	.word	0x20012c00
 8016684:	0801e140 	.word	0x0801e140

08016688 <rcl_take>:
 8016688:	2800      	cmp	r0, #0
 801668a:	d04a      	beq.n	8016722 <rcl_take+0x9a>
 801668c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016690:	4604      	mov	r4, r0
 8016692:	6800      	ldr	r0, [r0, #0]
 8016694:	b0a4      	sub	sp, #144	@ 0x90
 8016696:	2800      	cmp	r0, #0
 8016698:	d03b      	beq.n	8016712 <rcl_take+0x8a>
 801669a:	461f      	mov	r7, r3
 801669c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d036      	beq.n	8016712 <rcl_take+0x8a>
 80166a4:	460e      	mov	r6, r1
 80166a6:	2900      	cmp	r1, #0
 80166a8:	d039      	beq.n	801671e <rcl_take+0x96>
 80166aa:	4615      	mov	r5, r2
 80166ac:	2a00      	cmp	r2, #0
 80166ae:	d03c      	beq.n	801672a <rcl_take+0xa2>
 80166b0:	a802      	add	r0, sp, #8
 80166b2:	f002 f951 	bl	8018958 <rmw_get_zero_initialized_message_info>
 80166b6:	f10d 0c08 	add.w	ip, sp, #8
 80166ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80166be:	46ae      	mov	lr, r5
 80166c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80166c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80166c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80166cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80166d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80166d4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80166d8:	f04f 0800 	mov.w	r8, #0
 80166dc:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80166e0:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80166e4:	6822      	ldr	r2, [r4, #0]
 80166e6:	462b      	mov	r3, r5
 80166e8:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80166ec:	9700      	str	r7, [sp, #0]
 80166ee:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80166f2:	4631      	mov	r1, r6
 80166f4:	f003 f9de 	bl	8019ab4 <rmw_take_with_info>
 80166f8:	4603      	mov	r3, r0
 80166fa:	b9c0      	cbnz	r0, 801672e <rcl_take+0xa6>
 80166fc:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8016700:	f240 1291 	movw	r2, #401	@ 0x191
 8016704:	2900      	cmp	r1, #0
 8016706:	bf08      	it	eq
 8016708:	4613      	moveq	r3, r2
 801670a:	4618      	mov	r0, r3
 801670c:	b024      	add	sp, #144	@ 0x90
 801670e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016712:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016716:	4618      	mov	r0, r3
 8016718:	b024      	add	sp, #144	@ 0x90
 801671a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801671e:	230b      	movs	r3, #11
 8016720:	e7f3      	b.n	801670a <rcl_take+0x82>
 8016722:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016726:	4618      	mov	r0, r3
 8016728:	4770      	bx	lr
 801672a:	ad14      	add	r5, sp, #80	@ 0x50
 801672c:	e7c0      	b.n	80166b0 <rcl_take+0x28>
 801672e:	f7ff f989 	bl	8015a44 <rcl_convert_rmw_ret_to_rcl_ret>
 8016732:	4603      	mov	r3, r0
 8016734:	e7e9      	b.n	801670a <rcl_take+0x82>
 8016736:	bf00      	nop

08016738 <rcl_subscription_get_rmw_handle>:
 8016738:	b118      	cbz	r0, 8016742 <rcl_subscription_get_rmw_handle+0xa>
 801673a:	6800      	ldr	r0, [r0, #0]
 801673c:	b108      	cbz	r0, 8016742 <rcl_subscription_get_rmw_handle+0xa>
 801673e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016742:	4770      	bx	lr

08016744 <rcl_subscription_is_valid>:
 8016744:	b130      	cbz	r0, 8016754 <rcl_subscription_is_valid+0x10>
 8016746:	6800      	ldr	r0, [r0, #0]
 8016748:	b120      	cbz	r0, 8016754 <rcl_subscription_is_valid+0x10>
 801674a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801674e:	3800      	subs	r0, #0
 8016750:	bf18      	it	ne
 8016752:	2001      	movne	r0, #1
 8016754:	4770      	bx	lr
 8016756:	bf00      	nop

08016758 <rcl_get_system_time>:
 8016758:	4608      	mov	r0, r1
 801675a:	f7fa bbe1 	b.w	8010f20 <rcutils_system_time_now>
 801675e:	bf00      	nop

08016760 <rcl_get_steady_time>:
 8016760:	4608      	mov	r0, r1
 8016762:	f7fa bc05 	b.w	8010f70 <rcutils_steady_time_now>
 8016766:	bf00      	nop

08016768 <rcl_get_ros_time>:
 8016768:	7a03      	ldrb	r3, [r0, #8]
 801676a:	b510      	push	{r4, lr}
 801676c:	460c      	mov	r4, r1
 801676e:	b133      	cbz	r3, 801677e <rcl_get_ros_time+0x16>
 8016770:	2105      	movs	r1, #5
 8016772:	f001 fce9 	bl	8018148 <__atomic_load_8>
 8016776:	e9c4 0100 	strd	r0, r1, [r4]
 801677a:	2000      	movs	r0, #0
 801677c:	bd10      	pop	{r4, pc}
 801677e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016782:	4608      	mov	r0, r1
 8016784:	f7fa bbcc 	b.w	8010f20 <rcutils_system_time_now>

08016788 <rcl_clock_init>:
 8016788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801678a:	4605      	mov	r5, r0
 801678c:	4610      	mov	r0, r2
 801678e:	4614      	mov	r4, r2
 8016790:	460e      	mov	r6, r1
 8016792:	f7fa fb85 	bl	8010ea0 <rcutils_allocator_is_valid>
 8016796:	b128      	cbz	r0, 80167a4 <rcl_clock_init+0x1c>
 8016798:	2d03      	cmp	r5, #3
 801679a:	d803      	bhi.n	80167a4 <rcl_clock_init+0x1c>
 801679c:	e8df f005 	tbb	[pc, r5]
 80167a0:	06532e1d 	.word	0x06532e1d
 80167a4:	f04f 0c0b 	mov.w	ip, #11
 80167a8:	4660      	mov	r0, ip
 80167aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167ac:	2e00      	cmp	r6, #0
 80167ae:	d0f9      	beq.n	80167a4 <rcl_clock_init+0x1c>
 80167b0:	2c00      	cmp	r4, #0
 80167b2:	d0f7      	beq.n	80167a4 <rcl_clock_init+0x1c>
 80167b4:	2300      	movs	r3, #0
 80167b6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80167ba:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8016870 <rcl_clock_init+0xe8>
 80167be:	6133      	str	r3, [r6, #16]
 80167c0:	f106 0514 	add.w	r5, r6, #20
 80167c4:	469c      	mov	ip, r3
 80167c6:	2703      	movs	r7, #3
 80167c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80167cc:	6823      	ldr	r3, [r4, #0]
 80167ce:	602b      	str	r3, [r5, #0]
 80167d0:	7037      	strb	r7, [r6, #0]
 80167d2:	f8c6 e00c 	str.w	lr, [r6, #12]
 80167d6:	4660      	mov	r0, ip
 80167d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167da:	2e00      	cmp	r6, #0
 80167dc:	d0e2      	beq.n	80167a4 <rcl_clock_init+0x1c>
 80167de:	2300      	movs	r3, #0
 80167e0:	7033      	strb	r3, [r6, #0]
 80167e2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80167e6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80167ea:	469c      	mov	ip, r3
 80167ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167ee:	f106 0514 	add.w	r5, r6, #20
 80167f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80167f4:	6823      	ldr	r3, [r4, #0]
 80167f6:	602b      	str	r3, [r5, #0]
 80167f8:	4660      	mov	r0, ip
 80167fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167fc:	2e00      	cmp	r6, #0
 80167fe:	d0d1      	beq.n	80167a4 <rcl_clock_init+0x1c>
 8016800:	2c00      	cmp	r4, #0
 8016802:	d0cf      	beq.n	80167a4 <rcl_clock_init+0x1c>
 8016804:	2700      	movs	r7, #0
 8016806:	7037      	strb	r7, [r6, #0]
 8016808:	46a4      	mov	ip, r4
 801680a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801680e:	f106 0514 	add.w	r5, r6, #20
 8016812:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8016816:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801681a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801681c:	f8dc 3000 	ldr.w	r3, [ip]
 8016820:	602b      	str	r3, [r5, #0]
 8016822:	6921      	ldr	r1, [r4, #16]
 8016824:	6823      	ldr	r3, [r4, #0]
 8016826:	2010      	movs	r0, #16
 8016828:	4798      	blx	r3
 801682a:	6130      	str	r0, [r6, #16]
 801682c:	b1d0      	cbz	r0, 8016864 <rcl_clock_init+0xdc>
 801682e:	2200      	movs	r2, #0
 8016830:	2300      	movs	r3, #0
 8016832:	e9c0 2300 	strd	r2, r3, [r0]
 8016836:	2301      	movs	r3, #1
 8016838:	7207      	strb	r7, [r0, #8]
 801683a:	4a0c      	ldr	r2, [pc, #48]	@ (801686c <rcl_clock_init+0xe4>)
 801683c:	7033      	strb	r3, [r6, #0]
 801683e:	46bc      	mov	ip, r7
 8016840:	60f2      	str	r2, [r6, #12]
 8016842:	4660      	mov	r0, ip
 8016844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016846:	2e00      	cmp	r6, #0
 8016848:	d0ac      	beq.n	80167a4 <rcl_clock_init+0x1c>
 801684a:	2c00      	cmp	r4, #0
 801684c:	d0aa      	beq.n	80167a4 <rcl_clock_init+0x1c>
 801684e:	2300      	movs	r3, #0
 8016850:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016854:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8016874 <rcl_clock_init+0xec>
 8016858:	6133      	str	r3, [r6, #16]
 801685a:	f106 0514 	add.w	r5, r6, #20
 801685e:	469c      	mov	ip, r3
 8016860:	2702      	movs	r7, #2
 8016862:	e7b1      	b.n	80167c8 <rcl_clock_init+0x40>
 8016864:	f04f 0c0a 	mov.w	ip, #10
 8016868:	e79e      	b.n	80167a8 <rcl_clock_init+0x20>
 801686a:	bf00      	nop
 801686c:	08016769 	.word	0x08016769
 8016870:	08016761 	.word	0x08016761
 8016874:	08016759 	.word	0x08016759

08016878 <rcl_clock_get_now>:
 8016878:	b140      	cbz	r0, 801688c <rcl_clock_get_now+0x14>
 801687a:	b139      	cbz	r1, 801688c <rcl_clock_get_now+0x14>
 801687c:	7803      	ldrb	r3, [r0, #0]
 801687e:	b11b      	cbz	r3, 8016888 <rcl_clock_get_now+0x10>
 8016880:	68c3      	ldr	r3, [r0, #12]
 8016882:	b10b      	cbz	r3, 8016888 <rcl_clock_get_now+0x10>
 8016884:	6900      	ldr	r0, [r0, #16]
 8016886:	4718      	bx	r3
 8016888:	2001      	movs	r0, #1
 801688a:	4770      	bx	lr
 801688c:	200b      	movs	r0, #11
 801688e:	4770      	bx	lr

08016890 <rcl_timer_call>:
 8016890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016894:	b087      	sub	sp, #28
 8016896:	2800      	cmp	r0, #0
 8016898:	d06d      	beq.n	8016976 <rcl_timer_call+0xe6>
 801689a:	6803      	ldr	r3, [r0, #0]
 801689c:	4604      	mov	r4, r0
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d063      	beq.n	801696a <rcl_timer_call+0xda>
 80168a2:	f3bf 8f5b 	dmb	ish
 80168a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80168aa:	f3bf 8f5b 	dmb	ish
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d150      	bne.n	8016954 <rcl_timer_call+0xc4>
 80168b2:	6803      	ldr	r3, [r0, #0]
 80168b4:	a904      	add	r1, sp, #16
 80168b6:	6818      	ldr	r0, [r3, #0]
 80168b8:	f7ff ffde 	bl	8016878 <rcl_clock_get_now>
 80168bc:	4605      	mov	r5, r0
 80168be:	2800      	cmp	r0, #0
 80168c0:	d14a      	bne.n	8016958 <rcl_timer_call+0xc8>
 80168c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	db4a      	blt.n	8016960 <rcl_timer_call+0xd0>
 80168ca:	6820      	ldr	r0, [r4, #0]
 80168cc:	f04f 0a05 	mov.w	sl, #5
 80168d0:	f8cd a000 	str.w	sl, [sp]
 80168d4:	3020      	adds	r0, #32
 80168d6:	f001 fca3 	bl	8018220 <__atomic_exchange_8>
 80168da:	6823      	ldr	r3, [r4, #0]
 80168dc:	f3bf 8f5b 	dmb	ish
 80168e0:	4680      	mov	r8, r0
 80168e2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80168e6:	f3bf 8f5b 	dmb	ish
 80168ea:	6820      	ldr	r0, [r4, #0]
 80168ec:	4689      	mov	r9, r1
 80168ee:	3028      	adds	r0, #40	@ 0x28
 80168f0:	4651      	mov	r1, sl
 80168f2:	f001 fc29 	bl	8018148 <__atomic_load_8>
 80168f6:	4606      	mov	r6, r0
 80168f8:	6820      	ldr	r0, [r4, #0]
 80168fa:	460f      	mov	r7, r1
 80168fc:	3018      	adds	r0, #24
 80168fe:	4651      	mov	r1, sl
 8016900:	f001 fc22 	bl	8018148 <__atomic_load_8>
 8016904:	1836      	adds	r6, r6, r0
 8016906:	4602      	mov	r2, r0
 8016908:	4682      	mov	sl, r0
 801690a:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801690e:	eb47 0701 	adc.w	r7, r7, r1
 8016912:	4286      	cmp	r6, r0
 8016914:	460b      	mov	r3, r1
 8016916:	eb77 010c 	sbcs.w	r1, r7, ip
 801691a:	da04      	bge.n	8016926 <rcl_timer_call+0x96>
 801691c:	ea53 0102 	orrs.w	r1, r3, r2
 8016920:	d12e      	bne.n	8016980 <rcl_timer_call+0xf0>
 8016922:	4606      	mov	r6, r0
 8016924:	4667      	mov	r7, ip
 8016926:	6820      	ldr	r0, [r4, #0]
 8016928:	2105      	movs	r1, #5
 801692a:	4632      	mov	r2, r6
 801692c:	463b      	mov	r3, r7
 801692e:	3028      	adds	r0, #40	@ 0x28
 8016930:	9100      	str	r1, [sp, #0]
 8016932:	f001 fc3f 	bl	80181b4 <__atomic_store_8>
 8016936:	f1bb 0f00 	cmp.w	fp, #0
 801693a:	d00d      	beq.n	8016958 <rcl_timer_call+0xc8>
 801693c:	9a04      	ldr	r2, [sp, #16]
 801693e:	9b05      	ldr	r3, [sp, #20]
 8016940:	ebb2 0208 	subs.w	r2, r2, r8
 8016944:	4620      	mov	r0, r4
 8016946:	eb63 0309 	sbc.w	r3, r3, r9
 801694a:	47d8      	blx	fp
 801694c:	4628      	mov	r0, r5
 801694e:	b007      	add	sp, #28
 8016950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016954:	f240 3521 	movw	r5, #801	@ 0x321
 8016958:	4628      	mov	r0, r5
 801695a:	b007      	add	sp, #28
 801695c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016960:	2501      	movs	r5, #1
 8016962:	4628      	mov	r0, r5
 8016964:	b007      	add	sp, #28
 8016966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801696a:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801696e:	4628      	mov	r0, r5
 8016970:	b007      	add	sp, #28
 8016972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016976:	250b      	movs	r5, #11
 8016978:	4628      	mov	r0, r5
 801697a:	b007      	add	sp, #28
 801697c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016980:	1b80      	subs	r0, r0, r6
 8016982:	eb6c 0107 	sbc.w	r1, ip, r7
 8016986:	3801      	subs	r0, #1
 8016988:	f161 0100 	sbc.w	r1, r1, #0
 801698c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8016990:	f7e9 fc86 	bl	80002a0 <__aeabi_ldivmod>
 8016994:	9b02      	ldr	r3, [sp, #8]
 8016996:	3001      	adds	r0, #1
 8016998:	f141 0100 	adc.w	r1, r1, #0
 801699c:	fb00 f303 	mul.w	r3, r0, r3
 80169a0:	fb01 330a 	mla	r3, r1, sl, r3
 80169a4:	fba0 0a0a 	umull	r0, sl, r0, sl
 80169a8:	1986      	adds	r6, r0, r6
 80169aa:	4453      	add	r3, sl
 80169ac:	eb43 0707 	adc.w	r7, r3, r7
 80169b0:	e7b9      	b.n	8016926 <rcl_timer_call+0x96>
 80169b2:	bf00      	nop

080169b4 <rcl_timer_is_ready>:
 80169b4:	b570      	push	{r4, r5, r6, lr}
 80169b6:	b082      	sub	sp, #8
 80169b8:	b378      	cbz	r0, 8016a1a <rcl_timer_is_ready+0x66>
 80169ba:	6803      	ldr	r3, [r0, #0]
 80169bc:	4604      	mov	r4, r0
 80169be:	b383      	cbz	r3, 8016a22 <rcl_timer_is_ready+0x6e>
 80169c0:	460d      	mov	r5, r1
 80169c2:	b351      	cbz	r1, 8016a1a <rcl_timer_is_ready+0x66>
 80169c4:	f3bf 8f5b 	dmb	ish
 80169c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80169cc:	f3bf 8f5b 	dmb	ish
 80169d0:	b953      	cbnz	r3, 80169e8 <rcl_timer_is_ready+0x34>
 80169d2:	6803      	ldr	r3, [r0, #0]
 80169d4:	4669      	mov	r1, sp
 80169d6:	6818      	ldr	r0, [r3, #0]
 80169d8:	f7ff ff4e 	bl	8016878 <rcl_clock_get_now>
 80169dc:	4606      	mov	r6, r0
 80169de:	b140      	cbz	r0, 80169f2 <rcl_timer_is_ready+0x3e>
 80169e0:	f240 3321 	movw	r3, #801	@ 0x321
 80169e4:	4298      	cmp	r0, r3
 80169e6:	d101      	bne.n	80169ec <rcl_timer_is_ready+0x38>
 80169e8:	2600      	movs	r6, #0
 80169ea:	702e      	strb	r6, [r5, #0]
 80169ec:	4630      	mov	r0, r6
 80169ee:	b002      	add	sp, #8
 80169f0:	bd70      	pop	{r4, r5, r6, pc}
 80169f2:	6820      	ldr	r0, [r4, #0]
 80169f4:	2105      	movs	r1, #5
 80169f6:	3028      	adds	r0, #40	@ 0x28
 80169f8:	f001 fba6 	bl	8018148 <__atomic_load_8>
 80169fc:	9b00      	ldr	r3, [sp, #0]
 80169fe:	1ac0      	subs	r0, r0, r3
 8016a00:	9b01      	ldr	r3, [sp, #4]
 8016a02:	eb61 0103 	sbc.w	r1, r1, r3
 8016a06:	2801      	cmp	r0, #1
 8016a08:	f171 0300 	sbcs.w	r3, r1, #0
 8016a0c:	bfb4      	ite	lt
 8016a0e:	2301      	movlt	r3, #1
 8016a10:	2300      	movge	r3, #0
 8016a12:	4630      	mov	r0, r6
 8016a14:	702b      	strb	r3, [r5, #0]
 8016a16:	b002      	add	sp, #8
 8016a18:	bd70      	pop	{r4, r5, r6, pc}
 8016a1a:	260b      	movs	r6, #11
 8016a1c:	4630      	mov	r0, r6
 8016a1e:	b002      	add	sp, #8
 8016a20:	bd70      	pop	{r4, r5, r6, pc}
 8016a22:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016a26:	e7e1      	b.n	80169ec <rcl_timer_is_ready+0x38>

08016a28 <rcl_timer_get_time_until_next_call>:
 8016a28:	b570      	push	{r4, r5, r6, lr}
 8016a2a:	b082      	sub	sp, #8
 8016a2c:	b330      	cbz	r0, 8016a7c <rcl_timer_get_time_until_next_call+0x54>
 8016a2e:	6803      	ldr	r3, [r0, #0]
 8016a30:	4604      	mov	r4, r0
 8016a32:	b33b      	cbz	r3, 8016a84 <rcl_timer_get_time_until_next_call+0x5c>
 8016a34:	460d      	mov	r5, r1
 8016a36:	b309      	cbz	r1, 8016a7c <rcl_timer_get_time_until_next_call+0x54>
 8016a38:	f3bf 8f5b 	dmb	ish
 8016a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016a40:	f3bf 8f5b 	dmb	ish
 8016a44:	b9ab      	cbnz	r3, 8016a72 <rcl_timer_get_time_until_next_call+0x4a>
 8016a46:	6803      	ldr	r3, [r0, #0]
 8016a48:	4669      	mov	r1, sp
 8016a4a:	6818      	ldr	r0, [r3, #0]
 8016a4c:	f7ff ff14 	bl	8016878 <rcl_clock_get_now>
 8016a50:	4606      	mov	r6, r0
 8016a52:	b958      	cbnz	r0, 8016a6c <rcl_timer_get_time_until_next_call+0x44>
 8016a54:	6820      	ldr	r0, [r4, #0]
 8016a56:	2105      	movs	r1, #5
 8016a58:	3028      	adds	r0, #40	@ 0x28
 8016a5a:	f001 fb75 	bl	8018148 <__atomic_load_8>
 8016a5e:	9b00      	ldr	r3, [sp, #0]
 8016a60:	1ac0      	subs	r0, r0, r3
 8016a62:	9b01      	ldr	r3, [sp, #4]
 8016a64:	6028      	str	r0, [r5, #0]
 8016a66:	eb61 0103 	sbc.w	r1, r1, r3
 8016a6a:	6069      	str	r1, [r5, #4]
 8016a6c:	4630      	mov	r0, r6
 8016a6e:	b002      	add	sp, #8
 8016a70:	bd70      	pop	{r4, r5, r6, pc}
 8016a72:	f240 3621 	movw	r6, #801	@ 0x321
 8016a76:	4630      	mov	r0, r6
 8016a78:	b002      	add	sp, #8
 8016a7a:	bd70      	pop	{r4, r5, r6, pc}
 8016a7c:	260b      	movs	r6, #11
 8016a7e:	4630      	mov	r0, r6
 8016a80:	b002      	add	sp, #8
 8016a82:	bd70      	pop	{r4, r5, r6, pc}
 8016a84:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016a88:	e7f0      	b.n	8016a6c <rcl_timer_get_time_until_next_call+0x44>
 8016a8a:	bf00      	nop

08016a8c <rcl_timer_get_guard_condition>:
 8016a8c:	b130      	cbz	r0, 8016a9c <rcl_timer_get_guard_condition+0x10>
 8016a8e:	6800      	ldr	r0, [r0, #0]
 8016a90:	b120      	cbz	r0, 8016a9c <rcl_timer_get_guard_condition+0x10>
 8016a92:	68c3      	ldr	r3, [r0, #12]
 8016a94:	b10b      	cbz	r3, 8016a9a <rcl_timer_get_guard_condition+0xe>
 8016a96:	3008      	adds	r0, #8
 8016a98:	4770      	bx	lr
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	4770      	bx	lr
 8016a9e:	bf00      	nop

08016aa0 <rcl_get_zero_initialized_wait_set>:
 8016aa0:	b510      	push	{r4, lr}
 8016aa2:	4c08      	ldr	r4, [pc, #32]	@ (8016ac4 <rcl_get_zero_initialized_wait_set+0x24>)
 8016aa4:	4686      	mov	lr, r0
 8016aa6:	4684      	mov	ip, r0
 8016aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016aaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ab0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ab6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016aba:	6823      	ldr	r3, [r4, #0]
 8016abc:	f8cc 3000 	str.w	r3, [ip]
 8016ac0:	4670      	mov	r0, lr
 8016ac2:	bd10      	pop	{r4, pc}
 8016ac4:	0801e190 	.word	0x0801e190

08016ac8 <rcl_wait_set_is_valid>:
 8016ac8:	b118      	cbz	r0, 8016ad2 <rcl_wait_set_is_valid+0xa>
 8016aca:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8016acc:	3800      	subs	r0, #0
 8016ace:	bf18      	it	ne
 8016ad0:	2001      	movne	r0, #1
 8016ad2:	4770      	bx	lr

08016ad4 <rcl_wait_set_fini>:
 8016ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ad8:	b082      	sub	sp, #8
 8016ada:	2800      	cmp	r0, #0
 8016adc:	f000 8095 	beq.w	8016c0a <rcl_wait_set_fini+0x136>
 8016ae0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8016ae2:	4604      	mov	r4, r0
 8016ae4:	2e00      	cmp	r6, #0
 8016ae6:	f000 808c 	beq.w	8016c02 <rcl_wait_set_fini+0x12e>
 8016aea:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8016aec:	f003 f9d0 	bl	8019e90 <rmw_destroy_wait_set>
 8016af0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016af2:	1e06      	subs	r6, r0, #0
 8016af4:	bf18      	it	ne
 8016af6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8016afa:	2d00      	cmp	r5, #0
 8016afc:	f000 8081 	beq.w	8016c02 <rcl_wait_set_fini+0x12e>
 8016b00:	6820      	ldr	r0, [r4, #0]
 8016b02:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016b06:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b08:	2700      	movs	r7, #0
 8016b0a:	6067      	str	r7, [r4, #4]
 8016b0c:	602f      	str	r7, [r5, #0]
 8016b0e:	b120      	cbz	r0, 8016b1a <rcl_wait_set_fini+0x46>
 8016b10:	9101      	str	r1, [sp, #4]
 8016b12:	47c0      	blx	r8
 8016b14:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b16:	9901      	ldr	r1, [sp, #4]
 8016b18:	6027      	str	r7, [r4, #0]
 8016b1a:	68a8      	ldr	r0, [r5, #8]
 8016b1c:	b120      	cbz	r0, 8016b28 <rcl_wait_set_fini+0x54>
 8016b1e:	47c0      	blx	r8
 8016b20:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b22:	2300      	movs	r3, #0
 8016b24:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016b28:	68a0      	ldr	r0, [r4, #8]
 8016b2a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016b2c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b2e:	f04f 0800 	mov.w	r8, #0
 8016b32:	f8c4 800c 	str.w	r8, [r4, #12]
 8016b36:	f8c5 800c 	str.w	r8, [r5, #12]
 8016b3a:	b128      	cbz	r0, 8016b48 <rcl_wait_set_fini+0x74>
 8016b3c:	47b8      	blx	r7
 8016b3e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b40:	f8c4 8008 	str.w	r8, [r4, #8]
 8016b44:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016b46:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b48:	6968      	ldr	r0, [r5, #20]
 8016b4a:	f04f 0800 	mov.w	r8, #0
 8016b4e:	f8c5 8010 	str.w	r8, [r5, #16]
 8016b52:	b128      	cbz	r0, 8016b60 <rcl_wait_set_fini+0x8c>
 8016b54:	47b8      	blx	r7
 8016b56:	f8c5 8014 	str.w	r8, [r5, #20]
 8016b5a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b5c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016b5e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b60:	6920      	ldr	r0, [r4, #16]
 8016b62:	f04f 0800 	mov.w	r8, #0
 8016b66:	f8c4 8014 	str.w	r8, [r4, #20]
 8016b6a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8016b6e:	b128      	cbz	r0, 8016b7c <rcl_wait_set_fini+0xa8>
 8016b70:	47b8      	blx	r7
 8016b72:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b74:	f8c4 8010 	str.w	r8, [r4, #16]
 8016b78:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016b7a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016b7c:	69a0      	ldr	r0, [r4, #24]
 8016b7e:	f04f 0800 	mov.w	r8, #0
 8016b82:	f8c4 801c 	str.w	r8, [r4, #28]
 8016b86:	f8c5 8018 	str.w	r8, [r5, #24]
 8016b8a:	b128      	cbz	r0, 8016b98 <rcl_wait_set_fini+0xc4>
 8016b8c:	9101      	str	r1, [sp, #4]
 8016b8e:	47b8      	blx	r7
 8016b90:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016b92:	9901      	ldr	r1, [sp, #4]
 8016b94:	f8c4 8018 	str.w	r8, [r4, #24]
 8016b98:	6a28      	ldr	r0, [r5, #32]
 8016b9a:	b120      	cbz	r0, 8016ba6 <rcl_wait_set_fini+0xd2>
 8016b9c:	47b8      	blx	r7
 8016b9e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8016ba6:	6a20      	ldr	r0, [r4, #32]
 8016ba8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016bac:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016bae:	2700      	movs	r7, #0
 8016bb0:	6267      	str	r7, [r4, #36]	@ 0x24
 8016bb2:	626f      	str	r7, [r5, #36]	@ 0x24
 8016bb4:	b120      	cbz	r0, 8016bc0 <rcl_wait_set_fini+0xec>
 8016bb6:	9101      	str	r1, [sp, #4]
 8016bb8:	47c0      	blx	r8
 8016bba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016bbc:	9901      	ldr	r1, [sp, #4]
 8016bbe:	6227      	str	r7, [r4, #32]
 8016bc0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8016bc2:	b120      	cbz	r0, 8016bce <rcl_wait_set_fini+0xfa>
 8016bc4:	47c0      	blx	r8
 8016bc6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016bc8:	2300      	movs	r3, #0
 8016bca:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8016bce:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016bd0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016bd4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016bd6:	2700      	movs	r7, #0
 8016bd8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8016bda:	632f      	str	r7, [r5, #48]	@ 0x30
 8016bdc:	b120      	cbz	r0, 8016be8 <rcl_wait_set_fini+0x114>
 8016bde:	9101      	str	r1, [sp, #4]
 8016be0:	47c0      	blx	r8
 8016be2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016be4:	9901      	ldr	r1, [sp, #4]
 8016be6:	62a7      	str	r7, [r4, #40]	@ 0x28
 8016be8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8016bea:	b120      	cbz	r0, 8016bf6 <rcl_wait_set_fini+0x122>
 8016bec:	47c0      	blx	r8
 8016bee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8016bf6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016bf8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016bfa:	4628      	mov	r0, r5
 8016bfc:	4798      	blx	r3
 8016bfe:	2300      	movs	r3, #0
 8016c00:	6323      	str	r3, [r4, #48]	@ 0x30
 8016c02:	4630      	mov	r0, r6
 8016c04:	b002      	add	sp, #8
 8016c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c0a:	260b      	movs	r6, #11
 8016c0c:	4630      	mov	r0, r6
 8016c0e:	b002      	add	sp, #8
 8016c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016c14 <rcl_wait_set_add_subscription>:
 8016c14:	b318      	cbz	r0, 8016c5e <rcl_wait_set_add_subscription+0x4a>
 8016c16:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016c18:	b570      	push	{r4, r5, r6, lr}
 8016c1a:	4604      	mov	r4, r0
 8016c1c:	b30b      	cbz	r3, 8016c62 <rcl_wait_set_add_subscription+0x4e>
 8016c1e:	b319      	cbz	r1, 8016c68 <rcl_wait_set_add_subscription+0x54>
 8016c20:	681d      	ldr	r5, [r3, #0]
 8016c22:	6840      	ldr	r0, [r0, #4]
 8016c24:	4285      	cmp	r5, r0
 8016c26:	d217      	bcs.n	8016c58 <rcl_wait_set_add_subscription+0x44>
 8016c28:	6820      	ldr	r0, [r4, #0]
 8016c2a:	1c6e      	adds	r6, r5, #1
 8016c2c:	601e      	str	r6, [r3, #0]
 8016c2e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016c32:	b102      	cbz	r2, 8016c36 <rcl_wait_set_add_subscription+0x22>
 8016c34:	6015      	str	r5, [r2, #0]
 8016c36:	4608      	mov	r0, r1
 8016c38:	f7ff fd7e 	bl	8016738 <rcl_subscription_get_rmw_handle>
 8016c3c:	b150      	cbz	r0, 8016c54 <rcl_wait_set_add_subscription+0x40>
 8016c3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c40:	6842      	ldr	r2, [r0, #4]
 8016c42:	689b      	ldr	r3, [r3, #8]
 8016c44:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016c48:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016c4a:	6853      	ldr	r3, [r2, #4]
 8016c4c:	3301      	adds	r3, #1
 8016c4e:	2000      	movs	r0, #0
 8016c50:	6053      	str	r3, [r2, #4]
 8016c52:	bd70      	pop	{r4, r5, r6, pc}
 8016c54:	2001      	movs	r0, #1
 8016c56:	bd70      	pop	{r4, r5, r6, pc}
 8016c58:	f240 3086 	movw	r0, #902	@ 0x386
 8016c5c:	bd70      	pop	{r4, r5, r6, pc}
 8016c5e:	200b      	movs	r0, #11
 8016c60:	4770      	bx	lr
 8016c62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016c66:	bd70      	pop	{r4, r5, r6, pc}
 8016c68:	200b      	movs	r0, #11
 8016c6a:	bd70      	pop	{r4, r5, r6, pc}

08016c6c <rcl_wait_set_clear>:
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	d073      	beq.n	8016d58 <rcl_wait_set_clear+0xec>
 8016c70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016c72:	b510      	push	{r4, lr}
 8016c74:	4604      	mov	r4, r0
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d070      	beq.n	8016d5c <rcl_wait_set_clear+0xf0>
 8016c7a:	6800      	ldr	r0, [r0, #0]
 8016c7c:	b138      	cbz	r0, 8016c8e <rcl_wait_set_clear+0x22>
 8016c7e:	6862      	ldr	r2, [r4, #4]
 8016c80:	2100      	movs	r1, #0
 8016c82:	0092      	lsls	r2, r2, #2
 8016c84:	f006 f820 	bl	801ccc8 <memset>
 8016c88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	601a      	str	r2, [r3, #0]
 8016c8e:	68a0      	ldr	r0, [r4, #8]
 8016c90:	b138      	cbz	r0, 8016ca2 <rcl_wait_set_clear+0x36>
 8016c92:	68e2      	ldr	r2, [r4, #12]
 8016c94:	2100      	movs	r1, #0
 8016c96:	0092      	lsls	r2, r2, #2
 8016c98:	f006 f816 	bl	801ccc8 <memset>
 8016c9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c9e:	2200      	movs	r2, #0
 8016ca0:	60da      	str	r2, [r3, #12]
 8016ca2:	69a0      	ldr	r0, [r4, #24]
 8016ca4:	b138      	cbz	r0, 8016cb6 <rcl_wait_set_clear+0x4a>
 8016ca6:	69e2      	ldr	r2, [r4, #28]
 8016ca8:	2100      	movs	r1, #0
 8016caa:	0092      	lsls	r2, r2, #2
 8016cac:	f006 f80c 	bl	801ccc8 <memset>
 8016cb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	619a      	str	r2, [r3, #24]
 8016cb6:	6a20      	ldr	r0, [r4, #32]
 8016cb8:	b138      	cbz	r0, 8016cca <rcl_wait_set_clear+0x5e>
 8016cba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016cbc:	2100      	movs	r1, #0
 8016cbe:	0092      	lsls	r2, r2, #2
 8016cc0:	f006 f802 	bl	801ccc8 <memset>
 8016cc4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8016cca:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016ccc:	b138      	cbz	r0, 8016cde <rcl_wait_set_clear+0x72>
 8016cce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8016cd0:	2100      	movs	r1, #0
 8016cd2:	0092      	lsls	r2, r2, #2
 8016cd4:	f005 fff8 	bl	801ccc8 <memset>
 8016cd8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016cda:	2200      	movs	r2, #0
 8016cdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8016cde:	6920      	ldr	r0, [r4, #16]
 8016ce0:	b138      	cbz	r0, 8016cf2 <rcl_wait_set_clear+0x86>
 8016ce2:	6962      	ldr	r2, [r4, #20]
 8016ce4:	2100      	movs	r1, #0
 8016ce6:	0092      	lsls	r2, r2, #2
 8016ce8:	f005 ffee 	bl	801ccc8 <memset>
 8016cec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016cee:	2200      	movs	r2, #0
 8016cf0:	641a      	str	r2, [r3, #64]	@ 0x40
 8016cf2:	6898      	ldr	r0, [r3, #8]
 8016cf4:	b138      	cbz	r0, 8016d06 <rcl_wait_set_clear+0x9a>
 8016cf6:	685a      	ldr	r2, [r3, #4]
 8016cf8:	2100      	movs	r1, #0
 8016cfa:	0092      	lsls	r2, r2, #2
 8016cfc:	f005 ffe4 	bl	801ccc8 <memset>
 8016d00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d02:	2200      	movs	r2, #0
 8016d04:	605a      	str	r2, [r3, #4]
 8016d06:	6958      	ldr	r0, [r3, #20]
 8016d08:	b138      	cbz	r0, 8016d1a <rcl_wait_set_clear+0xae>
 8016d0a:	691a      	ldr	r2, [r3, #16]
 8016d0c:	2100      	movs	r1, #0
 8016d0e:	0092      	lsls	r2, r2, #2
 8016d10:	f005 ffda 	bl	801ccc8 <memset>
 8016d14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d16:	2200      	movs	r2, #0
 8016d18:	611a      	str	r2, [r3, #16]
 8016d1a:	6a18      	ldr	r0, [r3, #32]
 8016d1c:	b138      	cbz	r0, 8016d2e <rcl_wait_set_clear+0xc2>
 8016d1e:	69da      	ldr	r2, [r3, #28]
 8016d20:	2100      	movs	r1, #0
 8016d22:	0092      	lsls	r2, r2, #2
 8016d24:	f005 ffd0 	bl	801ccc8 <memset>
 8016d28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	61da      	str	r2, [r3, #28]
 8016d2e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8016d30:	b138      	cbz	r0, 8016d42 <rcl_wait_set_clear+0xd6>
 8016d32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016d34:	2100      	movs	r1, #0
 8016d36:	0092      	lsls	r2, r2, #2
 8016d38:	f005 ffc6 	bl	801ccc8 <memset>
 8016d3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d3e:	2200      	movs	r2, #0
 8016d40:	629a      	str	r2, [r3, #40]	@ 0x28
 8016d42:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016d44:	b138      	cbz	r0, 8016d56 <rcl_wait_set_clear+0xea>
 8016d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016d48:	2100      	movs	r1, #0
 8016d4a:	0092      	lsls	r2, r2, #2
 8016d4c:	f005 ffbc 	bl	801ccc8 <memset>
 8016d50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d52:	2000      	movs	r0, #0
 8016d54:	6358      	str	r0, [r3, #52]	@ 0x34
 8016d56:	bd10      	pop	{r4, pc}
 8016d58:	200b      	movs	r0, #11
 8016d5a:	4770      	bx	lr
 8016d5c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016d60:	bd10      	pop	{r4, pc}
 8016d62:	bf00      	nop

08016d64 <rcl_wait_set_resize>:
 8016d64:	2800      	cmp	r0, #0
 8016d66:	f000 8185 	beq.w	8017074 <rcl_wait_set_resize+0x310>
 8016d6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d6e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8016d70:	b083      	sub	sp, #12
 8016d72:	4605      	mov	r5, r0
 8016d74:	2c00      	cmp	r4, #0
 8016d76:	f000 817f 	beq.w	8017078 <rcl_wait_set_resize+0x314>
 8016d7a:	f04f 0900 	mov.w	r9, #0
 8016d7e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8016d82:	461f      	mov	r7, r3
 8016d84:	4688      	mov	r8, r1
 8016d86:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8016d8a:	4616      	mov	r6, r2
 8016d8c:	f8c0 9004 	str.w	r9, [r0, #4]
 8016d90:	f8c4 9000 	str.w	r9, [r4]
 8016d94:	2900      	cmp	r1, #0
 8016d96:	f000 80bd 	beq.w	8016f14 <rcl_wait_set_resize+0x1b0>
 8016d9a:	008c      	lsls	r4, r1, #2
 8016d9c:	6800      	ldr	r0, [r0, #0]
 8016d9e:	9301      	str	r3, [sp, #4]
 8016da0:	4652      	mov	r2, sl
 8016da2:	4621      	mov	r1, r4
 8016da4:	4798      	blx	r3
 8016da6:	9b01      	ldr	r3, [sp, #4]
 8016da8:	6028      	str	r0, [r5, #0]
 8016daa:	2800      	cmp	r0, #0
 8016dac:	f000 80cb 	beq.w	8016f46 <rcl_wait_set_resize+0x1e2>
 8016db0:	4622      	mov	r2, r4
 8016db2:	4649      	mov	r1, r9
 8016db4:	9301      	str	r3, [sp, #4]
 8016db6:	f005 ff87 	bl	801ccc8 <memset>
 8016dba:	f8c5 8004 	str.w	r8, [r5, #4]
 8016dbe:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8016dc2:	9b01      	ldr	r3, [sp, #4]
 8016dc4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016dc8:	f8c8 9004 	str.w	r9, [r8, #4]
 8016dcc:	4652      	mov	r2, sl
 8016dce:	4621      	mov	r1, r4
 8016dd0:	4798      	blx	r3
 8016dd2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016dd4:	f8c8 0008 	str.w	r0, [r8, #8]
 8016dd8:	689b      	ldr	r3, [r3, #8]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	f000 80ac 	beq.w	8016f38 <rcl_wait_set_resize+0x1d4>
 8016de0:	4622      	mov	r2, r4
 8016de2:	4649      	mov	r1, r9
 8016de4:	4618      	mov	r0, r3
 8016de6:	f005 ff6f 	bl	801ccc8 <memset>
 8016dea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016dec:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016df0:	f04f 0800 	mov.w	r8, #0
 8016df4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8016df8:	f8c5 800c 	str.w	r8, [r5, #12]
 8016dfc:	f8c4 800c 	str.w	r8, [r4, #12]
 8016e00:	2e00      	cmp	r6, #0
 8016e02:	f040 80a4 	bne.w	8016f4e <rcl_wait_set_resize+0x1ea>
 8016e06:	68a8      	ldr	r0, [r5, #8]
 8016e08:	b128      	cbz	r0, 8016e16 <rcl_wait_set_resize+0xb2>
 8016e0a:	4649      	mov	r1, r9
 8016e0c:	4790      	blx	r2
 8016e0e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e10:	60ae      	str	r6, [r5, #8]
 8016e12:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016e16:	f04f 0800 	mov.w	r8, #0
 8016e1a:	19f6      	adds	r6, r6, r7
 8016e1c:	f8c4 8010 	str.w	r8, [r4, #16]
 8016e20:	f040 80ac 	bne.w	8016f7c <rcl_wait_set_resize+0x218>
 8016e24:	6960      	ldr	r0, [r4, #20]
 8016e26:	b130      	cbz	r0, 8016e36 <rcl_wait_set_resize+0xd2>
 8016e28:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8016e2a:	4649      	mov	r1, r9
 8016e2c:	4798      	blx	r3
 8016e2e:	6166      	str	r6, [r4, #20]
 8016e30:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e32:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016e36:	2600      	movs	r6, #0
 8016e38:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016e3c:	616e      	str	r6, [r5, #20]
 8016e3e:	6426      	str	r6, [r4, #64]	@ 0x40
 8016e40:	2f00      	cmp	r7, #0
 8016e42:	f040 80ad 	bne.w	8016fa0 <rcl_wait_set_resize+0x23c>
 8016e46:	6928      	ldr	r0, [r5, #16]
 8016e48:	b138      	cbz	r0, 8016e5a <rcl_wait_set_resize+0xf6>
 8016e4a:	4649      	mov	r1, r9
 8016e4c:	47d0      	blx	sl
 8016e4e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e50:	612f      	str	r7, [r5, #16]
 8016e52:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016e56:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016e5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016e5c:	2600      	movs	r6, #0
 8016e5e:	61ee      	str	r6, [r5, #28]
 8016e60:	61a6      	str	r6, [r4, #24]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	f040 80af 	bne.w	8016fc6 <rcl_wait_set_resize+0x262>
 8016e68:	69a8      	ldr	r0, [r5, #24]
 8016e6a:	b120      	cbz	r0, 8016e76 <rcl_wait_set_resize+0x112>
 8016e6c:	4649      	mov	r1, r9
 8016e6e:	47d0      	blx	sl
 8016e70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016e72:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e74:	61ab      	str	r3, [r5, #24]
 8016e76:	6a20      	ldr	r0, [r4, #32]
 8016e78:	b128      	cbz	r0, 8016e86 <rcl_wait_set_resize+0x122>
 8016e7a:	4649      	mov	r1, r9
 8016e7c:	47d0      	blx	sl
 8016e7e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016e80:	2300      	movs	r3, #0
 8016e82:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8016e86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016e88:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8016e8a:	2600      	movs	r6, #0
 8016e8c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016e90:	626e      	str	r6, [r5, #36]	@ 0x24
 8016e92:	6266      	str	r6, [r4, #36]	@ 0x24
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	f000 80b6 	beq.w	8017006 <rcl_wait_set_resize+0x2a2>
 8016e9a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8016e9e:	6a28      	ldr	r0, [r5, #32]
 8016ea0:	463a      	mov	r2, r7
 8016ea2:	4651      	mov	r1, sl
 8016ea4:	47c8      	blx	r9
 8016ea6:	6228      	str	r0, [r5, #32]
 8016ea8:	2800      	cmp	r0, #0
 8016eaa:	d04c      	beq.n	8016f46 <rcl_wait_set_resize+0x1e2>
 8016eac:	4652      	mov	r2, sl
 8016eae:	4631      	mov	r1, r6
 8016eb0:	f005 ff0a 	bl	801ccc8 <memset>
 8016eb4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016eb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016eb8:	626b      	str	r3, [r5, #36]	@ 0x24
 8016eba:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016ebc:	62a6      	str	r6, [r4, #40]	@ 0x28
 8016ebe:	463a      	mov	r2, r7
 8016ec0:	4651      	mov	r1, sl
 8016ec2:	47c8      	blx	r9
 8016ec4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016ec6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8016ec8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8016eca:	2c00      	cmp	r4, #0
 8016ecc:	f000 80f0 	beq.w	80170b0 <rcl_wait_set_resize+0x34c>
 8016ed0:	4620      	mov	r0, r4
 8016ed2:	4652      	mov	r2, sl
 8016ed4:	4631      	mov	r1, r6
 8016ed6:	f005 fef7 	bl	801ccc8 <memset>
 8016eda:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ede:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8016ee0:	2600      	movs	r6, #0
 8016ee2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016ee6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8016ee8:	6326      	str	r6, [r4, #48]	@ 0x30
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	f040 809d 	bne.w	801702a <rcl_wait_set_resize+0x2c6>
 8016ef0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016ef2:	b120      	cbz	r0, 8016efe <rcl_wait_set_resize+0x19a>
 8016ef4:	4639      	mov	r1, r7
 8016ef6:	47c0      	blx	r8
 8016ef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016efa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016efc:	62ab      	str	r3, [r5, #40]	@ 0x28
 8016efe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8016f00:	b310      	cbz	r0, 8016f48 <rcl_wait_set_resize+0x1e4>
 8016f02:	4639      	mov	r1, r7
 8016f04:	47c0      	blx	r8
 8016f06:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016f08:	2000      	movs	r0, #0
 8016f0a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8016f0e:	b003      	add	sp, #12
 8016f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f14:	6800      	ldr	r0, [r0, #0]
 8016f16:	b120      	cbz	r0, 8016f22 <rcl_wait_set_resize+0x1be>
 8016f18:	4651      	mov	r1, sl
 8016f1a:	47d8      	blx	fp
 8016f1c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f1e:	f8c5 8000 	str.w	r8, [r5]
 8016f22:	68a0      	ldr	r0, [r4, #8]
 8016f24:	2800      	cmp	r0, #0
 8016f26:	f43f af61 	beq.w	8016dec <rcl_wait_set_resize+0x88>
 8016f2a:	4651      	mov	r1, sl
 8016f2c:	47d8      	blx	fp
 8016f2e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f30:	2300      	movs	r3, #0
 8016f32:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8016f36:	e759      	b.n	8016dec <rcl_wait_set_resize+0x88>
 8016f38:	6828      	ldr	r0, [r5, #0]
 8016f3a:	9301      	str	r3, [sp, #4]
 8016f3c:	4651      	mov	r1, sl
 8016f3e:	47d8      	blx	fp
 8016f40:	9b01      	ldr	r3, [sp, #4]
 8016f42:	e9c5 3300 	strd	r3, r3, [r5]
 8016f46:	200a      	movs	r0, #10
 8016f48:	b003      	add	sp, #12
 8016f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f4e:	00b4      	lsls	r4, r6, #2
 8016f50:	68a8      	ldr	r0, [r5, #8]
 8016f52:	464a      	mov	r2, r9
 8016f54:	4621      	mov	r1, r4
 8016f56:	4798      	blx	r3
 8016f58:	60a8      	str	r0, [r5, #8]
 8016f5a:	2800      	cmp	r0, #0
 8016f5c:	d0f3      	beq.n	8016f46 <rcl_wait_set_resize+0x1e2>
 8016f5e:	4622      	mov	r2, r4
 8016f60:	4641      	mov	r1, r8
 8016f62:	f005 feb1 	bl	801ccc8 <memset>
 8016f66:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f68:	60ee      	str	r6, [r5, #12]
 8016f6a:	f04f 0800 	mov.w	r8, #0
 8016f6e:	19f6      	adds	r6, r6, r7
 8016f70:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016f74:	f8c4 8010 	str.w	r8, [r4, #16]
 8016f78:	f43f af54 	beq.w	8016e24 <rcl_wait_set_resize+0xc0>
 8016f7c:	00b6      	lsls	r6, r6, #2
 8016f7e:	464a      	mov	r2, r9
 8016f80:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8016f82:	6960      	ldr	r0, [r4, #20]
 8016f84:	4631      	mov	r1, r6
 8016f86:	4798      	blx	r3
 8016f88:	4681      	mov	r9, r0
 8016f8a:	6160      	str	r0, [r4, #20]
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	d076      	beq.n	801707e <rcl_wait_set_resize+0x31a>
 8016f90:	4632      	mov	r2, r6
 8016f92:	4641      	mov	r1, r8
 8016f94:	f005 fe98 	bl	801ccc8 <memset>
 8016f98:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016f9a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016f9e:	e74a      	b.n	8016e36 <rcl_wait_set_resize+0xd2>
 8016fa0:	00bc      	lsls	r4, r7, #2
 8016fa2:	6928      	ldr	r0, [r5, #16]
 8016fa4:	464a      	mov	r2, r9
 8016fa6:	4621      	mov	r1, r4
 8016fa8:	47c0      	blx	r8
 8016faa:	6128      	str	r0, [r5, #16]
 8016fac:	2800      	cmp	r0, #0
 8016fae:	d0ca      	beq.n	8016f46 <rcl_wait_set_resize+0x1e2>
 8016fb0:	4622      	mov	r2, r4
 8016fb2:	4631      	mov	r1, r6
 8016fb4:	f005 fe88 	bl	801ccc8 <memset>
 8016fb8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016fba:	616f      	str	r7, [r5, #20]
 8016fbc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016fc0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016fc4:	e749      	b.n	8016e5a <rcl_wait_set_resize+0xf6>
 8016fc6:	009c      	lsls	r4, r3, #2
 8016fc8:	69a8      	ldr	r0, [r5, #24]
 8016fca:	464a      	mov	r2, r9
 8016fcc:	4621      	mov	r1, r4
 8016fce:	47c0      	blx	r8
 8016fd0:	61a8      	str	r0, [r5, #24]
 8016fd2:	2800      	cmp	r0, #0
 8016fd4:	d0b7      	beq.n	8016f46 <rcl_wait_set_resize+0x1e2>
 8016fd6:	4622      	mov	r2, r4
 8016fd8:	4631      	mov	r1, r6
 8016fda:	f005 fe75 	bl	801ccc8 <memset>
 8016fde:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8016fe0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016fe2:	61eb      	str	r3, [r5, #28]
 8016fe4:	6a38      	ldr	r0, [r7, #32]
 8016fe6:	61fe      	str	r6, [r7, #28]
 8016fe8:	464a      	mov	r2, r9
 8016fea:	4621      	mov	r1, r4
 8016fec:	47c0      	blx	r8
 8016fee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016ff0:	6238      	str	r0, [r7, #32]
 8016ff2:	6a1f      	ldr	r7, [r3, #32]
 8016ff4:	2f00      	cmp	r7, #0
 8016ff6:	d054      	beq.n	80170a2 <rcl_wait_set_resize+0x33e>
 8016ff8:	4622      	mov	r2, r4
 8016ffa:	4631      	mov	r1, r6
 8016ffc:	4638      	mov	r0, r7
 8016ffe:	f005 fe63 	bl	801ccc8 <memset>
 8017002:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017004:	e73f      	b.n	8016e86 <rcl_wait_set_resize+0x122>
 8017006:	6a28      	ldr	r0, [r5, #32]
 8017008:	b120      	cbz	r0, 8017014 <rcl_wait_set_resize+0x2b0>
 801700a:	4639      	mov	r1, r7
 801700c:	47c0      	blx	r8
 801700e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017010:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017012:	622b      	str	r3, [r5, #32]
 8017014:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017016:	2800      	cmp	r0, #0
 8017018:	f43f af60 	beq.w	8016edc <rcl_wait_set_resize+0x178>
 801701c:	4639      	mov	r1, r7
 801701e:	47c0      	blx	r8
 8017020:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017022:	2300      	movs	r3, #0
 8017024:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8017028:	e758      	b.n	8016edc <rcl_wait_set_resize+0x178>
 801702a:	009c      	lsls	r4, r3, #2
 801702c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801702e:	463a      	mov	r2, r7
 8017030:	4621      	mov	r1, r4
 8017032:	47c8      	blx	r9
 8017034:	62a8      	str	r0, [r5, #40]	@ 0x28
 8017036:	2800      	cmp	r0, #0
 8017038:	d085      	beq.n	8016f46 <rcl_wait_set_resize+0x1e2>
 801703a:	4622      	mov	r2, r4
 801703c:	4631      	mov	r1, r6
 801703e:	f005 fe43 	bl	801ccc8 <memset>
 8017042:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8017046:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017048:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801704a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801704e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8017052:	463a      	mov	r2, r7
 8017054:	4621      	mov	r1, r4
 8017056:	47c8      	blx	r9
 8017058:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801705a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801705e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017060:	b36b      	cbz	r3, 80170be <rcl_wait_set_resize+0x35a>
 8017062:	4622      	mov	r2, r4
 8017064:	4631      	mov	r1, r6
 8017066:	4618      	mov	r0, r3
 8017068:	f005 fe2e 	bl	801ccc8 <memset>
 801706c:	4630      	mov	r0, r6
 801706e:	b003      	add	sp, #12
 8017070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017074:	200b      	movs	r0, #11
 8017076:	4770      	bx	lr
 8017078:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801707c:	e764      	b.n	8016f48 <rcl_wait_set_resize+0x1e4>
 801707e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017080:	68a8      	ldr	r0, [r5, #8]
 8017082:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017086:	4798      	blx	r3
 8017088:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801708a:	6928      	ldr	r0, [r5, #16]
 801708c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801708e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017090:	f8c5 900c 	str.w	r9, [r5, #12]
 8017094:	f8c5 9008 	str.w	r9, [r5, #8]
 8017098:	4790      	blx	r2
 801709a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801709e:	200a      	movs	r0, #10
 80170a0:	e752      	b.n	8016f48 <rcl_wait_set_resize+0x1e4>
 80170a2:	69a8      	ldr	r0, [r5, #24]
 80170a4:	4649      	mov	r1, r9
 80170a6:	47d0      	blx	sl
 80170a8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80170ac:	200a      	movs	r0, #10
 80170ae:	e74b      	b.n	8016f48 <rcl_wait_set_resize+0x1e4>
 80170b0:	6a28      	ldr	r0, [r5, #32]
 80170b2:	4639      	mov	r1, r7
 80170b4:	47c0      	blx	r8
 80170b6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80170ba:	200a      	movs	r0, #10
 80170bc:	e744      	b.n	8016f48 <rcl_wait_set_resize+0x1e4>
 80170be:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80170c0:	9301      	str	r3, [sp, #4]
 80170c2:	4639      	mov	r1, r7
 80170c4:	47c0      	blx	r8
 80170c6:	9b01      	ldr	r3, [sp, #4]
 80170c8:	200a      	movs	r0, #10
 80170ca:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80170ce:	e73b      	b.n	8016f48 <rcl_wait_set_resize+0x1e4>

080170d0 <rcl_wait_set_init>:
 80170d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170d4:	b084      	sub	sp, #16
 80170d6:	4604      	mov	r4, r0
 80170d8:	a810      	add	r0, sp, #64	@ 0x40
 80170da:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80170de:	460f      	mov	r7, r1
 80170e0:	4690      	mov	r8, r2
 80170e2:	4699      	mov	r9, r3
 80170e4:	f7f9 fedc 	bl	8010ea0 <rcutils_allocator_is_valid>
 80170e8:	2800      	cmp	r0, #0
 80170ea:	d06b      	beq.n	80171c4 <rcl_wait_set_init+0xf4>
 80170ec:	2c00      	cmp	r4, #0
 80170ee:	d069      	beq.n	80171c4 <rcl_wait_set_init+0xf4>
 80170f0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80170f2:	b125      	cbz	r5, 80170fe <rcl_wait_set_init+0x2e>
 80170f4:	2564      	movs	r5, #100	@ 0x64
 80170f6:	4628      	mov	r0, r5
 80170f8:	b004      	add	sp, #16
 80170fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170fe:	f1ba 0f00 	cmp.w	sl, #0
 8017102:	d05f      	beq.n	80171c4 <rcl_wait_set_init+0xf4>
 8017104:	4650      	mov	r0, sl
 8017106:	f7fe fcbb 	bl	8015a80 <rcl_context_is_valid>
 801710a:	2800      	cmp	r0, #0
 801710c:	d067      	beq.n	80171de <rcl_wait_set_init+0x10e>
 801710e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017110:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8017112:	205c      	movs	r0, #92	@ 0x5c
 8017114:	4798      	blx	r3
 8017116:	6320      	str	r0, [r4, #48]	@ 0x30
 8017118:	2800      	cmp	r0, #0
 801711a:	d062      	beq.n	80171e2 <rcl_wait_set_init+0x112>
 801711c:	4629      	mov	r1, r5
 801711e:	225c      	movs	r2, #92	@ 0x5c
 8017120:	f005 fdd2 	bl	801ccc8 <memset>
 8017124:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8017128:	eb03 0e02 	add.w	lr, r3, r2
 801712c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801712e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8017130:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8017134:	449e      	add	lr, r3
 8017136:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801713a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801713e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8017142:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8017146:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801714a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801714e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8017152:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8017156:	f8da a000 	ldr.w	sl, [sl]
 801715a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801715c:	44c6      	add	lr, r8
 801715e:	f8dc 3000 	ldr.w	r3, [ip]
 8017162:	602b      	str	r3, [r5, #0]
 8017164:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8017168:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801716c:	f002 fe86 	bl	8019e7c <rmw_create_wait_set>
 8017170:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017172:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8017174:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017176:	b350      	cbz	r0, 80171ce <rcl_wait_set_init+0xfe>
 8017178:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801717a:	9302      	str	r3, [sp, #8]
 801717c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801717e:	9301      	str	r3, [sp, #4]
 8017180:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017182:	9300      	str	r3, [sp, #0]
 8017184:	4642      	mov	r2, r8
 8017186:	464b      	mov	r3, r9
 8017188:	4639      	mov	r1, r7
 801718a:	4620      	mov	r0, r4
 801718c:	f7ff fdea 	bl	8016d64 <rcl_wait_set_resize>
 8017190:	4605      	mov	r5, r0
 8017192:	2800      	cmp	r0, #0
 8017194:	d0af      	beq.n	80170f6 <rcl_wait_set_init+0x26>
 8017196:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017198:	bb2b      	cbnz	r3, 80171e6 <rcl_wait_set_init+0x116>
 801719a:	2600      	movs	r6, #0
 801719c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80171a0:	9600      	str	r6, [sp, #0]
 80171a2:	4633      	mov	r3, r6
 80171a4:	4632      	mov	r2, r6
 80171a6:	4631      	mov	r1, r6
 80171a8:	4620      	mov	r0, r4
 80171aa:	f7ff fddb 	bl	8016d64 <rcl_wait_set_resize>
 80171ae:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80171b0:	2800      	cmp	r0, #0
 80171b2:	d0a0      	beq.n	80170f6 <rcl_wait_set_init+0x26>
 80171b4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80171b6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80171b8:	4798      	blx	r3
 80171ba:	4628      	mov	r0, r5
 80171bc:	6326      	str	r6, [r4, #48]	@ 0x30
 80171be:	b004      	add	sp, #16
 80171c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171c4:	250b      	movs	r5, #11
 80171c6:	4628      	mov	r0, r5
 80171c8:	b004      	add	sp, #16
 80171ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171ce:	2501      	movs	r5, #1
 80171d0:	f002 fe5e 	bl	8019e90 <rmw_destroy_wait_set>
 80171d4:	2800      	cmp	r0, #0
 80171d6:	bf18      	it	ne
 80171d8:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80171dc:	e7dd      	b.n	801719a <rcl_wait_set_init+0xca>
 80171de:	2565      	movs	r5, #101	@ 0x65
 80171e0:	e789      	b.n	80170f6 <rcl_wait_set_init+0x26>
 80171e2:	250a      	movs	r5, #10
 80171e4:	e787      	b.n	80170f6 <rcl_wait_set_init+0x26>
 80171e6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80171e8:	e7f2      	b.n	80171d0 <rcl_wait_set_init+0x100>
 80171ea:	bf00      	nop

080171ec <rcl_wait_set_add_guard_condition>:
 80171ec:	b318      	cbz	r0, 8017236 <rcl_wait_set_add_guard_condition+0x4a>
 80171ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80171f0:	b570      	push	{r4, r5, r6, lr}
 80171f2:	4604      	mov	r4, r0
 80171f4:	b30b      	cbz	r3, 801723a <rcl_wait_set_add_guard_condition+0x4e>
 80171f6:	b319      	cbz	r1, 8017240 <rcl_wait_set_add_guard_condition+0x54>
 80171f8:	68dd      	ldr	r5, [r3, #12]
 80171fa:	68c0      	ldr	r0, [r0, #12]
 80171fc:	4285      	cmp	r5, r0
 80171fe:	d217      	bcs.n	8017230 <rcl_wait_set_add_guard_condition+0x44>
 8017200:	68a0      	ldr	r0, [r4, #8]
 8017202:	1c6e      	adds	r6, r5, #1
 8017204:	60de      	str	r6, [r3, #12]
 8017206:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801720a:	b102      	cbz	r2, 801720e <rcl_wait_set_add_guard_condition+0x22>
 801720c:	6015      	str	r5, [r2, #0]
 801720e:	4608      	mov	r0, r1
 8017210:	f004 fe60 	bl	801bed4 <rcl_guard_condition_get_rmw_handle>
 8017214:	b150      	cbz	r0, 801722c <rcl_wait_set_add_guard_condition+0x40>
 8017216:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017218:	6842      	ldr	r2, [r0, #4]
 801721a:	695b      	ldr	r3, [r3, #20]
 801721c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017220:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017222:	6913      	ldr	r3, [r2, #16]
 8017224:	3301      	adds	r3, #1
 8017226:	2000      	movs	r0, #0
 8017228:	6113      	str	r3, [r2, #16]
 801722a:	bd70      	pop	{r4, r5, r6, pc}
 801722c:	2001      	movs	r0, #1
 801722e:	bd70      	pop	{r4, r5, r6, pc}
 8017230:	f240 3086 	movw	r0, #902	@ 0x386
 8017234:	bd70      	pop	{r4, r5, r6, pc}
 8017236:	200b      	movs	r0, #11
 8017238:	4770      	bx	lr
 801723a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801723e:	bd70      	pop	{r4, r5, r6, pc}
 8017240:	200b      	movs	r0, #11
 8017242:	bd70      	pop	{r4, r5, r6, pc}

08017244 <rcl_wait_set_add_timer>:
 8017244:	b328      	cbz	r0, 8017292 <rcl_wait_set_add_timer+0x4e>
 8017246:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017248:	b570      	push	{r4, r5, r6, lr}
 801724a:	4604      	mov	r4, r0
 801724c:	b31b      	cbz	r3, 8017296 <rcl_wait_set_add_timer+0x52>
 801724e:	b329      	cbz	r1, 801729c <rcl_wait_set_add_timer+0x58>
 8017250:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8017252:	6965      	ldr	r5, [r4, #20]
 8017254:	42a8      	cmp	r0, r5
 8017256:	d219      	bcs.n	801728c <rcl_wait_set_add_timer+0x48>
 8017258:	6925      	ldr	r5, [r4, #16]
 801725a:	1c46      	adds	r6, r0, #1
 801725c:	641e      	str	r6, [r3, #64]	@ 0x40
 801725e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8017262:	b102      	cbz	r2, 8017266 <rcl_wait_set_add_timer+0x22>
 8017264:	6010      	str	r0, [r2, #0]
 8017266:	4608      	mov	r0, r1
 8017268:	f7ff fc10 	bl	8016a8c <rcl_timer_get_guard_condition>
 801726c:	b168      	cbz	r0, 801728a <rcl_wait_set_add_timer+0x46>
 801726e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017270:	68e3      	ldr	r3, [r4, #12]
 8017272:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8017274:	3b01      	subs	r3, #1
 8017276:	441d      	add	r5, r3
 8017278:	f004 fe2c 	bl	801bed4 <rcl_guard_condition_get_rmw_handle>
 801727c:	b180      	cbz	r0, 80172a0 <rcl_wait_set_add_timer+0x5c>
 801727e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017280:	6842      	ldr	r2, [r0, #4]
 8017282:	695b      	ldr	r3, [r3, #20]
 8017284:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017288:	2000      	movs	r0, #0
 801728a:	bd70      	pop	{r4, r5, r6, pc}
 801728c:	f240 3086 	movw	r0, #902	@ 0x386
 8017290:	bd70      	pop	{r4, r5, r6, pc}
 8017292:	200b      	movs	r0, #11
 8017294:	4770      	bx	lr
 8017296:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801729a:	bd70      	pop	{r4, r5, r6, pc}
 801729c:	200b      	movs	r0, #11
 801729e:	bd70      	pop	{r4, r5, r6, pc}
 80172a0:	2001      	movs	r0, #1
 80172a2:	bd70      	pop	{r4, r5, r6, pc}

080172a4 <rcl_wait_set_add_client>:
 80172a4:	b318      	cbz	r0, 80172ee <rcl_wait_set_add_client+0x4a>
 80172a6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80172a8:	b570      	push	{r4, r5, r6, lr}
 80172aa:	4604      	mov	r4, r0
 80172ac:	b30b      	cbz	r3, 80172f2 <rcl_wait_set_add_client+0x4e>
 80172ae:	b319      	cbz	r1, 80172f8 <rcl_wait_set_add_client+0x54>
 80172b0:	699d      	ldr	r5, [r3, #24]
 80172b2:	69c0      	ldr	r0, [r0, #28]
 80172b4:	4285      	cmp	r5, r0
 80172b6:	d217      	bcs.n	80172e8 <rcl_wait_set_add_client+0x44>
 80172b8:	69a0      	ldr	r0, [r4, #24]
 80172ba:	1c6e      	adds	r6, r5, #1
 80172bc:	619e      	str	r6, [r3, #24]
 80172be:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80172c2:	b102      	cbz	r2, 80172c6 <rcl_wait_set_add_client+0x22>
 80172c4:	6015      	str	r5, [r2, #0]
 80172c6:	4608      	mov	r0, r1
 80172c8:	f7fe fb2e 	bl	8015928 <rcl_client_get_rmw_handle>
 80172cc:	b150      	cbz	r0, 80172e4 <rcl_wait_set_add_client+0x40>
 80172ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80172d0:	6842      	ldr	r2, [r0, #4]
 80172d2:	6a1b      	ldr	r3, [r3, #32]
 80172d4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80172d8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80172da:	69d3      	ldr	r3, [r2, #28]
 80172dc:	3301      	adds	r3, #1
 80172de:	2000      	movs	r0, #0
 80172e0:	61d3      	str	r3, [r2, #28]
 80172e2:	bd70      	pop	{r4, r5, r6, pc}
 80172e4:	2001      	movs	r0, #1
 80172e6:	bd70      	pop	{r4, r5, r6, pc}
 80172e8:	f240 3086 	movw	r0, #902	@ 0x386
 80172ec:	bd70      	pop	{r4, r5, r6, pc}
 80172ee:	200b      	movs	r0, #11
 80172f0:	4770      	bx	lr
 80172f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80172f6:	bd70      	pop	{r4, r5, r6, pc}
 80172f8:	200b      	movs	r0, #11
 80172fa:	bd70      	pop	{r4, r5, r6, pc}

080172fc <rcl_wait_set_add_service>:
 80172fc:	b318      	cbz	r0, 8017346 <rcl_wait_set_add_service+0x4a>
 80172fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017300:	b570      	push	{r4, r5, r6, lr}
 8017302:	4604      	mov	r4, r0
 8017304:	b30b      	cbz	r3, 801734a <rcl_wait_set_add_service+0x4e>
 8017306:	b319      	cbz	r1, 8017350 <rcl_wait_set_add_service+0x54>
 8017308:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801730a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801730c:	4285      	cmp	r5, r0
 801730e:	d217      	bcs.n	8017340 <rcl_wait_set_add_service+0x44>
 8017310:	6a20      	ldr	r0, [r4, #32]
 8017312:	1c6e      	adds	r6, r5, #1
 8017314:	625e      	str	r6, [r3, #36]	@ 0x24
 8017316:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801731a:	b102      	cbz	r2, 801731e <rcl_wait_set_add_service+0x22>
 801731c:	6015      	str	r5, [r2, #0]
 801731e:	4608      	mov	r0, r1
 8017320:	f7ff f86e 	bl	8016400 <rcl_service_get_rmw_handle>
 8017324:	b150      	cbz	r0, 801733c <rcl_wait_set_add_service+0x40>
 8017326:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017328:	6842      	ldr	r2, [r0, #4]
 801732a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801732c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017330:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017332:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8017334:	3301      	adds	r3, #1
 8017336:	2000      	movs	r0, #0
 8017338:	6293      	str	r3, [r2, #40]	@ 0x28
 801733a:	bd70      	pop	{r4, r5, r6, pc}
 801733c:	2001      	movs	r0, #1
 801733e:	bd70      	pop	{r4, r5, r6, pc}
 8017340:	f240 3086 	movw	r0, #902	@ 0x386
 8017344:	bd70      	pop	{r4, r5, r6, pc}
 8017346:	200b      	movs	r0, #11
 8017348:	4770      	bx	lr
 801734a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801734e:	bd70      	pop	{r4, r5, r6, pc}
 8017350:	200b      	movs	r0, #11
 8017352:	bd70      	pop	{r4, r5, r6, pc}
 8017354:	0000      	movs	r0, r0
	...

08017358 <rcl_wait>:
 8017358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801735c:	ed2d 8b02 	vpush	{d8}
 8017360:	b08d      	sub	sp, #52	@ 0x34
 8017362:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017366:	2800      	cmp	r0, #0
 8017368:	f000 8143 	beq.w	80175f2 <rcl_wait+0x29a>
 801736c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801736e:	4605      	mov	r5, r0
 8017370:	2e00      	cmp	r6, #0
 8017372:	f000 8112 	beq.w	801759a <rcl_wait+0x242>
 8017376:	6843      	ldr	r3, [r0, #4]
 8017378:	b983      	cbnz	r3, 801739c <rcl_wait+0x44>
 801737a:	68eb      	ldr	r3, [r5, #12]
 801737c:	b973      	cbnz	r3, 801739c <rcl_wait+0x44>
 801737e:	696b      	ldr	r3, [r5, #20]
 8017380:	b963      	cbnz	r3, 801739c <rcl_wait+0x44>
 8017382:	69eb      	ldr	r3, [r5, #28]
 8017384:	b953      	cbnz	r3, 801739c <rcl_wait+0x44>
 8017386:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8017388:	b943      	cbnz	r3, 801739c <rcl_wait+0x44>
 801738a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801738c:	b933      	cbnz	r3, 801739c <rcl_wait+0x44>
 801738e:	f240 3085 	movw	r0, #901	@ 0x385
 8017392:	b00d      	add	sp, #52	@ 0x34
 8017394:	ecbd 8b02 	vpop	{d8}
 8017398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801739c:	9b04      	ldr	r3, [sp, #16]
 801739e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80173a0:	2b01      	cmp	r3, #1
 80173a2:	9b05      	ldr	r3, [sp, #20]
 80173a4:	f173 0300 	sbcs.w	r3, r3, #0
 80173a8:	f2c0 80f0 	blt.w	801758c <rcl_wait+0x234>
 80173ac:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80173b0:	4643      	mov	r3, r8
 80173b2:	2a00      	cmp	r2, #0
 80173b4:	f000 8133 	beq.w	801761e <rcl_wait+0x2c6>
 80173b8:	2400      	movs	r4, #0
 80173ba:	4613      	mov	r3, r2
 80173bc:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8017630 <rcl_wait+0x2d8>
 80173c0:	46a2      	mov	sl, r4
 80173c2:	46a3      	mov	fp, r4
 80173c4:	f240 3921 	movw	r9, #801	@ 0x321
 80173c8:	4632      	mov	r2, r6
 80173ca:	e014      	b.n	80173f6 <rcl_wait+0x9e>
 80173cc:	2800      	cmp	r0, #0
 80173ce:	d1e0      	bne.n	8017392 <rcl_wait+0x3a>
 80173d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80173d4:	4542      	cmp	r2, r8
 80173d6:	eb73 0107 	sbcs.w	r1, r3, r7
 80173da:	da03      	bge.n	80173e4 <rcl_wait+0x8c>
 80173dc:	4690      	mov	r8, r2
 80173de:	461f      	mov	r7, r3
 80173e0:	f04f 0b01 	mov.w	fp, #1
 80173e4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80173e6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80173e8:	3401      	adds	r4, #1
 80173ea:	f14a 0a00 	adc.w	sl, sl, #0
 80173ee:	429c      	cmp	r4, r3
 80173f0:	f17a 0100 	sbcs.w	r1, sl, #0
 80173f4:	d228      	bcs.n	8017448 <rcl_wait+0xf0>
 80173f6:	6928      	ldr	r0, [r5, #16]
 80173f8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80173fc:	a908      	add	r1, sp, #32
 80173fe:	00a6      	lsls	r6, r4, #2
 8017400:	2800      	cmp	r0, #0
 8017402:	d0f1      	beq.n	80173e8 <rcl_wait+0x90>
 8017404:	68eb      	ldr	r3, [r5, #12]
 8017406:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801740a:	4423      	add	r3, r4
 801740c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8017410:	f1be 0f00 	cmp.w	lr, #0
 8017414:	d006      	beq.n	8017424 <rcl_wait+0xcc>
 8017416:	6913      	ldr	r3, [r2, #16]
 8017418:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801741c:	3301      	adds	r3, #1
 801741e:	6113      	str	r3, [r2, #16]
 8017420:	692b      	ldr	r3, [r5, #16]
 8017422:	5998      	ldr	r0, [r3, r6]
 8017424:	ed8d 8b08 	vstr	d8, [sp, #32]
 8017428:	f7ff fafe 	bl	8016a28 <rcl_timer_get_time_until_next_call>
 801742c:	4548      	cmp	r0, r9
 801742e:	d1cd      	bne.n	80173cc <rcl_wait+0x74>
 8017430:	692b      	ldr	r3, [r5, #16]
 8017432:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017434:	2100      	movs	r1, #0
 8017436:	5199      	str	r1, [r3, r6]
 8017438:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801743a:	3401      	adds	r4, #1
 801743c:	f14a 0a00 	adc.w	sl, sl, #0
 8017440:	429c      	cmp	r4, r3
 8017442:	f17a 0100 	sbcs.w	r1, sl, #0
 8017446:	d3d6      	bcc.n	80173f6 <rcl_wait+0x9e>
 8017448:	4616      	mov	r6, r2
 801744a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801744e:	4313      	orrs	r3, r2
 8017450:	46d9      	mov	r9, fp
 8017452:	f040 80a9 	bne.w	80175a8 <rcl_wait+0x250>
 8017456:	2300      	movs	r3, #0
 8017458:	2200      	movs	r2, #0
 801745a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801745e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8017462:	ab08      	add	r3, sp, #32
 8017464:	9302      	str	r3, [sp, #8]
 8017466:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8017468:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801746c:	e9cd 3200 	strd	r3, r2, [sp]
 8017470:	f106 0110 	add.w	r1, r6, #16
 8017474:	f106 031c 	add.w	r3, r6, #28
 8017478:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801747c:	1d30      	adds	r0, r6, #4
 801747e:	f002 fb85 	bl	8019b8c <rmw_wait>
 8017482:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017484:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017486:	4680      	mov	r8, r0
 8017488:	b1ca      	cbz	r2, 80174be <rcl_wait+0x166>
 801748a:	2400      	movs	r4, #0
 801748c:	4627      	mov	r7, r4
 801748e:	692a      	ldr	r2, [r5, #16]
 8017490:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8017494:	f10d 011f 	add.w	r1, sp, #31
 8017498:	00a6      	lsls	r6, r4, #2
 801749a:	b160      	cbz	r0, 80174b6 <rcl_wait+0x15e>
 801749c:	f88d 701f 	strb.w	r7, [sp, #31]
 80174a0:	f7ff fa88 	bl	80169b4 <rcl_timer_is_ready>
 80174a4:	2800      	cmp	r0, #0
 80174a6:	f47f af74 	bne.w	8017392 <rcl_wait+0x3a>
 80174aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80174ae:	b90b      	cbnz	r3, 80174b4 <rcl_wait+0x15c>
 80174b0:	692a      	ldr	r2, [r5, #16]
 80174b2:	5193      	str	r3, [r2, r6]
 80174b4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80174b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80174b8:	3401      	adds	r4, #1
 80174ba:	42a2      	cmp	r2, r4
 80174bc:	d8e7      	bhi.n	801748e <rcl_wait+0x136>
 80174be:	f038 0002 	bics.w	r0, r8, #2
 80174c2:	f040 8090 	bne.w	80175e6 <rcl_wait+0x28e>
 80174c6:	686e      	ldr	r6, [r5, #4]
 80174c8:	4602      	mov	r2, r0
 80174ca:	b91e      	cbnz	r6, 80174d4 <rcl_wait+0x17c>
 80174cc:	e00d      	b.n	80174ea <rcl_wait+0x192>
 80174ce:	3201      	adds	r2, #1
 80174d0:	42b2      	cmp	r2, r6
 80174d2:	d00a      	beq.n	80174ea <rcl_wait+0x192>
 80174d4:	6899      	ldr	r1, [r3, #8]
 80174d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80174da:	2900      	cmp	r1, #0
 80174dc:	d1f7      	bne.n	80174ce <rcl_wait+0x176>
 80174de:	682c      	ldr	r4, [r5, #0]
 80174e0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80174e4:	3201      	adds	r2, #1
 80174e6:	42b2      	cmp	r2, r6
 80174e8:	d1f4      	bne.n	80174d4 <rcl_wait+0x17c>
 80174ea:	68ee      	ldr	r6, [r5, #12]
 80174ec:	2200      	movs	r2, #0
 80174ee:	b91e      	cbnz	r6, 80174f8 <rcl_wait+0x1a0>
 80174f0:	e00d      	b.n	801750e <rcl_wait+0x1b6>
 80174f2:	3201      	adds	r2, #1
 80174f4:	42b2      	cmp	r2, r6
 80174f6:	d00a      	beq.n	801750e <rcl_wait+0x1b6>
 80174f8:	6959      	ldr	r1, [r3, #20]
 80174fa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80174fe:	2900      	cmp	r1, #0
 8017500:	d1f7      	bne.n	80174f2 <rcl_wait+0x19a>
 8017502:	68ac      	ldr	r4, [r5, #8]
 8017504:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017508:	3201      	adds	r2, #1
 801750a:	42b2      	cmp	r2, r6
 801750c:	d1f4      	bne.n	80174f8 <rcl_wait+0x1a0>
 801750e:	69ee      	ldr	r6, [r5, #28]
 8017510:	2200      	movs	r2, #0
 8017512:	b91e      	cbnz	r6, 801751c <rcl_wait+0x1c4>
 8017514:	e00d      	b.n	8017532 <rcl_wait+0x1da>
 8017516:	3201      	adds	r2, #1
 8017518:	42b2      	cmp	r2, r6
 801751a:	d00a      	beq.n	8017532 <rcl_wait+0x1da>
 801751c:	6a19      	ldr	r1, [r3, #32]
 801751e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017522:	2900      	cmp	r1, #0
 8017524:	d1f7      	bne.n	8017516 <rcl_wait+0x1be>
 8017526:	69ac      	ldr	r4, [r5, #24]
 8017528:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801752c:	3201      	adds	r2, #1
 801752e:	42b2      	cmp	r2, r6
 8017530:	d1f4      	bne.n	801751c <rcl_wait+0x1c4>
 8017532:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8017534:	2200      	movs	r2, #0
 8017536:	b91e      	cbnz	r6, 8017540 <rcl_wait+0x1e8>
 8017538:	e00d      	b.n	8017556 <rcl_wait+0x1fe>
 801753a:	3201      	adds	r2, #1
 801753c:	4296      	cmp	r6, r2
 801753e:	d00a      	beq.n	8017556 <rcl_wait+0x1fe>
 8017540:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8017542:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017546:	2900      	cmp	r1, #0
 8017548:	d1f7      	bne.n	801753a <rcl_wait+0x1e2>
 801754a:	6a2c      	ldr	r4, [r5, #32]
 801754c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017550:	3201      	adds	r2, #1
 8017552:	4296      	cmp	r6, r2
 8017554:	d1f4      	bne.n	8017540 <rcl_wait+0x1e8>
 8017556:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8017558:	2200      	movs	r2, #0
 801755a:	b91e      	cbnz	r6, 8017564 <rcl_wait+0x20c>
 801755c:	e00d      	b.n	801757a <rcl_wait+0x222>
 801755e:	3201      	adds	r2, #1
 8017560:	42b2      	cmp	r2, r6
 8017562:	d00a      	beq.n	801757a <rcl_wait+0x222>
 8017564:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8017566:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801756a:	2900      	cmp	r1, #0
 801756c:	d1f7      	bne.n	801755e <rcl_wait+0x206>
 801756e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8017570:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017574:	3201      	adds	r2, #1
 8017576:	42b2      	cmp	r2, r6
 8017578:	d1f4      	bne.n	8017564 <rcl_wait+0x20c>
 801757a:	f1b8 0f02 	cmp.w	r8, #2
 801757e:	f47f af08 	bne.w	8017392 <rcl_wait+0x3a>
 8017582:	464b      	mov	r3, r9
 8017584:	2b00      	cmp	r3, #0
 8017586:	bf08      	it	eq
 8017588:	2002      	moveq	r0, #2
 801758a:	e702      	b.n	8017392 <rcl_wait+0x3a>
 801758c:	2a00      	cmp	r2, #0
 801758e:	d03a      	beq.n	8017606 <rcl_wait+0x2ae>
 8017590:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017594:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017598:	e70e      	b.n	80173b8 <rcl_wait+0x60>
 801759a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801759e:	b00d      	add	sp, #52	@ 0x34
 80175a0:	ecbd 8b02 	vpop	{d8}
 80175a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175a8:	9b04      	ldr	r3, [sp, #16]
 80175aa:	2b01      	cmp	r3, #1
 80175ac:	9b05      	ldr	r3, [sp, #20]
 80175ae:	f173 0300 	sbcs.w	r3, r3, #0
 80175b2:	db24      	blt.n	80175fe <rcl_wait+0x2a6>
 80175b4:	2f00      	cmp	r7, #0
 80175b6:	bfbc      	itt	lt
 80175b8:	f04f 0800 	movlt.w	r8, #0
 80175bc:	4647      	movlt	r7, r8
 80175be:	a31e      	add	r3, pc, #120	@ (adr r3, 8017638 <rcl_wait+0x2e0>)
 80175c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175c4:	4640      	mov	r0, r8
 80175c6:	4639      	mov	r1, r7
 80175c8:	f7e8 fe6a 	bl	80002a0 <__aeabi_ldivmod>
 80175cc:	a31a      	add	r3, pc, #104	@ (adr r3, 8017638 <rcl_wait+0x2e0>)
 80175ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80175d6:	4640      	mov	r0, r8
 80175d8:	4639      	mov	r1, r7
 80175da:	f7e8 fe61 	bl	80002a0 <__aeabi_ldivmod>
 80175de:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80175e2:	ab08      	add	r3, sp, #32
 80175e4:	e73e      	b.n	8017464 <rcl_wait+0x10c>
 80175e6:	2001      	movs	r0, #1
 80175e8:	b00d      	add	sp, #52	@ 0x34
 80175ea:	ecbd 8b02 	vpop	{d8}
 80175ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175f2:	200b      	movs	r0, #11
 80175f4:	b00d      	add	sp, #52	@ 0x34
 80175f6:	ecbd 8b02 	vpop	{d8}
 80175fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175fe:	465b      	mov	r3, fp
 8017600:	2b00      	cmp	r3, #0
 8017602:	d1d7      	bne.n	80175b4 <rcl_wait+0x25c>
 8017604:	e72e      	b.n	8017464 <rcl_wait+0x10c>
 8017606:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801760a:	430b      	orrs	r3, r1
 801760c:	bf08      	it	eq
 801760e:	4691      	moveq	r9, r2
 8017610:	f43f af21 	beq.w	8017456 <rcl_wait+0xfe>
 8017614:	9b04      	ldr	r3, [sp, #16]
 8017616:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801761a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801761e:	2b01      	cmp	r3, #1
 8017620:	9b05      	ldr	r3, [sp, #20]
 8017622:	f173 0300 	sbcs.w	r3, r3, #0
 8017626:	f04f 0300 	mov.w	r3, #0
 801762a:	4699      	mov	r9, r3
 801762c:	dac2      	bge.n	80175b4 <rcl_wait+0x25c>
 801762e:	e719      	b.n	8017464 <rcl_wait+0x10c>
 8017630:	ffffffff 	.word	0xffffffff
 8017634:	7fffffff 	.word	0x7fffffff
 8017638:	3b9aca00 	.word	0x3b9aca00
 801763c:	00000000 	.word	0x00000000

08017640 <rcl_action_take_goal_response>:
 8017640:	2800      	cmp	r0, #0
 8017642:	d039      	beq.n	80176b8 <rcl_action_take_goal_response+0x78>
 8017644:	b570      	push	{r4, r5, r6, lr}
 8017646:	4604      	mov	r4, r0
 8017648:	6800      	ldr	r0, [r0, #0]
 801764a:	b380      	cbz	r0, 80176ae <rcl_action_take_goal_response+0x6e>
 801764c:	460d      	mov	r5, r1
 801764e:	4616      	mov	r6, r2
 8017650:	f7fe f9ee 	bl	8015a30 <rcl_client_is_valid>
 8017654:	b330      	cbz	r0, 80176a4 <rcl_action_take_goal_response+0x64>
 8017656:	6820      	ldr	r0, [r4, #0]
 8017658:	3004      	adds	r0, #4
 801765a:	f7fe f9e9 	bl	8015a30 <rcl_client_is_valid>
 801765e:	b308      	cbz	r0, 80176a4 <rcl_action_take_goal_response+0x64>
 8017660:	6820      	ldr	r0, [r4, #0]
 8017662:	3008      	adds	r0, #8
 8017664:	f7fe f9e4 	bl	8015a30 <rcl_client_is_valid>
 8017668:	b1e0      	cbz	r0, 80176a4 <rcl_action_take_goal_response+0x64>
 801766a:	6820      	ldr	r0, [r4, #0]
 801766c:	300c      	adds	r0, #12
 801766e:	f7ff f869 	bl	8016744 <rcl_subscription_is_valid>
 8017672:	b1b8      	cbz	r0, 80176a4 <rcl_action_take_goal_response+0x64>
 8017674:	6820      	ldr	r0, [r4, #0]
 8017676:	3010      	adds	r0, #16
 8017678:	f7ff f864 	bl	8016744 <rcl_subscription_is_valid>
 801767c:	b190      	cbz	r0, 80176a4 <rcl_action_take_goal_response+0x64>
 801767e:	b1cd      	cbz	r5, 80176b4 <rcl_action_take_goal_response+0x74>
 8017680:	b1c6      	cbz	r6, 80176b4 <rcl_action_take_goal_response+0x74>
 8017682:	6820      	ldr	r0, [r4, #0]
 8017684:	4632      	mov	r2, r6
 8017686:	4629      	mov	r1, r5
 8017688:	f7fe f98a 	bl	80159a0 <rcl_take_response>
 801768c:	b148      	cbz	r0, 80176a2 <rcl_action_take_goal_response+0x62>
 801768e:	280a      	cmp	r0, #10
 8017690:	d007      	beq.n	80176a2 <rcl_action_take_goal_response+0x62>
 8017692:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017696:	f640 0337 	movw	r3, #2103	@ 0x837
 801769a:	4290      	cmp	r0, r2
 801769c:	bf0c      	ite	eq
 801769e:	4618      	moveq	r0, r3
 80176a0:	2001      	movne	r0, #1
 80176a2:	bd70      	pop	{r4, r5, r6, pc}
 80176a4:	f7f9 fc20 	bl	8010ee8 <rcutils_reset_error>
 80176a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80176ac:	bd70      	pop	{r4, r5, r6, pc}
 80176ae:	f640 0036 	movw	r0, #2102	@ 0x836
 80176b2:	bd70      	pop	{r4, r5, r6, pc}
 80176b4:	200b      	movs	r0, #11
 80176b6:	bd70      	pop	{r4, r5, r6, pc}
 80176b8:	f640 0036 	movw	r0, #2102	@ 0x836
 80176bc:	4770      	bx	lr
 80176be:	bf00      	nop

080176c0 <rcl_action_send_result_request>:
 80176c0:	b390      	cbz	r0, 8017728 <rcl_action_send_result_request+0x68>
 80176c2:	b570      	push	{r4, r5, r6, lr}
 80176c4:	4604      	mov	r4, r0
 80176c6:	6800      	ldr	r0, [r0, #0]
 80176c8:	b348      	cbz	r0, 801771e <rcl_action_send_result_request+0x5e>
 80176ca:	460d      	mov	r5, r1
 80176cc:	4616      	mov	r6, r2
 80176ce:	f7fe f9af 	bl	8015a30 <rcl_client_is_valid>
 80176d2:	b1f8      	cbz	r0, 8017714 <rcl_action_send_result_request+0x54>
 80176d4:	6820      	ldr	r0, [r4, #0]
 80176d6:	3004      	adds	r0, #4
 80176d8:	f7fe f9aa 	bl	8015a30 <rcl_client_is_valid>
 80176dc:	b1d0      	cbz	r0, 8017714 <rcl_action_send_result_request+0x54>
 80176de:	6820      	ldr	r0, [r4, #0]
 80176e0:	3008      	adds	r0, #8
 80176e2:	f7fe f9a5 	bl	8015a30 <rcl_client_is_valid>
 80176e6:	b1a8      	cbz	r0, 8017714 <rcl_action_send_result_request+0x54>
 80176e8:	6820      	ldr	r0, [r4, #0]
 80176ea:	300c      	adds	r0, #12
 80176ec:	f7ff f82a 	bl	8016744 <rcl_subscription_is_valid>
 80176f0:	b180      	cbz	r0, 8017714 <rcl_action_send_result_request+0x54>
 80176f2:	6820      	ldr	r0, [r4, #0]
 80176f4:	3010      	adds	r0, #16
 80176f6:	f7ff f825 	bl	8016744 <rcl_subscription_is_valid>
 80176fa:	b158      	cbz	r0, 8017714 <rcl_action_send_result_request+0x54>
 80176fc:	b195      	cbz	r5, 8017724 <rcl_action_send_result_request+0x64>
 80176fe:	b18e      	cbz	r6, 8017724 <rcl_action_send_result_request+0x64>
 8017700:	6820      	ldr	r0, [r4, #0]
 8017702:	4632      	mov	r2, r6
 8017704:	4629      	mov	r1, r5
 8017706:	3008      	adds	r0, #8
 8017708:	f7fe f914 	bl	8015934 <rcl_send_request>
 801770c:	3800      	subs	r0, #0
 801770e:	bf18      	it	ne
 8017710:	2001      	movne	r0, #1
 8017712:	bd70      	pop	{r4, r5, r6, pc}
 8017714:	f7f9 fbe8 	bl	8010ee8 <rcutils_reset_error>
 8017718:	f640 0036 	movw	r0, #2102	@ 0x836
 801771c:	bd70      	pop	{r4, r5, r6, pc}
 801771e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017722:	bd70      	pop	{r4, r5, r6, pc}
 8017724:	200b      	movs	r0, #11
 8017726:	bd70      	pop	{r4, r5, r6, pc}
 8017728:	f640 0036 	movw	r0, #2102	@ 0x836
 801772c:	4770      	bx	lr
 801772e:	bf00      	nop

08017730 <rcl_action_take_result_response>:
 8017730:	2800      	cmp	r0, #0
 8017732:	d03a      	beq.n	80177aa <rcl_action_take_result_response+0x7a>
 8017734:	b570      	push	{r4, r5, r6, lr}
 8017736:	4604      	mov	r4, r0
 8017738:	6800      	ldr	r0, [r0, #0]
 801773a:	b388      	cbz	r0, 80177a0 <rcl_action_take_result_response+0x70>
 801773c:	460d      	mov	r5, r1
 801773e:	4616      	mov	r6, r2
 8017740:	f7fe f976 	bl	8015a30 <rcl_client_is_valid>
 8017744:	b338      	cbz	r0, 8017796 <rcl_action_take_result_response+0x66>
 8017746:	6820      	ldr	r0, [r4, #0]
 8017748:	3004      	adds	r0, #4
 801774a:	f7fe f971 	bl	8015a30 <rcl_client_is_valid>
 801774e:	b310      	cbz	r0, 8017796 <rcl_action_take_result_response+0x66>
 8017750:	6820      	ldr	r0, [r4, #0]
 8017752:	3008      	adds	r0, #8
 8017754:	f7fe f96c 	bl	8015a30 <rcl_client_is_valid>
 8017758:	b1e8      	cbz	r0, 8017796 <rcl_action_take_result_response+0x66>
 801775a:	6820      	ldr	r0, [r4, #0]
 801775c:	300c      	adds	r0, #12
 801775e:	f7fe fff1 	bl	8016744 <rcl_subscription_is_valid>
 8017762:	b1c0      	cbz	r0, 8017796 <rcl_action_take_result_response+0x66>
 8017764:	6820      	ldr	r0, [r4, #0]
 8017766:	3010      	adds	r0, #16
 8017768:	f7fe ffec 	bl	8016744 <rcl_subscription_is_valid>
 801776c:	b198      	cbz	r0, 8017796 <rcl_action_take_result_response+0x66>
 801776e:	b1d5      	cbz	r5, 80177a6 <rcl_action_take_result_response+0x76>
 8017770:	b1ce      	cbz	r6, 80177a6 <rcl_action_take_result_response+0x76>
 8017772:	6820      	ldr	r0, [r4, #0]
 8017774:	4632      	mov	r2, r6
 8017776:	4629      	mov	r1, r5
 8017778:	3008      	adds	r0, #8
 801777a:	f7fe f911 	bl	80159a0 <rcl_take_response>
 801777e:	b148      	cbz	r0, 8017794 <rcl_action_take_result_response+0x64>
 8017780:	280a      	cmp	r0, #10
 8017782:	d007      	beq.n	8017794 <rcl_action_take_result_response+0x64>
 8017784:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017788:	f640 0337 	movw	r3, #2103	@ 0x837
 801778c:	4290      	cmp	r0, r2
 801778e:	bf0c      	ite	eq
 8017790:	4618      	moveq	r0, r3
 8017792:	2001      	movne	r0, #1
 8017794:	bd70      	pop	{r4, r5, r6, pc}
 8017796:	f7f9 fba7 	bl	8010ee8 <rcutils_reset_error>
 801779a:	f640 0036 	movw	r0, #2102	@ 0x836
 801779e:	bd70      	pop	{r4, r5, r6, pc}
 80177a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80177a4:	bd70      	pop	{r4, r5, r6, pc}
 80177a6:	200b      	movs	r0, #11
 80177a8:	bd70      	pop	{r4, r5, r6, pc}
 80177aa:	f640 0036 	movw	r0, #2102	@ 0x836
 80177ae:	4770      	bx	lr

080177b0 <rcl_action_take_cancel_response>:
 80177b0:	2800      	cmp	r0, #0
 80177b2:	d03a      	beq.n	801782a <rcl_action_take_cancel_response+0x7a>
 80177b4:	b570      	push	{r4, r5, r6, lr}
 80177b6:	4604      	mov	r4, r0
 80177b8:	6800      	ldr	r0, [r0, #0]
 80177ba:	b388      	cbz	r0, 8017820 <rcl_action_take_cancel_response+0x70>
 80177bc:	460d      	mov	r5, r1
 80177be:	4616      	mov	r6, r2
 80177c0:	f7fe f936 	bl	8015a30 <rcl_client_is_valid>
 80177c4:	b338      	cbz	r0, 8017816 <rcl_action_take_cancel_response+0x66>
 80177c6:	6820      	ldr	r0, [r4, #0]
 80177c8:	3004      	adds	r0, #4
 80177ca:	f7fe f931 	bl	8015a30 <rcl_client_is_valid>
 80177ce:	b310      	cbz	r0, 8017816 <rcl_action_take_cancel_response+0x66>
 80177d0:	6820      	ldr	r0, [r4, #0]
 80177d2:	3008      	adds	r0, #8
 80177d4:	f7fe f92c 	bl	8015a30 <rcl_client_is_valid>
 80177d8:	b1e8      	cbz	r0, 8017816 <rcl_action_take_cancel_response+0x66>
 80177da:	6820      	ldr	r0, [r4, #0]
 80177dc:	300c      	adds	r0, #12
 80177de:	f7fe ffb1 	bl	8016744 <rcl_subscription_is_valid>
 80177e2:	b1c0      	cbz	r0, 8017816 <rcl_action_take_cancel_response+0x66>
 80177e4:	6820      	ldr	r0, [r4, #0]
 80177e6:	3010      	adds	r0, #16
 80177e8:	f7fe ffac 	bl	8016744 <rcl_subscription_is_valid>
 80177ec:	b198      	cbz	r0, 8017816 <rcl_action_take_cancel_response+0x66>
 80177ee:	b1d5      	cbz	r5, 8017826 <rcl_action_take_cancel_response+0x76>
 80177f0:	b1ce      	cbz	r6, 8017826 <rcl_action_take_cancel_response+0x76>
 80177f2:	6820      	ldr	r0, [r4, #0]
 80177f4:	4632      	mov	r2, r6
 80177f6:	4629      	mov	r1, r5
 80177f8:	3004      	adds	r0, #4
 80177fa:	f7fe f8d1 	bl	80159a0 <rcl_take_response>
 80177fe:	b148      	cbz	r0, 8017814 <rcl_action_take_cancel_response+0x64>
 8017800:	280a      	cmp	r0, #10
 8017802:	d007      	beq.n	8017814 <rcl_action_take_cancel_response+0x64>
 8017804:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017808:	f640 0337 	movw	r3, #2103	@ 0x837
 801780c:	4290      	cmp	r0, r2
 801780e:	bf0c      	ite	eq
 8017810:	4618      	moveq	r0, r3
 8017812:	2001      	movne	r0, #1
 8017814:	bd70      	pop	{r4, r5, r6, pc}
 8017816:	f7f9 fb67 	bl	8010ee8 <rcutils_reset_error>
 801781a:	f640 0036 	movw	r0, #2102	@ 0x836
 801781e:	bd70      	pop	{r4, r5, r6, pc}
 8017820:	f640 0036 	movw	r0, #2102	@ 0x836
 8017824:	bd70      	pop	{r4, r5, r6, pc}
 8017826:	200b      	movs	r0, #11
 8017828:	bd70      	pop	{r4, r5, r6, pc}
 801782a:	f640 0036 	movw	r0, #2102	@ 0x836
 801782e:	4770      	bx	lr

08017830 <rcl_action_take_feedback>:
 8017830:	2800      	cmp	r0, #0
 8017832:	d038      	beq.n	80178a6 <rcl_action_take_feedback+0x76>
 8017834:	b530      	push	{r4, r5, lr}
 8017836:	4604      	mov	r4, r0
 8017838:	6800      	ldr	r0, [r0, #0]
 801783a:	b091      	sub	sp, #68	@ 0x44
 801783c:	b378      	cbz	r0, 801789e <rcl_action_take_feedback+0x6e>
 801783e:	460d      	mov	r5, r1
 8017840:	f7fe f8f6 	bl	8015a30 <rcl_client_is_valid>
 8017844:	b328      	cbz	r0, 8017892 <rcl_action_take_feedback+0x62>
 8017846:	6820      	ldr	r0, [r4, #0]
 8017848:	3004      	adds	r0, #4
 801784a:	f7fe f8f1 	bl	8015a30 <rcl_client_is_valid>
 801784e:	b300      	cbz	r0, 8017892 <rcl_action_take_feedback+0x62>
 8017850:	6820      	ldr	r0, [r4, #0]
 8017852:	3008      	adds	r0, #8
 8017854:	f7fe f8ec 	bl	8015a30 <rcl_client_is_valid>
 8017858:	b1d8      	cbz	r0, 8017892 <rcl_action_take_feedback+0x62>
 801785a:	6820      	ldr	r0, [r4, #0]
 801785c:	300c      	adds	r0, #12
 801785e:	f7fe ff71 	bl	8016744 <rcl_subscription_is_valid>
 8017862:	b1b0      	cbz	r0, 8017892 <rcl_action_take_feedback+0x62>
 8017864:	6820      	ldr	r0, [r4, #0]
 8017866:	3010      	adds	r0, #16
 8017868:	f7fe ff6c 	bl	8016744 <rcl_subscription_is_valid>
 801786c:	b188      	cbz	r0, 8017892 <rcl_action_take_feedback+0x62>
 801786e:	b1ed      	cbz	r5, 80178ac <rcl_action_take_feedback+0x7c>
 8017870:	6820      	ldr	r0, [r4, #0]
 8017872:	2300      	movs	r3, #0
 8017874:	466a      	mov	r2, sp
 8017876:	4629      	mov	r1, r5
 8017878:	300c      	adds	r0, #12
 801787a:	f7fe ff05 	bl	8016688 <rcl_take>
 801787e:	b160      	cbz	r0, 801789a <rcl_action_take_feedback+0x6a>
 8017880:	f240 1391 	movw	r3, #401	@ 0x191
 8017884:	4298      	cmp	r0, r3
 8017886:	d014      	beq.n	80178b2 <rcl_action_take_feedback+0x82>
 8017888:	280a      	cmp	r0, #10
 801788a:	bf18      	it	ne
 801788c:	2001      	movne	r0, #1
 801788e:	b011      	add	sp, #68	@ 0x44
 8017890:	bd30      	pop	{r4, r5, pc}
 8017892:	f7f9 fb29 	bl	8010ee8 <rcutils_reset_error>
 8017896:	f640 0036 	movw	r0, #2102	@ 0x836
 801789a:	b011      	add	sp, #68	@ 0x44
 801789c:	bd30      	pop	{r4, r5, pc}
 801789e:	f640 0036 	movw	r0, #2102	@ 0x836
 80178a2:	b011      	add	sp, #68	@ 0x44
 80178a4:	bd30      	pop	{r4, r5, pc}
 80178a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80178aa:	4770      	bx	lr
 80178ac:	200b      	movs	r0, #11
 80178ae:	b011      	add	sp, #68	@ 0x44
 80178b0:	bd30      	pop	{r4, r5, pc}
 80178b2:	f640 0037 	movw	r0, #2103	@ 0x837
 80178b6:	e7f0      	b.n	801789a <rcl_action_take_feedback+0x6a>

080178b8 <rcl_action_wait_set_add_action_client>:
 80178b8:	2800      	cmp	r0, #0
 80178ba:	d048      	beq.n	801794e <rcl_action_wait_set_add_action_client+0x96>
 80178bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178be:	460c      	mov	r4, r1
 80178c0:	2900      	cmp	r1, #0
 80178c2:	d03c      	beq.n	801793e <rcl_action_wait_set_add_action_client+0x86>
 80178c4:	4605      	mov	r5, r0
 80178c6:	6808      	ldr	r0, [r1, #0]
 80178c8:	2800      	cmp	r0, #0
 80178ca:	d038      	beq.n	801793e <rcl_action_wait_set_add_action_client+0x86>
 80178cc:	4617      	mov	r7, r2
 80178ce:	461e      	mov	r6, r3
 80178d0:	f7fe f8ae 	bl	8015a30 <rcl_client_is_valid>
 80178d4:	b3b0      	cbz	r0, 8017944 <rcl_action_wait_set_add_action_client+0x8c>
 80178d6:	6820      	ldr	r0, [r4, #0]
 80178d8:	3004      	adds	r0, #4
 80178da:	f7fe f8a9 	bl	8015a30 <rcl_client_is_valid>
 80178de:	b388      	cbz	r0, 8017944 <rcl_action_wait_set_add_action_client+0x8c>
 80178e0:	6820      	ldr	r0, [r4, #0]
 80178e2:	3008      	adds	r0, #8
 80178e4:	f7fe f8a4 	bl	8015a30 <rcl_client_is_valid>
 80178e8:	b360      	cbz	r0, 8017944 <rcl_action_wait_set_add_action_client+0x8c>
 80178ea:	6820      	ldr	r0, [r4, #0]
 80178ec:	300c      	adds	r0, #12
 80178ee:	f7fe ff29 	bl	8016744 <rcl_subscription_is_valid>
 80178f2:	b338      	cbz	r0, 8017944 <rcl_action_wait_set_add_action_client+0x8c>
 80178f4:	6820      	ldr	r0, [r4, #0]
 80178f6:	3010      	adds	r0, #16
 80178f8:	f7fe ff24 	bl	8016744 <rcl_subscription_is_valid>
 80178fc:	b310      	cbz	r0, 8017944 <rcl_action_wait_set_add_action_client+0x8c>
 80178fe:	6821      	ldr	r1, [r4, #0]
 8017900:	4628      	mov	r0, r5
 8017902:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8017906:	f7ff fccd 	bl	80172a4 <rcl_wait_set_add_client>
 801790a:	b9b8      	cbnz	r0, 801793c <rcl_action_wait_set_add_action_client+0x84>
 801790c:	6821      	ldr	r1, [r4, #0]
 801790e:	4628      	mov	r0, r5
 8017910:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8017914:	3104      	adds	r1, #4
 8017916:	f7ff fcc5 	bl	80172a4 <rcl_wait_set_add_client>
 801791a:	b978      	cbnz	r0, 801793c <rcl_action_wait_set_add_action_client+0x84>
 801791c:	6821      	ldr	r1, [r4, #0]
 801791e:	4628      	mov	r0, r5
 8017920:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8017924:	3108      	adds	r1, #8
 8017926:	f7ff fcbd 	bl	80172a4 <rcl_wait_set_add_client>
 801792a:	b938      	cbnz	r0, 801793c <rcl_action_wait_set_add_action_client+0x84>
 801792c:	6821      	ldr	r1, [r4, #0]
 801792e:	4628      	mov	r0, r5
 8017930:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8017934:	310c      	adds	r1, #12
 8017936:	f7ff f96d 	bl	8016c14 <rcl_wait_set_add_subscription>
 801793a:	b158      	cbz	r0, 8017954 <rcl_action_wait_set_add_action_client+0x9c>
 801793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801793e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017944:	f7f9 fad0 	bl	8010ee8 <rcutils_reset_error>
 8017948:	f640 0036 	movw	r0, #2102	@ 0x836
 801794c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801794e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017952:	4770      	bx	lr
 8017954:	6821      	ldr	r1, [r4, #0]
 8017956:	4628      	mov	r0, r5
 8017958:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801795c:	3110      	adds	r1, #16
 801795e:	f7ff f959 	bl	8016c14 <rcl_wait_set_add_subscription>
 8017962:	2800      	cmp	r0, #0
 8017964:	d1ea      	bne.n	801793c <rcl_action_wait_set_add_action_client+0x84>
 8017966:	b11f      	cbz	r7, 8017970 <rcl_action_wait_set_add_action_client+0xb8>
 8017968:	6823      	ldr	r3, [r4, #0]
 801796a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801796e:	603b      	str	r3, [r7, #0]
 8017970:	2e00      	cmp	r6, #0
 8017972:	d0e3      	beq.n	801793c <rcl_action_wait_set_add_action_client+0x84>
 8017974:	6823      	ldr	r3, [r4, #0]
 8017976:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801797a:	6033      	str	r3, [r6, #0]
 801797c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801797e:	bf00      	nop

08017980 <rcl_action_client_wait_set_get_entities_ready>:
 8017980:	2800      	cmp	r0, #0
 8017982:	f000 808d 	beq.w	8017aa0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8017986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801798a:	460c      	mov	r4, r1
 801798c:	2900      	cmp	r1, #0
 801798e:	d077      	beq.n	8017a80 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8017990:	4605      	mov	r5, r0
 8017992:	6808      	ldr	r0, [r1, #0]
 8017994:	2800      	cmp	r0, #0
 8017996:	d073      	beq.n	8017a80 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8017998:	4616      	mov	r6, r2
 801799a:	461f      	mov	r7, r3
 801799c:	f7fe f848 	bl	8015a30 <rcl_client_is_valid>
 80179a0:	2800      	cmp	r0, #0
 80179a2:	d071      	beq.n	8017a88 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80179a4:	6820      	ldr	r0, [r4, #0]
 80179a6:	3004      	adds	r0, #4
 80179a8:	f7fe f842 	bl	8015a30 <rcl_client_is_valid>
 80179ac:	2800      	cmp	r0, #0
 80179ae:	d06b      	beq.n	8017a88 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80179b0:	6820      	ldr	r0, [r4, #0]
 80179b2:	3008      	adds	r0, #8
 80179b4:	f7fe f83c 	bl	8015a30 <rcl_client_is_valid>
 80179b8:	2800      	cmp	r0, #0
 80179ba:	d065      	beq.n	8017a88 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80179bc:	6820      	ldr	r0, [r4, #0]
 80179be:	300c      	adds	r0, #12
 80179c0:	f7fe fec0 	bl	8016744 <rcl_subscription_is_valid>
 80179c4:	2800      	cmp	r0, #0
 80179c6:	d05f      	beq.n	8017a88 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80179c8:	6820      	ldr	r0, [r4, #0]
 80179ca:	3010      	adds	r0, #16
 80179cc:	f7fe feba 	bl	8016744 <rcl_subscription_is_valid>
 80179d0:	2800      	cmp	r0, #0
 80179d2:	d059      	beq.n	8017a88 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80179d4:	2e00      	cmp	r6, #0
 80179d6:	d060      	beq.n	8017a9a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80179d8:	2f00      	cmp	r7, #0
 80179da:	d05e      	beq.n	8017a9a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80179dc:	9b06      	ldr	r3, [sp, #24]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d05b      	beq.n	8017a9a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80179e2:	9b07      	ldr	r3, [sp, #28]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d058      	beq.n	8017a9a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80179e8:	9b08      	ldr	r3, [sp, #32]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d055      	beq.n	8017a9a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80179ee:	6823      	ldr	r3, [r4, #0]
 80179f0:	686a      	ldr	r2, [r5, #4]
 80179f2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80179f6:	428a      	cmp	r2, r1
 80179f8:	d94c      	bls.n	8017a94 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80179fa:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80179fe:	4282      	cmp	r2, r0
 8017a00:	d948      	bls.n	8017a94 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8017a02:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8017a06:	69ea      	ldr	r2, [r5, #28]
 8017a08:	42a2      	cmp	r2, r4
 8017a0a:	d943      	bls.n	8017a94 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8017a0c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8017a10:	4562      	cmp	r2, ip
 8017a12:	d93f      	bls.n	8017a94 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8017a14:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8017a18:	4572      	cmp	r2, lr
 8017a1a:	d93b      	bls.n	8017a94 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8017a1c:	69aa      	ldr	r2, [r5, #24]
 8017a1e:	682d      	ldr	r5, [r5, #0]
 8017a20:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8017a24:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8017a28:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8017a2c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8017a30:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8017a34:	f103 0c0c 	add.w	ip, r3, #12
 8017a38:	eba5 050c 	sub.w	r5, r5, ip
 8017a3c:	fab5 f585 	clz	r5, r5
 8017a40:	096d      	lsrs	r5, r5, #5
 8017a42:	7035      	strb	r5, [r6, #0]
 8017a44:	f103 0510 	add.w	r5, r3, #16
 8017a48:	1b64      	subs	r4, r4, r5
 8017a4a:	fab4 f484 	clz	r4, r4
 8017a4e:	0964      	lsrs	r4, r4, #5
 8017a50:	703c      	strb	r4, [r7, #0]
 8017a52:	eba3 0008 	sub.w	r0, r3, r8
 8017a56:	1d1c      	adds	r4, r3, #4
 8017a58:	3308      	adds	r3, #8
 8017a5a:	1ad3      	subs	r3, r2, r3
 8017a5c:	fab0 f080 	clz	r0, r0
 8017a60:	9a06      	ldr	r2, [sp, #24]
 8017a62:	0940      	lsrs	r0, r0, #5
 8017a64:	1b09      	subs	r1, r1, r4
 8017a66:	7010      	strb	r0, [r2, #0]
 8017a68:	fab1 f181 	clz	r1, r1
 8017a6c:	9a07      	ldr	r2, [sp, #28]
 8017a6e:	0949      	lsrs	r1, r1, #5
 8017a70:	7011      	strb	r1, [r2, #0]
 8017a72:	fab3 f383 	clz	r3, r3
 8017a76:	9a08      	ldr	r2, [sp, #32]
 8017a78:	095b      	lsrs	r3, r3, #5
 8017a7a:	2000      	movs	r0, #0
 8017a7c:	7013      	strb	r3, [r2, #0]
 8017a7e:	e001      	b.n	8017a84 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8017a80:	f640 0036 	movw	r0, #2102	@ 0x836
 8017a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a88:	f7f9 fa2e 	bl	8010ee8 <rcutils_reset_error>
 8017a8c:	f640 0036 	movw	r0, #2102	@ 0x836
 8017a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a94:	2001      	movs	r0, #1
 8017a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a9a:	200b      	movs	r0, #11
 8017a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017aa0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017aa4:	4770      	bx	lr
 8017aa6:	bf00      	nop

08017aa8 <rcl_action_take_goal_request>:
 8017aa8:	2800      	cmp	r0, #0
 8017aaa:	d039      	beq.n	8017b20 <rcl_action_take_goal_request+0x78>
 8017aac:	b570      	push	{r4, r5, r6, lr}
 8017aae:	4604      	mov	r4, r0
 8017ab0:	6800      	ldr	r0, [r0, #0]
 8017ab2:	b380      	cbz	r0, 8017b16 <rcl_action_take_goal_request+0x6e>
 8017ab4:	460d      	mov	r5, r1
 8017ab6:	4616      	mov	r6, r2
 8017ab8:	f7fe fd00 	bl	80164bc <rcl_service_is_valid>
 8017abc:	b330      	cbz	r0, 8017b0c <rcl_action_take_goal_request+0x64>
 8017abe:	6820      	ldr	r0, [r4, #0]
 8017ac0:	3004      	adds	r0, #4
 8017ac2:	f7fe fcfb 	bl	80164bc <rcl_service_is_valid>
 8017ac6:	b308      	cbz	r0, 8017b0c <rcl_action_take_goal_request+0x64>
 8017ac8:	6820      	ldr	r0, [r4, #0]
 8017aca:	3008      	adds	r0, #8
 8017acc:	f7fe fcf6 	bl	80164bc <rcl_service_is_valid>
 8017ad0:	b1e0      	cbz	r0, 8017b0c <rcl_action_take_goal_request+0x64>
 8017ad2:	6820      	ldr	r0, [r4, #0]
 8017ad4:	300c      	adds	r0, #12
 8017ad6:	f7f8 fa81 	bl	800ffdc <rcl_publisher_is_valid>
 8017ada:	b1b8      	cbz	r0, 8017b0c <rcl_action_take_goal_request+0x64>
 8017adc:	6820      	ldr	r0, [r4, #0]
 8017ade:	3010      	adds	r0, #16
 8017ae0:	f7f8 fa7c 	bl	800ffdc <rcl_publisher_is_valid>
 8017ae4:	b190      	cbz	r0, 8017b0c <rcl_action_take_goal_request+0x64>
 8017ae6:	b1cd      	cbz	r5, 8017b1c <rcl_action_take_goal_request+0x74>
 8017ae8:	b1c6      	cbz	r6, 8017b1c <rcl_action_take_goal_request+0x74>
 8017aea:	6820      	ldr	r0, [r4, #0]
 8017aec:	4632      	mov	r2, r6
 8017aee:	4629      	mov	r1, r5
 8017af0:	f7fe fc8c 	bl	801640c <rcl_take_request>
 8017af4:	b148      	cbz	r0, 8017b0a <rcl_action_take_goal_request+0x62>
 8017af6:	280a      	cmp	r0, #10
 8017af8:	d007      	beq.n	8017b0a <rcl_action_take_goal_request+0x62>
 8017afa:	f240 2259 	movw	r2, #601	@ 0x259
 8017afe:	f640 0399 	movw	r3, #2201	@ 0x899
 8017b02:	4290      	cmp	r0, r2
 8017b04:	bf0c      	ite	eq
 8017b06:	4618      	moveq	r0, r3
 8017b08:	2001      	movne	r0, #1
 8017b0a:	bd70      	pop	{r4, r5, r6, pc}
 8017b0c:	f7f9 f9ec 	bl	8010ee8 <rcutils_reset_error>
 8017b10:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b14:	bd70      	pop	{r4, r5, r6, pc}
 8017b16:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b1a:	bd70      	pop	{r4, r5, r6, pc}
 8017b1c:	200b      	movs	r0, #11
 8017b1e:	bd70      	pop	{r4, r5, r6, pc}
 8017b20:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b24:	4770      	bx	lr
 8017b26:	bf00      	nop

08017b28 <rcl_action_send_goal_response>:
 8017b28:	b390      	cbz	r0, 8017b90 <rcl_action_send_goal_response+0x68>
 8017b2a:	b570      	push	{r4, r5, r6, lr}
 8017b2c:	4604      	mov	r4, r0
 8017b2e:	6800      	ldr	r0, [r0, #0]
 8017b30:	b348      	cbz	r0, 8017b86 <rcl_action_send_goal_response+0x5e>
 8017b32:	460d      	mov	r5, r1
 8017b34:	4616      	mov	r6, r2
 8017b36:	f7fe fcc1 	bl	80164bc <rcl_service_is_valid>
 8017b3a:	b1f8      	cbz	r0, 8017b7c <rcl_action_send_goal_response+0x54>
 8017b3c:	6820      	ldr	r0, [r4, #0]
 8017b3e:	3004      	adds	r0, #4
 8017b40:	f7fe fcbc 	bl	80164bc <rcl_service_is_valid>
 8017b44:	b1d0      	cbz	r0, 8017b7c <rcl_action_send_goal_response+0x54>
 8017b46:	6820      	ldr	r0, [r4, #0]
 8017b48:	3008      	adds	r0, #8
 8017b4a:	f7fe fcb7 	bl	80164bc <rcl_service_is_valid>
 8017b4e:	b1a8      	cbz	r0, 8017b7c <rcl_action_send_goal_response+0x54>
 8017b50:	6820      	ldr	r0, [r4, #0]
 8017b52:	300c      	adds	r0, #12
 8017b54:	f7f8 fa42 	bl	800ffdc <rcl_publisher_is_valid>
 8017b58:	b180      	cbz	r0, 8017b7c <rcl_action_send_goal_response+0x54>
 8017b5a:	6820      	ldr	r0, [r4, #0]
 8017b5c:	3010      	adds	r0, #16
 8017b5e:	f7f8 fa3d 	bl	800ffdc <rcl_publisher_is_valid>
 8017b62:	b158      	cbz	r0, 8017b7c <rcl_action_send_goal_response+0x54>
 8017b64:	b195      	cbz	r5, 8017b8c <rcl_action_send_goal_response+0x64>
 8017b66:	b18e      	cbz	r6, 8017b8c <rcl_action_send_goal_response+0x64>
 8017b68:	6820      	ldr	r0, [r4, #0]
 8017b6a:	4632      	mov	r2, r6
 8017b6c:	4629      	mov	r1, r5
 8017b6e:	f7fe fc8d 	bl	801648c <rcl_send_response>
 8017b72:	b110      	cbz	r0, 8017b7a <rcl_action_send_goal_response+0x52>
 8017b74:	2802      	cmp	r0, #2
 8017b76:	bf18      	it	ne
 8017b78:	2001      	movne	r0, #1
 8017b7a:	bd70      	pop	{r4, r5, r6, pc}
 8017b7c:	f7f9 f9b4 	bl	8010ee8 <rcutils_reset_error>
 8017b80:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b84:	bd70      	pop	{r4, r5, r6, pc}
 8017b86:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b8a:	bd70      	pop	{r4, r5, r6, pc}
 8017b8c:	200b      	movs	r0, #11
 8017b8e:	bd70      	pop	{r4, r5, r6, pc}
 8017b90:	f640 0098 	movw	r0, #2200	@ 0x898
 8017b94:	4770      	bx	lr
 8017b96:	bf00      	nop

08017b98 <rcl_action_take_result_request>:
 8017b98:	2800      	cmp	r0, #0
 8017b9a:	d03a      	beq.n	8017c12 <rcl_action_take_result_request+0x7a>
 8017b9c:	b570      	push	{r4, r5, r6, lr}
 8017b9e:	4604      	mov	r4, r0
 8017ba0:	6800      	ldr	r0, [r0, #0]
 8017ba2:	b388      	cbz	r0, 8017c08 <rcl_action_take_result_request+0x70>
 8017ba4:	460d      	mov	r5, r1
 8017ba6:	4616      	mov	r6, r2
 8017ba8:	f7fe fc88 	bl	80164bc <rcl_service_is_valid>
 8017bac:	b338      	cbz	r0, 8017bfe <rcl_action_take_result_request+0x66>
 8017bae:	6820      	ldr	r0, [r4, #0]
 8017bb0:	3004      	adds	r0, #4
 8017bb2:	f7fe fc83 	bl	80164bc <rcl_service_is_valid>
 8017bb6:	b310      	cbz	r0, 8017bfe <rcl_action_take_result_request+0x66>
 8017bb8:	6820      	ldr	r0, [r4, #0]
 8017bba:	3008      	adds	r0, #8
 8017bbc:	f7fe fc7e 	bl	80164bc <rcl_service_is_valid>
 8017bc0:	b1e8      	cbz	r0, 8017bfe <rcl_action_take_result_request+0x66>
 8017bc2:	6820      	ldr	r0, [r4, #0]
 8017bc4:	300c      	adds	r0, #12
 8017bc6:	f7f8 fa09 	bl	800ffdc <rcl_publisher_is_valid>
 8017bca:	b1c0      	cbz	r0, 8017bfe <rcl_action_take_result_request+0x66>
 8017bcc:	6820      	ldr	r0, [r4, #0]
 8017bce:	3010      	adds	r0, #16
 8017bd0:	f7f8 fa04 	bl	800ffdc <rcl_publisher_is_valid>
 8017bd4:	b198      	cbz	r0, 8017bfe <rcl_action_take_result_request+0x66>
 8017bd6:	b1d5      	cbz	r5, 8017c0e <rcl_action_take_result_request+0x76>
 8017bd8:	b1ce      	cbz	r6, 8017c0e <rcl_action_take_result_request+0x76>
 8017bda:	6820      	ldr	r0, [r4, #0]
 8017bdc:	4632      	mov	r2, r6
 8017bde:	4629      	mov	r1, r5
 8017be0:	3008      	adds	r0, #8
 8017be2:	f7fe fc13 	bl	801640c <rcl_take_request>
 8017be6:	b148      	cbz	r0, 8017bfc <rcl_action_take_result_request+0x64>
 8017be8:	280a      	cmp	r0, #10
 8017bea:	d007      	beq.n	8017bfc <rcl_action_take_result_request+0x64>
 8017bec:	f240 2259 	movw	r2, #601	@ 0x259
 8017bf0:	f640 0399 	movw	r3, #2201	@ 0x899
 8017bf4:	4290      	cmp	r0, r2
 8017bf6:	bf0c      	ite	eq
 8017bf8:	4618      	moveq	r0, r3
 8017bfa:	2001      	movne	r0, #1
 8017bfc:	bd70      	pop	{r4, r5, r6, pc}
 8017bfe:	f7f9 f973 	bl	8010ee8 <rcutils_reset_error>
 8017c02:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c06:	bd70      	pop	{r4, r5, r6, pc}
 8017c08:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c0c:	bd70      	pop	{r4, r5, r6, pc}
 8017c0e:	200b      	movs	r0, #11
 8017c10:	bd70      	pop	{r4, r5, r6, pc}
 8017c12:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c16:	4770      	bx	lr

08017c18 <rcl_action_take_cancel_request>:
 8017c18:	2800      	cmp	r0, #0
 8017c1a:	d03a      	beq.n	8017c92 <rcl_action_take_cancel_request+0x7a>
 8017c1c:	b570      	push	{r4, r5, r6, lr}
 8017c1e:	4604      	mov	r4, r0
 8017c20:	6800      	ldr	r0, [r0, #0]
 8017c22:	b388      	cbz	r0, 8017c88 <rcl_action_take_cancel_request+0x70>
 8017c24:	460d      	mov	r5, r1
 8017c26:	4616      	mov	r6, r2
 8017c28:	f7fe fc48 	bl	80164bc <rcl_service_is_valid>
 8017c2c:	b338      	cbz	r0, 8017c7e <rcl_action_take_cancel_request+0x66>
 8017c2e:	6820      	ldr	r0, [r4, #0]
 8017c30:	3004      	adds	r0, #4
 8017c32:	f7fe fc43 	bl	80164bc <rcl_service_is_valid>
 8017c36:	b310      	cbz	r0, 8017c7e <rcl_action_take_cancel_request+0x66>
 8017c38:	6820      	ldr	r0, [r4, #0]
 8017c3a:	3008      	adds	r0, #8
 8017c3c:	f7fe fc3e 	bl	80164bc <rcl_service_is_valid>
 8017c40:	b1e8      	cbz	r0, 8017c7e <rcl_action_take_cancel_request+0x66>
 8017c42:	6820      	ldr	r0, [r4, #0]
 8017c44:	300c      	adds	r0, #12
 8017c46:	f7f8 f9c9 	bl	800ffdc <rcl_publisher_is_valid>
 8017c4a:	b1c0      	cbz	r0, 8017c7e <rcl_action_take_cancel_request+0x66>
 8017c4c:	6820      	ldr	r0, [r4, #0]
 8017c4e:	3010      	adds	r0, #16
 8017c50:	f7f8 f9c4 	bl	800ffdc <rcl_publisher_is_valid>
 8017c54:	b198      	cbz	r0, 8017c7e <rcl_action_take_cancel_request+0x66>
 8017c56:	b1d5      	cbz	r5, 8017c8e <rcl_action_take_cancel_request+0x76>
 8017c58:	b1ce      	cbz	r6, 8017c8e <rcl_action_take_cancel_request+0x76>
 8017c5a:	6820      	ldr	r0, [r4, #0]
 8017c5c:	4632      	mov	r2, r6
 8017c5e:	4629      	mov	r1, r5
 8017c60:	3004      	adds	r0, #4
 8017c62:	f7fe fbd3 	bl	801640c <rcl_take_request>
 8017c66:	b148      	cbz	r0, 8017c7c <rcl_action_take_cancel_request+0x64>
 8017c68:	280a      	cmp	r0, #10
 8017c6a:	d007      	beq.n	8017c7c <rcl_action_take_cancel_request+0x64>
 8017c6c:	f240 2259 	movw	r2, #601	@ 0x259
 8017c70:	f640 0399 	movw	r3, #2201	@ 0x899
 8017c74:	4290      	cmp	r0, r2
 8017c76:	bf0c      	ite	eq
 8017c78:	4618      	moveq	r0, r3
 8017c7a:	2001      	movne	r0, #1
 8017c7c:	bd70      	pop	{r4, r5, r6, pc}
 8017c7e:	f7f9 f933 	bl	8010ee8 <rcutils_reset_error>
 8017c82:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c86:	bd70      	pop	{r4, r5, r6, pc}
 8017c88:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c8c:	bd70      	pop	{r4, r5, r6, pc}
 8017c8e:	200b      	movs	r0, #11
 8017c90:	bd70      	pop	{r4, r5, r6, pc}
 8017c92:	f640 0098 	movw	r0, #2200	@ 0x898
 8017c96:	4770      	bx	lr

08017c98 <rcl_action_send_cancel_response>:
 8017c98:	b398      	cbz	r0, 8017d02 <rcl_action_send_cancel_response+0x6a>
 8017c9a:	b570      	push	{r4, r5, r6, lr}
 8017c9c:	4604      	mov	r4, r0
 8017c9e:	6800      	ldr	r0, [r0, #0]
 8017ca0:	b350      	cbz	r0, 8017cf8 <rcl_action_send_cancel_response+0x60>
 8017ca2:	460d      	mov	r5, r1
 8017ca4:	4616      	mov	r6, r2
 8017ca6:	f7fe fc09 	bl	80164bc <rcl_service_is_valid>
 8017caa:	b300      	cbz	r0, 8017cee <rcl_action_send_cancel_response+0x56>
 8017cac:	6820      	ldr	r0, [r4, #0]
 8017cae:	3004      	adds	r0, #4
 8017cb0:	f7fe fc04 	bl	80164bc <rcl_service_is_valid>
 8017cb4:	b1d8      	cbz	r0, 8017cee <rcl_action_send_cancel_response+0x56>
 8017cb6:	6820      	ldr	r0, [r4, #0]
 8017cb8:	3008      	adds	r0, #8
 8017cba:	f7fe fbff 	bl	80164bc <rcl_service_is_valid>
 8017cbe:	b1b0      	cbz	r0, 8017cee <rcl_action_send_cancel_response+0x56>
 8017cc0:	6820      	ldr	r0, [r4, #0]
 8017cc2:	300c      	adds	r0, #12
 8017cc4:	f7f8 f98a 	bl	800ffdc <rcl_publisher_is_valid>
 8017cc8:	b188      	cbz	r0, 8017cee <rcl_action_send_cancel_response+0x56>
 8017cca:	6820      	ldr	r0, [r4, #0]
 8017ccc:	3010      	adds	r0, #16
 8017cce:	f7f8 f985 	bl	800ffdc <rcl_publisher_is_valid>
 8017cd2:	b160      	cbz	r0, 8017cee <rcl_action_send_cancel_response+0x56>
 8017cd4:	b19d      	cbz	r5, 8017cfe <rcl_action_send_cancel_response+0x66>
 8017cd6:	b196      	cbz	r6, 8017cfe <rcl_action_send_cancel_response+0x66>
 8017cd8:	6820      	ldr	r0, [r4, #0]
 8017cda:	4632      	mov	r2, r6
 8017cdc:	4629      	mov	r1, r5
 8017cde:	3004      	adds	r0, #4
 8017ce0:	f7fe fbd4 	bl	801648c <rcl_send_response>
 8017ce4:	b110      	cbz	r0, 8017cec <rcl_action_send_cancel_response+0x54>
 8017ce6:	2802      	cmp	r0, #2
 8017ce8:	bf18      	it	ne
 8017cea:	2001      	movne	r0, #1
 8017cec:	bd70      	pop	{r4, r5, r6, pc}
 8017cee:	f7f9 f8fb 	bl	8010ee8 <rcutils_reset_error>
 8017cf2:	f640 0098 	movw	r0, #2200	@ 0x898
 8017cf6:	bd70      	pop	{r4, r5, r6, pc}
 8017cf8:	f640 0098 	movw	r0, #2200	@ 0x898
 8017cfc:	bd70      	pop	{r4, r5, r6, pc}
 8017cfe:	200b      	movs	r0, #11
 8017d00:	bd70      	pop	{r4, r5, r6, pc}
 8017d02:	f640 0098 	movw	r0, #2200	@ 0x898
 8017d06:	4770      	bx	lr

08017d08 <rcl_action_wait_set_add_action_server>:
 8017d08:	2800      	cmp	r0, #0
 8017d0a:	d04d      	beq.n	8017da8 <rcl_action_wait_set_add_action_server+0xa0>
 8017d0c:	b570      	push	{r4, r5, r6, lr}
 8017d0e:	460c      	mov	r4, r1
 8017d10:	b159      	cbz	r1, 8017d2a <rcl_action_wait_set_add_action_server+0x22>
 8017d12:	4605      	mov	r5, r0
 8017d14:	6808      	ldr	r0, [r1, #0]
 8017d16:	b140      	cbz	r0, 8017d2a <rcl_action_wait_set_add_action_server+0x22>
 8017d18:	4616      	mov	r6, r2
 8017d1a:	f7fe fbcf 	bl	80164bc <rcl_service_is_valid>
 8017d1e:	b120      	cbz	r0, 8017d2a <rcl_action_wait_set_add_action_server+0x22>
 8017d20:	6820      	ldr	r0, [r4, #0]
 8017d22:	3004      	adds	r0, #4
 8017d24:	f7fe fbca 	bl	80164bc <rcl_service_is_valid>
 8017d28:	b910      	cbnz	r0, 8017d30 <rcl_action_wait_set_add_action_server+0x28>
 8017d2a:	f640 0098 	movw	r0, #2200	@ 0x898
 8017d2e:	bd70      	pop	{r4, r5, r6, pc}
 8017d30:	6820      	ldr	r0, [r4, #0]
 8017d32:	3008      	adds	r0, #8
 8017d34:	f7fe fbc2 	bl	80164bc <rcl_service_is_valid>
 8017d38:	2800      	cmp	r0, #0
 8017d3a:	d0f6      	beq.n	8017d2a <rcl_action_wait_set_add_action_server+0x22>
 8017d3c:	6820      	ldr	r0, [r4, #0]
 8017d3e:	300c      	adds	r0, #12
 8017d40:	f7f8 f964 	bl	801000c <rcl_publisher_is_valid_except_context>
 8017d44:	2800      	cmp	r0, #0
 8017d46:	d0f0      	beq.n	8017d2a <rcl_action_wait_set_add_action_server+0x22>
 8017d48:	6820      	ldr	r0, [r4, #0]
 8017d4a:	3010      	adds	r0, #16
 8017d4c:	f7f8 f95e 	bl	801000c <rcl_publisher_is_valid_except_context>
 8017d50:	2800      	cmp	r0, #0
 8017d52:	d0ea      	beq.n	8017d2a <rcl_action_wait_set_add_action_server+0x22>
 8017d54:	6821      	ldr	r1, [r4, #0]
 8017d56:	4628      	mov	r0, r5
 8017d58:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8017d5c:	f7ff face 	bl	80172fc <rcl_wait_set_add_service>
 8017d60:	2800      	cmp	r0, #0
 8017d62:	d1e4      	bne.n	8017d2e <rcl_action_wait_set_add_action_server+0x26>
 8017d64:	6821      	ldr	r1, [r4, #0]
 8017d66:	4628      	mov	r0, r5
 8017d68:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8017d6c:	3104      	adds	r1, #4
 8017d6e:	f7ff fac5 	bl	80172fc <rcl_wait_set_add_service>
 8017d72:	2800      	cmp	r0, #0
 8017d74:	d1db      	bne.n	8017d2e <rcl_action_wait_set_add_action_server+0x26>
 8017d76:	6821      	ldr	r1, [r4, #0]
 8017d78:	4628      	mov	r0, r5
 8017d7a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8017d7e:	3108      	adds	r1, #8
 8017d80:	f7ff fabc 	bl	80172fc <rcl_wait_set_add_service>
 8017d84:	2800      	cmp	r0, #0
 8017d86:	d1d2      	bne.n	8017d2e <rcl_action_wait_set_add_action_server+0x26>
 8017d88:	6821      	ldr	r1, [r4, #0]
 8017d8a:	4628      	mov	r0, r5
 8017d8c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8017d90:	3114      	adds	r1, #20
 8017d92:	f7ff fa57 	bl	8017244 <rcl_wait_set_add_timer>
 8017d96:	2800      	cmp	r0, #0
 8017d98:	d1c9      	bne.n	8017d2e <rcl_action_wait_set_add_action_server+0x26>
 8017d9a:	2e00      	cmp	r6, #0
 8017d9c:	d0c7      	beq.n	8017d2e <rcl_action_wait_set_add_action_server+0x26>
 8017d9e:	6823      	ldr	r3, [r4, #0]
 8017da0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8017da4:	6033      	str	r3, [r6, #0]
 8017da6:	bd70      	pop	{r4, r5, r6, pc}
 8017da8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017dac:	4770      	bx	lr
 8017dae:	bf00      	nop

08017db0 <rcl_action_server_wait_set_get_entities_ready>:
 8017db0:	2800      	cmp	r0, #0
 8017db2:	d05a      	beq.n	8017e6a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8017db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017db6:	460c      	mov	r4, r1
 8017db8:	b161      	cbz	r1, 8017dd4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017dba:	4605      	mov	r5, r0
 8017dbc:	6808      	ldr	r0, [r1, #0]
 8017dbe:	b148      	cbz	r0, 8017dd4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017dc0:	4616      	mov	r6, r2
 8017dc2:	461f      	mov	r7, r3
 8017dc4:	f7fe fb7a 	bl	80164bc <rcl_service_is_valid>
 8017dc8:	b120      	cbz	r0, 8017dd4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017dca:	6820      	ldr	r0, [r4, #0]
 8017dcc:	3004      	adds	r0, #4
 8017dce:	f7fe fb75 	bl	80164bc <rcl_service_is_valid>
 8017dd2:	b910      	cbnz	r0, 8017dda <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8017dd4:	f640 0098 	movw	r0, #2200	@ 0x898
 8017dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dda:	6820      	ldr	r0, [r4, #0]
 8017ddc:	3008      	adds	r0, #8
 8017dde:	f7fe fb6d 	bl	80164bc <rcl_service_is_valid>
 8017de2:	2800      	cmp	r0, #0
 8017de4:	d0f6      	beq.n	8017dd4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017de6:	6820      	ldr	r0, [r4, #0]
 8017de8:	300c      	adds	r0, #12
 8017dea:	f7f8 f90f 	bl	801000c <rcl_publisher_is_valid_except_context>
 8017dee:	2800      	cmp	r0, #0
 8017df0:	d0f0      	beq.n	8017dd4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017df2:	6820      	ldr	r0, [r4, #0]
 8017df4:	3010      	adds	r0, #16
 8017df6:	f7f8 f909 	bl	801000c <rcl_publisher_is_valid_except_context>
 8017dfa:	2800      	cmp	r0, #0
 8017dfc:	d0ea      	beq.n	8017dd4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017dfe:	b3be      	cbz	r6, 8017e70 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8017e00:	b3b7      	cbz	r7, 8017e70 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8017e02:	9b06      	ldr	r3, [sp, #24]
 8017e04:	b3a3      	cbz	r3, 8017e70 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8017e06:	9b07      	ldr	r3, [sp, #28]
 8017e08:	b393      	cbz	r3, 8017e70 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8017e0a:	6821      	ldr	r1, [r4, #0]
 8017e0c:	692a      	ldr	r2, [r5, #16]
 8017e0e:	6a2c      	ldr	r4, [r5, #32]
 8017e10:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8017e14:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8017e18:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8017e1c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8017e20:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8017e24:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8017e28:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017e2c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8017e30:	1a64      	subs	r4, r4, r1
 8017e32:	fab4 f484 	clz	r4, r4
 8017e36:	0964      	lsrs	r4, r4, #5
 8017e38:	7034      	strb	r4, [r6, #0]
 8017e3a:	1d0c      	adds	r4, r1, #4
 8017e3c:	1b1b      	subs	r3, r3, r4
 8017e3e:	fab3 f383 	clz	r3, r3
 8017e42:	095b      	lsrs	r3, r3, #5
 8017e44:	f101 0408 	add.w	r4, r1, #8
 8017e48:	703b      	strb	r3, [r7, #0]
 8017e4a:	f101 0314 	add.w	r3, r1, #20
 8017e4e:	1b01      	subs	r1, r0, r4
 8017e50:	1ad3      	subs	r3, r2, r3
 8017e52:	fab1 f181 	clz	r1, r1
 8017e56:	9a06      	ldr	r2, [sp, #24]
 8017e58:	0949      	lsrs	r1, r1, #5
 8017e5a:	7011      	strb	r1, [r2, #0]
 8017e5c:	fab3 f383 	clz	r3, r3
 8017e60:	9a07      	ldr	r2, [sp, #28]
 8017e62:	095b      	lsrs	r3, r3, #5
 8017e64:	2000      	movs	r0, #0
 8017e66:	7013      	strb	r3, [r2, #0]
 8017e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e6a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017e6e:	4770      	bx	lr
 8017e70:	200b      	movs	r0, #11
 8017e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017e74 <_execute_event_handler>:
 8017e74:	2002      	movs	r0, #2
 8017e76:	4770      	bx	lr

08017e78 <_cancel_goal_event_handler>:
 8017e78:	2003      	movs	r0, #3
 8017e7a:	4770      	bx	lr

08017e7c <_succeed_event_handler>:
 8017e7c:	2004      	movs	r0, #4
 8017e7e:	4770      	bx	lr

08017e80 <_abort_event_handler>:
 8017e80:	2006      	movs	r0, #6
 8017e82:	4770      	bx	lr

08017e84 <_canceled_event_handler>:
 8017e84:	2005      	movs	r0, #5
 8017e86:	4770      	bx	lr

08017e88 <rcl_action_transition_goal_state>:
 8017e88:	b2c2      	uxtb	r2, r0
 8017e8a:	2a06      	cmp	r2, #6
 8017e8c:	d80c      	bhi.n	8017ea8 <rcl_action_transition_goal_state+0x20>
 8017e8e:	2904      	cmp	r1, #4
 8017e90:	d80a      	bhi.n	8017ea8 <rcl_action_transition_goal_state+0x20>
 8017e92:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8017e96:	b410      	push	{r4}
 8017e98:	1853      	adds	r3, r2, r1
 8017e9a:	4c06      	ldr	r4, [pc, #24]	@ (8017eb4 <rcl_action_transition_goal_state+0x2c>)
 8017e9c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017ea0:	b123      	cbz	r3, 8017eac <rcl_action_transition_goal_state+0x24>
 8017ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ea6:	4718      	bx	r3
 8017ea8:	2000      	movs	r0, #0
 8017eaa:	4770      	bx	lr
 8017eac:	2000      	movs	r0, #0
 8017eae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017eb2:	4770      	bx	lr
 8017eb4:	0801e1c4 	.word	0x0801e1c4

08017eb8 <rcl_action_get_zero_initialized_cancel_response>:
 8017eb8:	b510      	push	{r4, lr}
 8017eba:	4c07      	ldr	r4, [pc, #28]	@ (8017ed8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8017ebc:	4686      	mov	lr, r0
 8017ebe:	4684      	mov	ip, r0
 8017ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ec2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ec8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ecc:	6823      	ldr	r3, [r4, #0]
 8017ece:	f8cc 3000 	str.w	r3, [ip]
 8017ed2:	4670      	mov	r0, lr
 8017ed4:	bd10      	pop	{r4, pc}
 8017ed6:	bf00      	nop
 8017ed8:	0801e250 	.word	0x0801e250

08017edc <rclc_action_send_result_request>:
 8017edc:	b1d0      	cbz	r0, 8017f14 <rclc_action_send_result_request+0x38>
 8017ede:	b500      	push	{lr}
 8017ee0:	4684      	mov	ip, r0
 8017ee2:	b087      	sub	sp, #28
 8017ee4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8017ee8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8017eec:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8017ef0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8017ef4:	f10d 0e08 	add.w	lr, sp, #8
 8017ef8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017efc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8017f00:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8017f04:	a902      	add	r1, sp, #8
 8017f06:	3010      	adds	r0, #16
 8017f08:	f7ff fbda 	bl	80176c0 <rcl_action_send_result_request>
 8017f0c:	b920      	cbnz	r0, 8017f18 <rclc_action_send_result_request+0x3c>
 8017f0e:	b007      	add	sp, #28
 8017f10:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f14:	200b      	movs	r0, #11
 8017f16:	4770      	bx	lr
 8017f18:	9001      	str	r0, [sp, #4]
 8017f1a:	f7f8 ffe5 	bl	8010ee8 <rcutils_reset_error>
 8017f1e:	9801      	ldr	r0, [sp, #4]
 8017f20:	b007      	add	sp, #28
 8017f22:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f26:	bf00      	nop

08017f28 <rclc_action_take_goal_handle>:
 8017f28:	b160      	cbz	r0, 8017f44 <rclc_action_take_goal_handle+0x1c>
 8017f2a:	6883      	ldr	r3, [r0, #8]
 8017f2c:	b143      	cbz	r3, 8017f40 <rclc_action_take_goal_handle+0x18>
 8017f2e:	6819      	ldr	r1, [r3, #0]
 8017f30:	6081      	str	r1, [r0, #8]
 8017f32:	2200      	movs	r2, #0
 8017f34:	721a      	strb	r2, [r3, #8]
 8017f36:	68c1      	ldr	r1, [r0, #12]
 8017f38:	6019      	str	r1, [r3, #0]
 8017f3a:	621a      	str	r2, [r3, #32]
 8017f3c:	849a      	strh	r2, [r3, #36]	@ 0x24
 8017f3e:	60c3      	str	r3, [r0, #12]
 8017f40:	4618      	mov	r0, r3
 8017f42:	4770      	bx	lr
 8017f44:	4603      	mov	r3, r0
 8017f46:	e7fb      	b.n	8017f40 <rclc_action_take_goal_handle+0x18>

08017f48 <rclc_action_remove_used_goal_handle>:
 8017f48:	b180      	cbz	r0, 8017f6c <rclc_action_remove_used_goal_handle+0x24>
 8017f4a:	b179      	cbz	r1, 8017f6c <rclc_action_remove_used_goal_handle+0x24>
 8017f4c:	68c3      	ldr	r3, [r0, #12]
 8017f4e:	4299      	cmp	r1, r3
 8017f50:	d00d      	beq.n	8017f6e <rclc_action_remove_used_goal_handle+0x26>
 8017f52:	b12b      	cbz	r3, 8017f60 <rclc_action_remove_used_goal_handle+0x18>
 8017f54:	681a      	ldr	r2, [r3, #0]
 8017f56:	4291      	cmp	r1, r2
 8017f58:	d003      	beq.n	8017f62 <rclc_action_remove_used_goal_handle+0x1a>
 8017f5a:	4613      	mov	r3, r2
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d1f9      	bne.n	8017f54 <rclc_action_remove_used_goal_handle+0xc>
 8017f60:	4770      	bx	lr
 8017f62:	680a      	ldr	r2, [r1, #0]
 8017f64:	601a      	str	r2, [r3, #0]
 8017f66:	6883      	ldr	r3, [r0, #8]
 8017f68:	600b      	str	r3, [r1, #0]
 8017f6a:	6081      	str	r1, [r0, #8]
 8017f6c:	4770      	bx	lr
 8017f6e:	680b      	ldr	r3, [r1, #0]
 8017f70:	60c3      	str	r3, [r0, #12]
 8017f72:	e7f8      	b.n	8017f66 <rclc_action_remove_used_goal_handle+0x1e>

08017f74 <rclc_action_find_goal_handle_by_uuid>:
 8017f74:	b538      	push	{r3, r4, r5, lr}
 8017f76:	b180      	cbz	r0, 8017f9a <rclc_action_find_goal_handle_by_uuid+0x26>
 8017f78:	460d      	mov	r5, r1
 8017f7a:	b181      	cbz	r1, 8017f9e <rclc_action_find_goal_handle_by_uuid+0x2a>
 8017f7c:	68c4      	ldr	r4, [r0, #12]
 8017f7e:	b914      	cbnz	r4, 8017f86 <rclc_action_find_goal_handle_by_uuid+0x12>
 8017f80:	e009      	b.n	8017f96 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017f82:	6824      	ldr	r4, [r4, #0]
 8017f84:	b13c      	cbz	r4, 8017f96 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017f86:	f104 0009 	add.w	r0, r4, #9
 8017f8a:	2210      	movs	r2, #16
 8017f8c:	4629      	mov	r1, r5
 8017f8e:	f004 fe71 	bl	801cc74 <memcmp>
 8017f92:	2800      	cmp	r0, #0
 8017f94:	d1f5      	bne.n	8017f82 <rclc_action_find_goal_handle_by_uuid+0xe>
 8017f96:	4620      	mov	r0, r4
 8017f98:	bd38      	pop	{r3, r4, r5, pc}
 8017f9a:	4604      	mov	r4, r0
 8017f9c:	e7fb      	b.n	8017f96 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017f9e:	460c      	mov	r4, r1
 8017fa0:	e7f9      	b.n	8017f96 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017fa2:	bf00      	nop

08017fa4 <rclc_action_find_first_handle_by_status>:
 8017fa4:	b140      	cbz	r0, 8017fb8 <rclc_action_find_first_handle_by_status+0x14>
 8017fa6:	68c0      	ldr	r0, [r0, #12]
 8017fa8:	b910      	cbnz	r0, 8017fb0 <rclc_action_find_first_handle_by_status+0xc>
 8017faa:	e005      	b.n	8017fb8 <rclc_action_find_first_handle_by_status+0x14>
 8017fac:	6800      	ldr	r0, [r0, #0]
 8017fae:	b118      	cbz	r0, 8017fb8 <rclc_action_find_first_handle_by_status+0x14>
 8017fb0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017fb4:	428b      	cmp	r3, r1
 8017fb6:	d1f9      	bne.n	8017fac <rclc_action_find_first_handle_by_status+0x8>
 8017fb8:	4770      	bx	lr
 8017fba:	bf00      	nop

08017fbc <rclc_action_find_first_terminated_handle>:
 8017fbc:	b140      	cbz	r0, 8017fd0 <rclc_action_find_first_terminated_handle+0x14>
 8017fbe:	68c0      	ldr	r0, [r0, #12]
 8017fc0:	b910      	cbnz	r0, 8017fc8 <rclc_action_find_first_terminated_handle+0xc>
 8017fc2:	e005      	b.n	8017fd0 <rclc_action_find_first_terminated_handle+0x14>
 8017fc4:	6800      	ldr	r0, [r0, #0]
 8017fc6:	b118      	cbz	r0, 8017fd0 <rclc_action_find_first_terminated_handle+0x14>
 8017fc8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017fcc:	2b03      	cmp	r3, #3
 8017fce:	ddf9      	ble.n	8017fc4 <rclc_action_find_first_terminated_handle+0x8>
 8017fd0:	4770      	bx	lr
 8017fd2:	bf00      	nop

08017fd4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8017fd4:	b170      	cbz	r0, 8017ff4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017fd6:	68c0      	ldr	r0, [r0, #12]
 8017fd8:	b160      	cbz	r0, 8017ff4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017fda:	b410      	push	{r4}
 8017fdc:	e001      	b.n	8017fe2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8017fde:	6800      	ldr	r0, [r0, #0]
 8017fe0:	b128      	cbz	r0, 8017fee <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8017fe2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8017fe6:	4299      	cmp	r1, r3
 8017fe8:	bf08      	it	eq
 8017fea:	4294      	cmpeq	r4, r2
 8017fec:	d1f7      	bne.n	8017fde <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8017fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ff2:	4770      	bx	lr
 8017ff4:	4770      	bx	lr
 8017ff6:	bf00      	nop

08017ff8 <rclc_action_find_handle_by_result_request_sequence_number>:
 8017ff8:	b170      	cbz	r0, 8018018 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017ffa:	68c0      	ldr	r0, [r0, #12]
 8017ffc:	b160      	cbz	r0, 8018018 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017ffe:	b410      	push	{r4}
 8018000:	e001      	b.n	8018006 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8018002:	6800      	ldr	r0, [r0, #0]
 8018004:	b128      	cbz	r0, 8018012 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8018006:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801800a:	4299      	cmp	r1, r3
 801800c:	bf08      	it	eq
 801800e:	4294      	cmpeq	r4, r2
 8018010:	d1f7      	bne.n	8018002 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8018012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018016:	4770      	bx	lr
 8018018:	4770      	bx	lr
 801801a:	bf00      	nop

0801801c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801801c:	b170      	cbz	r0, 801803c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801801e:	68c0      	ldr	r0, [r0, #12]
 8018020:	b160      	cbz	r0, 801803c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018022:	b410      	push	{r4}
 8018024:	e001      	b.n	801802a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8018026:	6800      	ldr	r0, [r0, #0]
 8018028:	b128      	cbz	r0, 8018036 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801802a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801802e:	4299      	cmp	r1, r3
 8018030:	bf08      	it	eq
 8018032:	4294      	cmpeq	r4, r2
 8018034:	d1f7      	bne.n	8018026 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8018036:	f85d 4b04 	ldr.w	r4, [sp], #4
 801803a:	4770      	bx	lr
 801803c:	4770      	bx	lr
 801803e:	bf00      	nop

08018040 <rclc_action_find_first_handle_with_goal_response>:
 8018040:	b140      	cbz	r0, 8018054 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018042:	68c0      	ldr	r0, [r0, #12]
 8018044:	b910      	cbnz	r0, 801804c <rclc_action_find_first_handle_with_goal_response+0xc>
 8018046:	e005      	b.n	8018054 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018048:	6800      	ldr	r0, [r0, #0]
 801804a:	b118      	cbz	r0, 8018054 <rclc_action_find_first_handle_with_goal_response+0x14>
 801804c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d0f9      	beq.n	8018048 <rclc_action_find_first_handle_with_goal_response+0x8>
 8018054:	4770      	bx	lr
 8018056:	bf00      	nop

08018058 <rclc_action_find_first_handle_with_result_response>:
 8018058:	b140      	cbz	r0, 801806c <rclc_action_find_first_handle_with_result_response+0x14>
 801805a:	68c0      	ldr	r0, [r0, #12]
 801805c:	b910      	cbnz	r0, 8018064 <rclc_action_find_first_handle_with_result_response+0xc>
 801805e:	e005      	b.n	801806c <rclc_action_find_first_handle_with_result_response+0x14>
 8018060:	6800      	ldr	r0, [r0, #0]
 8018062:	b118      	cbz	r0, 801806c <rclc_action_find_first_handle_with_result_response+0x14>
 8018064:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8018068:	2b00      	cmp	r3, #0
 801806a:	d0f9      	beq.n	8018060 <rclc_action_find_first_handle_with_result_response+0x8>
 801806c:	4770      	bx	lr
 801806e:	bf00      	nop

08018070 <rclc_action_server_response_goal_request>:
 8018070:	b198      	cbz	r0, 801809a <rclc_action_server_response_goal_request+0x2a>
 8018072:	b510      	push	{r4, lr}
 8018074:	6844      	ldr	r4, [r0, #4]
 8018076:	b086      	sub	sp, #24
 8018078:	2200      	movs	r2, #0
 801807a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801807e:	460b      	mov	r3, r1
 8018080:	9205      	str	r2, [sp, #20]
 8018082:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8018086:	aa03      	add	r2, sp, #12
 8018088:	f104 0010 	add.w	r0, r4, #16
 801808c:	f88d 300c 	strb.w	r3, [sp, #12]
 8018090:	f7ff fd4a 	bl	8017b28 <rcl_action_send_goal_response>
 8018094:	b918      	cbnz	r0, 801809e <rclc_action_server_response_goal_request+0x2e>
 8018096:	b006      	add	sp, #24
 8018098:	bd10      	pop	{r4, pc}
 801809a:	200b      	movs	r0, #11
 801809c:	4770      	bx	lr
 801809e:	9001      	str	r0, [sp, #4]
 80180a0:	f7f8 ff22 	bl	8010ee8 <rcutils_reset_error>
 80180a4:	9801      	ldr	r0, [sp, #4]
 80180a6:	b006      	add	sp, #24
 80180a8:	bd10      	pop	{r4, pc}
 80180aa:	bf00      	nop
 80180ac:	0000      	movs	r0, r0
	...

080180b0 <rclc_action_server_goal_cancel_accept>:
 80180b0:	b310      	cbz	r0, 80180f8 <rclc_action_server_goal_cancel_accept+0x48>
 80180b2:	b510      	push	{r4, lr}
 80180b4:	b090      	sub	sp, #64	@ 0x40
 80180b6:	4604      	mov	r4, r0
 80180b8:	a806      	add	r0, sp, #24
 80180ba:	f7ff fefd 	bl	8017eb8 <rcl_action_get_zero_initialized_cancel_response>
 80180be:	2300      	movs	r3, #0
 80180c0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80180c4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80180c8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80180cc:	f88d 3018 	strb.w	r3, [sp, #24]
 80180d0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80180d4:	f8cd d01c 	str.w	sp, [sp, #28]
 80180d8:	46ec      	mov	ip, sp
 80180da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80180de:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8018100 <rclc_action_server_goal_cancel_accept+0x50>
 80180e2:	6860      	ldr	r0, [r4, #4]
 80180e4:	aa06      	add	r2, sp, #24
 80180e6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80180ea:	3010      	adds	r0, #16
 80180ec:	ed8d 7b08 	vstr	d7, [sp, #32]
 80180f0:	f7ff fdd2 	bl	8017c98 <rcl_action_send_cancel_response>
 80180f4:	b010      	add	sp, #64	@ 0x40
 80180f6:	bd10      	pop	{r4, pc}
 80180f8:	200b      	movs	r0, #11
 80180fa:	4770      	bx	lr
 80180fc:	f3af 8000 	nop.w
 8018100:	00000001 	.word	0x00000001
 8018104:	00000001 	.word	0x00000001

08018108 <rclc_action_server_goal_cancel_reject>:
 8018108:	b082      	sub	sp, #8
 801810a:	b530      	push	{r4, r5, lr}
 801810c:	b08b      	sub	sp, #44	@ 0x2c
 801810e:	ac0e      	add	r4, sp, #56	@ 0x38
 8018110:	e884 000c 	stmia.w	r4, {r2, r3}
 8018114:	b188      	cbz	r0, 801813a <rclc_action_server_goal_cancel_reject+0x32>
 8018116:	4604      	mov	r4, r0
 8018118:	a801      	add	r0, sp, #4
 801811a:	460d      	mov	r5, r1
 801811c:	f7ff fecc 	bl	8017eb8 <rcl_action_get_zero_initialized_cancel_response>
 8018120:	aa01      	add	r2, sp, #4
 8018122:	a90e      	add	r1, sp, #56	@ 0x38
 8018124:	f104 0010 	add.w	r0, r4, #16
 8018128:	f88d 5004 	strb.w	r5, [sp, #4]
 801812c:	f7ff fdb4 	bl	8017c98 <rcl_action_send_cancel_response>
 8018130:	b00b      	add	sp, #44	@ 0x2c
 8018132:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018136:	b002      	add	sp, #8
 8018138:	4770      	bx	lr
 801813a:	200b      	movs	r0, #11
 801813c:	b00b      	add	sp, #44	@ 0x2c
 801813e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018142:	b002      	add	sp, #8
 8018144:	4770      	bx	lr
 8018146:	bf00      	nop

08018148 <__atomic_load_8>:
 8018148:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801814c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8018150:	4a15      	ldr	r2, [pc, #84]	@ (80181a8 <__atomic_load_8+0x60>)
 8018152:	4b16      	ldr	r3, [pc, #88]	@ (80181ac <__atomic_load_8+0x64>)
 8018154:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8018158:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801815c:	fb02 f101 	mul.w	r1, r2, r1
 8018160:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8018164:	fba3 2301 	umull	r2, r3, r3, r1
 8018168:	091b      	lsrs	r3, r3, #4
 801816a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801816e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8018172:	b4d0      	push	{r4, r6, r7}
 8018174:	4c0e      	ldr	r4, [pc, #56]	@ (80181b0 <__atomic_load_8+0x68>)
 8018176:	1ac9      	subs	r1, r1, r3
 8018178:	1862      	adds	r2, r4, r1
 801817a:	f04f 0c01 	mov.w	ip, #1
 801817e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8018182:	e8c2 cf46 	strexb	r6, ip, [r2]
 8018186:	2e00      	cmp	r6, #0
 8018188:	d1f9      	bne.n	801817e <__atomic_load_8+0x36>
 801818a:	f3bf 8f5b 	dmb	ish
 801818e:	b2db      	uxtb	r3, r3
 8018190:	2b00      	cmp	r3, #0
 8018192:	d1f4      	bne.n	801817e <__atomic_load_8+0x36>
 8018194:	e9d0 6700 	ldrd	r6, r7, [r0]
 8018198:	f3bf 8f5b 	dmb	ish
 801819c:	5463      	strb	r3, [r4, r1]
 801819e:	4630      	mov	r0, r6
 80181a0:	4639      	mov	r1, r7
 80181a2:	bcd0      	pop	{r4, r6, r7}
 80181a4:	4770      	bx	lr
 80181a6:	bf00      	nop
 80181a8:	27d4eb2d 	.word	0x27d4eb2d
 80181ac:	b21642c9 	.word	0xb21642c9
 80181b0:	20012c70 	.word	0x20012c70

080181b4 <__atomic_store_8>:
 80181b4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80181b8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80181bc:	b570      	push	{r4, r5, r6, lr}
 80181be:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80181c2:	4c14      	ldr	r4, [pc, #80]	@ (8018214 <__atomic_store_8+0x60>)
 80181c4:	4d14      	ldr	r5, [pc, #80]	@ (8018218 <__atomic_store_8+0x64>)
 80181c6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80181ca:	fb04 f101 	mul.w	r1, r4, r1
 80181ce:	4c13      	ldr	r4, [pc, #76]	@ (801821c <__atomic_store_8+0x68>)
 80181d0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80181d4:	fba4 4e01 	umull	r4, lr, r4, r1
 80181d8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80181dc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80181e0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80181e4:	eba1 0e0e 	sub.w	lr, r1, lr
 80181e8:	eb05 0c0e 	add.w	ip, r5, lr
 80181ec:	f04f 0401 	mov.w	r4, #1
 80181f0:	e8dc 1f4f 	ldrexb	r1, [ip]
 80181f4:	e8cc 4f46 	strexb	r6, r4, [ip]
 80181f8:	2e00      	cmp	r6, #0
 80181fa:	d1f9      	bne.n	80181f0 <__atomic_store_8+0x3c>
 80181fc:	f3bf 8f5b 	dmb	ish
 8018200:	b2c9      	uxtb	r1, r1
 8018202:	2900      	cmp	r1, #0
 8018204:	d1f4      	bne.n	80181f0 <__atomic_store_8+0x3c>
 8018206:	e9c0 2300 	strd	r2, r3, [r0]
 801820a:	f3bf 8f5b 	dmb	ish
 801820e:	f805 100e 	strb.w	r1, [r5, lr]
 8018212:	bd70      	pop	{r4, r5, r6, pc}
 8018214:	27d4eb2d 	.word	0x27d4eb2d
 8018218:	20012c70 	.word	0x20012c70
 801821c:	b21642c9 	.word	0xb21642c9

08018220 <__atomic_exchange_8>:
 8018220:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8018224:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8018228:	4916      	ldr	r1, [pc, #88]	@ (8018284 <__atomic_exchange_8+0x64>)
 801822a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801822e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8018232:	fb01 fc0c 	mul.w	ip, r1, ip
 8018236:	4914      	ldr	r1, [pc, #80]	@ (8018288 <__atomic_exchange_8+0x68>)
 8018238:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801823c:	b570      	push	{r4, r5, r6, lr}
 801823e:	4605      	mov	r5, r0
 8018240:	fba1 010c 	umull	r0, r1, r1, ip
 8018244:	0909      	lsrs	r1, r1, #4
 8018246:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801824a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801824e:	4e0f      	ldr	r6, [pc, #60]	@ (801828c <__atomic_exchange_8+0x6c>)
 8018250:	ebac 0c01 	sub.w	ip, ip, r1
 8018254:	eb06 010c 	add.w	r1, r6, ip
 8018258:	f04f 0e01 	mov.w	lr, #1
 801825c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8018260:	e8c1 ef40 	strexb	r0, lr, [r1]
 8018264:	2800      	cmp	r0, #0
 8018266:	d1f9      	bne.n	801825c <__atomic_exchange_8+0x3c>
 8018268:	f3bf 8f5b 	dmb	ish
 801826c:	b2e4      	uxtb	r4, r4
 801826e:	2c00      	cmp	r4, #0
 8018270:	d1f4      	bne.n	801825c <__atomic_exchange_8+0x3c>
 8018272:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018276:	e9c5 2300 	strd	r2, r3, [r5]
 801827a:	f3bf 8f5b 	dmb	ish
 801827e:	f806 400c 	strb.w	r4, [r6, ip]
 8018282:	bd70      	pop	{r4, r5, r6, pc}
 8018284:	27d4eb2d 	.word	0x27d4eb2d
 8018288:	b21642c9 	.word	0xb21642c9
 801828c:	20012c70 	.word	0x20012c70

08018290 <rcutils_get_env>:
 8018290:	b168      	cbz	r0, 80182ae <rcutils_get_env+0x1e>
 8018292:	b510      	push	{r4, lr}
 8018294:	460c      	mov	r4, r1
 8018296:	b129      	cbz	r1, 80182a4 <rcutils_get_env+0x14>
 8018298:	f004 f848 	bl	801c32c <getenv>
 801829c:	b120      	cbz	r0, 80182a8 <rcutils_get_env+0x18>
 801829e:	6020      	str	r0, [r4, #0]
 80182a0:	2000      	movs	r0, #0
 80182a2:	bd10      	pop	{r4, pc}
 80182a4:	4803      	ldr	r0, [pc, #12]	@ (80182b4 <rcutils_get_env+0x24>)
 80182a6:	bd10      	pop	{r4, pc}
 80182a8:	4b03      	ldr	r3, [pc, #12]	@ (80182b8 <rcutils_get_env+0x28>)
 80182aa:	6023      	str	r3, [r4, #0]
 80182ac:	bd10      	pop	{r4, pc}
 80182ae:	4803      	ldr	r0, [pc, #12]	@ (80182bc <rcutils_get_env+0x2c>)
 80182b0:	4770      	bx	lr
 80182b2:	bf00      	nop
 80182b4:	0801e290 	.word	0x0801e290
 80182b8:	0801e3b4 	.word	0x0801e3b4
 80182bc:	0801e274 	.word	0x0801e274

080182c0 <rcutils_format_string_limit>:
 80182c0:	b40f      	push	{r0, r1, r2, r3}
 80182c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182c4:	b083      	sub	sp, #12
 80182c6:	ac08      	add	r4, sp, #32
 80182c8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80182ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80182ce:	b34e      	cbz	r6, 8018324 <rcutils_format_string_limit+0x64>
 80182d0:	a808      	add	r0, sp, #32
 80182d2:	f7f8 fde5 	bl	8010ea0 <rcutils_allocator_is_valid>
 80182d6:	b328      	cbz	r0, 8018324 <rcutils_format_string_limit+0x64>
 80182d8:	2100      	movs	r1, #0
 80182da:	ab0f      	add	r3, sp, #60	@ 0x3c
 80182dc:	4632      	mov	r2, r6
 80182de:	4608      	mov	r0, r1
 80182e0:	e9cd 3300 	strd	r3, r3, [sp]
 80182e4:	f000 f8f4 	bl	80184d0 <rcutils_vsnprintf>
 80182e8:	1c43      	adds	r3, r0, #1
 80182ea:	4605      	mov	r5, r0
 80182ec:	d01a      	beq.n	8018324 <rcutils_format_string_limit+0x64>
 80182ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80182f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80182f2:	1c47      	adds	r7, r0, #1
 80182f4:	429f      	cmp	r7, r3
 80182f6:	bf84      	itt	hi
 80182f8:	461f      	movhi	r7, r3
 80182fa:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 80182fe:	4638      	mov	r0, r7
 8018300:	9b08      	ldr	r3, [sp, #32]
 8018302:	4798      	blx	r3
 8018304:	4604      	mov	r4, r0
 8018306:	b168      	cbz	r0, 8018324 <rcutils_format_string_limit+0x64>
 8018308:	9b01      	ldr	r3, [sp, #4]
 801830a:	4632      	mov	r2, r6
 801830c:	4639      	mov	r1, r7
 801830e:	f000 f8df 	bl	80184d0 <rcutils_vsnprintf>
 8018312:	2800      	cmp	r0, #0
 8018314:	db02      	blt.n	801831c <rcutils_format_string_limit+0x5c>
 8018316:	2300      	movs	r3, #0
 8018318:	5563      	strb	r3, [r4, r5]
 801831a:	e004      	b.n	8018326 <rcutils_format_string_limit+0x66>
 801831c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801831e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018320:	4620      	mov	r0, r4
 8018322:	4798      	blx	r3
 8018324:	2400      	movs	r4, #0
 8018326:	4620      	mov	r0, r4
 8018328:	b003      	add	sp, #12
 801832a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801832e:	b004      	add	sp, #16
 8018330:	4770      	bx	lr
 8018332:	bf00      	nop

08018334 <rcutils_repl_str>:
 8018334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018338:	ed2d 8b02 	vpush	{d8}
 801833c:	b087      	sub	sp, #28
 801833e:	4680      	mov	r8, r0
 8018340:	4608      	mov	r0, r1
 8018342:	f8cd 8004 	str.w	r8, [sp, #4]
 8018346:	ee08 2a10 	vmov	s16, r2
 801834a:	468a      	mov	sl, r1
 801834c:	4699      	mov	r9, r3
 801834e:	f7e7 ff49 	bl	80001e4 <strlen>
 8018352:	2600      	movs	r6, #0
 8018354:	4647      	mov	r7, r8
 8018356:	9002      	str	r0, [sp, #8]
 8018358:	46b3      	mov	fp, r6
 801835a:	2510      	movs	r5, #16
 801835c:	46b0      	mov	r8, r6
 801835e:	e01d      	b.n	801839c <rcutils_repl_str+0x68>
 8018360:	f10b 0b01 	add.w	fp, fp, #1
 8018364:	455e      	cmp	r6, fp
 8018366:	d211      	bcs.n	801838c <rcutils_repl_str+0x58>
 8018368:	442e      	add	r6, r5
 801836a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801836e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018372:	00b1      	lsls	r1, r6, #2
 8018374:	4798      	blx	r3
 8018376:	2800      	cmp	r0, #0
 8018378:	f000 8088 	beq.w	801848c <rcutils_repl_str+0x158>
 801837c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018380:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8018384:	4680      	mov	r8, r0
 8018386:	bf28      	it	cs
 8018388:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801838c:	9a01      	ldr	r2, [sp, #4]
 801838e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8018392:	1aa2      	subs	r2, r4, r2
 8018394:	f843 2c04 	str.w	r2, [r3, #-4]
 8018398:	9b02      	ldr	r3, [sp, #8]
 801839a:	18e7      	adds	r7, r4, r3
 801839c:	4651      	mov	r1, sl
 801839e:	4638      	mov	r0, r7
 80183a0:	f004 fcb9 	bl	801cd16 <strstr>
 80183a4:	4604      	mov	r4, r0
 80183a6:	4640      	mov	r0, r8
 80183a8:	2c00      	cmp	r4, #0
 80183aa:	d1d9      	bne.n	8018360 <rcutils_repl_str+0x2c>
 80183ac:	46b8      	mov	r8, r7
 80183ae:	4607      	mov	r7, r0
 80183b0:	4640      	mov	r0, r8
 80183b2:	f7e7 ff17 	bl	80001e4 <strlen>
 80183b6:	9b01      	ldr	r3, [sp, #4]
 80183b8:	eba8 0303 	sub.w	r3, r8, r3
 80183bc:	181c      	adds	r4, r3, r0
 80183be:	9404      	str	r4, [sp, #16]
 80183c0:	f1bb 0f00 	cmp.w	fp, #0
 80183c4:	d04a      	beq.n	801845c <rcutils_repl_str+0x128>
 80183c6:	ee18 0a10 	vmov	r0, s16
 80183ca:	f7e7 ff0b 	bl	80001e4 <strlen>
 80183ce:	9b02      	ldr	r3, [sp, #8]
 80183d0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80183d4:	1ac3      	subs	r3, r0, r3
 80183d6:	fb0b 4303 	mla	r3, fp, r3, r4
 80183da:	461a      	mov	r2, r3
 80183dc:	9305      	str	r3, [sp, #20]
 80183de:	4606      	mov	r6, r0
 80183e0:	f8d9 3000 	ldr.w	r3, [r9]
 80183e4:	1c50      	adds	r0, r2, #1
 80183e6:	4798      	blx	r3
 80183e8:	9003      	str	r0, [sp, #12]
 80183ea:	2800      	cmp	r0, #0
 80183ec:	d04f      	beq.n	801848e <rcutils_repl_str+0x15a>
 80183ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80183f2:	683a      	ldr	r2, [r7, #0]
 80183f4:	4641      	mov	r1, r8
 80183f6:	f004 fd30 	bl	801ce5a <memcpy>
 80183fa:	683d      	ldr	r5, [r7, #0]
 80183fc:	9b03      	ldr	r3, [sp, #12]
 80183fe:	9701      	str	r7, [sp, #4]
 8018400:	46ba      	mov	sl, r7
 8018402:	441d      	add	r5, r3
 8018404:	9f02      	ldr	r7, [sp, #8]
 8018406:	f8cd 9008 	str.w	r9, [sp, #8]
 801840a:	2401      	movs	r4, #1
 801840c:	46d1      	mov	r9, sl
 801840e:	ee18 aa10 	vmov	sl, s16
 8018412:	e00a      	b.n	801842a <rcutils_repl_str+0xf6>
 8018414:	f8d9 5000 	ldr.w	r5, [r9]
 8018418:	1aaa      	subs	r2, r5, r2
 801841a:	1885      	adds	r5, r0, r2
 801841c:	f004 fd1d 	bl	801ce5a <memcpy>
 8018420:	45a3      	cmp	fp, r4
 8018422:	f104 0201 	add.w	r2, r4, #1
 8018426:	d935      	bls.n	8018494 <rcutils_repl_str+0x160>
 8018428:	4614      	mov	r4, r2
 801842a:	4632      	mov	r2, r6
 801842c:	4651      	mov	r1, sl
 801842e:	4628      	mov	r0, r5
 8018430:	f004 fd13 	bl	801ce5a <memcpy>
 8018434:	f859 2b04 	ldr.w	r2, [r9], #4
 8018438:	45a3      	cmp	fp, r4
 801843a:	443a      	add	r2, r7
 801843c:	eb05 0006 	add.w	r0, r5, r6
 8018440:	eb08 0102 	add.w	r1, r8, r2
 8018444:	d1e6      	bne.n	8018414 <rcutils_repl_str+0xe0>
 8018446:	9b04      	ldr	r3, [sp, #16]
 8018448:	1a9a      	subs	r2, r3, r2
 801844a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801844e:	f004 fd04 	bl	801ce5a <memcpy>
 8018452:	9a03      	ldr	r2, [sp, #12]
 8018454:	9905      	ldr	r1, [sp, #20]
 8018456:	2300      	movs	r3, #0
 8018458:	5453      	strb	r3, [r2, r1]
 801845a:	e00b      	b.n	8018474 <rcutils_repl_str+0x140>
 801845c:	4620      	mov	r0, r4
 801845e:	f8d9 3000 	ldr.w	r3, [r9]
 8018462:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018466:	3001      	adds	r0, #1
 8018468:	4798      	blx	r3
 801846a:	9003      	str	r0, [sp, #12]
 801846c:	b110      	cbz	r0, 8018474 <rcutils_repl_str+0x140>
 801846e:	9901      	ldr	r1, [sp, #4]
 8018470:	f004 fceb 	bl	801ce4a <strcpy>
 8018474:	4638      	mov	r0, r7
 8018476:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801847a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801847e:	4798      	blx	r3
 8018480:	9803      	ldr	r0, [sp, #12]
 8018482:	b007      	add	sp, #28
 8018484:	ecbd 8b02 	vpop	{d8}
 8018488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801848c:	4647      	mov	r7, r8
 801848e:	2300      	movs	r3, #0
 8018490:	9303      	str	r3, [sp, #12]
 8018492:	e7ef      	b.n	8018474 <rcutils_repl_str+0x140>
 8018494:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8018498:	e7db      	b.n	8018452 <rcutils_repl_str+0x11e>
 801849a:	bf00      	nop

0801849c <rcutils_snprintf>:
 801849c:	b40c      	push	{r2, r3}
 801849e:	b530      	push	{r4, r5, lr}
 80184a0:	b083      	sub	sp, #12
 80184a2:	ab06      	add	r3, sp, #24
 80184a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80184a8:	9301      	str	r3, [sp, #4]
 80184aa:	b152      	cbz	r2, 80184c2 <rcutils_snprintf+0x26>
 80184ac:	b138      	cbz	r0, 80184be <rcutils_snprintf+0x22>
 80184ae:	b141      	cbz	r1, 80184c2 <rcutils_snprintf+0x26>
 80184b0:	f004 fb3e 	bl	801cb30 <vsniprintf>
 80184b4:	b003      	add	sp, #12
 80184b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184ba:	b002      	add	sp, #8
 80184bc:	4770      	bx	lr
 80184be:	2900      	cmp	r1, #0
 80184c0:	d0f6      	beq.n	80184b0 <rcutils_snprintf+0x14>
 80184c2:	f004 fc95 	bl	801cdf0 <__errno>
 80184c6:	2316      	movs	r3, #22
 80184c8:	6003      	str	r3, [r0, #0]
 80184ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80184ce:	e7f1      	b.n	80184b4 <rcutils_snprintf+0x18>

080184d0 <rcutils_vsnprintf>:
 80184d0:	b570      	push	{r4, r5, r6, lr}
 80184d2:	b13a      	cbz	r2, 80184e4 <rcutils_vsnprintf+0x14>
 80184d4:	b120      	cbz	r0, 80184e0 <rcutils_vsnprintf+0x10>
 80184d6:	b129      	cbz	r1, 80184e4 <rcutils_vsnprintf+0x14>
 80184d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184dc:	f004 bb28 	b.w	801cb30 <vsniprintf>
 80184e0:	2900      	cmp	r1, #0
 80184e2:	d0f9      	beq.n	80184d8 <rcutils_vsnprintf+0x8>
 80184e4:	f004 fc84 	bl	801cdf0 <__errno>
 80184e8:	2316      	movs	r3, #22
 80184ea:	6003      	str	r3, [r0, #0]
 80184ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80184f0:	bd70      	pop	{r4, r5, r6, pc}
 80184f2:	bf00      	nop

080184f4 <rcutils_strdup>:
 80184f4:	b084      	sub	sp, #16
 80184f6:	b570      	push	{r4, r5, r6, lr}
 80184f8:	b082      	sub	sp, #8
 80184fa:	ac07      	add	r4, sp, #28
 80184fc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8018500:	4605      	mov	r5, r0
 8018502:	b1b0      	cbz	r0, 8018532 <rcutils_strdup+0x3e>
 8018504:	f7e7 fe6e 	bl	80001e4 <strlen>
 8018508:	1c42      	adds	r2, r0, #1
 801850a:	9b07      	ldr	r3, [sp, #28]
 801850c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801850e:	9201      	str	r2, [sp, #4]
 8018510:	4606      	mov	r6, r0
 8018512:	4610      	mov	r0, r2
 8018514:	4798      	blx	r3
 8018516:	4604      	mov	r4, r0
 8018518:	b128      	cbz	r0, 8018526 <rcutils_strdup+0x32>
 801851a:	9a01      	ldr	r2, [sp, #4]
 801851c:	4629      	mov	r1, r5
 801851e:	f004 fc9c 	bl	801ce5a <memcpy>
 8018522:	2300      	movs	r3, #0
 8018524:	55a3      	strb	r3, [r4, r6]
 8018526:	4620      	mov	r0, r4
 8018528:	b002      	add	sp, #8
 801852a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801852e:	b004      	add	sp, #16
 8018530:	4770      	bx	lr
 8018532:	4604      	mov	r4, r0
 8018534:	e7f7      	b.n	8018526 <rcutils_strdup+0x32>
 8018536:	bf00      	nop

08018538 <rcutils_strndup>:
 8018538:	b082      	sub	sp, #8
 801853a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801853c:	ac06      	add	r4, sp, #24
 801853e:	e884 000c 	stmia.w	r4, {r2, r3}
 8018542:	4605      	mov	r5, r0
 8018544:	b188      	cbz	r0, 801856a <rcutils_strndup+0x32>
 8018546:	1c4f      	adds	r7, r1, #1
 8018548:	460e      	mov	r6, r1
 801854a:	4638      	mov	r0, r7
 801854c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801854e:	4790      	blx	r2
 8018550:	4604      	mov	r4, r0
 8018552:	b128      	cbz	r0, 8018560 <rcutils_strndup+0x28>
 8018554:	463a      	mov	r2, r7
 8018556:	4629      	mov	r1, r5
 8018558:	f004 fc7f 	bl	801ce5a <memcpy>
 801855c:	2300      	movs	r3, #0
 801855e:	55a3      	strb	r3, [r4, r6]
 8018560:	4620      	mov	r0, r4
 8018562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018566:	b002      	add	sp, #8
 8018568:	4770      	bx	lr
 801856a:	4604      	mov	r4, r0
 801856c:	e7f8      	b.n	8018560 <rcutils_strndup+0x28>
 801856e:	bf00      	nop

08018570 <rcutils_get_zero_initialized_string_map>:
 8018570:	4b01      	ldr	r3, [pc, #4]	@ (8018578 <rcutils_get_zero_initialized_string_map+0x8>)
 8018572:	2000      	movs	r0, #0
 8018574:	6018      	str	r0, [r3, #0]
 8018576:	4770      	bx	lr
 8018578:	20012c88 	.word	0x20012c88

0801857c <rcutils_string_map_reserve>:
 801857c:	2800      	cmp	r0, #0
 801857e:	d05f      	beq.n	8018640 <rcutils_string_map_reserve+0xc4>
 8018580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018584:	460c      	mov	r4, r1
 8018586:	6801      	ldr	r1, [r0, #0]
 8018588:	b082      	sub	sp, #8
 801858a:	4605      	mov	r5, r0
 801858c:	b129      	cbz	r1, 801859a <rcutils_string_map_reserve+0x1e>
 801858e:	68cb      	ldr	r3, [r1, #12]
 8018590:	42a3      	cmp	r3, r4
 8018592:	d906      	bls.n	80185a2 <rcutils_string_map_reserve+0x26>
 8018594:	461c      	mov	r4, r3
 8018596:	2900      	cmp	r1, #0
 8018598:	d1f9      	bne.n	801858e <rcutils_string_map_reserve+0x12>
 801859a:	201f      	movs	r0, #31
 801859c:	b002      	add	sp, #8
 801859e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185a2:	688b      	ldr	r3, [r1, #8]
 80185a4:	42a3      	cmp	r3, r4
 80185a6:	d047      	beq.n	8018638 <rcutils_string_map_reserve+0xbc>
 80185a8:	6a0e      	ldr	r6, [r1, #32]
 80185aa:	2c00      	cmp	r4, #0
 80185ac:	d034      	beq.n	8018618 <rcutils_string_map_reserve+0x9c>
 80185ae:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80185b2:	d243      	bcs.n	801863c <rcutils_string_map_reserve+0xc0>
 80185b4:	00a7      	lsls	r7, r4, #2
 80185b6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80185ba:	6808      	ldr	r0, [r1, #0]
 80185bc:	4632      	mov	r2, r6
 80185be:	4639      	mov	r1, r7
 80185c0:	47c0      	blx	r8
 80185c2:	2800      	cmp	r0, #0
 80185c4:	d03a      	beq.n	801863c <rcutils_string_map_reserve+0xc0>
 80185c6:	682b      	ldr	r3, [r5, #0]
 80185c8:	4632      	mov	r2, r6
 80185ca:	6018      	str	r0, [r3, #0]
 80185cc:	4639      	mov	r1, r7
 80185ce:	6858      	ldr	r0, [r3, #4]
 80185d0:	47c0      	blx	r8
 80185d2:	2800      	cmp	r0, #0
 80185d4:	d032      	beq.n	801863c <rcutils_string_map_reserve+0xc0>
 80185d6:	682d      	ldr	r5, [r5, #0]
 80185d8:	68ab      	ldr	r3, [r5, #8]
 80185da:	6068      	str	r0, [r5, #4]
 80185dc:	42a3      	cmp	r3, r4
 80185de:	d226      	bcs.n	801862e <rcutils_string_map_reserve+0xb2>
 80185e0:	682a      	ldr	r2, [r5, #0]
 80185e2:	eb00 0c07 	add.w	ip, r0, r7
 80185e6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80185ea:	45e6      	cmp	lr, ip
 80185ec:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80185f0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80185f4:	d203      	bcs.n	80185fe <rcutils_string_map_reserve+0x82>
 80185f6:	eb02 0c07 	add.w	ip, r2, r7
 80185fa:	4566      	cmp	r6, ip
 80185fc:	d322      	bcc.n	8018644 <rcutils_string_map_reserve+0xc8>
 80185fe:	1ae3      	subs	r3, r4, r3
 8018600:	009a      	lsls	r2, r3, #2
 8018602:	4670      	mov	r0, lr
 8018604:	2100      	movs	r1, #0
 8018606:	9201      	str	r2, [sp, #4]
 8018608:	f004 fb5e 	bl	801ccc8 <memset>
 801860c:	9a01      	ldr	r2, [sp, #4]
 801860e:	2100      	movs	r1, #0
 8018610:	4630      	mov	r0, r6
 8018612:	f004 fb59 	bl	801ccc8 <memset>
 8018616:	e00a      	b.n	801862e <rcutils_string_map_reserve+0xb2>
 8018618:	694f      	ldr	r7, [r1, #20]
 801861a:	6808      	ldr	r0, [r1, #0]
 801861c:	4631      	mov	r1, r6
 801861e:	47b8      	blx	r7
 8018620:	682b      	ldr	r3, [r5, #0]
 8018622:	4631      	mov	r1, r6
 8018624:	6858      	ldr	r0, [r3, #4]
 8018626:	601c      	str	r4, [r3, #0]
 8018628:	47b8      	blx	r7
 801862a:	682d      	ldr	r5, [r5, #0]
 801862c:	606c      	str	r4, [r5, #4]
 801862e:	2000      	movs	r0, #0
 8018630:	60ac      	str	r4, [r5, #8]
 8018632:	b002      	add	sp, #8
 8018634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018638:	2000      	movs	r0, #0
 801863a:	e7af      	b.n	801859c <rcutils_string_map_reserve+0x20>
 801863c:	200a      	movs	r0, #10
 801863e:	e7ad      	b.n	801859c <rcutils_string_map_reserve+0x20>
 8018640:	200b      	movs	r0, #11
 8018642:	4770      	bx	lr
 8018644:	1f0b      	subs	r3, r1, #4
 8018646:	4418      	add	r0, r3
 8018648:	4413      	add	r3, r2
 801864a:	3a04      	subs	r2, #4
 801864c:	4417      	add	r7, r2
 801864e:	2200      	movs	r2, #0
 8018650:	f843 2f04 	str.w	r2, [r3, #4]!
 8018654:	42bb      	cmp	r3, r7
 8018656:	f840 2f04 	str.w	r2, [r0, #4]!
 801865a:	d1f9      	bne.n	8018650 <rcutils_string_map_reserve+0xd4>
 801865c:	e7e7      	b.n	801862e <rcutils_string_map_reserve+0xb2>
 801865e:	bf00      	nop

08018660 <rcutils_string_map_init>:
 8018660:	b082      	sub	sp, #8
 8018662:	b570      	push	{r4, r5, r6, lr}
 8018664:	ac04      	add	r4, sp, #16
 8018666:	e884 000c 	stmia.w	r4, {r2, r3}
 801866a:	b380      	cbz	r0, 80186ce <rcutils_string_map_init+0x6e>
 801866c:	6806      	ldr	r6, [r0, #0]
 801866e:	4604      	mov	r4, r0
 8018670:	b12e      	cbz	r6, 801867e <rcutils_string_map_init+0x1e>
 8018672:	251e      	movs	r5, #30
 8018674:	4628      	mov	r0, r5
 8018676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801867a:	b002      	add	sp, #8
 801867c:	4770      	bx	lr
 801867e:	a804      	add	r0, sp, #16
 8018680:	460d      	mov	r5, r1
 8018682:	f7f8 fc0d 	bl	8010ea0 <rcutils_allocator_is_valid>
 8018686:	b310      	cbz	r0, 80186ce <rcutils_string_map_init+0x6e>
 8018688:	9b04      	ldr	r3, [sp, #16]
 801868a:	9908      	ldr	r1, [sp, #32]
 801868c:	2024      	movs	r0, #36	@ 0x24
 801868e:	4798      	blx	r3
 8018690:	6020      	str	r0, [r4, #0]
 8018692:	b310      	cbz	r0, 80186da <rcutils_string_map_init+0x7a>
 8018694:	f10d 0e10 	add.w	lr, sp, #16
 8018698:	e9c0 6600 	strd	r6, r6, [r0]
 801869c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80186a0:	f100 0c10 	add.w	ip, r0, #16
 80186a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80186a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80186ac:	f8de 3000 	ldr.w	r3, [lr]
 80186b0:	f8cc 3000 	str.w	r3, [ip]
 80186b4:	4629      	mov	r1, r5
 80186b6:	4620      	mov	r0, r4
 80186b8:	f7ff ff60 	bl	801857c <rcutils_string_map_reserve>
 80186bc:	4605      	mov	r5, r0
 80186be:	2800      	cmp	r0, #0
 80186c0:	d0d8      	beq.n	8018674 <rcutils_string_map_init+0x14>
 80186c2:	9b05      	ldr	r3, [sp, #20]
 80186c4:	9908      	ldr	r1, [sp, #32]
 80186c6:	6820      	ldr	r0, [r4, #0]
 80186c8:	4798      	blx	r3
 80186ca:	6026      	str	r6, [r4, #0]
 80186cc:	e7d2      	b.n	8018674 <rcutils_string_map_init+0x14>
 80186ce:	250b      	movs	r5, #11
 80186d0:	4628      	mov	r0, r5
 80186d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186d6:	b002      	add	sp, #8
 80186d8:	4770      	bx	lr
 80186da:	250a      	movs	r5, #10
 80186dc:	e7ca      	b.n	8018674 <rcutils_string_map_init+0x14>
 80186de:	bf00      	nop

080186e0 <rcutils_string_map_fini>:
 80186e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186e4:	b082      	sub	sp, #8
 80186e6:	2800      	cmp	r0, #0
 80186e8:	d03a      	beq.n	8018760 <rcutils_string_map_fini+0x80>
 80186ea:	6804      	ldr	r4, [r0, #0]
 80186ec:	4606      	mov	r6, r0
 80186ee:	2c00      	cmp	r4, #0
 80186f0:	d032      	beq.n	8018758 <rcutils_string_map_fini+0x78>
 80186f2:	68a3      	ldr	r3, [r4, #8]
 80186f4:	b32b      	cbz	r3, 8018742 <rcutils_string_map_fini+0x62>
 80186f6:	2500      	movs	r5, #0
 80186f8:	6822      	ldr	r2, [r4, #0]
 80186fa:	462f      	mov	r7, r5
 80186fc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018700:	b1e0      	cbz	r0, 801873c <rcutils_string_map_fini+0x5c>
 8018702:	6a21      	ldr	r1, [r4, #32]
 8018704:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8018708:	9101      	str	r1, [sp, #4]
 801870a:	47c0      	blx	r8
 801870c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018710:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8018714:	9901      	ldr	r1, [sp, #4]
 8018716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801871a:	47c0      	blx	r8
 801871c:	68e3      	ldr	r3, [r4, #12]
 801871e:	6862      	ldr	r2, [r4, #4]
 8018720:	3b01      	subs	r3, #1
 8018722:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8018726:	60e3      	str	r3, [r4, #12]
 8018728:	6834      	ldr	r4, [r6, #0]
 801872a:	68a3      	ldr	r3, [r4, #8]
 801872c:	3501      	adds	r5, #1
 801872e:	429d      	cmp	r5, r3
 8018730:	d207      	bcs.n	8018742 <rcutils_string_map_fini+0x62>
 8018732:	6822      	ldr	r2, [r4, #0]
 8018734:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018738:	2800      	cmp	r0, #0
 801873a:	d1e2      	bne.n	8018702 <rcutils_string_map_fini+0x22>
 801873c:	3501      	adds	r5, #1
 801873e:	429d      	cmp	r5, r3
 8018740:	d3dc      	bcc.n	80186fc <rcutils_string_map_fini+0x1c>
 8018742:	2100      	movs	r1, #0
 8018744:	4630      	mov	r0, r6
 8018746:	f7ff ff19 	bl	801857c <rcutils_string_map_reserve>
 801874a:	4604      	mov	r4, r0
 801874c:	b920      	cbnz	r0, 8018758 <rcutils_string_map_fini+0x78>
 801874e:	6830      	ldr	r0, [r6, #0]
 8018750:	6943      	ldr	r3, [r0, #20]
 8018752:	6a01      	ldr	r1, [r0, #32]
 8018754:	4798      	blx	r3
 8018756:	6034      	str	r4, [r6, #0]
 8018758:	4620      	mov	r0, r4
 801875a:	b002      	add	sp, #8
 801875c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018760:	240b      	movs	r4, #11
 8018762:	4620      	mov	r0, r4
 8018764:	b002      	add	sp, #8
 8018766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801876a:	bf00      	nop

0801876c <rcutils_string_map_getn>:
 801876c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018770:	b300      	cbz	r0, 80187b4 <rcutils_string_map_getn+0x48>
 8018772:	6807      	ldr	r7, [r0, #0]
 8018774:	b1ff      	cbz	r7, 80187b6 <rcutils_string_map_getn+0x4a>
 8018776:	4688      	mov	r8, r1
 8018778:	b1e1      	cbz	r1, 80187b4 <rcutils_string_map_getn+0x48>
 801877a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801877e:	683e      	ldr	r6, [r7, #0]
 8018780:	f1ba 0f00 	cmp.w	sl, #0
 8018784:	d016      	beq.n	80187b4 <rcutils_string_map_getn+0x48>
 8018786:	4691      	mov	r9, r2
 8018788:	3e04      	subs	r6, #4
 801878a:	2400      	movs	r4, #0
 801878c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8018790:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018794:	4628      	mov	r0, r5
 8018796:	3401      	adds	r4, #1
 8018798:	b155      	cbz	r5, 80187b0 <rcutils_string_map_getn+0x44>
 801879a:	f7e7 fd23 	bl	80001e4 <strlen>
 801879e:	4548      	cmp	r0, r9
 80187a0:	4602      	mov	r2, r0
 80187a2:	4629      	mov	r1, r5
 80187a4:	bf38      	it	cc
 80187a6:	464a      	movcc	r2, r9
 80187a8:	4640      	mov	r0, r8
 80187aa:	f004 faa2 	bl	801ccf2 <strncmp>
 80187ae:	b128      	cbz	r0, 80187bc <rcutils_string_map_getn+0x50>
 80187b0:	45a2      	cmp	sl, r4
 80187b2:	d1eb      	bne.n	801878c <rcutils_string_map_getn+0x20>
 80187b4:	2700      	movs	r7, #0
 80187b6:	4638      	mov	r0, r7
 80187b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	f853 700b 	ldr.w	r7, [r3, fp]
 80187c2:	4638      	mov	r0, r7
 80187c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080187c8 <rmw_get_zero_initialized_context>:
 80187c8:	b510      	push	{r4, lr}
 80187ca:	4604      	mov	r4, r0
 80187cc:	3010      	adds	r0, #16
 80187ce:	f000 f80b 	bl	80187e8 <rmw_get_zero_initialized_init_options>
 80187d2:	2300      	movs	r3, #0
 80187d4:	2000      	movs	r0, #0
 80187d6:	2100      	movs	r1, #0
 80187d8:	e9c4 0100 	strd	r0, r1, [r4]
 80187dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80187e0:	60a3      	str	r3, [r4, #8]
 80187e2:	4620      	mov	r0, r4
 80187e4:	bd10      	pop	{r4, pc}
 80187e6:	bf00      	nop

080187e8 <rmw_get_zero_initialized_init_options>:
 80187e8:	b510      	push	{r4, lr}
 80187ea:	2238      	movs	r2, #56	@ 0x38
 80187ec:	4604      	mov	r4, r0
 80187ee:	2100      	movs	r1, #0
 80187f0:	f004 fa6a 	bl	801ccc8 <memset>
 80187f4:	f104 0010 	add.w	r0, r4, #16
 80187f8:	f000 f806 	bl	8018808 <rmw_get_default_security_options>
 80187fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018800:	60e3      	str	r3, [r4, #12]
 8018802:	4620      	mov	r0, r4
 8018804:	bd10      	pop	{r4, pc}
 8018806:	bf00      	nop

08018808 <rmw_get_default_security_options>:
 8018808:	2200      	movs	r2, #0
 801880a:	7002      	strb	r2, [r0, #0]
 801880c:	6042      	str	r2, [r0, #4]
 801880e:	4770      	bx	lr

08018810 <rmw_subscription_content_filter_options_fini>:
 8018810:	b1b0      	cbz	r0, 8018840 <rmw_subscription_content_filter_options_fini+0x30>
 8018812:	b538      	push	{r3, r4, r5, lr}
 8018814:	4604      	mov	r4, r0
 8018816:	4608      	mov	r0, r1
 8018818:	460d      	mov	r5, r1
 801881a:	f7f8 fb41 	bl	8010ea0 <rcutils_allocator_is_valid>
 801881e:	b168      	cbz	r0, 801883c <rmw_subscription_content_filter_options_fini+0x2c>
 8018820:	6820      	ldr	r0, [r4, #0]
 8018822:	b120      	cbz	r0, 801882e <rmw_subscription_content_filter_options_fini+0x1e>
 8018824:	686b      	ldr	r3, [r5, #4]
 8018826:	6929      	ldr	r1, [r5, #16]
 8018828:	4798      	blx	r3
 801882a:	2300      	movs	r3, #0
 801882c:	6023      	str	r3, [r4, #0]
 801882e:	1d20      	adds	r0, r4, #4
 8018830:	f003 fc28 	bl	801c084 <rcutils_string_array_fini>
 8018834:	3800      	subs	r0, #0
 8018836:	bf18      	it	ne
 8018838:	2001      	movne	r0, #1
 801883a:	bd38      	pop	{r3, r4, r5, pc}
 801883c:	200b      	movs	r0, #11
 801883e:	bd38      	pop	{r3, r4, r5, pc}
 8018840:	200b      	movs	r0, #11
 8018842:	4770      	bx	lr

08018844 <rmw_get_default_subscription_options>:
 8018844:	2200      	movs	r2, #0
 8018846:	e9c0 2200 	strd	r2, r2, [r0]
 801884a:	6082      	str	r2, [r0, #8]
 801884c:	4770      	bx	lr
 801884e:	bf00      	nop

08018850 <rmw_time_equal>:
 8018850:	b4f0      	push	{r4, r5, r6, r7}
 8018852:	b084      	sub	sp, #16
 8018854:	ac04      	add	r4, sp, #16
 8018856:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801885a:	4603      	mov	r3, r0
 801885c:	4924      	ldr	r1, [pc, #144]	@ (80188f0 <rmw_time_equal+0xa0>)
 801885e:	9e03      	ldr	r6, [sp, #12]
 8018860:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8018864:	2202      	movs	r2, #2
 8018866:	4299      	cmp	r1, r3
 8018868:	41aa      	sbcs	r2, r5
 801886a:	d330      	bcc.n	80188ce <rmw_time_equal+0x7e>
 801886c:	4c21      	ldr	r4, [pc, #132]	@ (80188f4 <rmw_time_equal+0xa4>)
 801886e:	fba3 3204 	umull	r3, r2, r3, r4
 8018872:	fb04 2205 	mla	r2, r4, r5, r2
 8018876:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801887a:	43dd      	mvns	r5, r3
 801887c:	1a8c      	subs	r4, r1, r2
 801887e:	4285      	cmp	r5, r0
 8018880:	41b4      	sbcs	r4, r6
 8018882:	d332      	bcc.n	80188ea <rmw_time_equal+0x9a>
 8018884:	eb10 0c03 	adds.w	ip, r0, r3
 8018888:	eb42 0106 	adc.w	r1, r2, r6
 801888c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8018890:	4817      	ldr	r0, [pc, #92]	@ (80188f0 <rmw_time_equal+0xa0>)
 8018892:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018894:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018896:	2202      	movs	r2, #2
 8018898:	4298      	cmp	r0, r3
 801889a:	41b2      	sbcs	r2, r6
 801889c:	d31c      	bcc.n	80188d8 <rmw_time_equal+0x88>
 801889e:	4c15      	ldr	r4, [pc, #84]	@ (80188f4 <rmw_time_equal+0xa4>)
 80188a0:	fba3 3204 	umull	r3, r2, r3, r4
 80188a4:	fb04 2206 	mla	r2, r4, r6, r2
 80188a8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80188ac:	43de      	mvns	r6, r3
 80188ae:	1a84      	subs	r4, r0, r2
 80188b0:	42ae      	cmp	r6, r5
 80188b2:	41bc      	sbcs	r4, r7
 80188b4:	d315      	bcc.n	80188e2 <rmw_time_equal+0x92>
 80188b6:	195b      	adds	r3, r3, r5
 80188b8:	eb42 0207 	adc.w	r2, r2, r7
 80188bc:	428a      	cmp	r2, r1
 80188be:	bf08      	it	eq
 80188c0:	4563      	cmpeq	r3, ip
 80188c2:	bf0c      	ite	eq
 80188c4:	2001      	moveq	r0, #1
 80188c6:	2000      	movne	r0, #0
 80188c8:	b004      	add	sp, #16
 80188ca:	bcf0      	pop	{r4, r5, r6, r7}
 80188cc:	4770      	bx	lr
 80188ce:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80188d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80188d6:	e7d9      	b.n	801888c <rmw_time_equal+0x3c>
 80188d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80188dc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80188e0:	e7ec      	b.n	80188bc <rmw_time_equal+0x6c>
 80188e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80188e6:	4602      	mov	r2, r0
 80188e8:	e7e8      	b.n	80188bc <rmw_time_equal+0x6c>
 80188ea:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80188ee:	e7cd      	b.n	801888c <rmw_time_equal+0x3c>
 80188f0:	25c17d04 	.word	0x25c17d04
 80188f4:	3b9aca00 	.word	0x3b9aca00

080188f8 <rmw_time_total_nsec>:
 80188f8:	b470      	push	{r4, r5, r6}
 80188fa:	b085      	sub	sp, #20
 80188fc:	ac04      	add	r4, sp, #16
 80188fe:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018902:	4603      	mov	r3, r0
 8018904:	4912      	ldr	r1, [pc, #72]	@ (8018950 <rmw_time_total_nsec+0x58>)
 8018906:	9e03      	ldr	r6, [sp, #12]
 8018908:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801890c:	2202      	movs	r2, #2
 801890e:	4299      	cmp	r1, r3
 8018910:	41aa      	sbcs	r2, r5
 8018912:	d311      	bcc.n	8018938 <rmw_time_total_nsec+0x40>
 8018914:	4c0f      	ldr	r4, [pc, #60]	@ (8018954 <rmw_time_total_nsec+0x5c>)
 8018916:	fba3 3204 	umull	r3, r2, r3, r4
 801891a:	fb04 2205 	mla	r2, r4, r5, r2
 801891e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018922:	43dd      	mvns	r5, r3
 8018924:	1a8c      	subs	r4, r1, r2
 8018926:	4285      	cmp	r5, r0
 8018928:	41b4      	sbcs	r4, r6
 801892a:	d30c      	bcc.n	8018946 <rmw_time_total_nsec+0x4e>
 801892c:	1818      	adds	r0, r3, r0
 801892e:	eb42 0106 	adc.w	r1, r2, r6
 8018932:	b005      	add	sp, #20
 8018934:	bc70      	pop	{r4, r5, r6}
 8018936:	4770      	bx	lr
 8018938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801893c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018940:	b005      	add	sp, #20
 8018942:	bc70      	pop	{r4, r5, r6}
 8018944:	4770      	bx	lr
 8018946:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801894a:	b005      	add	sp, #20
 801894c:	bc70      	pop	{r4, r5, r6}
 801894e:	4770      	bx	lr
 8018950:	25c17d04 	.word	0x25c17d04
 8018954:	3b9aca00 	.word	0x3b9aca00

08018958 <rmw_get_zero_initialized_message_info>:
 8018958:	b510      	push	{r4, lr}
 801895a:	2240      	movs	r2, #64	@ 0x40
 801895c:	4604      	mov	r4, r0
 801895e:	2100      	movs	r1, #0
 8018960:	f004 f9b2 	bl	801ccc8 <memset>
 8018964:	4620      	mov	r0, r4
 8018966:	bd10      	pop	{r4, pc}

08018968 <rmw_validate_full_topic_name>:
 8018968:	2800      	cmp	r0, #0
 801896a:	d057      	beq.n	8018a1c <rmw_validate_full_topic_name+0xb4>
 801896c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018970:	460d      	mov	r5, r1
 8018972:	2900      	cmp	r1, #0
 8018974:	d054      	beq.n	8018a20 <rmw_validate_full_topic_name+0xb8>
 8018976:	4616      	mov	r6, r2
 8018978:	4604      	mov	r4, r0
 801897a:	f7e7 fc33 	bl	80001e4 <strlen>
 801897e:	b148      	cbz	r0, 8018994 <rmw_validate_full_topic_name+0x2c>
 8018980:	7823      	ldrb	r3, [r4, #0]
 8018982:	2b2f      	cmp	r3, #47	@ 0x2f
 8018984:	d00d      	beq.n	80189a2 <rmw_validate_full_topic_name+0x3a>
 8018986:	2302      	movs	r3, #2
 8018988:	602b      	str	r3, [r5, #0]
 801898a:	b13e      	cbz	r6, 801899c <rmw_validate_full_topic_name+0x34>
 801898c:	2000      	movs	r0, #0
 801898e:	6030      	str	r0, [r6, #0]
 8018990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018994:	2301      	movs	r3, #1
 8018996:	602b      	str	r3, [r5, #0]
 8018998:	2e00      	cmp	r6, #0
 801899a:	d1f7      	bne.n	801898c <rmw_validate_full_topic_name+0x24>
 801899c:	2000      	movs	r0, #0
 801899e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189a2:	1e43      	subs	r3, r0, #1
 80189a4:	5ce2      	ldrb	r2, [r4, r3]
 80189a6:	2a2f      	cmp	r2, #47	@ 0x2f
 80189a8:	d03c      	beq.n	8018a24 <rmw_validate_full_topic_name+0xbc>
 80189aa:	1e63      	subs	r3, r4, #1
 80189ac:	eb03 0800 	add.w	r8, r3, r0
 80189b0:	f1c4 0e01 	rsb	lr, r4, #1
 80189b4:	eb0e 0703 	add.w	r7, lr, r3
 80189b8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80189bc:	f021 0220 	bic.w	r2, r1, #32
 80189c0:	3a41      	subs	r2, #65	@ 0x41
 80189c2:	2a19      	cmp	r2, #25
 80189c4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80189c8:	d90b      	bls.n	80189e2 <rmw_validate_full_topic_name+0x7a>
 80189ca:	295f      	cmp	r1, #95	@ 0x5f
 80189cc:	d009      	beq.n	80189e2 <rmw_validate_full_topic_name+0x7a>
 80189ce:	f1bc 0f0a 	cmp.w	ip, #10
 80189d2:	d906      	bls.n	80189e2 <rmw_validate_full_topic_name+0x7a>
 80189d4:	2304      	movs	r3, #4
 80189d6:	602b      	str	r3, [r5, #0]
 80189d8:	2e00      	cmp	r6, #0
 80189da:	d0df      	beq.n	801899c <rmw_validate_full_topic_name+0x34>
 80189dc:	6037      	str	r7, [r6, #0]
 80189de:	2000      	movs	r0, #0
 80189e0:	e7d6      	b.n	8018990 <rmw_validate_full_topic_name+0x28>
 80189e2:	4543      	cmp	r3, r8
 80189e4:	d1e6      	bne.n	80189b4 <rmw_validate_full_topic_name+0x4c>
 80189e6:	4f1a      	ldr	r7, [pc, #104]	@ (8018a50 <rmw_validate_full_topic_name+0xe8>)
 80189e8:	2301      	movs	r3, #1
 80189ea:	e004      	b.n	80189f6 <rmw_validate_full_topic_name+0x8e>
 80189ec:	4298      	cmp	r0, r3
 80189ee:	f104 0401 	add.w	r4, r4, #1
 80189f2:	d91c      	bls.n	8018a2e <rmw_validate_full_topic_name+0xc6>
 80189f4:	4613      	mov	r3, r2
 80189f6:	4298      	cmp	r0, r3
 80189f8:	f103 0201 	add.w	r2, r3, #1
 80189fc:	d0f6      	beq.n	80189ec <rmw_validate_full_topic_name+0x84>
 80189fe:	7821      	ldrb	r1, [r4, #0]
 8018a00:	292f      	cmp	r1, #47	@ 0x2f
 8018a02:	d1f3      	bne.n	80189ec <rmw_validate_full_topic_name+0x84>
 8018a04:	7861      	ldrb	r1, [r4, #1]
 8018a06:	292f      	cmp	r1, #47	@ 0x2f
 8018a08:	d01c      	beq.n	8018a44 <rmw_validate_full_topic_name+0xdc>
 8018a0a:	5dc9      	ldrb	r1, [r1, r7]
 8018a0c:	0749      	lsls	r1, r1, #29
 8018a0e:	d5ed      	bpl.n	80189ec <rmw_validate_full_topic_name+0x84>
 8018a10:	2206      	movs	r2, #6
 8018a12:	602a      	str	r2, [r5, #0]
 8018a14:	2e00      	cmp	r6, #0
 8018a16:	d0c1      	beq.n	801899c <rmw_validate_full_topic_name+0x34>
 8018a18:	6033      	str	r3, [r6, #0]
 8018a1a:	e7bf      	b.n	801899c <rmw_validate_full_topic_name+0x34>
 8018a1c:	200b      	movs	r0, #11
 8018a1e:	4770      	bx	lr
 8018a20:	200b      	movs	r0, #11
 8018a22:	e7b5      	b.n	8018990 <rmw_validate_full_topic_name+0x28>
 8018a24:	2203      	movs	r2, #3
 8018a26:	602a      	str	r2, [r5, #0]
 8018a28:	2e00      	cmp	r6, #0
 8018a2a:	d1f5      	bne.n	8018a18 <rmw_validate_full_topic_name+0xb0>
 8018a2c:	e7b6      	b.n	801899c <rmw_validate_full_topic_name+0x34>
 8018a2e:	28f7      	cmp	r0, #247	@ 0xf7
 8018a30:	d802      	bhi.n	8018a38 <rmw_validate_full_topic_name+0xd0>
 8018a32:	2000      	movs	r0, #0
 8018a34:	6028      	str	r0, [r5, #0]
 8018a36:	e7ab      	b.n	8018990 <rmw_validate_full_topic_name+0x28>
 8018a38:	2307      	movs	r3, #7
 8018a3a:	602b      	str	r3, [r5, #0]
 8018a3c:	2e00      	cmp	r6, #0
 8018a3e:	d0ad      	beq.n	801899c <rmw_validate_full_topic_name+0x34>
 8018a40:	23f6      	movs	r3, #246	@ 0xf6
 8018a42:	e7e9      	b.n	8018a18 <rmw_validate_full_topic_name+0xb0>
 8018a44:	2205      	movs	r2, #5
 8018a46:	602a      	str	r2, [r5, #0]
 8018a48:	2e00      	cmp	r6, #0
 8018a4a:	d1e5      	bne.n	8018a18 <rmw_validate_full_topic_name+0xb0>
 8018a4c:	e7a6      	b.n	801899c <rmw_validate_full_topic_name+0x34>
 8018a4e:	bf00      	nop
 8018a50:	0801e8a4 	.word	0x0801e8a4

08018a54 <rmw_validate_namespace_with_size>:
 8018a54:	b340      	cbz	r0, 8018aa8 <rmw_validate_namespace_with_size+0x54>
 8018a56:	b570      	push	{r4, r5, r6, lr}
 8018a58:	4614      	mov	r4, r2
 8018a5a:	b0c2      	sub	sp, #264	@ 0x108
 8018a5c:	b332      	cbz	r2, 8018aac <rmw_validate_namespace_with_size+0x58>
 8018a5e:	2901      	cmp	r1, #1
 8018a60:	460d      	mov	r5, r1
 8018a62:	461e      	mov	r6, r3
 8018a64:	d102      	bne.n	8018a6c <rmw_validate_namespace_with_size+0x18>
 8018a66:	7803      	ldrb	r3, [r0, #0]
 8018a68:	2b2f      	cmp	r3, #47	@ 0x2f
 8018a6a:	d012      	beq.n	8018a92 <rmw_validate_namespace_with_size+0x3e>
 8018a6c:	aa01      	add	r2, sp, #4
 8018a6e:	4669      	mov	r1, sp
 8018a70:	f7ff ff7a 	bl	8018968 <rmw_validate_full_topic_name>
 8018a74:	b978      	cbnz	r0, 8018a96 <rmw_validate_namespace_with_size+0x42>
 8018a76:	9b00      	ldr	r3, [sp, #0]
 8018a78:	b14b      	cbz	r3, 8018a8e <rmw_validate_namespace_with_size+0x3a>
 8018a7a:	2b07      	cmp	r3, #7
 8018a7c:	d007      	beq.n	8018a8e <rmw_validate_namespace_with_size+0x3a>
 8018a7e:	1e5a      	subs	r2, r3, #1
 8018a80:	2a05      	cmp	r2, #5
 8018a82:	d82b      	bhi.n	8018adc <rmw_validate_namespace_with_size+0x88>
 8018a84:	e8df f002 	tbb	[pc, r2]
 8018a88:	1e212427 	.word	0x1e212427
 8018a8c:	141b      	.short	0x141b
 8018a8e:	2df5      	cmp	r5, #245	@ 0xf5
 8018a90:	d803      	bhi.n	8018a9a <rmw_validate_namespace_with_size+0x46>
 8018a92:	2000      	movs	r0, #0
 8018a94:	6020      	str	r0, [r4, #0]
 8018a96:	b042      	add	sp, #264	@ 0x108
 8018a98:	bd70      	pop	{r4, r5, r6, pc}
 8018a9a:	2307      	movs	r3, #7
 8018a9c:	6023      	str	r3, [r4, #0]
 8018a9e:	2e00      	cmp	r6, #0
 8018aa0:	d0f9      	beq.n	8018a96 <rmw_validate_namespace_with_size+0x42>
 8018aa2:	23f4      	movs	r3, #244	@ 0xf4
 8018aa4:	6033      	str	r3, [r6, #0]
 8018aa6:	e7f6      	b.n	8018a96 <rmw_validate_namespace_with_size+0x42>
 8018aa8:	200b      	movs	r0, #11
 8018aaa:	4770      	bx	lr
 8018aac:	200b      	movs	r0, #11
 8018aae:	e7f2      	b.n	8018a96 <rmw_validate_namespace_with_size+0x42>
 8018ab0:	2306      	movs	r3, #6
 8018ab2:	6023      	str	r3, [r4, #0]
 8018ab4:	2e00      	cmp	r6, #0
 8018ab6:	d0ee      	beq.n	8018a96 <rmw_validate_namespace_with_size+0x42>
 8018ab8:	9b01      	ldr	r3, [sp, #4]
 8018aba:	6033      	str	r3, [r6, #0]
 8018abc:	e7eb      	b.n	8018a96 <rmw_validate_namespace_with_size+0x42>
 8018abe:	2305      	movs	r3, #5
 8018ac0:	6023      	str	r3, [r4, #0]
 8018ac2:	e7f7      	b.n	8018ab4 <rmw_validate_namespace_with_size+0x60>
 8018ac4:	2304      	movs	r3, #4
 8018ac6:	6023      	str	r3, [r4, #0]
 8018ac8:	e7f4      	b.n	8018ab4 <rmw_validate_namespace_with_size+0x60>
 8018aca:	2303      	movs	r3, #3
 8018acc:	6023      	str	r3, [r4, #0]
 8018ace:	e7f1      	b.n	8018ab4 <rmw_validate_namespace_with_size+0x60>
 8018ad0:	2302      	movs	r3, #2
 8018ad2:	6023      	str	r3, [r4, #0]
 8018ad4:	e7ee      	b.n	8018ab4 <rmw_validate_namespace_with_size+0x60>
 8018ad6:	2301      	movs	r3, #1
 8018ad8:	6023      	str	r3, [r4, #0]
 8018ada:	e7eb      	b.n	8018ab4 <rmw_validate_namespace_with_size+0x60>
 8018adc:	4a03      	ldr	r2, [pc, #12]	@ (8018aec <rmw_validate_namespace_with_size+0x98>)
 8018ade:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018ae2:	a802      	add	r0, sp, #8
 8018ae4:	f7ff fcda 	bl	801849c <rcutils_snprintf>
 8018ae8:	2001      	movs	r0, #1
 8018aea:	e7d4      	b.n	8018a96 <rmw_validate_namespace_with_size+0x42>
 8018aec:	0801e2ac 	.word	0x0801e2ac

08018af0 <rmw_validate_namespace>:
 8018af0:	b168      	cbz	r0, 8018b0e <rmw_validate_namespace+0x1e>
 8018af2:	b570      	push	{r4, r5, r6, lr}
 8018af4:	460d      	mov	r5, r1
 8018af6:	4616      	mov	r6, r2
 8018af8:	4604      	mov	r4, r0
 8018afa:	f7e7 fb73 	bl	80001e4 <strlen>
 8018afe:	4633      	mov	r3, r6
 8018b00:	4601      	mov	r1, r0
 8018b02:	462a      	mov	r2, r5
 8018b04:	4620      	mov	r0, r4
 8018b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b0a:	f7ff bfa3 	b.w	8018a54 <rmw_validate_namespace_with_size>
 8018b0e:	200b      	movs	r0, #11
 8018b10:	4770      	bx	lr
 8018b12:	bf00      	nop

08018b14 <rmw_namespace_validation_result_string>:
 8018b14:	2807      	cmp	r0, #7
 8018b16:	bf9a      	itte	ls
 8018b18:	4b02      	ldrls	r3, [pc, #8]	@ (8018b24 <rmw_namespace_validation_result_string+0x10>)
 8018b1a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8018b1e:	4802      	ldrhi	r0, [pc, #8]	@ (8018b28 <rmw_namespace_validation_result_string+0x14>)
 8018b20:	4770      	bx	lr
 8018b22:	bf00      	nop
 8018b24:	0801e4a4 	.word	0x0801e4a4
 8018b28:	0801e2fc 	.word	0x0801e2fc

08018b2c <rmw_validate_node_name>:
 8018b2c:	2800      	cmp	r0, #0
 8018b2e:	d03b      	beq.n	8018ba8 <rmw_validate_node_name+0x7c>
 8018b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b34:	460d      	mov	r5, r1
 8018b36:	2900      	cmp	r1, #0
 8018b38:	d038      	beq.n	8018bac <rmw_validate_node_name+0x80>
 8018b3a:	4616      	mov	r6, r2
 8018b3c:	4604      	mov	r4, r0
 8018b3e:	f7e7 fb51 	bl	80001e4 <strlen>
 8018b42:	b1e0      	cbz	r0, 8018b7e <rmw_validate_node_name+0x52>
 8018b44:	1e63      	subs	r3, r4, #1
 8018b46:	eb03 0800 	add.w	r8, r3, r0
 8018b4a:	f1c4 0101 	rsb	r1, r4, #1
 8018b4e:	18cf      	adds	r7, r1, r3
 8018b50:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8018b54:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8018b58:	f02e 0c20 	bic.w	ip, lr, #32
 8018b5c:	2a09      	cmp	r2, #9
 8018b5e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8018b62:	d914      	bls.n	8018b8e <rmw_validate_node_name+0x62>
 8018b64:	f1bc 0f19 	cmp.w	ip, #25
 8018b68:	d911      	bls.n	8018b8e <rmw_validate_node_name+0x62>
 8018b6a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8018b6e:	d00e      	beq.n	8018b8e <rmw_validate_node_name+0x62>
 8018b70:	2302      	movs	r3, #2
 8018b72:	602b      	str	r3, [r5, #0]
 8018b74:	b106      	cbz	r6, 8018b78 <rmw_validate_node_name+0x4c>
 8018b76:	6037      	str	r7, [r6, #0]
 8018b78:	2000      	movs	r0, #0
 8018b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b7e:	2301      	movs	r3, #1
 8018b80:	602b      	str	r3, [r5, #0]
 8018b82:	2e00      	cmp	r6, #0
 8018b84:	d0f8      	beq.n	8018b78 <rmw_validate_node_name+0x4c>
 8018b86:	2000      	movs	r0, #0
 8018b88:	6030      	str	r0, [r6, #0]
 8018b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b8e:	4543      	cmp	r3, r8
 8018b90:	d1dd      	bne.n	8018b4e <rmw_validate_node_name+0x22>
 8018b92:	7822      	ldrb	r2, [r4, #0]
 8018b94:	4b0d      	ldr	r3, [pc, #52]	@ (8018bcc <rmw_validate_node_name+0xa0>)
 8018b96:	5cd3      	ldrb	r3, [r2, r3]
 8018b98:	f013 0304 	ands.w	r3, r3, #4
 8018b9c:	d110      	bne.n	8018bc0 <rmw_validate_node_name+0x94>
 8018b9e:	28ff      	cmp	r0, #255	@ 0xff
 8018ba0:	d806      	bhi.n	8018bb0 <rmw_validate_node_name+0x84>
 8018ba2:	602b      	str	r3, [r5, #0]
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	e7e8      	b.n	8018b7a <rmw_validate_node_name+0x4e>
 8018ba8:	200b      	movs	r0, #11
 8018baa:	4770      	bx	lr
 8018bac:	200b      	movs	r0, #11
 8018bae:	e7e4      	b.n	8018b7a <rmw_validate_node_name+0x4e>
 8018bb0:	2204      	movs	r2, #4
 8018bb2:	602a      	str	r2, [r5, #0]
 8018bb4:	2e00      	cmp	r6, #0
 8018bb6:	d0df      	beq.n	8018b78 <rmw_validate_node_name+0x4c>
 8018bb8:	22fe      	movs	r2, #254	@ 0xfe
 8018bba:	6032      	str	r2, [r6, #0]
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	e7dc      	b.n	8018b7a <rmw_validate_node_name+0x4e>
 8018bc0:	2303      	movs	r3, #3
 8018bc2:	602b      	str	r3, [r5, #0]
 8018bc4:	2e00      	cmp	r6, #0
 8018bc6:	d1de      	bne.n	8018b86 <rmw_validate_node_name+0x5a>
 8018bc8:	e7d6      	b.n	8018b78 <rmw_validate_node_name+0x4c>
 8018bca:	bf00      	nop
 8018bcc:	0801e8a4 	.word	0x0801e8a4

08018bd0 <rmw_node_name_validation_result_string>:
 8018bd0:	2804      	cmp	r0, #4
 8018bd2:	bf9a      	itte	ls
 8018bd4:	4b02      	ldrls	r3, [pc, #8]	@ (8018be0 <rmw_node_name_validation_result_string+0x10>)
 8018bd6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8018bda:	4802      	ldrhi	r0, [pc, #8]	@ (8018be4 <rmw_node_name_validation_result_string+0x14>)
 8018bdc:	4770      	bx	lr
 8018bde:	bf00      	nop
 8018be0:	0801e5b0 	.word	0x0801e5b0
 8018be4:	0801e4c4 	.word	0x0801e4c4

08018be8 <get_memory>:
 8018be8:	4603      	mov	r3, r0
 8018bea:	6840      	ldr	r0, [r0, #4]
 8018bec:	b158      	cbz	r0, 8018c06 <get_memory+0x1e>
 8018bee:	6842      	ldr	r2, [r0, #4]
 8018bf0:	605a      	str	r2, [r3, #4]
 8018bf2:	b10a      	cbz	r2, 8018bf8 <get_memory+0x10>
 8018bf4:	2100      	movs	r1, #0
 8018bf6:	6011      	str	r1, [r2, #0]
 8018bf8:	681a      	ldr	r2, [r3, #0]
 8018bfa:	6042      	str	r2, [r0, #4]
 8018bfc:	b102      	cbz	r2, 8018c00 <get_memory+0x18>
 8018bfe:	6010      	str	r0, [r2, #0]
 8018c00:	2200      	movs	r2, #0
 8018c02:	6002      	str	r2, [r0, #0]
 8018c04:	6018      	str	r0, [r3, #0]
 8018c06:	4770      	bx	lr

08018c08 <put_memory>:
 8018c08:	680b      	ldr	r3, [r1, #0]
 8018c0a:	b10b      	cbz	r3, 8018c10 <put_memory+0x8>
 8018c0c:	684a      	ldr	r2, [r1, #4]
 8018c0e:	605a      	str	r2, [r3, #4]
 8018c10:	684a      	ldr	r2, [r1, #4]
 8018c12:	b102      	cbz	r2, 8018c16 <put_memory+0xe>
 8018c14:	6013      	str	r3, [r2, #0]
 8018c16:	6803      	ldr	r3, [r0, #0]
 8018c18:	428b      	cmp	r3, r1
 8018c1a:	6843      	ldr	r3, [r0, #4]
 8018c1c:	bf08      	it	eq
 8018c1e:	6002      	streq	r2, [r0, #0]
 8018c20:	604b      	str	r3, [r1, #4]
 8018c22:	b103      	cbz	r3, 8018c26 <put_memory+0x1e>
 8018c24:	6019      	str	r1, [r3, #0]
 8018c26:	2300      	movs	r3, #0
 8018c28:	600b      	str	r3, [r1, #0]
 8018c2a:	6041      	str	r1, [r0, #4]
 8018c2c:	4770      	bx	lr
 8018c2e:	bf00      	nop

08018c30 <rmw_destroy_client>:
 8018c30:	b570      	push	{r4, r5, r6, lr}
 8018c32:	b128      	cbz	r0, 8018c40 <rmw_destroy_client+0x10>
 8018c34:	4604      	mov	r4, r0
 8018c36:	6800      	ldr	r0, [r0, #0]
 8018c38:	460d      	mov	r5, r1
 8018c3a:	f7f8 fed7 	bl	80119ec <is_uxrce_rmw_identifier_valid>
 8018c3e:	b910      	cbnz	r0, 8018c46 <rmw_destroy_client+0x16>
 8018c40:	2401      	movs	r4, #1
 8018c42:	4620      	mov	r0, r4
 8018c44:	bd70      	pop	{r4, r5, r6, pc}
 8018c46:	6863      	ldr	r3, [r4, #4]
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d0f9      	beq.n	8018c40 <rmw_destroy_client+0x10>
 8018c4c:	2d00      	cmp	r5, #0
 8018c4e:	d0f7      	beq.n	8018c40 <rmw_destroy_client+0x10>
 8018c50:	6828      	ldr	r0, [r5, #0]
 8018c52:	f7f8 fecb 	bl	80119ec <is_uxrce_rmw_identifier_valid>
 8018c56:	2800      	cmp	r0, #0
 8018c58:	d0f2      	beq.n	8018c40 <rmw_destroy_client+0x10>
 8018c5a:	686e      	ldr	r6, [r5, #4]
 8018c5c:	2e00      	cmp	r6, #0
 8018c5e:	d0ef      	beq.n	8018c40 <rmw_destroy_client+0x10>
 8018c60:	6864      	ldr	r4, [r4, #4]
 8018c62:	6932      	ldr	r2, [r6, #16]
 8018c64:	6920      	ldr	r0, [r4, #16]
 8018c66:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018c6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018c6e:	6819      	ldr	r1, [r3, #0]
 8018c70:	f002 f944 	bl	801aefc <uxr_buffer_cancel_data>
 8018c74:	4602      	mov	r2, r0
 8018c76:	6920      	ldr	r0, [r4, #16]
 8018c78:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018c7c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018c80:	f7f8 fe34 	bl	80118ec <run_xrce_session>
 8018c84:	6920      	ldr	r0, [r4, #16]
 8018c86:	6932      	ldr	r2, [r6, #16]
 8018c88:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018c8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018c90:	6819      	ldr	r1, [r3, #0]
 8018c92:	f7f9 ffc5 	bl	8012c20 <uxr_buffer_delete_entity>
 8018c96:	4602      	mov	r2, r0
 8018c98:	6920      	ldr	r0, [r4, #16]
 8018c9a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018c9e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018ca2:	f7f8 fe23 	bl	80118ec <run_xrce_session>
 8018ca6:	2800      	cmp	r0, #0
 8018ca8:	4628      	mov	r0, r5
 8018caa:	bf14      	ite	ne
 8018cac:	2400      	movne	r4, #0
 8018cae:	2402      	moveq	r4, #2
 8018cb0:	f7f8 fd04 	bl	80116bc <rmw_uxrce_fini_client_memory>
 8018cb4:	e7c5      	b.n	8018c42 <rmw_destroy_client+0x12>
 8018cb6:	bf00      	nop

08018cb8 <rmw_get_implementation_identifier>:
 8018cb8:	4b01      	ldr	r3, [pc, #4]	@ (8018cc0 <rmw_get_implementation_identifier+0x8>)
 8018cba:	6818      	ldr	r0, [r3, #0]
 8018cbc:	4770      	bx	lr
 8018cbe:	bf00      	nop
 8018cc0:	0801e5dc 	.word	0x0801e5dc

08018cc4 <rmw_init_options_init>:
 8018cc4:	b084      	sub	sp, #16
 8018cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cc8:	b083      	sub	sp, #12
 8018cca:	ad09      	add	r5, sp, #36	@ 0x24
 8018ccc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8018cd0:	b130      	cbz	r0, 8018ce0 <rmw_init_options_init+0x1c>
 8018cd2:	4604      	mov	r4, r0
 8018cd4:	4628      	mov	r0, r5
 8018cd6:	f7f8 f8e3 	bl	8010ea0 <rcutils_allocator_is_valid>
 8018cda:	b108      	cbz	r0, 8018ce0 <rmw_init_options_init+0x1c>
 8018cdc:	68a6      	ldr	r6, [r4, #8]
 8018cde:	b12e      	cbz	r6, 8018cec <rmw_init_options_init+0x28>
 8018ce0:	200b      	movs	r0, #11
 8018ce2:	b003      	add	sp, #12
 8018ce4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018ce8:	b004      	add	sp, #16
 8018cea:	4770      	bx	lr
 8018cec:	2200      	movs	r2, #0
 8018cee:	2300      	movs	r3, #0
 8018cf0:	e9c4 2300 	strd	r2, r3, [r4]
 8018cf4:	4b20      	ldr	r3, [pc, #128]	@ (8018d78 <rmw_init_options_init+0xb4>)
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	60a3      	str	r3, [r4, #8]
 8018cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018cfc:	f104 0c20 	add.w	ip, r4, #32
 8018d00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d04:	466f      	mov	r7, sp
 8018d06:	682b      	ldr	r3, [r5, #0]
 8018d08:	f8cc 3000 	str.w	r3, [ip]
 8018d0c:	4638      	mov	r0, r7
 8018d0e:	61e6      	str	r6, [r4, #28]
 8018d10:	60e6      	str	r6, [r4, #12]
 8018d12:	f7ff fd79 	bl	8018808 <rmw_get_default_security_options>
 8018d16:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018d1a:	f104 0310 	add.w	r3, r4, #16
 8018d1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018d22:	2203      	movs	r2, #3
 8018d24:	4815      	ldr	r0, [pc, #84]	@ (8018d7c <rmw_init_options_init+0xb8>)
 8018d26:	4916      	ldr	r1, [pc, #88]	@ (8018d80 <rmw_init_options_init+0xbc>)
 8018d28:	7626      	strb	r6, [r4, #24]
 8018d2a:	f7f8 fc07 	bl	801153c <rmw_uxrce_init_init_options_impl_memory>
 8018d2e:	4813      	ldr	r0, [pc, #76]	@ (8018d7c <rmw_init_options_init+0xb8>)
 8018d30:	f7ff ff5a 	bl	8018be8 <get_memory>
 8018d34:	b1f0      	cbz	r0, 8018d74 <rmw_init_options_init+0xb0>
 8018d36:	4a13      	ldr	r2, [pc, #76]	@ (8018d84 <rmw_init_options_init+0xc0>)
 8018d38:	6883      	ldr	r3, [r0, #8]
 8018d3a:	6851      	ldr	r1, [r2, #4]
 8018d3c:	7810      	ldrb	r0, [r2, #0]
 8018d3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018d40:	7418      	strb	r0, [r3, #16]
 8018d42:	6159      	str	r1, [r3, #20]
 8018d44:	68d1      	ldr	r1, [r2, #12]
 8018d46:	61d9      	str	r1, [r3, #28]
 8018d48:	6911      	ldr	r1, [r2, #16]
 8018d4a:	6219      	str	r1, [r3, #32]
 8018d4c:	6951      	ldr	r1, [r2, #20]
 8018d4e:	6892      	ldr	r2, [r2, #8]
 8018d50:	619a      	str	r2, [r3, #24]
 8018d52:	6259      	str	r1, [r3, #36]	@ 0x24
 8018d54:	f7fb fbc0 	bl	80144d8 <uxr_nanos>
 8018d58:	f003 fbee 	bl	801c538 <srand>
 8018d5c:	f003 fc1a 	bl	801c594 <rand>
 8018d60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018d62:	6298      	str	r0, [r3, #40]	@ 0x28
 8018d64:	2800      	cmp	r0, #0
 8018d66:	d0f9      	beq.n	8018d5c <rmw_init_options_init+0x98>
 8018d68:	2000      	movs	r0, #0
 8018d6a:	b003      	add	sp, #12
 8018d6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018d70:	b004      	add	sp, #16
 8018d72:	4770      	bx	lr
 8018d74:	2001      	movs	r0, #1
 8018d76:	e7b4      	b.n	8018ce2 <rmw_init_options_init+0x1e>
 8018d78:	0801e5dc 	.word	0x0801e5dc
 8018d7c:	20012b6c 	.word	0x20012b6c
 8018d80:	2000e408 	.word	0x2000e408
 8018d84:	2000e294 	.word	0x2000e294

08018d88 <rmw_init_options_copy>:
 8018d88:	b570      	push	{r4, r5, r6, lr}
 8018d8a:	b088      	sub	sp, #32
 8018d8c:	b160      	cbz	r0, 8018da8 <rmw_init_options_copy+0x20>
 8018d8e:	460d      	mov	r5, r1
 8018d90:	b151      	cbz	r1, 8018da8 <rmw_init_options_copy+0x20>
 8018d92:	4604      	mov	r4, r0
 8018d94:	6880      	ldr	r0, [r0, #8]
 8018d96:	b128      	cbz	r0, 8018da4 <rmw_init_options_copy+0x1c>
 8018d98:	4b33      	ldr	r3, [pc, #204]	@ (8018e68 <rmw_init_options_copy+0xe0>)
 8018d9a:	6819      	ldr	r1, [r3, #0]
 8018d9c:	f7e7 fa18 	bl	80001d0 <strcmp>
 8018da0:	2800      	cmp	r0, #0
 8018da2:	d154      	bne.n	8018e4e <rmw_init_options_copy+0xc6>
 8018da4:	68ab      	ldr	r3, [r5, #8]
 8018da6:	b11b      	cbz	r3, 8018db0 <rmw_init_options_copy+0x28>
 8018da8:	240b      	movs	r4, #11
 8018daa:	4620      	mov	r0, r4
 8018dac:	b008      	add	sp, #32
 8018dae:	bd70      	pop	{r4, r5, r6, pc}
 8018db0:	4623      	mov	r3, r4
 8018db2:	462a      	mov	r2, r5
 8018db4:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8018db8:	f8d3 c000 	ldr.w	ip, [r3]
 8018dbc:	6858      	ldr	r0, [r3, #4]
 8018dbe:	6899      	ldr	r1, [r3, #8]
 8018dc0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8018dc4:	f8c2 e00c 	str.w	lr, [r2, #12]
 8018dc8:	3310      	adds	r3, #16
 8018dca:	42b3      	cmp	r3, r6
 8018dcc:	f8c2 c000 	str.w	ip, [r2]
 8018dd0:	6050      	str	r0, [r2, #4]
 8018dd2:	6091      	str	r1, [r2, #8]
 8018dd4:	f102 0210 	add.w	r2, r2, #16
 8018dd8:	d1ee      	bne.n	8018db8 <rmw_init_options_copy+0x30>
 8018dda:	6819      	ldr	r1, [r3, #0]
 8018ddc:	685b      	ldr	r3, [r3, #4]
 8018dde:	6053      	str	r3, [r2, #4]
 8018de0:	6011      	str	r1, [r2, #0]
 8018de2:	f104 0e20 	add.w	lr, r4, #32
 8018de6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018dea:	f10d 0c0c 	add.w	ip, sp, #12
 8018dee:	4666      	mov	r6, ip
 8018df0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018df4:	f8de 3000 	ldr.w	r3, [lr]
 8018df8:	f8cc 3000 	str.w	r3, [ip]
 8018dfc:	4630      	mov	r0, r6
 8018dfe:	f7f8 f84f 	bl	8010ea0 <rcutils_allocator_is_valid>
 8018e02:	2800      	cmp	r0, #0
 8018e04:	d0d0      	beq.n	8018da8 <rmw_init_options_copy+0x20>
 8018e06:	ab08      	add	r3, sp, #32
 8018e08:	e913 0003 	ldmdb	r3, {r0, r1}
 8018e0c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018e10:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8018e14:	69e0      	ldr	r0, [r4, #28]
 8018e16:	f7ff fb6d 	bl	80184f4 <rcutils_strdup>
 8018e1a:	61e8      	str	r0, [r5, #28]
 8018e1c:	69e3      	ldr	r3, [r4, #28]
 8018e1e:	b103      	cbz	r3, 8018e22 <rmw_init_options_copy+0x9a>
 8018e20:	b1f8      	cbz	r0, 8018e62 <rmw_init_options_copy+0xda>
 8018e22:	4812      	ldr	r0, [pc, #72]	@ (8018e6c <rmw_init_options_copy+0xe4>)
 8018e24:	f7ff fee0 	bl	8018be8 <get_memory>
 8018e28:	b1a8      	cbz	r0, 8018e56 <rmw_init_options_copy+0xce>
 8018e2a:	6883      	ldr	r3, [r0, #8]
 8018e2c:	636b      	str	r3, [r5, #52]	@ 0x34
 8018e2e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8018e30:	f102 0c10 	add.w	ip, r2, #16
 8018e34:	f103 0510 	add.w	r5, r3, #16
 8018e38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018e3e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8018e42:	2400      	movs	r4, #0
 8018e44:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8018e48:	4620      	mov	r0, r4
 8018e4a:	b008      	add	sp, #32
 8018e4c:	bd70      	pop	{r4, r5, r6, pc}
 8018e4e:	240c      	movs	r4, #12
 8018e50:	4620      	mov	r0, r4
 8018e52:	b008      	add	sp, #32
 8018e54:	bd70      	pop	{r4, r5, r6, pc}
 8018e56:	9b04      	ldr	r3, [sp, #16]
 8018e58:	9907      	ldr	r1, [sp, #28]
 8018e5a:	69e8      	ldr	r0, [r5, #28]
 8018e5c:	4798      	blx	r3
 8018e5e:	2401      	movs	r4, #1
 8018e60:	e7a3      	b.n	8018daa <rmw_init_options_copy+0x22>
 8018e62:	240a      	movs	r4, #10
 8018e64:	e7a1      	b.n	8018daa <rmw_init_options_copy+0x22>
 8018e66:	bf00      	nop
 8018e68:	0801e5dc 	.word	0x0801e5dc
 8018e6c:	20012b6c 	.word	0x20012b6c

08018e70 <rmw_init_options_fini>:
 8018e70:	2800      	cmp	r0, #0
 8018e72:	d041      	beq.n	8018ef8 <rmw_init_options_fini+0x88>
 8018e74:	b510      	push	{r4, lr}
 8018e76:	4604      	mov	r4, r0
 8018e78:	b08e      	sub	sp, #56	@ 0x38
 8018e7a:	3020      	adds	r0, #32
 8018e7c:	f7f8 f810 	bl	8010ea0 <rcutils_allocator_is_valid>
 8018e80:	b380      	cbz	r0, 8018ee4 <rmw_init_options_fini+0x74>
 8018e82:	68a0      	ldr	r0, [r4, #8]
 8018e84:	b120      	cbz	r0, 8018e90 <rmw_init_options_fini+0x20>
 8018e86:	4b1e      	ldr	r3, [pc, #120]	@ (8018f00 <rmw_init_options_fini+0x90>)
 8018e88:	6819      	ldr	r1, [r3, #0]
 8018e8a:	f7e7 f9a1 	bl	80001d0 <strcmp>
 8018e8e:	bb88      	cbnz	r0, 8018ef4 <rmw_init_options_fini+0x84>
 8018e90:	4b1c      	ldr	r3, [pc, #112]	@ (8018f04 <rmw_init_options_fini+0x94>)
 8018e92:	6819      	ldr	r1, [r3, #0]
 8018e94:	b351      	cbz	r1, 8018eec <rmw_init_options_fini+0x7c>
 8018e96:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8018e98:	e001      	b.n	8018e9e <rmw_init_options_fini+0x2e>
 8018e9a:	6849      	ldr	r1, [r1, #4]
 8018e9c:	b331      	cbz	r1, 8018eec <rmw_init_options_fini+0x7c>
 8018e9e:	688b      	ldr	r3, [r1, #8]
 8018ea0:	429a      	cmp	r2, r3
 8018ea2:	d1fa      	bne.n	8018e9a <rmw_init_options_fini+0x2a>
 8018ea4:	4817      	ldr	r0, [pc, #92]	@ (8018f04 <rmw_init_options_fini+0x94>)
 8018ea6:	f7ff feaf 	bl	8018c08 <put_memory>
 8018eaa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018eac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018eae:	69e0      	ldr	r0, [r4, #28]
 8018eb0:	4798      	blx	r3
 8018eb2:	4668      	mov	r0, sp
 8018eb4:	f7ff fc98 	bl	80187e8 <rmw_get_zero_initialized_init_options>
 8018eb8:	46ee      	mov	lr, sp
 8018eba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018ebe:	46a4      	mov	ip, r4
 8018ec0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ec4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018ec8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ecc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018ed0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ed4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018ed8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018edc:	2300      	movs	r3, #0
 8018ede:	4618      	mov	r0, r3
 8018ee0:	b00e      	add	sp, #56	@ 0x38
 8018ee2:	bd10      	pop	{r4, pc}
 8018ee4:	230b      	movs	r3, #11
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	b00e      	add	sp, #56	@ 0x38
 8018eea:	bd10      	pop	{r4, pc}
 8018eec:	2301      	movs	r3, #1
 8018eee:	4618      	mov	r0, r3
 8018ef0:	b00e      	add	sp, #56	@ 0x38
 8018ef2:	bd10      	pop	{r4, pc}
 8018ef4:	230c      	movs	r3, #12
 8018ef6:	e7f2      	b.n	8018ede <rmw_init_options_fini+0x6e>
 8018ef8:	230b      	movs	r3, #11
 8018efa:	4618      	mov	r0, r3
 8018efc:	4770      	bx	lr
 8018efe:	bf00      	nop
 8018f00:	0801e5dc 	.word	0x0801e5dc
 8018f04:	20012b6c 	.word	0x20012b6c

08018f08 <rmw_init>:
 8018f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f0c:	b083      	sub	sp, #12
 8018f0e:	2800      	cmp	r0, #0
 8018f10:	f000 80d3 	beq.w	80190ba <rmw_init+0x1b2>
 8018f14:	460e      	mov	r6, r1
 8018f16:	2900      	cmp	r1, #0
 8018f18:	f000 80cf 	beq.w	80190ba <rmw_init+0x1b2>
 8018f1c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8018f1e:	4605      	mov	r5, r0
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	f000 80ca 	beq.w	80190ba <rmw_init+0x1b2>
 8018f26:	4b78      	ldr	r3, [pc, #480]	@ (8019108 <rmw_init+0x200>)
 8018f28:	6880      	ldr	r0, [r0, #8]
 8018f2a:	681f      	ldr	r7, [r3, #0]
 8018f2c:	b128      	cbz	r0, 8018f3a <rmw_init+0x32>
 8018f2e:	4639      	mov	r1, r7
 8018f30:	f7e7 f94e 	bl	80001d0 <strcmp>
 8018f34:	2800      	cmp	r0, #0
 8018f36:	f040 80ca 	bne.w	80190ce <rmw_init+0x1c6>
 8018f3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018f3e:	4c73      	ldr	r4, [pc, #460]	@ (801910c <rmw_init+0x204>)
 8018f40:	4973      	ldr	r1, [pc, #460]	@ (8019110 <rmw_init+0x208>)
 8018f42:	4874      	ldr	r0, [pc, #464]	@ (8019114 <rmw_init+0x20c>)
 8018f44:	60b7      	str	r7, [r6, #8]
 8018f46:	e9c6 2300 	strd	r2, r3, [r6]
 8018f4a:	68eb      	ldr	r3, [r5, #12]
 8018f4c:	64b3      	str	r3, [r6, #72]	@ 0x48
 8018f4e:	2201      	movs	r2, #1
 8018f50:	f7f8 fa94 	bl	801147c <rmw_uxrce_init_session_memory>
 8018f54:	4620      	mov	r0, r4
 8018f56:	4970      	ldr	r1, [pc, #448]	@ (8019118 <rmw_init+0x210>)
 8018f58:	2204      	movs	r2, #4
 8018f5a:	f7f8 facf 	bl	80114fc <rmw_uxrce_init_static_input_buffer_memory>
 8018f5e:	f04f 0800 	mov.w	r8, #0
 8018f62:	486c      	ldr	r0, [pc, #432]	@ (8019114 <rmw_init+0x20c>)
 8018f64:	f884 800d 	strb.w	r8, [r4, #13]
 8018f68:	f7ff fe3e 	bl	8018be8 <get_memory>
 8018f6c:	2800      	cmp	r0, #0
 8018f6e:	f000 80a9 	beq.w	80190c4 <rmw_init+0x1bc>
 8018f72:	6884      	ldr	r4, [r0, #8]
 8018f74:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8018f76:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8018f78:	f890 c010 	ldrb.w	ip, [r0, #16]
 8018f7c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8018f80:	9101      	str	r1, [sp, #4]
 8018f82:	6a00      	ldr	r0, [r0, #32]
 8018f84:	9000      	str	r0, [sp, #0]
 8018f86:	f104 0910 	add.w	r9, r4, #16
 8018f8a:	4661      	mov	r1, ip
 8018f8c:	4648      	mov	r0, r9
 8018f8e:	f001 f9ed 	bl	801a36c <uxr_set_custom_transport_callbacks>
 8018f92:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8018f96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018f9a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8018f9e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8018fa2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8018fa6:	495d      	ldr	r1, [pc, #372]	@ (801911c <rmw_init+0x214>)
 8018fa8:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8018fac:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8018fb0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8018fb4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8018fb8:	4859      	ldr	r0, [pc, #356]	@ (8019120 <rmw_init+0x218>)
 8018fba:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8018fbe:	2201      	movs	r2, #1
 8018fc0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8018fc2:	f7f8 fa3b 	bl	801143c <rmw_uxrce_init_node_memory>
 8018fc6:	4957      	ldr	r1, [pc, #348]	@ (8019124 <rmw_init+0x21c>)
 8018fc8:	4857      	ldr	r0, [pc, #348]	@ (8019128 <rmw_init+0x220>)
 8018fca:	2205      	movs	r2, #5
 8018fcc:	f7f8 fa16 	bl	80113fc <rmw_uxrce_init_subscription_memory>
 8018fd0:	4956      	ldr	r1, [pc, #344]	@ (801912c <rmw_init+0x224>)
 8018fd2:	4857      	ldr	r0, [pc, #348]	@ (8019130 <rmw_init+0x228>)
 8018fd4:	220a      	movs	r2, #10
 8018fd6:	f7f8 f9f1 	bl	80113bc <rmw_uxrce_init_publisher_memory>
 8018fda:	4956      	ldr	r1, [pc, #344]	@ (8019134 <rmw_init+0x22c>)
 8018fdc:	4856      	ldr	r0, [pc, #344]	@ (8019138 <rmw_init+0x230>)
 8018fde:	2201      	movs	r2, #1
 8018fe0:	f7f8 f9ac 	bl	801133c <rmw_uxrce_init_service_memory>
 8018fe4:	4955      	ldr	r1, [pc, #340]	@ (801913c <rmw_init+0x234>)
 8018fe6:	4856      	ldr	r0, [pc, #344]	@ (8019140 <rmw_init+0x238>)
 8018fe8:	2201      	movs	r2, #1
 8018fea:	f7f8 f9c7 	bl	801137c <rmw_uxrce_init_client_memory>
 8018fee:	4955      	ldr	r1, [pc, #340]	@ (8019144 <rmw_init+0x23c>)
 8018ff0:	4855      	ldr	r0, [pc, #340]	@ (8019148 <rmw_init+0x240>)
 8018ff2:	220f      	movs	r2, #15
 8018ff4:	f7f8 fa62 	bl	80114bc <rmw_uxrce_init_topic_memory>
 8018ff8:	4954      	ldr	r1, [pc, #336]	@ (801914c <rmw_init+0x244>)
 8018ffa:	4855      	ldr	r0, [pc, #340]	@ (8019150 <rmw_init+0x248>)
 8018ffc:	2203      	movs	r2, #3
 8018ffe:	f7f8 fa9d 	bl	801153c <rmw_uxrce_init_init_options_impl_memory>
 8019002:	4954      	ldr	r1, [pc, #336]	@ (8019154 <rmw_init+0x24c>)
 8019004:	4854      	ldr	r0, [pc, #336]	@ (8019158 <rmw_init+0x250>)
 8019006:	2204      	movs	r2, #4
 8019008:	f7f8 fab8 	bl	801157c <rmw_uxrce_init_wait_set_memory>
 801900c:	4953      	ldr	r1, [pc, #332]	@ (801915c <rmw_init+0x254>)
 801900e:	4854      	ldr	r0, [pc, #336]	@ (8019160 <rmw_init+0x258>)
 8019010:	2204      	movs	r2, #4
 8019012:	f7f8 fad3 	bl	80115bc <rmw_uxrce_init_guard_condition_memory>
 8019016:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8019018:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801901a:	4642      	mov	r2, r8
 801901c:	f000 fd9e 	bl	8019b5c <rmw_uxrce_transport_init>
 8019020:	4607      	mov	r7, r0
 8019022:	2800      	cmp	r0, #0
 8019024:	d158      	bne.n	80190d8 <rmw_init+0x1d0>
 8019026:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8019028:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801902c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801902e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8019032:	4628      	mov	r0, r5
 8019034:	f7fa f8b4 	bl	80131a0 <uxr_init_session>
 8019038:	494a      	ldr	r1, [pc, #296]	@ (8019164 <rmw_init+0x25c>)
 801903a:	4622      	mov	r2, r4
 801903c:	4628      	mov	r0, r5
 801903e:	f7fa f8d3 	bl	80131e8 <uxr_set_topic_callback>
 8019042:	4949      	ldr	r1, [pc, #292]	@ (8019168 <rmw_init+0x260>)
 8019044:	463a      	mov	r2, r7
 8019046:	4628      	mov	r0, r5
 8019048:	f7fa f8ca 	bl	80131e0 <uxr_set_status_callback>
 801904c:	4947      	ldr	r1, [pc, #284]	@ (801916c <rmw_init+0x264>)
 801904e:	463a      	mov	r2, r7
 8019050:	4628      	mov	r0, r5
 8019052:	f7fa f8cd 	bl	80131f0 <uxr_set_request_callback>
 8019056:	4946      	ldr	r1, [pc, #280]	@ (8019170 <rmw_init+0x268>)
 8019058:	463a      	mov	r2, r7
 801905a:	4628      	mov	r0, r5
 801905c:	f7fa f8cc 	bl	80131f8 <uxr_set_reply_callback>
 8019060:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8019064:	2304      	movs	r3, #4
 8019066:	0092      	lsls	r2, r2, #2
 8019068:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801906c:	4628      	mov	r0, r5
 801906e:	f7fa f901 	bl	8013274 <uxr_create_input_reliable_stream>
 8019072:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8019076:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801907a:	0092      	lsls	r2, r2, #2
 801907c:	2304      	movs	r3, #4
 801907e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8019082:	4628      	mov	r0, r5
 8019084:	f7fa f8ce 	bl	8013224 <uxr_create_output_reliable_stream>
 8019088:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801908c:	4628      	mov	r0, r5
 801908e:	f7fa f8eb 	bl	8013268 <uxr_create_input_best_effort_stream>
 8019092:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8019096:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801909a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801909e:	3114      	adds	r1, #20
 80190a0:	4628      	mov	r0, r5
 80190a2:	f7fa f8ad 	bl	8013200 <uxr_create_output_best_effort_stream>
 80190a6:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80190aa:	4628      	mov	r0, r5
 80190ac:	f7fa fe38 	bl	8013d20 <uxr_create_session>
 80190b0:	b1f8      	cbz	r0, 80190f2 <rmw_init+0x1ea>
 80190b2:	4638      	mov	r0, r7
 80190b4:	b003      	add	sp, #12
 80190b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190ba:	270b      	movs	r7, #11
 80190bc:	4638      	mov	r0, r7
 80190be:	b003      	add	sp, #12
 80190c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190c4:	2701      	movs	r7, #1
 80190c6:	4638      	mov	r0, r7
 80190c8:	b003      	add	sp, #12
 80190ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190ce:	270c      	movs	r7, #12
 80190d0:	4638      	mov	r0, r7
 80190d2:	b003      	add	sp, #12
 80190d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190d8:	4648      	mov	r0, r9
 80190da:	f001 f989 	bl	801a3f0 <uxr_close_custom_transport>
 80190de:	480d      	ldr	r0, [pc, #52]	@ (8019114 <rmw_init+0x20c>)
 80190e0:	4621      	mov	r1, r4
 80190e2:	f7ff fd91 	bl	8018c08 <put_memory>
 80190e6:	4638      	mov	r0, r7
 80190e8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80190ec:	b003      	add	sp, #12
 80190ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190f2:	4648      	mov	r0, r9
 80190f4:	f001 f97c 	bl	801a3f0 <uxr_close_custom_transport>
 80190f8:	4806      	ldr	r0, [pc, #24]	@ (8019114 <rmw_init+0x20c>)
 80190fa:	4621      	mov	r1, r4
 80190fc:	f7ff fd84 	bl	8018c08 <put_memory>
 8019100:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8019102:	2701      	movs	r7, #1
 8019104:	e7d5      	b.n	80190b2 <rmw_init+0x1aa>
 8019106:	bf00      	nop
 8019108:	0801e5dc 	.word	0x0801e5dc
 801910c:	20012bbc 	.word	0x20012bbc
 8019110:	2000ee68 	.word	0x2000ee68
 8019114:	20012bac 	.word	0x20012bac
 8019118:	20010410 	.word	0x20010410
 801911c:	2000e48c 	.word	0x2000e48c
 8019120:	20012b7c 	.word	0x20012b7c
 8019124:	20012510 	.word	0x20012510
 8019128:	20012bcc 	.word	0x20012bcc
 801912c:	2000e530 	.word	0x2000e530
 8019130:	20012b8c 	.word	0x20012b8c
 8019134:	2000eda0 	.word	0x2000eda0
 8019138:	20012b9c 	.word	0x20012b9c
 801913c:	2000e2c0 	.word	0x2000e2c0
 8019140:	2000e2b0 	.word	0x2000e2b0
 8019144:	20012948 	.word	0x20012948
 8019148:	20012bdc 	.word	0x20012bdc
 801914c:	2000e408 	.word	0x2000e408
 8019150:	20012b6c 	.word	0x20012b6c
 8019154:	20012aec 	.word	0x20012aec
 8019158:	20012bec 	.word	0x20012bec
 801915c:	2000e388 	.word	0x2000e388
 8019160:	20012b5c 	.word	0x20012b5c
 8019164:	0801c0dd 	.word	0x0801c0dd
 8019168:	0801c0d5 	.word	0x0801c0d5
 801916c:	0801c175 	.word	0x0801c175
 8019170:	0801c211 	.word	0x0801c211

08019174 <rmw_context_fini>:
 8019174:	4b17      	ldr	r3, [pc, #92]	@ (80191d4 <rmw_context_fini+0x60>)
 8019176:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8019178:	b570      	push	{r4, r5, r6, lr}
 801917a:	681c      	ldr	r4, [r3, #0]
 801917c:	4605      	mov	r5, r0
 801917e:	b334      	cbz	r4, 80191ce <rmw_context_fini+0x5a>
 8019180:	2600      	movs	r6, #0
 8019182:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8019186:	6902      	ldr	r2, [r0, #16]
 8019188:	428a      	cmp	r2, r1
 801918a:	d018      	beq.n	80191be <rmw_context_fini+0x4a>
 801918c:	2c00      	cmp	r4, #0
 801918e:	d1f8      	bne.n	8019182 <rmw_context_fini+0xe>
 8019190:	b189      	cbz	r1, 80191b6 <rmw_context_fini+0x42>
 8019192:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8019196:	789b      	ldrb	r3, [r3, #2]
 8019198:	2b01      	cmp	r3, #1
 801919a:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801919e:	bf14      	ite	ne
 80191a0:	210a      	movne	r1, #10
 80191a2:	2100      	moveq	r1, #0
 80191a4:	f7fa fd94 	bl	8013cd0 <uxr_delete_session_retries>
 80191a8:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80191aa:	f7f8 fa27 	bl	80115fc <rmw_uxrce_fini_session_memory>
 80191ae:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80191b0:	3010      	adds	r0, #16
 80191b2:	f001 f91d 	bl	801a3f0 <uxr_close_custom_transport>
 80191b6:	2300      	movs	r3, #0
 80191b8:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80191ba:	4630      	mov	r0, r6
 80191bc:	bd70      	pop	{r4, r5, r6, pc}
 80191be:	3018      	adds	r0, #24
 80191c0:	f000 f90e 	bl	80193e0 <rmw_destroy_node>
 80191c4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80191c6:	4606      	mov	r6, r0
 80191c8:	2c00      	cmp	r4, #0
 80191ca:	d1da      	bne.n	8019182 <rmw_context_fini+0xe>
 80191cc:	e7e0      	b.n	8019190 <rmw_context_fini+0x1c>
 80191ce:	4626      	mov	r6, r4
 80191d0:	e7de      	b.n	8019190 <rmw_context_fini+0x1c>
 80191d2:	bf00      	nop
 80191d4:	20012b7c 	.word	0x20012b7c

080191d8 <create_topic>:
 80191d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191dc:	4605      	mov	r5, r0
 80191de:	b084      	sub	sp, #16
 80191e0:	4822      	ldr	r0, [pc, #136]	@ (801926c <create_topic+0x94>)
 80191e2:	460f      	mov	r7, r1
 80191e4:	4616      	mov	r6, r2
 80191e6:	f7ff fcff 	bl	8018be8 <get_memory>
 80191ea:	4604      	mov	r4, r0
 80191ec:	2800      	cmp	r0, #0
 80191ee:	d039      	beq.n	8019264 <create_topic+0x8c>
 80191f0:	692b      	ldr	r3, [r5, #16]
 80191f2:	6884      	ldr	r4, [r0, #8]
 80191f4:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8019274 <create_topic+0x9c>
 80191f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80191fc:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8019200:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8019204:	1c42      	adds	r2, r0, #1
 8019206:	2102      	movs	r1, #2
 8019208:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801920c:	f7f9 ff0a 	bl	8013024 <uxr_object_id>
 8019210:	223c      	movs	r2, #60	@ 0x3c
 8019212:	6120      	str	r0, [r4, #16]
 8019214:	4641      	mov	r1, r8
 8019216:	4638      	mov	r0, r7
 8019218:	f7f8 fbce 	bl	80119b8 <generate_topic_name>
 801921c:	b1f0      	cbz	r0, 801925c <create_topic+0x84>
 801921e:	4f14      	ldr	r7, [pc, #80]	@ (8019270 <create_topic+0x98>)
 8019220:	4630      	mov	r0, r6
 8019222:	2264      	movs	r2, #100	@ 0x64
 8019224:	4639      	mov	r1, r7
 8019226:	f7f8 fb97 	bl	8011958 <generate_type_name>
 801922a:	b1b8      	cbz	r0, 801925c <create_topic+0x84>
 801922c:	6928      	ldr	r0, [r5, #16]
 801922e:	2306      	movs	r3, #6
 8019230:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8019234:	f8cd 8000 	str.w	r8, [sp]
 8019238:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801923c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019240:	6811      	ldr	r1, [r2, #0]
 8019242:	696b      	ldr	r3, [r5, #20]
 8019244:	6922      	ldr	r2, [r4, #16]
 8019246:	f7f9 fd69 	bl	8012d1c <uxr_buffer_create_topic_bin>
 801924a:	4602      	mov	r2, r0
 801924c:	6928      	ldr	r0, [r5, #16]
 801924e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8019252:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019256:	f7f8 fb49 	bl	80118ec <run_xrce_session>
 801925a:	b918      	cbnz	r0, 8019264 <create_topic+0x8c>
 801925c:	4620      	mov	r0, r4
 801925e:	f7f8 fa43 	bl	80116e8 <rmw_uxrce_fini_topic_memory>
 8019262:	2400      	movs	r4, #0
 8019264:	4620      	mov	r0, r4
 8019266:	b004      	add	sp, #16
 8019268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801926c:	20012bdc 	.word	0x20012bdc
 8019270:	20012cc8 	.word	0x20012cc8
 8019274:	20012c8c 	.word	0x20012c8c

08019278 <destroy_topic>:
 8019278:	b538      	push	{r3, r4, r5, lr}
 801927a:	6985      	ldr	r5, [r0, #24]
 801927c:	b1d5      	cbz	r5, 80192b4 <destroy_topic+0x3c>
 801927e:	4604      	mov	r4, r0
 8019280:	6928      	ldr	r0, [r5, #16]
 8019282:	6922      	ldr	r2, [r4, #16]
 8019284:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019288:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801928c:	6819      	ldr	r1, [r3, #0]
 801928e:	f7f9 fcc7 	bl	8012c20 <uxr_buffer_delete_entity>
 8019292:	4602      	mov	r2, r0
 8019294:	6928      	ldr	r0, [r5, #16]
 8019296:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801929a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801929e:	f7f8 fb25 	bl	80118ec <run_xrce_session>
 80192a2:	2800      	cmp	r0, #0
 80192a4:	4620      	mov	r0, r4
 80192a6:	bf14      	ite	ne
 80192a8:	2400      	movne	r4, #0
 80192aa:	2402      	moveq	r4, #2
 80192ac:	f7f8 fa1c 	bl	80116e8 <rmw_uxrce_fini_topic_memory>
 80192b0:	4620      	mov	r0, r4
 80192b2:	bd38      	pop	{r3, r4, r5, pc}
 80192b4:	2401      	movs	r4, #1
 80192b6:	4620      	mov	r0, r4
 80192b8:	bd38      	pop	{r3, r4, r5, pc}
 80192ba:	bf00      	nop

080192bc <create_node>:
 80192bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192c0:	b083      	sub	sp, #12
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d05f      	beq.n	8019386 <create_node+0xca>
 80192c6:	4606      	mov	r6, r0
 80192c8:	4835      	ldr	r0, [pc, #212]	@ (80193a0 <create_node+0xe4>)
 80192ca:	460f      	mov	r7, r1
 80192cc:	4690      	mov	r8, r2
 80192ce:	461d      	mov	r5, r3
 80192d0:	f7ff fc8a 	bl	8018be8 <get_memory>
 80192d4:	2800      	cmp	r0, #0
 80192d6:	d056      	beq.n	8019386 <create_node+0xca>
 80192d8:	6884      	ldr	r4, [r0, #8]
 80192da:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80192dc:	6123      	str	r3, [r4, #16]
 80192de:	f7ff fceb 	bl	8018cb8 <rmw_get_implementation_identifier>
 80192e2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80192e6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80192ea:	f8c4 9020 	str.w	r9, [r4, #32]
 80192ee:	4630      	mov	r0, r6
 80192f0:	f7e6 ff78 	bl	80001e4 <strlen>
 80192f4:	1c42      	adds	r2, r0, #1
 80192f6:	2a3c      	cmp	r2, #60	@ 0x3c
 80192f8:	f104 0518 	add.w	r5, r4, #24
 80192fc:	d840      	bhi.n	8019380 <create_node+0xc4>
 80192fe:	4648      	mov	r0, r9
 8019300:	4631      	mov	r1, r6
 8019302:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8019306:	f003 fda8 	bl	801ce5a <memcpy>
 801930a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801930e:	4638      	mov	r0, r7
 8019310:	f7e6 ff68 	bl	80001e4 <strlen>
 8019314:	1c42      	adds	r2, r0, #1
 8019316:	2a3c      	cmp	r2, #60	@ 0x3c
 8019318:	d832      	bhi.n	8019380 <create_node+0xc4>
 801931a:	4639      	mov	r1, r7
 801931c:	4648      	mov	r0, r9
 801931e:	f003 fd9c 	bl	801ce5a <memcpy>
 8019322:	6923      	ldr	r3, [r4, #16]
 8019324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019328:	2101      	movs	r1, #1
 801932a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801932e:	1842      	adds	r2, r0, r1
 8019330:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8019334:	f7f9 fe76 	bl	8013024 <uxr_object_id>
 8019338:	6160      	str	r0, [r4, #20]
 801933a:	783b      	ldrb	r3, [r7, #0]
 801933c:	2b2f      	cmp	r3, #47	@ 0x2f
 801933e:	d127      	bne.n	8019390 <create_node+0xd4>
 8019340:	787b      	ldrb	r3, [r7, #1]
 8019342:	bb2b      	cbnz	r3, 8019390 <create_node+0xd4>
 8019344:	4a17      	ldr	r2, [pc, #92]	@ (80193a4 <create_node+0xe8>)
 8019346:	4818      	ldr	r0, [pc, #96]	@ (80193a8 <create_node+0xec>)
 8019348:	4633      	mov	r3, r6
 801934a:	213c      	movs	r1, #60	@ 0x3c
 801934c:	f003 fb2e 	bl	801c9ac <sniprintf>
 8019350:	6920      	ldr	r0, [r4, #16]
 8019352:	4915      	ldr	r1, [pc, #84]	@ (80193a8 <create_node+0xec>)
 8019354:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8019358:	9100      	str	r1, [sp, #0]
 801935a:	2106      	movs	r1, #6
 801935c:	9101      	str	r1, [sp, #4]
 801935e:	6811      	ldr	r1, [r2, #0]
 8019360:	6962      	ldr	r2, [r4, #20]
 8019362:	fa1f f388 	uxth.w	r3, r8
 8019366:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801936a:	f7f9 fca5 	bl	8012cb8 <uxr_buffer_create_participant_bin>
 801936e:	4602      	mov	r2, r0
 8019370:	6920      	ldr	r0, [r4, #16]
 8019372:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8019376:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801937a:	f7f8 fab7 	bl	80118ec <run_xrce_session>
 801937e:	b918      	cbnz	r0, 8019388 <create_node+0xcc>
 8019380:	4628      	mov	r0, r5
 8019382:	f7f8 f941 	bl	8011608 <rmw_uxrce_fini_node_memory>
 8019386:	2500      	movs	r5, #0
 8019388:	4628      	mov	r0, r5
 801938a:	b003      	add	sp, #12
 801938c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019390:	4a06      	ldr	r2, [pc, #24]	@ (80193ac <create_node+0xf0>)
 8019392:	9600      	str	r6, [sp, #0]
 8019394:	463b      	mov	r3, r7
 8019396:	213c      	movs	r1, #60	@ 0x3c
 8019398:	4803      	ldr	r0, [pc, #12]	@ (80193a8 <create_node+0xec>)
 801939a:	f003 fb07 	bl	801c9ac <sniprintf>
 801939e:	e7d7      	b.n	8019350 <create_node+0x94>
 80193a0:	20012b7c 	.word	0x20012b7c
 80193a4:	0801de7c 	.word	0x0801de7c
 80193a8:	20012d2c 	.word	0x20012d2c
 80193ac:	0801e128 	.word	0x0801e128

080193b0 <rmw_create_node>:
 80193b0:	b199      	cbz	r1, 80193da <rmw_create_node+0x2a>
 80193b2:	780b      	ldrb	r3, [r1, #0]
 80193b4:	468c      	mov	ip, r1
 80193b6:	b183      	cbz	r3, 80193da <rmw_create_node+0x2a>
 80193b8:	b410      	push	{r4}
 80193ba:	4614      	mov	r4, r2
 80193bc:	b14a      	cbz	r2, 80193d2 <rmw_create_node+0x22>
 80193be:	7813      	ldrb	r3, [r2, #0]
 80193c0:	b13b      	cbz	r3, 80193d2 <rmw_create_node+0x22>
 80193c2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80193c4:	4603      	mov	r3, r0
 80193c6:	4621      	mov	r1, r4
 80193c8:	4660      	mov	r0, ip
 80193ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80193ce:	f7ff bf75 	b.w	80192bc <create_node>
 80193d2:	2000      	movs	r0, #0
 80193d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80193d8:	4770      	bx	lr
 80193da:	2000      	movs	r0, #0
 80193dc:	4770      	bx	lr
 80193de:	bf00      	nop

080193e0 <rmw_destroy_node>:
 80193e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193e2:	b328      	cbz	r0, 8019430 <rmw_destroy_node+0x50>
 80193e4:	4607      	mov	r7, r0
 80193e6:	6800      	ldr	r0, [r0, #0]
 80193e8:	b120      	cbz	r0, 80193f4 <rmw_destroy_node+0x14>
 80193ea:	4b36      	ldr	r3, [pc, #216]	@ (80194c4 <rmw_destroy_node+0xe4>)
 80193ec:	6819      	ldr	r1, [r3, #0]
 80193ee:	f7e6 feef 	bl	80001d0 <strcmp>
 80193f2:	b9e8      	cbnz	r0, 8019430 <rmw_destroy_node+0x50>
 80193f4:	687d      	ldr	r5, [r7, #4]
 80193f6:	b1dd      	cbz	r5, 8019430 <rmw_destroy_node+0x50>
 80193f8:	4b33      	ldr	r3, [pc, #204]	@ (80194c8 <rmw_destroy_node+0xe8>)
 80193fa:	681c      	ldr	r4, [r3, #0]
 80193fc:	2c00      	cmp	r4, #0
 80193fe:	d05f      	beq.n	80194c0 <rmw_destroy_node+0xe0>
 8019400:	2600      	movs	r6, #0
 8019402:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019406:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801940a:	429d      	cmp	r5, r3
 801940c:	d013      	beq.n	8019436 <rmw_destroy_node+0x56>
 801940e:	2c00      	cmp	r4, #0
 8019410:	d1f7      	bne.n	8019402 <rmw_destroy_node+0x22>
 8019412:	4b2e      	ldr	r3, [pc, #184]	@ (80194cc <rmw_destroy_node+0xec>)
 8019414:	681c      	ldr	r4, [r3, #0]
 8019416:	b1c4      	cbz	r4, 801944a <rmw_destroy_node+0x6a>
 8019418:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801941c:	6a0b      	ldr	r3, [r1, #32]
 801941e:	429d      	cmp	r5, r3
 8019420:	d1f9      	bne.n	8019416 <rmw_destroy_node+0x36>
 8019422:	317c      	adds	r1, #124	@ 0x7c
 8019424:	4638      	mov	r0, r7
 8019426:	f000 fae5 	bl	80199f4 <rmw_destroy_subscription>
 801942a:	2801      	cmp	r0, #1
 801942c:	4606      	mov	r6, r0
 801942e:	d1f2      	bne.n	8019416 <rmw_destroy_node+0x36>
 8019430:	2601      	movs	r6, #1
 8019432:	4630      	mov	r0, r6
 8019434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019436:	3184      	adds	r1, #132	@ 0x84
 8019438:	4638      	mov	r0, r7
 801943a:	f7f7 ff2d 	bl	8011298 <rmw_destroy_publisher>
 801943e:	2801      	cmp	r0, #1
 8019440:	4606      	mov	r6, r0
 8019442:	d0f5      	beq.n	8019430 <rmw_destroy_node+0x50>
 8019444:	2c00      	cmp	r4, #0
 8019446:	d1dc      	bne.n	8019402 <rmw_destroy_node+0x22>
 8019448:	e7e3      	b.n	8019412 <rmw_destroy_node+0x32>
 801944a:	4b21      	ldr	r3, [pc, #132]	@ (80194d0 <rmw_destroy_node+0xf0>)
 801944c:	681c      	ldr	r4, [r3, #0]
 801944e:	b16c      	cbz	r4, 801946c <rmw_destroy_node+0x8c>
 8019450:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019454:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8019456:	429d      	cmp	r5, r3
 8019458:	d1f9      	bne.n	801944e <rmw_destroy_node+0x6e>
 801945a:	317c      	adds	r1, #124	@ 0x7c
 801945c:	4638      	mov	r0, r7
 801945e:	f000 f993 	bl	8019788 <rmw_destroy_service>
 8019462:	2801      	cmp	r0, #1
 8019464:	4606      	mov	r6, r0
 8019466:	d0e3      	beq.n	8019430 <rmw_destroy_node+0x50>
 8019468:	2c00      	cmp	r4, #0
 801946a:	d1f1      	bne.n	8019450 <rmw_destroy_node+0x70>
 801946c:	4b19      	ldr	r3, [pc, #100]	@ (80194d4 <rmw_destroy_node+0xf4>)
 801946e:	681c      	ldr	r4, [r3, #0]
 8019470:	b16c      	cbz	r4, 801948e <rmw_destroy_node+0xae>
 8019472:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019476:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8019478:	429d      	cmp	r5, r3
 801947a:	d1f9      	bne.n	8019470 <rmw_destroy_node+0x90>
 801947c:	317c      	adds	r1, #124	@ 0x7c
 801947e:	4638      	mov	r0, r7
 8019480:	f7ff fbd6 	bl	8018c30 <rmw_destroy_client>
 8019484:	2801      	cmp	r0, #1
 8019486:	4606      	mov	r6, r0
 8019488:	d0d2      	beq.n	8019430 <rmw_destroy_node+0x50>
 801948a:	2c00      	cmp	r4, #0
 801948c:	d1f1      	bne.n	8019472 <rmw_destroy_node+0x92>
 801948e:	6928      	ldr	r0, [r5, #16]
 8019490:	696a      	ldr	r2, [r5, #20]
 8019492:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019496:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801949a:	6819      	ldr	r1, [r3, #0]
 801949c:	f7f9 fbc0 	bl	8012c20 <uxr_buffer_delete_entity>
 80194a0:	4602      	mov	r2, r0
 80194a2:	6928      	ldr	r0, [r5, #16]
 80194a4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80194a8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80194ac:	f7f8 fa1e 	bl	80118ec <run_xrce_session>
 80194b0:	2800      	cmp	r0, #0
 80194b2:	bf08      	it	eq
 80194b4:	2602      	moveq	r6, #2
 80194b6:	4638      	mov	r0, r7
 80194b8:	f7f8 f8a6 	bl	8011608 <rmw_uxrce_fini_node_memory>
 80194bc:	4630      	mov	r0, r6
 80194be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194c0:	4626      	mov	r6, r4
 80194c2:	e7a6      	b.n	8019412 <rmw_destroy_node+0x32>
 80194c4:	0801e5dc 	.word	0x0801e5dc
 80194c8:	20012b8c 	.word	0x20012b8c
 80194cc:	20012bcc 	.word	0x20012bcc
 80194d0:	20012b9c 	.word	0x20012b9c
 80194d4:	2000e2b0 	.word	0x2000e2b0

080194d8 <rmw_node_get_graph_guard_condition>:
 80194d8:	6843      	ldr	r3, [r0, #4]
 80194da:	6918      	ldr	r0, [r3, #16]
 80194dc:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80194e0:	4770      	bx	lr
 80194e2:	bf00      	nop

080194e4 <rmw_send_request>:
 80194e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80194e8:	4604      	mov	r4, r0
 80194ea:	6800      	ldr	r0, [r0, #0]
 80194ec:	b08b      	sub	sp, #44	@ 0x2c
 80194ee:	460e      	mov	r6, r1
 80194f0:	4615      	mov	r5, r2
 80194f2:	b128      	cbz	r0, 8019500 <rmw_send_request+0x1c>
 80194f4:	4b21      	ldr	r3, [pc, #132]	@ (801957c <rmw_send_request+0x98>)
 80194f6:	6819      	ldr	r1, [r3, #0]
 80194f8:	f7e6 fe6a 	bl	80001d0 <strcmp>
 80194fc:	2800      	cmp	r0, #0
 80194fe:	d139      	bne.n	8019574 <rmw_send_request+0x90>
 8019500:	6864      	ldr	r4, [r4, #4]
 8019502:	6963      	ldr	r3, [r4, #20]
 8019504:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8019508:	689b      	ldr	r3, [r3, #8]
 801950a:	4798      	blx	r3
 801950c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8019510:	4630      	mov	r0, r6
 8019512:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019516:	4798      	blx	r3
 8019518:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801951c:	9000      	str	r0, [sp, #0]
 801951e:	6922      	ldr	r2, [r4, #16]
 8019520:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8019522:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8019526:	ab02      	add	r3, sp, #8
 8019528:	f7fb f876 	bl	8014618 <uxr_prepare_output_stream>
 801952c:	2700      	movs	r7, #0
 801952e:	6028      	str	r0, [r5, #0]
 8019530:	606f      	str	r7, [r5, #4]
 8019532:	b198      	cbz	r0, 801955c <rmw_send_request+0x78>
 8019534:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019538:	a902      	add	r1, sp, #8
 801953a:	4630      	mov	r0, r6
 801953c:	4798      	blx	r3
 801953e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8019542:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019546:	2b01      	cmp	r3, #1
 8019548:	d00c      	beq.n	8019564 <rmw_send_request+0x80>
 801954a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801954c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019550:	f7fa fa76 	bl	8013a40 <uxr_run_session_until_confirm_delivery>
 8019554:	4638      	mov	r0, r7
 8019556:	b00b      	add	sp, #44	@ 0x2c
 8019558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801955c:	2001      	movs	r0, #1
 801955e:	b00b      	add	sp, #44	@ 0x2c
 8019560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019564:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019568:	f7f9 feaa 	bl	80132c0 <uxr_flash_output_streams>
 801956c:	4638      	mov	r0, r7
 801956e:	b00b      	add	sp, #44	@ 0x2c
 8019570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019574:	200c      	movs	r0, #12
 8019576:	b00b      	add	sp, #44	@ 0x2c
 8019578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801957c:	0801e5dc 	.word	0x0801e5dc

08019580 <rmw_take_request>:
 8019580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019584:	4605      	mov	r5, r0
 8019586:	6800      	ldr	r0, [r0, #0]
 8019588:	b089      	sub	sp, #36	@ 0x24
 801958a:	460c      	mov	r4, r1
 801958c:	4690      	mov	r8, r2
 801958e:	461e      	mov	r6, r3
 8019590:	b128      	cbz	r0, 801959e <rmw_take_request+0x1e>
 8019592:	4b28      	ldr	r3, [pc, #160]	@ (8019634 <rmw_take_request+0xb4>)
 8019594:	6819      	ldr	r1, [r3, #0]
 8019596:	f7e6 fe1b 	bl	80001d0 <strcmp>
 801959a:	2800      	cmp	r0, #0
 801959c:	d146      	bne.n	801962c <rmw_take_request+0xac>
 801959e:	b10e      	cbz	r6, 80195a4 <rmw_take_request+0x24>
 80195a0:	2300      	movs	r3, #0
 80195a2:	7033      	strb	r3, [r6, #0]
 80195a4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80195a8:	f7f8 f922 	bl	80117f0 <rmw_uxrce_clean_expired_static_input_buffer>
 80195ac:	4648      	mov	r0, r9
 80195ae:	f7f8 f8f7 	bl	80117a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80195b2:	4607      	mov	r7, r0
 80195b4:	b3b0      	cbz	r0, 8019624 <rmw_take_request+0xa4>
 80195b6:	6885      	ldr	r5, [r0, #8]
 80195b8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80195bc:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80195c0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80195c4:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80195c8:	7423      	strb	r3, [r4, #16]
 80195ca:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80195ce:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80195d2:	74e2      	strb	r2, [r4, #19]
 80195d4:	f8a4 3011 	strh.w	r3, [r4, #17]
 80195d8:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80195dc:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80195e0:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80195e4:	61e1      	str	r1, [r4, #28]
 80195e6:	6162      	str	r2, [r4, #20]
 80195e8:	61a3      	str	r3, [r4, #24]
 80195ea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80195ee:	689b      	ldr	r3, [r3, #8]
 80195f0:	4798      	blx	r3
 80195f2:	6844      	ldr	r4, [r0, #4]
 80195f4:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80195f8:	f105 0110 	add.w	r1, r5, #16
 80195fc:	4668      	mov	r0, sp
 80195fe:	f7f9 fa9f 	bl	8012b40 <ucdr_init_buffer>
 8019602:	68e3      	ldr	r3, [r4, #12]
 8019604:	4641      	mov	r1, r8
 8019606:	4668      	mov	r0, sp
 8019608:	4798      	blx	r3
 801960a:	4639      	mov	r1, r7
 801960c:	4604      	mov	r4, r0
 801960e:	480a      	ldr	r0, [pc, #40]	@ (8019638 <rmw_take_request+0xb8>)
 8019610:	f7ff fafa 	bl	8018c08 <put_memory>
 8019614:	b106      	cbz	r6, 8019618 <rmw_take_request+0x98>
 8019616:	7034      	strb	r4, [r6, #0]
 8019618:	f084 0001 	eor.w	r0, r4, #1
 801961c:	b2c0      	uxtb	r0, r0
 801961e:	b009      	add	sp, #36	@ 0x24
 8019620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019624:	2001      	movs	r0, #1
 8019626:	b009      	add	sp, #36	@ 0x24
 8019628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801962c:	200c      	movs	r0, #12
 801962e:	b009      	add	sp, #36	@ 0x24
 8019630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019634:	0801e5dc 	.word	0x0801e5dc
 8019638:	20012bbc 	.word	0x20012bbc

0801963c <rmw_send_response>:
 801963c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801963e:	4605      	mov	r5, r0
 8019640:	6800      	ldr	r0, [r0, #0]
 8019642:	b091      	sub	sp, #68	@ 0x44
 8019644:	460c      	mov	r4, r1
 8019646:	4616      	mov	r6, r2
 8019648:	b128      	cbz	r0, 8019656 <rmw_send_response+0x1a>
 801964a:	4b29      	ldr	r3, [pc, #164]	@ (80196f0 <rmw_send_response+0xb4>)
 801964c:	6819      	ldr	r1, [r3, #0]
 801964e:	f7e6 fdbf 	bl	80001d0 <strcmp>
 8019652:	2800      	cmp	r0, #0
 8019654:	d141      	bne.n	80196da <rmw_send_response+0x9e>
 8019656:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801965a:	9306      	str	r3, [sp, #24]
 801965c:	4623      	mov	r3, r4
 801965e:	9207      	str	r2, [sp, #28]
 8019660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019664:	686d      	ldr	r5, [r5, #4]
 8019666:	789b      	ldrb	r3, [r3, #2]
 8019668:	68a1      	ldr	r1, [r4, #8]
 801966a:	f88d 2017 	strb.w	r2, [sp, #23]
 801966e:	f88d 3016 	strb.w	r3, [sp, #22]
 8019672:	68e2      	ldr	r2, [r4, #12]
 8019674:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8019678:	6860      	ldr	r0, [r4, #4]
 801967a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801967e:	ab02      	add	r3, sp, #8
 8019680:	c307      	stmia	r3!, {r0, r1, r2}
 8019682:	696b      	ldr	r3, [r5, #20]
 8019684:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8019686:	68db      	ldr	r3, [r3, #12]
 8019688:	4798      	blx	r3
 801968a:	6844      	ldr	r4, [r0, #4]
 801968c:	4630      	mov	r0, r6
 801968e:	6923      	ldr	r3, [r4, #16]
 8019690:	4798      	blx	r3
 8019692:	f100 0318 	add.w	r3, r0, #24
 8019696:	6938      	ldr	r0, [r7, #16]
 8019698:	9300      	str	r3, [sp, #0]
 801969a:	692a      	ldr	r2, [r5, #16]
 801969c:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801969e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80196a2:	ab08      	add	r3, sp, #32
 80196a4:	f7fa ffb8 	bl	8014618 <uxr_prepare_output_stream>
 80196a8:	b910      	cbnz	r0, 80196b0 <rmw_send_response+0x74>
 80196aa:	2001      	movs	r0, #1
 80196ac:	b011      	add	sp, #68	@ 0x44
 80196ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196b0:	a902      	add	r1, sp, #8
 80196b2:	a808      	add	r0, sp, #32
 80196b4:	f7fc f8e8 	bl	8015888 <uxr_serialize_SampleIdentity>
 80196b8:	68a3      	ldr	r3, [r4, #8]
 80196ba:	a908      	add	r1, sp, #32
 80196bc:	4630      	mov	r0, r6
 80196be:	4798      	blx	r3
 80196c0:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80196c4:	6938      	ldr	r0, [r7, #16]
 80196c6:	2b01      	cmp	r3, #1
 80196c8:	d00a      	beq.n	80196e0 <rmw_send_response+0xa4>
 80196ca:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80196cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80196d0:	f7fa f9b6 	bl	8013a40 <uxr_run_session_until_confirm_delivery>
 80196d4:	2000      	movs	r0, #0
 80196d6:	b011      	add	sp, #68	@ 0x44
 80196d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196da:	200c      	movs	r0, #12
 80196dc:	b011      	add	sp, #68	@ 0x44
 80196de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80196e4:	f7f9 fdec 	bl	80132c0 <uxr_flash_output_streams>
 80196e8:	2000      	movs	r0, #0
 80196ea:	b011      	add	sp, #68	@ 0x44
 80196ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196ee:	bf00      	nop
 80196f0:	0801e5dc 	.word	0x0801e5dc

080196f4 <rmw_take_response>:
 80196f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196f8:	4604      	mov	r4, r0
 80196fa:	6800      	ldr	r0, [r0, #0]
 80196fc:	b088      	sub	sp, #32
 80196fe:	4688      	mov	r8, r1
 8019700:	4617      	mov	r7, r2
 8019702:	461d      	mov	r5, r3
 8019704:	b120      	cbz	r0, 8019710 <rmw_take_response+0x1c>
 8019706:	4b1e      	ldr	r3, [pc, #120]	@ (8019780 <rmw_take_response+0x8c>)
 8019708:	6819      	ldr	r1, [r3, #0]
 801970a:	f7e6 fd61 	bl	80001d0 <strcmp>
 801970e:	bb78      	cbnz	r0, 8019770 <rmw_take_response+0x7c>
 8019710:	b10d      	cbz	r5, 8019716 <rmw_take_response+0x22>
 8019712:	2300      	movs	r3, #0
 8019714:	702b      	strb	r3, [r5, #0]
 8019716:	6864      	ldr	r4, [r4, #4]
 8019718:	f7f8 f86a 	bl	80117f0 <rmw_uxrce_clean_expired_static_input_buffer>
 801971c:	4620      	mov	r0, r4
 801971e:	f7f8 f83f 	bl	80117a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019722:	4606      	mov	r6, r0
 8019724:	b340      	cbz	r0, 8019778 <rmw_take_response+0x84>
 8019726:	6963      	ldr	r3, [r4, #20]
 8019728:	6884      	ldr	r4, [r0, #8]
 801972a:	68db      	ldr	r3, [r3, #12]
 801972c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8019730:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8019734:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8019738:	4798      	blx	r3
 801973a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801973e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8019742:	f104 0110 	add.w	r1, r4, #16
 8019746:	4668      	mov	r0, sp
 8019748:	f7f9 f9fa 	bl	8012b40 <ucdr_init_buffer>
 801974c:	4639      	mov	r1, r7
 801974e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019752:	4668      	mov	r0, sp
 8019754:	4798      	blx	r3
 8019756:	4631      	mov	r1, r6
 8019758:	4604      	mov	r4, r0
 801975a:	480a      	ldr	r0, [pc, #40]	@ (8019784 <rmw_take_response+0x90>)
 801975c:	f7ff fa54 	bl	8018c08 <put_memory>
 8019760:	b105      	cbz	r5, 8019764 <rmw_take_response+0x70>
 8019762:	702c      	strb	r4, [r5, #0]
 8019764:	f084 0001 	eor.w	r0, r4, #1
 8019768:	b2c0      	uxtb	r0, r0
 801976a:	b008      	add	sp, #32
 801976c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019770:	200c      	movs	r0, #12
 8019772:	b008      	add	sp, #32
 8019774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019778:	2001      	movs	r0, #1
 801977a:	b008      	add	sp, #32
 801977c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019780:	0801e5dc 	.word	0x0801e5dc
 8019784:	20012bbc 	.word	0x20012bbc

08019788 <rmw_destroy_service>:
 8019788:	b570      	push	{r4, r5, r6, lr}
 801978a:	b128      	cbz	r0, 8019798 <rmw_destroy_service+0x10>
 801978c:	4604      	mov	r4, r0
 801978e:	6800      	ldr	r0, [r0, #0]
 8019790:	460d      	mov	r5, r1
 8019792:	f7f8 f92b 	bl	80119ec <is_uxrce_rmw_identifier_valid>
 8019796:	b910      	cbnz	r0, 801979e <rmw_destroy_service+0x16>
 8019798:	2401      	movs	r4, #1
 801979a:	4620      	mov	r0, r4
 801979c:	bd70      	pop	{r4, r5, r6, pc}
 801979e:	6863      	ldr	r3, [r4, #4]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d0f9      	beq.n	8019798 <rmw_destroy_service+0x10>
 80197a4:	2d00      	cmp	r5, #0
 80197a6:	d0f7      	beq.n	8019798 <rmw_destroy_service+0x10>
 80197a8:	6828      	ldr	r0, [r5, #0]
 80197aa:	f7f8 f91f 	bl	80119ec <is_uxrce_rmw_identifier_valid>
 80197ae:	2800      	cmp	r0, #0
 80197b0:	d0f2      	beq.n	8019798 <rmw_destroy_service+0x10>
 80197b2:	686e      	ldr	r6, [r5, #4]
 80197b4:	2e00      	cmp	r6, #0
 80197b6:	d0ef      	beq.n	8019798 <rmw_destroy_service+0x10>
 80197b8:	6864      	ldr	r4, [r4, #4]
 80197ba:	6932      	ldr	r2, [r6, #16]
 80197bc:	6920      	ldr	r0, [r4, #16]
 80197be:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80197c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80197c6:	6819      	ldr	r1, [r3, #0]
 80197c8:	f001 fb98 	bl	801aefc <uxr_buffer_cancel_data>
 80197cc:	4602      	mov	r2, r0
 80197ce:	6920      	ldr	r0, [r4, #16]
 80197d0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80197d4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80197d8:	f7f8 f888 	bl	80118ec <run_xrce_session>
 80197dc:	6920      	ldr	r0, [r4, #16]
 80197de:	6932      	ldr	r2, [r6, #16]
 80197e0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80197e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80197e8:	6819      	ldr	r1, [r3, #0]
 80197ea:	f7f9 fa19 	bl	8012c20 <uxr_buffer_delete_entity>
 80197ee:	4602      	mov	r2, r0
 80197f0:	6920      	ldr	r0, [r4, #16]
 80197f2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80197f6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80197fa:	f7f8 f877 	bl	80118ec <run_xrce_session>
 80197fe:	2800      	cmp	r0, #0
 8019800:	4628      	mov	r0, r5
 8019802:	bf14      	ite	ne
 8019804:	2400      	movne	r4, #0
 8019806:	2402      	moveq	r4, #2
 8019808:	f7f7 ff42 	bl	8011690 <rmw_uxrce_fini_service_memory>
 801980c:	e7c5      	b.n	801979a <rmw_destroy_service+0x12>
 801980e:	bf00      	nop

08019810 <rmw_create_subscription>:
 8019810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019814:	b08d      	sub	sp, #52	@ 0x34
 8019816:	2800      	cmp	r0, #0
 8019818:	f000 80d1 	beq.w	80199be <rmw_create_subscription+0x1ae>
 801981c:	460e      	mov	r6, r1
 801981e:	2900      	cmp	r1, #0
 8019820:	f000 80cd 	beq.w	80199be <rmw_create_subscription+0x1ae>
 8019824:	4604      	mov	r4, r0
 8019826:	6800      	ldr	r0, [r0, #0]
 8019828:	4615      	mov	r5, r2
 801982a:	4698      	mov	r8, r3
 801982c:	f7f8 f8de 	bl	80119ec <is_uxrce_rmw_identifier_valid>
 8019830:	2800      	cmp	r0, #0
 8019832:	f000 80c4 	beq.w	80199be <rmw_create_subscription+0x1ae>
 8019836:	2d00      	cmp	r5, #0
 8019838:	f000 80c1 	beq.w	80199be <rmw_create_subscription+0x1ae>
 801983c:	782b      	ldrb	r3, [r5, #0]
 801983e:	2b00      	cmp	r3, #0
 8019840:	f000 80bd 	beq.w	80199be <rmw_create_subscription+0x1ae>
 8019844:	f1b8 0f00 	cmp.w	r8, #0
 8019848:	f000 80b9 	beq.w	80199be <rmw_create_subscription+0x1ae>
 801984c:	485e      	ldr	r0, [pc, #376]	@ (80199c8 <rmw_create_subscription+0x1b8>)
 801984e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8019852:	f7ff f9c9 	bl	8018be8 <get_memory>
 8019856:	4604      	mov	r4, r0
 8019858:	2800      	cmp	r0, #0
 801985a:	f000 80b1 	beq.w	80199c0 <rmw_create_subscription+0x1b0>
 801985e:	6887      	ldr	r7, [r0, #8]
 8019860:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8019864:	f7ff fa28 	bl	8018cb8 <rmw_get_implementation_identifier>
 8019868:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 801986c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801986e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8019872:	4628      	mov	r0, r5
 8019874:	f7e6 fcb6 	bl	80001e4 <strlen>
 8019878:	3001      	adds	r0, #1
 801987a:	283c      	cmp	r0, #60	@ 0x3c
 801987c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8019880:	f200 8096 	bhi.w	80199b0 <rmw_create_subscription+0x1a0>
 8019884:	4a51      	ldr	r2, [pc, #324]	@ (80199cc <rmw_create_subscription+0x1bc>)
 8019886:	462b      	mov	r3, r5
 8019888:	213c      	movs	r1, #60	@ 0x3c
 801988a:	4650      	mov	r0, sl
 801988c:	f003 f88e 	bl	801c9ac <sniprintf>
 8019890:	4641      	mov	r1, r8
 8019892:	f8c7 9020 	str.w	r9, [r7, #32]
 8019896:	2250      	movs	r2, #80	@ 0x50
 8019898:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801989c:	f003 fadd 	bl	801ce5a <memcpy>
 80198a0:	494b      	ldr	r1, [pc, #300]	@ (80199d0 <rmw_create_subscription+0x1c0>)
 80198a2:	4630      	mov	r0, r6
 80198a4:	f7f8 f8b0 	bl	8011a08 <get_message_typesupport_handle>
 80198a8:	2800      	cmp	r0, #0
 80198aa:	f000 8081 	beq.w	80199b0 <rmw_create_subscription+0x1a0>
 80198ae:	6842      	ldr	r2, [r0, #4]
 80198b0:	61ba      	str	r2, [r7, #24]
 80198b2:	2a00      	cmp	r2, #0
 80198b4:	d07c      	beq.n	80199b0 <rmw_create_subscription+0x1a0>
 80198b6:	4629      	mov	r1, r5
 80198b8:	4643      	mov	r3, r8
 80198ba:	4648      	mov	r0, r9
 80198bc:	f7ff fc8c 	bl	80191d8 <create_topic>
 80198c0:	61f8      	str	r0, [r7, #28]
 80198c2:	2800      	cmp	r0, #0
 80198c4:	d078      	beq.n	80199b8 <rmw_create_subscription+0x1a8>
 80198c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80198ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80198ce:	2104      	movs	r1, #4
 80198d0:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80198d4:	1c42      	adds	r2, r0, #1
 80198d6:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80198da:	f7f9 fba3 	bl	8013024 <uxr_object_id>
 80198de:	6138      	str	r0, [r7, #16]
 80198e0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80198e4:	2506      	movs	r5, #6
 80198e6:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80198ea:	9500      	str	r5, [sp, #0]
 80198ec:	6819      	ldr	r1, [r3, #0]
 80198ee:	693a      	ldr	r2, [r7, #16]
 80198f0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80198f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80198f8:	f7f9 fa76 	bl	8012de8 <uxr_buffer_create_subscriber_bin>
 80198fc:	4602      	mov	r2, r0
 80198fe:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019902:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8019906:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801990a:	f7f7 ffef 	bl	80118ec <run_xrce_session>
 801990e:	2800      	cmp	r0, #0
 8019910:	d04e      	beq.n	80199b0 <rmw_create_subscription+0x1a0>
 8019912:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801991a:	4629      	mov	r1, r5
 801991c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8019920:	1c42      	adds	r2, r0, #1
 8019922:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8019926:	f7f9 fb7d 	bl	8013024 <uxr_object_id>
 801992a:	ae08      	add	r6, sp, #32
 801992c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019930:	69fb      	ldr	r3, [r7, #28]
 8019932:	6178      	str	r0, [r7, #20]
 8019934:	4641      	mov	r1, r8
 8019936:	4630      	mov	r0, r6
 8019938:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801993c:	9305      	str	r3, [sp, #20]
 801993e:	f7f7 fff1 	bl	8011924 <convert_qos_profile>
 8019942:	9503      	str	r5, [sp, #12]
 8019944:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019948:	9b05      	ldr	r3, [sp, #20]
 801994a:	9001      	str	r0, [sp, #4]
 801994c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8019950:	691b      	ldr	r3, [r3, #16]
 8019952:	9300      	str	r3, [sp, #0]
 8019954:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8019958:	f8db 1000 	ldr.w	r1, [fp]
 801995c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8019960:	f7f9 fae8 	bl	8012f34 <uxr_buffer_create_datareader_bin>
 8019964:	4602      	mov	r2, r0
 8019966:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801996a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801996e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019972:	f7f7 ffbb 	bl	80118ec <run_xrce_session>
 8019976:	b1d8      	cbz	r0, 80199b0 <rmw_create_subscription+0x1a0>
 8019978:	f898 3008 	ldrb.w	r3, [r8, #8]
 801997c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019980:	2b02      	cmp	r3, #2
 8019982:	bf0c      	ite	eq
 8019984:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8019988:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 801998c:	9307      	str	r3, [sp, #28]
 801998e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8019992:	2200      	movs	r2, #0
 8019994:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8019998:	ab0a      	add	r3, sp, #40	@ 0x28
 801999a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801999e:	9300      	str	r3, [sp, #0]
 80199a0:	697a      	ldr	r2, [r7, #20]
 80199a2:	9b07      	ldr	r3, [sp, #28]
 80199a4:	6809      	ldr	r1, [r1, #0]
 80199a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80199aa:	f001 fa6d 	bl	801ae88 <uxr_buffer_request_data>
 80199ae:	e007      	b.n	80199c0 <rmw_create_subscription+0x1b0>
 80199b0:	69f8      	ldr	r0, [r7, #28]
 80199b2:	b108      	cbz	r0, 80199b8 <rmw_create_subscription+0x1a8>
 80199b4:	f7f7 fe98 	bl	80116e8 <rmw_uxrce_fini_topic_memory>
 80199b8:	4620      	mov	r0, r4
 80199ba:	f7f7 fe53 	bl	8011664 <rmw_uxrce_fini_subscription_memory>
 80199be:	2400      	movs	r4, #0
 80199c0:	4620      	mov	r0, r4
 80199c2:	b00d      	add	sp, #52	@ 0x34
 80199c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199c8:	20012bcc 	.word	0x20012bcc
 80199cc:	0801de7c 	.word	0x0801de7c
 80199d0:	0801de48 	.word	0x0801de48

080199d4 <rmw_subscription_get_actual_qos>:
 80199d4:	b150      	cbz	r0, 80199ec <rmw_subscription_get_actual_qos+0x18>
 80199d6:	b508      	push	{r3, lr}
 80199d8:	460b      	mov	r3, r1
 80199da:	b149      	cbz	r1, 80199f0 <rmw_subscription_get_actual_qos+0x1c>
 80199dc:	6841      	ldr	r1, [r0, #4]
 80199de:	2250      	movs	r2, #80	@ 0x50
 80199e0:	3128      	adds	r1, #40	@ 0x28
 80199e2:	4618      	mov	r0, r3
 80199e4:	f003 fa39 	bl	801ce5a <memcpy>
 80199e8:	2000      	movs	r0, #0
 80199ea:	bd08      	pop	{r3, pc}
 80199ec:	200b      	movs	r0, #11
 80199ee:	4770      	bx	lr
 80199f0:	200b      	movs	r0, #11
 80199f2:	bd08      	pop	{r3, pc}

080199f4 <rmw_destroy_subscription>:
 80199f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199f6:	b128      	cbz	r0, 8019a04 <rmw_destroy_subscription+0x10>
 80199f8:	4604      	mov	r4, r0
 80199fa:	6800      	ldr	r0, [r0, #0]
 80199fc:	460d      	mov	r5, r1
 80199fe:	f7f7 fff5 	bl	80119ec <is_uxrce_rmw_identifier_valid>
 8019a02:	b910      	cbnz	r0, 8019a0a <rmw_destroy_subscription+0x16>
 8019a04:	2401      	movs	r4, #1
 8019a06:	4620      	mov	r0, r4
 8019a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a0a:	6863      	ldr	r3, [r4, #4]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d0f9      	beq.n	8019a04 <rmw_destroy_subscription+0x10>
 8019a10:	2d00      	cmp	r5, #0
 8019a12:	d0f7      	beq.n	8019a04 <rmw_destroy_subscription+0x10>
 8019a14:	6828      	ldr	r0, [r5, #0]
 8019a16:	f7f7 ffe9 	bl	80119ec <is_uxrce_rmw_identifier_valid>
 8019a1a:	2800      	cmp	r0, #0
 8019a1c:	d0f2      	beq.n	8019a04 <rmw_destroy_subscription+0x10>
 8019a1e:	686c      	ldr	r4, [r5, #4]
 8019a20:	2c00      	cmp	r4, #0
 8019a22:	d0ef      	beq.n	8019a04 <rmw_destroy_subscription+0x10>
 8019a24:	6a26      	ldr	r6, [r4, #32]
 8019a26:	6962      	ldr	r2, [r4, #20]
 8019a28:	6930      	ldr	r0, [r6, #16]
 8019a2a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019a2e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019a32:	6819      	ldr	r1, [r3, #0]
 8019a34:	f001 fa62 	bl	801aefc <uxr_buffer_cancel_data>
 8019a38:	4602      	mov	r2, r0
 8019a3a:	6930      	ldr	r0, [r6, #16]
 8019a3c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019a40:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019a44:	f7f7 ff52 	bl	80118ec <run_xrce_session>
 8019a48:	69e0      	ldr	r0, [r4, #28]
 8019a4a:	f7ff fc15 	bl	8019278 <destroy_topic>
 8019a4e:	6a23      	ldr	r3, [r4, #32]
 8019a50:	6962      	ldr	r2, [r4, #20]
 8019a52:	6918      	ldr	r0, [r3, #16]
 8019a54:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019a58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019a5c:	6819      	ldr	r1, [r3, #0]
 8019a5e:	f7f9 f8df 	bl	8012c20 <uxr_buffer_delete_entity>
 8019a62:	6a23      	ldr	r3, [r4, #32]
 8019a64:	6922      	ldr	r2, [r4, #16]
 8019a66:	691b      	ldr	r3, [r3, #16]
 8019a68:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8019a6c:	4604      	mov	r4, r0
 8019a6e:	6809      	ldr	r1, [r1, #0]
 8019a70:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8019a74:	f7f9 f8d4 	bl	8012c20 <uxr_buffer_delete_entity>
 8019a78:	6937      	ldr	r7, [r6, #16]
 8019a7a:	4622      	mov	r2, r4
 8019a7c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019a80:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8019a84:	4604      	mov	r4, r0
 8019a86:	4638      	mov	r0, r7
 8019a88:	f7f7 ff30 	bl	80118ec <run_xrce_session>
 8019a8c:	6936      	ldr	r6, [r6, #16]
 8019a8e:	4622      	mov	r2, r4
 8019a90:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8019a94:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8019a98:	4604      	mov	r4, r0
 8019a9a:	4630      	mov	r0, r6
 8019a9c:	f7f7 ff26 	bl	80118ec <run_xrce_session>
 8019aa0:	b12c      	cbz	r4, 8019aae <rmw_destroy_subscription+0xba>
 8019aa2:	b120      	cbz	r0, 8019aae <rmw_destroy_subscription+0xba>
 8019aa4:	2400      	movs	r4, #0
 8019aa6:	4628      	mov	r0, r5
 8019aa8:	f7f7 fddc 	bl	8011664 <rmw_uxrce_fini_subscription_memory>
 8019aac:	e7ab      	b.n	8019a06 <rmw_destroy_subscription+0x12>
 8019aae:	2402      	movs	r4, #2
 8019ab0:	e7f9      	b.n	8019aa6 <rmw_destroy_subscription+0xb2>
 8019ab2:	bf00      	nop

08019ab4 <rmw_take_with_info>:
 8019ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ab6:	4604      	mov	r4, r0
 8019ab8:	6800      	ldr	r0, [r0, #0]
 8019aba:	b089      	sub	sp, #36	@ 0x24
 8019abc:	460f      	mov	r7, r1
 8019abe:	4615      	mov	r5, r2
 8019ac0:	b128      	cbz	r0, 8019ace <rmw_take_with_info+0x1a>
 8019ac2:	4b24      	ldr	r3, [pc, #144]	@ (8019b54 <rmw_take_with_info+0xa0>)
 8019ac4:	6819      	ldr	r1, [r3, #0]
 8019ac6:	f7e6 fb83 	bl	80001d0 <strcmp>
 8019aca:	2800      	cmp	r0, #0
 8019acc:	d13e      	bne.n	8019b4c <rmw_take_with_info+0x98>
 8019ace:	b305      	cbz	r5, 8019b12 <rmw_take_with_info+0x5e>
 8019ad0:	6864      	ldr	r4, [r4, #4]
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	702b      	strb	r3, [r5, #0]
 8019ad6:	f7f7 fe8b 	bl	80117f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8019ada:	4620      	mov	r0, r4
 8019adc:	f7f7 fe60 	bl	80117a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019ae0:	4606      	mov	r6, r0
 8019ae2:	b1f0      	cbz	r0, 8019b22 <rmw_take_with_info+0x6e>
 8019ae4:	6881      	ldr	r1, [r0, #8]
 8019ae6:	4668      	mov	r0, sp
 8019ae8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8019aec:	3110      	adds	r1, #16
 8019aee:	f7f9 f827 	bl	8012b40 <ucdr_init_buffer>
 8019af2:	69a3      	ldr	r3, [r4, #24]
 8019af4:	4639      	mov	r1, r7
 8019af6:	68db      	ldr	r3, [r3, #12]
 8019af8:	4668      	mov	r0, sp
 8019afa:	4798      	blx	r3
 8019afc:	4631      	mov	r1, r6
 8019afe:	4604      	mov	r4, r0
 8019b00:	4815      	ldr	r0, [pc, #84]	@ (8019b58 <rmw_take_with_info+0xa4>)
 8019b02:	f7ff f881 	bl	8018c08 <put_memory>
 8019b06:	702c      	strb	r4, [r5, #0]
 8019b08:	f084 0001 	eor.w	r0, r4, #1
 8019b0c:	b2c0      	uxtb	r0, r0
 8019b0e:	b009      	add	sp, #36	@ 0x24
 8019b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b12:	6864      	ldr	r4, [r4, #4]
 8019b14:	f7f7 fe6c 	bl	80117f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8019b18:	4620      	mov	r0, r4
 8019b1a:	f7f7 fe41 	bl	80117a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019b1e:	4605      	mov	r5, r0
 8019b20:	b910      	cbnz	r0, 8019b28 <rmw_take_with_info+0x74>
 8019b22:	2001      	movs	r0, #1
 8019b24:	b009      	add	sp, #36	@ 0x24
 8019b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b28:	68a9      	ldr	r1, [r5, #8]
 8019b2a:	4668      	mov	r0, sp
 8019b2c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8019b30:	3110      	adds	r1, #16
 8019b32:	f7f9 f805 	bl	8012b40 <ucdr_init_buffer>
 8019b36:	69a3      	ldr	r3, [r4, #24]
 8019b38:	4639      	mov	r1, r7
 8019b3a:	68db      	ldr	r3, [r3, #12]
 8019b3c:	4668      	mov	r0, sp
 8019b3e:	4798      	blx	r3
 8019b40:	4629      	mov	r1, r5
 8019b42:	4604      	mov	r4, r0
 8019b44:	4804      	ldr	r0, [pc, #16]	@ (8019b58 <rmw_take_with_info+0xa4>)
 8019b46:	f7ff f85f 	bl	8018c08 <put_memory>
 8019b4a:	e7dd      	b.n	8019b08 <rmw_take_with_info+0x54>
 8019b4c:	200c      	movs	r0, #12
 8019b4e:	b009      	add	sp, #36	@ 0x24
 8019b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b52:	bf00      	nop
 8019b54:	0801e5dc 	.word	0x0801e5dc
 8019b58:	20012bbc 	.word	0x20012bbc

08019b5c <rmw_uxrce_transport_init>:
 8019b5c:	b508      	push	{r3, lr}
 8019b5e:	b108      	cbz	r0, 8019b64 <rmw_uxrce_transport_init+0x8>
 8019b60:	f100 0210 	add.w	r2, r0, #16
 8019b64:	b139      	cbz	r1, 8019b76 <rmw_uxrce_transport_init+0x1a>
 8019b66:	6949      	ldr	r1, [r1, #20]
 8019b68:	4610      	mov	r0, r2
 8019b6a:	f000 fc0d 	bl	801a388 <uxr_init_custom_transport>
 8019b6e:	f080 0001 	eor.w	r0, r0, #1
 8019b72:	b2c0      	uxtb	r0, r0
 8019b74:	bd08      	pop	{r3, pc}
 8019b76:	4b04      	ldr	r3, [pc, #16]	@ (8019b88 <rmw_uxrce_transport_init+0x2c>)
 8019b78:	4610      	mov	r0, r2
 8019b7a:	6859      	ldr	r1, [r3, #4]
 8019b7c:	f000 fc04 	bl	801a388 <uxr_init_custom_transport>
 8019b80:	f080 0001 	eor.w	r0, r0, #1
 8019b84:	b2c0      	uxtb	r0, r0
 8019b86:	bd08      	pop	{r3, pc}
 8019b88:	2000e294 	.word	0x2000e294

08019b8c <rmw_wait>:
 8019b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b90:	b089      	sub	sp, #36	@ 0x24
 8019b92:	4605      	mov	r5, r0
 8019b94:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8019b96:	460e      	mov	r6, r1
 8019b98:	4698      	mov	r8, r3
 8019b9a:	4691      	mov	r9, r2
 8019b9c:	2a00      	cmp	r2, #0
 8019b9e:	f000 810a 	beq.w	8019db6 <rmw_wait+0x22a>
 8019ba2:	b16c      	cbz	r4, 8019bc0 <rmw_wait+0x34>
 8019ba4:	4bae      	ldr	r3, [pc, #696]	@ (8019e60 <rmw_wait+0x2d4>)
 8019ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019ba8:	af04      	add	r7, sp, #16
 8019baa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8019bae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019bb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019bb6:	f7fe fe4b 	bl	8018850 <rmw_time_equal>
 8019bba:	2800      	cmp	r0, #0
 8019bbc:	f000 8127 	beq.w	8019e0e <rmw_wait+0x282>
 8019bc0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019bc4:	f7f7 fe14 	bl	80117f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8019bc8:	4ba6      	ldr	r3, [pc, #664]	@ (8019e64 <rmw_wait+0x2d8>)
 8019bca:	681c      	ldr	r4, [r3, #0]
 8019bcc:	b14c      	cbz	r4, 8019be2 <rmw_wait+0x56>
 8019bce:	4623      	mov	r3, r4
 8019bd0:	2100      	movs	r1, #0
 8019bd2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8019bd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019bda:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d1f7      	bne.n	8019bd2 <rmw_wait+0x46>
 8019be2:	f1b9 0f00 	cmp.w	r9, #0
 8019be6:	d011      	beq.n	8019c0c <rmw_wait+0x80>
 8019be8:	f8d9 1000 	ldr.w	r1, [r9]
 8019bec:	b171      	cbz	r1, 8019c0c <rmw_wait+0x80>
 8019bee:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	2001      	movs	r0, #1
 8019bf6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019bfa:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019bfc:	6912      	ldr	r2, [r2, #16]
 8019bfe:	3301      	adds	r3, #1
 8019c00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019c04:	4299      	cmp	r1, r3
 8019c06:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019c0a:	d1f4      	bne.n	8019bf6 <rmw_wait+0x6a>
 8019c0c:	f1b8 0f00 	cmp.w	r8, #0
 8019c10:	d011      	beq.n	8019c36 <rmw_wait+0xaa>
 8019c12:	f8d8 1000 	ldr.w	r1, [r8]
 8019c16:	b171      	cbz	r1, 8019c36 <rmw_wait+0xaa>
 8019c18:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8019c1c:	2300      	movs	r3, #0
 8019c1e:	2001      	movs	r0, #1
 8019c20:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019c24:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019c26:	6912      	ldr	r2, [r2, #16]
 8019c28:	3301      	adds	r3, #1
 8019c2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019c2e:	4299      	cmp	r1, r3
 8019c30:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019c34:	d1f4      	bne.n	8019c20 <rmw_wait+0x94>
 8019c36:	b185      	cbz	r5, 8019c5a <rmw_wait+0xce>
 8019c38:	6829      	ldr	r1, [r5, #0]
 8019c3a:	b171      	cbz	r1, 8019c5a <rmw_wait+0xce>
 8019c3c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019c40:	2300      	movs	r3, #0
 8019c42:	2001      	movs	r0, #1
 8019c44:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019c48:	6a12      	ldr	r2, [r2, #32]
 8019c4a:	6912      	ldr	r2, [r2, #16]
 8019c4c:	3301      	adds	r3, #1
 8019c4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019c52:	4299      	cmp	r1, r3
 8019c54:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019c58:	d1f4      	bne.n	8019c44 <rmw_wait+0xb8>
 8019c5a:	b34c      	cbz	r4, 8019cb0 <rmw_wait+0x124>
 8019c5c:	4622      	mov	r2, r4
 8019c5e:	2300      	movs	r3, #0
 8019c60:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8019c64:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8019c68:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8019c6c:	440b      	add	r3, r1
 8019c6e:	b2db      	uxtb	r3, r3
 8019c70:	2a00      	cmp	r2, #0
 8019c72:	d1f5      	bne.n	8019c60 <rmw_wait+0xd4>
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	f000 8084 	beq.w	8019d82 <rmw_wait+0x1f6>
 8019c7a:	1c7a      	adds	r2, r7, #1
 8019c7c:	d00d      	beq.n	8019c9a <rmw_wait+0x10e>
 8019c7e:	ee07 7a90 	vmov	s15, r7
 8019c82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019c86:	ee07 3a90 	vmov	s15, r3
 8019c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019c92:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019c96:	ee17 7a90 	vmov	r7, s15
 8019c9a:	68a0      	ldr	r0, [r4, #8]
 8019c9c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8019ca0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	f040 8090 	bne.w	8019dca <rmw_wait+0x23e>
 8019caa:	6864      	ldr	r4, [r4, #4]
 8019cac:	2c00      	cmp	r4, #0
 8019cae:	d1f4      	bne.n	8019c9a <rmw_wait+0x10e>
 8019cb0:	f1b9 0f00 	cmp.w	r9, #0
 8019cb4:	f000 80bc 	beq.w	8019e30 <rmw_wait+0x2a4>
 8019cb8:	f8d9 7000 	ldr.w	r7, [r9]
 8019cbc:	2f00      	cmp	r7, #0
 8019cbe:	f000 808e 	beq.w	8019dde <rmw_wait+0x252>
 8019cc2:	2400      	movs	r4, #0
 8019cc4:	4627      	mov	r7, r4
 8019cc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019cca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019cce:	f7f7 fd67 	bl	80117a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019cd2:	2800      	cmp	r0, #0
 8019cd4:	d05f      	beq.n	8019d96 <rmw_wait+0x20a>
 8019cd6:	f8d9 3000 	ldr.w	r3, [r9]
 8019cda:	3401      	adds	r4, #1
 8019cdc:	42a3      	cmp	r3, r4
 8019cde:	f04f 0701 	mov.w	r7, #1
 8019ce2:	d8f0      	bhi.n	8019cc6 <rmw_wait+0x13a>
 8019ce4:	f1b8 0f00 	cmp.w	r8, #0
 8019ce8:	d012      	beq.n	8019d10 <rmw_wait+0x184>
 8019cea:	f8d8 3000 	ldr.w	r3, [r8]
 8019cee:	b17b      	cbz	r3, 8019d10 <rmw_wait+0x184>
 8019cf0:	2400      	movs	r4, #0
 8019cf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019cf6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019cfa:	f7f7 fd51 	bl	80117a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019cfe:	2800      	cmp	r0, #0
 8019d00:	d051      	beq.n	8019da6 <rmw_wait+0x21a>
 8019d02:	f8d8 3000 	ldr.w	r3, [r8]
 8019d06:	3401      	adds	r4, #1
 8019d08:	42a3      	cmp	r3, r4
 8019d0a:	f04f 0701 	mov.w	r7, #1
 8019d0e:	d8f0      	bhi.n	8019cf2 <rmw_wait+0x166>
 8019d10:	b1dd      	cbz	r5, 8019d4a <rmw_wait+0x1be>
 8019d12:	682b      	ldr	r3, [r5, #0]
 8019d14:	b1cb      	cbz	r3, 8019d4a <rmw_wait+0x1be>
 8019d16:	2400      	movs	r4, #0
 8019d18:	686b      	ldr	r3, [r5, #4]
 8019d1a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019d1e:	f7f7 fd3f 	bl	80117a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019d22:	b158      	cbz	r0, 8019d3c <rmw_wait+0x1b0>
 8019d24:	682b      	ldr	r3, [r5, #0]
 8019d26:	3401      	adds	r4, #1
 8019d28:	42a3      	cmp	r3, r4
 8019d2a:	d969      	bls.n	8019e00 <rmw_wait+0x274>
 8019d2c:	686b      	ldr	r3, [r5, #4]
 8019d2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019d32:	2701      	movs	r7, #1
 8019d34:	f7f7 fd34 	bl	80117a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019d38:	2800      	cmp	r0, #0
 8019d3a:	d1f3      	bne.n	8019d24 <rmw_wait+0x198>
 8019d3c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8019d40:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019d44:	3401      	adds	r4, #1
 8019d46:	42a3      	cmp	r3, r4
 8019d48:	d8e6      	bhi.n	8019d18 <rmw_wait+0x18c>
 8019d4a:	b1a6      	cbz	r6, 8019d76 <rmw_wait+0x1ea>
 8019d4c:	6834      	ldr	r4, [r6, #0]
 8019d4e:	b194      	cbz	r4, 8019d76 <rmw_wait+0x1ea>
 8019d50:	2300      	movs	r3, #0
 8019d52:	461d      	mov	r5, r3
 8019d54:	e004      	b.n	8019d60 <rmw_wait+0x1d4>
 8019d56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8019d5a:	3301      	adds	r3, #1
 8019d5c:	42a3      	cmp	r3, r4
 8019d5e:	d00a      	beq.n	8019d76 <rmw_wait+0x1ea>
 8019d60:	6870      	ldr	r0, [r6, #4]
 8019d62:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8019d66:	7c0a      	ldrb	r2, [r1, #16]
 8019d68:	2a00      	cmp	r2, #0
 8019d6a:	d0f4      	beq.n	8019d56 <rmw_wait+0x1ca>
 8019d6c:	3301      	adds	r3, #1
 8019d6e:	42a3      	cmp	r3, r4
 8019d70:	740d      	strb	r5, [r1, #16]
 8019d72:	4617      	mov	r7, r2
 8019d74:	d1f4      	bne.n	8019d60 <rmw_wait+0x1d4>
 8019d76:	2f00      	cmp	r7, #0
 8019d78:	d03e      	beq.n	8019df8 <rmw_wait+0x26c>
 8019d7a:	2000      	movs	r0, #0
 8019d7c:	b009      	add	sp, #36	@ 0x24
 8019d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d82:	68a0      	ldr	r0, [r4, #8]
 8019d84:	2100      	movs	r1, #0
 8019d86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019d8a:	f7f9 fe1f 	bl	80139cc <uxr_run_session_timeout>
 8019d8e:	6864      	ldr	r4, [r4, #4]
 8019d90:	2c00      	cmp	r4, #0
 8019d92:	d1f6      	bne.n	8019d82 <rmw_wait+0x1f6>
 8019d94:	e78c      	b.n	8019cb0 <rmw_wait+0x124>
 8019d96:	e9d9 3200 	ldrd	r3, r2, [r9]
 8019d9a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019d9e:	3401      	adds	r4, #1
 8019da0:	42a3      	cmp	r3, r4
 8019da2:	d890      	bhi.n	8019cc6 <rmw_wait+0x13a>
 8019da4:	e79e      	b.n	8019ce4 <rmw_wait+0x158>
 8019da6:	e9d8 3200 	ldrd	r3, r2, [r8]
 8019daa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019dae:	3401      	adds	r4, #1
 8019db0:	429c      	cmp	r4, r3
 8019db2:	d39e      	bcc.n	8019cf2 <rmw_wait+0x166>
 8019db4:	e7ac      	b.n	8019d10 <rmw_wait+0x184>
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	f47f aef3 	bne.w	8019ba2 <rmw_wait+0x16>
 8019dbc:	2800      	cmp	r0, #0
 8019dbe:	f47f aef0 	bne.w	8019ba2 <rmw_wait+0x16>
 8019dc2:	2900      	cmp	r1, #0
 8019dc4:	f47f aeed 	bne.w	8019ba2 <rmw_wait+0x16>
 8019dc8:	e7d7      	b.n	8019d7a <rmw_wait+0x1ee>
 8019dca:	4639      	mov	r1, r7
 8019dcc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019dd0:	f7f9 fe16 	bl	8013a00 <uxr_run_session_until_data>
 8019dd4:	6864      	ldr	r4, [r4, #4]
 8019dd6:	2c00      	cmp	r4, #0
 8019dd8:	f47f af5f 	bne.w	8019c9a <rmw_wait+0x10e>
 8019ddc:	e768      	b.n	8019cb0 <rmw_wait+0x124>
 8019dde:	f1b8 0f00 	cmp.w	r8, #0
 8019de2:	d032      	beq.n	8019e4a <rmw_wait+0x2be>
 8019de4:	f8d8 3000 	ldr.w	r3, [r8]
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d181      	bne.n	8019cf0 <rmw_wait+0x164>
 8019dec:	461f      	mov	r7, r3
 8019dee:	2d00      	cmp	r5, #0
 8019df0:	d18f      	bne.n	8019d12 <rmw_wait+0x186>
 8019df2:	462f      	mov	r7, r5
 8019df4:	2e00      	cmp	r6, #0
 8019df6:	d1a9      	bne.n	8019d4c <rmw_wait+0x1c0>
 8019df8:	2002      	movs	r0, #2
 8019dfa:	b009      	add	sp, #36	@ 0x24
 8019dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e00:	2e00      	cmp	r6, #0
 8019e02:	d0ba      	beq.n	8019d7a <rmw_wait+0x1ee>
 8019e04:	6834      	ldr	r4, [r6, #0]
 8019e06:	2701      	movs	r7, #1
 8019e08:	2c00      	cmp	r4, #0
 8019e0a:	d1a1      	bne.n	8019d50 <rmw_wait+0x1c4>
 8019e0c:	e7b5      	b.n	8019d7a <rmw_wait+0x1ee>
 8019e0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019e12:	f7fe fd71 	bl	80188f8 <rmw_time_total_nsec>
 8019e16:	2300      	movs	r3, #0
 8019e18:	4a13      	ldr	r2, [pc, #76]	@ (8019e68 <rmw_wait+0x2dc>)
 8019e1a:	f7e6 fa91 	bl	8000340 <__aeabi_uldivmod>
 8019e1e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8019e22:	f171 0300 	sbcs.w	r3, r1, #0
 8019e26:	4607      	mov	r7, r0
 8019e28:	bfa8      	it	ge
 8019e2a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8019e2e:	e6c9      	b.n	8019bc4 <rmw_wait+0x38>
 8019e30:	f1b8 0f00 	cmp.w	r8, #0
 8019e34:	d009      	beq.n	8019e4a <rmw_wait+0x2be>
 8019e36:	f8d8 3000 	ldr.w	r3, [r8]
 8019e3a:	464f      	mov	r7, r9
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	f47f af57 	bne.w	8019cf0 <rmw_wait+0x164>
 8019e42:	2d00      	cmp	r5, #0
 8019e44:	f47f af65 	bne.w	8019d12 <rmw_wait+0x186>
 8019e48:	e7d3      	b.n	8019df2 <rmw_wait+0x266>
 8019e4a:	b17d      	cbz	r5, 8019e6c <rmw_wait+0x2e0>
 8019e4c:	682b      	ldr	r3, [r5, #0]
 8019e4e:	4647      	mov	r7, r8
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	f47f af60 	bne.w	8019d16 <rmw_wait+0x18a>
 8019e56:	2e00      	cmp	r6, #0
 8019e58:	f47f af78 	bne.w	8019d4c <rmw_wait+0x1c0>
 8019e5c:	e7cc      	b.n	8019df8 <rmw_wait+0x26c>
 8019e5e:	bf00      	nop
 8019e60:	0801dc60 	.word	0x0801dc60
 8019e64:	20012bac 	.word	0x20012bac
 8019e68:	000f4240 	.word	0x000f4240
 8019e6c:	2e00      	cmp	r6, #0
 8019e6e:	d0c3      	beq.n	8019df8 <rmw_wait+0x26c>
 8019e70:	6834      	ldr	r4, [r6, #0]
 8019e72:	462f      	mov	r7, r5
 8019e74:	2c00      	cmp	r4, #0
 8019e76:	f47f af6b 	bne.w	8019d50 <rmw_wait+0x1c4>
 8019e7a:	e7bd      	b.n	8019df8 <rmw_wait+0x26c>

08019e7c <rmw_create_wait_set>:
 8019e7c:	b508      	push	{r3, lr}
 8019e7e:	4803      	ldr	r0, [pc, #12]	@ (8019e8c <rmw_create_wait_set+0x10>)
 8019e80:	f7fe feb2 	bl	8018be8 <get_memory>
 8019e84:	b108      	cbz	r0, 8019e8a <rmw_create_wait_set+0xe>
 8019e86:	6880      	ldr	r0, [r0, #8]
 8019e88:	3010      	adds	r0, #16
 8019e8a:	bd08      	pop	{r3, pc}
 8019e8c:	20012bec 	.word	0x20012bec

08019e90 <rmw_destroy_wait_set>:
 8019e90:	b508      	push	{r3, lr}
 8019e92:	4b08      	ldr	r3, [pc, #32]	@ (8019eb4 <rmw_destroy_wait_set+0x24>)
 8019e94:	6819      	ldr	r1, [r3, #0]
 8019e96:	b911      	cbnz	r1, 8019e9e <rmw_destroy_wait_set+0xe>
 8019e98:	e00a      	b.n	8019eb0 <rmw_destroy_wait_set+0x20>
 8019e9a:	6849      	ldr	r1, [r1, #4]
 8019e9c:	b141      	cbz	r1, 8019eb0 <rmw_destroy_wait_set+0x20>
 8019e9e:	688b      	ldr	r3, [r1, #8]
 8019ea0:	3310      	adds	r3, #16
 8019ea2:	4298      	cmp	r0, r3
 8019ea4:	d1f9      	bne.n	8019e9a <rmw_destroy_wait_set+0xa>
 8019ea6:	4803      	ldr	r0, [pc, #12]	@ (8019eb4 <rmw_destroy_wait_set+0x24>)
 8019ea8:	f7fe feae 	bl	8018c08 <put_memory>
 8019eac:	2000      	movs	r0, #0
 8019eae:	bd08      	pop	{r3, pc}
 8019eb0:	2001      	movs	r0, #1
 8019eb2:	bd08      	pop	{r3, pc}
 8019eb4:	20012bec 	.word	0x20012bec

08019eb8 <rmw_uros_epoch_nanos>:
 8019eb8:	4b05      	ldr	r3, [pc, #20]	@ (8019ed0 <rmw_uros_epoch_nanos+0x18>)
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	b123      	cbz	r3, 8019ec8 <rmw_uros_epoch_nanos+0x10>
 8019ebe:	6898      	ldr	r0, [r3, #8]
 8019ec0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019ec4:	f7f9 b9f2 	b.w	80132ac <uxr_epoch_nanos>
 8019ec8:	2000      	movs	r0, #0
 8019eca:	2100      	movs	r1, #0
 8019ecc:	4770      	bx	lr
 8019ece:	bf00      	nop
 8019ed0:	20012bac 	.word	0x20012bac

08019ed4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8019ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ed8:	6805      	ldr	r5, [r0, #0]
 8019eda:	4604      	mov	r4, r0
 8019edc:	4628      	mov	r0, r5
 8019ede:	460e      	mov	r6, r1
 8019ee0:	f7e6 f976 	bl	80001d0 <strcmp>
 8019ee4:	b1c8      	cbz	r0, 8019f1a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8019ee6:	4b11      	ldr	r3, [pc, #68]	@ (8019f2c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	429d      	cmp	r5, r3
 8019eec:	d112      	bne.n	8019f14 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8019eee:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8019ef2:	f8d8 4000 	ldr.w	r4, [r8]
 8019ef6:	b16c      	cbz	r4, 8019f14 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8019ef8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8019efc:	2700      	movs	r7, #0
 8019efe:	3d04      	subs	r5, #4
 8019f00:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8019f04:	4631      	mov	r1, r6
 8019f06:	f7e6 f963 	bl	80001d0 <strcmp>
 8019f0a:	00bb      	lsls	r3, r7, #2
 8019f0c:	b140      	cbz	r0, 8019f20 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8019f0e:	3701      	adds	r7, #1
 8019f10:	42bc      	cmp	r4, r7
 8019f12:	d1f5      	bne.n	8019f00 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8019f14:	2000      	movs	r0, #0
 8019f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f1a:	4620      	mov	r0, r4
 8019f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f20:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f28:	58d3      	ldr	r3, [r2, r3]
 8019f2a:	4718      	bx	r3
 8019f2c:	20000154 	.word	0x20000154

08019f30 <std_msgs__msg__Int32__init>:
 8019f30:	3800      	subs	r0, #0
 8019f32:	bf18      	it	ne
 8019f34:	2001      	movne	r0, #1
 8019f36:	4770      	bx	lr

08019f38 <std_msgs__msg__Int32__fini>:
 8019f38:	4770      	bx	lr
 8019f3a:	bf00      	nop

08019f3c <ucdr_serialize_endian_array_char>:
 8019f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f40:	4619      	mov	r1, r3
 8019f42:	461f      	mov	r7, r3
 8019f44:	4605      	mov	r5, r0
 8019f46:	4690      	mov	r8, r2
 8019f48:	f7f8 fda6 	bl	8012a98 <ucdr_check_buffer_available_for>
 8019f4c:	b9e0      	cbnz	r0, 8019f88 <ucdr_serialize_endian_array_char+0x4c>
 8019f4e:	463e      	mov	r6, r7
 8019f50:	e009      	b.n	8019f66 <ucdr_serialize_endian_array_char+0x2a>
 8019f52:	68a8      	ldr	r0, [r5, #8]
 8019f54:	f002 ff81 	bl	801ce5a <memcpy>
 8019f58:	68ab      	ldr	r3, [r5, #8]
 8019f5a:	6928      	ldr	r0, [r5, #16]
 8019f5c:	4423      	add	r3, r4
 8019f5e:	4420      	add	r0, r4
 8019f60:	1b36      	subs	r6, r6, r4
 8019f62:	60ab      	str	r3, [r5, #8]
 8019f64:	6128      	str	r0, [r5, #16]
 8019f66:	4631      	mov	r1, r6
 8019f68:	2201      	movs	r2, #1
 8019f6a:	4628      	mov	r0, r5
 8019f6c:	f7f8 fe1c 	bl	8012ba8 <ucdr_check_final_buffer_behavior_array>
 8019f70:	1bb9      	subs	r1, r7, r6
 8019f72:	4441      	add	r1, r8
 8019f74:	4604      	mov	r4, r0
 8019f76:	4602      	mov	r2, r0
 8019f78:	2800      	cmp	r0, #0
 8019f7a:	d1ea      	bne.n	8019f52 <ucdr_serialize_endian_array_char+0x16>
 8019f7c:	2301      	movs	r3, #1
 8019f7e:	7da8      	ldrb	r0, [r5, #22]
 8019f80:	756b      	strb	r3, [r5, #21]
 8019f82:	4058      	eors	r0, r3
 8019f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f88:	463a      	mov	r2, r7
 8019f8a:	68a8      	ldr	r0, [r5, #8]
 8019f8c:	4641      	mov	r1, r8
 8019f8e:	f002 ff64 	bl	801ce5a <memcpy>
 8019f92:	68aa      	ldr	r2, [r5, #8]
 8019f94:	692b      	ldr	r3, [r5, #16]
 8019f96:	443a      	add	r2, r7
 8019f98:	443b      	add	r3, r7
 8019f9a:	60aa      	str	r2, [r5, #8]
 8019f9c:	612b      	str	r3, [r5, #16]
 8019f9e:	e7ed      	b.n	8019f7c <ucdr_serialize_endian_array_char+0x40>

08019fa0 <ucdr_deserialize_endian_array_char>:
 8019fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fa4:	4619      	mov	r1, r3
 8019fa6:	461f      	mov	r7, r3
 8019fa8:	4605      	mov	r5, r0
 8019faa:	4690      	mov	r8, r2
 8019fac:	f7f8 fd74 	bl	8012a98 <ucdr_check_buffer_available_for>
 8019fb0:	b9e0      	cbnz	r0, 8019fec <ucdr_deserialize_endian_array_char+0x4c>
 8019fb2:	463e      	mov	r6, r7
 8019fb4:	e009      	b.n	8019fca <ucdr_deserialize_endian_array_char+0x2a>
 8019fb6:	68a9      	ldr	r1, [r5, #8]
 8019fb8:	f002 ff4f 	bl	801ce5a <memcpy>
 8019fbc:	68ab      	ldr	r3, [r5, #8]
 8019fbe:	6928      	ldr	r0, [r5, #16]
 8019fc0:	4423      	add	r3, r4
 8019fc2:	4420      	add	r0, r4
 8019fc4:	1b36      	subs	r6, r6, r4
 8019fc6:	60ab      	str	r3, [r5, #8]
 8019fc8:	6128      	str	r0, [r5, #16]
 8019fca:	2201      	movs	r2, #1
 8019fcc:	4631      	mov	r1, r6
 8019fce:	4628      	mov	r0, r5
 8019fd0:	f7f8 fdea 	bl	8012ba8 <ucdr_check_final_buffer_behavior_array>
 8019fd4:	4604      	mov	r4, r0
 8019fd6:	1bb8      	subs	r0, r7, r6
 8019fd8:	4440      	add	r0, r8
 8019fda:	4622      	mov	r2, r4
 8019fdc:	2c00      	cmp	r4, #0
 8019fde:	d1ea      	bne.n	8019fb6 <ucdr_deserialize_endian_array_char+0x16>
 8019fe0:	2301      	movs	r3, #1
 8019fe2:	7da8      	ldrb	r0, [r5, #22]
 8019fe4:	756b      	strb	r3, [r5, #21]
 8019fe6:	4058      	eors	r0, r3
 8019fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fec:	463a      	mov	r2, r7
 8019fee:	68a9      	ldr	r1, [r5, #8]
 8019ff0:	4640      	mov	r0, r8
 8019ff2:	f002 ff32 	bl	801ce5a <memcpy>
 8019ff6:	68aa      	ldr	r2, [r5, #8]
 8019ff8:	692b      	ldr	r3, [r5, #16]
 8019ffa:	443a      	add	r2, r7
 8019ffc:	443b      	add	r3, r7
 8019ffe:	60aa      	str	r2, [r5, #8]
 801a000:	612b      	str	r3, [r5, #16]
 801a002:	e7ed      	b.n	8019fe0 <ucdr_deserialize_endian_array_char+0x40>

0801a004 <ucdr_serialize_array_uint8_t>:
 801a004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a008:	4688      	mov	r8, r1
 801a00a:	4611      	mov	r1, r2
 801a00c:	4617      	mov	r7, r2
 801a00e:	4605      	mov	r5, r0
 801a010:	f7f8 fd42 	bl	8012a98 <ucdr_check_buffer_available_for>
 801a014:	b9e0      	cbnz	r0, 801a050 <ucdr_serialize_array_uint8_t+0x4c>
 801a016:	463e      	mov	r6, r7
 801a018:	e009      	b.n	801a02e <ucdr_serialize_array_uint8_t+0x2a>
 801a01a:	68a8      	ldr	r0, [r5, #8]
 801a01c:	f002 ff1d 	bl	801ce5a <memcpy>
 801a020:	68aa      	ldr	r2, [r5, #8]
 801a022:	692b      	ldr	r3, [r5, #16]
 801a024:	4422      	add	r2, r4
 801a026:	4423      	add	r3, r4
 801a028:	1b36      	subs	r6, r6, r4
 801a02a:	60aa      	str	r2, [r5, #8]
 801a02c:	612b      	str	r3, [r5, #16]
 801a02e:	4631      	mov	r1, r6
 801a030:	2201      	movs	r2, #1
 801a032:	4628      	mov	r0, r5
 801a034:	f7f8 fdb8 	bl	8012ba8 <ucdr_check_final_buffer_behavior_array>
 801a038:	1bb9      	subs	r1, r7, r6
 801a03a:	4441      	add	r1, r8
 801a03c:	4604      	mov	r4, r0
 801a03e:	4602      	mov	r2, r0
 801a040:	2800      	cmp	r0, #0
 801a042:	d1ea      	bne.n	801a01a <ucdr_serialize_array_uint8_t+0x16>
 801a044:	2301      	movs	r3, #1
 801a046:	7da8      	ldrb	r0, [r5, #22]
 801a048:	756b      	strb	r3, [r5, #21]
 801a04a:	4058      	eors	r0, r3
 801a04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a050:	463a      	mov	r2, r7
 801a052:	68a8      	ldr	r0, [r5, #8]
 801a054:	4641      	mov	r1, r8
 801a056:	f002 ff00 	bl	801ce5a <memcpy>
 801a05a:	68aa      	ldr	r2, [r5, #8]
 801a05c:	692b      	ldr	r3, [r5, #16]
 801a05e:	443a      	add	r2, r7
 801a060:	443b      	add	r3, r7
 801a062:	60aa      	str	r2, [r5, #8]
 801a064:	612b      	str	r3, [r5, #16]
 801a066:	e7ed      	b.n	801a044 <ucdr_serialize_array_uint8_t+0x40>

0801a068 <ucdr_serialize_endian_array_uint8_t>:
 801a068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a06c:	4619      	mov	r1, r3
 801a06e:	461f      	mov	r7, r3
 801a070:	4605      	mov	r5, r0
 801a072:	4690      	mov	r8, r2
 801a074:	f7f8 fd10 	bl	8012a98 <ucdr_check_buffer_available_for>
 801a078:	b9e0      	cbnz	r0, 801a0b4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801a07a:	463e      	mov	r6, r7
 801a07c:	e009      	b.n	801a092 <ucdr_serialize_endian_array_uint8_t+0x2a>
 801a07e:	68a8      	ldr	r0, [r5, #8]
 801a080:	f002 feeb 	bl	801ce5a <memcpy>
 801a084:	68ab      	ldr	r3, [r5, #8]
 801a086:	6928      	ldr	r0, [r5, #16]
 801a088:	4423      	add	r3, r4
 801a08a:	4420      	add	r0, r4
 801a08c:	1b36      	subs	r6, r6, r4
 801a08e:	60ab      	str	r3, [r5, #8]
 801a090:	6128      	str	r0, [r5, #16]
 801a092:	4631      	mov	r1, r6
 801a094:	2201      	movs	r2, #1
 801a096:	4628      	mov	r0, r5
 801a098:	f7f8 fd86 	bl	8012ba8 <ucdr_check_final_buffer_behavior_array>
 801a09c:	1bb9      	subs	r1, r7, r6
 801a09e:	4441      	add	r1, r8
 801a0a0:	4604      	mov	r4, r0
 801a0a2:	4602      	mov	r2, r0
 801a0a4:	2800      	cmp	r0, #0
 801a0a6:	d1ea      	bne.n	801a07e <ucdr_serialize_endian_array_uint8_t+0x16>
 801a0a8:	2301      	movs	r3, #1
 801a0aa:	7da8      	ldrb	r0, [r5, #22]
 801a0ac:	756b      	strb	r3, [r5, #21]
 801a0ae:	4058      	eors	r0, r3
 801a0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0b4:	463a      	mov	r2, r7
 801a0b6:	68a8      	ldr	r0, [r5, #8]
 801a0b8:	4641      	mov	r1, r8
 801a0ba:	f002 fece 	bl	801ce5a <memcpy>
 801a0be:	68aa      	ldr	r2, [r5, #8]
 801a0c0:	692b      	ldr	r3, [r5, #16]
 801a0c2:	443a      	add	r2, r7
 801a0c4:	443b      	add	r3, r7
 801a0c6:	60aa      	str	r2, [r5, #8]
 801a0c8:	612b      	str	r3, [r5, #16]
 801a0ca:	e7ed      	b.n	801a0a8 <ucdr_serialize_endian_array_uint8_t+0x40>

0801a0cc <ucdr_deserialize_array_uint8_t>:
 801a0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0d0:	4688      	mov	r8, r1
 801a0d2:	4611      	mov	r1, r2
 801a0d4:	4617      	mov	r7, r2
 801a0d6:	4605      	mov	r5, r0
 801a0d8:	f7f8 fcde 	bl	8012a98 <ucdr_check_buffer_available_for>
 801a0dc:	b9e0      	cbnz	r0, 801a118 <ucdr_deserialize_array_uint8_t+0x4c>
 801a0de:	463e      	mov	r6, r7
 801a0e0:	e009      	b.n	801a0f6 <ucdr_deserialize_array_uint8_t+0x2a>
 801a0e2:	68a9      	ldr	r1, [r5, #8]
 801a0e4:	f002 feb9 	bl	801ce5a <memcpy>
 801a0e8:	68aa      	ldr	r2, [r5, #8]
 801a0ea:	692b      	ldr	r3, [r5, #16]
 801a0ec:	4422      	add	r2, r4
 801a0ee:	4423      	add	r3, r4
 801a0f0:	1b36      	subs	r6, r6, r4
 801a0f2:	60aa      	str	r2, [r5, #8]
 801a0f4:	612b      	str	r3, [r5, #16]
 801a0f6:	2201      	movs	r2, #1
 801a0f8:	4631      	mov	r1, r6
 801a0fa:	4628      	mov	r0, r5
 801a0fc:	f7f8 fd54 	bl	8012ba8 <ucdr_check_final_buffer_behavior_array>
 801a100:	4604      	mov	r4, r0
 801a102:	1bb8      	subs	r0, r7, r6
 801a104:	4440      	add	r0, r8
 801a106:	4622      	mov	r2, r4
 801a108:	2c00      	cmp	r4, #0
 801a10a:	d1ea      	bne.n	801a0e2 <ucdr_deserialize_array_uint8_t+0x16>
 801a10c:	2301      	movs	r3, #1
 801a10e:	7da8      	ldrb	r0, [r5, #22]
 801a110:	756b      	strb	r3, [r5, #21]
 801a112:	4058      	eors	r0, r3
 801a114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a118:	463a      	mov	r2, r7
 801a11a:	68a9      	ldr	r1, [r5, #8]
 801a11c:	4640      	mov	r0, r8
 801a11e:	f002 fe9c 	bl	801ce5a <memcpy>
 801a122:	68aa      	ldr	r2, [r5, #8]
 801a124:	692b      	ldr	r3, [r5, #16]
 801a126:	443a      	add	r2, r7
 801a128:	443b      	add	r3, r7
 801a12a:	60aa      	str	r2, [r5, #8]
 801a12c:	612b      	str	r3, [r5, #16]
 801a12e:	e7ed      	b.n	801a10c <ucdr_deserialize_array_uint8_t+0x40>

0801a130 <ucdr_deserialize_endian_array_uint8_t>:
 801a130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a134:	4619      	mov	r1, r3
 801a136:	461f      	mov	r7, r3
 801a138:	4605      	mov	r5, r0
 801a13a:	4690      	mov	r8, r2
 801a13c:	f7f8 fcac 	bl	8012a98 <ucdr_check_buffer_available_for>
 801a140:	b9e0      	cbnz	r0, 801a17c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801a142:	463e      	mov	r6, r7
 801a144:	e009      	b.n	801a15a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801a146:	68a9      	ldr	r1, [r5, #8]
 801a148:	f002 fe87 	bl	801ce5a <memcpy>
 801a14c:	68ab      	ldr	r3, [r5, #8]
 801a14e:	6928      	ldr	r0, [r5, #16]
 801a150:	4423      	add	r3, r4
 801a152:	4420      	add	r0, r4
 801a154:	1b36      	subs	r6, r6, r4
 801a156:	60ab      	str	r3, [r5, #8]
 801a158:	6128      	str	r0, [r5, #16]
 801a15a:	2201      	movs	r2, #1
 801a15c:	4631      	mov	r1, r6
 801a15e:	4628      	mov	r0, r5
 801a160:	f7f8 fd22 	bl	8012ba8 <ucdr_check_final_buffer_behavior_array>
 801a164:	4604      	mov	r4, r0
 801a166:	1bb8      	subs	r0, r7, r6
 801a168:	4440      	add	r0, r8
 801a16a:	4622      	mov	r2, r4
 801a16c:	2c00      	cmp	r4, #0
 801a16e:	d1ea      	bne.n	801a146 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801a170:	2301      	movs	r3, #1
 801a172:	7da8      	ldrb	r0, [r5, #22]
 801a174:	756b      	strb	r3, [r5, #21]
 801a176:	4058      	eors	r0, r3
 801a178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a17c:	463a      	mov	r2, r7
 801a17e:	68a9      	ldr	r1, [r5, #8]
 801a180:	4640      	mov	r0, r8
 801a182:	f002 fe6a 	bl	801ce5a <memcpy>
 801a186:	68aa      	ldr	r2, [r5, #8]
 801a188:	692b      	ldr	r3, [r5, #16]
 801a18a:	443a      	add	r2, r7
 801a18c:	443b      	add	r3, r7
 801a18e:	60aa      	str	r2, [r5, #8]
 801a190:	612b      	str	r3, [r5, #16]
 801a192:	e7ed      	b.n	801a170 <ucdr_deserialize_endian_array_uint8_t+0x40>

0801a194 <ucdr_serialize_sequence_char>:
 801a194:	b570      	push	{r4, r5, r6, lr}
 801a196:	4615      	mov	r5, r2
 801a198:	460e      	mov	r6, r1
 801a19a:	7d01      	ldrb	r1, [r0, #20]
 801a19c:	4604      	mov	r4, r0
 801a19e:	f7f7 ffd1 	bl	8012144 <ucdr_serialize_endian_uint32_t>
 801a1a2:	b90d      	cbnz	r5, 801a1a8 <ucdr_serialize_sequence_char+0x14>
 801a1a4:	2001      	movs	r0, #1
 801a1a6:	bd70      	pop	{r4, r5, r6, pc}
 801a1a8:	7d21      	ldrb	r1, [r4, #20]
 801a1aa:	462b      	mov	r3, r5
 801a1ac:	4632      	mov	r2, r6
 801a1ae:	4620      	mov	r0, r4
 801a1b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a1b4:	f7ff bec2 	b.w	8019f3c <ucdr_serialize_endian_array_char>

0801a1b8 <ucdr_deserialize_sequence_char>:
 801a1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1bc:	461d      	mov	r5, r3
 801a1be:	4616      	mov	r6, r2
 801a1c0:	460f      	mov	r7, r1
 801a1c2:	461a      	mov	r2, r3
 801a1c4:	7d01      	ldrb	r1, [r0, #20]
 801a1c6:	4604      	mov	r4, r0
 801a1c8:	f7f8 f8e4 	bl	8012394 <ucdr_deserialize_endian_uint32_t>
 801a1cc:	682b      	ldr	r3, [r5, #0]
 801a1ce:	429e      	cmp	r6, r3
 801a1d0:	bf3c      	itt	cc
 801a1d2:	2201      	movcc	r2, #1
 801a1d4:	75a2      	strbcc	r2, [r4, #22]
 801a1d6:	b913      	cbnz	r3, 801a1de <ucdr_deserialize_sequence_char+0x26>
 801a1d8:	2001      	movs	r0, #1
 801a1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1de:	7d21      	ldrb	r1, [r4, #20]
 801a1e0:	463a      	mov	r2, r7
 801a1e2:	4620      	mov	r0, r4
 801a1e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a1e8:	f7ff beda 	b.w	8019fa0 <ucdr_deserialize_endian_array_char>

0801a1ec <ucdr_serialize_sequence_uint8_t>:
 801a1ec:	b570      	push	{r4, r5, r6, lr}
 801a1ee:	4615      	mov	r5, r2
 801a1f0:	460e      	mov	r6, r1
 801a1f2:	7d01      	ldrb	r1, [r0, #20]
 801a1f4:	4604      	mov	r4, r0
 801a1f6:	f7f7 ffa5 	bl	8012144 <ucdr_serialize_endian_uint32_t>
 801a1fa:	b90d      	cbnz	r5, 801a200 <ucdr_serialize_sequence_uint8_t+0x14>
 801a1fc:	2001      	movs	r0, #1
 801a1fe:	bd70      	pop	{r4, r5, r6, pc}
 801a200:	7d21      	ldrb	r1, [r4, #20]
 801a202:	462b      	mov	r3, r5
 801a204:	4632      	mov	r2, r6
 801a206:	4620      	mov	r0, r4
 801a208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a20c:	f7ff bf2c 	b.w	801a068 <ucdr_serialize_endian_array_uint8_t>

0801a210 <ucdr_deserialize_sequence_uint8_t>:
 801a210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a214:	461d      	mov	r5, r3
 801a216:	4616      	mov	r6, r2
 801a218:	460f      	mov	r7, r1
 801a21a:	461a      	mov	r2, r3
 801a21c:	7d01      	ldrb	r1, [r0, #20]
 801a21e:	4604      	mov	r4, r0
 801a220:	f7f8 f8b8 	bl	8012394 <ucdr_deserialize_endian_uint32_t>
 801a224:	682b      	ldr	r3, [r5, #0]
 801a226:	429e      	cmp	r6, r3
 801a228:	bf3c      	itt	cc
 801a22a:	2201      	movcc	r2, #1
 801a22c:	75a2      	strbcc	r2, [r4, #22]
 801a22e:	b913      	cbnz	r3, 801a236 <ucdr_deserialize_sequence_uint8_t+0x26>
 801a230:	2001      	movs	r0, #1
 801a232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a236:	7d21      	ldrb	r1, [r4, #20]
 801a238:	463a      	mov	r2, r7
 801a23a:	4620      	mov	r0, r4
 801a23c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a240:	f7ff bf76 	b.w	801a130 <ucdr_deserialize_endian_array_uint8_t>

0801a244 <ucdr_serialize_string>:
 801a244:	b510      	push	{r4, lr}
 801a246:	b082      	sub	sp, #8
 801a248:	4604      	mov	r4, r0
 801a24a:	4608      	mov	r0, r1
 801a24c:	9101      	str	r1, [sp, #4]
 801a24e:	f7e5 ffc9 	bl	80001e4 <strlen>
 801a252:	9901      	ldr	r1, [sp, #4]
 801a254:	1c42      	adds	r2, r0, #1
 801a256:	4620      	mov	r0, r4
 801a258:	b002      	add	sp, #8
 801a25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a25e:	f7ff bf99 	b.w	801a194 <ucdr_serialize_sequence_char>
 801a262:	bf00      	nop

0801a264 <ucdr_deserialize_string>:
 801a264:	b500      	push	{lr}
 801a266:	b083      	sub	sp, #12
 801a268:	ab01      	add	r3, sp, #4
 801a26a:	f7ff ffa5 	bl	801a1b8 <ucdr_deserialize_sequence_char>
 801a26e:	b003      	add	sp, #12
 801a270:	f85d fb04 	ldr.w	pc, [sp], #4

0801a274 <get_custom_error>:
 801a274:	4b01      	ldr	r3, [pc, #4]	@ (801a27c <get_custom_error+0x8>)
 801a276:	7818      	ldrb	r0, [r3, #0]
 801a278:	4770      	bx	lr
 801a27a:	bf00      	nop
 801a27c:	20012d68 	.word	0x20012d68

0801a280 <recv_custom_msg>:
 801a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a284:	4693      	mov	fp, r2
 801a286:	b089      	sub	sp, #36	@ 0x24
 801a288:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801a28c:	9305      	str	r3, [sp, #20]
 801a28e:	468a      	mov	sl, r1
 801a290:	2100      	movs	r1, #0
 801a292:	4604      	mov	r4, r0
 801a294:	f88d 101e 	strb.w	r1, [sp, #30]
 801a298:	b322      	cbz	r2, 801a2e4 <recv_custom_msg+0x64>
 801a29a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801a29e:	f10d 081f 	add.w	r8, sp, #31
 801a2a2:	af05      	add	r7, sp, #20
 801a2a4:	f10d 061e 	add.w	r6, sp, #30
 801a2a8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 801a2ac:	e002      	b.n	801a2b4 <recv_custom_msg+0x34>
 801a2ae:	9b05      	ldr	r3, [sp, #20]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	dd0f      	ble.n	801a2d4 <recv_custom_msg+0x54>
 801a2b4:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801a2b8:	4623      	mov	r3, r4
 801a2ba:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801a2be:	e9cd 5600 	strd	r5, r6, [sp]
 801a2c2:	4622      	mov	r2, r4
 801a2c4:	4648      	mov	r0, r9
 801a2c6:	f001 f92d 	bl	801b524 <uxr_read_framed_msg>
 801a2ca:	2800      	cmp	r0, #0
 801a2cc:	d0ef      	beq.n	801a2ae <recv_custom_msg+0x2e>
 801a2ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801a2d2:	b1b3      	cbz	r3, 801a302 <recv_custom_msg+0x82>
 801a2d4:	4b0f      	ldr	r3, [pc, #60]	@ (801a314 <recv_custom_msg+0x94>)
 801a2d6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801a2da:	701a      	strb	r2, [r3, #0]
 801a2dc:	2000      	movs	r0, #0
 801a2de:	b009      	add	sp, #36	@ 0x24
 801a2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2e4:	f10d 021f 	add.w	r2, sp, #31
 801a2e8:	9200      	str	r2, [sp, #0]
 801a2ea:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801a2ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a2f2:	4601      	mov	r1, r0
 801a2f4:	47a8      	blx	r5
 801a2f6:	2800      	cmp	r0, #0
 801a2f8:	d0ec      	beq.n	801a2d4 <recv_custom_msg+0x54>
 801a2fa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d1e8      	bne.n	801a2d4 <recv_custom_msg+0x54>
 801a302:	f8cb 0000 	str.w	r0, [fp]
 801a306:	2001      	movs	r0, #1
 801a308:	f8ca 4000 	str.w	r4, [sl]
 801a30c:	b009      	add	sp, #36	@ 0x24
 801a30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a312:	bf00      	nop
 801a314:	20012d68 	.word	0x20012d68

0801a318 <send_custom_msg>:
 801a318:	b530      	push	{r4, r5, lr}
 801a31a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801a31e:	b087      	sub	sp, #28
 801a320:	4615      	mov	r5, r2
 801a322:	b974      	cbnz	r4, 801a342 <send_custom_msg+0x2a>
 801a324:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 801a328:	f10d 0317 	add.w	r3, sp, #23
 801a32c:	47a0      	blx	r4
 801a32e:	b108      	cbz	r0, 801a334 <send_custom_msg+0x1c>
 801a330:	42a8      	cmp	r0, r5
 801a332:	d015      	beq.n	801a360 <send_custom_msg+0x48>
 801a334:	4b0c      	ldr	r3, [pc, #48]	@ (801a368 <send_custom_msg+0x50>)
 801a336:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801a33a:	701a      	strb	r2, [r3, #0]
 801a33c:	2000      	movs	r0, #0
 801a33e:	b007      	add	sp, #28
 801a340:	bd30      	pop	{r4, r5, pc}
 801a342:	460b      	mov	r3, r1
 801a344:	2200      	movs	r2, #0
 801a346:	f10d 0117 	add.w	r1, sp, #23
 801a34a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801a34e:	4602      	mov	r2, r0
 801a350:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 801a354:	9500      	str	r5, [sp, #0]
 801a356:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801a35a:	f000 feeb 	bl	801b134 <uxr_write_framed_msg>
 801a35e:	e7e6      	b.n	801a32e <send_custom_msg+0x16>
 801a360:	2001      	movs	r0, #1
 801a362:	b007      	add	sp, #28
 801a364:	bd30      	pop	{r4, r5, pc}
 801a366:	bf00      	nop
 801a368:	20012d68 	.word	0x20012d68

0801a36c <uxr_set_custom_transport_callbacks>:
 801a36c:	b410      	push	{r4}
 801a36e:	9c01      	ldr	r4, [sp, #4]
 801a370:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 801a374:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801a378:	9b02      	ldr	r3, [sp, #8]
 801a37a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801a37e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a382:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801a386:	4770      	bx	lr

0801a388 <uxr_init_custom_transport>:
 801a388:	b538      	push	{r3, r4, r5, lr}
 801a38a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801a38e:	b303      	cbz	r3, 801a3d2 <uxr_init_custom_transport+0x4a>
 801a390:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801a394:	4604      	mov	r4, r0
 801a396:	b1e2      	cbz	r2, 801a3d2 <uxr_init_custom_transport+0x4a>
 801a398:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801a39c:	b1ca      	cbz	r2, 801a3d2 <uxr_init_custom_transport+0x4a>
 801a39e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801a3a2:	b1b2      	cbz	r2, 801a3d2 <uxr_init_custom_transport+0x4a>
 801a3a4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 801a3a8:	4798      	blx	r3
 801a3aa:	4605      	mov	r5, r0
 801a3ac:	b188      	cbz	r0, 801a3d2 <uxr_init_custom_transport+0x4a>
 801a3ae:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801a3b2:	b98b      	cbnz	r3, 801a3d8 <uxr_init_custom_transport+0x50>
 801a3b4:	490b      	ldr	r1, [pc, #44]	@ (801a3e4 <uxr_init_custom_transport+0x5c>)
 801a3b6:	4b0c      	ldr	r3, [pc, #48]	@ (801a3e8 <uxr_init_custom_transport+0x60>)
 801a3b8:	4a0c      	ldr	r2, [pc, #48]	@ (801a3ec <uxr_init_custom_transport+0x64>)
 801a3ba:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801a3be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a3c2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801a3c6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801a3ca:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801a3ce:	4628      	mov	r0, r5
 801a3d0:	bd38      	pop	{r3, r4, r5, pc}
 801a3d2:	2500      	movs	r5, #0
 801a3d4:	4628      	mov	r0, r5
 801a3d6:	bd38      	pop	{r3, r4, r5, pc}
 801a3d8:	2100      	movs	r1, #0
 801a3da:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801a3de:	f000 fea3 	bl	801b128 <uxr_init_framing_io>
 801a3e2:	e7e7      	b.n	801a3b4 <uxr_init_custom_transport+0x2c>
 801a3e4:	0801a319 	.word	0x0801a319
 801a3e8:	0801a281 	.word	0x0801a281
 801a3ec:	0801a275 	.word	0x0801a275

0801a3f0 <uxr_close_custom_transport>:
 801a3f0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801a3f4:	4718      	bx	r3
 801a3f6:	bf00      	nop

0801a3f8 <uxr_init_input_best_effort_stream>:
 801a3f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a3fc:	8003      	strh	r3, [r0, #0]
 801a3fe:	4770      	bx	lr

0801a400 <uxr_reset_input_best_effort_stream>:
 801a400:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a404:	8003      	strh	r3, [r0, #0]
 801a406:	4770      	bx	lr

0801a408 <uxr_receive_best_effort_message>:
 801a408:	b538      	push	{r3, r4, r5, lr}
 801a40a:	4604      	mov	r4, r0
 801a40c:	8800      	ldrh	r0, [r0, #0]
 801a40e:	460d      	mov	r5, r1
 801a410:	f000 fe72 	bl	801b0f8 <uxr_seq_num_cmp>
 801a414:	4603      	mov	r3, r0
 801a416:	2b00      	cmp	r3, #0
 801a418:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801a41c:	bfb8      	it	lt
 801a41e:	8025      	strhlt	r5, [r4, #0]
 801a420:	bd38      	pop	{r3, r4, r5, pc}
 801a422:	bf00      	nop

0801a424 <on_full_input_buffer>:
 801a424:	b570      	push	{r4, r5, r6, lr}
 801a426:	4605      	mov	r5, r0
 801a428:	460c      	mov	r4, r1
 801a42a:	682b      	ldr	r3, [r5, #0]
 801a42c:	6809      	ldr	r1, [r1, #0]
 801a42e:	8920      	ldrh	r0, [r4, #8]
 801a430:	6862      	ldr	r2, [r4, #4]
 801a432:	fbb2 f2f0 	udiv	r2, r2, r0
 801a436:	eba3 0c01 	sub.w	ip, r3, r1
 801a43a:	fbbc fcf2 	udiv	ip, ip, r2
 801a43e:	f10c 0c01 	add.w	ip, ip, #1
 801a442:	fa1f f38c 	uxth.w	r3, ip
 801a446:	fbb3 f6f0 	udiv	r6, r3, r0
 801a44a:	fb00 3316 	mls	r3, r0, r6, r3
 801a44e:	b29b      	uxth	r3, r3
 801a450:	fb02 f303 	mul.w	r3, r2, r3
 801a454:	1d18      	adds	r0, r3, #4
 801a456:	4408      	add	r0, r1
 801a458:	7d26      	ldrb	r6, [r4, #20]
 801a45a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801a45e:	b116      	cbz	r6, 801a466 <on_full_input_buffer+0x42>
 801a460:	2600      	movs	r6, #0
 801a462:	f840 6c04 	str.w	r6, [r0, #-4]
 801a466:	2a03      	cmp	r2, #3
 801a468:	d801      	bhi.n	801a46e <on_full_input_buffer+0x4a>
 801a46a:	2001      	movs	r0, #1
 801a46c:	bd70      	pop	{r4, r5, r6, pc}
 801a46e:	3308      	adds	r3, #8
 801a470:	4419      	add	r1, r3
 801a472:	4628      	mov	r0, r5
 801a474:	692b      	ldr	r3, [r5, #16]
 801a476:	3a04      	subs	r2, #4
 801a478:	f7f8 fb5a 	bl	8012b30 <ucdr_init_buffer_origin>
 801a47c:	4628      	mov	r0, r5
 801a47e:	4903      	ldr	r1, [pc, #12]	@ (801a48c <on_full_input_buffer+0x68>)
 801a480:	4622      	mov	r2, r4
 801a482:	f7f8 fb31 	bl	8012ae8 <ucdr_set_on_full_buffer_callback>
 801a486:	2000      	movs	r0, #0
 801a488:	bd70      	pop	{r4, r5, r6, pc}
 801a48a:	bf00      	nop
 801a48c:	0801a425 	.word	0x0801a425

0801a490 <uxr_init_input_reliable_stream>:
 801a490:	b500      	push	{lr}
 801a492:	e9c0 1200 	strd	r1, r2, [r0]
 801a496:	f04f 0e00 	mov.w	lr, #0
 801a49a:	9a01      	ldr	r2, [sp, #4]
 801a49c:	8103      	strh	r3, [r0, #8]
 801a49e:	6102      	str	r2, [r0, #16]
 801a4a0:	f880 e014 	strb.w	lr, [r0, #20]
 801a4a4:	b1d3      	cbz	r3, 801a4dc <uxr_init_input_reliable_stream+0x4c>
 801a4a6:	f8c1 e000 	str.w	lr, [r1]
 801a4aa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a4ae:	f1bc 0f01 	cmp.w	ip, #1
 801a4b2:	d913      	bls.n	801a4dc <uxr_init_input_reliable_stream+0x4c>
 801a4b4:	2301      	movs	r3, #1
 801a4b6:	fbb3 f1fc 	udiv	r1, r3, ip
 801a4ba:	fb0c 3111 	mls	r1, ip, r1, r3
 801a4be:	b289      	uxth	r1, r1
 801a4c0:	6842      	ldr	r2, [r0, #4]
 801a4c2:	fbb2 f2fc 	udiv	r2, r2, ip
 801a4c6:	fb01 f202 	mul.w	r2, r1, r2
 801a4ca:	6801      	ldr	r1, [r0, #0]
 801a4cc:	f841 e002 	str.w	lr, [r1, r2]
 801a4d0:	3301      	adds	r3, #1
 801a4d2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a4d6:	b29b      	uxth	r3, r3
 801a4d8:	459c      	cmp	ip, r3
 801a4da:	d8ec      	bhi.n	801a4b6 <uxr_init_input_reliable_stream+0x26>
 801a4dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a4e0:	60c3      	str	r3, [r0, #12]
 801a4e2:	f85d fb04 	ldr.w	pc, [sp], #4
 801a4e6:	bf00      	nop

0801a4e8 <uxr_reset_input_reliable_stream>:
 801a4e8:	8901      	ldrh	r1, [r0, #8]
 801a4ea:	b1e9      	cbz	r1, 801a528 <uxr_reset_input_reliable_stream+0x40>
 801a4ec:	f04f 0c00 	mov.w	ip, #0
 801a4f0:	b500      	push	{lr}
 801a4f2:	4663      	mov	r3, ip
 801a4f4:	46e6      	mov	lr, ip
 801a4f6:	fbb3 f2f1 	udiv	r2, r3, r1
 801a4fa:	fb01 3312 	mls	r3, r1, r2, r3
 801a4fe:	b29b      	uxth	r3, r3
 801a500:	6842      	ldr	r2, [r0, #4]
 801a502:	fbb2 f2f1 	udiv	r2, r2, r1
 801a506:	fb02 f303 	mul.w	r3, r2, r3
 801a50a:	6802      	ldr	r2, [r0, #0]
 801a50c:	f842 e003 	str.w	lr, [r2, r3]
 801a510:	f10c 0c01 	add.w	ip, ip, #1
 801a514:	8901      	ldrh	r1, [r0, #8]
 801a516:	fa1f f38c 	uxth.w	r3, ip
 801a51a:	4299      	cmp	r1, r3
 801a51c:	d8eb      	bhi.n	801a4f6 <uxr_reset_input_reliable_stream+0xe>
 801a51e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a522:	60c3      	str	r3, [r0, #12]
 801a524:	f85d fb04 	ldr.w	pc, [sp], #4
 801a528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a52c:	60c3      	str	r3, [r0, #12]
 801a52e:	4770      	bx	lr

0801a530 <uxr_receive_reliable_message>:
 801a530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a534:	4604      	mov	r4, r0
 801a536:	460d      	mov	r5, r1
 801a538:	8901      	ldrh	r1, [r0, #8]
 801a53a:	8980      	ldrh	r0, [r0, #12]
 801a53c:	4690      	mov	r8, r2
 801a53e:	461f      	mov	r7, r3
 801a540:	f000 fdd2 	bl	801b0e8 <uxr_seq_num_add>
 801a544:	4629      	mov	r1, r5
 801a546:	4606      	mov	r6, r0
 801a548:	89a0      	ldrh	r0, [r4, #12]
 801a54a:	f000 fdd5 	bl	801b0f8 <uxr_seq_num_cmp>
 801a54e:	2800      	cmp	r0, #0
 801a550:	db0a      	blt.n	801a568 <uxr_receive_reliable_message+0x38>
 801a552:	2600      	movs	r6, #0
 801a554:	89e0      	ldrh	r0, [r4, #14]
 801a556:	4629      	mov	r1, r5
 801a558:	f000 fdce 	bl	801b0f8 <uxr_seq_num_cmp>
 801a55c:	2800      	cmp	r0, #0
 801a55e:	da00      	bge.n	801a562 <uxr_receive_reliable_message+0x32>
 801a560:	81e5      	strh	r5, [r4, #14]
 801a562:	4630      	mov	r0, r6
 801a564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a568:	4630      	mov	r0, r6
 801a56a:	4629      	mov	r1, r5
 801a56c:	f000 fdc4 	bl	801b0f8 <uxr_seq_num_cmp>
 801a570:	2800      	cmp	r0, #0
 801a572:	dbee      	blt.n	801a552 <uxr_receive_reliable_message+0x22>
 801a574:	6923      	ldr	r3, [r4, #16]
 801a576:	4640      	mov	r0, r8
 801a578:	4798      	blx	r3
 801a57a:	2101      	movs	r1, #1
 801a57c:	4681      	mov	r9, r0
 801a57e:	89a0      	ldrh	r0, [r4, #12]
 801a580:	f000 fdb2 	bl	801b0e8 <uxr_seq_num_add>
 801a584:	f1b9 0f00 	cmp.w	r9, #0
 801a588:	d101      	bne.n	801a58e <uxr_receive_reliable_message+0x5e>
 801a58a:	4285      	cmp	r5, r0
 801a58c:	d047      	beq.n	801a61e <uxr_receive_reliable_message+0xee>
 801a58e:	8922      	ldrh	r2, [r4, #8]
 801a590:	fbb5 f0f2 	udiv	r0, r5, r2
 801a594:	fb02 5010 	mls	r0, r2, r0, r5
 801a598:	b280      	uxth	r0, r0
 801a59a:	6863      	ldr	r3, [r4, #4]
 801a59c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a5a0:	fb00 f303 	mul.w	r3, r0, r3
 801a5a4:	6820      	ldr	r0, [r4, #0]
 801a5a6:	3304      	adds	r3, #4
 801a5a8:	4418      	add	r0, r3
 801a5aa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d1cf      	bne.n	801a552 <uxr_receive_reliable_message+0x22>
 801a5b2:	4641      	mov	r1, r8
 801a5b4:	463a      	mov	r2, r7
 801a5b6:	f002 fc50 	bl	801ce5a <memcpy>
 801a5ba:	8921      	ldrh	r1, [r4, #8]
 801a5bc:	fbb5 f2f1 	udiv	r2, r5, r1
 801a5c0:	fb01 5212 	mls	r2, r1, r2, r5
 801a5c4:	b292      	uxth	r2, r2
 801a5c6:	6863      	ldr	r3, [r4, #4]
 801a5c8:	fbb3 f3f1 	udiv	r3, r3, r1
 801a5cc:	fb02 f303 	mul.w	r3, r2, r3
 801a5d0:	6822      	ldr	r2, [r4, #0]
 801a5d2:	50d7      	str	r7, [r2, r3]
 801a5d4:	9a08      	ldr	r2, [sp, #32]
 801a5d6:	2301      	movs	r3, #1
 801a5d8:	7013      	strb	r3, [r2, #0]
 801a5da:	f1b9 0f00 	cmp.w	r9, #0
 801a5de:	d0b8      	beq.n	801a552 <uxr_receive_reliable_message+0x22>
 801a5e0:	89a6      	ldrh	r6, [r4, #12]
 801a5e2:	4630      	mov	r0, r6
 801a5e4:	2101      	movs	r1, #1
 801a5e6:	f000 fd7f 	bl	801b0e8 <uxr_seq_num_add>
 801a5ea:	8922      	ldrh	r2, [r4, #8]
 801a5ec:	6863      	ldr	r3, [r4, #4]
 801a5ee:	fbb3 f3f2 	udiv	r3, r3, r2
 801a5f2:	4606      	mov	r6, r0
 801a5f4:	fbb0 f0f2 	udiv	r0, r0, r2
 801a5f8:	fb02 6010 	mls	r0, r2, r0, r6
 801a5fc:	b280      	uxth	r0, r0
 801a5fe:	fb00 f303 	mul.w	r3, r0, r3
 801a602:	6820      	ldr	r0, [r4, #0]
 801a604:	3304      	adds	r3, #4
 801a606:	4418      	add	r0, r3
 801a608:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d0a0      	beq.n	801a552 <uxr_receive_reliable_message+0x22>
 801a610:	6923      	ldr	r3, [r4, #16]
 801a612:	4798      	blx	r3
 801a614:	2802      	cmp	r0, #2
 801a616:	d008      	beq.n	801a62a <uxr_receive_reliable_message+0xfa>
 801a618:	2801      	cmp	r0, #1
 801a61a:	d0e2      	beq.n	801a5e2 <uxr_receive_reliable_message+0xb2>
 801a61c:	e799      	b.n	801a552 <uxr_receive_reliable_message+0x22>
 801a61e:	9b08      	ldr	r3, [sp, #32]
 801a620:	81a5      	strh	r5, [r4, #12]
 801a622:	2601      	movs	r6, #1
 801a624:	f883 9000 	strb.w	r9, [r3]
 801a628:	e794      	b.n	801a554 <uxr_receive_reliable_message+0x24>
 801a62a:	2601      	movs	r6, #1
 801a62c:	e792      	b.n	801a554 <uxr_receive_reliable_message+0x24>
 801a62e:	bf00      	nop

0801a630 <uxr_next_input_reliable_buffer_available>:
 801a630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a634:	4604      	mov	r4, r0
 801a636:	460f      	mov	r7, r1
 801a638:	8980      	ldrh	r0, [r0, #12]
 801a63a:	2101      	movs	r1, #1
 801a63c:	4690      	mov	r8, r2
 801a63e:	f000 fd53 	bl	801b0e8 <uxr_seq_num_add>
 801a642:	8922      	ldrh	r2, [r4, #8]
 801a644:	fbb0 f6f2 	udiv	r6, r0, r2
 801a648:	fb02 0616 	mls	r6, r2, r6, r0
 801a64c:	b2b6      	uxth	r6, r6
 801a64e:	6863      	ldr	r3, [r4, #4]
 801a650:	fbb3 f3f2 	udiv	r3, r3, r2
 801a654:	fb06 f303 	mul.w	r3, r6, r3
 801a658:	6826      	ldr	r6, [r4, #0]
 801a65a:	3304      	adds	r3, #4
 801a65c:	441e      	add	r6, r3
 801a65e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801a662:	f1b9 0f00 	cmp.w	r9, #0
 801a666:	d023      	beq.n	801a6b0 <uxr_next_input_reliable_buffer_available+0x80>
 801a668:	6923      	ldr	r3, [r4, #16]
 801a66a:	4605      	mov	r5, r0
 801a66c:	4630      	mov	r0, r6
 801a66e:	4798      	blx	r3
 801a670:	4682      	mov	sl, r0
 801a672:	b300      	cbz	r0, 801a6b6 <uxr_next_input_reliable_buffer_available+0x86>
 801a674:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801a678:	2101      	movs	r1, #1
 801a67a:	4650      	mov	r0, sl
 801a67c:	f000 fd34 	bl	801b0e8 <uxr_seq_num_add>
 801a680:	8921      	ldrh	r1, [r4, #8]
 801a682:	fbb0 f2f1 	udiv	r2, r0, r1
 801a686:	4682      	mov	sl, r0
 801a688:	fb01 0212 	mls	r2, r1, r2, r0
 801a68c:	e9d4 0300 	ldrd	r0, r3, [r4]
 801a690:	b292      	uxth	r2, r2
 801a692:	fbb3 f3f1 	udiv	r3, r3, r1
 801a696:	fb02 f303 	mul.w	r3, r2, r3
 801a69a:	3304      	adds	r3, #4
 801a69c:	4418      	add	r0, r3
 801a69e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a6a2:	b12b      	cbz	r3, 801a6b0 <uxr_next_input_reliable_buffer_available+0x80>
 801a6a4:	6923      	ldr	r3, [r4, #16]
 801a6a6:	4798      	blx	r3
 801a6a8:	2802      	cmp	r0, #2
 801a6aa:	d01b      	beq.n	801a6e4 <uxr_next_input_reliable_buffer_available+0xb4>
 801a6ac:	2801      	cmp	r0, #1
 801a6ae:	d0e3      	beq.n	801a678 <uxr_next_input_reliable_buffer_available+0x48>
 801a6b0:	2000      	movs	r0, #0
 801a6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6b6:	464a      	mov	r2, r9
 801a6b8:	4631      	mov	r1, r6
 801a6ba:	4638      	mov	r0, r7
 801a6bc:	f7f8 fa40 	bl	8012b40 <ucdr_init_buffer>
 801a6c0:	8921      	ldrh	r1, [r4, #8]
 801a6c2:	fbb5 f2f1 	udiv	r2, r5, r1
 801a6c6:	fb01 5212 	mls	r2, r1, r2, r5
 801a6ca:	b292      	uxth	r2, r2
 801a6cc:	6863      	ldr	r3, [r4, #4]
 801a6ce:	fbb3 f3f1 	udiv	r3, r3, r1
 801a6d2:	fb02 f303 	mul.w	r3, r2, r3
 801a6d6:	6822      	ldr	r2, [r4, #0]
 801a6d8:	f842 a003 	str.w	sl, [r2, r3]
 801a6dc:	2001      	movs	r0, #1
 801a6de:	81a5      	strh	r5, [r4, #12]
 801a6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6e4:	8920      	ldrh	r0, [r4, #8]
 801a6e6:	fbb5 f3f0 	udiv	r3, r5, r0
 801a6ea:	fb00 5513 	mls	r5, r0, r3, r5
 801a6ee:	b2ad      	uxth	r5, r5
 801a6f0:	6863      	ldr	r3, [r4, #4]
 801a6f2:	fbb3 f3f0 	udiv	r3, r3, r0
 801a6f6:	fb03 f505 	mul.w	r5, r3, r5
 801a6fa:	6823      	ldr	r3, [r4, #0]
 801a6fc:	2000      	movs	r0, #0
 801a6fe:	5158      	str	r0, [r3, r5]
 801a700:	eb06 0108 	add.w	r1, r6, r8
 801a704:	eba9 0208 	sub.w	r2, r9, r8
 801a708:	4638      	mov	r0, r7
 801a70a:	f7f8 fa19 	bl	8012b40 <ucdr_init_buffer>
 801a70e:	4638      	mov	r0, r7
 801a710:	4903      	ldr	r1, [pc, #12]	@ (801a720 <uxr_next_input_reliable_buffer_available+0xf0>)
 801a712:	4622      	mov	r2, r4
 801a714:	f7f8 f9e8 	bl	8012ae8 <ucdr_set_on_full_buffer_callback>
 801a718:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801a71c:	2001      	movs	r0, #1
 801a71e:	e7c8      	b.n	801a6b2 <uxr_next_input_reliable_buffer_available+0x82>
 801a720:	0801a425 	.word	0x0801a425

0801a724 <uxr_process_heartbeat>:
 801a724:	b538      	push	{r3, r4, r5, lr}
 801a726:	4611      	mov	r1, r2
 801a728:	4604      	mov	r4, r0
 801a72a:	89c0      	ldrh	r0, [r0, #14]
 801a72c:	4615      	mov	r5, r2
 801a72e:	f000 fce3 	bl	801b0f8 <uxr_seq_num_cmp>
 801a732:	2800      	cmp	r0, #0
 801a734:	bfb8      	it	lt
 801a736:	81e5      	strhlt	r5, [r4, #14]
 801a738:	bd38      	pop	{r3, r4, r5, pc}
 801a73a:	bf00      	nop

0801a73c <uxr_compute_acknack>:
 801a73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a740:	8903      	ldrh	r3, [r0, #8]
 801a742:	8985      	ldrh	r5, [r0, #12]
 801a744:	4604      	mov	r4, r0
 801a746:	460e      	mov	r6, r1
 801a748:	b1d3      	cbz	r3, 801a780 <uxr_compute_acknack+0x44>
 801a74a:	4628      	mov	r0, r5
 801a74c:	2701      	movs	r7, #1
 801a74e:	e003      	b.n	801a758 <uxr_compute_acknack+0x1c>
 801a750:	4567      	cmp	r7, ip
 801a752:	d215      	bcs.n	801a780 <uxr_compute_acknack+0x44>
 801a754:	89a0      	ldrh	r0, [r4, #12]
 801a756:	3701      	adds	r7, #1
 801a758:	b2b9      	uxth	r1, r7
 801a75a:	f000 fcc5 	bl	801b0e8 <uxr_seq_num_add>
 801a75e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a762:	fbb0 f3fc 	udiv	r3, r0, ip
 801a766:	fb0c 0313 	mls	r3, ip, r3, r0
 801a76a:	b29a      	uxth	r2, r3
 801a76c:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a770:	fbb3 f3fc 	udiv	r3, r3, ip
 801a774:	fb02 f303 	mul.w	r3, r2, r3
 801a778:	58cb      	ldr	r3, [r1, r3]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d1e8      	bne.n	801a750 <uxr_compute_acknack+0x14>
 801a77e:	4605      	mov	r5, r0
 801a780:	8035      	strh	r5, [r6, #0]
 801a782:	2101      	movs	r1, #1
 801a784:	4628      	mov	r0, r5
 801a786:	89e7      	ldrh	r7, [r4, #14]
 801a788:	f000 fcb2 	bl	801b0f0 <uxr_seq_num_sub>
 801a78c:	4601      	mov	r1, r0
 801a78e:	4638      	mov	r0, r7
 801a790:	f000 fcae 	bl	801b0f0 <uxr_seq_num_sub>
 801a794:	4605      	mov	r5, r0
 801a796:	b318      	cbz	r0, 801a7e0 <uxr_compute_acknack+0xa4>
 801a798:	f04f 0900 	mov.w	r9, #0
 801a79c:	464f      	mov	r7, r9
 801a79e:	f04f 0801 	mov.w	r8, #1
 801a7a2:	fa1f f189 	uxth.w	r1, r9
 801a7a6:	8830      	ldrh	r0, [r6, #0]
 801a7a8:	f000 fc9e 	bl	801b0e8 <uxr_seq_num_add>
 801a7ac:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a7b0:	fbb0 f3fc 	udiv	r3, r0, ip
 801a7b4:	e9d4 1200 	ldrd	r1, r2, [r4]
 801a7b8:	fb03 001c 	mls	r0, r3, ip, r0
 801a7bc:	b283      	uxth	r3, r0
 801a7be:	fbb2 f2fc 	udiv	r2, r2, ip
 801a7c2:	fb02 f303 	mul.w	r3, r2, r3
 801a7c6:	fa08 f209 	lsl.w	r2, r8, r9
 801a7ca:	58cb      	ldr	r3, [r1, r3]
 801a7cc:	f109 0901 	add.w	r9, r9, #1
 801a7d0:	b90b      	cbnz	r3, 801a7d6 <uxr_compute_acknack+0x9a>
 801a7d2:	4317      	orrs	r7, r2
 801a7d4:	b2bf      	uxth	r7, r7
 801a7d6:	454d      	cmp	r5, r9
 801a7d8:	d1e3      	bne.n	801a7a2 <uxr_compute_acknack+0x66>
 801a7da:	4638      	mov	r0, r7
 801a7dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a7e0:	4607      	mov	r7, r0
 801a7e2:	4638      	mov	r0, r7
 801a7e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a7e8 <uxr_init_output_best_effort_stream>:
 801a7e8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a7ec:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a7f0:	6001      	str	r1, [r0, #0]
 801a7f2:	7303      	strb	r3, [r0, #12]
 801a7f4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a7f8:	4770      	bx	lr
 801a7fa:	bf00      	nop

0801a7fc <uxr_reset_output_best_effort_stream>:
 801a7fc:	7b02      	ldrb	r2, [r0, #12]
 801a7fe:	6042      	str	r2, [r0, #4]
 801a800:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a804:	81c3      	strh	r3, [r0, #14]
 801a806:	4770      	bx	lr

0801a808 <uxr_prepare_best_effort_buffer_to_write>:
 801a808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a80a:	4604      	mov	r4, r0
 801a80c:	b083      	sub	sp, #12
 801a80e:	6840      	ldr	r0, [r0, #4]
 801a810:	460d      	mov	r5, r1
 801a812:	4616      	mov	r6, r2
 801a814:	f7f9 fe40 	bl	8014498 <uxr_submessage_padding>
 801a818:	6863      	ldr	r3, [r4, #4]
 801a81a:	4418      	add	r0, r3
 801a81c:	68a3      	ldr	r3, [r4, #8]
 801a81e:	1942      	adds	r2, r0, r5
 801a820:	4293      	cmp	r3, r2
 801a822:	bf2c      	ite	cs
 801a824:	2701      	movcs	r7, #1
 801a826:	2700      	movcc	r7, #0
 801a828:	d202      	bcs.n	801a830 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a82a:	4638      	mov	r0, r7
 801a82c:	b003      	add	sp, #12
 801a82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a830:	9000      	str	r0, [sp, #0]
 801a832:	6821      	ldr	r1, [r4, #0]
 801a834:	4630      	mov	r0, r6
 801a836:	2300      	movs	r3, #0
 801a838:	f7f8 f970 	bl	8012b1c <ucdr_init_buffer_origin_offset>
 801a83c:	6861      	ldr	r1, [r4, #4]
 801a83e:	4638      	mov	r0, r7
 801a840:	4429      	add	r1, r5
 801a842:	6061      	str	r1, [r4, #4]
 801a844:	b003      	add	sp, #12
 801a846:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a848 <uxr_prepare_best_effort_buffer_to_send>:
 801a848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a84c:	4604      	mov	r4, r0
 801a84e:	461d      	mov	r5, r3
 801a850:	6840      	ldr	r0, [r0, #4]
 801a852:	7b23      	ldrb	r3, [r4, #12]
 801a854:	4298      	cmp	r0, r3
 801a856:	bf8c      	ite	hi
 801a858:	2601      	movhi	r6, #1
 801a85a:	2600      	movls	r6, #0
 801a85c:	d802      	bhi.n	801a864 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a85e:	4630      	mov	r0, r6
 801a860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a864:	4688      	mov	r8, r1
 801a866:	89e0      	ldrh	r0, [r4, #14]
 801a868:	2101      	movs	r1, #1
 801a86a:	4617      	mov	r7, r2
 801a86c:	f000 fc3c 	bl	801b0e8 <uxr_seq_num_add>
 801a870:	6823      	ldr	r3, [r4, #0]
 801a872:	81e0      	strh	r0, [r4, #14]
 801a874:	8028      	strh	r0, [r5, #0]
 801a876:	f8c8 3000 	str.w	r3, [r8]
 801a87a:	6863      	ldr	r3, [r4, #4]
 801a87c:	603b      	str	r3, [r7, #0]
 801a87e:	7b23      	ldrb	r3, [r4, #12]
 801a880:	6063      	str	r3, [r4, #4]
 801a882:	4630      	mov	r0, r6
 801a884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a888 <on_full_output_buffer>:
 801a888:	b538      	push	{r3, r4, r5, lr}
 801a88a:	6802      	ldr	r2, [r0, #0]
 801a88c:	460c      	mov	r4, r1
 801a88e:	6809      	ldr	r1, [r1, #0]
 801a890:	8923      	ldrh	r3, [r4, #8]
 801a892:	eba2 0c01 	sub.w	ip, r2, r1
 801a896:	6862      	ldr	r2, [r4, #4]
 801a898:	fbb2 f2f3 	udiv	r2, r2, r3
 801a89c:	fbbc fcf2 	udiv	ip, ip, r2
 801a8a0:	f10c 0c01 	add.w	ip, ip, #1
 801a8a4:	fa1f fc8c 	uxth.w	ip, ip
 801a8a8:	fbbc fef3 	udiv	lr, ip, r3
 801a8ac:	fb03 c31e 	mls	r3, r3, lr, ip
 801a8b0:	b29b      	uxth	r3, r3
 801a8b2:	fb02 f303 	mul.w	r3, r2, r3
 801a8b6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a8ba:	58ca      	ldr	r2, [r1, r3]
 801a8bc:	4463      	add	r3, ip
 801a8be:	eba2 020c 	sub.w	r2, r2, ip
 801a8c2:	3308      	adds	r3, #8
 801a8c4:	4605      	mov	r5, r0
 801a8c6:	4419      	add	r1, r3
 801a8c8:	3a04      	subs	r2, #4
 801a8ca:	6903      	ldr	r3, [r0, #16]
 801a8cc:	f7f8 f930 	bl	8012b30 <ucdr_init_buffer_origin>
 801a8d0:	4628      	mov	r0, r5
 801a8d2:	4903      	ldr	r1, [pc, #12]	@ (801a8e0 <on_full_output_buffer+0x58>)
 801a8d4:	4622      	mov	r2, r4
 801a8d6:	f7f8 f907 	bl	8012ae8 <ucdr_set_on_full_buffer_callback>
 801a8da:	2000      	movs	r0, #0
 801a8dc:	bd38      	pop	{r3, r4, r5, pc}
 801a8de:	bf00      	nop
 801a8e0:	0801a889 	.word	0x0801a889

0801a8e4 <uxr_init_output_reliable_stream>:
 801a8e4:	b410      	push	{r4}
 801a8e6:	f89d c004 	ldrb.w	ip, [sp, #4]
 801a8ea:	8103      	strh	r3, [r0, #8]
 801a8ec:	e9c0 1200 	strd	r1, r2, [r0]
 801a8f0:	f880 c00c 	strb.w	ip, [r0, #12]
 801a8f4:	b1d3      	cbz	r3, 801a92c <uxr_init_output_reliable_stream+0x48>
 801a8f6:	f8c1 c000 	str.w	ip, [r1]
 801a8fa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a8fe:	f1bc 0f01 	cmp.w	ip, #1
 801a902:	d913      	bls.n	801a92c <uxr_init_output_reliable_stream+0x48>
 801a904:	2301      	movs	r3, #1
 801a906:	fbb3 f1fc 	udiv	r1, r3, ip
 801a90a:	fb0c 3111 	mls	r1, ip, r1, r3
 801a90e:	b289      	uxth	r1, r1
 801a910:	6842      	ldr	r2, [r0, #4]
 801a912:	6804      	ldr	r4, [r0, #0]
 801a914:	fbb2 f2fc 	udiv	r2, r2, ip
 801a918:	fb01 f202 	mul.w	r2, r1, r2
 801a91c:	7b01      	ldrb	r1, [r0, #12]
 801a91e:	50a1      	str	r1, [r4, r2]
 801a920:	3301      	adds	r3, #1
 801a922:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a926:	b29b      	uxth	r3, r3
 801a928:	459c      	cmp	ip, r3
 801a92a:	d8ec      	bhi.n	801a906 <uxr_init_output_reliable_stream+0x22>
 801a92c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a930:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a934:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a938:	4905      	ldr	r1, [pc, #20]	@ (801a950 <uxr_init_output_reliable_stream+0x6c>)
 801a93a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a93e:	f8c0 100e 	str.w	r1, [r0, #14]
 801a942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a946:	2300      	movs	r3, #0
 801a948:	8242      	strh	r2, [r0, #18]
 801a94a:	8403      	strh	r3, [r0, #32]
 801a94c:	4770      	bx	lr
 801a94e:	bf00      	nop
 801a950:	ffff0000 	.word	0xffff0000

0801a954 <uxr_reset_output_reliable_stream>:
 801a954:	8901      	ldrh	r1, [r0, #8]
 801a956:	b1b1      	cbz	r1, 801a986 <uxr_reset_output_reliable_stream+0x32>
 801a958:	f04f 0c00 	mov.w	ip, #0
 801a95c:	4663      	mov	r3, ip
 801a95e:	fbb3 f2f1 	udiv	r2, r3, r1
 801a962:	fb01 3312 	mls	r3, r1, r2, r3
 801a966:	b29b      	uxth	r3, r3
 801a968:	6842      	ldr	r2, [r0, #4]
 801a96a:	fbb2 f2f1 	udiv	r2, r2, r1
 801a96e:	6801      	ldr	r1, [r0, #0]
 801a970:	fb02 f303 	mul.w	r3, r2, r3
 801a974:	7b02      	ldrb	r2, [r0, #12]
 801a976:	50ca      	str	r2, [r1, r3]
 801a978:	f10c 0c01 	add.w	ip, ip, #1
 801a97c:	8901      	ldrh	r1, [r0, #8]
 801a97e:	fa1f f38c 	uxth.w	r3, ip
 801a982:	4299      	cmp	r1, r3
 801a984:	d8eb      	bhi.n	801a95e <uxr_reset_output_reliable_stream+0xa>
 801a986:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a98a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a98e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a992:	4904      	ldr	r1, [pc, #16]	@ (801a9a4 <uxr_reset_output_reliable_stream+0x50>)
 801a994:	f8c0 100e 	str.w	r1, [r0, #14]
 801a998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a99c:	2300      	movs	r3, #0
 801a99e:	8242      	strh	r2, [r0, #18]
 801a9a0:	8403      	strh	r3, [r0, #32]
 801a9a2:	4770      	bx	lr
 801a9a4:	ffff0000 	.word	0xffff0000

0801a9a8 <uxr_prepare_reliable_buffer_to_write>:
 801a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9ac:	4604      	mov	r4, r0
 801a9ae:	b091      	sub	sp, #68	@ 0x44
 801a9b0:	8900      	ldrh	r0, [r0, #8]
 801a9b2:	89e6      	ldrh	r6, [r4, #14]
 801a9b4:	6823      	ldr	r3, [r4, #0]
 801a9b6:	9204      	str	r2, [sp, #16]
 801a9b8:	fbb6 f2f0 	udiv	r2, r6, r0
 801a9bc:	fb00 6212 	mls	r2, r0, r2, r6
 801a9c0:	b292      	uxth	r2, r2
 801a9c2:	6865      	ldr	r5, [r4, #4]
 801a9c4:	fbb5 f5f0 	udiv	r5, r5, r0
 801a9c8:	fb05 3202 	mla	r2, r5, r2, r3
 801a9cc:	3204      	adds	r2, #4
 801a9ce:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801a9d2:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a9d6:	9203      	str	r2, [sp, #12]
 801a9d8:	468b      	mov	fp, r1
 801a9da:	1f2f      	subs	r7, r5, #4
 801a9dc:	2800      	cmp	r0, #0
 801a9de:	f000 814c 	beq.w	801ac7a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a9e2:	f04f 0c00 	mov.w	ip, #0
 801a9e6:	46e2      	mov	sl, ip
 801a9e8:	4661      	mov	r1, ip
 801a9ea:	fbb1 f2f0 	udiv	r2, r1, r0
 801a9ee:	fb00 1212 	mls	r2, r0, r2, r1
 801a9f2:	b292      	uxth	r2, r2
 801a9f4:	fb05 f202 	mul.w	r2, r5, r2
 801a9f8:	f10c 0c01 	add.w	ip, ip, #1
 801a9fc:	589a      	ldr	r2, [r3, r2]
 801a9fe:	454a      	cmp	r2, r9
 801aa00:	bf08      	it	eq
 801aa02:	f10a 0a01 	addeq.w	sl, sl, #1
 801aa06:	fa1f f18c 	uxth.w	r1, ip
 801aa0a:	bf08      	it	eq
 801aa0c:	fa1f fa8a 	uxtheq.w	sl, sl
 801aa10:	4281      	cmp	r1, r0
 801aa12:	d3ea      	bcc.n	801a9ea <uxr_prepare_reliable_buffer_to_write+0x42>
 801aa14:	4640      	mov	r0, r8
 801aa16:	2104      	movs	r1, #4
 801aa18:	f8cd a014 	str.w	sl, [sp, #20]
 801aa1c:	f7f8 f894 	bl	8012b48 <ucdr_alignment>
 801aa20:	4480      	add	r8, r0
 801aa22:	eb08 020b 	add.w	r2, r8, fp
 801aa26:	42ba      	cmp	r2, r7
 801aa28:	f240 80cd 	bls.w	801abc6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801aa2c:	7b22      	ldrb	r2, [r4, #12]
 801aa2e:	445a      	add	r2, fp
 801aa30:	42ba      	cmp	r2, r7
 801aa32:	f240 80b5 	bls.w	801aba0 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801aa36:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801aa3a:	33fc      	adds	r3, #252	@ 0xfc
 801aa3c:	b2ba      	uxth	r2, r7
 801aa3e:	4413      	add	r3, r2
 801aa40:	b29b      	uxth	r3, r3
 801aa42:	fb0a f903 	mul.w	r9, sl, r3
 801aa46:	45d9      	cmp	r9, fp
 801aa48:	9305      	str	r3, [sp, #20]
 801aa4a:	9306      	str	r3, [sp, #24]
 801aa4c:	f0c0 80b7 	bcc.w	801abbe <uxr_prepare_reliable_buffer_to_write+0x216>
 801aa50:	f108 0304 	add.w	r3, r8, #4
 801aa54:	42bb      	cmp	r3, r7
 801aa56:	f080 80db 	bcs.w	801ac10 <uxr_prepare_reliable_buffer_to_write+0x268>
 801aa5a:	f1a2 0904 	sub.w	r9, r2, #4
 801aa5e:	eba9 0908 	sub.w	r9, r9, r8
 801aa62:	9b05      	ldr	r3, [sp, #20]
 801aa64:	fa1f f989 	uxth.w	r9, r9
 801aa68:	ebab 0b09 	sub.w	fp, fp, r9
 801aa6c:	fbbb f2f3 	udiv	r2, fp, r3
 801aa70:	fb03 b312 	mls	r3, r3, r2, fp
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	f000 80c8 	beq.w	801ac0a <uxr_prepare_reliable_buffer_to_write+0x262>
 801aa7a:	3201      	adds	r2, #1
 801aa7c:	b292      	uxth	r2, r2
 801aa7e:	9306      	str	r3, [sp, #24]
 801aa80:	4552      	cmp	r2, sl
 801aa82:	f200 809c 	bhi.w	801abbe <uxr_prepare_reliable_buffer_to_write+0x216>
 801aa86:	f10d 0b20 	add.w	fp, sp, #32
 801aa8a:	2a00      	cmp	r2, #0
 801aa8c:	d042      	beq.n	801ab14 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801aa8e:	f8cd 801c 	str.w	r8, [sp, #28]
 801aa92:	f04f 0a00 	mov.w	sl, #0
 801aa96:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801aa9a:	9505      	str	r5, [sp, #20]
 801aa9c:	f10d 0b20 	add.w	fp, sp, #32
 801aaa0:	4615      	mov	r5, r2
 801aaa2:	e000      	b.n	801aaa6 <uxr_prepare_reliable_buffer_to_write+0xfe>
 801aaa4:	46c1      	mov	r9, r8
 801aaa6:	8920      	ldrh	r0, [r4, #8]
 801aaa8:	fbb6 f2f0 	udiv	r2, r6, r0
 801aaac:	fb00 6112 	mls	r1, r0, r2, r6
 801aab0:	b28a      	uxth	r2, r1
 801aab2:	6863      	ldr	r3, [r4, #4]
 801aab4:	fbb3 f1f0 	udiv	r1, r3, r0
 801aab8:	6823      	ldr	r3, [r4, #0]
 801aaba:	fb02 f101 	mul.w	r1, r2, r1
 801aabe:	3104      	adds	r1, #4
 801aac0:	4419      	add	r1, r3
 801aac2:	4658      	mov	r0, fp
 801aac4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801aac8:	9200      	str	r2, [sp, #0]
 801aaca:	2300      	movs	r3, #0
 801aacc:	463a      	mov	r2, r7
 801aace:	f7f8 f825 	bl	8012b1c <ucdr_init_buffer_origin_offset>
 801aad2:	464a      	mov	r2, r9
 801aad4:	2300      	movs	r3, #0
 801aad6:	210d      	movs	r1, #13
 801aad8:	4658      	mov	r0, fp
 801aada:	f7f9 fc9d 	bl	8014418 <uxr_buffer_submessage_header>
 801aade:	8921      	ldrh	r1, [r4, #8]
 801aae0:	fbb6 f2f1 	udiv	r2, r6, r1
 801aae4:	fb01 6212 	mls	r2, r1, r2, r6
 801aae8:	b292      	uxth	r2, r2
 801aaea:	6863      	ldr	r3, [r4, #4]
 801aaec:	fbb3 f3f1 	udiv	r3, r3, r1
 801aaf0:	fb02 f303 	mul.w	r3, r2, r3
 801aaf4:	6822      	ldr	r2, [r4, #0]
 801aaf6:	4630      	mov	r0, r6
 801aaf8:	50d7      	str	r7, [r2, r3]
 801aafa:	2101      	movs	r1, #1
 801aafc:	f000 faf4 	bl	801b0e8 <uxr_seq_num_add>
 801ab00:	f10a 0a01 	add.w	sl, sl, #1
 801ab04:	fa1f f38a 	uxth.w	r3, sl
 801ab08:	429d      	cmp	r5, r3
 801ab0a:	4606      	mov	r6, r0
 801ab0c:	d8ca      	bhi.n	801aaa4 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801ab0e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ab12:	9d05      	ldr	r5, [sp, #20]
 801ab14:	8920      	ldrh	r0, [r4, #8]
 801ab16:	fbb6 f3f0 	udiv	r3, r6, r0
 801ab1a:	fb00 6313 	mls	r3, r0, r3, r6
 801ab1e:	b299      	uxth	r1, r3
 801ab20:	6863      	ldr	r3, [r4, #4]
 801ab22:	fbb3 f3f0 	udiv	r3, r3, r0
 801ab26:	fb01 f303 	mul.w	r3, r1, r3
 801ab2a:	6821      	ldr	r1, [r4, #0]
 801ab2c:	3304      	adds	r3, #4
 801ab2e:	4419      	add	r1, r3
 801ab30:	463a      	mov	r2, r7
 801ab32:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801ab36:	9000      	str	r0, [sp, #0]
 801ab38:	2300      	movs	r3, #0
 801ab3a:	4658      	mov	r0, fp
 801ab3c:	f7f7 ffee 	bl	8012b1c <ucdr_init_buffer_origin_offset>
 801ab40:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801ab44:	4658      	mov	r0, fp
 801ab46:	fa1f f289 	uxth.w	r2, r9
 801ab4a:	2302      	movs	r3, #2
 801ab4c:	210d      	movs	r1, #13
 801ab4e:	f7f9 fc63 	bl	8014418 <uxr_buffer_submessage_header>
 801ab52:	9b03      	ldr	r3, [sp, #12]
 801ab54:	8927      	ldrh	r7, [r4, #8]
 801ab56:	7b20      	ldrb	r0, [r4, #12]
 801ab58:	f108 0104 	add.w	r1, r8, #4
 801ab5c:	440b      	add	r3, r1
 801ab5e:	4619      	mov	r1, r3
 801ab60:	fbb6 f3f7 	udiv	r3, r6, r7
 801ab64:	fb07 6313 	mls	r3, r7, r3, r6
 801ab68:	f1a5 0208 	sub.w	r2, r5, #8
 801ab6c:	b29d      	uxth	r5, r3
 801ab6e:	3004      	adds	r0, #4
 801ab70:	6863      	ldr	r3, [r4, #4]
 801ab72:	fbb3 f3f7 	udiv	r3, r3, r7
 801ab76:	fb05 f303 	mul.w	r3, r5, r3
 801ab7a:	6825      	ldr	r5, [r4, #0]
 801ab7c:	4448      	add	r0, r9
 801ab7e:	50e8      	str	r0, [r5, r3]
 801ab80:	9d04      	ldr	r5, [sp, #16]
 801ab82:	eba2 0208 	sub.w	r2, r2, r8
 801ab86:	4628      	mov	r0, r5
 801ab88:	f7f7 ffda 	bl	8012b40 <ucdr_init_buffer>
 801ab8c:	4628      	mov	r0, r5
 801ab8e:	493c      	ldr	r1, [pc, #240]	@ (801ac80 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801ab90:	4622      	mov	r2, r4
 801ab92:	f7f7 ffa9 	bl	8012ae8 <ucdr_set_on_full_buffer_callback>
 801ab96:	2001      	movs	r0, #1
 801ab98:	81e6      	strh	r6, [r4, #14]
 801ab9a:	b011      	add	sp, #68	@ 0x44
 801ab9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aba0:	2101      	movs	r1, #1
 801aba2:	89e0      	ldrh	r0, [r4, #14]
 801aba4:	f000 faa0 	bl	801b0e8 <uxr_seq_num_add>
 801aba8:	8921      	ldrh	r1, [r4, #8]
 801abaa:	4605      	mov	r5, r0
 801abac:	8a60      	ldrh	r0, [r4, #18]
 801abae:	f000 fa9b 	bl	801b0e8 <uxr_seq_num_add>
 801abb2:	4601      	mov	r1, r0
 801abb4:	4628      	mov	r0, r5
 801abb6:	f000 fa9f 	bl	801b0f8 <uxr_seq_num_cmp>
 801abba:	2800      	cmp	r0, #0
 801abbc:	dd42      	ble.n	801ac44 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801abbe:	2000      	movs	r0, #0
 801abc0:	b011      	add	sp, #68	@ 0x44
 801abc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abc6:	8921      	ldrh	r1, [r4, #8]
 801abc8:	8a60      	ldrh	r0, [r4, #18]
 801abca:	9205      	str	r2, [sp, #20]
 801abcc:	f000 fa8c 	bl	801b0e8 <uxr_seq_num_add>
 801abd0:	4601      	mov	r1, r0
 801abd2:	4630      	mov	r0, r6
 801abd4:	f000 fa90 	bl	801b0f8 <uxr_seq_num_cmp>
 801abd8:	2800      	cmp	r0, #0
 801abda:	9a05      	ldr	r2, [sp, #20]
 801abdc:	dcef      	bgt.n	801abbe <uxr_prepare_reliable_buffer_to_write+0x216>
 801abde:	8927      	ldrh	r7, [r4, #8]
 801abe0:	fbb6 f3f7 	udiv	r3, r6, r7
 801abe4:	fb07 6313 	mls	r3, r7, r3, r6
 801abe8:	b29d      	uxth	r5, r3
 801abea:	6863      	ldr	r3, [r4, #4]
 801abec:	6824      	ldr	r4, [r4, #0]
 801abee:	fbb3 f3f7 	udiv	r3, r3, r7
 801abf2:	fb05 f303 	mul.w	r3, r5, r3
 801abf6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801abfa:	50e2      	str	r2, [r4, r3]
 801abfc:	2300      	movs	r3, #0
 801abfe:	f8cd 8000 	str.w	r8, [sp]
 801ac02:	f7f7 ff8b 	bl	8012b1c <ucdr_init_buffer_origin_offset>
 801ac06:	2001      	movs	r0, #1
 801ac08:	e7da      	b.n	801abc0 <uxr_prepare_reliable_buffer_to_write+0x218>
 801ac0a:	b293      	uxth	r3, r2
 801ac0c:	461a      	mov	r2, r3
 801ac0e:	e737      	b.n	801aa80 <uxr_prepare_reliable_buffer_to_write+0xd8>
 801ac10:	4630      	mov	r0, r6
 801ac12:	2101      	movs	r1, #1
 801ac14:	9207      	str	r2, [sp, #28]
 801ac16:	f000 fa67 	bl	801b0e8 <uxr_seq_num_add>
 801ac1a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801ac1e:	fbb0 f1fc 	udiv	r1, r0, ip
 801ac22:	fb0c 0111 	mls	r1, ip, r1, r0
 801ac26:	4606      	mov	r6, r0
 801ac28:	b288      	uxth	r0, r1
 801ac2a:	6863      	ldr	r3, [r4, #4]
 801ac2c:	fbb3 f1fc 	udiv	r1, r3, ip
 801ac30:	6823      	ldr	r3, [r4, #0]
 801ac32:	9a07      	ldr	r2, [sp, #28]
 801ac34:	fb00 f101 	mul.w	r1, r0, r1
 801ac38:	3104      	adds	r1, #4
 801ac3a:	440b      	add	r3, r1
 801ac3c:	9303      	str	r3, [sp, #12]
 801ac3e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801ac42:	e70a      	b.n	801aa5a <uxr_prepare_reliable_buffer_to_write+0xb2>
 801ac44:	8921      	ldrh	r1, [r4, #8]
 801ac46:	fbb5 f3f1 	udiv	r3, r5, r1
 801ac4a:	fb01 5313 	mls	r3, r1, r3, r5
 801ac4e:	b29a      	uxth	r2, r3
 801ac50:	6863      	ldr	r3, [r4, #4]
 801ac52:	fbb3 f3f1 	udiv	r3, r3, r1
 801ac56:	6821      	ldr	r1, [r4, #0]
 801ac58:	9804      	ldr	r0, [sp, #16]
 801ac5a:	fb02 f303 	mul.w	r3, r2, r3
 801ac5e:	3304      	adds	r3, #4
 801ac60:	7b22      	ldrb	r2, [r4, #12]
 801ac62:	4419      	add	r1, r3
 801ac64:	445a      	add	r2, fp
 801ac66:	f841 2c04 	str.w	r2, [r1, #-4]
 801ac6a:	7b23      	ldrb	r3, [r4, #12]
 801ac6c:	9300      	str	r3, [sp, #0]
 801ac6e:	2300      	movs	r3, #0
 801ac70:	f7f7 ff54 	bl	8012b1c <ucdr_init_buffer_origin_offset>
 801ac74:	81e5      	strh	r5, [r4, #14]
 801ac76:	2001      	movs	r0, #1
 801ac78:	e7a2      	b.n	801abc0 <uxr_prepare_reliable_buffer_to_write+0x218>
 801ac7a:	4682      	mov	sl, r0
 801ac7c:	e6ca      	b.n	801aa14 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801ac7e:	bf00      	nop
 801ac80:	0801a889 	.word	0x0801a889

0801ac84 <uxr_prepare_next_reliable_buffer_to_send>:
 801ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac86:	4604      	mov	r4, r0
 801ac88:	460f      	mov	r7, r1
 801ac8a:	8a00      	ldrh	r0, [r0, #16]
 801ac8c:	2101      	movs	r1, #1
 801ac8e:	4616      	mov	r6, r2
 801ac90:	461d      	mov	r5, r3
 801ac92:	f000 fa29 	bl	801b0e8 <uxr_seq_num_add>
 801ac96:	8028      	strh	r0, [r5, #0]
 801ac98:	8922      	ldrh	r2, [r4, #8]
 801ac9a:	fbb0 f3f2 	udiv	r3, r0, r2
 801ac9e:	fb02 0c13 	mls	ip, r2, r3, r0
 801aca2:	fa1f fc8c 	uxth.w	ip, ip
 801aca6:	6863      	ldr	r3, [r4, #4]
 801aca8:	fbb3 f3f2 	udiv	r3, r3, r2
 801acac:	fb0c fc03 	mul.w	ip, ip, r3
 801acb0:	6823      	ldr	r3, [r4, #0]
 801acb2:	89e1      	ldrh	r1, [r4, #14]
 801acb4:	f10c 0c04 	add.w	ip, ip, #4
 801acb8:	4463      	add	r3, ip
 801acba:	603b      	str	r3, [r7, #0]
 801acbc:	6823      	ldr	r3, [r4, #0]
 801acbe:	449c      	add	ip, r3
 801acc0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801acc4:	6033      	str	r3, [r6, #0]
 801acc6:	f000 fa17 	bl	801b0f8 <uxr_seq_num_cmp>
 801acca:	2800      	cmp	r0, #0
 801accc:	dd01      	ble.n	801acd2 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801acce:	2000      	movs	r0, #0
 801acd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acd2:	7b23      	ldrb	r3, [r4, #12]
 801acd4:	6832      	ldr	r2, [r6, #0]
 801acd6:	429a      	cmp	r2, r3
 801acd8:	d9f9      	bls.n	801acce <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801acda:	8a61      	ldrh	r1, [r4, #18]
 801acdc:	8a20      	ldrh	r0, [r4, #16]
 801acde:	f000 fa07 	bl	801b0f0 <uxr_seq_num_sub>
 801ace2:	8923      	ldrh	r3, [r4, #8]
 801ace4:	4283      	cmp	r3, r0
 801ace6:	d0f2      	beq.n	801acce <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ace8:	8828      	ldrh	r0, [r5, #0]
 801acea:	89e3      	ldrh	r3, [r4, #14]
 801acec:	8220      	strh	r0, [r4, #16]
 801acee:	4298      	cmp	r0, r3
 801acf0:	d001      	beq.n	801acf6 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801acf2:	2001      	movs	r0, #1
 801acf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acf6:	2101      	movs	r1, #1
 801acf8:	f000 f9f6 	bl	801b0e8 <uxr_seq_num_add>
 801acfc:	81e0      	strh	r0, [r4, #14]
 801acfe:	2001      	movs	r0, #1
 801ad00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad02:	bf00      	nop

0801ad04 <uxr_update_output_stream_heartbeat_timestamp>:
 801ad04:	b570      	push	{r4, r5, r6, lr}
 801ad06:	8a01      	ldrh	r1, [r0, #16]
 801ad08:	4604      	mov	r4, r0
 801ad0a:	8a40      	ldrh	r0, [r0, #18]
 801ad0c:	4615      	mov	r5, r2
 801ad0e:	461e      	mov	r6, r3
 801ad10:	f000 f9f2 	bl	801b0f8 <uxr_seq_num_cmp>
 801ad14:	2800      	cmp	r0, #0
 801ad16:	db07      	blt.n	801ad28 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801ad18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ad1c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ad20:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801ad24:	2000      	movs	r0, #0
 801ad26:	bd70      	pop	{r4, r5, r6, pc}
 801ad28:	f894 0020 	ldrb.w	r0, [r4, #32]
 801ad2c:	b940      	cbnz	r0, 801ad40 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801ad2e:	2301      	movs	r3, #1
 801ad30:	f884 3020 	strb.w	r3, [r4, #32]
 801ad34:	3564      	adds	r5, #100	@ 0x64
 801ad36:	f146 0600 	adc.w	r6, r6, #0
 801ad3a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801ad3e:	bd70      	pop	{r4, r5, r6, pc}
 801ad40:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801ad44:	4295      	cmp	r5, r2
 801ad46:	eb76 0303 	sbcs.w	r3, r6, r3
 801ad4a:	bfa5      	ittet	ge
 801ad4c:	3001      	addge	r0, #1
 801ad4e:	f884 0020 	strbge.w	r0, [r4, #32]
 801ad52:	2000      	movlt	r0, #0
 801ad54:	2001      	movge	r0, #1
 801ad56:	e7ed      	b.n	801ad34 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801ad58 <uxr_begin_output_nack_buffer_it>:
 801ad58:	8a40      	ldrh	r0, [r0, #18]
 801ad5a:	4770      	bx	lr

0801ad5c <uxr_next_reliable_nack_buffer_to_send>:
 801ad5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad60:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801ad64:	b082      	sub	sp, #8
 801ad66:	f1b8 0f00 	cmp.w	r8, #0
 801ad6a:	d011      	beq.n	801ad90 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801ad6c:	4604      	mov	r4, r0
 801ad6e:	8818      	ldrh	r0, [r3, #0]
 801ad70:	460e      	mov	r6, r1
 801ad72:	4617      	mov	r7, r2
 801ad74:	461d      	mov	r5, r3
 801ad76:	2101      	movs	r1, #1
 801ad78:	f000 f9b6 	bl	801b0e8 <uxr_seq_num_add>
 801ad7c:	8028      	strh	r0, [r5, #0]
 801ad7e:	8a21      	ldrh	r1, [r4, #16]
 801ad80:	f000 f9ba 	bl	801b0f8 <uxr_seq_num_cmp>
 801ad84:	2800      	cmp	r0, #0
 801ad86:	dd07      	ble.n	801ad98 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801ad88:	f04f 0800 	mov.w	r8, #0
 801ad8c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801ad90:	4640      	mov	r0, r8
 801ad92:	b002      	add	sp, #8
 801ad94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad98:	8921      	ldrh	r1, [r4, #8]
 801ad9a:	8828      	ldrh	r0, [r5, #0]
 801ad9c:	6823      	ldr	r3, [r4, #0]
 801ad9e:	fbb0 f2f1 	udiv	r2, r0, r1
 801ada2:	fb01 0c12 	mls	ip, r1, r2, r0
 801ada6:	fa1f f28c 	uxth.w	r2, ip
 801adaa:	9301      	str	r3, [sp, #4]
 801adac:	6863      	ldr	r3, [r4, #4]
 801adae:	fbb3 fcf1 	udiv	ip, r3, r1
 801adb2:	9b01      	ldr	r3, [sp, #4]
 801adb4:	fb02 fc0c 	mul.w	ip, r2, ip
 801adb8:	f10c 0c04 	add.w	ip, ip, #4
 801adbc:	4463      	add	r3, ip
 801adbe:	6033      	str	r3, [r6, #0]
 801adc0:	6823      	ldr	r3, [r4, #0]
 801adc2:	4463      	add	r3, ip
 801adc4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801adc8:	603b      	str	r3, [r7, #0]
 801adca:	7b22      	ldrb	r2, [r4, #12]
 801adcc:	429a      	cmp	r2, r3
 801adce:	d0d2      	beq.n	801ad76 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801add0:	4640      	mov	r0, r8
 801add2:	b002      	add	sp, #8
 801add4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801add8 <uxr_process_acknack>:
 801add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adda:	4604      	mov	r4, r0
 801addc:	460e      	mov	r6, r1
 801adde:	4610      	mov	r0, r2
 801ade0:	2101      	movs	r1, #1
 801ade2:	f000 f985 	bl	801b0f0 <uxr_seq_num_sub>
 801ade6:	8a61      	ldrh	r1, [r4, #18]
 801ade8:	f000 f982 	bl	801b0f0 <uxr_seq_num_sub>
 801adec:	b1c0      	cbz	r0, 801ae20 <uxr_process_acknack+0x48>
 801adee:	4605      	mov	r5, r0
 801adf0:	2700      	movs	r7, #0
 801adf2:	2101      	movs	r1, #1
 801adf4:	8a60      	ldrh	r0, [r4, #18]
 801adf6:	f000 f977 	bl	801b0e8 <uxr_seq_num_add>
 801adfa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801adfe:	fbb0 f1fc 	udiv	r1, r0, ip
 801ae02:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ae06:	fb0c 0111 	mls	r1, ip, r1, r0
 801ae0a:	b289      	uxth	r1, r1
 801ae0c:	3701      	adds	r7, #1
 801ae0e:	fbb3 f3fc 	udiv	r3, r3, ip
 801ae12:	fb01 f303 	mul.w	r3, r1, r3
 801ae16:	42bd      	cmp	r5, r7
 801ae18:	7b21      	ldrb	r1, [r4, #12]
 801ae1a:	8260      	strh	r0, [r4, #18]
 801ae1c:	50d1      	str	r1, [r2, r3]
 801ae1e:	d1e8      	bne.n	801adf2 <uxr_process_acknack+0x1a>
 801ae20:	3e00      	subs	r6, #0
 801ae22:	f04f 0300 	mov.w	r3, #0
 801ae26:	bf18      	it	ne
 801ae28:	2601      	movne	r6, #1
 801ae2a:	f884 3020 	strb.w	r3, [r4, #32]
 801ae2e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801ae32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ae34 <uxr_is_output_up_to_date>:
 801ae34:	8a01      	ldrh	r1, [r0, #16]
 801ae36:	8a40      	ldrh	r0, [r0, #18]
 801ae38:	b508      	push	{r3, lr}
 801ae3a:	f000 f95d 	bl	801b0f8 <uxr_seq_num_cmp>
 801ae3e:	fab0 f080 	clz	r0, r0
 801ae42:	0940      	lsrs	r0, r0, #5
 801ae44:	bd08      	pop	{r3, pc}
 801ae46:	bf00      	nop

0801ae48 <get_available_free_slots>:
 801ae48:	8902      	ldrh	r2, [r0, #8]
 801ae4a:	b1da      	cbz	r2, 801ae84 <get_available_free_slots+0x3c>
 801ae4c:	b530      	push	{r4, r5, lr}
 801ae4e:	2100      	movs	r1, #0
 801ae50:	6843      	ldr	r3, [r0, #4]
 801ae52:	6805      	ldr	r5, [r0, #0]
 801ae54:	7b04      	ldrb	r4, [r0, #12]
 801ae56:	fbb3 fef2 	udiv	lr, r3, r2
 801ae5a:	4608      	mov	r0, r1
 801ae5c:	460b      	mov	r3, r1
 801ae5e:	fbb3 fcf2 	udiv	ip, r3, r2
 801ae62:	fb02 331c 	mls	r3, r2, ip, r3
 801ae66:	b29b      	uxth	r3, r3
 801ae68:	fb0e f303 	mul.w	r3, lr, r3
 801ae6c:	3101      	adds	r1, #1
 801ae6e:	f855 c003 	ldr.w	ip, [r5, r3]
 801ae72:	4564      	cmp	r4, ip
 801ae74:	bf08      	it	eq
 801ae76:	3001      	addeq	r0, #1
 801ae78:	b28b      	uxth	r3, r1
 801ae7a:	bf08      	it	eq
 801ae7c:	b280      	uxtheq	r0, r0
 801ae7e:	4293      	cmp	r3, r2
 801ae80:	d3ed      	bcc.n	801ae5e <get_available_free_slots+0x16>
 801ae82:	bd30      	pop	{r4, r5, pc}
 801ae84:	4610      	mov	r0, r2
 801ae86:	4770      	bx	lr

0801ae88 <uxr_buffer_request_data>:
 801ae88:	b530      	push	{r4, r5, lr}
 801ae8a:	b095      	sub	sp, #84	@ 0x54
 801ae8c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801ae90:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801ae92:	9303      	str	r3, [sp, #12]
 801ae94:	2200      	movs	r2, #0
 801ae96:	2d00      	cmp	r5, #0
 801ae98:	bf14      	ite	ne
 801ae9a:	2101      	movne	r1, #1
 801ae9c:	4611      	moveq	r1, r2
 801ae9e:	4604      	mov	r4, r0
 801aea0:	f88d 301c 	strb.w	r3, [sp, #28]
 801aea4:	f88d 201d 	strb.w	r2, [sp, #29]
 801aea8:	f88d 201e 	strb.w	r2, [sp, #30]
 801aeac:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801aeb0:	d021      	beq.n	801aef6 <uxr_buffer_request_data+0x6e>
 801aeb2:	682a      	ldr	r2, [r5, #0]
 801aeb4:	686b      	ldr	r3, [r5, #4]
 801aeb6:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801aeba:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801aebe:	2210      	movs	r2, #16
 801aec0:	2308      	movs	r3, #8
 801aec2:	2100      	movs	r1, #0
 801aec4:	e9cd 3100 	strd	r3, r1, [sp]
 801aec8:	4620      	mov	r0, r4
 801aeca:	9905      	ldr	r1, [sp, #20]
 801aecc:	ab0c      	add	r3, sp, #48	@ 0x30
 801aece:	f7f9 f805 	bl	8013edc <uxr_prepare_stream_to_write_submessage>
 801aed2:	b918      	cbnz	r0, 801aedc <uxr_buffer_request_data+0x54>
 801aed4:	4604      	mov	r4, r0
 801aed6:	4620      	mov	r0, r4
 801aed8:	b015      	add	sp, #84	@ 0x54
 801aeda:	bd30      	pop	{r4, r5, pc}
 801aedc:	9904      	ldr	r1, [sp, #16]
 801aede:	aa06      	add	r2, sp, #24
 801aee0:	4620      	mov	r0, r4
 801aee2:	f7f9 f931 	bl	8014148 <uxr_init_base_object_request>
 801aee6:	a906      	add	r1, sp, #24
 801aee8:	4604      	mov	r4, r0
 801aeea:	a80c      	add	r0, sp, #48	@ 0x30
 801aeec:	f7fa fc2c 	bl	8015748 <uxr_serialize_READ_DATA_Payload>
 801aef0:	4620      	mov	r0, r4
 801aef2:	b015      	add	sp, #84	@ 0x54
 801aef4:	bd30      	pop	{r4, r5, pc}
 801aef6:	2208      	movs	r2, #8
 801aef8:	e7e2      	b.n	801aec0 <uxr_buffer_request_data+0x38>
 801aefa:	bf00      	nop

0801aefc <uxr_buffer_cancel_data>:
 801aefc:	b510      	push	{r4, lr}
 801aefe:	b094      	sub	sp, #80	@ 0x50
 801af00:	2300      	movs	r3, #0
 801af02:	9202      	str	r2, [sp, #8]
 801af04:	9205      	str	r2, [sp, #20]
 801af06:	9301      	str	r3, [sp, #4]
 801af08:	2201      	movs	r2, #1
 801af0a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801af0e:	f88d 301e 	strb.w	r3, [sp, #30]
 801af12:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801af16:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801af1a:	2308      	movs	r3, #8
 801af1c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801af20:	9300      	str	r3, [sp, #0]
 801af22:	2210      	movs	r2, #16
 801af24:	ab0c      	add	r3, sp, #48	@ 0x30
 801af26:	4604      	mov	r4, r0
 801af28:	9103      	str	r1, [sp, #12]
 801af2a:	f7f8 ffd7 	bl	8013edc <uxr_prepare_stream_to_write_submessage>
 801af2e:	b918      	cbnz	r0, 801af38 <uxr_buffer_cancel_data+0x3c>
 801af30:	4604      	mov	r4, r0
 801af32:	4620      	mov	r0, r4
 801af34:	b014      	add	sp, #80	@ 0x50
 801af36:	bd10      	pop	{r4, pc}
 801af38:	9905      	ldr	r1, [sp, #20]
 801af3a:	aa06      	add	r2, sp, #24
 801af3c:	4620      	mov	r0, r4
 801af3e:	f7f9 f903 	bl	8014148 <uxr_init_base_object_request>
 801af42:	a906      	add	r1, sp, #24
 801af44:	4604      	mov	r4, r0
 801af46:	a80c      	add	r0, sp, #48	@ 0x30
 801af48:	f7fa fbfe 	bl	8015748 <uxr_serialize_READ_DATA_Payload>
 801af4c:	4620      	mov	r0, r4
 801af4e:	b014      	add	sp, #80	@ 0x50
 801af50:	bd10      	pop	{r4, pc}
 801af52:	bf00      	nop

0801af54 <read_submessage_format>:
 801af54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af58:	b095      	sub	sp, #84	@ 0x54
 801af5a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 801af5e:	b113      	cbz	r3, 801af66 <read_submessage_format+0x12>
 801af60:	b015      	add	sp, #84	@ 0x54
 801af62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af66:	460c      	mov	r4, r1
 801af68:	4615      	mov	r5, r2
 801af6a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801af6e:	4607      	mov	r7, r0
 801af70:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801af72:	9004      	str	r0, [sp, #16]
 801af74:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801af76:	9005      	str	r0, [sp, #20]
 801af78:	1a52      	subs	r2, r2, r1
 801af7a:	a80c      	add	r0, sp, #48	@ 0x30
 801af7c:	4699      	mov	r9, r3
 801af7e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801af82:	f7f7 fddd 	bl	8012b40 <ucdr_init_buffer>
 801af86:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801af8a:	a80c      	add	r0, sp, #48	@ 0x30
 801af8c:	f7f7 fdac 	bl	8012ae8 <ucdr_set_on_full_buffer_callback>
 801af90:	69e2      	ldr	r2, [r4, #28]
 801af92:	b19a      	cbz	r2, 801afbc <read_submessage_format+0x68>
 801af94:	f1b8 0f07 	cmp.w	r8, #7
 801af98:	f882 9014 	strb.w	r9, [r2, #20]
 801af9c:	d040      	beq.n	801b020 <read_submessage_format+0xcc>
 801af9e:	f1b8 0f08 	cmp.w	r8, #8
 801afa2:	d02e      	beq.n	801b002 <read_submessage_format+0xae>
 801afa4:	f1b8 0f06 	cmp.w	r8, #6
 801afa8:	d011      	beq.n	801afce <read_submessage_format+0x7a>
 801afaa:	2301      	movs	r3, #1
 801afac:	7513      	strb	r3, [r2, #20]
 801afae:	4629      	mov	r1, r5
 801afb0:	4620      	mov	r0, r4
 801afb2:	f7f7 fe15 	bl	8012be0 <ucdr_advance_buffer>
 801afb6:	b015      	add	sp, #84	@ 0x54
 801afb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801afbc:	f1b8 0f07 	cmp.w	r8, #7
 801afc0:	d02e      	beq.n	801b020 <read_submessage_format+0xcc>
 801afc2:	f1b8 0f08 	cmp.w	r8, #8
 801afc6:	d01c      	beq.n	801b002 <read_submessage_format+0xae>
 801afc8:	f1b8 0f06 	cmp.w	r8, #6
 801afcc:	d1ef      	bne.n	801afae <read_submessage_format+0x5a>
 801afce:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 801afd2:	f1b8 0f00 	cmp.w	r8, #0
 801afd6:	d011      	beq.n	801affc <read_submessage_format+0xa8>
 801afd8:	ab0c      	add	r3, sp, #48	@ 0x30
 801afda:	e9cd 3500 	strd	r3, r5, [sp]
 801afde:	2306      	movs	r3, #6
 801afe0:	f88d 3016 	strb.w	r3, [sp, #22]
 801afe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801afe8:	9302      	str	r3, [sp, #8]
 801afea:	4632      	mov	r2, r6
 801afec:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801aff0:	4638      	mov	r0, r7
 801aff2:	47c0      	blx	r8
 801aff4:	2301      	movs	r3, #1
 801aff6:	69e2      	ldr	r2, [r4, #28]
 801aff8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801affc:	2a00      	cmp	r2, #0
 801affe:	d1d4      	bne.n	801afaa <read_submessage_format+0x56>
 801b000:	e7d5      	b.n	801afae <read_submessage_format+0x5a>
 801b002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b006:	2b00      	cmp	r3, #0
 801b008:	d0f8      	beq.n	801affc <read_submessage_format+0xa8>
 801b00a:	a906      	add	r1, sp, #24
 801b00c:	a80c      	add	r0, sp, #48	@ 0x30
 801b00e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801b012:	f7fa fc5f 	bl	80158d4 <uxr_deserialize_SampleIdentity>
 801b016:	b9a0      	cbnz	r0, 801b042 <read_submessage_format+0xee>
 801b018:	69e2      	ldr	r2, [r4, #28]
 801b01a:	2a00      	cmp	r2, #0
 801b01c:	d1c5      	bne.n	801afaa <read_submessage_format+0x56>
 801b01e:	e7c6      	b.n	801afae <read_submessage_format+0x5a>
 801b020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b024:	b13b      	cbz	r3, 801b036 <read_submessage_format+0xe2>
 801b026:	a906      	add	r1, sp, #24
 801b028:	a80c      	add	r0, sp, #48	@ 0x30
 801b02a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801b02e:	f7fa f925 	bl	801527c <uxr_deserialize_BaseObjectRequest>
 801b032:	bb60      	cbnz	r0, 801b08e <read_submessage_format+0x13a>
 801b034:	69e2      	ldr	r2, [r4, #28]
 801b036:	68a3      	ldr	r3, [r4, #8]
 801b038:	442b      	add	r3, r5
 801b03a:	60a3      	str	r3, [r4, #8]
 801b03c:	2a00      	cmp	r2, #0
 801b03e:	d1b4      	bne.n	801afaa <read_submessage_format+0x56>
 801b040:	e7b5      	b.n	801afae <read_submessage_format+0x5a>
 801b042:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801b046:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b048:	1a52      	subs	r2, r2, r1
 801b04a:	eba8 0803 	sub.w	r8, r8, r3
 801b04e:	a80c      	add	r0, sp, #48	@ 0x30
 801b050:	f7f7 fd76 	bl	8012b40 <ucdr_init_buffer>
 801b054:	44a8      	add	r8, r5
 801b056:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801b05a:	a80c      	add	r0, sp, #48	@ 0x30
 801b05c:	f7f7 fd44 	bl	8012ae8 <ucdr_set_on_full_buffer_callback>
 801b060:	fa1f f888 	uxth.w	r8, r8
 801b064:	ab0c      	add	r3, sp, #48	@ 0x30
 801b066:	9300      	str	r3, [sp, #0]
 801b068:	f8cd 8004 	str.w	r8, [sp, #4]
 801b06c:	2108      	movs	r1, #8
 801b06e:	f88d 1016 	strb.w	r1, [sp, #22]
 801b072:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801b076:	9102      	str	r1, [sp, #8]
 801b078:	ab06      	add	r3, sp, #24
 801b07a:	4632      	mov	r2, r6
 801b07c:	9905      	ldr	r1, [sp, #20]
 801b07e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801b082:	4638      	mov	r0, r7
 801b084:	47b0      	blx	r6
 801b086:	2301      	movs	r3, #1
 801b088:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801b08c:	e7c4      	b.n	801b018 <read_submessage_format+0xc4>
 801b08e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801b092:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b094:	1a52      	subs	r2, r2, r1
 801b096:	a80c      	add	r0, sp, #48	@ 0x30
 801b098:	eba8 0803 	sub.w	r8, r8, r3
 801b09c:	f7f7 fd50 	bl	8012b40 <ucdr_init_buffer>
 801b0a0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801b0a4:	a80c      	add	r0, sp, #48	@ 0x30
 801b0a6:	f7f7 fd1f 	bl	8012ae8 <ucdr_set_on_full_buffer_callback>
 801b0aa:	ab0c      	add	r3, sp, #48	@ 0x30
 801b0ac:	9300      	str	r3, [sp, #0]
 801b0ae:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801b0b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801b0b6:	44a8      	add	r8, r5
 801b0b8:	fa1f f888 	uxth.w	r8, r8
 801b0bc:	f8cd 8004 	str.w	r8, [sp, #4]
 801b0c0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801b0c4:	2107      	movs	r1, #7
 801b0c6:	f88d 1016 	strb.w	r1, [sp, #22]
 801b0ca:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801b0ce:	9102      	str	r1, [sp, #8]
 801b0d0:	4632      	mov	r2, r6
 801b0d2:	b29b      	uxth	r3, r3
 801b0d4:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 801b0d8:	9905      	ldr	r1, [sp, #20]
 801b0da:	4638      	mov	r0, r7
 801b0dc:	47b0      	blx	r6
 801b0de:	2301      	movs	r3, #1
 801b0e0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801b0e4:	e7a6      	b.n	801b034 <read_submessage_format+0xe0>
 801b0e6:	bf00      	nop

0801b0e8 <uxr_seq_num_add>:
 801b0e8:	4408      	add	r0, r1
 801b0ea:	b280      	uxth	r0, r0
 801b0ec:	4770      	bx	lr
 801b0ee:	bf00      	nop

0801b0f0 <uxr_seq_num_sub>:
 801b0f0:	1a40      	subs	r0, r0, r1
 801b0f2:	b280      	uxth	r0, r0
 801b0f4:	4770      	bx	lr
 801b0f6:	bf00      	nop

0801b0f8 <uxr_seq_num_cmp>:
 801b0f8:	4288      	cmp	r0, r1
 801b0fa:	d011      	beq.n	801b120 <uxr_seq_num_cmp+0x28>
 801b0fc:	d309      	bcc.n	801b112 <uxr_seq_num_cmp+0x1a>
 801b0fe:	4288      	cmp	r0, r1
 801b100:	d910      	bls.n	801b124 <uxr_seq_num_cmp+0x2c>
 801b102:	1a40      	subs	r0, r0, r1
 801b104:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801b108:	bfd4      	ite	le
 801b10a:	2001      	movle	r0, #1
 801b10c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801b110:	4770      	bx	lr
 801b112:	1a0b      	subs	r3, r1, r0
 801b114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b118:	daf1      	bge.n	801b0fe <uxr_seq_num_cmp+0x6>
 801b11a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b11e:	4770      	bx	lr
 801b120:	2000      	movs	r0, #0
 801b122:	4770      	bx	lr
 801b124:	2001      	movs	r0, #1
 801b126:	4770      	bx	lr

0801b128 <uxr_init_framing_io>:
 801b128:	2300      	movs	r3, #0
 801b12a:	7041      	strb	r1, [r0, #1]
 801b12c:	7003      	strb	r3, [r0, #0]
 801b12e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801b130:	4770      	bx	lr
 801b132:	bf00      	nop

0801b134 <uxr_write_framed_msg>:
 801b134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b138:	4617      	mov	r7, r2
 801b13a:	7842      	ldrb	r2, [r0, #1]
 801b13c:	b083      	sub	sp, #12
 801b13e:	460e      	mov	r6, r1
 801b140:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801b144:	469a      	mov	sl, r3
 801b146:	2901      	cmp	r1, #1
 801b148:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 801b14c:	4604      	mov	r4, r0
 801b14e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801b152:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801b156:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801b15a:	f240 8137 	bls.w	801b3cc <uxr_write_framed_msg+0x298>
 801b15e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801b162:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801b166:	2901      	cmp	r1, #1
 801b168:	f04f 0202 	mov.w	r2, #2
 801b16c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b170:	f240 808f 	bls.w	801b292 <uxr_write_framed_msg+0x15e>
 801b174:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b176:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801b17a:	b2dd      	uxtb	r5, r3
 801b17c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801b180:	2203      	movs	r2, #3
 801b182:	2901      	cmp	r1, #1
 801b184:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b188:	f240 809a 	bls.w	801b2c0 <uxr_write_framed_msg+0x18c>
 801b18c:	18a1      	adds	r1, r4, r2
 801b18e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b190:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801b194:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801b198:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801b19c:	3201      	adds	r2, #1
 801b19e:	2801      	cmp	r0, #1
 801b1a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b1a4:	f240 80a0 	bls.w	801b2e8 <uxr_write_framed_msg+0x1b4>
 801b1a8:	18a0      	adds	r0, r4, r2
 801b1aa:	3201      	adds	r2, #1
 801b1ac:	b2d2      	uxtb	r2, r2
 801b1ae:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801b1b2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	f000 80a9 	beq.w	801b30e <uxr_write_framed_msg+0x1da>
 801b1bc:	f04f 0900 	mov.w	r9, #0
 801b1c0:	46c8      	mov	r8, r9
 801b1c2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801b1c6:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801b1ca:	2901      	cmp	r1, #1
 801b1cc:	f240 80c3 	bls.w	801b356 <uxr_write_framed_msg+0x222>
 801b1d0:	2a29      	cmp	r2, #41	@ 0x29
 801b1d2:	f200 809f 	bhi.w	801b314 <uxr_write_framed_msg+0x1e0>
 801b1d6:	18a1      	adds	r1, r4, r2
 801b1d8:	3201      	adds	r2, #1
 801b1da:	b2d2      	uxtb	r2, r2
 801b1dc:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801b1e0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b1e4:	ea89 0303 	eor.w	r3, r9, r3
 801b1e8:	498c      	ldr	r1, [pc, #560]	@ (801b41c <uxr_write_framed_msg+0x2e8>)
 801b1ea:	b2db      	uxtb	r3, r3
 801b1ec:	f108 0801 	add.w	r8, r8, #1
 801b1f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801b1f4:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 801b1f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b1fa:	4543      	cmp	r3, r8
 801b1fc:	d8e1      	bhi.n	801b1c2 <uxr_write_framed_msg+0x8e>
 801b1fe:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801b202:	fa5f f889 	uxtb.w	r8, r9
 801b206:	9301      	str	r3, [sp, #4]
 801b208:	f04f 0900 	mov.w	r9, #0
 801b20c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 801b210:	fa5f f18a 	uxtb.w	r1, sl
 801b214:	2901      	cmp	r1, #1
 801b216:	d921      	bls.n	801b25c <uxr_write_framed_msg+0x128>
 801b218:	2a29      	cmp	r2, #41	@ 0x29
 801b21a:	f240 80af 	bls.w	801b37c <uxr_write_framed_msg+0x248>
 801b21e:	2500      	movs	r5, #0
 801b220:	e000      	b.n	801b224 <uxr_write_framed_msg+0xf0>
 801b222:	b160      	cbz	r0, 801b23e <uxr_write_framed_msg+0x10a>
 801b224:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801b228:	1b52      	subs	r2, r2, r5
 801b22a:	465b      	mov	r3, fp
 801b22c:	4421      	add	r1, r4
 801b22e:	4638      	mov	r0, r7
 801b230:	47b0      	blx	r6
 801b232:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801b236:	4405      	add	r5, r0
 801b238:	4295      	cmp	r5, r2
 801b23a:	d3f2      	bcc.n	801b222 <uxr_write_framed_msg+0xee>
 801b23c:	d003      	beq.n	801b246 <uxr_write_framed_msg+0x112>
 801b23e:	2000      	movs	r0, #0
 801b240:	b003      	add	sp, #12
 801b242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b246:	fa5f f18a 	uxtb.w	r1, sl
 801b24a:	f04f 0300 	mov.w	r3, #0
 801b24e:	2901      	cmp	r1, #1
 801b250:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801b254:	f04f 0200 	mov.w	r2, #0
 801b258:	f200 8090 	bhi.w	801b37c <uxr_write_framed_msg+0x248>
 801b25c:	1c51      	adds	r1, r2, #1
 801b25e:	b2c9      	uxtb	r1, r1
 801b260:	2929      	cmp	r1, #41	@ 0x29
 801b262:	d8dc      	bhi.n	801b21e <uxr_write_framed_msg+0xea>
 801b264:	18a5      	adds	r5, r4, r2
 801b266:	4421      	add	r1, r4
 801b268:	3202      	adds	r2, #2
 801b26a:	f088 0820 	eor.w	r8, r8, #32
 801b26e:	4648      	mov	r0, r9
 801b270:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801b274:	b2d2      	uxtb	r2, r2
 801b276:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801b27a:	f04f 0901 	mov.w	r9, #1
 801b27e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801b282:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b286:	2800      	cmp	r0, #0
 801b288:	f040 8085 	bne.w	801b396 <uxr_write_framed_msg+0x262>
 801b28c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b290:	e7bc      	b.n	801b20c <uxr_write_framed_msg+0xd8>
 801b292:	4611      	mov	r1, r2
 801b294:	f04f 0c03 	mov.w	ip, #3
 801b298:	2204      	movs	r2, #4
 801b29a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b29c:	4421      	add	r1, r4
 801b29e:	b2dd      	uxtb	r5, r3
 801b2a0:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801b2a4:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 801b2a8:	44a4      	add	ip, r4
 801b2aa:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801b2ae:	f080 0020 	eor.w	r0, r0, #32
 801b2b2:	2901      	cmp	r1, #1
 801b2b4:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801b2b8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b2bc:	f63f af66 	bhi.w	801b18c <uxr_write_framed_msg+0x58>
 801b2c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b2c2:	18a0      	adds	r0, r4, r2
 801b2c4:	f085 0520 	eor.w	r5, r5, #32
 801b2c8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801b2cc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801b2d0:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801b2d4:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801b2d8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801b2dc:	3202      	adds	r2, #2
 801b2de:	2801      	cmp	r0, #1
 801b2e0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b2e4:	f63f af60 	bhi.w	801b1a8 <uxr_write_framed_msg+0x74>
 801b2e8:	1c50      	adds	r0, r2, #1
 801b2ea:	18a5      	adds	r5, r4, r2
 801b2ec:	fa54 f080 	uxtab	r0, r4, r0
 801b2f0:	3202      	adds	r2, #2
 801b2f2:	f081 0120 	eor.w	r1, r1, #32
 801b2f6:	b2d2      	uxtb	r2, r2
 801b2f8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801b2fc:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 801b300:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801b304:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b308:	2b00      	cmp	r3, #0
 801b30a:	f47f af57 	bne.w	801b1bc <uxr_write_framed_msg+0x88>
 801b30e:	9301      	str	r3, [sp, #4]
 801b310:	4698      	mov	r8, r3
 801b312:	e779      	b.n	801b208 <uxr_write_framed_msg+0xd4>
 801b314:	2500      	movs	r5, #0
 801b316:	e001      	b.n	801b31c <uxr_write_framed_msg+0x1e8>
 801b318:	2800      	cmp	r0, #0
 801b31a:	d090      	beq.n	801b23e <uxr_write_framed_msg+0x10a>
 801b31c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801b320:	1b52      	subs	r2, r2, r5
 801b322:	465b      	mov	r3, fp
 801b324:	4421      	add	r1, r4
 801b326:	4638      	mov	r0, r7
 801b328:	47b0      	blx	r6
 801b32a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801b32e:	4405      	add	r5, r0
 801b330:	4295      	cmp	r5, r2
 801b332:	d3f1      	bcc.n	801b318 <uxr_write_framed_msg+0x1e4>
 801b334:	d183      	bne.n	801b23e <uxr_write_framed_msg+0x10a>
 801b336:	f04f 0300 	mov.w	r3, #0
 801b33a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801b33e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b340:	4543      	cmp	r3, r8
 801b342:	d964      	bls.n	801b40e <uxr_write_framed_msg+0x2da>
 801b344:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801b348:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801b34c:	2901      	cmp	r1, #1
 801b34e:	f04f 0200 	mov.w	r2, #0
 801b352:	f63f af3d 	bhi.w	801b1d0 <uxr_write_framed_msg+0x9c>
 801b356:	1c51      	adds	r1, r2, #1
 801b358:	b2c9      	uxtb	r1, r1
 801b35a:	2929      	cmp	r1, #41	@ 0x29
 801b35c:	d8da      	bhi.n	801b314 <uxr_write_framed_msg+0x1e0>
 801b35e:	18a0      	adds	r0, r4, r2
 801b360:	4421      	add	r1, r4
 801b362:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 801b366:	3202      	adds	r2, #2
 801b368:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801b36c:	b2d2      	uxtb	r2, r2
 801b36e:	f083 0020 	eor.w	r0, r3, #32
 801b372:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801b376:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b37a:	e733      	b.n	801b1e4 <uxr_write_framed_msg+0xb0>
 801b37c:	18a1      	adds	r1, r4, r2
 801b37e:	3201      	adds	r2, #1
 801b380:	4648      	mov	r0, r9
 801b382:	b2d2      	uxtb	r2, r2
 801b384:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801b388:	f04f 0901 	mov.w	r9, #1
 801b38c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b390:	2800      	cmp	r0, #0
 801b392:	f43f af7b 	beq.w	801b28c <uxr_write_framed_msg+0x158>
 801b396:	2500      	movs	r5, #0
 801b398:	e002      	b.n	801b3a0 <uxr_write_framed_msg+0x26c>
 801b39a:	2800      	cmp	r0, #0
 801b39c:	f43f af4f 	beq.w	801b23e <uxr_write_framed_msg+0x10a>
 801b3a0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801b3a4:	1b52      	subs	r2, r2, r5
 801b3a6:	465b      	mov	r3, fp
 801b3a8:	4421      	add	r1, r4
 801b3aa:	4638      	mov	r0, r7
 801b3ac:	47b0      	blx	r6
 801b3ae:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801b3b2:	4405      	add	r5, r0
 801b3b4:	4295      	cmp	r5, r2
 801b3b6:	d3f0      	bcc.n	801b39a <uxr_write_framed_msg+0x266>
 801b3b8:	f47f af41 	bne.w	801b23e <uxr_write_framed_msg+0x10a>
 801b3bc:	2300      	movs	r3, #0
 801b3be:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801b3c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b3c4:	b298      	uxth	r0, r3
 801b3c6:	b003      	add	sp, #12
 801b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3cc:	217d      	movs	r1, #125	@ 0x7d
 801b3ce:	f082 0220 	eor.w	r2, r2, #32
 801b3d2:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801b3d6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801b3da:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801b3de:	2901      	cmp	r1, #1
 801b3e0:	f04f 0203 	mov.w	r2, #3
 801b3e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b3e8:	d804      	bhi.n	801b3f4 <uxr_write_framed_msg+0x2c0>
 801b3ea:	4611      	mov	r1, r2
 801b3ec:	f04f 0c04 	mov.w	ip, #4
 801b3f0:	2205      	movs	r2, #5
 801b3f2:	e752      	b.n	801b29a <uxr_write_framed_msg+0x166>
 801b3f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b3f6:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801b3fa:	b2dd      	uxtb	r5, r3
 801b3fc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801b400:	2204      	movs	r2, #4
 801b402:	2901      	cmp	r1, #1
 801b404:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801b408:	f63f aec0 	bhi.w	801b18c <uxr_write_framed_msg+0x58>
 801b40c:	e758      	b.n	801b2c0 <uxr_write_framed_msg+0x18c>
 801b40e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801b412:	fa5f f889 	uxtb.w	r8, r9
 801b416:	9301      	str	r3, [sp, #4]
 801b418:	2200      	movs	r2, #0
 801b41a:	e6f5      	b.n	801b208 <uxr_write_framed_msg+0xd4>
 801b41c:	0801e5f8 	.word	0x0801e5f8

0801b420 <uxr_framing_read_transport>:
 801b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b424:	4604      	mov	r4, r0
 801b426:	b083      	sub	sp, #12
 801b428:	461f      	mov	r7, r3
 801b42a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801b42e:	4689      	mov	r9, r1
 801b430:	4692      	mov	sl, r2
 801b432:	f7f9 f837 	bl	80144a4 <uxr_millis>
 801b436:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801b43a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801b43e:	42b3      	cmp	r3, r6
 801b440:	4680      	mov	r8, r0
 801b442:	d061      	beq.n	801b508 <uxr_framing_read_transport+0xe8>
 801b444:	d81c      	bhi.n	801b480 <uxr_framing_read_transport+0x60>
 801b446:	1e75      	subs	r5, r6, #1
 801b448:	1aed      	subs	r5, r5, r3
 801b44a:	b2ed      	uxtb	r5, r5
 801b44c:	2600      	movs	r6, #0
 801b44e:	455d      	cmp	r5, fp
 801b450:	d81f      	bhi.n	801b492 <uxr_framing_read_transport+0x72>
 801b452:	19ab      	adds	r3, r5, r6
 801b454:	455b      	cmp	r3, fp
 801b456:	bf84      	itt	hi
 801b458:	ebab 0605 	subhi.w	r6, fp, r5
 801b45c:	b2f6      	uxtbhi	r6, r6
 801b45e:	b9ed      	cbnz	r5, 801b49c <uxr_framing_read_transport+0x7c>
 801b460:	f04f 0b00 	mov.w	fp, #0
 801b464:	f7f9 f81e 	bl	80144a4 <uxr_millis>
 801b468:	683b      	ldr	r3, [r7, #0]
 801b46a:	eba0 0808 	sub.w	r8, r0, r8
 801b46e:	eba3 0308 	sub.w	r3, r3, r8
 801b472:	4658      	mov	r0, fp
 801b474:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b478:	603b      	str	r3, [r7, #0]
 801b47a:	b003      	add	sp, #12
 801b47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b480:	2e00      	cmp	r6, #0
 801b482:	d049      	beq.n	801b518 <uxr_framing_read_transport+0xf8>
 801b484:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 801b488:	b2ed      	uxtb	r5, r5
 801b48a:	3e01      	subs	r6, #1
 801b48c:	455d      	cmp	r5, fp
 801b48e:	b2f6      	uxtb	r6, r6
 801b490:	d9df      	bls.n	801b452 <uxr_framing_read_transport+0x32>
 801b492:	fa5f f58b 	uxtb.w	r5, fp
 801b496:	2600      	movs	r6, #0
 801b498:	2d00      	cmp	r5, #0
 801b49a:	d0e1      	beq.n	801b460 <uxr_framing_read_transport+0x40>
 801b49c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801b4a0:	3102      	adds	r1, #2
 801b4a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b4a4:	9300      	str	r3, [sp, #0]
 801b4a6:	683b      	ldr	r3, [r7, #0]
 801b4a8:	4421      	add	r1, r4
 801b4aa:	462a      	mov	r2, r5
 801b4ac:	4650      	mov	r0, sl
 801b4ae:	47c8      	blx	r9
 801b4b0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801b4b4:	4a1a      	ldr	r2, [pc, #104]	@ (801b520 <uxr_framing_read_transport+0x100>)
 801b4b6:	4403      	add	r3, r0
 801b4b8:	0859      	lsrs	r1, r3, #1
 801b4ba:	fba2 2101 	umull	r2, r1, r2, r1
 801b4be:	0889      	lsrs	r1, r1, #2
 801b4c0:	222a      	movs	r2, #42	@ 0x2a
 801b4c2:	fb02 3111 	mls	r1, r2, r1, r3
 801b4c6:	4683      	mov	fp, r0
 801b4c8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801b4cc:	2800      	cmp	r0, #0
 801b4ce:	d0c7      	beq.n	801b460 <uxr_framing_read_transport+0x40>
 801b4d0:	42a8      	cmp	r0, r5
 801b4d2:	d1c7      	bne.n	801b464 <uxr_framing_read_transport+0x44>
 801b4d4:	2e00      	cmp	r6, #0
 801b4d6:	d0c5      	beq.n	801b464 <uxr_framing_read_transport+0x44>
 801b4d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b4da:	9300      	str	r3, [sp, #0]
 801b4dc:	3102      	adds	r1, #2
 801b4de:	4632      	mov	r2, r6
 801b4e0:	4421      	add	r1, r4
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	4650      	mov	r0, sl
 801b4e6:	47c8      	blx	r9
 801b4e8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801b4ec:	4a0c      	ldr	r2, [pc, #48]	@ (801b520 <uxr_framing_read_transport+0x100>)
 801b4ee:	180b      	adds	r3, r1, r0
 801b4f0:	0859      	lsrs	r1, r3, #1
 801b4f2:	fba2 1201 	umull	r1, r2, r2, r1
 801b4f6:	0892      	lsrs	r2, r2, #2
 801b4f8:	212a      	movs	r1, #42	@ 0x2a
 801b4fa:	fb01 3312 	mls	r3, r1, r2, r3
 801b4fe:	eb00 0b05 	add.w	fp, r0, r5
 801b502:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801b506:	e7ad      	b.n	801b464 <uxr_framing_read_transport+0x44>
 801b508:	2600      	movs	r6, #0
 801b50a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801b50e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801b510:	d9bf      	bls.n	801b492 <uxr_framing_read_transport+0x72>
 801b512:	2102      	movs	r1, #2
 801b514:	2529      	movs	r5, #41	@ 0x29
 801b516:	e7c4      	b.n	801b4a2 <uxr_framing_read_transport+0x82>
 801b518:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 801b51c:	b2ed      	uxtb	r5, r5
 801b51e:	e796      	b.n	801b44e <uxr_framing_read_transport+0x2e>
 801b520:	30c30c31 	.word	0x30c30c31

0801b524 <uxr_read_framed_msg>:
 801b524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b528:	461e      	mov	r6, r3
 801b52a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801b52e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801b532:	429d      	cmp	r5, r3
 801b534:	b083      	sub	sp, #12
 801b536:	4604      	mov	r4, r0
 801b538:	4688      	mov	r8, r1
 801b53a:	4691      	mov	r9, r2
 801b53c:	f000 8188 	beq.w	801b850 <uxr_read_framed_msg+0x32c>
 801b540:	7823      	ldrb	r3, [r4, #0]
 801b542:	4dc1      	ldr	r5, [pc, #772]	@ (801b848 <uxr_read_framed_msg+0x324>)
 801b544:	4fc1      	ldr	r7, [pc, #772]	@ (801b84c <uxr_read_framed_msg+0x328>)
 801b546:	2b07      	cmp	r3, #7
 801b548:	d8fd      	bhi.n	801b546 <uxr_read_framed_msg+0x22>
 801b54a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801b54e:	0115      	.short	0x0115
 801b550:	00d600f6 	.word	0x00d600f6
 801b554:	009000b9 	.word	0x009000b9
 801b558:	0030004d 	.word	0x0030004d
 801b55c:	0008      	.short	0x0008
 801b55e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801b562:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801b566:	4299      	cmp	r1, r3
 801b568:	f000 814a 	beq.w	801b800 <uxr_read_framed_msg+0x2dc>
 801b56c:	18e2      	adds	r2, r4, r3
 801b56e:	7892      	ldrb	r2, [r2, #2]
 801b570:	2a7d      	cmp	r2, #125	@ 0x7d
 801b572:	f000 8199 	beq.w	801b8a8 <uxr_read_framed_msg+0x384>
 801b576:	3301      	adds	r3, #1
 801b578:	0858      	lsrs	r0, r3, #1
 801b57a:	fba5 1000 	umull	r1, r0, r5, r0
 801b57e:	0880      	lsrs	r0, r0, #2
 801b580:	212a      	movs	r1, #42	@ 0x2a
 801b582:	fb01 3310 	mls	r3, r1, r0, r3
 801b586:	2a7e      	cmp	r2, #126	@ 0x7e
 801b588:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b58c:	f000 8252 	beq.w	801ba34 <uxr_read_framed_msg+0x510>
 801b590:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801b592:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801b594:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801b598:	b29b      	uxth	r3, r3
 801b59a:	2200      	movs	r2, #0
 801b59c:	4299      	cmp	r1, r3
 801b59e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801b5a0:	7022      	strb	r2, [r4, #0]
 801b5a2:	f000 8179 	beq.w	801b898 <uxr_read_framed_msg+0x374>
 801b5a6:	2000      	movs	r0, #0
 801b5a8:	b003      	add	sp, #12
 801b5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ae:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801b5b2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801b5b6:	4299      	cmp	r1, r3
 801b5b8:	f000 8131 	beq.w	801b81e <uxr_read_framed_msg+0x2fa>
 801b5bc:	18e2      	adds	r2, r4, r3
 801b5be:	7890      	ldrb	r0, [r2, #2]
 801b5c0:	287d      	cmp	r0, #125	@ 0x7d
 801b5c2:	f000 8190 	beq.w	801b8e6 <uxr_read_framed_msg+0x3c2>
 801b5c6:	3301      	adds	r3, #1
 801b5c8:	085a      	lsrs	r2, r3, #1
 801b5ca:	fba5 1202 	umull	r1, r2, r5, r2
 801b5ce:	0892      	lsrs	r2, r2, #2
 801b5d0:	212a      	movs	r1, #42	@ 0x2a
 801b5d2:	fb01 3312 	mls	r3, r1, r2, r3
 801b5d6:	287e      	cmp	r0, #126	@ 0x7e
 801b5d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b5dc:	f000 821a 	beq.w	801ba14 <uxr_read_framed_msg+0x4f0>
 801b5e0:	2307      	movs	r3, #7
 801b5e2:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801b5e4:	7023      	strb	r3, [r4, #0]
 801b5e6:	e7ae      	b.n	801b546 <uxr_read_framed_msg+0x22>
 801b5e8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801b5ea:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801b5ee:	459e      	cmp	lr, r3
 801b5f0:	d938      	bls.n	801b664 <uxr_read_framed_msg+0x140>
 801b5f2:	ee07 8a90 	vmov	s15, r8
 801b5f6:	212a      	movs	r1, #42	@ 0x2a
 801b5f8:	e020      	b.n	801b63c <uxr_read_framed_msg+0x118>
 801b5fa:	f89b c002 	ldrb.w	ip, [fp, #2]
 801b5fe:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801b602:	f000 80d4 	beq.w	801b7ae <uxr_read_framed_msg+0x28a>
 801b606:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801b60a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b60e:	f000 8219 	beq.w	801ba44 <uxr_read_framed_msg+0x520>
 801b612:	f806 c003 	strb.w	ip, [r6, r3]
 801b616:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801b61a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801b61c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801b620:	ea8a 000c 	eor.w	r0, sl, ip
 801b624:	b2c0      	uxtb	r0, r0
 801b626:	3301      	adds	r3, #1
 801b628:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801b62c:	b29b      	uxth	r3, r3
 801b62e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801b632:	4573      	cmp	r3, lr
 801b634:	8663      	strh	r3, [r4, #50]	@ 0x32
 801b636:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801b638:	f080 8120 	bcs.w	801b87c <uxr_read_framed_msg+0x358>
 801b63c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801b640:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801b644:	f100 0c01 	add.w	ip, r0, #1
 801b648:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801b64c:	fba5 8202 	umull	r8, r2, r5, r2
 801b650:	0892      	lsrs	r2, r2, #2
 801b652:	4582      	cmp	sl, r0
 801b654:	eb04 0b00 	add.w	fp, r4, r0
 801b658:	fb01 c212 	mls	r2, r1, r2, ip
 801b65c:	d1cd      	bne.n	801b5fa <uxr_read_framed_msg+0xd6>
 801b65e:	ee17 8a90 	vmov	r8, s15
 801b662:	459e      	cmp	lr, r3
 801b664:	f040 8111 	bne.w	801b88a <uxr_read_framed_msg+0x366>
 801b668:	2306      	movs	r3, #6
 801b66a:	7023      	strb	r3, [r4, #0]
 801b66c:	e76b      	b.n	801b546 <uxr_read_framed_msg+0x22>
 801b66e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801b672:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801b676:	4298      	cmp	r0, r3
 801b678:	f000 80c2 	beq.w	801b800 <uxr_read_framed_msg+0x2dc>
 801b67c:	18e2      	adds	r2, r4, r3
 801b67e:	7891      	ldrb	r1, [r2, #2]
 801b680:	297d      	cmp	r1, #125	@ 0x7d
 801b682:	f000 814c 	beq.w	801b91e <uxr_read_framed_msg+0x3fa>
 801b686:	3301      	adds	r3, #1
 801b688:	085a      	lsrs	r2, r3, #1
 801b68a:	fba5 0202 	umull	r0, r2, r5, r2
 801b68e:	0892      	lsrs	r2, r2, #2
 801b690:	202a      	movs	r0, #42	@ 0x2a
 801b692:	fb00 3312 	mls	r3, r0, r2, r3
 801b696:	297e      	cmp	r1, #126	@ 0x7e
 801b698:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b69c:	f000 81ca 	beq.w	801ba34 <uxr_read_framed_msg+0x510>
 801b6a0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801b6a2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801b6a6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b6a8:	b29b      	uxth	r3, r3
 801b6aa:	2000      	movs	r0, #0
 801b6ac:	428b      	cmp	r3, r1
 801b6ae:	8623      	strh	r3, [r4, #48]	@ 0x30
 801b6b0:	8660      	strh	r0, [r4, #50]	@ 0x32
 801b6b2:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801b6b4:	f240 80df 	bls.w	801b876 <uxr_read_framed_msg+0x352>
 801b6b8:	7020      	strb	r0, [r4, #0]
 801b6ba:	b003      	add	sp, #12
 801b6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6c0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801b6c4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801b6c8:	4299      	cmp	r1, r3
 801b6ca:	f000 80a8 	beq.w	801b81e <uxr_read_framed_msg+0x2fa>
 801b6ce:	18e2      	adds	r2, r4, r3
 801b6d0:	7890      	ldrb	r0, [r2, #2]
 801b6d2:	287d      	cmp	r0, #125	@ 0x7d
 801b6d4:	f000 8164 	beq.w	801b9a0 <uxr_read_framed_msg+0x47c>
 801b6d8:	3301      	adds	r3, #1
 801b6da:	085a      	lsrs	r2, r3, #1
 801b6dc:	fba5 1202 	umull	r1, r2, r5, r2
 801b6e0:	0892      	lsrs	r2, r2, #2
 801b6e2:	212a      	movs	r1, #42	@ 0x2a
 801b6e4:	fb01 3312 	mls	r3, r1, r2, r3
 801b6e8:	287e      	cmp	r0, #126	@ 0x7e
 801b6ea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b6ee:	f000 8191 	beq.w	801ba14 <uxr_read_framed_msg+0x4f0>
 801b6f2:	2304      	movs	r3, #4
 801b6f4:	8620      	strh	r0, [r4, #48]	@ 0x30
 801b6f6:	7023      	strb	r3, [r4, #0]
 801b6f8:	e725      	b.n	801b546 <uxr_read_framed_msg+0x22>
 801b6fa:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801b6fe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b702:	4290      	cmp	r0, r2
 801b704:	f000 80b3 	beq.w	801b86e <uxr_read_framed_msg+0x34a>
 801b708:	18a3      	adds	r3, r4, r2
 801b70a:	7899      	ldrb	r1, [r3, #2]
 801b70c:	297d      	cmp	r1, #125	@ 0x7d
 801b70e:	f000 8164 	beq.w	801b9da <uxr_read_framed_msg+0x4b6>
 801b712:	3201      	adds	r2, #1
 801b714:	0850      	lsrs	r0, r2, #1
 801b716:	fba5 3000 	umull	r3, r0, r5, r0
 801b71a:	0880      	lsrs	r0, r0, #2
 801b71c:	232a      	movs	r3, #42	@ 0x2a
 801b71e:	fb03 2210 	mls	r2, r3, r0, r2
 801b722:	297e      	cmp	r1, #126	@ 0x7e
 801b724:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b728:	f000 8188 	beq.w	801ba3c <uxr_read_framed_msg+0x518>
 801b72c:	7863      	ldrb	r3, [r4, #1]
 801b72e:	428b      	cmp	r3, r1
 801b730:	bf0c      	ite	eq
 801b732:	2303      	moveq	r3, #3
 801b734:	2300      	movne	r3, #0
 801b736:	7023      	strb	r3, [r4, #0]
 801b738:	e705      	b.n	801b546 <uxr_read_framed_msg+0x22>
 801b73a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801b73e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801b742:	2200      	movs	r2, #0
 801b744:	4299      	cmp	r1, r3
 801b746:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801b74a:	d06c      	beq.n	801b826 <uxr_read_framed_msg+0x302>
 801b74c:	18e2      	adds	r2, r4, r3
 801b74e:	7890      	ldrb	r0, [r2, #2]
 801b750:	287d      	cmp	r0, #125	@ 0x7d
 801b752:	f000 8101 	beq.w	801b958 <uxr_read_framed_msg+0x434>
 801b756:	3301      	adds	r3, #1
 801b758:	085a      	lsrs	r2, r3, #1
 801b75a:	fba5 1202 	umull	r1, r2, r5, r2
 801b75e:	0892      	lsrs	r2, r2, #2
 801b760:	212a      	movs	r1, #42	@ 0x2a
 801b762:	fb01 3312 	mls	r3, r1, r2, r3
 801b766:	287e      	cmp	r0, #126	@ 0x7e
 801b768:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801b76c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b770:	d059      	beq.n	801b826 <uxr_read_framed_msg+0x302>
 801b772:	2302      	movs	r3, #2
 801b774:	7023      	strb	r3, [r4, #0]
 801b776:	e6e6      	b.n	801b546 <uxr_read_framed_msg+0x22>
 801b778:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801b77c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b780:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801b784:	1c51      	adds	r1, r2, #1
 801b786:	084b      	lsrs	r3, r1, #1
 801b788:	fba5 c303 	umull	ip, r3, r5, r3
 801b78c:	089b      	lsrs	r3, r3, #2
 801b78e:	fb0e 1313 	mls	r3, lr, r3, r1
 801b792:	4592      	cmp	sl, r2
 801b794:	eb04 0002 	add.w	r0, r4, r2
 801b798:	b2da      	uxtb	r2, r3
 801b79a:	f43f af04 	beq.w	801b5a6 <uxr_read_framed_msg+0x82>
 801b79e:	7883      	ldrb	r3, [r0, #2]
 801b7a0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b7a4:	2b7e      	cmp	r3, #126	@ 0x7e
 801b7a6:	d1ed      	bne.n	801b784 <uxr_read_framed_msg+0x260>
 801b7a8:	2301      	movs	r3, #1
 801b7aa:	7023      	strb	r3, [r4, #0]
 801b7ac:	e6cb      	b.n	801b546 <uxr_read_framed_msg+0x22>
 801b7ae:	f100 0c01 	add.w	ip, r0, #1
 801b7b2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801b7b6:	fba5 8202 	umull	r8, r2, r5, r2
 801b7ba:	0892      	lsrs	r2, r2, #2
 801b7bc:	fb01 c212 	mls	r2, r1, r2, ip
 801b7c0:	eb04 0c02 	add.w	ip, r4, r2
 801b7c4:	b2d2      	uxtb	r2, r2
 801b7c6:	4592      	cmp	sl, r2
 801b7c8:	f100 0002 	add.w	r0, r0, #2
 801b7cc:	f43f af47 	beq.w	801b65e <uxr_read_framed_msg+0x13a>
 801b7d0:	0842      	lsrs	r2, r0, #1
 801b7d2:	f89c a002 	ldrb.w	sl, [ip, #2]
 801b7d6:	fba5 8202 	umull	r8, r2, r5, r2
 801b7da:	0892      	lsrs	r2, r2, #2
 801b7dc:	fb01 0012 	mls	r0, r1, r2, r0
 801b7e0:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801b7e4:	f08a 0c20 	eor.w	ip, sl, #32
 801b7e8:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801b7ec:	f47f af11 	bne.w	801b612 <uxr_read_framed_msg+0xee>
 801b7f0:	459e      	cmp	lr, r3
 801b7f2:	ee17 8a90 	vmov	r8, s15
 801b7f6:	f43f af37 	beq.w	801b668 <uxr_read_framed_msg+0x144>
 801b7fa:	2301      	movs	r3, #1
 801b7fc:	7023      	strb	r3, [r4, #0]
 801b7fe:	e6a2      	b.n	801b546 <uxr_read_framed_msg+0x22>
 801b800:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b802:	9300      	str	r3, [sp, #0]
 801b804:	2301      	movs	r3, #1
 801b806:	9301      	str	r3, [sp, #4]
 801b808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b80a:	464a      	mov	r2, r9
 801b80c:	4641      	mov	r1, r8
 801b80e:	4620      	mov	r0, r4
 801b810:	f7ff fe06 	bl	801b420 <uxr_framing_read_transport>
 801b814:	2800      	cmp	r0, #0
 801b816:	f43f aec6 	beq.w	801b5a6 <uxr_read_framed_msg+0x82>
 801b81a:	7823      	ldrb	r3, [r4, #0]
 801b81c:	e693      	b.n	801b546 <uxr_read_framed_msg+0x22>
 801b81e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b820:	9300      	str	r3, [sp, #0]
 801b822:	2302      	movs	r3, #2
 801b824:	e7ef      	b.n	801b806 <uxr_read_framed_msg+0x2e2>
 801b826:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b828:	9300      	str	r3, [sp, #0]
 801b82a:	2304      	movs	r3, #4
 801b82c:	9301      	str	r3, [sp, #4]
 801b82e:	464a      	mov	r2, r9
 801b830:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b832:	4641      	mov	r1, r8
 801b834:	4620      	mov	r0, r4
 801b836:	f7ff fdf3 	bl	801b420 <uxr_framing_read_transport>
 801b83a:	2800      	cmp	r0, #0
 801b83c:	d1ed      	bne.n	801b81a <uxr_read_framed_msg+0x2f6>
 801b83e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801b842:	2b7e      	cmp	r3, #126	@ 0x7e
 801b844:	d0e9      	beq.n	801b81a <uxr_read_framed_msg+0x2f6>
 801b846:	e6ae      	b.n	801b5a6 <uxr_read_framed_msg+0x82>
 801b848:	30c30c31 	.word	0x30c30c31
 801b84c:	0801e5f8 	.word	0x0801e5f8
 801b850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b852:	9300      	str	r3, [sp, #0]
 801b854:	2305      	movs	r3, #5
 801b856:	9301      	str	r3, [sp, #4]
 801b858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b85a:	f7ff fde1 	bl	801b420 <uxr_framing_read_transport>
 801b85e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b862:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801b866:	429a      	cmp	r2, r3
 801b868:	f43f ae9d 	beq.w	801b5a6 <uxr_read_framed_msg+0x82>
 801b86c:	e668      	b.n	801b540 <uxr_read_framed_msg+0x1c>
 801b86e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b870:	9300      	str	r3, [sp, #0]
 801b872:	2303      	movs	r3, #3
 801b874:	e7c7      	b.n	801b806 <uxr_read_framed_msg+0x2e2>
 801b876:	2305      	movs	r3, #5
 801b878:	7023      	strb	r3, [r4, #0]
 801b87a:	e664      	b.n	801b546 <uxr_read_framed_msg+0x22>
 801b87c:	ee17 8a90 	vmov	r8, s15
 801b880:	f43f aef2 	beq.w	801b668 <uxr_read_framed_msg+0x144>
 801b884:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801b888:	d08e      	beq.n	801b7a8 <uxr_read_framed_msg+0x284>
 801b88a:	ebae 0303 	sub.w	r3, lr, r3
 801b88e:	3302      	adds	r3, #2
 801b890:	9301      	str	r3, [sp, #4]
 801b892:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b894:	9300      	str	r3, [sp, #0]
 801b896:	e7b7      	b.n	801b808 <uxr_read_framed_msg+0x2e4>
 801b898:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b89a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801b89e:	7013      	strb	r3, [r2, #0]
 801b8a0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801b8a2:	b003      	add	sp, #12
 801b8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8a8:	f103 0c01 	add.w	ip, r3, #1
 801b8ac:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801b8b0:	fba5 0202 	umull	r0, r2, r5, r2
 801b8b4:	0892      	lsrs	r2, r2, #2
 801b8b6:	202a      	movs	r0, #42	@ 0x2a
 801b8b8:	fb00 c212 	mls	r2, r0, r2, ip
 801b8bc:	fa5f fc82 	uxtb.w	ip, r2
 801b8c0:	4561      	cmp	r1, ip
 801b8c2:	d09d      	beq.n	801b800 <uxr_read_framed_msg+0x2dc>
 801b8c4:	3302      	adds	r3, #2
 801b8c6:	4422      	add	r2, r4
 801b8c8:	0859      	lsrs	r1, r3, #1
 801b8ca:	7892      	ldrb	r2, [r2, #2]
 801b8cc:	fba5 c101 	umull	ip, r1, r5, r1
 801b8d0:	0889      	lsrs	r1, r1, #2
 801b8d2:	fb00 3311 	mls	r3, r0, r1, r3
 801b8d6:	2a7e      	cmp	r2, #126	@ 0x7e
 801b8d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b8dc:	f000 80aa 	beq.w	801ba34 <uxr_read_framed_msg+0x510>
 801b8e0:	f082 0220 	eor.w	r2, r2, #32
 801b8e4:	e654      	b.n	801b590 <uxr_read_framed_msg+0x6c>
 801b8e6:	1c58      	adds	r0, r3, #1
 801b8e8:	0842      	lsrs	r2, r0, #1
 801b8ea:	fba5 c202 	umull	ip, r2, r5, r2
 801b8ee:	0892      	lsrs	r2, r2, #2
 801b8f0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b8f4:	fb0c 0212 	mls	r2, ip, r2, r0
 801b8f8:	b2d0      	uxtb	r0, r2
 801b8fa:	4281      	cmp	r1, r0
 801b8fc:	d08f      	beq.n	801b81e <uxr_read_framed_msg+0x2fa>
 801b8fe:	4422      	add	r2, r4
 801b900:	3302      	adds	r3, #2
 801b902:	7890      	ldrb	r0, [r2, #2]
 801b904:	085a      	lsrs	r2, r3, #1
 801b906:	fba5 1202 	umull	r1, r2, r5, r2
 801b90a:	0892      	lsrs	r2, r2, #2
 801b90c:	fb0c 3312 	mls	r3, ip, r2, r3
 801b910:	287e      	cmp	r0, #126	@ 0x7e
 801b912:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b916:	d07d      	beq.n	801ba14 <uxr_read_framed_msg+0x4f0>
 801b918:	f080 0020 	eor.w	r0, r0, #32
 801b91c:	e660      	b.n	801b5e0 <uxr_read_framed_msg+0xbc>
 801b91e:	1c59      	adds	r1, r3, #1
 801b920:	084a      	lsrs	r2, r1, #1
 801b922:	fba5 c202 	umull	ip, r2, r5, r2
 801b926:	0892      	lsrs	r2, r2, #2
 801b928:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b92c:	fb0c 1212 	mls	r2, ip, r2, r1
 801b930:	b2d1      	uxtb	r1, r2
 801b932:	4288      	cmp	r0, r1
 801b934:	f43f af64 	beq.w	801b800 <uxr_read_framed_msg+0x2dc>
 801b938:	4422      	add	r2, r4
 801b93a:	3302      	adds	r3, #2
 801b93c:	7891      	ldrb	r1, [r2, #2]
 801b93e:	085a      	lsrs	r2, r3, #1
 801b940:	fba5 0202 	umull	r0, r2, r5, r2
 801b944:	0892      	lsrs	r2, r2, #2
 801b946:	fb0c 3312 	mls	r3, ip, r2, r3
 801b94a:	297e      	cmp	r1, #126	@ 0x7e
 801b94c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b950:	d070      	beq.n	801ba34 <uxr_read_framed_msg+0x510>
 801b952:	f081 0120 	eor.w	r1, r1, #32
 801b956:	e6a3      	b.n	801b6a0 <uxr_read_framed_msg+0x17c>
 801b958:	f103 0c01 	add.w	ip, r3, #1
 801b95c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801b960:	fba5 0202 	umull	r0, r2, r5, r2
 801b964:	0892      	lsrs	r2, r2, #2
 801b966:	202a      	movs	r0, #42	@ 0x2a
 801b968:	fb00 c212 	mls	r2, r0, r2, ip
 801b96c:	fa5f fc82 	uxtb.w	ip, r2
 801b970:	4561      	cmp	r1, ip
 801b972:	f43f af58 	beq.w	801b826 <uxr_read_framed_msg+0x302>
 801b976:	4422      	add	r2, r4
 801b978:	3302      	adds	r3, #2
 801b97a:	7891      	ldrb	r1, [r2, #2]
 801b97c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801b980:	085a      	lsrs	r2, r3, #1
 801b982:	fba5 c202 	umull	ip, r2, r5, r2
 801b986:	0892      	lsrs	r2, r2, #2
 801b988:	fb00 3312 	mls	r3, r0, r2, r3
 801b98c:	297e      	cmp	r1, #126	@ 0x7e
 801b98e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b992:	f43f af48 	beq.w	801b826 <uxr_read_framed_msg+0x302>
 801b996:	f081 0120 	eor.w	r1, r1, #32
 801b99a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801b99e:	e6e8      	b.n	801b772 <uxr_read_framed_msg+0x24e>
 801b9a0:	1c58      	adds	r0, r3, #1
 801b9a2:	0842      	lsrs	r2, r0, #1
 801b9a4:	fba5 c202 	umull	ip, r2, r5, r2
 801b9a8:	0892      	lsrs	r2, r2, #2
 801b9aa:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b9ae:	fb0c 0212 	mls	r2, ip, r2, r0
 801b9b2:	b2d0      	uxtb	r0, r2
 801b9b4:	4281      	cmp	r1, r0
 801b9b6:	f43f af32 	beq.w	801b81e <uxr_read_framed_msg+0x2fa>
 801b9ba:	4422      	add	r2, r4
 801b9bc:	3302      	adds	r3, #2
 801b9be:	7890      	ldrb	r0, [r2, #2]
 801b9c0:	085a      	lsrs	r2, r3, #1
 801b9c2:	fba5 1202 	umull	r1, r2, r5, r2
 801b9c6:	0892      	lsrs	r2, r2, #2
 801b9c8:	fb0c 3312 	mls	r3, ip, r2, r3
 801b9cc:	287e      	cmp	r0, #126	@ 0x7e
 801b9ce:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b9d2:	d01f      	beq.n	801ba14 <uxr_read_framed_msg+0x4f0>
 801b9d4:	f080 0020 	eor.w	r0, r0, #32
 801b9d8:	e68b      	b.n	801b6f2 <uxr_read_framed_msg+0x1ce>
 801b9da:	1c51      	adds	r1, r2, #1
 801b9dc:	084b      	lsrs	r3, r1, #1
 801b9de:	fba5 c303 	umull	ip, r3, r5, r3
 801b9e2:	089b      	lsrs	r3, r3, #2
 801b9e4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b9e8:	fb0c 1313 	mls	r3, ip, r3, r1
 801b9ec:	b2d9      	uxtb	r1, r3
 801b9ee:	4288      	cmp	r0, r1
 801b9f0:	f43f af3d 	beq.w	801b86e <uxr_read_framed_msg+0x34a>
 801b9f4:	3202      	adds	r2, #2
 801b9f6:	4423      	add	r3, r4
 801b9f8:	0850      	lsrs	r0, r2, #1
 801b9fa:	789b      	ldrb	r3, [r3, #2]
 801b9fc:	fba5 1000 	umull	r1, r0, r5, r0
 801ba00:	0880      	lsrs	r0, r0, #2
 801ba02:	fb0c 2210 	mls	r2, ip, r0, r2
 801ba06:	2b7e      	cmp	r3, #126	@ 0x7e
 801ba08:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801ba0c:	d016      	beq.n	801ba3c <uxr_read_framed_msg+0x518>
 801ba0e:	f083 0120 	eor.w	r1, r3, #32
 801ba12:	e68b      	b.n	801b72c <uxr_read_framed_msg+0x208>
 801ba14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ba16:	9300      	str	r3, [sp, #0]
 801ba18:	2302      	movs	r3, #2
 801ba1a:	9301      	str	r3, [sp, #4]
 801ba1c:	464a      	mov	r2, r9
 801ba1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba20:	4641      	mov	r1, r8
 801ba22:	4620      	mov	r0, r4
 801ba24:	f7ff fcfc 	bl	801b420 <uxr_framing_read_transport>
 801ba28:	2800      	cmp	r0, #0
 801ba2a:	f47f aef6 	bne.w	801b81a <uxr_read_framed_msg+0x2f6>
 801ba2e:	2301      	movs	r3, #1
 801ba30:	7023      	strb	r3, [r4, #0]
 801ba32:	e588      	b.n	801b546 <uxr_read_framed_msg+0x22>
 801ba34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ba36:	9300      	str	r3, [sp, #0]
 801ba38:	2301      	movs	r3, #1
 801ba3a:	e7ee      	b.n	801ba1a <uxr_read_framed_msg+0x4f6>
 801ba3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ba3e:	9300      	str	r3, [sp, #0]
 801ba40:	2303      	movs	r3, #3
 801ba42:	e7ea      	b.n	801ba1a <uxr_read_framed_msg+0x4f6>
 801ba44:	ee17 8a90 	vmov	r8, s15
 801ba48:	e6ae      	b.n	801b7a8 <uxr_read_framed_msg+0x284>
 801ba4a:	bf00      	nop

0801ba4c <rcl_get_default_domain_id>:
 801ba4c:	b530      	push	{r4, r5, lr}
 801ba4e:	b083      	sub	sp, #12
 801ba50:	2300      	movs	r3, #0
 801ba52:	9300      	str	r3, [sp, #0]
 801ba54:	b1d0      	cbz	r0, 801ba8c <rcl_get_default_domain_id+0x40>
 801ba56:	4604      	mov	r4, r0
 801ba58:	4669      	mov	r1, sp
 801ba5a:	4815      	ldr	r0, [pc, #84]	@ (801bab0 <rcl_get_default_domain_id+0x64>)
 801ba5c:	f7fc fc18 	bl	8018290 <rcutils_get_env>
 801ba60:	4602      	mov	r2, r0
 801ba62:	b110      	cbz	r0, 801ba6a <rcl_get_default_domain_id+0x1e>
 801ba64:	2001      	movs	r0, #1
 801ba66:	b003      	add	sp, #12
 801ba68:	bd30      	pop	{r4, r5, pc}
 801ba6a:	9b00      	ldr	r3, [sp, #0]
 801ba6c:	b18b      	cbz	r3, 801ba92 <rcl_get_default_domain_id+0x46>
 801ba6e:	7818      	ldrb	r0, [r3, #0]
 801ba70:	2800      	cmp	r0, #0
 801ba72:	d0f8      	beq.n	801ba66 <rcl_get_default_domain_id+0x1a>
 801ba74:	a901      	add	r1, sp, #4
 801ba76:	4618      	mov	r0, r3
 801ba78:	9201      	str	r2, [sp, #4]
 801ba7a:	f000 fe6d 	bl	801c758 <strtoul>
 801ba7e:	4605      	mov	r5, r0
 801ba80:	b150      	cbz	r0, 801ba98 <rcl_get_default_domain_id+0x4c>
 801ba82:	1c43      	adds	r3, r0, #1
 801ba84:	d00d      	beq.n	801baa2 <rcl_get_default_domain_id+0x56>
 801ba86:	6025      	str	r5, [r4, #0]
 801ba88:	2000      	movs	r0, #0
 801ba8a:	e7ec      	b.n	801ba66 <rcl_get_default_domain_id+0x1a>
 801ba8c:	200b      	movs	r0, #11
 801ba8e:	b003      	add	sp, #12
 801ba90:	bd30      	pop	{r4, r5, pc}
 801ba92:	4618      	mov	r0, r3
 801ba94:	b003      	add	sp, #12
 801ba96:	bd30      	pop	{r4, r5, pc}
 801ba98:	9b01      	ldr	r3, [sp, #4]
 801ba9a:	781b      	ldrb	r3, [r3, #0]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d0f2      	beq.n	801ba86 <rcl_get_default_domain_id+0x3a>
 801baa0:	e7e0      	b.n	801ba64 <rcl_get_default_domain_id+0x18>
 801baa2:	f001 f9a5 	bl	801cdf0 <__errno>
 801baa6:	6803      	ldr	r3, [r0, #0]
 801baa8:	2b22      	cmp	r3, #34	@ 0x22
 801baaa:	d1ec      	bne.n	801ba86 <rcl_get_default_domain_id+0x3a>
 801baac:	e7da      	b.n	801ba64 <rcl_get_default_domain_id+0x18>
 801baae:	bf00      	nop
 801bab0:	0801e7f8 	.word	0x0801e7f8

0801bab4 <rcl_expand_topic_name>:
 801bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bab8:	b08b      	sub	sp, #44	@ 0x2c
 801baba:	9306      	str	r3, [sp, #24]
 801babc:	2800      	cmp	r0, #0
 801babe:	f000 80ad 	beq.w	801bc1c <rcl_expand_topic_name+0x168>
 801bac2:	460e      	mov	r6, r1
 801bac4:	2900      	cmp	r1, #0
 801bac6:	f000 80a9 	beq.w	801bc1c <rcl_expand_topic_name+0x168>
 801baca:	4617      	mov	r7, r2
 801bacc:	2a00      	cmp	r2, #0
 801bace:	f000 80a5 	beq.w	801bc1c <rcl_expand_topic_name+0x168>
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	f000 80a2 	beq.w	801bc1c <rcl_expand_topic_name+0x168>
 801bad8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bada:	2b00      	cmp	r3, #0
 801badc:	f000 809e 	beq.w	801bc1c <rcl_expand_topic_name+0x168>
 801bae0:	2200      	movs	r2, #0
 801bae2:	a909      	add	r1, sp, #36	@ 0x24
 801bae4:	4680      	mov	r8, r0
 801bae6:	f000 f9fb 	bl	801bee0 <rcl_validate_topic_name>
 801baea:	4604      	mov	r4, r0
 801baec:	2800      	cmp	r0, #0
 801baee:	f040 8096 	bne.w	801bc1e <rcl_expand_topic_name+0x16a>
 801baf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	f040 809a 	bne.w	801bc2e <rcl_expand_topic_name+0x17a>
 801bafa:	4602      	mov	r2, r0
 801bafc:	a909      	add	r1, sp, #36	@ 0x24
 801bafe:	4630      	mov	r0, r6
 801bb00:	f7fd f814 	bl	8018b2c <rmw_validate_node_name>
 801bb04:	2800      	cmp	r0, #0
 801bb06:	f040 808e 	bne.w	801bc26 <rcl_expand_topic_name+0x172>
 801bb0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bb0c:	2a00      	cmp	r2, #0
 801bb0e:	f040 8093 	bne.w	801bc38 <rcl_expand_topic_name+0x184>
 801bb12:	a909      	add	r1, sp, #36	@ 0x24
 801bb14:	4638      	mov	r0, r7
 801bb16:	f7fc ffeb 	bl	8018af0 <rmw_validate_namespace>
 801bb1a:	2800      	cmp	r0, #0
 801bb1c:	f040 8083 	bne.w	801bc26 <rcl_expand_topic_name+0x172>
 801bb20:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801bb22:	2c00      	cmp	r4, #0
 801bb24:	f040 80ed 	bne.w	801bd02 <rcl_expand_topic_name+0x24e>
 801bb28:	217b      	movs	r1, #123	@ 0x7b
 801bb2a:	4640      	mov	r0, r8
 801bb2c:	f001 f8d4 	bl	801ccd8 <strchr>
 801bb30:	f898 3000 	ldrb.w	r3, [r8]
 801bb34:	2b2f      	cmp	r3, #47	@ 0x2f
 801bb36:	4605      	mov	r5, r0
 801bb38:	f000 809e 	beq.w	801bc78 <rcl_expand_topic_name+0x1c4>
 801bb3c:	2b7e      	cmp	r3, #126	@ 0x7e
 801bb3e:	f040 80a2 	bne.w	801bc86 <rcl_expand_topic_name+0x1d2>
 801bb42:	4638      	mov	r0, r7
 801bb44:	f7e4 fb4e 	bl	80001e4 <strlen>
 801bb48:	4a82      	ldr	r2, [pc, #520]	@ (801bd54 <rcl_expand_topic_name+0x2a0>)
 801bb4a:	4b83      	ldr	r3, [pc, #524]	@ (801bd58 <rcl_expand_topic_name+0x2a4>)
 801bb4c:	2801      	cmp	r0, #1
 801bb4e:	bf18      	it	ne
 801bb50:	4613      	movne	r3, r2
 801bb52:	9302      	str	r3, [sp, #8]
 801bb54:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bb56:	9300      	str	r3, [sp, #0]
 801bb58:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801bb5c:	f108 0301 	add.w	r3, r8, #1
 801bb60:	9305      	str	r3, [sp, #20]
 801bb62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bb66:	9301      	str	r3, [sp, #4]
 801bb68:	ab14      	add	r3, sp, #80	@ 0x50
 801bb6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bb6c:	f7fc fba8 	bl	80182c0 <rcutils_format_string_limit>
 801bb70:	4682      	mov	sl, r0
 801bb72:	2800      	cmp	r0, #0
 801bb74:	f000 80c7 	beq.w	801bd06 <rcl_expand_topic_name+0x252>
 801bb78:	2d00      	cmp	r5, #0
 801bb7a:	f000 80a2 	beq.w	801bcc2 <rcl_expand_topic_name+0x20e>
 801bb7e:	217b      	movs	r1, #123	@ 0x7b
 801bb80:	f001 f8aa 	bl	801ccd8 <strchr>
 801bb84:	46d1      	mov	r9, sl
 801bb86:	4605      	mov	r5, r0
 801bb88:	9407      	str	r4, [sp, #28]
 801bb8a:	46d3      	mov	fp, sl
 801bb8c:	464c      	mov	r4, r9
 801bb8e:	2d00      	cmp	r5, #0
 801bb90:	f000 80be 	beq.w	801bd10 <rcl_expand_topic_name+0x25c>
 801bb94:	217d      	movs	r1, #125	@ 0x7d
 801bb96:	4620      	mov	r0, r4
 801bb98:	f001 f89e 	bl	801ccd8 <strchr>
 801bb9c:	eba0 0905 	sub.w	r9, r0, r5
 801bba0:	f109 0a01 	add.w	sl, r9, #1
 801bba4:	486d      	ldr	r0, [pc, #436]	@ (801bd5c <rcl_expand_topic_name+0x2a8>)
 801bba6:	4652      	mov	r2, sl
 801bba8:	4629      	mov	r1, r5
 801bbaa:	f001 f8a2 	bl	801ccf2 <strncmp>
 801bbae:	2800      	cmp	r0, #0
 801bbb0:	d067      	beq.n	801bc82 <rcl_expand_topic_name+0x1ce>
 801bbb2:	486b      	ldr	r0, [pc, #428]	@ (801bd60 <rcl_expand_topic_name+0x2ac>)
 801bbb4:	4652      	mov	r2, sl
 801bbb6:	4629      	mov	r1, r5
 801bbb8:	f001 f89b 	bl	801ccf2 <strncmp>
 801bbbc:	b130      	cbz	r0, 801bbcc <rcl_expand_topic_name+0x118>
 801bbbe:	4869      	ldr	r0, [pc, #420]	@ (801bd64 <rcl_expand_topic_name+0x2b0>)
 801bbc0:	4652      	mov	r2, sl
 801bbc2:	4629      	mov	r1, r5
 801bbc4:	f001 f895 	bl	801ccf2 <strncmp>
 801bbc8:	2800      	cmp	r0, #0
 801bbca:	d137      	bne.n	801bc3c <rcl_expand_topic_name+0x188>
 801bbcc:	46b9      	mov	r9, r7
 801bbce:	ab16      	add	r3, sp, #88	@ 0x58
 801bbd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801bbd4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bbd8:	ab14      	add	r3, sp, #80	@ 0x50
 801bbda:	4628      	mov	r0, r5
 801bbdc:	cb0c      	ldmia	r3, {r2, r3}
 801bbde:	4651      	mov	r1, sl
 801bbe0:	f7fc fcaa 	bl	8018538 <rcutils_strndup>
 801bbe4:	4605      	mov	r5, r0
 801bbe6:	2800      	cmp	r0, #0
 801bbe8:	f000 809c 	beq.w	801bd24 <rcl_expand_topic_name+0x270>
 801bbec:	464a      	mov	r2, r9
 801bbee:	4620      	mov	r0, r4
 801bbf0:	ab14      	add	r3, sp, #80	@ 0x50
 801bbf2:	4629      	mov	r1, r5
 801bbf4:	f7fc fb9e 	bl	8018334 <rcutils_repl_str>
 801bbf8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801bbfa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bbfc:	4604      	mov	r4, r0
 801bbfe:	4628      	mov	r0, r5
 801bc00:	4798      	blx	r3
 801bc02:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bc04:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801bc06:	4658      	mov	r0, fp
 801bc08:	4798      	blx	r3
 801bc0a:	2c00      	cmp	r4, #0
 801bc0c:	d07b      	beq.n	801bd06 <rcl_expand_topic_name+0x252>
 801bc0e:	217b      	movs	r1, #123	@ 0x7b
 801bc10:	4620      	mov	r0, r4
 801bc12:	f001 f861 	bl	801ccd8 <strchr>
 801bc16:	46a3      	mov	fp, r4
 801bc18:	4605      	mov	r5, r0
 801bc1a:	e7b8      	b.n	801bb8e <rcl_expand_topic_name+0xda>
 801bc1c:	240b      	movs	r4, #11
 801bc1e:	4620      	mov	r0, r4
 801bc20:	b00b      	add	sp, #44	@ 0x2c
 801bc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc26:	f7f9 ff0d 	bl	8015a44 <rcl_convert_rmw_ret_to_rcl_ret>
 801bc2a:	4604      	mov	r4, r0
 801bc2c:	e7f7      	b.n	801bc1e <rcl_expand_topic_name+0x16a>
 801bc2e:	2467      	movs	r4, #103	@ 0x67
 801bc30:	4620      	mov	r0, r4
 801bc32:	b00b      	add	sp, #44	@ 0x2c
 801bc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc38:	24c9      	movs	r4, #201	@ 0xc9
 801bc3a:	e7f0      	b.n	801bc1e <rcl_expand_topic_name+0x16a>
 801bc3c:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801bc40:	9806      	ldr	r0, [sp, #24]
 801bc42:	1c69      	adds	r1, r5, #1
 801bc44:	f7fc fd92 	bl	801876c <rcutils_string_map_getn>
 801bc48:	4681      	mov	r9, r0
 801bc4a:	2800      	cmp	r0, #0
 801bc4c:	d1bf      	bne.n	801bbce <rcl_expand_topic_name+0x11a>
 801bc4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bc50:	aa16      	add	r2, sp, #88	@ 0x58
 801bc52:	6018      	str	r0, [r3, #0]
 801bc54:	ca07      	ldmia	r2, {r0, r1, r2}
 801bc56:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bc5a:	ab14      	add	r3, sp, #80	@ 0x50
 801bc5c:	cb0c      	ldmia	r3, {r2, r3}
 801bc5e:	4651      	mov	r1, sl
 801bc60:	4628      	mov	r0, r5
 801bc62:	f7fc fc69 	bl	8018538 <rcutils_strndup>
 801bc66:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801bc68:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bc6a:	4798      	blx	r3
 801bc6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bc6e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801bc70:	4658      	mov	r0, fp
 801bc72:	2469      	movs	r4, #105	@ 0x69
 801bc74:	4798      	blx	r3
 801bc76:	e7d2      	b.n	801bc1e <rcl_expand_topic_name+0x16a>
 801bc78:	2800      	cmp	r0, #0
 801bc7a:	d05b      	beq.n	801bd34 <rcl_expand_topic_name+0x280>
 801bc7c:	46c1      	mov	r9, r8
 801bc7e:	46a2      	mov	sl, r4
 801bc80:	e782      	b.n	801bb88 <rcl_expand_topic_name+0xd4>
 801bc82:	46b1      	mov	r9, r6
 801bc84:	e7a3      	b.n	801bbce <rcl_expand_topic_name+0x11a>
 801bc86:	2800      	cmp	r0, #0
 801bc88:	d1f8      	bne.n	801bc7c <rcl_expand_topic_name+0x1c8>
 801bc8a:	4638      	mov	r0, r7
 801bc8c:	f7e4 faaa 	bl	80001e4 <strlen>
 801bc90:	4a35      	ldr	r2, [pc, #212]	@ (801bd68 <rcl_expand_topic_name+0x2b4>)
 801bc92:	4b36      	ldr	r3, [pc, #216]	@ (801bd6c <rcl_expand_topic_name+0x2b8>)
 801bc94:	f8cd 8010 	str.w	r8, [sp, #16]
 801bc98:	2801      	cmp	r0, #1
 801bc9a:	bf18      	it	ne
 801bc9c:	4613      	movne	r3, r2
 801bc9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801bca2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801bca6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801bca8:	9703      	str	r7, [sp, #12]
 801bcaa:	9200      	str	r2, [sp, #0]
 801bcac:	ab14      	add	r3, sp, #80	@ 0x50
 801bcae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bcb0:	f7fc fb06 	bl	80182c0 <rcutils_format_string_limit>
 801bcb4:	4682      	mov	sl, r0
 801bcb6:	4653      	mov	r3, sl
 801bcb8:	b32b      	cbz	r3, 801bd06 <rcl_expand_topic_name+0x252>
 801bcba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bcbc:	f8c3 a000 	str.w	sl, [r3]
 801bcc0:	e7ad      	b.n	801bc1e <rcl_expand_topic_name+0x16a>
 801bcc2:	f89a 3000 	ldrb.w	r3, [sl]
 801bcc6:	2b2f      	cmp	r3, #47	@ 0x2f
 801bcc8:	d0f7      	beq.n	801bcba <rcl_expand_topic_name+0x206>
 801bcca:	4638      	mov	r0, r7
 801bccc:	f7e4 fa8a 	bl	80001e4 <strlen>
 801bcd0:	4a25      	ldr	r2, [pc, #148]	@ (801bd68 <rcl_expand_topic_name+0x2b4>)
 801bcd2:	4b26      	ldr	r3, [pc, #152]	@ (801bd6c <rcl_expand_topic_name+0x2b8>)
 801bcd4:	f8cd a010 	str.w	sl, [sp, #16]
 801bcd8:	2801      	cmp	r0, #1
 801bcda:	bf18      	it	ne
 801bcdc:	4613      	movne	r3, r2
 801bcde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801bce2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801bce6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801bce8:	9703      	str	r7, [sp, #12]
 801bcea:	9200      	str	r2, [sp, #0]
 801bcec:	ab14      	add	r3, sp, #80	@ 0x50
 801bcee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bcf0:	f7fc fae6 	bl	80182c0 <rcutils_format_string_limit>
 801bcf4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bcf6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801bcf8:	4605      	mov	r5, r0
 801bcfa:	4650      	mov	r0, sl
 801bcfc:	4798      	blx	r3
 801bcfe:	46aa      	mov	sl, r5
 801bd00:	e7d9      	b.n	801bcb6 <rcl_expand_topic_name+0x202>
 801bd02:	24ca      	movs	r4, #202	@ 0xca
 801bd04:	e78b      	b.n	801bc1e <rcl_expand_topic_name+0x16a>
 801bd06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801bd08:	2300      	movs	r3, #0
 801bd0a:	6013      	str	r3, [r2, #0]
 801bd0c:	240a      	movs	r4, #10
 801bd0e:	e786      	b.n	801bc1e <rcl_expand_topic_name+0x16a>
 801bd10:	465b      	mov	r3, fp
 801bd12:	9c07      	ldr	r4, [sp, #28]
 801bd14:	46da      	mov	sl, fp
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d1d3      	bne.n	801bcc2 <rcl_expand_topic_name+0x20e>
 801bd1a:	f898 3000 	ldrb.w	r3, [r8]
 801bd1e:	2b2f      	cmp	r3, #47	@ 0x2f
 801bd20:	d0cb      	beq.n	801bcba <rcl_expand_topic_name+0x206>
 801bd22:	e7b2      	b.n	801bc8a <rcl_expand_topic_name+0x1d6>
 801bd24:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801bd28:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bd2a:	6015      	str	r5, [r2, #0]
 801bd2c:	4658      	mov	r0, fp
 801bd2e:	4798      	blx	r3
 801bd30:	240a      	movs	r4, #10
 801bd32:	e774      	b.n	801bc1e <rcl_expand_topic_name+0x16a>
 801bd34:	ab17      	add	r3, sp, #92	@ 0x5c
 801bd36:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bd3a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bd3e:	ab14      	add	r3, sp, #80	@ 0x50
 801bd40:	cb0e      	ldmia	r3, {r1, r2, r3}
 801bd42:	4640      	mov	r0, r8
 801bd44:	f7fc fbd6 	bl	80184f4 <rcutils_strdup>
 801bd48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801bd4a:	2800      	cmp	r0, #0
 801bd4c:	6018      	str	r0, [r3, #0]
 801bd4e:	bf08      	it	eq
 801bd50:	240a      	moveq	r4, #10
 801bd52:	e764      	b.n	801bc1e <rcl_expand_topic_name+0x16a>
 801bd54:	0801e808 	.word	0x0801e808
 801bd58:	0801de78 	.word	0x0801de78
 801bd5c:	0801e810 	.word	0x0801e810
 801bd60:	0801e818 	.word	0x0801e818
 801bd64:	0801e820 	.word	0x0801e820
 801bd68:	0801e128 	.word	0x0801e128
 801bd6c:	0801de88 	.word	0x0801de88

0801bd70 <rcl_get_default_topic_name_substitutions>:
 801bd70:	2800      	cmp	r0, #0
 801bd72:	bf0c      	ite	eq
 801bd74:	200b      	moveq	r0, #11
 801bd76:	2000      	movne	r0, #0
 801bd78:	4770      	bx	lr
 801bd7a:	bf00      	nop

0801bd7c <rcl_get_zero_initialized_guard_condition>:
 801bd7c:	4a03      	ldr	r2, [pc, #12]	@ (801bd8c <rcl_get_zero_initialized_guard_condition+0x10>)
 801bd7e:	4603      	mov	r3, r0
 801bd80:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bd84:	e883 0003 	stmia.w	r3, {r0, r1}
 801bd88:	4618      	mov	r0, r3
 801bd8a:	4770      	bx	lr
 801bd8c:	0801e82c 	.word	0x0801e82c

0801bd90 <rcl_guard_condition_init_from_rmw>:
 801bd90:	b082      	sub	sp, #8
 801bd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd96:	b086      	sub	sp, #24
 801bd98:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801bd9c:	4604      	mov	r4, r0
 801bd9e:	f84c 3f04 	str.w	r3, [ip, #4]!
 801bda2:	460e      	mov	r6, r1
 801bda4:	4617      	mov	r7, r2
 801bda6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bdaa:	f10d 0e04 	add.w	lr, sp, #4
 801bdae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bdb2:	f8dc 3000 	ldr.w	r3, [ip]
 801bdb6:	f8ce 3000 	str.w	r3, [lr]
 801bdba:	a801      	add	r0, sp, #4
 801bdbc:	f7f5 f870 	bl	8010ea0 <rcutils_allocator_is_valid>
 801bdc0:	b350      	cbz	r0, 801be18 <rcl_guard_condition_init_from_rmw+0x88>
 801bdc2:	b34c      	cbz	r4, 801be18 <rcl_guard_condition_init_from_rmw+0x88>
 801bdc4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801bdc8:	f1b8 0f00 	cmp.w	r8, #0
 801bdcc:	d11e      	bne.n	801be0c <rcl_guard_condition_init_from_rmw+0x7c>
 801bdce:	b31f      	cbz	r7, 801be18 <rcl_guard_condition_init_from_rmw+0x88>
 801bdd0:	4638      	mov	r0, r7
 801bdd2:	f7f9 fe55 	bl	8015a80 <rcl_context_is_valid>
 801bdd6:	b328      	cbz	r0, 801be24 <rcl_guard_condition_init_from_rmw+0x94>
 801bdd8:	9b01      	ldr	r3, [sp, #4]
 801bdda:	9905      	ldr	r1, [sp, #20]
 801bddc:	201c      	movs	r0, #28
 801bdde:	4798      	blx	r3
 801bde0:	4605      	mov	r5, r0
 801bde2:	6060      	str	r0, [r4, #4]
 801bde4:	b358      	cbz	r0, 801be3e <rcl_guard_condition_init_from_rmw+0xae>
 801bde6:	b1fe      	cbz	r6, 801be28 <rcl_guard_condition_init_from_rmw+0x98>
 801bde8:	6006      	str	r6, [r0, #0]
 801bdea:	f880 8004 	strb.w	r8, [r0, #4]
 801bdee:	ac01      	add	r4, sp, #4
 801bdf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bdf2:	f105 0c08 	add.w	ip, r5, #8
 801bdf6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bdfa:	6823      	ldr	r3, [r4, #0]
 801bdfc:	f8cc 3000 	str.w	r3, [ip]
 801be00:	2000      	movs	r0, #0
 801be02:	b006      	add	sp, #24
 801be04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be08:	b002      	add	sp, #8
 801be0a:	4770      	bx	lr
 801be0c:	2064      	movs	r0, #100	@ 0x64
 801be0e:	b006      	add	sp, #24
 801be10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be14:	b002      	add	sp, #8
 801be16:	4770      	bx	lr
 801be18:	200b      	movs	r0, #11
 801be1a:	b006      	add	sp, #24
 801be1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be20:	b002      	add	sp, #8
 801be22:	4770      	bx	lr
 801be24:	2065      	movs	r0, #101	@ 0x65
 801be26:	e7f2      	b.n	801be0e <rcl_guard_condition_init_from_rmw+0x7e>
 801be28:	6838      	ldr	r0, [r7, #0]
 801be2a:	3028      	adds	r0, #40	@ 0x28
 801be2c:	f000 fa3a 	bl	801c2a4 <rmw_create_guard_condition>
 801be30:	6028      	str	r0, [r5, #0]
 801be32:	6865      	ldr	r5, [r4, #4]
 801be34:	682e      	ldr	r6, [r5, #0]
 801be36:	b126      	cbz	r6, 801be42 <rcl_guard_condition_init_from_rmw+0xb2>
 801be38:	2301      	movs	r3, #1
 801be3a:	712b      	strb	r3, [r5, #4]
 801be3c:	e7d7      	b.n	801bdee <rcl_guard_condition_init_from_rmw+0x5e>
 801be3e:	200a      	movs	r0, #10
 801be40:	e7e5      	b.n	801be0e <rcl_guard_condition_init_from_rmw+0x7e>
 801be42:	4628      	mov	r0, r5
 801be44:	9b02      	ldr	r3, [sp, #8]
 801be46:	9905      	ldr	r1, [sp, #20]
 801be48:	4798      	blx	r3
 801be4a:	6066      	str	r6, [r4, #4]
 801be4c:	2001      	movs	r0, #1
 801be4e:	e7de      	b.n	801be0e <rcl_guard_condition_init_from_rmw+0x7e>

0801be50 <rcl_guard_condition_fini>:
 801be50:	b570      	push	{r4, r5, r6, lr}
 801be52:	b082      	sub	sp, #8
 801be54:	b1f0      	cbz	r0, 801be94 <rcl_guard_condition_fini+0x44>
 801be56:	6843      	ldr	r3, [r0, #4]
 801be58:	4604      	mov	r4, r0
 801be5a:	b163      	cbz	r3, 801be76 <rcl_guard_condition_fini+0x26>
 801be5c:	6818      	ldr	r0, [r3, #0]
 801be5e:	68de      	ldr	r6, [r3, #12]
 801be60:	6999      	ldr	r1, [r3, #24]
 801be62:	b160      	cbz	r0, 801be7e <rcl_guard_condition_fini+0x2e>
 801be64:	791d      	ldrb	r5, [r3, #4]
 801be66:	b965      	cbnz	r5, 801be82 <rcl_guard_condition_fini+0x32>
 801be68:	4618      	mov	r0, r3
 801be6a:	47b0      	blx	r6
 801be6c:	2300      	movs	r3, #0
 801be6e:	4628      	mov	r0, r5
 801be70:	6063      	str	r3, [r4, #4]
 801be72:	b002      	add	sp, #8
 801be74:	bd70      	pop	{r4, r5, r6, pc}
 801be76:	461d      	mov	r5, r3
 801be78:	4628      	mov	r0, r5
 801be7a:	b002      	add	sp, #8
 801be7c:	bd70      	pop	{r4, r5, r6, pc}
 801be7e:	4605      	mov	r5, r0
 801be80:	e7f2      	b.n	801be68 <rcl_guard_condition_fini+0x18>
 801be82:	9101      	str	r1, [sp, #4]
 801be84:	f000 fa22 	bl	801c2cc <rmw_destroy_guard_condition>
 801be88:	1e05      	subs	r5, r0, #0
 801be8a:	6863      	ldr	r3, [r4, #4]
 801be8c:	9901      	ldr	r1, [sp, #4]
 801be8e:	bf18      	it	ne
 801be90:	2501      	movne	r5, #1
 801be92:	e7e9      	b.n	801be68 <rcl_guard_condition_fini+0x18>
 801be94:	250b      	movs	r5, #11
 801be96:	4628      	mov	r0, r5
 801be98:	b002      	add	sp, #8
 801be9a:	bd70      	pop	{r4, r5, r6, pc}

0801be9c <rcl_guard_condition_get_default_options>:
 801be9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be9e:	b087      	sub	sp, #28
 801bea0:	4606      	mov	r6, r0
 801bea2:	4668      	mov	r0, sp
 801bea4:	f7f4 ffee 	bl	8010e84 <rcutils_get_default_allocator>
 801bea8:	4b09      	ldr	r3, [pc, #36]	@ (801bed0 <rcl_guard_condition_get_default_options+0x34>)
 801beaa:	46ee      	mov	lr, sp
 801beac:	469c      	mov	ip, r3
 801beae:	461d      	mov	r5, r3
 801beb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801beb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801beb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801beba:	4634      	mov	r4, r6
 801bebc:	f8de 7000 	ldr.w	r7, [lr]
 801bec0:	f8cc 7000 	str.w	r7, [ip]
 801bec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bec6:	4630      	mov	r0, r6
 801bec8:	6027      	str	r7, [r4, #0]
 801beca:	b007      	add	sp, #28
 801becc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bece:	bf00      	nop
 801bed0:	20012d6c 	.word	0x20012d6c

0801bed4 <rcl_guard_condition_get_rmw_handle>:
 801bed4:	b110      	cbz	r0, 801bedc <rcl_guard_condition_get_rmw_handle+0x8>
 801bed6:	6840      	ldr	r0, [r0, #4]
 801bed8:	b100      	cbz	r0, 801bedc <rcl_guard_condition_get_rmw_handle+0x8>
 801beda:	6800      	ldr	r0, [r0, #0]
 801bedc:	4770      	bx	lr
 801bede:	bf00      	nop

0801bee0 <rcl_validate_topic_name>:
 801bee0:	2800      	cmp	r0, #0
 801bee2:	d07a      	beq.n	801bfda <rcl_validate_topic_name+0xfa>
 801bee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bee8:	460e      	mov	r6, r1
 801beea:	2900      	cmp	r1, #0
 801beec:	d07c      	beq.n	801bfe8 <rcl_validate_topic_name+0x108>
 801beee:	4617      	mov	r7, r2
 801bef0:	4605      	mov	r5, r0
 801bef2:	f7e4 f977 	bl	80001e4 <strlen>
 801bef6:	b1b0      	cbz	r0, 801bf26 <rcl_validate_topic_name+0x46>
 801bef8:	f895 9000 	ldrb.w	r9, [r5]
 801befc:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801c080 <rcl_validate_topic_name+0x1a0>
 801bf00:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801bf04:	f013 0304 	ands.w	r3, r3, #4
 801bf08:	d169      	bne.n	801bfde <rcl_validate_topic_name+0xfe>
 801bf0a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801bf0e:	f815 2008 	ldrb.w	r2, [r5, r8]
 801bf12:	2a2f      	cmp	r2, #47	@ 0x2f
 801bf14:	d10e      	bne.n	801bf34 <rcl_validate_topic_name+0x54>
 801bf16:	2202      	movs	r2, #2
 801bf18:	6032      	str	r2, [r6, #0]
 801bf1a:	b36f      	cbz	r7, 801bf78 <rcl_validate_topic_name+0x98>
 801bf1c:	f8c7 8000 	str.w	r8, [r7]
 801bf20:	4618      	mov	r0, r3
 801bf22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf26:	2301      	movs	r3, #1
 801bf28:	6033      	str	r3, [r6, #0]
 801bf2a:	b32f      	cbz	r7, 801bf78 <rcl_validate_topic_name+0x98>
 801bf2c:	2000      	movs	r0, #0
 801bf2e:	6038      	str	r0, [r7, #0]
 801bf30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf34:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801bf38:	461c      	mov	r4, r3
 801bf3a:	4619      	mov	r1, r3
 801bf3c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801bf40:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801bf44:	f1be 0f09 	cmp.w	lr, #9
 801bf48:	d919      	bls.n	801bf7e <rcl_validate_topic_name+0x9e>
 801bf4a:	f022 0e20 	bic.w	lr, r2, #32
 801bf4e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801bf52:	f1be 0f19 	cmp.w	lr, #25
 801bf56:	d912      	bls.n	801bf7e <rcl_validate_topic_name+0x9e>
 801bf58:	2a5f      	cmp	r2, #95	@ 0x5f
 801bf5a:	d019      	beq.n	801bf90 <rcl_validate_topic_name+0xb0>
 801bf5c:	2a2f      	cmp	r2, #47	@ 0x2f
 801bf5e:	d051      	beq.n	801c004 <rcl_validate_topic_name+0x124>
 801bf60:	2a7e      	cmp	r2, #126	@ 0x7e
 801bf62:	d048      	beq.n	801bff6 <rcl_validate_topic_name+0x116>
 801bf64:	2a7b      	cmp	r2, #123	@ 0x7b
 801bf66:	d054      	beq.n	801c012 <rcl_validate_topic_name+0x132>
 801bf68:	2a7d      	cmp	r2, #125	@ 0x7d
 801bf6a:	d161      	bne.n	801c030 <rcl_validate_topic_name+0x150>
 801bf6c:	2c00      	cmp	r4, #0
 801bf6e:	d155      	bne.n	801c01c <rcl_validate_topic_name+0x13c>
 801bf70:	2305      	movs	r3, #5
 801bf72:	6033      	str	r3, [r6, #0]
 801bf74:	b107      	cbz	r7, 801bf78 <rcl_validate_topic_name+0x98>
 801bf76:	6039      	str	r1, [r7, #0]
 801bf78:	2000      	movs	r0, #0
 801bf7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf7e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bf82:	0752      	lsls	r2, r2, #29
 801bf84:	d504      	bpl.n	801bf90 <rcl_validate_topic_name+0xb0>
 801bf86:	b11c      	cbz	r4, 801bf90 <rcl_validate_topic_name+0xb0>
 801bf88:	b111      	cbz	r1, 801bf90 <rcl_validate_topic_name+0xb0>
 801bf8a:	1e4a      	subs	r2, r1, #1
 801bf8c:	429a      	cmp	r2, r3
 801bf8e:	d02d      	beq.n	801bfec <rcl_validate_topic_name+0x10c>
 801bf90:	3101      	adds	r1, #1
 801bf92:	4288      	cmp	r0, r1
 801bf94:	d1d2      	bne.n	801bf3c <rcl_validate_topic_name+0x5c>
 801bf96:	2c00      	cmp	r4, #0
 801bf98:	d145      	bne.n	801c026 <rcl_validate_topic_name+0x146>
 801bf9a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801bf9e:	d04f      	beq.n	801c040 <rcl_validate_topic_name+0x160>
 801bfa0:	4620      	mov	r0, r4
 801bfa2:	2301      	movs	r3, #1
 801bfa4:	e006      	b.n	801bfb4 <rcl_validate_topic_name+0xd4>
 801bfa6:	428b      	cmp	r3, r1
 801bfa8:	f105 0501 	add.w	r5, r5, #1
 801bfac:	f103 0201 	add.w	r2, r3, #1
 801bfb0:	d236      	bcs.n	801c020 <rcl_validate_topic_name+0x140>
 801bfb2:	4613      	mov	r3, r2
 801bfb4:	4580      	cmp	r8, r0
 801bfb6:	f100 0001 	add.w	r0, r0, #1
 801bfba:	d0f4      	beq.n	801bfa6 <rcl_validate_topic_name+0xc6>
 801bfbc:	782a      	ldrb	r2, [r5, #0]
 801bfbe:	2a2f      	cmp	r2, #47	@ 0x2f
 801bfc0:	d1f1      	bne.n	801bfa6 <rcl_validate_topic_name+0xc6>
 801bfc2:	786a      	ldrb	r2, [r5, #1]
 801bfc4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bfc8:	0754      	lsls	r4, r2, #29
 801bfca:	d5ec      	bpl.n	801bfa6 <rcl_validate_topic_name+0xc6>
 801bfcc:	2204      	movs	r2, #4
 801bfce:	6032      	str	r2, [r6, #0]
 801bfd0:	2f00      	cmp	r7, #0
 801bfd2:	d0d1      	beq.n	801bf78 <rcl_validate_topic_name+0x98>
 801bfd4:	603b      	str	r3, [r7, #0]
 801bfd6:	2000      	movs	r0, #0
 801bfd8:	e7aa      	b.n	801bf30 <rcl_validate_topic_name+0x50>
 801bfda:	200b      	movs	r0, #11
 801bfdc:	4770      	bx	lr
 801bfde:	2304      	movs	r3, #4
 801bfe0:	6033      	str	r3, [r6, #0]
 801bfe2:	2f00      	cmp	r7, #0
 801bfe4:	d1a2      	bne.n	801bf2c <rcl_validate_topic_name+0x4c>
 801bfe6:	e7c7      	b.n	801bf78 <rcl_validate_topic_name+0x98>
 801bfe8:	200b      	movs	r0, #11
 801bfea:	e7a1      	b.n	801bf30 <rcl_validate_topic_name+0x50>
 801bfec:	2309      	movs	r3, #9
 801bfee:	6033      	str	r3, [r6, #0]
 801bff0:	2f00      	cmp	r7, #0
 801bff2:	d1c0      	bne.n	801bf76 <rcl_validate_topic_name+0x96>
 801bff4:	e7c0      	b.n	801bf78 <rcl_validate_topic_name+0x98>
 801bff6:	2900      	cmp	r1, #0
 801bff8:	d0ca      	beq.n	801bf90 <rcl_validate_topic_name+0xb0>
 801bffa:	2306      	movs	r3, #6
 801bffc:	6033      	str	r3, [r6, #0]
 801bffe:	2f00      	cmp	r7, #0
 801c000:	d1b9      	bne.n	801bf76 <rcl_validate_topic_name+0x96>
 801c002:	e7b9      	b.n	801bf78 <rcl_validate_topic_name+0x98>
 801c004:	2c00      	cmp	r4, #0
 801c006:	d0c3      	beq.n	801bf90 <rcl_validate_topic_name+0xb0>
 801c008:	2308      	movs	r3, #8
 801c00a:	6033      	str	r3, [r6, #0]
 801c00c:	2f00      	cmp	r7, #0
 801c00e:	d1b2      	bne.n	801bf76 <rcl_validate_topic_name+0x96>
 801c010:	e7b2      	b.n	801bf78 <rcl_validate_topic_name+0x98>
 801c012:	2c00      	cmp	r4, #0
 801c014:	d1f8      	bne.n	801c008 <rcl_validate_topic_name+0x128>
 801c016:	460b      	mov	r3, r1
 801c018:	2401      	movs	r4, #1
 801c01a:	e7b9      	b.n	801bf90 <rcl_validate_topic_name+0xb0>
 801c01c:	2400      	movs	r4, #0
 801c01e:	e7b7      	b.n	801bf90 <rcl_validate_topic_name+0xb0>
 801c020:	2000      	movs	r0, #0
 801c022:	6030      	str	r0, [r6, #0]
 801c024:	e784      	b.n	801bf30 <rcl_validate_topic_name+0x50>
 801c026:	2205      	movs	r2, #5
 801c028:	6032      	str	r2, [r6, #0]
 801c02a:	2f00      	cmp	r7, #0
 801c02c:	d1d2      	bne.n	801bfd4 <rcl_validate_topic_name+0xf4>
 801c02e:	e7a3      	b.n	801bf78 <rcl_validate_topic_name+0x98>
 801c030:	2c00      	cmp	r4, #0
 801c032:	bf14      	ite	ne
 801c034:	2308      	movne	r3, #8
 801c036:	2303      	moveq	r3, #3
 801c038:	6033      	str	r3, [r6, #0]
 801c03a:	2f00      	cmp	r7, #0
 801c03c:	d19b      	bne.n	801bf76 <rcl_validate_topic_name+0x96>
 801c03e:	e79b      	b.n	801bf78 <rcl_validate_topic_name+0x98>
 801c040:	2301      	movs	r3, #1
 801c042:	e00a      	b.n	801c05a <rcl_validate_topic_name+0x17a>
 801c044:	2c01      	cmp	r4, #1
 801c046:	d013      	beq.n	801c070 <rcl_validate_topic_name+0x190>
 801c048:	4299      	cmp	r1, r3
 801c04a:	f104 0401 	add.w	r4, r4, #1
 801c04e:	f105 0501 	add.w	r5, r5, #1
 801c052:	f103 0201 	add.w	r2, r3, #1
 801c056:	d9e3      	bls.n	801c020 <rcl_validate_topic_name+0x140>
 801c058:	4613      	mov	r3, r2
 801c05a:	45a0      	cmp	r8, r4
 801c05c:	d0f4      	beq.n	801c048 <rcl_validate_topic_name+0x168>
 801c05e:	782a      	ldrb	r2, [r5, #0]
 801c060:	2a2f      	cmp	r2, #47	@ 0x2f
 801c062:	d1ef      	bne.n	801c044 <rcl_validate_topic_name+0x164>
 801c064:	786a      	ldrb	r2, [r5, #1]
 801c066:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c06a:	0752      	lsls	r2, r2, #29
 801c06c:	d5ec      	bpl.n	801c048 <rcl_validate_topic_name+0x168>
 801c06e:	e7ad      	b.n	801bfcc <rcl_validate_topic_name+0xec>
 801c070:	2307      	movs	r3, #7
 801c072:	6033      	str	r3, [r6, #0]
 801c074:	2f00      	cmp	r7, #0
 801c076:	f43f af7f 	beq.w	801bf78 <rcl_validate_topic_name+0x98>
 801c07a:	603c      	str	r4, [r7, #0]
 801c07c:	2000      	movs	r0, #0
 801c07e:	e757      	b.n	801bf30 <rcl_validate_topic_name+0x50>
 801c080:	0801e8a4 	.word	0x0801e8a4

0801c084 <rcutils_string_array_fini>:
 801c084:	b320      	cbz	r0, 801c0d0 <rcutils_string_array_fini+0x4c>
 801c086:	b570      	push	{r4, r5, r6, lr}
 801c088:	4604      	mov	r4, r0
 801c08a:	6840      	ldr	r0, [r0, #4]
 801c08c:	b1d8      	cbz	r0, 801c0c6 <rcutils_string_array_fini+0x42>
 801c08e:	f104 0008 	add.w	r0, r4, #8
 801c092:	f7f4 ff05 	bl	8010ea0 <rcutils_allocator_is_valid>
 801c096:	b1b8      	cbz	r0, 801c0c8 <rcutils_string_array_fini+0x44>
 801c098:	6823      	ldr	r3, [r4, #0]
 801c09a:	b1bb      	cbz	r3, 801c0cc <rcutils_string_array_fini+0x48>
 801c09c:	2500      	movs	r5, #0
 801c09e:	6860      	ldr	r0, [r4, #4]
 801c0a0:	462e      	mov	r6, r5
 801c0a2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801c0a6:	68e3      	ldr	r3, [r4, #12]
 801c0a8:	69a1      	ldr	r1, [r4, #24]
 801c0aa:	4798      	blx	r3
 801c0ac:	e9d4 3000 	ldrd	r3, r0, [r4]
 801c0b0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801c0b4:	3501      	adds	r5, #1
 801c0b6:	429d      	cmp	r5, r3
 801c0b8:	d3f3      	bcc.n	801c0a2 <rcutils_string_array_fini+0x1e>
 801c0ba:	68e3      	ldr	r3, [r4, #12]
 801c0bc:	69a1      	ldr	r1, [r4, #24]
 801c0be:	4798      	blx	r3
 801c0c0:	2000      	movs	r0, #0
 801c0c2:	e9c4 0000 	strd	r0, r0, [r4]
 801c0c6:	bd70      	pop	{r4, r5, r6, pc}
 801c0c8:	200b      	movs	r0, #11
 801c0ca:	bd70      	pop	{r4, r5, r6, pc}
 801c0cc:	6860      	ldr	r0, [r4, #4]
 801c0ce:	e7f4      	b.n	801c0ba <rcutils_string_array_fini+0x36>
 801c0d0:	200b      	movs	r0, #11
 801c0d2:	4770      	bx	lr

0801c0d4 <on_status>:
 801c0d4:	b082      	sub	sp, #8
 801c0d6:	b002      	add	sp, #8
 801c0d8:	4770      	bx	lr
 801c0da:	bf00      	nop

0801c0dc <on_topic>:
 801c0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0e0:	4a22      	ldr	r2, [pc, #136]	@ (801c16c <on_topic+0x90>)
 801c0e2:	b094      	sub	sp, #80	@ 0x50
 801c0e4:	6812      	ldr	r2, [r2, #0]
 801c0e6:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801c0e8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801c0ec:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801c0f0:	b3c2      	cbz	r2, 801c164 <on_topic+0x88>
 801c0f2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801c0f6:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801c0fa:	e001      	b.n	801c100 <on_topic+0x24>
 801c0fc:	6852      	ldr	r2, [r2, #4]
 801c0fe:	b38a      	cbz	r2, 801c164 <on_topic+0x88>
 801c100:	6894      	ldr	r4, [r2, #8]
 801c102:	8aa3      	ldrh	r3, [r4, #20]
 801c104:	428b      	cmp	r3, r1
 801c106:	d1f9      	bne.n	801c0fc <on_topic+0x20>
 801c108:	7da3      	ldrb	r3, [r4, #22]
 801c10a:	4283      	cmp	r3, r0
 801c10c:	d1f6      	bne.n	801c0fc <on_topic+0x20>
 801c10e:	2248      	movs	r2, #72	@ 0x48
 801c110:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801c114:	4668      	mov	r0, sp
 801c116:	f000 fea0 	bl	801ce5a <memcpy>
 801c11a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801c11e:	cb0c      	ldmia	r3, {r2, r3}
 801c120:	4620      	mov	r0, r4
 801c122:	f7f5 faed 	bl	8011700 <rmw_uxrce_get_static_input_buffer_for_entity>
 801c126:	4607      	mov	r7, r0
 801c128:	b1e0      	cbz	r0, 801c164 <on_topic+0x88>
 801c12a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801c12e:	4632      	mov	r2, r6
 801c130:	4628      	mov	r0, r5
 801c132:	f108 0110 	add.w	r1, r8, #16
 801c136:	f7fd ffc9 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 801c13a:	b930      	cbnz	r0, 801c14a <on_topic+0x6e>
 801c13c:	480c      	ldr	r0, [pc, #48]	@ (801c170 <on_topic+0x94>)
 801c13e:	4639      	mov	r1, r7
 801c140:	b014      	add	sp, #80	@ 0x50
 801c142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c146:	f7fc bd5f 	b.w	8018c08 <put_memory>
 801c14a:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801c14e:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801c152:	f7fd feb1 	bl	8019eb8 <rmw_uros_epoch_nanos>
 801c156:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801c15a:	2305      	movs	r3, #5
 801c15c:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c160:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801c164:	b014      	add	sp, #80	@ 0x50
 801c166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c16a:	bf00      	nop
 801c16c:	20012bcc 	.word	0x20012bcc
 801c170:	20012bbc 	.word	0x20012bbc

0801c174 <on_request>:
 801c174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c178:	4823      	ldr	r0, [pc, #140]	@ (801c208 <on_request+0x94>)
 801c17a:	b094      	sub	sp, #80	@ 0x50
 801c17c:	6800      	ldr	r0, [r0, #0]
 801c17e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801c180:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801c184:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c186:	2800      	cmp	r0, #0
 801c188:	d03b      	beq.n	801c202 <on_request+0x8e>
 801c18a:	461d      	mov	r5, r3
 801c18c:	e001      	b.n	801c192 <on_request+0x1e>
 801c18e:	6840      	ldr	r0, [r0, #4]
 801c190:	b3b8      	cbz	r0, 801c202 <on_request+0x8e>
 801c192:	6884      	ldr	r4, [r0, #8]
 801c194:	8b21      	ldrh	r1, [r4, #24]
 801c196:	4291      	cmp	r1, r2
 801c198:	d1f9      	bne.n	801c18e <on_request+0x1a>
 801c19a:	2248      	movs	r2, #72	@ 0x48
 801c19c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801c1a0:	4668      	mov	r0, sp
 801c1a2:	f000 fe5a 	bl	801ce5a <memcpy>
 801c1a6:	f104 0320 	add.w	r3, r4, #32
 801c1aa:	cb0c      	ldmia	r3, {r2, r3}
 801c1ac:	4620      	mov	r0, r4
 801c1ae:	f7f5 faa7 	bl	8011700 <rmw_uxrce_get_static_input_buffer_for_entity>
 801c1b2:	4680      	mov	r8, r0
 801c1b4:	b328      	cbz	r0, 801c202 <on_request+0x8e>
 801c1b6:	4638      	mov	r0, r7
 801c1b8:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801c1bc:	4632      	mov	r2, r6
 801c1be:	f107 0110 	add.w	r1, r7, #16
 801c1c2:	f7fd ff83 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 801c1c6:	b930      	cbnz	r0, 801c1d6 <on_request+0x62>
 801c1c8:	4810      	ldr	r0, [pc, #64]	@ (801c20c <on_request+0x98>)
 801c1ca:	4641      	mov	r1, r8
 801c1cc:	b014      	add	sp, #80	@ 0x50
 801c1ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c1d2:	f7fc bd19 	b.w	8018c08 <put_memory>
 801c1d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c1d8:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801c1dc:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801c1e0:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801c1e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c1e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c1ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c1f0:	f7fd fe62 	bl	8019eb8 <rmw_uros_epoch_nanos>
 801c1f4:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801c1f8:	2303      	movs	r3, #3
 801c1fa:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c1fe:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801c202:	b014      	add	sp, #80	@ 0x50
 801c204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c208:	20012b9c 	.word	0x20012b9c
 801c20c:	20012bbc 	.word	0x20012bbc

0801c210 <on_reply>:
 801c210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c214:	4821      	ldr	r0, [pc, #132]	@ (801c29c <on_reply+0x8c>)
 801c216:	b094      	sub	sp, #80	@ 0x50
 801c218:	6800      	ldr	r0, [r0, #0]
 801c21a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801c21c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801c220:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c222:	b3b8      	cbz	r0, 801c294 <on_reply+0x84>
 801c224:	461d      	mov	r5, r3
 801c226:	e001      	b.n	801c22c <on_reply+0x1c>
 801c228:	6840      	ldr	r0, [r0, #4]
 801c22a:	b398      	cbz	r0, 801c294 <on_reply+0x84>
 801c22c:	6884      	ldr	r4, [r0, #8]
 801c22e:	8b21      	ldrh	r1, [r4, #24]
 801c230:	4291      	cmp	r1, r2
 801c232:	d1f9      	bne.n	801c228 <on_reply+0x18>
 801c234:	2248      	movs	r2, #72	@ 0x48
 801c236:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801c23a:	4668      	mov	r0, sp
 801c23c:	f000 fe0d 	bl	801ce5a <memcpy>
 801c240:	f104 0320 	add.w	r3, r4, #32
 801c244:	cb0c      	ldmia	r3, {r2, r3}
 801c246:	4620      	mov	r0, r4
 801c248:	f7f5 fa5a 	bl	8011700 <rmw_uxrce_get_static_input_buffer_for_entity>
 801c24c:	4680      	mov	r8, r0
 801c24e:	b308      	cbz	r0, 801c294 <on_reply+0x84>
 801c250:	4638      	mov	r0, r7
 801c252:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801c256:	4632      	mov	r2, r6
 801c258:	f107 0110 	add.w	r1, r7, #16
 801c25c:	f7fd ff36 	bl	801a0cc <ucdr_deserialize_array_uint8_t>
 801c260:	b930      	cbnz	r0, 801c270 <on_reply+0x60>
 801c262:	480f      	ldr	r0, [pc, #60]	@ (801c2a0 <on_reply+0x90>)
 801c264:	4641      	mov	r1, r8
 801c266:	b014      	add	sp, #80	@ 0x50
 801c268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c26c:	f7fc bccc 	b.w	8018c08 <put_memory>
 801c270:	2200      	movs	r2, #0
 801c272:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801c276:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801c27a:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801c27e:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801c282:	f7fd fe19 	bl	8019eb8 <rmw_uros_epoch_nanos>
 801c286:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801c28a:	2304      	movs	r3, #4
 801c28c:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c290:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801c294:	b014      	add	sp, #80	@ 0x50
 801c296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c29a:	bf00      	nop
 801c29c:	2000e2b0 	.word	0x2000e2b0
 801c2a0:	20012bbc 	.word	0x20012bbc

0801c2a4 <rmw_create_guard_condition>:
 801c2a4:	b538      	push	{r3, r4, r5, lr}
 801c2a6:	4605      	mov	r5, r0
 801c2a8:	4807      	ldr	r0, [pc, #28]	@ (801c2c8 <rmw_create_guard_condition+0x24>)
 801c2aa:	f7fc fc9d 	bl	8018be8 <get_memory>
 801c2ae:	b148      	cbz	r0, 801c2c4 <rmw_create_guard_condition+0x20>
 801c2b0:	6884      	ldr	r4, [r0, #8]
 801c2b2:	2300      	movs	r3, #0
 801c2b4:	7423      	strb	r3, [r4, #16]
 801c2b6:	61e5      	str	r5, [r4, #28]
 801c2b8:	f7fc fcfe 	bl	8018cb8 <rmw_get_implementation_identifier>
 801c2bc:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801c2c0:	f104 0014 	add.w	r0, r4, #20
 801c2c4:	bd38      	pop	{r3, r4, r5, pc}
 801c2c6:	bf00      	nop
 801c2c8:	20012b5c 	.word	0x20012b5c

0801c2cc <rmw_destroy_guard_condition>:
 801c2cc:	b508      	push	{r3, lr}
 801c2ce:	4b08      	ldr	r3, [pc, #32]	@ (801c2f0 <rmw_destroy_guard_condition+0x24>)
 801c2d0:	6819      	ldr	r1, [r3, #0]
 801c2d2:	b911      	cbnz	r1, 801c2da <rmw_destroy_guard_condition+0xe>
 801c2d4:	e00a      	b.n	801c2ec <rmw_destroy_guard_condition+0x20>
 801c2d6:	6849      	ldr	r1, [r1, #4]
 801c2d8:	b141      	cbz	r1, 801c2ec <rmw_destroy_guard_condition+0x20>
 801c2da:	688b      	ldr	r3, [r1, #8]
 801c2dc:	3314      	adds	r3, #20
 801c2de:	4298      	cmp	r0, r3
 801c2e0:	d1f9      	bne.n	801c2d6 <rmw_destroy_guard_condition+0xa>
 801c2e2:	4803      	ldr	r0, [pc, #12]	@ (801c2f0 <rmw_destroy_guard_condition+0x24>)
 801c2e4:	f7fc fc90 	bl	8018c08 <put_memory>
 801c2e8:	2000      	movs	r0, #0
 801c2ea:	bd08      	pop	{r3, pc}
 801c2ec:	2001      	movs	r0, #1
 801c2ee:	bd08      	pop	{r3, pc}
 801c2f0:	20012b5c 	.word	0x20012b5c

0801c2f4 <calloc>:
 801c2f4:	4b02      	ldr	r3, [pc, #8]	@ (801c300 <calloc+0xc>)
 801c2f6:	460a      	mov	r2, r1
 801c2f8:	4601      	mov	r1, r0
 801c2fa:	6818      	ldr	r0, [r3, #0]
 801c2fc:	f000 b802 	b.w	801c304 <_calloc_r>
 801c300:	20000168 	.word	0x20000168

0801c304 <_calloc_r>:
 801c304:	b570      	push	{r4, r5, r6, lr}
 801c306:	fba1 5402 	umull	r5, r4, r1, r2
 801c30a:	b93c      	cbnz	r4, 801c31c <_calloc_r+0x18>
 801c30c:	4629      	mov	r1, r5
 801c30e:	f000 f887 	bl	801c420 <_malloc_r>
 801c312:	4606      	mov	r6, r0
 801c314:	b928      	cbnz	r0, 801c322 <_calloc_r+0x1e>
 801c316:	2600      	movs	r6, #0
 801c318:	4630      	mov	r0, r6
 801c31a:	bd70      	pop	{r4, r5, r6, pc}
 801c31c:	220c      	movs	r2, #12
 801c31e:	6002      	str	r2, [r0, #0]
 801c320:	e7f9      	b.n	801c316 <_calloc_r+0x12>
 801c322:	462a      	mov	r2, r5
 801c324:	4621      	mov	r1, r4
 801c326:	f000 fccf 	bl	801ccc8 <memset>
 801c32a:	e7f5      	b.n	801c318 <_calloc_r+0x14>

0801c32c <getenv>:
 801c32c:	b507      	push	{r0, r1, r2, lr}
 801c32e:	4b04      	ldr	r3, [pc, #16]	@ (801c340 <getenv+0x14>)
 801c330:	4601      	mov	r1, r0
 801c332:	aa01      	add	r2, sp, #4
 801c334:	6818      	ldr	r0, [r3, #0]
 801c336:	f000 f805 	bl	801c344 <_findenv_r>
 801c33a:	b003      	add	sp, #12
 801c33c:	f85d fb04 	ldr.w	pc, [sp], #4
 801c340:	20000168 	.word	0x20000168

0801c344 <_findenv_r>:
 801c344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c348:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801c3b8 <_findenv_r+0x74>
 801c34c:	4606      	mov	r6, r0
 801c34e:	4689      	mov	r9, r1
 801c350:	4617      	mov	r7, r2
 801c352:	f000 fdaf 	bl	801ceb4 <__env_lock>
 801c356:	f8da 4000 	ldr.w	r4, [sl]
 801c35a:	b134      	cbz	r4, 801c36a <_findenv_r+0x26>
 801c35c:	464b      	mov	r3, r9
 801c35e:	4698      	mov	r8, r3
 801c360:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c364:	b13a      	cbz	r2, 801c376 <_findenv_r+0x32>
 801c366:	2a3d      	cmp	r2, #61	@ 0x3d
 801c368:	d1f9      	bne.n	801c35e <_findenv_r+0x1a>
 801c36a:	4630      	mov	r0, r6
 801c36c:	f000 fda8 	bl	801cec0 <__env_unlock>
 801c370:	2000      	movs	r0, #0
 801c372:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c376:	eba8 0809 	sub.w	r8, r8, r9
 801c37a:	46a3      	mov	fp, r4
 801c37c:	f854 0b04 	ldr.w	r0, [r4], #4
 801c380:	2800      	cmp	r0, #0
 801c382:	d0f2      	beq.n	801c36a <_findenv_r+0x26>
 801c384:	4642      	mov	r2, r8
 801c386:	4649      	mov	r1, r9
 801c388:	f000 fcb3 	bl	801ccf2 <strncmp>
 801c38c:	2800      	cmp	r0, #0
 801c38e:	d1f4      	bne.n	801c37a <_findenv_r+0x36>
 801c390:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c394:	eb03 0508 	add.w	r5, r3, r8
 801c398:	f813 3008 	ldrb.w	r3, [r3, r8]
 801c39c:	2b3d      	cmp	r3, #61	@ 0x3d
 801c39e:	d1ec      	bne.n	801c37a <_findenv_r+0x36>
 801c3a0:	f8da 3000 	ldr.w	r3, [sl]
 801c3a4:	ebab 0303 	sub.w	r3, fp, r3
 801c3a8:	109b      	asrs	r3, r3, #2
 801c3aa:	4630      	mov	r0, r6
 801c3ac:	603b      	str	r3, [r7, #0]
 801c3ae:	f000 fd87 	bl	801cec0 <__env_unlock>
 801c3b2:	1c68      	adds	r0, r5, #1
 801c3b4:	e7dd      	b.n	801c372 <_findenv_r+0x2e>
 801c3b6:	bf00      	nop
 801c3b8:	20000004 	.word	0x20000004

0801c3bc <malloc>:
 801c3bc:	4b02      	ldr	r3, [pc, #8]	@ (801c3c8 <malloc+0xc>)
 801c3be:	4601      	mov	r1, r0
 801c3c0:	6818      	ldr	r0, [r3, #0]
 801c3c2:	f000 b82d 	b.w	801c420 <_malloc_r>
 801c3c6:	bf00      	nop
 801c3c8:	20000168 	.word	0x20000168

0801c3cc <free>:
 801c3cc:	4b02      	ldr	r3, [pc, #8]	@ (801c3d8 <free+0xc>)
 801c3ce:	4601      	mov	r1, r0
 801c3d0:	6818      	ldr	r0, [r3, #0]
 801c3d2:	f000 bd7b 	b.w	801cecc <_free_r>
 801c3d6:	bf00      	nop
 801c3d8:	20000168 	.word	0x20000168

0801c3dc <sbrk_aligned>:
 801c3dc:	b570      	push	{r4, r5, r6, lr}
 801c3de:	4e0f      	ldr	r6, [pc, #60]	@ (801c41c <sbrk_aligned+0x40>)
 801c3e0:	460c      	mov	r4, r1
 801c3e2:	6831      	ldr	r1, [r6, #0]
 801c3e4:	4605      	mov	r5, r0
 801c3e6:	b911      	cbnz	r1, 801c3ee <sbrk_aligned+0x12>
 801c3e8:	f000 fce0 	bl	801cdac <_sbrk_r>
 801c3ec:	6030      	str	r0, [r6, #0]
 801c3ee:	4621      	mov	r1, r4
 801c3f0:	4628      	mov	r0, r5
 801c3f2:	f000 fcdb 	bl	801cdac <_sbrk_r>
 801c3f6:	1c43      	adds	r3, r0, #1
 801c3f8:	d103      	bne.n	801c402 <sbrk_aligned+0x26>
 801c3fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801c3fe:	4620      	mov	r0, r4
 801c400:	bd70      	pop	{r4, r5, r6, pc}
 801c402:	1cc4      	adds	r4, r0, #3
 801c404:	f024 0403 	bic.w	r4, r4, #3
 801c408:	42a0      	cmp	r0, r4
 801c40a:	d0f8      	beq.n	801c3fe <sbrk_aligned+0x22>
 801c40c:	1a21      	subs	r1, r4, r0
 801c40e:	4628      	mov	r0, r5
 801c410:	f000 fccc 	bl	801cdac <_sbrk_r>
 801c414:	3001      	adds	r0, #1
 801c416:	d1f2      	bne.n	801c3fe <sbrk_aligned+0x22>
 801c418:	e7ef      	b.n	801c3fa <sbrk_aligned+0x1e>
 801c41a:	bf00      	nop
 801c41c:	20012d80 	.word	0x20012d80

0801c420 <_malloc_r>:
 801c420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c424:	1ccd      	adds	r5, r1, #3
 801c426:	f025 0503 	bic.w	r5, r5, #3
 801c42a:	3508      	adds	r5, #8
 801c42c:	2d0c      	cmp	r5, #12
 801c42e:	bf38      	it	cc
 801c430:	250c      	movcc	r5, #12
 801c432:	2d00      	cmp	r5, #0
 801c434:	4606      	mov	r6, r0
 801c436:	db01      	blt.n	801c43c <_malloc_r+0x1c>
 801c438:	42a9      	cmp	r1, r5
 801c43a:	d904      	bls.n	801c446 <_malloc_r+0x26>
 801c43c:	230c      	movs	r3, #12
 801c43e:	6033      	str	r3, [r6, #0]
 801c440:	2000      	movs	r0, #0
 801c442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c51c <_malloc_r+0xfc>
 801c44a:	f000 f869 	bl	801c520 <__malloc_lock>
 801c44e:	f8d8 3000 	ldr.w	r3, [r8]
 801c452:	461c      	mov	r4, r3
 801c454:	bb44      	cbnz	r4, 801c4a8 <_malloc_r+0x88>
 801c456:	4629      	mov	r1, r5
 801c458:	4630      	mov	r0, r6
 801c45a:	f7ff ffbf 	bl	801c3dc <sbrk_aligned>
 801c45e:	1c43      	adds	r3, r0, #1
 801c460:	4604      	mov	r4, r0
 801c462:	d158      	bne.n	801c516 <_malloc_r+0xf6>
 801c464:	f8d8 4000 	ldr.w	r4, [r8]
 801c468:	4627      	mov	r7, r4
 801c46a:	2f00      	cmp	r7, #0
 801c46c:	d143      	bne.n	801c4f6 <_malloc_r+0xd6>
 801c46e:	2c00      	cmp	r4, #0
 801c470:	d04b      	beq.n	801c50a <_malloc_r+0xea>
 801c472:	6823      	ldr	r3, [r4, #0]
 801c474:	4639      	mov	r1, r7
 801c476:	4630      	mov	r0, r6
 801c478:	eb04 0903 	add.w	r9, r4, r3
 801c47c:	f000 fc96 	bl	801cdac <_sbrk_r>
 801c480:	4581      	cmp	r9, r0
 801c482:	d142      	bne.n	801c50a <_malloc_r+0xea>
 801c484:	6821      	ldr	r1, [r4, #0]
 801c486:	1a6d      	subs	r5, r5, r1
 801c488:	4629      	mov	r1, r5
 801c48a:	4630      	mov	r0, r6
 801c48c:	f7ff ffa6 	bl	801c3dc <sbrk_aligned>
 801c490:	3001      	adds	r0, #1
 801c492:	d03a      	beq.n	801c50a <_malloc_r+0xea>
 801c494:	6823      	ldr	r3, [r4, #0]
 801c496:	442b      	add	r3, r5
 801c498:	6023      	str	r3, [r4, #0]
 801c49a:	f8d8 3000 	ldr.w	r3, [r8]
 801c49e:	685a      	ldr	r2, [r3, #4]
 801c4a0:	bb62      	cbnz	r2, 801c4fc <_malloc_r+0xdc>
 801c4a2:	f8c8 7000 	str.w	r7, [r8]
 801c4a6:	e00f      	b.n	801c4c8 <_malloc_r+0xa8>
 801c4a8:	6822      	ldr	r2, [r4, #0]
 801c4aa:	1b52      	subs	r2, r2, r5
 801c4ac:	d420      	bmi.n	801c4f0 <_malloc_r+0xd0>
 801c4ae:	2a0b      	cmp	r2, #11
 801c4b0:	d917      	bls.n	801c4e2 <_malloc_r+0xc2>
 801c4b2:	1961      	adds	r1, r4, r5
 801c4b4:	42a3      	cmp	r3, r4
 801c4b6:	6025      	str	r5, [r4, #0]
 801c4b8:	bf18      	it	ne
 801c4ba:	6059      	strne	r1, [r3, #4]
 801c4bc:	6863      	ldr	r3, [r4, #4]
 801c4be:	bf08      	it	eq
 801c4c0:	f8c8 1000 	streq.w	r1, [r8]
 801c4c4:	5162      	str	r2, [r4, r5]
 801c4c6:	604b      	str	r3, [r1, #4]
 801c4c8:	4630      	mov	r0, r6
 801c4ca:	f000 f82f 	bl	801c52c <__malloc_unlock>
 801c4ce:	f104 000b 	add.w	r0, r4, #11
 801c4d2:	1d23      	adds	r3, r4, #4
 801c4d4:	f020 0007 	bic.w	r0, r0, #7
 801c4d8:	1ac2      	subs	r2, r0, r3
 801c4da:	bf1c      	itt	ne
 801c4dc:	1a1b      	subne	r3, r3, r0
 801c4de:	50a3      	strne	r3, [r4, r2]
 801c4e0:	e7af      	b.n	801c442 <_malloc_r+0x22>
 801c4e2:	6862      	ldr	r2, [r4, #4]
 801c4e4:	42a3      	cmp	r3, r4
 801c4e6:	bf0c      	ite	eq
 801c4e8:	f8c8 2000 	streq.w	r2, [r8]
 801c4ec:	605a      	strne	r2, [r3, #4]
 801c4ee:	e7eb      	b.n	801c4c8 <_malloc_r+0xa8>
 801c4f0:	4623      	mov	r3, r4
 801c4f2:	6864      	ldr	r4, [r4, #4]
 801c4f4:	e7ae      	b.n	801c454 <_malloc_r+0x34>
 801c4f6:	463c      	mov	r4, r7
 801c4f8:	687f      	ldr	r7, [r7, #4]
 801c4fa:	e7b6      	b.n	801c46a <_malloc_r+0x4a>
 801c4fc:	461a      	mov	r2, r3
 801c4fe:	685b      	ldr	r3, [r3, #4]
 801c500:	42a3      	cmp	r3, r4
 801c502:	d1fb      	bne.n	801c4fc <_malloc_r+0xdc>
 801c504:	2300      	movs	r3, #0
 801c506:	6053      	str	r3, [r2, #4]
 801c508:	e7de      	b.n	801c4c8 <_malloc_r+0xa8>
 801c50a:	230c      	movs	r3, #12
 801c50c:	6033      	str	r3, [r6, #0]
 801c50e:	4630      	mov	r0, r6
 801c510:	f000 f80c 	bl	801c52c <__malloc_unlock>
 801c514:	e794      	b.n	801c440 <_malloc_r+0x20>
 801c516:	6005      	str	r5, [r0, #0]
 801c518:	e7d6      	b.n	801c4c8 <_malloc_r+0xa8>
 801c51a:	bf00      	nop
 801c51c:	20012d84 	.word	0x20012d84

0801c520 <__malloc_lock>:
 801c520:	4801      	ldr	r0, [pc, #4]	@ (801c528 <__malloc_lock+0x8>)
 801c522:	f000 bc90 	b.w	801ce46 <__retarget_lock_acquire_recursive>
 801c526:	bf00      	nop
 801c528:	20012ec9 	.word	0x20012ec9

0801c52c <__malloc_unlock>:
 801c52c:	4801      	ldr	r0, [pc, #4]	@ (801c534 <__malloc_unlock+0x8>)
 801c52e:	f000 bc8b 	b.w	801ce48 <__retarget_lock_release_recursive>
 801c532:	bf00      	nop
 801c534:	20012ec9 	.word	0x20012ec9

0801c538 <srand>:
 801c538:	b538      	push	{r3, r4, r5, lr}
 801c53a:	4b10      	ldr	r3, [pc, #64]	@ (801c57c <srand+0x44>)
 801c53c:	681d      	ldr	r5, [r3, #0]
 801c53e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c540:	4604      	mov	r4, r0
 801c542:	b9b3      	cbnz	r3, 801c572 <srand+0x3a>
 801c544:	2018      	movs	r0, #24
 801c546:	f7ff ff39 	bl	801c3bc <malloc>
 801c54a:	4602      	mov	r2, r0
 801c54c:	6328      	str	r0, [r5, #48]	@ 0x30
 801c54e:	b920      	cbnz	r0, 801c55a <srand+0x22>
 801c550:	4b0b      	ldr	r3, [pc, #44]	@ (801c580 <srand+0x48>)
 801c552:	480c      	ldr	r0, [pc, #48]	@ (801c584 <srand+0x4c>)
 801c554:	2146      	movs	r1, #70	@ 0x46
 801c556:	f000 fc8f 	bl	801ce78 <__assert_func>
 801c55a:	490b      	ldr	r1, [pc, #44]	@ (801c588 <srand+0x50>)
 801c55c:	4b0b      	ldr	r3, [pc, #44]	@ (801c58c <srand+0x54>)
 801c55e:	e9c0 1300 	strd	r1, r3, [r0]
 801c562:	4b0b      	ldr	r3, [pc, #44]	@ (801c590 <srand+0x58>)
 801c564:	6083      	str	r3, [r0, #8]
 801c566:	230b      	movs	r3, #11
 801c568:	8183      	strh	r3, [r0, #12]
 801c56a:	2100      	movs	r1, #0
 801c56c:	2001      	movs	r0, #1
 801c56e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c572:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c574:	2200      	movs	r2, #0
 801c576:	611c      	str	r4, [r3, #16]
 801c578:	615a      	str	r2, [r3, #20]
 801c57a:	bd38      	pop	{r3, r4, r5, pc}
 801c57c:	20000168 	.word	0x20000168
 801c580:	0801e834 	.word	0x0801e834
 801c584:	0801e84b 	.word	0x0801e84b
 801c588:	abcd330e 	.word	0xabcd330e
 801c58c:	e66d1234 	.word	0xe66d1234
 801c590:	0005deec 	.word	0x0005deec

0801c594 <rand>:
 801c594:	4b16      	ldr	r3, [pc, #88]	@ (801c5f0 <rand+0x5c>)
 801c596:	b510      	push	{r4, lr}
 801c598:	681c      	ldr	r4, [r3, #0]
 801c59a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c59c:	b9b3      	cbnz	r3, 801c5cc <rand+0x38>
 801c59e:	2018      	movs	r0, #24
 801c5a0:	f7ff ff0c 	bl	801c3bc <malloc>
 801c5a4:	4602      	mov	r2, r0
 801c5a6:	6320      	str	r0, [r4, #48]	@ 0x30
 801c5a8:	b920      	cbnz	r0, 801c5b4 <rand+0x20>
 801c5aa:	4b12      	ldr	r3, [pc, #72]	@ (801c5f4 <rand+0x60>)
 801c5ac:	4812      	ldr	r0, [pc, #72]	@ (801c5f8 <rand+0x64>)
 801c5ae:	2152      	movs	r1, #82	@ 0x52
 801c5b0:	f000 fc62 	bl	801ce78 <__assert_func>
 801c5b4:	4911      	ldr	r1, [pc, #68]	@ (801c5fc <rand+0x68>)
 801c5b6:	4b12      	ldr	r3, [pc, #72]	@ (801c600 <rand+0x6c>)
 801c5b8:	e9c0 1300 	strd	r1, r3, [r0]
 801c5bc:	4b11      	ldr	r3, [pc, #68]	@ (801c604 <rand+0x70>)
 801c5be:	6083      	str	r3, [r0, #8]
 801c5c0:	230b      	movs	r3, #11
 801c5c2:	8183      	strh	r3, [r0, #12]
 801c5c4:	2100      	movs	r1, #0
 801c5c6:	2001      	movs	r0, #1
 801c5c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c5cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c5ce:	480e      	ldr	r0, [pc, #56]	@ (801c608 <rand+0x74>)
 801c5d0:	690b      	ldr	r3, [r1, #16]
 801c5d2:	694c      	ldr	r4, [r1, #20]
 801c5d4:	4a0d      	ldr	r2, [pc, #52]	@ (801c60c <rand+0x78>)
 801c5d6:	4358      	muls	r0, r3
 801c5d8:	fb02 0004 	mla	r0, r2, r4, r0
 801c5dc:	fba3 3202 	umull	r3, r2, r3, r2
 801c5e0:	3301      	adds	r3, #1
 801c5e2:	eb40 0002 	adc.w	r0, r0, r2
 801c5e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c5ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801c5ee:	bd10      	pop	{r4, pc}
 801c5f0:	20000168 	.word	0x20000168
 801c5f4:	0801e834 	.word	0x0801e834
 801c5f8:	0801e84b 	.word	0x0801e84b
 801c5fc:	abcd330e 	.word	0xabcd330e
 801c600:	e66d1234 	.word	0xe66d1234
 801c604:	0005deec 	.word	0x0005deec
 801c608:	5851f42d 	.word	0x5851f42d
 801c60c:	4c957f2d 	.word	0x4c957f2d

0801c610 <realloc>:
 801c610:	4b02      	ldr	r3, [pc, #8]	@ (801c61c <realloc+0xc>)
 801c612:	460a      	mov	r2, r1
 801c614:	4601      	mov	r1, r0
 801c616:	6818      	ldr	r0, [r3, #0]
 801c618:	f000 b802 	b.w	801c620 <_realloc_r>
 801c61c:	20000168 	.word	0x20000168

0801c620 <_realloc_r>:
 801c620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c624:	4680      	mov	r8, r0
 801c626:	4615      	mov	r5, r2
 801c628:	460c      	mov	r4, r1
 801c62a:	b921      	cbnz	r1, 801c636 <_realloc_r+0x16>
 801c62c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c630:	4611      	mov	r1, r2
 801c632:	f7ff bef5 	b.w	801c420 <_malloc_r>
 801c636:	b92a      	cbnz	r2, 801c644 <_realloc_r+0x24>
 801c638:	f000 fc48 	bl	801cecc <_free_r>
 801c63c:	2400      	movs	r4, #0
 801c63e:	4620      	mov	r0, r4
 801c640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c644:	f000 fc8c 	bl	801cf60 <_malloc_usable_size_r>
 801c648:	4285      	cmp	r5, r0
 801c64a:	4606      	mov	r6, r0
 801c64c:	d802      	bhi.n	801c654 <_realloc_r+0x34>
 801c64e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c652:	d8f4      	bhi.n	801c63e <_realloc_r+0x1e>
 801c654:	4629      	mov	r1, r5
 801c656:	4640      	mov	r0, r8
 801c658:	f7ff fee2 	bl	801c420 <_malloc_r>
 801c65c:	4607      	mov	r7, r0
 801c65e:	2800      	cmp	r0, #0
 801c660:	d0ec      	beq.n	801c63c <_realloc_r+0x1c>
 801c662:	42b5      	cmp	r5, r6
 801c664:	462a      	mov	r2, r5
 801c666:	4621      	mov	r1, r4
 801c668:	bf28      	it	cs
 801c66a:	4632      	movcs	r2, r6
 801c66c:	f000 fbf5 	bl	801ce5a <memcpy>
 801c670:	4621      	mov	r1, r4
 801c672:	4640      	mov	r0, r8
 801c674:	f000 fc2a 	bl	801cecc <_free_r>
 801c678:	463c      	mov	r4, r7
 801c67a:	e7e0      	b.n	801c63e <_realloc_r+0x1e>

0801c67c <_strtoul_l.constprop.0>:
 801c67c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c680:	4e34      	ldr	r6, [pc, #208]	@ (801c754 <_strtoul_l.constprop.0+0xd8>)
 801c682:	4686      	mov	lr, r0
 801c684:	460d      	mov	r5, r1
 801c686:	4628      	mov	r0, r5
 801c688:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c68c:	5d37      	ldrb	r7, [r6, r4]
 801c68e:	f017 0708 	ands.w	r7, r7, #8
 801c692:	d1f8      	bne.n	801c686 <_strtoul_l.constprop.0+0xa>
 801c694:	2c2d      	cmp	r4, #45	@ 0x2d
 801c696:	d12f      	bne.n	801c6f8 <_strtoul_l.constprop.0+0x7c>
 801c698:	782c      	ldrb	r4, [r5, #0]
 801c69a:	2701      	movs	r7, #1
 801c69c:	1c85      	adds	r5, r0, #2
 801c69e:	f033 0010 	bics.w	r0, r3, #16
 801c6a2:	d109      	bne.n	801c6b8 <_strtoul_l.constprop.0+0x3c>
 801c6a4:	2c30      	cmp	r4, #48	@ 0x30
 801c6a6:	d12c      	bne.n	801c702 <_strtoul_l.constprop.0+0x86>
 801c6a8:	7828      	ldrb	r0, [r5, #0]
 801c6aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801c6ae:	2858      	cmp	r0, #88	@ 0x58
 801c6b0:	d127      	bne.n	801c702 <_strtoul_l.constprop.0+0x86>
 801c6b2:	786c      	ldrb	r4, [r5, #1]
 801c6b4:	2310      	movs	r3, #16
 801c6b6:	3502      	adds	r5, #2
 801c6b8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801c6bc:	2600      	movs	r6, #0
 801c6be:	fbb8 f8f3 	udiv	r8, r8, r3
 801c6c2:	fb03 f908 	mul.w	r9, r3, r8
 801c6c6:	ea6f 0909 	mvn.w	r9, r9
 801c6ca:	4630      	mov	r0, r6
 801c6cc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801c6d0:	f1bc 0f09 	cmp.w	ip, #9
 801c6d4:	d81c      	bhi.n	801c710 <_strtoul_l.constprop.0+0x94>
 801c6d6:	4664      	mov	r4, ip
 801c6d8:	42a3      	cmp	r3, r4
 801c6da:	dd2a      	ble.n	801c732 <_strtoul_l.constprop.0+0xb6>
 801c6dc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801c6e0:	d007      	beq.n	801c6f2 <_strtoul_l.constprop.0+0x76>
 801c6e2:	4580      	cmp	r8, r0
 801c6e4:	d322      	bcc.n	801c72c <_strtoul_l.constprop.0+0xb0>
 801c6e6:	d101      	bne.n	801c6ec <_strtoul_l.constprop.0+0x70>
 801c6e8:	45a1      	cmp	r9, r4
 801c6ea:	db1f      	blt.n	801c72c <_strtoul_l.constprop.0+0xb0>
 801c6ec:	fb00 4003 	mla	r0, r0, r3, r4
 801c6f0:	2601      	movs	r6, #1
 801c6f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c6f6:	e7e9      	b.n	801c6cc <_strtoul_l.constprop.0+0x50>
 801c6f8:	2c2b      	cmp	r4, #43	@ 0x2b
 801c6fa:	bf04      	itt	eq
 801c6fc:	782c      	ldrbeq	r4, [r5, #0]
 801c6fe:	1c85      	addeq	r5, r0, #2
 801c700:	e7cd      	b.n	801c69e <_strtoul_l.constprop.0+0x22>
 801c702:	2b00      	cmp	r3, #0
 801c704:	d1d8      	bne.n	801c6b8 <_strtoul_l.constprop.0+0x3c>
 801c706:	2c30      	cmp	r4, #48	@ 0x30
 801c708:	bf0c      	ite	eq
 801c70a:	2308      	moveq	r3, #8
 801c70c:	230a      	movne	r3, #10
 801c70e:	e7d3      	b.n	801c6b8 <_strtoul_l.constprop.0+0x3c>
 801c710:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801c714:	f1bc 0f19 	cmp.w	ip, #25
 801c718:	d801      	bhi.n	801c71e <_strtoul_l.constprop.0+0xa2>
 801c71a:	3c37      	subs	r4, #55	@ 0x37
 801c71c:	e7dc      	b.n	801c6d8 <_strtoul_l.constprop.0+0x5c>
 801c71e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801c722:	f1bc 0f19 	cmp.w	ip, #25
 801c726:	d804      	bhi.n	801c732 <_strtoul_l.constprop.0+0xb6>
 801c728:	3c57      	subs	r4, #87	@ 0x57
 801c72a:	e7d5      	b.n	801c6d8 <_strtoul_l.constprop.0+0x5c>
 801c72c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801c730:	e7df      	b.n	801c6f2 <_strtoul_l.constprop.0+0x76>
 801c732:	1c73      	adds	r3, r6, #1
 801c734:	d106      	bne.n	801c744 <_strtoul_l.constprop.0+0xc8>
 801c736:	2322      	movs	r3, #34	@ 0x22
 801c738:	f8ce 3000 	str.w	r3, [lr]
 801c73c:	4630      	mov	r0, r6
 801c73e:	b932      	cbnz	r2, 801c74e <_strtoul_l.constprop.0+0xd2>
 801c740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c744:	b107      	cbz	r7, 801c748 <_strtoul_l.constprop.0+0xcc>
 801c746:	4240      	negs	r0, r0
 801c748:	2a00      	cmp	r2, #0
 801c74a:	d0f9      	beq.n	801c740 <_strtoul_l.constprop.0+0xc4>
 801c74c:	b106      	cbz	r6, 801c750 <_strtoul_l.constprop.0+0xd4>
 801c74e:	1e69      	subs	r1, r5, #1
 801c750:	6011      	str	r1, [r2, #0]
 801c752:	e7f5      	b.n	801c740 <_strtoul_l.constprop.0+0xc4>
 801c754:	0801e8a4 	.word	0x0801e8a4

0801c758 <strtoul>:
 801c758:	4613      	mov	r3, r2
 801c75a:	460a      	mov	r2, r1
 801c75c:	4601      	mov	r1, r0
 801c75e:	4802      	ldr	r0, [pc, #8]	@ (801c768 <strtoul+0x10>)
 801c760:	6800      	ldr	r0, [r0, #0]
 801c762:	f7ff bf8b 	b.w	801c67c <_strtoul_l.constprop.0>
 801c766:	bf00      	nop
 801c768:	20000168 	.word	0x20000168

0801c76c <std>:
 801c76c:	2300      	movs	r3, #0
 801c76e:	b510      	push	{r4, lr}
 801c770:	4604      	mov	r4, r0
 801c772:	e9c0 3300 	strd	r3, r3, [r0]
 801c776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c77a:	6083      	str	r3, [r0, #8]
 801c77c:	8181      	strh	r1, [r0, #12]
 801c77e:	6643      	str	r3, [r0, #100]	@ 0x64
 801c780:	81c2      	strh	r2, [r0, #14]
 801c782:	6183      	str	r3, [r0, #24]
 801c784:	4619      	mov	r1, r3
 801c786:	2208      	movs	r2, #8
 801c788:	305c      	adds	r0, #92	@ 0x5c
 801c78a:	f000 fa9d 	bl	801ccc8 <memset>
 801c78e:	4b0d      	ldr	r3, [pc, #52]	@ (801c7c4 <std+0x58>)
 801c790:	6263      	str	r3, [r4, #36]	@ 0x24
 801c792:	4b0d      	ldr	r3, [pc, #52]	@ (801c7c8 <std+0x5c>)
 801c794:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c796:	4b0d      	ldr	r3, [pc, #52]	@ (801c7cc <std+0x60>)
 801c798:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c79a:	4b0d      	ldr	r3, [pc, #52]	@ (801c7d0 <std+0x64>)
 801c79c:	6323      	str	r3, [r4, #48]	@ 0x30
 801c79e:	4b0d      	ldr	r3, [pc, #52]	@ (801c7d4 <std+0x68>)
 801c7a0:	6224      	str	r4, [r4, #32]
 801c7a2:	429c      	cmp	r4, r3
 801c7a4:	d006      	beq.n	801c7b4 <std+0x48>
 801c7a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c7aa:	4294      	cmp	r4, r2
 801c7ac:	d002      	beq.n	801c7b4 <std+0x48>
 801c7ae:	33d0      	adds	r3, #208	@ 0xd0
 801c7b0:	429c      	cmp	r4, r3
 801c7b2:	d105      	bne.n	801c7c0 <std+0x54>
 801c7b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c7bc:	f000 bb42 	b.w	801ce44 <__retarget_lock_init_recursive>
 801c7c0:	bd10      	pop	{r4, pc}
 801c7c2:	bf00      	nop
 801c7c4:	0801ca55 	.word	0x0801ca55
 801c7c8:	0801ca77 	.word	0x0801ca77
 801c7cc:	0801caaf 	.word	0x0801caaf
 801c7d0:	0801cad3 	.word	0x0801cad3
 801c7d4:	20012d88 	.word	0x20012d88

0801c7d8 <stdio_exit_handler>:
 801c7d8:	4a02      	ldr	r2, [pc, #8]	@ (801c7e4 <stdio_exit_handler+0xc>)
 801c7da:	4903      	ldr	r1, [pc, #12]	@ (801c7e8 <stdio_exit_handler+0x10>)
 801c7dc:	4803      	ldr	r0, [pc, #12]	@ (801c7ec <stdio_exit_handler+0x14>)
 801c7de:	f000 b869 	b.w	801c8b4 <_fwalk_sglue>
 801c7e2:	bf00      	nop
 801c7e4:	2000015c 	.word	0x2000015c
 801c7e8:	0801d645 	.word	0x0801d645
 801c7ec:	2000016c 	.word	0x2000016c

0801c7f0 <cleanup_stdio>:
 801c7f0:	6841      	ldr	r1, [r0, #4]
 801c7f2:	4b0c      	ldr	r3, [pc, #48]	@ (801c824 <cleanup_stdio+0x34>)
 801c7f4:	4299      	cmp	r1, r3
 801c7f6:	b510      	push	{r4, lr}
 801c7f8:	4604      	mov	r4, r0
 801c7fa:	d001      	beq.n	801c800 <cleanup_stdio+0x10>
 801c7fc:	f000 ff22 	bl	801d644 <_fflush_r>
 801c800:	68a1      	ldr	r1, [r4, #8]
 801c802:	4b09      	ldr	r3, [pc, #36]	@ (801c828 <cleanup_stdio+0x38>)
 801c804:	4299      	cmp	r1, r3
 801c806:	d002      	beq.n	801c80e <cleanup_stdio+0x1e>
 801c808:	4620      	mov	r0, r4
 801c80a:	f000 ff1b 	bl	801d644 <_fflush_r>
 801c80e:	68e1      	ldr	r1, [r4, #12]
 801c810:	4b06      	ldr	r3, [pc, #24]	@ (801c82c <cleanup_stdio+0x3c>)
 801c812:	4299      	cmp	r1, r3
 801c814:	d004      	beq.n	801c820 <cleanup_stdio+0x30>
 801c816:	4620      	mov	r0, r4
 801c818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c81c:	f000 bf12 	b.w	801d644 <_fflush_r>
 801c820:	bd10      	pop	{r4, pc}
 801c822:	bf00      	nop
 801c824:	20012d88 	.word	0x20012d88
 801c828:	20012df0 	.word	0x20012df0
 801c82c:	20012e58 	.word	0x20012e58

0801c830 <global_stdio_init.part.0>:
 801c830:	b510      	push	{r4, lr}
 801c832:	4b0b      	ldr	r3, [pc, #44]	@ (801c860 <global_stdio_init.part.0+0x30>)
 801c834:	4c0b      	ldr	r4, [pc, #44]	@ (801c864 <global_stdio_init.part.0+0x34>)
 801c836:	4a0c      	ldr	r2, [pc, #48]	@ (801c868 <global_stdio_init.part.0+0x38>)
 801c838:	601a      	str	r2, [r3, #0]
 801c83a:	4620      	mov	r0, r4
 801c83c:	2200      	movs	r2, #0
 801c83e:	2104      	movs	r1, #4
 801c840:	f7ff ff94 	bl	801c76c <std>
 801c844:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c848:	2201      	movs	r2, #1
 801c84a:	2109      	movs	r1, #9
 801c84c:	f7ff ff8e 	bl	801c76c <std>
 801c850:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c854:	2202      	movs	r2, #2
 801c856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c85a:	2112      	movs	r1, #18
 801c85c:	f7ff bf86 	b.w	801c76c <std>
 801c860:	20012ec0 	.word	0x20012ec0
 801c864:	20012d88 	.word	0x20012d88
 801c868:	0801c7d9 	.word	0x0801c7d9

0801c86c <__sfp_lock_acquire>:
 801c86c:	4801      	ldr	r0, [pc, #4]	@ (801c874 <__sfp_lock_acquire+0x8>)
 801c86e:	f000 baea 	b.w	801ce46 <__retarget_lock_acquire_recursive>
 801c872:	bf00      	nop
 801c874:	20012eca 	.word	0x20012eca

0801c878 <__sfp_lock_release>:
 801c878:	4801      	ldr	r0, [pc, #4]	@ (801c880 <__sfp_lock_release+0x8>)
 801c87a:	f000 bae5 	b.w	801ce48 <__retarget_lock_release_recursive>
 801c87e:	bf00      	nop
 801c880:	20012eca 	.word	0x20012eca

0801c884 <__sinit>:
 801c884:	b510      	push	{r4, lr}
 801c886:	4604      	mov	r4, r0
 801c888:	f7ff fff0 	bl	801c86c <__sfp_lock_acquire>
 801c88c:	6a23      	ldr	r3, [r4, #32]
 801c88e:	b11b      	cbz	r3, 801c898 <__sinit+0x14>
 801c890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c894:	f7ff bff0 	b.w	801c878 <__sfp_lock_release>
 801c898:	4b04      	ldr	r3, [pc, #16]	@ (801c8ac <__sinit+0x28>)
 801c89a:	6223      	str	r3, [r4, #32]
 801c89c:	4b04      	ldr	r3, [pc, #16]	@ (801c8b0 <__sinit+0x2c>)
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d1f5      	bne.n	801c890 <__sinit+0xc>
 801c8a4:	f7ff ffc4 	bl	801c830 <global_stdio_init.part.0>
 801c8a8:	e7f2      	b.n	801c890 <__sinit+0xc>
 801c8aa:	bf00      	nop
 801c8ac:	0801c7f1 	.word	0x0801c7f1
 801c8b0:	20012ec0 	.word	0x20012ec0

0801c8b4 <_fwalk_sglue>:
 801c8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c8b8:	4607      	mov	r7, r0
 801c8ba:	4688      	mov	r8, r1
 801c8bc:	4614      	mov	r4, r2
 801c8be:	2600      	movs	r6, #0
 801c8c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c8c4:	f1b9 0901 	subs.w	r9, r9, #1
 801c8c8:	d505      	bpl.n	801c8d6 <_fwalk_sglue+0x22>
 801c8ca:	6824      	ldr	r4, [r4, #0]
 801c8cc:	2c00      	cmp	r4, #0
 801c8ce:	d1f7      	bne.n	801c8c0 <_fwalk_sglue+0xc>
 801c8d0:	4630      	mov	r0, r6
 801c8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c8d6:	89ab      	ldrh	r3, [r5, #12]
 801c8d8:	2b01      	cmp	r3, #1
 801c8da:	d907      	bls.n	801c8ec <_fwalk_sglue+0x38>
 801c8dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c8e0:	3301      	adds	r3, #1
 801c8e2:	d003      	beq.n	801c8ec <_fwalk_sglue+0x38>
 801c8e4:	4629      	mov	r1, r5
 801c8e6:	4638      	mov	r0, r7
 801c8e8:	47c0      	blx	r8
 801c8ea:	4306      	orrs	r6, r0
 801c8ec:	3568      	adds	r5, #104	@ 0x68
 801c8ee:	e7e9      	b.n	801c8c4 <_fwalk_sglue+0x10>

0801c8f0 <_puts_r>:
 801c8f0:	6a03      	ldr	r3, [r0, #32]
 801c8f2:	b570      	push	{r4, r5, r6, lr}
 801c8f4:	6884      	ldr	r4, [r0, #8]
 801c8f6:	4605      	mov	r5, r0
 801c8f8:	460e      	mov	r6, r1
 801c8fa:	b90b      	cbnz	r3, 801c900 <_puts_r+0x10>
 801c8fc:	f7ff ffc2 	bl	801c884 <__sinit>
 801c900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c902:	07db      	lsls	r3, r3, #31
 801c904:	d405      	bmi.n	801c912 <_puts_r+0x22>
 801c906:	89a3      	ldrh	r3, [r4, #12]
 801c908:	0598      	lsls	r0, r3, #22
 801c90a:	d402      	bmi.n	801c912 <_puts_r+0x22>
 801c90c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c90e:	f000 fa9a 	bl	801ce46 <__retarget_lock_acquire_recursive>
 801c912:	89a3      	ldrh	r3, [r4, #12]
 801c914:	0719      	lsls	r1, r3, #28
 801c916:	d502      	bpl.n	801c91e <_puts_r+0x2e>
 801c918:	6923      	ldr	r3, [r4, #16]
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d135      	bne.n	801c98a <_puts_r+0x9a>
 801c91e:	4621      	mov	r1, r4
 801c920:	4628      	mov	r0, r5
 801c922:	f000 f951 	bl	801cbc8 <__swsetup_r>
 801c926:	b380      	cbz	r0, 801c98a <_puts_r+0x9a>
 801c928:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801c92c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c92e:	07da      	lsls	r2, r3, #31
 801c930:	d405      	bmi.n	801c93e <_puts_r+0x4e>
 801c932:	89a3      	ldrh	r3, [r4, #12]
 801c934:	059b      	lsls	r3, r3, #22
 801c936:	d402      	bmi.n	801c93e <_puts_r+0x4e>
 801c938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c93a:	f000 fa85 	bl	801ce48 <__retarget_lock_release_recursive>
 801c93e:	4628      	mov	r0, r5
 801c940:	bd70      	pop	{r4, r5, r6, pc}
 801c942:	2b00      	cmp	r3, #0
 801c944:	da04      	bge.n	801c950 <_puts_r+0x60>
 801c946:	69a2      	ldr	r2, [r4, #24]
 801c948:	429a      	cmp	r2, r3
 801c94a:	dc17      	bgt.n	801c97c <_puts_r+0x8c>
 801c94c:	290a      	cmp	r1, #10
 801c94e:	d015      	beq.n	801c97c <_puts_r+0x8c>
 801c950:	6823      	ldr	r3, [r4, #0]
 801c952:	1c5a      	adds	r2, r3, #1
 801c954:	6022      	str	r2, [r4, #0]
 801c956:	7019      	strb	r1, [r3, #0]
 801c958:	68a3      	ldr	r3, [r4, #8]
 801c95a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c95e:	3b01      	subs	r3, #1
 801c960:	60a3      	str	r3, [r4, #8]
 801c962:	2900      	cmp	r1, #0
 801c964:	d1ed      	bne.n	801c942 <_puts_r+0x52>
 801c966:	2b00      	cmp	r3, #0
 801c968:	da11      	bge.n	801c98e <_puts_r+0x9e>
 801c96a:	4622      	mov	r2, r4
 801c96c:	210a      	movs	r1, #10
 801c96e:	4628      	mov	r0, r5
 801c970:	f000 f8ec 	bl	801cb4c <__swbuf_r>
 801c974:	3001      	adds	r0, #1
 801c976:	d0d7      	beq.n	801c928 <_puts_r+0x38>
 801c978:	250a      	movs	r5, #10
 801c97a:	e7d7      	b.n	801c92c <_puts_r+0x3c>
 801c97c:	4622      	mov	r2, r4
 801c97e:	4628      	mov	r0, r5
 801c980:	f000 f8e4 	bl	801cb4c <__swbuf_r>
 801c984:	3001      	adds	r0, #1
 801c986:	d1e7      	bne.n	801c958 <_puts_r+0x68>
 801c988:	e7ce      	b.n	801c928 <_puts_r+0x38>
 801c98a:	3e01      	subs	r6, #1
 801c98c:	e7e4      	b.n	801c958 <_puts_r+0x68>
 801c98e:	6823      	ldr	r3, [r4, #0]
 801c990:	1c5a      	adds	r2, r3, #1
 801c992:	6022      	str	r2, [r4, #0]
 801c994:	220a      	movs	r2, #10
 801c996:	701a      	strb	r2, [r3, #0]
 801c998:	e7ee      	b.n	801c978 <_puts_r+0x88>
	...

0801c99c <puts>:
 801c99c:	4b02      	ldr	r3, [pc, #8]	@ (801c9a8 <puts+0xc>)
 801c99e:	4601      	mov	r1, r0
 801c9a0:	6818      	ldr	r0, [r3, #0]
 801c9a2:	f7ff bfa5 	b.w	801c8f0 <_puts_r>
 801c9a6:	bf00      	nop
 801c9a8:	20000168 	.word	0x20000168

0801c9ac <sniprintf>:
 801c9ac:	b40c      	push	{r2, r3}
 801c9ae:	b530      	push	{r4, r5, lr}
 801c9b0:	4b17      	ldr	r3, [pc, #92]	@ (801ca10 <sniprintf+0x64>)
 801c9b2:	1e0c      	subs	r4, r1, #0
 801c9b4:	681d      	ldr	r5, [r3, #0]
 801c9b6:	b09d      	sub	sp, #116	@ 0x74
 801c9b8:	da08      	bge.n	801c9cc <sniprintf+0x20>
 801c9ba:	238b      	movs	r3, #139	@ 0x8b
 801c9bc:	602b      	str	r3, [r5, #0]
 801c9be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c9c2:	b01d      	add	sp, #116	@ 0x74
 801c9c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c9c8:	b002      	add	sp, #8
 801c9ca:	4770      	bx	lr
 801c9cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c9d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c9d4:	bf14      	ite	ne
 801c9d6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801c9da:	4623      	moveq	r3, r4
 801c9dc:	9304      	str	r3, [sp, #16]
 801c9de:	9307      	str	r3, [sp, #28]
 801c9e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c9e4:	9002      	str	r0, [sp, #8]
 801c9e6:	9006      	str	r0, [sp, #24]
 801c9e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c9ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c9ee:	ab21      	add	r3, sp, #132	@ 0x84
 801c9f0:	a902      	add	r1, sp, #8
 801c9f2:	4628      	mov	r0, r5
 801c9f4:	9301      	str	r3, [sp, #4]
 801c9f6:	f000 fb17 	bl	801d028 <_svfiprintf_r>
 801c9fa:	1c43      	adds	r3, r0, #1
 801c9fc:	bfbc      	itt	lt
 801c9fe:	238b      	movlt	r3, #139	@ 0x8b
 801ca00:	602b      	strlt	r3, [r5, #0]
 801ca02:	2c00      	cmp	r4, #0
 801ca04:	d0dd      	beq.n	801c9c2 <sniprintf+0x16>
 801ca06:	9b02      	ldr	r3, [sp, #8]
 801ca08:	2200      	movs	r2, #0
 801ca0a:	701a      	strb	r2, [r3, #0]
 801ca0c:	e7d9      	b.n	801c9c2 <sniprintf+0x16>
 801ca0e:	bf00      	nop
 801ca10:	20000168 	.word	0x20000168

0801ca14 <siprintf>:
 801ca14:	b40e      	push	{r1, r2, r3}
 801ca16:	b500      	push	{lr}
 801ca18:	b09c      	sub	sp, #112	@ 0x70
 801ca1a:	ab1d      	add	r3, sp, #116	@ 0x74
 801ca1c:	9002      	str	r0, [sp, #8]
 801ca1e:	9006      	str	r0, [sp, #24]
 801ca20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801ca24:	4809      	ldr	r0, [pc, #36]	@ (801ca4c <siprintf+0x38>)
 801ca26:	9107      	str	r1, [sp, #28]
 801ca28:	9104      	str	r1, [sp, #16]
 801ca2a:	4909      	ldr	r1, [pc, #36]	@ (801ca50 <siprintf+0x3c>)
 801ca2c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ca30:	9105      	str	r1, [sp, #20]
 801ca32:	6800      	ldr	r0, [r0, #0]
 801ca34:	9301      	str	r3, [sp, #4]
 801ca36:	a902      	add	r1, sp, #8
 801ca38:	f000 faf6 	bl	801d028 <_svfiprintf_r>
 801ca3c:	9b02      	ldr	r3, [sp, #8]
 801ca3e:	2200      	movs	r2, #0
 801ca40:	701a      	strb	r2, [r3, #0]
 801ca42:	b01c      	add	sp, #112	@ 0x70
 801ca44:	f85d eb04 	ldr.w	lr, [sp], #4
 801ca48:	b003      	add	sp, #12
 801ca4a:	4770      	bx	lr
 801ca4c:	20000168 	.word	0x20000168
 801ca50:	ffff0208 	.word	0xffff0208

0801ca54 <__sread>:
 801ca54:	b510      	push	{r4, lr}
 801ca56:	460c      	mov	r4, r1
 801ca58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca5c:	f000 f994 	bl	801cd88 <_read_r>
 801ca60:	2800      	cmp	r0, #0
 801ca62:	bfab      	itete	ge
 801ca64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ca66:	89a3      	ldrhlt	r3, [r4, #12]
 801ca68:	181b      	addge	r3, r3, r0
 801ca6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ca6e:	bfac      	ite	ge
 801ca70:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ca72:	81a3      	strhlt	r3, [r4, #12]
 801ca74:	bd10      	pop	{r4, pc}

0801ca76 <__swrite>:
 801ca76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca7a:	461f      	mov	r7, r3
 801ca7c:	898b      	ldrh	r3, [r1, #12]
 801ca7e:	05db      	lsls	r3, r3, #23
 801ca80:	4605      	mov	r5, r0
 801ca82:	460c      	mov	r4, r1
 801ca84:	4616      	mov	r6, r2
 801ca86:	d505      	bpl.n	801ca94 <__swrite+0x1e>
 801ca88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca8c:	2302      	movs	r3, #2
 801ca8e:	2200      	movs	r2, #0
 801ca90:	f000 f968 	bl	801cd64 <_lseek_r>
 801ca94:	89a3      	ldrh	r3, [r4, #12]
 801ca96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ca9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ca9e:	81a3      	strh	r3, [r4, #12]
 801caa0:	4632      	mov	r2, r6
 801caa2:	463b      	mov	r3, r7
 801caa4:	4628      	mov	r0, r5
 801caa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801caaa:	f000 b98f 	b.w	801cdcc <_write_r>

0801caae <__sseek>:
 801caae:	b510      	push	{r4, lr}
 801cab0:	460c      	mov	r4, r1
 801cab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cab6:	f000 f955 	bl	801cd64 <_lseek_r>
 801caba:	1c43      	adds	r3, r0, #1
 801cabc:	89a3      	ldrh	r3, [r4, #12]
 801cabe:	bf15      	itete	ne
 801cac0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801cac2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801cac6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801caca:	81a3      	strheq	r3, [r4, #12]
 801cacc:	bf18      	it	ne
 801cace:	81a3      	strhne	r3, [r4, #12]
 801cad0:	bd10      	pop	{r4, pc}

0801cad2 <__sclose>:
 801cad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cad6:	f000 b935 	b.w	801cd44 <_close_r>

0801cada <_vsniprintf_r>:
 801cada:	b530      	push	{r4, r5, lr}
 801cadc:	4614      	mov	r4, r2
 801cade:	2c00      	cmp	r4, #0
 801cae0:	b09b      	sub	sp, #108	@ 0x6c
 801cae2:	4605      	mov	r5, r0
 801cae4:	461a      	mov	r2, r3
 801cae6:	da05      	bge.n	801caf4 <_vsniprintf_r+0x1a>
 801cae8:	238b      	movs	r3, #139	@ 0x8b
 801caea:	6003      	str	r3, [r0, #0]
 801caec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801caf0:	b01b      	add	sp, #108	@ 0x6c
 801caf2:	bd30      	pop	{r4, r5, pc}
 801caf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801caf8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cafc:	bf14      	ite	ne
 801cafe:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801cb02:	4623      	moveq	r3, r4
 801cb04:	9302      	str	r3, [sp, #8]
 801cb06:	9305      	str	r3, [sp, #20]
 801cb08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cb0c:	9100      	str	r1, [sp, #0]
 801cb0e:	9104      	str	r1, [sp, #16]
 801cb10:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cb14:	4669      	mov	r1, sp
 801cb16:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801cb18:	f000 fa86 	bl	801d028 <_svfiprintf_r>
 801cb1c:	1c43      	adds	r3, r0, #1
 801cb1e:	bfbc      	itt	lt
 801cb20:	238b      	movlt	r3, #139	@ 0x8b
 801cb22:	602b      	strlt	r3, [r5, #0]
 801cb24:	2c00      	cmp	r4, #0
 801cb26:	d0e3      	beq.n	801caf0 <_vsniprintf_r+0x16>
 801cb28:	9b00      	ldr	r3, [sp, #0]
 801cb2a:	2200      	movs	r2, #0
 801cb2c:	701a      	strb	r2, [r3, #0]
 801cb2e:	e7df      	b.n	801caf0 <_vsniprintf_r+0x16>

0801cb30 <vsniprintf>:
 801cb30:	b507      	push	{r0, r1, r2, lr}
 801cb32:	9300      	str	r3, [sp, #0]
 801cb34:	4613      	mov	r3, r2
 801cb36:	460a      	mov	r2, r1
 801cb38:	4601      	mov	r1, r0
 801cb3a:	4803      	ldr	r0, [pc, #12]	@ (801cb48 <vsniprintf+0x18>)
 801cb3c:	6800      	ldr	r0, [r0, #0]
 801cb3e:	f7ff ffcc 	bl	801cada <_vsniprintf_r>
 801cb42:	b003      	add	sp, #12
 801cb44:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb48:	20000168 	.word	0x20000168

0801cb4c <__swbuf_r>:
 801cb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb4e:	460e      	mov	r6, r1
 801cb50:	4614      	mov	r4, r2
 801cb52:	4605      	mov	r5, r0
 801cb54:	b118      	cbz	r0, 801cb5e <__swbuf_r+0x12>
 801cb56:	6a03      	ldr	r3, [r0, #32]
 801cb58:	b90b      	cbnz	r3, 801cb5e <__swbuf_r+0x12>
 801cb5a:	f7ff fe93 	bl	801c884 <__sinit>
 801cb5e:	69a3      	ldr	r3, [r4, #24]
 801cb60:	60a3      	str	r3, [r4, #8]
 801cb62:	89a3      	ldrh	r3, [r4, #12]
 801cb64:	071a      	lsls	r2, r3, #28
 801cb66:	d501      	bpl.n	801cb6c <__swbuf_r+0x20>
 801cb68:	6923      	ldr	r3, [r4, #16]
 801cb6a:	b943      	cbnz	r3, 801cb7e <__swbuf_r+0x32>
 801cb6c:	4621      	mov	r1, r4
 801cb6e:	4628      	mov	r0, r5
 801cb70:	f000 f82a 	bl	801cbc8 <__swsetup_r>
 801cb74:	b118      	cbz	r0, 801cb7e <__swbuf_r+0x32>
 801cb76:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801cb7a:	4638      	mov	r0, r7
 801cb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb7e:	6823      	ldr	r3, [r4, #0]
 801cb80:	6922      	ldr	r2, [r4, #16]
 801cb82:	1a98      	subs	r0, r3, r2
 801cb84:	6963      	ldr	r3, [r4, #20]
 801cb86:	b2f6      	uxtb	r6, r6
 801cb88:	4283      	cmp	r3, r0
 801cb8a:	4637      	mov	r7, r6
 801cb8c:	dc05      	bgt.n	801cb9a <__swbuf_r+0x4e>
 801cb8e:	4621      	mov	r1, r4
 801cb90:	4628      	mov	r0, r5
 801cb92:	f000 fd57 	bl	801d644 <_fflush_r>
 801cb96:	2800      	cmp	r0, #0
 801cb98:	d1ed      	bne.n	801cb76 <__swbuf_r+0x2a>
 801cb9a:	68a3      	ldr	r3, [r4, #8]
 801cb9c:	3b01      	subs	r3, #1
 801cb9e:	60a3      	str	r3, [r4, #8]
 801cba0:	6823      	ldr	r3, [r4, #0]
 801cba2:	1c5a      	adds	r2, r3, #1
 801cba4:	6022      	str	r2, [r4, #0]
 801cba6:	701e      	strb	r6, [r3, #0]
 801cba8:	6962      	ldr	r2, [r4, #20]
 801cbaa:	1c43      	adds	r3, r0, #1
 801cbac:	429a      	cmp	r2, r3
 801cbae:	d004      	beq.n	801cbba <__swbuf_r+0x6e>
 801cbb0:	89a3      	ldrh	r3, [r4, #12]
 801cbb2:	07db      	lsls	r3, r3, #31
 801cbb4:	d5e1      	bpl.n	801cb7a <__swbuf_r+0x2e>
 801cbb6:	2e0a      	cmp	r6, #10
 801cbb8:	d1df      	bne.n	801cb7a <__swbuf_r+0x2e>
 801cbba:	4621      	mov	r1, r4
 801cbbc:	4628      	mov	r0, r5
 801cbbe:	f000 fd41 	bl	801d644 <_fflush_r>
 801cbc2:	2800      	cmp	r0, #0
 801cbc4:	d0d9      	beq.n	801cb7a <__swbuf_r+0x2e>
 801cbc6:	e7d6      	b.n	801cb76 <__swbuf_r+0x2a>

0801cbc8 <__swsetup_r>:
 801cbc8:	b538      	push	{r3, r4, r5, lr}
 801cbca:	4b29      	ldr	r3, [pc, #164]	@ (801cc70 <__swsetup_r+0xa8>)
 801cbcc:	4605      	mov	r5, r0
 801cbce:	6818      	ldr	r0, [r3, #0]
 801cbd0:	460c      	mov	r4, r1
 801cbd2:	b118      	cbz	r0, 801cbdc <__swsetup_r+0x14>
 801cbd4:	6a03      	ldr	r3, [r0, #32]
 801cbd6:	b90b      	cbnz	r3, 801cbdc <__swsetup_r+0x14>
 801cbd8:	f7ff fe54 	bl	801c884 <__sinit>
 801cbdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cbe0:	0719      	lsls	r1, r3, #28
 801cbe2:	d422      	bmi.n	801cc2a <__swsetup_r+0x62>
 801cbe4:	06da      	lsls	r2, r3, #27
 801cbe6:	d407      	bmi.n	801cbf8 <__swsetup_r+0x30>
 801cbe8:	2209      	movs	r2, #9
 801cbea:	602a      	str	r2, [r5, #0]
 801cbec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cbf0:	81a3      	strh	r3, [r4, #12]
 801cbf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cbf6:	e033      	b.n	801cc60 <__swsetup_r+0x98>
 801cbf8:	0758      	lsls	r0, r3, #29
 801cbfa:	d512      	bpl.n	801cc22 <__swsetup_r+0x5a>
 801cbfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cbfe:	b141      	cbz	r1, 801cc12 <__swsetup_r+0x4a>
 801cc00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cc04:	4299      	cmp	r1, r3
 801cc06:	d002      	beq.n	801cc0e <__swsetup_r+0x46>
 801cc08:	4628      	mov	r0, r5
 801cc0a:	f000 f95f 	bl	801cecc <_free_r>
 801cc0e:	2300      	movs	r3, #0
 801cc10:	6363      	str	r3, [r4, #52]	@ 0x34
 801cc12:	89a3      	ldrh	r3, [r4, #12]
 801cc14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801cc18:	81a3      	strh	r3, [r4, #12]
 801cc1a:	2300      	movs	r3, #0
 801cc1c:	6063      	str	r3, [r4, #4]
 801cc1e:	6923      	ldr	r3, [r4, #16]
 801cc20:	6023      	str	r3, [r4, #0]
 801cc22:	89a3      	ldrh	r3, [r4, #12]
 801cc24:	f043 0308 	orr.w	r3, r3, #8
 801cc28:	81a3      	strh	r3, [r4, #12]
 801cc2a:	6923      	ldr	r3, [r4, #16]
 801cc2c:	b94b      	cbnz	r3, 801cc42 <__swsetup_r+0x7a>
 801cc2e:	89a3      	ldrh	r3, [r4, #12]
 801cc30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801cc34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cc38:	d003      	beq.n	801cc42 <__swsetup_r+0x7a>
 801cc3a:	4621      	mov	r1, r4
 801cc3c:	4628      	mov	r0, r5
 801cc3e:	f000 fd61 	bl	801d704 <__smakebuf_r>
 801cc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc46:	f013 0201 	ands.w	r2, r3, #1
 801cc4a:	d00a      	beq.n	801cc62 <__swsetup_r+0x9a>
 801cc4c:	2200      	movs	r2, #0
 801cc4e:	60a2      	str	r2, [r4, #8]
 801cc50:	6962      	ldr	r2, [r4, #20]
 801cc52:	4252      	negs	r2, r2
 801cc54:	61a2      	str	r2, [r4, #24]
 801cc56:	6922      	ldr	r2, [r4, #16]
 801cc58:	b942      	cbnz	r2, 801cc6c <__swsetup_r+0xa4>
 801cc5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801cc5e:	d1c5      	bne.n	801cbec <__swsetup_r+0x24>
 801cc60:	bd38      	pop	{r3, r4, r5, pc}
 801cc62:	0799      	lsls	r1, r3, #30
 801cc64:	bf58      	it	pl
 801cc66:	6962      	ldrpl	r2, [r4, #20]
 801cc68:	60a2      	str	r2, [r4, #8]
 801cc6a:	e7f4      	b.n	801cc56 <__swsetup_r+0x8e>
 801cc6c:	2000      	movs	r0, #0
 801cc6e:	e7f7      	b.n	801cc60 <__swsetup_r+0x98>
 801cc70:	20000168 	.word	0x20000168

0801cc74 <memcmp>:
 801cc74:	b510      	push	{r4, lr}
 801cc76:	3901      	subs	r1, #1
 801cc78:	4402      	add	r2, r0
 801cc7a:	4290      	cmp	r0, r2
 801cc7c:	d101      	bne.n	801cc82 <memcmp+0xe>
 801cc7e:	2000      	movs	r0, #0
 801cc80:	e005      	b.n	801cc8e <memcmp+0x1a>
 801cc82:	7803      	ldrb	r3, [r0, #0]
 801cc84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801cc88:	42a3      	cmp	r3, r4
 801cc8a:	d001      	beq.n	801cc90 <memcmp+0x1c>
 801cc8c:	1b18      	subs	r0, r3, r4
 801cc8e:	bd10      	pop	{r4, pc}
 801cc90:	3001      	adds	r0, #1
 801cc92:	e7f2      	b.n	801cc7a <memcmp+0x6>

0801cc94 <memmove>:
 801cc94:	4288      	cmp	r0, r1
 801cc96:	b510      	push	{r4, lr}
 801cc98:	eb01 0402 	add.w	r4, r1, r2
 801cc9c:	d902      	bls.n	801cca4 <memmove+0x10>
 801cc9e:	4284      	cmp	r4, r0
 801cca0:	4623      	mov	r3, r4
 801cca2:	d807      	bhi.n	801ccb4 <memmove+0x20>
 801cca4:	1e43      	subs	r3, r0, #1
 801cca6:	42a1      	cmp	r1, r4
 801cca8:	d008      	beq.n	801ccbc <memmove+0x28>
 801ccaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ccae:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ccb2:	e7f8      	b.n	801cca6 <memmove+0x12>
 801ccb4:	4402      	add	r2, r0
 801ccb6:	4601      	mov	r1, r0
 801ccb8:	428a      	cmp	r2, r1
 801ccba:	d100      	bne.n	801ccbe <memmove+0x2a>
 801ccbc:	bd10      	pop	{r4, pc}
 801ccbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ccc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ccc6:	e7f7      	b.n	801ccb8 <memmove+0x24>

0801ccc8 <memset>:
 801ccc8:	4402      	add	r2, r0
 801ccca:	4603      	mov	r3, r0
 801cccc:	4293      	cmp	r3, r2
 801ccce:	d100      	bne.n	801ccd2 <memset+0xa>
 801ccd0:	4770      	bx	lr
 801ccd2:	f803 1b01 	strb.w	r1, [r3], #1
 801ccd6:	e7f9      	b.n	801cccc <memset+0x4>

0801ccd8 <strchr>:
 801ccd8:	b2c9      	uxtb	r1, r1
 801ccda:	4603      	mov	r3, r0
 801ccdc:	4618      	mov	r0, r3
 801ccde:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cce2:	b112      	cbz	r2, 801ccea <strchr+0x12>
 801cce4:	428a      	cmp	r2, r1
 801cce6:	d1f9      	bne.n	801ccdc <strchr+0x4>
 801cce8:	4770      	bx	lr
 801ccea:	2900      	cmp	r1, #0
 801ccec:	bf18      	it	ne
 801ccee:	2000      	movne	r0, #0
 801ccf0:	4770      	bx	lr

0801ccf2 <strncmp>:
 801ccf2:	b510      	push	{r4, lr}
 801ccf4:	b16a      	cbz	r2, 801cd12 <strncmp+0x20>
 801ccf6:	3901      	subs	r1, #1
 801ccf8:	1884      	adds	r4, r0, r2
 801ccfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ccfe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801cd02:	429a      	cmp	r2, r3
 801cd04:	d103      	bne.n	801cd0e <strncmp+0x1c>
 801cd06:	42a0      	cmp	r0, r4
 801cd08:	d001      	beq.n	801cd0e <strncmp+0x1c>
 801cd0a:	2a00      	cmp	r2, #0
 801cd0c:	d1f5      	bne.n	801ccfa <strncmp+0x8>
 801cd0e:	1ad0      	subs	r0, r2, r3
 801cd10:	bd10      	pop	{r4, pc}
 801cd12:	4610      	mov	r0, r2
 801cd14:	e7fc      	b.n	801cd10 <strncmp+0x1e>

0801cd16 <strstr>:
 801cd16:	780a      	ldrb	r2, [r1, #0]
 801cd18:	b570      	push	{r4, r5, r6, lr}
 801cd1a:	b96a      	cbnz	r2, 801cd38 <strstr+0x22>
 801cd1c:	bd70      	pop	{r4, r5, r6, pc}
 801cd1e:	429a      	cmp	r2, r3
 801cd20:	d109      	bne.n	801cd36 <strstr+0x20>
 801cd22:	460c      	mov	r4, r1
 801cd24:	4605      	mov	r5, r0
 801cd26:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d0f6      	beq.n	801cd1c <strstr+0x6>
 801cd2e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801cd32:	429e      	cmp	r6, r3
 801cd34:	d0f7      	beq.n	801cd26 <strstr+0x10>
 801cd36:	3001      	adds	r0, #1
 801cd38:	7803      	ldrb	r3, [r0, #0]
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d1ef      	bne.n	801cd1e <strstr+0x8>
 801cd3e:	4618      	mov	r0, r3
 801cd40:	e7ec      	b.n	801cd1c <strstr+0x6>
	...

0801cd44 <_close_r>:
 801cd44:	b538      	push	{r3, r4, r5, lr}
 801cd46:	4d06      	ldr	r5, [pc, #24]	@ (801cd60 <_close_r+0x1c>)
 801cd48:	2300      	movs	r3, #0
 801cd4a:	4604      	mov	r4, r0
 801cd4c:	4608      	mov	r0, r1
 801cd4e:	602b      	str	r3, [r5, #0]
 801cd50:	f7e5 f938 	bl	8001fc4 <_close>
 801cd54:	1c43      	adds	r3, r0, #1
 801cd56:	d102      	bne.n	801cd5e <_close_r+0x1a>
 801cd58:	682b      	ldr	r3, [r5, #0]
 801cd5a:	b103      	cbz	r3, 801cd5e <_close_r+0x1a>
 801cd5c:	6023      	str	r3, [r4, #0]
 801cd5e:	bd38      	pop	{r3, r4, r5, pc}
 801cd60:	20012ec4 	.word	0x20012ec4

0801cd64 <_lseek_r>:
 801cd64:	b538      	push	{r3, r4, r5, lr}
 801cd66:	4d07      	ldr	r5, [pc, #28]	@ (801cd84 <_lseek_r+0x20>)
 801cd68:	4604      	mov	r4, r0
 801cd6a:	4608      	mov	r0, r1
 801cd6c:	4611      	mov	r1, r2
 801cd6e:	2200      	movs	r2, #0
 801cd70:	602a      	str	r2, [r5, #0]
 801cd72:	461a      	mov	r2, r3
 801cd74:	f7e5 f94d 	bl	8002012 <_lseek>
 801cd78:	1c43      	adds	r3, r0, #1
 801cd7a:	d102      	bne.n	801cd82 <_lseek_r+0x1e>
 801cd7c:	682b      	ldr	r3, [r5, #0]
 801cd7e:	b103      	cbz	r3, 801cd82 <_lseek_r+0x1e>
 801cd80:	6023      	str	r3, [r4, #0]
 801cd82:	bd38      	pop	{r3, r4, r5, pc}
 801cd84:	20012ec4 	.word	0x20012ec4

0801cd88 <_read_r>:
 801cd88:	b538      	push	{r3, r4, r5, lr}
 801cd8a:	4d07      	ldr	r5, [pc, #28]	@ (801cda8 <_read_r+0x20>)
 801cd8c:	4604      	mov	r4, r0
 801cd8e:	4608      	mov	r0, r1
 801cd90:	4611      	mov	r1, r2
 801cd92:	2200      	movs	r2, #0
 801cd94:	602a      	str	r2, [r5, #0]
 801cd96:	461a      	mov	r2, r3
 801cd98:	f7e5 f8db 	bl	8001f52 <_read>
 801cd9c:	1c43      	adds	r3, r0, #1
 801cd9e:	d102      	bne.n	801cda6 <_read_r+0x1e>
 801cda0:	682b      	ldr	r3, [r5, #0]
 801cda2:	b103      	cbz	r3, 801cda6 <_read_r+0x1e>
 801cda4:	6023      	str	r3, [r4, #0]
 801cda6:	bd38      	pop	{r3, r4, r5, pc}
 801cda8:	20012ec4 	.word	0x20012ec4

0801cdac <_sbrk_r>:
 801cdac:	b538      	push	{r3, r4, r5, lr}
 801cdae:	4d06      	ldr	r5, [pc, #24]	@ (801cdc8 <_sbrk_r+0x1c>)
 801cdb0:	2300      	movs	r3, #0
 801cdb2:	4604      	mov	r4, r0
 801cdb4:	4608      	mov	r0, r1
 801cdb6:	602b      	str	r3, [r5, #0]
 801cdb8:	f7e5 f938 	bl	800202c <_sbrk>
 801cdbc:	1c43      	adds	r3, r0, #1
 801cdbe:	d102      	bne.n	801cdc6 <_sbrk_r+0x1a>
 801cdc0:	682b      	ldr	r3, [r5, #0]
 801cdc2:	b103      	cbz	r3, 801cdc6 <_sbrk_r+0x1a>
 801cdc4:	6023      	str	r3, [r4, #0]
 801cdc6:	bd38      	pop	{r3, r4, r5, pc}
 801cdc8:	20012ec4 	.word	0x20012ec4

0801cdcc <_write_r>:
 801cdcc:	b538      	push	{r3, r4, r5, lr}
 801cdce:	4d07      	ldr	r5, [pc, #28]	@ (801cdec <_write_r+0x20>)
 801cdd0:	4604      	mov	r4, r0
 801cdd2:	4608      	mov	r0, r1
 801cdd4:	4611      	mov	r1, r2
 801cdd6:	2200      	movs	r2, #0
 801cdd8:	602a      	str	r2, [r5, #0]
 801cdda:	461a      	mov	r2, r3
 801cddc:	f7e5 f8d6 	bl	8001f8c <_write>
 801cde0:	1c43      	adds	r3, r0, #1
 801cde2:	d102      	bne.n	801cdea <_write_r+0x1e>
 801cde4:	682b      	ldr	r3, [r5, #0]
 801cde6:	b103      	cbz	r3, 801cdea <_write_r+0x1e>
 801cde8:	6023      	str	r3, [r4, #0]
 801cdea:	bd38      	pop	{r3, r4, r5, pc}
 801cdec:	20012ec4 	.word	0x20012ec4

0801cdf0 <__errno>:
 801cdf0:	4b01      	ldr	r3, [pc, #4]	@ (801cdf8 <__errno+0x8>)
 801cdf2:	6818      	ldr	r0, [r3, #0]
 801cdf4:	4770      	bx	lr
 801cdf6:	bf00      	nop
 801cdf8:	20000168 	.word	0x20000168

0801cdfc <__libc_init_array>:
 801cdfc:	b570      	push	{r4, r5, r6, lr}
 801cdfe:	4d0d      	ldr	r5, [pc, #52]	@ (801ce34 <__libc_init_array+0x38>)
 801ce00:	4c0d      	ldr	r4, [pc, #52]	@ (801ce38 <__libc_init_array+0x3c>)
 801ce02:	1b64      	subs	r4, r4, r5
 801ce04:	10a4      	asrs	r4, r4, #2
 801ce06:	2600      	movs	r6, #0
 801ce08:	42a6      	cmp	r6, r4
 801ce0a:	d109      	bne.n	801ce20 <__libc_init_array+0x24>
 801ce0c:	4d0b      	ldr	r5, [pc, #44]	@ (801ce3c <__libc_init_array+0x40>)
 801ce0e:	4c0c      	ldr	r4, [pc, #48]	@ (801ce40 <__libc_init_array+0x44>)
 801ce10:	f000 fe62 	bl	801dad8 <_init>
 801ce14:	1b64      	subs	r4, r4, r5
 801ce16:	10a4      	asrs	r4, r4, #2
 801ce18:	2600      	movs	r6, #0
 801ce1a:	42a6      	cmp	r6, r4
 801ce1c:	d105      	bne.n	801ce2a <__libc_init_array+0x2e>
 801ce1e:	bd70      	pop	{r4, r5, r6, pc}
 801ce20:	f855 3b04 	ldr.w	r3, [r5], #4
 801ce24:	4798      	blx	r3
 801ce26:	3601      	adds	r6, #1
 801ce28:	e7ee      	b.n	801ce08 <__libc_init_array+0xc>
 801ce2a:	f855 3b04 	ldr.w	r3, [r5], #4
 801ce2e:	4798      	blx	r3
 801ce30:	3601      	adds	r6, #1
 801ce32:	e7f2      	b.n	801ce1a <__libc_init_array+0x1e>
 801ce34:	0801ea1c 	.word	0x0801ea1c
 801ce38:	0801ea1c 	.word	0x0801ea1c
 801ce3c:	0801ea1c 	.word	0x0801ea1c
 801ce40:	0801ea28 	.word	0x0801ea28

0801ce44 <__retarget_lock_init_recursive>:
 801ce44:	4770      	bx	lr

0801ce46 <__retarget_lock_acquire_recursive>:
 801ce46:	4770      	bx	lr

0801ce48 <__retarget_lock_release_recursive>:
 801ce48:	4770      	bx	lr

0801ce4a <strcpy>:
 801ce4a:	4603      	mov	r3, r0
 801ce4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ce50:	f803 2b01 	strb.w	r2, [r3], #1
 801ce54:	2a00      	cmp	r2, #0
 801ce56:	d1f9      	bne.n	801ce4c <strcpy+0x2>
 801ce58:	4770      	bx	lr

0801ce5a <memcpy>:
 801ce5a:	440a      	add	r2, r1
 801ce5c:	4291      	cmp	r1, r2
 801ce5e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801ce62:	d100      	bne.n	801ce66 <memcpy+0xc>
 801ce64:	4770      	bx	lr
 801ce66:	b510      	push	{r4, lr}
 801ce68:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ce6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ce70:	4291      	cmp	r1, r2
 801ce72:	d1f9      	bne.n	801ce68 <memcpy+0xe>
 801ce74:	bd10      	pop	{r4, pc}
	...

0801ce78 <__assert_func>:
 801ce78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ce7a:	4614      	mov	r4, r2
 801ce7c:	461a      	mov	r2, r3
 801ce7e:	4b09      	ldr	r3, [pc, #36]	@ (801cea4 <__assert_func+0x2c>)
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	4605      	mov	r5, r0
 801ce84:	68d8      	ldr	r0, [r3, #12]
 801ce86:	b954      	cbnz	r4, 801ce9e <__assert_func+0x26>
 801ce88:	4b07      	ldr	r3, [pc, #28]	@ (801cea8 <__assert_func+0x30>)
 801ce8a:	461c      	mov	r4, r3
 801ce8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ce90:	9100      	str	r1, [sp, #0]
 801ce92:	462b      	mov	r3, r5
 801ce94:	4905      	ldr	r1, [pc, #20]	@ (801ceac <__assert_func+0x34>)
 801ce96:	f000 fbfd 	bl	801d694 <fiprintf>
 801ce9a:	f000 fc91 	bl	801d7c0 <abort>
 801ce9e:	4b04      	ldr	r3, [pc, #16]	@ (801ceb0 <__assert_func+0x38>)
 801cea0:	e7f4      	b.n	801ce8c <__assert_func+0x14>
 801cea2:	bf00      	nop
 801cea4:	20000168 	.word	0x20000168
 801cea8:	0801e9df 	.word	0x0801e9df
 801ceac:	0801e9b1 	.word	0x0801e9b1
 801ceb0:	0801e9a4 	.word	0x0801e9a4

0801ceb4 <__env_lock>:
 801ceb4:	4801      	ldr	r0, [pc, #4]	@ (801cebc <__env_lock+0x8>)
 801ceb6:	f7ff bfc6 	b.w	801ce46 <__retarget_lock_acquire_recursive>
 801ceba:	bf00      	nop
 801cebc:	20012ec8 	.word	0x20012ec8

0801cec0 <__env_unlock>:
 801cec0:	4801      	ldr	r0, [pc, #4]	@ (801cec8 <__env_unlock+0x8>)
 801cec2:	f7ff bfc1 	b.w	801ce48 <__retarget_lock_release_recursive>
 801cec6:	bf00      	nop
 801cec8:	20012ec8 	.word	0x20012ec8

0801cecc <_free_r>:
 801cecc:	b538      	push	{r3, r4, r5, lr}
 801cece:	4605      	mov	r5, r0
 801ced0:	2900      	cmp	r1, #0
 801ced2:	d041      	beq.n	801cf58 <_free_r+0x8c>
 801ced4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ced8:	1f0c      	subs	r4, r1, #4
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	bfb8      	it	lt
 801cede:	18e4      	addlt	r4, r4, r3
 801cee0:	f7ff fb1e 	bl	801c520 <__malloc_lock>
 801cee4:	4a1d      	ldr	r2, [pc, #116]	@ (801cf5c <_free_r+0x90>)
 801cee6:	6813      	ldr	r3, [r2, #0]
 801cee8:	b933      	cbnz	r3, 801cef8 <_free_r+0x2c>
 801ceea:	6063      	str	r3, [r4, #4]
 801ceec:	6014      	str	r4, [r2, #0]
 801ceee:	4628      	mov	r0, r5
 801cef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cef4:	f7ff bb1a 	b.w	801c52c <__malloc_unlock>
 801cef8:	42a3      	cmp	r3, r4
 801cefa:	d908      	bls.n	801cf0e <_free_r+0x42>
 801cefc:	6820      	ldr	r0, [r4, #0]
 801cefe:	1821      	adds	r1, r4, r0
 801cf00:	428b      	cmp	r3, r1
 801cf02:	bf01      	itttt	eq
 801cf04:	6819      	ldreq	r1, [r3, #0]
 801cf06:	685b      	ldreq	r3, [r3, #4]
 801cf08:	1809      	addeq	r1, r1, r0
 801cf0a:	6021      	streq	r1, [r4, #0]
 801cf0c:	e7ed      	b.n	801ceea <_free_r+0x1e>
 801cf0e:	461a      	mov	r2, r3
 801cf10:	685b      	ldr	r3, [r3, #4]
 801cf12:	b10b      	cbz	r3, 801cf18 <_free_r+0x4c>
 801cf14:	42a3      	cmp	r3, r4
 801cf16:	d9fa      	bls.n	801cf0e <_free_r+0x42>
 801cf18:	6811      	ldr	r1, [r2, #0]
 801cf1a:	1850      	adds	r0, r2, r1
 801cf1c:	42a0      	cmp	r0, r4
 801cf1e:	d10b      	bne.n	801cf38 <_free_r+0x6c>
 801cf20:	6820      	ldr	r0, [r4, #0]
 801cf22:	4401      	add	r1, r0
 801cf24:	1850      	adds	r0, r2, r1
 801cf26:	4283      	cmp	r3, r0
 801cf28:	6011      	str	r1, [r2, #0]
 801cf2a:	d1e0      	bne.n	801ceee <_free_r+0x22>
 801cf2c:	6818      	ldr	r0, [r3, #0]
 801cf2e:	685b      	ldr	r3, [r3, #4]
 801cf30:	6053      	str	r3, [r2, #4]
 801cf32:	4408      	add	r0, r1
 801cf34:	6010      	str	r0, [r2, #0]
 801cf36:	e7da      	b.n	801ceee <_free_r+0x22>
 801cf38:	d902      	bls.n	801cf40 <_free_r+0x74>
 801cf3a:	230c      	movs	r3, #12
 801cf3c:	602b      	str	r3, [r5, #0]
 801cf3e:	e7d6      	b.n	801ceee <_free_r+0x22>
 801cf40:	6820      	ldr	r0, [r4, #0]
 801cf42:	1821      	adds	r1, r4, r0
 801cf44:	428b      	cmp	r3, r1
 801cf46:	bf04      	itt	eq
 801cf48:	6819      	ldreq	r1, [r3, #0]
 801cf4a:	685b      	ldreq	r3, [r3, #4]
 801cf4c:	6063      	str	r3, [r4, #4]
 801cf4e:	bf04      	itt	eq
 801cf50:	1809      	addeq	r1, r1, r0
 801cf52:	6021      	streq	r1, [r4, #0]
 801cf54:	6054      	str	r4, [r2, #4]
 801cf56:	e7ca      	b.n	801ceee <_free_r+0x22>
 801cf58:	bd38      	pop	{r3, r4, r5, pc}
 801cf5a:	bf00      	nop
 801cf5c:	20012d84 	.word	0x20012d84

0801cf60 <_malloc_usable_size_r>:
 801cf60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cf64:	1f18      	subs	r0, r3, #4
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	bfbc      	itt	lt
 801cf6a:	580b      	ldrlt	r3, [r1, r0]
 801cf6c:	18c0      	addlt	r0, r0, r3
 801cf6e:	4770      	bx	lr

0801cf70 <__ssputs_r>:
 801cf70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf74:	688e      	ldr	r6, [r1, #8]
 801cf76:	461f      	mov	r7, r3
 801cf78:	42be      	cmp	r6, r7
 801cf7a:	680b      	ldr	r3, [r1, #0]
 801cf7c:	4682      	mov	sl, r0
 801cf7e:	460c      	mov	r4, r1
 801cf80:	4690      	mov	r8, r2
 801cf82:	d82d      	bhi.n	801cfe0 <__ssputs_r+0x70>
 801cf84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cf88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801cf8c:	d026      	beq.n	801cfdc <__ssputs_r+0x6c>
 801cf8e:	6965      	ldr	r5, [r4, #20]
 801cf90:	6909      	ldr	r1, [r1, #16]
 801cf92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cf96:	eba3 0901 	sub.w	r9, r3, r1
 801cf9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cf9e:	1c7b      	adds	r3, r7, #1
 801cfa0:	444b      	add	r3, r9
 801cfa2:	106d      	asrs	r5, r5, #1
 801cfa4:	429d      	cmp	r5, r3
 801cfa6:	bf38      	it	cc
 801cfa8:	461d      	movcc	r5, r3
 801cfaa:	0553      	lsls	r3, r2, #21
 801cfac:	d527      	bpl.n	801cffe <__ssputs_r+0x8e>
 801cfae:	4629      	mov	r1, r5
 801cfb0:	f7ff fa36 	bl	801c420 <_malloc_r>
 801cfb4:	4606      	mov	r6, r0
 801cfb6:	b360      	cbz	r0, 801d012 <__ssputs_r+0xa2>
 801cfb8:	6921      	ldr	r1, [r4, #16]
 801cfba:	464a      	mov	r2, r9
 801cfbc:	f7ff ff4d 	bl	801ce5a <memcpy>
 801cfc0:	89a3      	ldrh	r3, [r4, #12]
 801cfc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801cfc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cfca:	81a3      	strh	r3, [r4, #12]
 801cfcc:	6126      	str	r6, [r4, #16]
 801cfce:	6165      	str	r5, [r4, #20]
 801cfd0:	444e      	add	r6, r9
 801cfd2:	eba5 0509 	sub.w	r5, r5, r9
 801cfd6:	6026      	str	r6, [r4, #0]
 801cfd8:	60a5      	str	r5, [r4, #8]
 801cfda:	463e      	mov	r6, r7
 801cfdc:	42be      	cmp	r6, r7
 801cfde:	d900      	bls.n	801cfe2 <__ssputs_r+0x72>
 801cfe0:	463e      	mov	r6, r7
 801cfe2:	6820      	ldr	r0, [r4, #0]
 801cfe4:	4632      	mov	r2, r6
 801cfe6:	4641      	mov	r1, r8
 801cfe8:	f7ff fe54 	bl	801cc94 <memmove>
 801cfec:	68a3      	ldr	r3, [r4, #8]
 801cfee:	1b9b      	subs	r3, r3, r6
 801cff0:	60a3      	str	r3, [r4, #8]
 801cff2:	6823      	ldr	r3, [r4, #0]
 801cff4:	4433      	add	r3, r6
 801cff6:	6023      	str	r3, [r4, #0]
 801cff8:	2000      	movs	r0, #0
 801cffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cffe:	462a      	mov	r2, r5
 801d000:	f7ff fb0e 	bl	801c620 <_realloc_r>
 801d004:	4606      	mov	r6, r0
 801d006:	2800      	cmp	r0, #0
 801d008:	d1e0      	bne.n	801cfcc <__ssputs_r+0x5c>
 801d00a:	6921      	ldr	r1, [r4, #16]
 801d00c:	4650      	mov	r0, sl
 801d00e:	f7ff ff5d 	bl	801cecc <_free_r>
 801d012:	230c      	movs	r3, #12
 801d014:	f8ca 3000 	str.w	r3, [sl]
 801d018:	89a3      	ldrh	r3, [r4, #12]
 801d01a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d01e:	81a3      	strh	r3, [r4, #12]
 801d020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d024:	e7e9      	b.n	801cffa <__ssputs_r+0x8a>
	...

0801d028 <_svfiprintf_r>:
 801d028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d02c:	4698      	mov	r8, r3
 801d02e:	898b      	ldrh	r3, [r1, #12]
 801d030:	061b      	lsls	r3, r3, #24
 801d032:	b09d      	sub	sp, #116	@ 0x74
 801d034:	4607      	mov	r7, r0
 801d036:	460d      	mov	r5, r1
 801d038:	4614      	mov	r4, r2
 801d03a:	d510      	bpl.n	801d05e <_svfiprintf_r+0x36>
 801d03c:	690b      	ldr	r3, [r1, #16]
 801d03e:	b973      	cbnz	r3, 801d05e <_svfiprintf_r+0x36>
 801d040:	2140      	movs	r1, #64	@ 0x40
 801d042:	f7ff f9ed 	bl	801c420 <_malloc_r>
 801d046:	6028      	str	r0, [r5, #0]
 801d048:	6128      	str	r0, [r5, #16]
 801d04a:	b930      	cbnz	r0, 801d05a <_svfiprintf_r+0x32>
 801d04c:	230c      	movs	r3, #12
 801d04e:	603b      	str	r3, [r7, #0]
 801d050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d054:	b01d      	add	sp, #116	@ 0x74
 801d056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d05a:	2340      	movs	r3, #64	@ 0x40
 801d05c:	616b      	str	r3, [r5, #20]
 801d05e:	2300      	movs	r3, #0
 801d060:	9309      	str	r3, [sp, #36]	@ 0x24
 801d062:	2320      	movs	r3, #32
 801d064:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d068:	f8cd 800c 	str.w	r8, [sp, #12]
 801d06c:	2330      	movs	r3, #48	@ 0x30
 801d06e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d20c <_svfiprintf_r+0x1e4>
 801d072:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d076:	f04f 0901 	mov.w	r9, #1
 801d07a:	4623      	mov	r3, r4
 801d07c:	469a      	mov	sl, r3
 801d07e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d082:	b10a      	cbz	r2, 801d088 <_svfiprintf_r+0x60>
 801d084:	2a25      	cmp	r2, #37	@ 0x25
 801d086:	d1f9      	bne.n	801d07c <_svfiprintf_r+0x54>
 801d088:	ebba 0b04 	subs.w	fp, sl, r4
 801d08c:	d00b      	beq.n	801d0a6 <_svfiprintf_r+0x7e>
 801d08e:	465b      	mov	r3, fp
 801d090:	4622      	mov	r2, r4
 801d092:	4629      	mov	r1, r5
 801d094:	4638      	mov	r0, r7
 801d096:	f7ff ff6b 	bl	801cf70 <__ssputs_r>
 801d09a:	3001      	adds	r0, #1
 801d09c:	f000 80a7 	beq.w	801d1ee <_svfiprintf_r+0x1c6>
 801d0a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d0a2:	445a      	add	r2, fp
 801d0a4:	9209      	str	r2, [sp, #36]	@ 0x24
 801d0a6:	f89a 3000 	ldrb.w	r3, [sl]
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	f000 809f 	beq.w	801d1ee <_svfiprintf_r+0x1c6>
 801d0b0:	2300      	movs	r3, #0
 801d0b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d0b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d0ba:	f10a 0a01 	add.w	sl, sl, #1
 801d0be:	9304      	str	r3, [sp, #16]
 801d0c0:	9307      	str	r3, [sp, #28]
 801d0c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d0c6:	931a      	str	r3, [sp, #104]	@ 0x68
 801d0c8:	4654      	mov	r4, sl
 801d0ca:	2205      	movs	r2, #5
 801d0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d0d0:	484e      	ldr	r0, [pc, #312]	@ (801d20c <_svfiprintf_r+0x1e4>)
 801d0d2:	f7e3 f895 	bl	8000200 <memchr>
 801d0d6:	9a04      	ldr	r2, [sp, #16]
 801d0d8:	b9d8      	cbnz	r0, 801d112 <_svfiprintf_r+0xea>
 801d0da:	06d0      	lsls	r0, r2, #27
 801d0dc:	bf44      	itt	mi
 801d0de:	2320      	movmi	r3, #32
 801d0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d0e4:	0711      	lsls	r1, r2, #28
 801d0e6:	bf44      	itt	mi
 801d0e8:	232b      	movmi	r3, #43	@ 0x2b
 801d0ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d0ee:	f89a 3000 	ldrb.w	r3, [sl]
 801d0f2:	2b2a      	cmp	r3, #42	@ 0x2a
 801d0f4:	d015      	beq.n	801d122 <_svfiprintf_r+0xfa>
 801d0f6:	9a07      	ldr	r2, [sp, #28]
 801d0f8:	4654      	mov	r4, sl
 801d0fa:	2000      	movs	r0, #0
 801d0fc:	f04f 0c0a 	mov.w	ip, #10
 801d100:	4621      	mov	r1, r4
 801d102:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d106:	3b30      	subs	r3, #48	@ 0x30
 801d108:	2b09      	cmp	r3, #9
 801d10a:	d94b      	bls.n	801d1a4 <_svfiprintf_r+0x17c>
 801d10c:	b1b0      	cbz	r0, 801d13c <_svfiprintf_r+0x114>
 801d10e:	9207      	str	r2, [sp, #28]
 801d110:	e014      	b.n	801d13c <_svfiprintf_r+0x114>
 801d112:	eba0 0308 	sub.w	r3, r0, r8
 801d116:	fa09 f303 	lsl.w	r3, r9, r3
 801d11a:	4313      	orrs	r3, r2
 801d11c:	9304      	str	r3, [sp, #16]
 801d11e:	46a2      	mov	sl, r4
 801d120:	e7d2      	b.n	801d0c8 <_svfiprintf_r+0xa0>
 801d122:	9b03      	ldr	r3, [sp, #12]
 801d124:	1d19      	adds	r1, r3, #4
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	9103      	str	r1, [sp, #12]
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	bfbb      	ittet	lt
 801d12e:	425b      	neglt	r3, r3
 801d130:	f042 0202 	orrlt.w	r2, r2, #2
 801d134:	9307      	strge	r3, [sp, #28]
 801d136:	9307      	strlt	r3, [sp, #28]
 801d138:	bfb8      	it	lt
 801d13a:	9204      	strlt	r2, [sp, #16]
 801d13c:	7823      	ldrb	r3, [r4, #0]
 801d13e:	2b2e      	cmp	r3, #46	@ 0x2e
 801d140:	d10a      	bne.n	801d158 <_svfiprintf_r+0x130>
 801d142:	7863      	ldrb	r3, [r4, #1]
 801d144:	2b2a      	cmp	r3, #42	@ 0x2a
 801d146:	d132      	bne.n	801d1ae <_svfiprintf_r+0x186>
 801d148:	9b03      	ldr	r3, [sp, #12]
 801d14a:	1d1a      	adds	r2, r3, #4
 801d14c:	681b      	ldr	r3, [r3, #0]
 801d14e:	9203      	str	r2, [sp, #12]
 801d150:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d154:	3402      	adds	r4, #2
 801d156:	9305      	str	r3, [sp, #20]
 801d158:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d21c <_svfiprintf_r+0x1f4>
 801d15c:	7821      	ldrb	r1, [r4, #0]
 801d15e:	2203      	movs	r2, #3
 801d160:	4650      	mov	r0, sl
 801d162:	f7e3 f84d 	bl	8000200 <memchr>
 801d166:	b138      	cbz	r0, 801d178 <_svfiprintf_r+0x150>
 801d168:	9b04      	ldr	r3, [sp, #16]
 801d16a:	eba0 000a 	sub.w	r0, r0, sl
 801d16e:	2240      	movs	r2, #64	@ 0x40
 801d170:	4082      	lsls	r2, r0
 801d172:	4313      	orrs	r3, r2
 801d174:	3401      	adds	r4, #1
 801d176:	9304      	str	r3, [sp, #16]
 801d178:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d17c:	4824      	ldr	r0, [pc, #144]	@ (801d210 <_svfiprintf_r+0x1e8>)
 801d17e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d182:	2206      	movs	r2, #6
 801d184:	f7e3 f83c 	bl	8000200 <memchr>
 801d188:	2800      	cmp	r0, #0
 801d18a:	d036      	beq.n	801d1fa <_svfiprintf_r+0x1d2>
 801d18c:	4b21      	ldr	r3, [pc, #132]	@ (801d214 <_svfiprintf_r+0x1ec>)
 801d18e:	bb1b      	cbnz	r3, 801d1d8 <_svfiprintf_r+0x1b0>
 801d190:	9b03      	ldr	r3, [sp, #12]
 801d192:	3307      	adds	r3, #7
 801d194:	f023 0307 	bic.w	r3, r3, #7
 801d198:	3308      	adds	r3, #8
 801d19a:	9303      	str	r3, [sp, #12]
 801d19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d19e:	4433      	add	r3, r6
 801d1a0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d1a2:	e76a      	b.n	801d07a <_svfiprintf_r+0x52>
 801d1a4:	fb0c 3202 	mla	r2, ip, r2, r3
 801d1a8:	460c      	mov	r4, r1
 801d1aa:	2001      	movs	r0, #1
 801d1ac:	e7a8      	b.n	801d100 <_svfiprintf_r+0xd8>
 801d1ae:	2300      	movs	r3, #0
 801d1b0:	3401      	adds	r4, #1
 801d1b2:	9305      	str	r3, [sp, #20]
 801d1b4:	4619      	mov	r1, r3
 801d1b6:	f04f 0c0a 	mov.w	ip, #10
 801d1ba:	4620      	mov	r0, r4
 801d1bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d1c0:	3a30      	subs	r2, #48	@ 0x30
 801d1c2:	2a09      	cmp	r2, #9
 801d1c4:	d903      	bls.n	801d1ce <_svfiprintf_r+0x1a6>
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	d0c6      	beq.n	801d158 <_svfiprintf_r+0x130>
 801d1ca:	9105      	str	r1, [sp, #20]
 801d1cc:	e7c4      	b.n	801d158 <_svfiprintf_r+0x130>
 801d1ce:	fb0c 2101 	mla	r1, ip, r1, r2
 801d1d2:	4604      	mov	r4, r0
 801d1d4:	2301      	movs	r3, #1
 801d1d6:	e7f0      	b.n	801d1ba <_svfiprintf_r+0x192>
 801d1d8:	ab03      	add	r3, sp, #12
 801d1da:	9300      	str	r3, [sp, #0]
 801d1dc:	462a      	mov	r2, r5
 801d1de:	4b0e      	ldr	r3, [pc, #56]	@ (801d218 <_svfiprintf_r+0x1f0>)
 801d1e0:	a904      	add	r1, sp, #16
 801d1e2:	4638      	mov	r0, r7
 801d1e4:	f3af 8000 	nop.w
 801d1e8:	1c42      	adds	r2, r0, #1
 801d1ea:	4606      	mov	r6, r0
 801d1ec:	d1d6      	bne.n	801d19c <_svfiprintf_r+0x174>
 801d1ee:	89ab      	ldrh	r3, [r5, #12]
 801d1f0:	065b      	lsls	r3, r3, #25
 801d1f2:	f53f af2d 	bmi.w	801d050 <_svfiprintf_r+0x28>
 801d1f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d1f8:	e72c      	b.n	801d054 <_svfiprintf_r+0x2c>
 801d1fa:	ab03      	add	r3, sp, #12
 801d1fc:	9300      	str	r3, [sp, #0]
 801d1fe:	462a      	mov	r2, r5
 801d200:	4b05      	ldr	r3, [pc, #20]	@ (801d218 <_svfiprintf_r+0x1f0>)
 801d202:	a904      	add	r1, sp, #16
 801d204:	4638      	mov	r0, r7
 801d206:	f000 f879 	bl	801d2fc <_printf_i>
 801d20a:	e7ed      	b.n	801d1e8 <_svfiprintf_r+0x1c0>
 801d20c:	0801e9e0 	.word	0x0801e9e0
 801d210:	0801e9ea 	.word	0x0801e9ea
 801d214:	00000000 	.word	0x00000000
 801d218:	0801cf71 	.word	0x0801cf71
 801d21c:	0801e9e6 	.word	0x0801e9e6

0801d220 <_printf_common>:
 801d220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d224:	4616      	mov	r6, r2
 801d226:	4698      	mov	r8, r3
 801d228:	688a      	ldr	r2, [r1, #8]
 801d22a:	690b      	ldr	r3, [r1, #16]
 801d22c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d230:	4293      	cmp	r3, r2
 801d232:	bfb8      	it	lt
 801d234:	4613      	movlt	r3, r2
 801d236:	6033      	str	r3, [r6, #0]
 801d238:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d23c:	4607      	mov	r7, r0
 801d23e:	460c      	mov	r4, r1
 801d240:	b10a      	cbz	r2, 801d246 <_printf_common+0x26>
 801d242:	3301      	adds	r3, #1
 801d244:	6033      	str	r3, [r6, #0]
 801d246:	6823      	ldr	r3, [r4, #0]
 801d248:	0699      	lsls	r1, r3, #26
 801d24a:	bf42      	ittt	mi
 801d24c:	6833      	ldrmi	r3, [r6, #0]
 801d24e:	3302      	addmi	r3, #2
 801d250:	6033      	strmi	r3, [r6, #0]
 801d252:	6825      	ldr	r5, [r4, #0]
 801d254:	f015 0506 	ands.w	r5, r5, #6
 801d258:	d106      	bne.n	801d268 <_printf_common+0x48>
 801d25a:	f104 0a19 	add.w	sl, r4, #25
 801d25e:	68e3      	ldr	r3, [r4, #12]
 801d260:	6832      	ldr	r2, [r6, #0]
 801d262:	1a9b      	subs	r3, r3, r2
 801d264:	42ab      	cmp	r3, r5
 801d266:	dc26      	bgt.n	801d2b6 <_printf_common+0x96>
 801d268:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d26c:	6822      	ldr	r2, [r4, #0]
 801d26e:	3b00      	subs	r3, #0
 801d270:	bf18      	it	ne
 801d272:	2301      	movne	r3, #1
 801d274:	0692      	lsls	r2, r2, #26
 801d276:	d42b      	bmi.n	801d2d0 <_printf_common+0xb0>
 801d278:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d27c:	4641      	mov	r1, r8
 801d27e:	4638      	mov	r0, r7
 801d280:	47c8      	blx	r9
 801d282:	3001      	adds	r0, #1
 801d284:	d01e      	beq.n	801d2c4 <_printf_common+0xa4>
 801d286:	6823      	ldr	r3, [r4, #0]
 801d288:	6922      	ldr	r2, [r4, #16]
 801d28a:	f003 0306 	and.w	r3, r3, #6
 801d28e:	2b04      	cmp	r3, #4
 801d290:	bf02      	ittt	eq
 801d292:	68e5      	ldreq	r5, [r4, #12]
 801d294:	6833      	ldreq	r3, [r6, #0]
 801d296:	1aed      	subeq	r5, r5, r3
 801d298:	68a3      	ldr	r3, [r4, #8]
 801d29a:	bf0c      	ite	eq
 801d29c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d2a0:	2500      	movne	r5, #0
 801d2a2:	4293      	cmp	r3, r2
 801d2a4:	bfc4      	itt	gt
 801d2a6:	1a9b      	subgt	r3, r3, r2
 801d2a8:	18ed      	addgt	r5, r5, r3
 801d2aa:	2600      	movs	r6, #0
 801d2ac:	341a      	adds	r4, #26
 801d2ae:	42b5      	cmp	r5, r6
 801d2b0:	d11a      	bne.n	801d2e8 <_printf_common+0xc8>
 801d2b2:	2000      	movs	r0, #0
 801d2b4:	e008      	b.n	801d2c8 <_printf_common+0xa8>
 801d2b6:	2301      	movs	r3, #1
 801d2b8:	4652      	mov	r2, sl
 801d2ba:	4641      	mov	r1, r8
 801d2bc:	4638      	mov	r0, r7
 801d2be:	47c8      	blx	r9
 801d2c0:	3001      	adds	r0, #1
 801d2c2:	d103      	bne.n	801d2cc <_printf_common+0xac>
 801d2c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d2cc:	3501      	adds	r5, #1
 801d2ce:	e7c6      	b.n	801d25e <_printf_common+0x3e>
 801d2d0:	18e1      	adds	r1, r4, r3
 801d2d2:	1c5a      	adds	r2, r3, #1
 801d2d4:	2030      	movs	r0, #48	@ 0x30
 801d2d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d2da:	4422      	add	r2, r4
 801d2dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d2e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d2e4:	3302      	adds	r3, #2
 801d2e6:	e7c7      	b.n	801d278 <_printf_common+0x58>
 801d2e8:	2301      	movs	r3, #1
 801d2ea:	4622      	mov	r2, r4
 801d2ec:	4641      	mov	r1, r8
 801d2ee:	4638      	mov	r0, r7
 801d2f0:	47c8      	blx	r9
 801d2f2:	3001      	adds	r0, #1
 801d2f4:	d0e6      	beq.n	801d2c4 <_printf_common+0xa4>
 801d2f6:	3601      	adds	r6, #1
 801d2f8:	e7d9      	b.n	801d2ae <_printf_common+0x8e>
	...

0801d2fc <_printf_i>:
 801d2fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d300:	7e0f      	ldrb	r7, [r1, #24]
 801d302:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d304:	2f78      	cmp	r7, #120	@ 0x78
 801d306:	4691      	mov	r9, r2
 801d308:	4680      	mov	r8, r0
 801d30a:	460c      	mov	r4, r1
 801d30c:	469a      	mov	sl, r3
 801d30e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d312:	d807      	bhi.n	801d324 <_printf_i+0x28>
 801d314:	2f62      	cmp	r7, #98	@ 0x62
 801d316:	d80a      	bhi.n	801d32e <_printf_i+0x32>
 801d318:	2f00      	cmp	r7, #0
 801d31a:	f000 80d2 	beq.w	801d4c2 <_printf_i+0x1c6>
 801d31e:	2f58      	cmp	r7, #88	@ 0x58
 801d320:	f000 80b9 	beq.w	801d496 <_printf_i+0x19a>
 801d324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d328:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d32c:	e03a      	b.n	801d3a4 <_printf_i+0xa8>
 801d32e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d332:	2b15      	cmp	r3, #21
 801d334:	d8f6      	bhi.n	801d324 <_printf_i+0x28>
 801d336:	a101      	add	r1, pc, #4	@ (adr r1, 801d33c <_printf_i+0x40>)
 801d338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d33c:	0801d395 	.word	0x0801d395
 801d340:	0801d3a9 	.word	0x0801d3a9
 801d344:	0801d325 	.word	0x0801d325
 801d348:	0801d325 	.word	0x0801d325
 801d34c:	0801d325 	.word	0x0801d325
 801d350:	0801d325 	.word	0x0801d325
 801d354:	0801d3a9 	.word	0x0801d3a9
 801d358:	0801d325 	.word	0x0801d325
 801d35c:	0801d325 	.word	0x0801d325
 801d360:	0801d325 	.word	0x0801d325
 801d364:	0801d325 	.word	0x0801d325
 801d368:	0801d4a9 	.word	0x0801d4a9
 801d36c:	0801d3d3 	.word	0x0801d3d3
 801d370:	0801d463 	.word	0x0801d463
 801d374:	0801d325 	.word	0x0801d325
 801d378:	0801d325 	.word	0x0801d325
 801d37c:	0801d4cb 	.word	0x0801d4cb
 801d380:	0801d325 	.word	0x0801d325
 801d384:	0801d3d3 	.word	0x0801d3d3
 801d388:	0801d325 	.word	0x0801d325
 801d38c:	0801d325 	.word	0x0801d325
 801d390:	0801d46b 	.word	0x0801d46b
 801d394:	6833      	ldr	r3, [r6, #0]
 801d396:	1d1a      	adds	r2, r3, #4
 801d398:	681b      	ldr	r3, [r3, #0]
 801d39a:	6032      	str	r2, [r6, #0]
 801d39c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d3a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d3a4:	2301      	movs	r3, #1
 801d3a6:	e09d      	b.n	801d4e4 <_printf_i+0x1e8>
 801d3a8:	6833      	ldr	r3, [r6, #0]
 801d3aa:	6820      	ldr	r0, [r4, #0]
 801d3ac:	1d19      	adds	r1, r3, #4
 801d3ae:	6031      	str	r1, [r6, #0]
 801d3b0:	0606      	lsls	r6, r0, #24
 801d3b2:	d501      	bpl.n	801d3b8 <_printf_i+0xbc>
 801d3b4:	681d      	ldr	r5, [r3, #0]
 801d3b6:	e003      	b.n	801d3c0 <_printf_i+0xc4>
 801d3b8:	0645      	lsls	r5, r0, #25
 801d3ba:	d5fb      	bpl.n	801d3b4 <_printf_i+0xb8>
 801d3bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d3c0:	2d00      	cmp	r5, #0
 801d3c2:	da03      	bge.n	801d3cc <_printf_i+0xd0>
 801d3c4:	232d      	movs	r3, #45	@ 0x2d
 801d3c6:	426d      	negs	r5, r5
 801d3c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d3cc:	4859      	ldr	r0, [pc, #356]	@ (801d534 <_printf_i+0x238>)
 801d3ce:	230a      	movs	r3, #10
 801d3d0:	e011      	b.n	801d3f6 <_printf_i+0xfa>
 801d3d2:	6821      	ldr	r1, [r4, #0]
 801d3d4:	6833      	ldr	r3, [r6, #0]
 801d3d6:	0608      	lsls	r0, r1, #24
 801d3d8:	f853 5b04 	ldr.w	r5, [r3], #4
 801d3dc:	d402      	bmi.n	801d3e4 <_printf_i+0xe8>
 801d3de:	0649      	lsls	r1, r1, #25
 801d3e0:	bf48      	it	mi
 801d3e2:	b2ad      	uxthmi	r5, r5
 801d3e4:	2f6f      	cmp	r7, #111	@ 0x6f
 801d3e6:	4853      	ldr	r0, [pc, #332]	@ (801d534 <_printf_i+0x238>)
 801d3e8:	6033      	str	r3, [r6, #0]
 801d3ea:	bf14      	ite	ne
 801d3ec:	230a      	movne	r3, #10
 801d3ee:	2308      	moveq	r3, #8
 801d3f0:	2100      	movs	r1, #0
 801d3f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d3f6:	6866      	ldr	r6, [r4, #4]
 801d3f8:	60a6      	str	r6, [r4, #8]
 801d3fa:	2e00      	cmp	r6, #0
 801d3fc:	bfa2      	ittt	ge
 801d3fe:	6821      	ldrge	r1, [r4, #0]
 801d400:	f021 0104 	bicge.w	r1, r1, #4
 801d404:	6021      	strge	r1, [r4, #0]
 801d406:	b90d      	cbnz	r5, 801d40c <_printf_i+0x110>
 801d408:	2e00      	cmp	r6, #0
 801d40a:	d04b      	beq.n	801d4a4 <_printf_i+0x1a8>
 801d40c:	4616      	mov	r6, r2
 801d40e:	fbb5 f1f3 	udiv	r1, r5, r3
 801d412:	fb03 5711 	mls	r7, r3, r1, r5
 801d416:	5dc7      	ldrb	r7, [r0, r7]
 801d418:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d41c:	462f      	mov	r7, r5
 801d41e:	42bb      	cmp	r3, r7
 801d420:	460d      	mov	r5, r1
 801d422:	d9f4      	bls.n	801d40e <_printf_i+0x112>
 801d424:	2b08      	cmp	r3, #8
 801d426:	d10b      	bne.n	801d440 <_printf_i+0x144>
 801d428:	6823      	ldr	r3, [r4, #0]
 801d42a:	07df      	lsls	r7, r3, #31
 801d42c:	d508      	bpl.n	801d440 <_printf_i+0x144>
 801d42e:	6923      	ldr	r3, [r4, #16]
 801d430:	6861      	ldr	r1, [r4, #4]
 801d432:	4299      	cmp	r1, r3
 801d434:	bfde      	ittt	le
 801d436:	2330      	movle	r3, #48	@ 0x30
 801d438:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d43c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801d440:	1b92      	subs	r2, r2, r6
 801d442:	6122      	str	r2, [r4, #16]
 801d444:	f8cd a000 	str.w	sl, [sp]
 801d448:	464b      	mov	r3, r9
 801d44a:	aa03      	add	r2, sp, #12
 801d44c:	4621      	mov	r1, r4
 801d44e:	4640      	mov	r0, r8
 801d450:	f7ff fee6 	bl	801d220 <_printf_common>
 801d454:	3001      	adds	r0, #1
 801d456:	d14a      	bne.n	801d4ee <_printf_i+0x1f2>
 801d458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d45c:	b004      	add	sp, #16
 801d45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d462:	6823      	ldr	r3, [r4, #0]
 801d464:	f043 0320 	orr.w	r3, r3, #32
 801d468:	6023      	str	r3, [r4, #0]
 801d46a:	4833      	ldr	r0, [pc, #204]	@ (801d538 <_printf_i+0x23c>)
 801d46c:	2778      	movs	r7, #120	@ 0x78
 801d46e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d472:	6823      	ldr	r3, [r4, #0]
 801d474:	6831      	ldr	r1, [r6, #0]
 801d476:	061f      	lsls	r7, r3, #24
 801d478:	f851 5b04 	ldr.w	r5, [r1], #4
 801d47c:	d402      	bmi.n	801d484 <_printf_i+0x188>
 801d47e:	065f      	lsls	r7, r3, #25
 801d480:	bf48      	it	mi
 801d482:	b2ad      	uxthmi	r5, r5
 801d484:	6031      	str	r1, [r6, #0]
 801d486:	07d9      	lsls	r1, r3, #31
 801d488:	bf44      	itt	mi
 801d48a:	f043 0320 	orrmi.w	r3, r3, #32
 801d48e:	6023      	strmi	r3, [r4, #0]
 801d490:	b11d      	cbz	r5, 801d49a <_printf_i+0x19e>
 801d492:	2310      	movs	r3, #16
 801d494:	e7ac      	b.n	801d3f0 <_printf_i+0xf4>
 801d496:	4827      	ldr	r0, [pc, #156]	@ (801d534 <_printf_i+0x238>)
 801d498:	e7e9      	b.n	801d46e <_printf_i+0x172>
 801d49a:	6823      	ldr	r3, [r4, #0]
 801d49c:	f023 0320 	bic.w	r3, r3, #32
 801d4a0:	6023      	str	r3, [r4, #0]
 801d4a2:	e7f6      	b.n	801d492 <_printf_i+0x196>
 801d4a4:	4616      	mov	r6, r2
 801d4a6:	e7bd      	b.n	801d424 <_printf_i+0x128>
 801d4a8:	6833      	ldr	r3, [r6, #0]
 801d4aa:	6825      	ldr	r5, [r4, #0]
 801d4ac:	6961      	ldr	r1, [r4, #20]
 801d4ae:	1d18      	adds	r0, r3, #4
 801d4b0:	6030      	str	r0, [r6, #0]
 801d4b2:	062e      	lsls	r6, r5, #24
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	d501      	bpl.n	801d4bc <_printf_i+0x1c0>
 801d4b8:	6019      	str	r1, [r3, #0]
 801d4ba:	e002      	b.n	801d4c2 <_printf_i+0x1c6>
 801d4bc:	0668      	lsls	r0, r5, #25
 801d4be:	d5fb      	bpl.n	801d4b8 <_printf_i+0x1bc>
 801d4c0:	8019      	strh	r1, [r3, #0]
 801d4c2:	2300      	movs	r3, #0
 801d4c4:	6123      	str	r3, [r4, #16]
 801d4c6:	4616      	mov	r6, r2
 801d4c8:	e7bc      	b.n	801d444 <_printf_i+0x148>
 801d4ca:	6833      	ldr	r3, [r6, #0]
 801d4cc:	1d1a      	adds	r2, r3, #4
 801d4ce:	6032      	str	r2, [r6, #0]
 801d4d0:	681e      	ldr	r6, [r3, #0]
 801d4d2:	6862      	ldr	r2, [r4, #4]
 801d4d4:	2100      	movs	r1, #0
 801d4d6:	4630      	mov	r0, r6
 801d4d8:	f7e2 fe92 	bl	8000200 <memchr>
 801d4dc:	b108      	cbz	r0, 801d4e2 <_printf_i+0x1e6>
 801d4de:	1b80      	subs	r0, r0, r6
 801d4e0:	6060      	str	r0, [r4, #4]
 801d4e2:	6863      	ldr	r3, [r4, #4]
 801d4e4:	6123      	str	r3, [r4, #16]
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d4ec:	e7aa      	b.n	801d444 <_printf_i+0x148>
 801d4ee:	6923      	ldr	r3, [r4, #16]
 801d4f0:	4632      	mov	r2, r6
 801d4f2:	4649      	mov	r1, r9
 801d4f4:	4640      	mov	r0, r8
 801d4f6:	47d0      	blx	sl
 801d4f8:	3001      	adds	r0, #1
 801d4fa:	d0ad      	beq.n	801d458 <_printf_i+0x15c>
 801d4fc:	6823      	ldr	r3, [r4, #0]
 801d4fe:	079b      	lsls	r3, r3, #30
 801d500:	d413      	bmi.n	801d52a <_printf_i+0x22e>
 801d502:	68e0      	ldr	r0, [r4, #12]
 801d504:	9b03      	ldr	r3, [sp, #12]
 801d506:	4298      	cmp	r0, r3
 801d508:	bfb8      	it	lt
 801d50a:	4618      	movlt	r0, r3
 801d50c:	e7a6      	b.n	801d45c <_printf_i+0x160>
 801d50e:	2301      	movs	r3, #1
 801d510:	4632      	mov	r2, r6
 801d512:	4649      	mov	r1, r9
 801d514:	4640      	mov	r0, r8
 801d516:	47d0      	blx	sl
 801d518:	3001      	adds	r0, #1
 801d51a:	d09d      	beq.n	801d458 <_printf_i+0x15c>
 801d51c:	3501      	adds	r5, #1
 801d51e:	68e3      	ldr	r3, [r4, #12]
 801d520:	9903      	ldr	r1, [sp, #12]
 801d522:	1a5b      	subs	r3, r3, r1
 801d524:	42ab      	cmp	r3, r5
 801d526:	dcf2      	bgt.n	801d50e <_printf_i+0x212>
 801d528:	e7eb      	b.n	801d502 <_printf_i+0x206>
 801d52a:	2500      	movs	r5, #0
 801d52c:	f104 0619 	add.w	r6, r4, #25
 801d530:	e7f5      	b.n	801d51e <_printf_i+0x222>
 801d532:	bf00      	nop
 801d534:	0801e9f1 	.word	0x0801e9f1
 801d538:	0801ea02 	.word	0x0801ea02

0801d53c <__sflush_r>:
 801d53c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d544:	0716      	lsls	r6, r2, #28
 801d546:	4605      	mov	r5, r0
 801d548:	460c      	mov	r4, r1
 801d54a:	d454      	bmi.n	801d5f6 <__sflush_r+0xba>
 801d54c:	684b      	ldr	r3, [r1, #4]
 801d54e:	2b00      	cmp	r3, #0
 801d550:	dc02      	bgt.n	801d558 <__sflush_r+0x1c>
 801d552:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d554:	2b00      	cmp	r3, #0
 801d556:	dd48      	ble.n	801d5ea <__sflush_r+0xae>
 801d558:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d55a:	2e00      	cmp	r6, #0
 801d55c:	d045      	beq.n	801d5ea <__sflush_r+0xae>
 801d55e:	2300      	movs	r3, #0
 801d560:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d564:	682f      	ldr	r7, [r5, #0]
 801d566:	6a21      	ldr	r1, [r4, #32]
 801d568:	602b      	str	r3, [r5, #0]
 801d56a:	d030      	beq.n	801d5ce <__sflush_r+0x92>
 801d56c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d56e:	89a3      	ldrh	r3, [r4, #12]
 801d570:	0759      	lsls	r1, r3, #29
 801d572:	d505      	bpl.n	801d580 <__sflush_r+0x44>
 801d574:	6863      	ldr	r3, [r4, #4]
 801d576:	1ad2      	subs	r2, r2, r3
 801d578:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d57a:	b10b      	cbz	r3, 801d580 <__sflush_r+0x44>
 801d57c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d57e:	1ad2      	subs	r2, r2, r3
 801d580:	2300      	movs	r3, #0
 801d582:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d584:	6a21      	ldr	r1, [r4, #32]
 801d586:	4628      	mov	r0, r5
 801d588:	47b0      	blx	r6
 801d58a:	1c43      	adds	r3, r0, #1
 801d58c:	89a3      	ldrh	r3, [r4, #12]
 801d58e:	d106      	bne.n	801d59e <__sflush_r+0x62>
 801d590:	6829      	ldr	r1, [r5, #0]
 801d592:	291d      	cmp	r1, #29
 801d594:	d82b      	bhi.n	801d5ee <__sflush_r+0xb2>
 801d596:	4a2a      	ldr	r2, [pc, #168]	@ (801d640 <__sflush_r+0x104>)
 801d598:	410a      	asrs	r2, r1
 801d59a:	07d6      	lsls	r6, r2, #31
 801d59c:	d427      	bmi.n	801d5ee <__sflush_r+0xb2>
 801d59e:	2200      	movs	r2, #0
 801d5a0:	6062      	str	r2, [r4, #4]
 801d5a2:	04d9      	lsls	r1, r3, #19
 801d5a4:	6922      	ldr	r2, [r4, #16]
 801d5a6:	6022      	str	r2, [r4, #0]
 801d5a8:	d504      	bpl.n	801d5b4 <__sflush_r+0x78>
 801d5aa:	1c42      	adds	r2, r0, #1
 801d5ac:	d101      	bne.n	801d5b2 <__sflush_r+0x76>
 801d5ae:	682b      	ldr	r3, [r5, #0]
 801d5b0:	b903      	cbnz	r3, 801d5b4 <__sflush_r+0x78>
 801d5b2:	6560      	str	r0, [r4, #84]	@ 0x54
 801d5b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d5b6:	602f      	str	r7, [r5, #0]
 801d5b8:	b1b9      	cbz	r1, 801d5ea <__sflush_r+0xae>
 801d5ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d5be:	4299      	cmp	r1, r3
 801d5c0:	d002      	beq.n	801d5c8 <__sflush_r+0x8c>
 801d5c2:	4628      	mov	r0, r5
 801d5c4:	f7ff fc82 	bl	801cecc <_free_r>
 801d5c8:	2300      	movs	r3, #0
 801d5ca:	6363      	str	r3, [r4, #52]	@ 0x34
 801d5cc:	e00d      	b.n	801d5ea <__sflush_r+0xae>
 801d5ce:	2301      	movs	r3, #1
 801d5d0:	4628      	mov	r0, r5
 801d5d2:	47b0      	blx	r6
 801d5d4:	4602      	mov	r2, r0
 801d5d6:	1c50      	adds	r0, r2, #1
 801d5d8:	d1c9      	bne.n	801d56e <__sflush_r+0x32>
 801d5da:	682b      	ldr	r3, [r5, #0]
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	d0c6      	beq.n	801d56e <__sflush_r+0x32>
 801d5e0:	2b1d      	cmp	r3, #29
 801d5e2:	d001      	beq.n	801d5e8 <__sflush_r+0xac>
 801d5e4:	2b16      	cmp	r3, #22
 801d5e6:	d11e      	bne.n	801d626 <__sflush_r+0xea>
 801d5e8:	602f      	str	r7, [r5, #0]
 801d5ea:	2000      	movs	r0, #0
 801d5ec:	e022      	b.n	801d634 <__sflush_r+0xf8>
 801d5ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d5f2:	b21b      	sxth	r3, r3
 801d5f4:	e01b      	b.n	801d62e <__sflush_r+0xf2>
 801d5f6:	690f      	ldr	r7, [r1, #16]
 801d5f8:	2f00      	cmp	r7, #0
 801d5fa:	d0f6      	beq.n	801d5ea <__sflush_r+0xae>
 801d5fc:	0793      	lsls	r3, r2, #30
 801d5fe:	680e      	ldr	r6, [r1, #0]
 801d600:	bf08      	it	eq
 801d602:	694b      	ldreq	r3, [r1, #20]
 801d604:	600f      	str	r7, [r1, #0]
 801d606:	bf18      	it	ne
 801d608:	2300      	movne	r3, #0
 801d60a:	eba6 0807 	sub.w	r8, r6, r7
 801d60e:	608b      	str	r3, [r1, #8]
 801d610:	f1b8 0f00 	cmp.w	r8, #0
 801d614:	dde9      	ble.n	801d5ea <__sflush_r+0xae>
 801d616:	6a21      	ldr	r1, [r4, #32]
 801d618:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d61a:	4643      	mov	r3, r8
 801d61c:	463a      	mov	r2, r7
 801d61e:	4628      	mov	r0, r5
 801d620:	47b0      	blx	r6
 801d622:	2800      	cmp	r0, #0
 801d624:	dc08      	bgt.n	801d638 <__sflush_r+0xfc>
 801d626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d62a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d62e:	81a3      	strh	r3, [r4, #12]
 801d630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d638:	4407      	add	r7, r0
 801d63a:	eba8 0800 	sub.w	r8, r8, r0
 801d63e:	e7e7      	b.n	801d610 <__sflush_r+0xd4>
 801d640:	dfbffffe 	.word	0xdfbffffe

0801d644 <_fflush_r>:
 801d644:	b538      	push	{r3, r4, r5, lr}
 801d646:	690b      	ldr	r3, [r1, #16]
 801d648:	4605      	mov	r5, r0
 801d64a:	460c      	mov	r4, r1
 801d64c:	b913      	cbnz	r3, 801d654 <_fflush_r+0x10>
 801d64e:	2500      	movs	r5, #0
 801d650:	4628      	mov	r0, r5
 801d652:	bd38      	pop	{r3, r4, r5, pc}
 801d654:	b118      	cbz	r0, 801d65e <_fflush_r+0x1a>
 801d656:	6a03      	ldr	r3, [r0, #32]
 801d658:	b90b      	cbnz	r3, 801d65e <_fflush_r+0x1a>
 801d65a:	f7ff f913 	bl	801c884 <__sinit>
 801d65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d662:	2b00      	cmp	r3, #0
 801d664:	d0f3      	beq.n	801d64e <_fflush_r+0xa>
 801d666:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d668:	07d0      	lsls	r0, r2, #31
 801d66a:	d404      	bmi.n	801d676 <_fflush_r+0x32>
 801d66c:	0599      	lsls	r1, r3, #22
 801d66e:	d402      	bmi.n	801d676 <_fflush_r+0x32>
 801d670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d672:	f7ff fbe8 	bl	801ce46 <__retarget_lock_acquire_recursive>
 801d676:	4628      	mov	r0, r5
 801d678:	4621      	mov	r1, r4
 801d67a:	f7ff ff5f 	bl	801d53c <__sflush_r>
 801d67e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d680:	07da      	lsls	r2, r3, #31
 801d682:	4605      	mov	r5, r0
 801d684:	d4e4      	bmi.n	801d650 <_fflush_r+0xc>
 801d686:	89a3      	ldrh	r3, [r4, #12]
 801d688:	059b      	lsls	r3, r3, #22
 801d68a:	d4e1      	bmi.n	801d650 <_fflush_r+0xc>
 801d68c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d68e:	f7ff fbdb 	bl	801ce48 <__retarget_lock_release_recursive>
 801d692:	e7dd      	b.n	801d650 <_fflush_r+0xc>

0801d694 <fiprintf>:
 801d694:	b40e      	push	{r1, r2, r3}
 801d696:	b503      	push	{r0, r1, lr}
 801d698:	4601      	mov	r1, r0
 801d69a:	ab03      	add	r3, sp, #12
 801d69c:	4805      	ldr	r0, [pc, #20]	@ (801d6b4 <fiprintf+0x20>)
 801d69e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d6a2:	6800      	ldr	r0, [r0, #0]
 801d6a4:	9301      	str	r3, [sp, #4]
 801d6a6:	f000 f8bb 	bl	801d820 <_vfiprintf_r>
 801d6aa:	b002      	add	sp, #8
 801d6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801d6b0:	b003      	add	sp, #12
 801d6b2:	4770      	bx	lr
 801d6b4:	20000168 	.word	0x20000168

0801d6b8 <__swhatbuf_r>:
 801d6b8:	b570      	push	{r4, r5, r6, lr}
 801d6ba:	460c      	mov	r4, r1
 801d6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d6c0:	2900      	cmp	r1, #0
 801d6c2:	b096      	sub	sp, #88	@ 0x58
 801d6c4:	4615      	mov	r5, r2
 801d6c6:	461e      	mov	r6, r3
 801d6c8:	da0d      	bge.n	801d6e6 <__swhatbuf_r+0x2e>
 801d6ca:	89a3      	ldrh	r3, [r4, #12]
 801d6cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d6d0:	f04f 0100 	mov.w	r1, #0
 801d6d4:	bf14      	ite	ne
 801d6d6:	2340      	movne	r3, #64	@ 0x40
 801d6d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d6dc:	2000      	movs	r0, #0
 801d6de:	6031      	str	r1, [r6, #0]
 801d6e0:	602b      	str	r3, [r5, #0]
 801d6e2:	b016      	add	sp, #88	@ 0x58
 801d6e4:	bd70      	pop	{r4, r5, r6, pc}
 801d6e6:	466a      	mov	r2, sp
 801d6e8:	f000 f848 	bl	801d77c <_fstat_r>
 801d6ec:	2800      	cmp	r0, #0
 801d6ee:	dbec      	blt.n	801d6ca <__swhatbuf_r+0x12>
 801d6f0:	9901      	ldr	r1, [sp, #4]
 801d6f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d6f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d6fa:	4259      	negs	r1, r3
 801d6fc:	4159      	adcs	r1, r3
 801d6fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d702:	e7eb      	b.n	801d6dc <__swhatbuf_r+0x24>

0801d704 <__smakebuf_r>:
 801d704:	898b      	ldrh	r3, [r1, #12]
 801d706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d708:	079d      	lsls	r5, r3, #30
 801d70a:	4606      	mov	r6, r0
 801d70c:	460c      	mov	r4, r1
 801d70e:	d507      	bpl.n	801d720 <__smakebuf_r+0x1c>
 801d710:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d714:	6023      	str	r3, [r4, #0]
 801d716:	6123      	str	r3, [r4, #16]
 801d718:	2301      	movs	r3, #1
 801d71a:	6163      	str	r3, [r4, #20]
 801d71c:	b003      	add	sp, #12
 801d71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d720:	ab01      	add	r3, sp, #4
 801d722:	466a      	mov	r2, sp
 801d724:	f7ff ffc8 	bl	801d6b8 <__swhatbuf_r>
 801d728:	9f00      	ldr	r7, [sp, #0]
 801d72a:	4605      	mov	r5, r0
 801d72c:	4639      	mov	r1, r7
 801d72e:	4630      	mov	r0, r6
 801d730:	f7fe fe76 	bl	801c420 <_malloc_r>
 801d734:	b948      	cbnz	r0, 801d74a <__smakebuf_r+0x46>
 801d736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d73a:	059a      	lsls	r2, r3, #22
 801d73c:	d4ee      	bmi.n	801d71c <__smakebuf_r+0x18>
 801d73e:	f023 0303 	bic.w	r3, r3, #3
 801d742:	f043 0302 	orr.w	r3, r3, #2
 801d746:	81a3      	strh	r3, [r4, #12]
 801d748:	e7e2      	b.n	801d710 <__smakebuf_r+0xc>
 801d74a:	89a3      	ldrh	r3, [r4, #12]
 801d74c:	6020      	str	r0, [r4, #0]
 801d74e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d752:	81a3      	strh	r3, [r4, #12]
 801d754:	9b01      	ldr	r3, [sp, #4]
 801d756:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d75a:	b15b      	cbz	r3, 801d774 <__smakebuf_r+0x70>
 801d75c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d760:	4630      	mov	r0, r6
 801d762:	f000 f81d 	bl	801d7a0 <_isatty_r>
 801d766:	b128      	cbz	r0, 801d774 <__smakebuf_r+0x70>
 801d768:	89a3      	ldrh	r3, [r4, #12]
 801d76a:	f023 0303 	bic.w	r3, r3, #3
 801d76e:	f043 0301 	orr.w	r3, r3, #1
 801d772:	81a3      	strh	r3, [r4, #12]
 801d774:	89a3      	ldrh	r3, [r4, #12]
 801d776:	431d      	orrs	r5, r3
 801d778:	81a5      	strh	r5, [r4, #12]
 801d77a:	e7cf      	b.n	801d71c <__smakebuf_r+0x18>

0801d77c <_fstat_r>:
 801d77c:	b538      	push	{r3, r4, r5, lr}
 801d77e:	4d07      	ldr	r5, [pc, #28]	@ (801d79c <_fstat_r+0x20>)
 801d780:	2300      	movs	r3, #0
 801d782:	4604      	mov	r4, r0
 801d784:	4608      	mov	r0, r1
 801d786:	4611      	mov	r1, r2
 801d788:	602b      	str	r3, [r5, #0]
 801d78a:	f7e4 fc27 	bl	8001fdc <_fstat>
 801d78e:	1c43      	adds	r3, r0, #1
 801d790:	d102      	bne.n	801d798 <_fstat_r+0x1c>
 801d792:	682b      	ldr	r3, [r5, #0]
 801d794:	b103      	cbz	r3, 801d798 <_fstat_r+0x1c>
 801d796:	6023      	str	r3, [r4, #0]
 801d798:	bd38      	pop	{r3, r4, r5, pc}
 801d79a:	bf00      	nop
 801d79c:	20012ec4 	.word	0x20012ec4

0801d7a0 <_isatty_r>:
 801d7a0:	b538      	push	{r3, r4, r5, lr}
 801d7a2:	4d06      	ldr	r5, [pc, #24]	@ (801d7bc <_isatty_r+0x1c>)
 801d7a4:	2300      	movs	r3, #0
 801d7a6:	4604      	mov	r4, r0
 801d7a8:	4608      	mov	r0, r1
 801d7aa:	602b      	str	r3, [r5, #0]
 801d7ac:	f7e4 fc26 	bl	8001ffc <_isatty>
 801d7b0:	1c43      	adds	r3, r0, #1
 801d7b2:	d102      	bne.n	801d7ba <_isatty_r+0x1a>
 801d7b4:	682b      	ldr	r3, [r5, #0]
 801d7b6:	b103      	cbz	r3, 801d7ba <_isatty_r+0x1a>
 801d7b8:	6023      	str	r3, [r4, #0]
 801d7ba:	bd38      	pop	{r3, r4, r5, pc}
 801d7bc:	20012ec4 	.word	0x20012ec4

0801d7c0 <abort>:
 801d7c0:	b508      	push	{r3, lr}
 801d7c2:	2006      	movs	r0, #6
 801d7c4:	f000 f96c 	bl	801daa0 <raise>
 801d7c8:	2001      	movs	r0, #1
 801d7ca:	f7e4 fbb7 	bl	8001f3c <_exit>

0801d7ce <__sfputc_r>:
 801d7ce:	6893      	ldr	r3, [r2, #8]
 801d7d0:	3b01      	subs	r3, #1
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	b410      	push	{r4}
 801d7d6:	6093      	str	r3, [r2, #8]
 801d7d8:	da08      	bge.n	801d7ec <__sfputc_r+0x1e>
 801d7da:	6994      	ldr	r4, [r2, #24]
 801d7dc:	42a3      	cmp	r3, r4
 801d7de:	db01      	blt.n	801d7e4 <__sfputc_r+0x16>
 801d7e0:	290a      	cmp	r1, #10
 801d7e2:	d103      	bne.n	801d7ec <__sfputc_r+0x1e>
 801d7e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7e8:	f7ff b9b0 	b.w	801cb4c <__swbuf_r>
 801d7ec:	6813      	ldr	r3, [r2, #0]
 801d7ee:	1c58      	adds	r0, r3, #1
 801d7f0:	6010      	str	r0, [r2, #0]
 801d7f2:	7019      	strb	r1, [r3, #0]
 801d7f4:	4608      	mov	r0, r1
 801d7f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7fa:	4770      	bx	lr

0801d7fc <__sfputs_r>:
 801d7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7fe:	4606      	mov	r6, r0
 801d800:	460f      	mov	r7, r1
 801d802:	4614      	mov	r4, r2
 801d804:	18d5      	adds	r5, r2, r3
 801d806:	42ac      	cmp	r4, r5
 801d808:	d101      	bne.n	801d80e <__sfputs_r+0x12>
 801d80a:	2000      	movs	r0, #0
 801d80c:	e007      	b.n	801d81e <__sfputs_r+0x22>
 801d80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d812:	463a      	mov	r2, r7
 801d814:	4630      	mov	r0, r6
 801d816:	f7ff ffda 	bl	801d7ce <__sfputc_r>
 801d81a:	1c43      	adds	r3, r0, #1
 801d81c:	d1f3      	bne.n	801d806 <__sfputs_r+0xa>
 801d81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d820 <_vfiprintf_r>:
 801d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d824:	460d      	mov	r5, r1
 801d826:	b09d      	sub	sp, #116	@ 0x74
 801d828:	4614      	mov	r4, r2
 801d82a:	4698      	mov	r8, r3
 801d82c:	4606      	mov	r6, r0
 801d82e:	b118      	cbz	r0, 801d838 <_vfiprintf_r+0x18>
 801d830:	6a03      	ldr	r3, [r0, #32]
 801d832:	b90b      	cbnz	r3, 801d838 <_vfiprintf_r+0x18>
 801d834:	f7ff f826 	bl	801c884 <__sinit>
 801d838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d83a:	07d9      	lsls	r1, r3, #31
 801d83c:	d405      	bmi.n	801d84a <_vfiprintf_r+0x2a>
 801d83e:	89ab      	ldrh	r3, [r5, #12]
 801d840:	059a      	lsls	r2, r3, #22
 801d842:	d402      	bmi.n	801d84a <_vfiprintf_r+0x2a>
 801d844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d846:	f7ff fafe 	bl	801ce46 <__retarget_lock_acquire_recursive>
 801d84a:	89ab      	ldrh	r3, [r5, #12]
 801d84c:	071b      	lsls	r3, r3, #28
 801d84e:	d501      	bpl.n	801d854 <_vfiprintf_r+0x34>
 801d850:	692b      	ldr	r3, [r5, #16]
 801d852:	b99b      	cbnz	r3, 801d87c <_vfiprintf_r+0x5c>
 801d854:	4629      	mov	r1, r5
 801d856:	4630      	mov	r0, r6
 801d858:	f7ff f9b6 	bl	801cbc8 <__swsetup_r>
 801d85c:	b170      	cbz	r0, 801d87c <_vfiprintf_r+0x5c>
 801d85e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d860:	07dc      	lsls	r4, r3, #31
 801d862:	d504      	bpl.n	801d86e <_vfiprintf_r+0x4e>
 801d864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d868:	b01d      	add	sp, #116	@ 0x74
 801d86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d86e:	89ab      	ldrh	r3, [r5, #12]
 801d870:	0598      	lsls	r0, r3, #22
 801d872:	d4f7      	bmi.n	801d864 <_vfiprintf_r+0x44>
 801d874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d876:	f7ff fae7 	bl	801ce48 <__retarget_lock_release_recursive>
 801d87a:	e7f3      	b.n	801d864 <_vfiprintf_r+0x44>
 801d87c:	2300      	movs	r3, #0
 801d87e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d880:	2320      	movs	r3, #32
 801d882:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d886:	f8cd 800c 	str.w	r8, [sp, #12]
 801d88a:	2330      	movs	r3, #48	@ 0x30
 801d88c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801da3c <_vfiprintf_r+0x21c>
 801d890:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d894:	f04f 0901 	mov.w	r9, #1
 801d898:	4623      	mov	r3, r4
 801d89a:	469a      	mov	sl, r3
 801d89c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d8a0:	b10a      	cbz	r2, 801d8a6 <_vfiprintf_r+0x86>
 801d8a2:	2a25      	cmp	r2, #37	@ 0x25
 801d8a4:	d1f9      	bne.n	801d89a <_vfiprintf_r+0x7a>
 801d8a6:	ebba 0b04 	subs.w	fp, sl, r4
 801d8aa:	d00b      	beq.n	801d8c4 <_vfiprintf_r+0xa4>
 801d8ac:	465b      	mov	r3, fp
 801d8ae:	4622      	mov	r2, r4
 801d8b0:	4629      	mov	r1, r5
 801d8b2:	4630      	mov	r0, r6
 801d8b4:	f7ff ffa2 	bl	801d7fc <__sfputs_r>
 801d8b8:	3001      	adds	r0, #1
 801d8ba:	f000 80a7 	beq.w	801da0c <_vfiprintf_r+0x1ec>
 801d8be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d8c0:	445a      	add	r2, fp
 801d8c2:	9209      	str	r2, [sp, #36]	@ 0x24
 801d8c4:	f89a 3000 	ldrb.w	r3, [sl]
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	f000 809f 	beq.w	801da0c <_vfiprintf_r+0x1ec>
 801d8ce:	2300      	movs	r3, #0
 801d8d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d8d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d8d8:	f10a 0a01 	add.w	sl, sl, #1
 801d8dc:	9304      	str	r3, [sp, #16]
 801d8de:	9307      	str	r3, [sp, #28]
 801d8e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d8e4:	931a      	str	r3, [sp, #104]	@ 0x68
 801d8e6:	4654      	mov	r4, sl
 801d8e8:	2205      	movs	r2, #5
 801d8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8ee:	4853      	ldr	r0, [pc, #332]	@ (801da3c <_vfiprintf_r+0x21c>)
 801d8f0:	f7e2 fc86 	bl	8000200 <memchr>
 801d8f4:	9a04      	ldr	r2, [sp, #16]
 801d8f6:	b9d8      	cbnz	r0, 801d930 <_vfiprintf_r+0x110>
 801d8f8:	06d1      	lsls	r1, r2, #27
 801d8fa:	bf44      	itt	mi
 801d8fc:	2320      	movmi	r3, #32
 801d8fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d902:	0713      	lsls	r3, r2, #28
 801d904:	bf44      	itt	mi
 801d906:	232b      	movmi	r3, #43	@ 0x2b
 801d908:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d90c:	f89a 3000 	ldrb.w	r3, [sl]
 801d910:	2b2a      	cmp	r3, #42	@ 0x2a
 801d912:	d015      	beq.n	801d940 <_vfiprintf_r+0x120>
 801d914:	9a07      	ldr	r2, [sp, #28]
 801d916:	4654      	mov	r4, sl
 801d918:	2000      	movs	r0, #0
 801d91a:	f04f 0c0a 	mov.w	ip, #10
 801d91e:	4621      	mov	r1, r4
 801d920:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d924:	3b30      	subs	r3, #48	@ 0x30
 801d926:	2b09      	cmp	r3, #9
 801d928:	d94b      	bls.n	801d9c2 <_vfiprintf_r+0x1a2>
 801d92a:	b1b0      	cbz	r0, 801d95a <_vfiprintf_r+0x13a>
 801d92c:	9207      	str	r2, [sp, #28]
 801d92e:	e014      	b.n	801d95a <_vfiprintf_r+0x13a>
 801d930:	eba0 0308 	sub.w	r3, r0, r8
 801d934:	fa09 f303 	lsl.w	r3, r9, r3
 801d938:	4313      	orrs	r3, r2
 801d93a:	9304      	str	r3, [sp, #16]
 801d93c:	46a2      	mov	sl, r4
 801d93e:	e7d2      	b.n	801d8e6 <_vfiprintf_r+0xc6>
 801d940:	9b03      	ldr	r3, [sp, #12]
 801d942:	1d19      	adds	r1, r3, #4
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	9103      	str	r1, [sp, #12]
 801d948:	2b00      	cmp	r3, #0
 801d94a:	bfbb      	ittet	lt
 801d94c:	425b      	neglt	r3, r3
 801d94e:	f042 0202 	orrlt.w	r2, r2, #2
 801d952:	9307      	strge	r3, [sp, #28]
 801d954:	9307      	strlt	r3, [sp, #28]
 801d956:	bfb8      	it	lt
 801d958:	9204      	strlt	r2, [sp, #16]
 801d95a:	7823      	ldrb	r3, [r4, #0]
 801d95c:	2b2e      	cmp	r3, #46	@ 0x2e
 801d95e:	d10a      	bne.n	801d976 <_vfiprintf_r+0x156>
 801d960:	7863      	ldrb	r3, [r4, #1]
 801d962:	2b2a      	cmp	r3, #42	@ 0x2a
 801d964:	d132      	bne.n	801d9cc <_vfiprintf_r+0x1ac>
 801d966:	9b03      	ldr	r3, [sp, #12]
 801d968:	1d1a      	adds	r2, r3, #4
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	9203      	str	r2, [sp, #12]
 801d96e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d972:	3402      	adds	r4, #2
 801d974:	9305      	str	r3, [sp, #20]
 801d976:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801da4c <_vfiprintf_r+0x22c>
 801d97a:	7821      	ldrb	r1, [r4, #0]
 801d97c:	2203      	movs	r2, #3
 801d97e:	4650      	mov	r0, sl
 801d980:	f7e2 fc3e 	bl	8000200 <memchr>
 801d984:	b138      	cbz	r0, 801d996 <_vfiprintf_r+0x176>
 801d986:	9b04      	ldr	r3, [sp, #16]
 801d988:	eba0 000a 	sub.w	r0, r0, sl
 801d98c:	2240      	movs	r2, #64	@ 0x40
 801d98e:	4082      	lsls	r2, r0
 801d990:	4313      	orrs	r3, r2
 801d992:	3401      	adds	r4, #1
 801d994:	9304      	str	r3, [sp, #16]
 801d996:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d99a:	4829      	ldr	r0, [pc, #164]	@ (801da40 <_vfiprintf_r+0x220>)
 801d99c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d9a0:	2206      	movs	r2, #6
 801d9a2:	f7e2 fc2d 	bl	8000200 <memchr>
 801d9a6:	2800      	cmp	r0, #0
 801d9a8:	d03f      	beq.n	801da2a <_vfiprintf_r+0x20a>
 801d9aa:	4b26      	ldr	r3, [pc, #152]	@ (801da44 <_vfiprintf_r+0x224>)
 801d9ac:	bb1b      	cbnz	r3, 801d9f6 <_vfiprintf_r+0x1d6>
 801d9ae:	9b03      	ldr	r3, [sp, #12]
 801d9b0:	3307      	adds	r3, #7
 801d9b2:	f023 0307 	bic.w	r3, r3, #7
 801d9b6:	3308      	adds	r3, #8
 801d9b8:	9303      	str	r3, [sp, #12]
 801d9ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9bc:	443b      	add	r3, r7
 801d9be:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9c0:	e76a      	b.n	801d898 <_vfiprintf_r+0x78>
 801d9c2:	fb0c 3202 	mla	r2, ip, r2, r3
 801d9c6:	460c      	mov	r4, r1
 801d9c8:	2001      	movs	r0, #1
 801d9ca:	e7a8      	b.n	801d91e <_vfiprintf_r+0xfe>
 801d9cc:	2300      	movs	r3, #0
 801d9ce:	3401      	adds	r4, #1
 801d9d0:	9305      	str	r3, [sp, #20]
 801d9d2:	4619      	mov	r1, r3
 801d9d4:	f04f 0c0a 	mov.w	ip, #10
 801d9d8:	4620      	mov	r0, r4
 801d9da:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d9de:	3a30      	subs	r2, #48	@ 0x30
 801d9e0:	2a09      	cmp	r2, #9
 801d9e2:	d903      	bls.n	801d9ec <_vfiprintf_r+0x1cc>
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	d0c6      	beq.n	801d976 <_vfiprintf_r+0x156>
 801d9e8:	9105      	str	r1, [sp, #20]
 801d9ea:	e7c4      	b.n	801d976 <_vfiprintf_r+0x156>
 801d9ec:	fb0c 2101 	mla	r1, ip, r1, r2
 801d9f0:	4604      	mov	r4, r0
 801d9f2:	2301      	movs	r3, #1
 801d9f4:	e7f0      	b.n	801d9d8 <_vfiprintf_r+0x1b8>
 801d9f6:	ab03      	add	r3, sp, #12
 801d9f8:	9300      	str	r3, [sp, #0]
 801d9fa:	462a      	mov	r2, r5
 801d9fc:	4b12      	ldr	r3, [pc, #72]	@ (801da48 <_vfiprintf_r+0x228>)
 801d9fe:	a904      	add	r1, sp, #16
 801da00:	4630      	mov	r0, r6
 801da02:	f3af 8000 	nop.w
 801da06:	4607      	mov	r7, r0
 801da08:	1c78      	adds	r0, r7, #1
 801da0a:	d1d6      	bne.n	801d9ba <_vfiprintf_r+0x19a>
 801da0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801da0e:	07d9      	lsls	r1, r3, #31
 801da10:	d405      	bmi.n	801da1e <_vfiprintf_r+0x1fe>
 801da12:	89ab      	ldrh	r3, [r5, #12]
 801da14:	059a      	lsls	r2, r3, #22
 801da16:	d402      	bmi.n	801da1e <_vfiprintf_r+0x1fe>
 801da18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801da1a:	f7ff fa15 	bl	801ce48 <__retarget_lock_release_recursive>
 801da1e:	89ab      	ldrh	r3, [r5, #12]
 801da20:	065b      	lsls	r3, r3, #25
 801da22:	f53f af1f 	bmi.w	801d864 <_vfiprintf_r+0x44>
 801da26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801da28:	e71e      	b.n	801d868 <_vfiprintf_r+0x48>
 801da2a:	ab03      	add	r3, sp, #12
 801da2c:	9300      	str	r3, [sp, #0]
 801da2e:	462a      	mov	r2, r5
 801da30:	4b05      	ldr	r3, [pc, #20]	@ (801da48 <_vfiprintf_r+0x228>)
 801da32:	a904      	add	r1, sp, #16
 801da34:	4630      	mov	r0, r6
 801da36:	f7ff fc61 	bl	801d2fc <_printf_i>
 801da3a:	e7e4      	b.n	801da06 <_vfiprintf_r+0x1e6>
 801da3c:	0801e9e0 	.word	0x0801e9e0
 801da40:	0801e9ea 	.word	0x0801e9ea
 801da44:	00000000 	.word	0x00000000
 801da48:	0801d7fd 	.word	0x0801d7fd
 801da4c:	0801e9e6 	.word	0x0801e9e6

0801da50 <_raise_r>:
 801da50:	291f      	cmp	r1, #31
 801da52:	b538      	push	{r3, r4, r5, lr}
 801da54:	4605      	mov	r5, r0
 801da56:	460c      	mov	r4, r1
 801da58:	d904      	bls.n	801da64 <_raise_r+0x14>
 801da5a:	2316      	movs	r3, #22
 801da5c:	6003      	str	r3, [r0, #0]
 801da5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801da62:	bd38      	pop	{r3, r4, r5, pc}
 801da64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801da66:	b112      	cbz	r2, 801da6e <_raise_r+0x1e>
 801da68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801da6c:	b94b      	cbnz	r3, 801da82 <_raise_r+0x32>
 801da6e:	4628      	mov	r0, r5
 801da70:	f000 f830 	bl	801dad4 <_getpid_r>
 801da74:	4622      	mov	r2, r4
 801da76:	4601      	mov	r1, r0
 801da78:	4628      	mov	r0, r5
 801da7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801da7e:	f000 b817 	b.w	801dab0 <_kill_r>
 801da82:	2b01      	cmp	r3, #1
 801da84:	d00a      	beq.n	801da9c <_raise_r+0x4c>
 801da86:	1c59      	adds	r1, r3, #1
 801da88:	d103      	bne.n	801da92 <_raise_r+0x42>
 801da8a:	2316      	movs	r3, #22
 801da8c:	6003      	str	r3, [r0, #0]
 801da8e:	2001      	movs	r0, #1
 801da90:	e7e7      	b.n	801da62 <_raise_r+0x12>
 801da92:	2100      	movs	r1, #0
 801da94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801da98:	4620      	mov	r0, r4
 801da9a:	4798      	blx	r3
 801da9c:	2000      	movs	r0, #0
 801da9e:	e7e0      	b.n	801da62 <_raise_r+0x12>

0801daa0 <raise>:
 801daa0:	4b02      	ldr	r3, [pc, #8]	@ (801daac <raise+0xc>)
 801daa2:	4601      	mov	r1, r0
 801daa4:	6818      	ldr	r0, [r3, #0]
 801daa6:	f7ff bfd3 	b.w	801da50 <_raise_r>
 801daaa:	bf00      	nop
 801daac:	20000168 	.word	0x20000168

0801dab0 <_kill_r>:
 801dab0:	b538      	push	{r3, r4, r5, lr}
 801dab2:	4d07      	ldr	r5, [pc, #28]	@ (801dad0 <_kill_r+0x20>)
 801dab4:	2300      	movs	r3, #0
 801dab6:	4604      	mov	r4, r0
 801dab8:	4608      	mov	r0, r1
 801daba:	4611      	mov	r1, r2
 801dabc:	602b      	str	r3, [r5, #0]
 801dabe:	f7e4 fa2d 	bl	8001f1c <_kill>
 801dac2:	1c43      	adds	r3, r0, #1
 801dac4:	d102      	bne.n	801dacc <_kill_r+0x1c>
 801dac6:	682b      	ldr	r3, [r5, #0]
 801dac8:	b103      	cbz	r3, 801dacc <_kill_r+0x1c>
 801daca:	6023      	str	r3, [r4, #0]
 801dacc:	bd38      	pop	{r3, r4, r5, pc}
 801dace:	bf00      	nop
 801dad0:	20012ec4 	.word	0x20012ec4

0801dad4 <_getpid_r>:
 801dad4:	f7e4 ba1a 	b.w	8001f0c <_getpid>

0801dad8 <_init>:
 801dad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dada:	bf00      	nop
 801dadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dade:	bc08      	pop	{r3}
 801dae0:	469e      	mov	lr, r3
 801dae2:	4770      	bx	lr

0801dae4 <_fini>:
 801dae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dae6:	bf00      	nop
 801dae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801daea:	bc08      	pop	{r3}
 801daec:	469e      	mov	lr, r3
 801daee:	4770      	bx	lr
