
micro_ros_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017af4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c28  08017c88  08017c88  00018c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080188b0  080188b0  0001a110  2**0
                  CONTENTS
  4 .ARM          00000008  080188b0  080188b0  000198b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080188b8  080188b8  0001a110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080188b8  080188b8  000198b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080188c0  080188c0  000198c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  080188c4  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001a110  2**0
                  CONTENTS
 10 .bss          00016004  20000110  20000110  0001a110  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20016114  20016114  0001a110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001a110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026c79  00000000  00000000  0001a140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005344  00000000  00000000  00040db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020a8  00000000  00000000  00046100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000196e  00000000  00000000  000481a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007426  00000000  00000000  00049b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000279a0  00000000  00000000  00050f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb421  00000000  00000000  000788dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000076  00000000  00000000  00163cfd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000099bc  00000000  00000000  00163d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0016d730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017c6c 	.word	0x08017c6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	08017c6c 	.word	0x08017c6c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002be:	f000 b9b5 	b.w	800062c <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000354:	f000 b96a 	b.w	800062c <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	460c      	mov	r4, r1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d14e      	bne.n	800041a <__udivmoddi4+0xaa>
 800037c:	4694      	mov	ip, r2
 800037e:	458c      	cmp	ip, r1
 8000380:	4686      	mov	lr, r0
 8000382:	fab2 f282 	clz	r2, r2
 8000386:	d962      	bls.n	800044e <__udivmoddi4+0xde>
 8000388:	b14a      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038a:	f1c2 0320 	rsb	r3, r2, #32
 800038e:	4091      	lsls	r1, r2
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa0c fc02 	lsl.w	ip, ip, r2
 8000398:	4319      	orrs	r1, r3
 800039a:	fa00 fe02 	lsl.w	lr, r0, r2
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f f68c 	uxth.w	r6, ip
 80003a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb07 1114 	mls	r1, r7, r4, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb04 f106 	mul.w	r1, r4, r6
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003c6:	f080 8112 	bcs.w	80005ee <__udivmoddi4+0x27e>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 810f 	bls.w	80005ee <__udivmoddi4+0x27e>
 80003d0:	3c02      	subs	r4, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb1 f0f7 	udiv	r0, r1, r7
 80003de:	fb07 1110 	mls	r1, r7, r0, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb00 f606 	mul.w	r6, r0, r6
 80003ea:	429e      	cmp	r6, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x94>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003f6:	f080 80fc 	bcs.w	80005f2 <__udivmoddi4+0x282>
 80003fa:	429e      	cmp	r6, r3
 80003fc:	f240 80f9 	bls.w	80005f2 <__udivmoddi4+0x282>
 8000400:	4463      	add	r3, ip
 8000402:	3802      	subs	r0, #2
 8000404:	1b9b      	subs	r3, r3, r6
 8000406:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800040a:	2100      	movs	r1, #0
 800040c:	b11d      	cbz	r5, 8000416 <__udivmoddi4+0xa6>
 800040e:	40d3      	lsrs	r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	e9c5 3200 	strd	r3, r2, [r5]
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d905      	bls.n	800042a <__udivmoddi4+0xba>
 800041e:	b10d      	cbz	r5, 8000424 <__udivmoddi4+0xb4>
 8000420:	e9c5 0100 	strd	r0, r1, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	4608      	mov	r0, r1
 8000428:	e7f5      	b.n	8000416 <__udivmoddi4+0xa6>
 800042a:	fab3 f183 	clz	r1, r3
 800042e:	2900      	cmp	r1, #0
 8000430:	d146      	bne.n	80004c0 <__udivmoddi4+0x150>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d302      	bcc.n	800043c <__udivmoddi4+0xcc>
 8000436:	4290      	cmp	r0, r2
 8000438:	f0c0 80f0 	bcc.w	800061c <__udivmoddi4+0x2ac>
 800043c:	1a86      	subs	r6, r0, r2
 800043e:	eb64 0303 	sbc.w	r3, r4, r3
 8000442:	2001      	movs	r0, #1
 8000444:	2d00      	cmp	r5, #0
 8000446:	d0e6      	beq.n	8000416 <__udivmoddi4+0xa6>
 8000448:	e9c5 6300 	strd	r6, r3, [r5]
 800044c:	e7e3      	b.n	8000416 <__udivmoddi4+0xa6>
 800044e:	2a00      	cmp	r2, #0
 8000450:	f040 8090 	bne.w	8000574 <__udivmoddi4+0x204>
 8000454:	eba1 040c 	sub.w	r4, r1, ip
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa1f f78c 	uxth.w	r7, ip
 8000460:	2101      	movs	r1, #1
 8000462:	fbb4 f6f8 	udiv	r6, r4, r8
 8000466:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800046a:	fb08 4416 	mls	r4, r8, r6, r4
 800046e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000472:	fb07 f006 	mul.w	r0, r7, r6
 8000476:	4298      	cmp	r0, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x11c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x11a>
 8000484:	4298      	cmp	r0, r3
 8000486:	f200 80cd 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 800048a:	4626      	mov	r6, r4
 800048c:	1a1c      	subs	r4, r3, r0
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb4 f0f8 	udiv	r0, r4, r8
 8000496:	fb08 4410 	mls	r4, r8, r0, r4
 800049a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800049e:	fb00 f707 	mul.w	r7, r0, r7
 80004a2:	429f      	cmp	r7, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x148>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ae:	d202      	bcs.n	80004b6 <__udivmoddi4+0x146>
 80004b0:	429f      	cmp	r7, r3
 80004b2:	f200 80b0 	bhi.w	8000616 <__udivmoddi4+0x2a6>
 80004b6:	4620      	mov	r0, r4
 80004b8:	1bdb      	subs	r3, r3, r7
 80004ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004be:	e7a5      	b.n	800040c <__udivmoddi4+0x9c>
 80004c0:	f1c1 0620 	rsb	r6, r1, #32
 80004c4:	408b      	lsls	r3, r1
 80004c6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ca:	431f      	orrs	r7, r3
 80004cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004d0:	fa04 f301 	lsl.w	r3, r4, r1
 80004d4:	ea43 030c 	orr.w	r3, r3, ip
 80004d8:	40f4      	lsrs	r4, r6
 80004da:	fa00 f801 	lsl.w	r8, r0, r1
 80004de:	0c38      	lsrs	r0, r7, #16
 80004e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004e4:	fbb4 fef0 	udiv	lr, r4, r0
 80004e8:	fa1f fc87 	uxth.w	ip, r7
 80004ec:	fb00 441e 	mls	r4, r0, lr, r4
 80004f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f4:	fb0e f90c 	mul.w	r9, lr, ip
 80004f8:	45a1      	cmp	r9, r4
 80004fa:	fa02 f201 	lsl.w	r2, r2, r1
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x1a6>
 8000500:	193c      	adds	r4, r7, r4
 8000502:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000506:	f080 8084 	bcs.w	8000612 <__udivmoddi4+0x2a2>
 800050a:	45a1      	cmp	r9, r4
 800050c:	f240 8081 	bls.w	8000612 <__udivmoddi4+0x2a2>
 8000510:	f1ae 0e02 	sub.w	lr, lr, #2
 8000514:	443c      	add	r4, r7
 8000516:	eba4 0409 	sub.w	r4, r4, r9
 800051a:	fa1f f983 	uxth.w	r9, r3
 800051e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000522:	fb00 4413 	mls	r4, r0, r3, r4
 8000526:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800052a:	fb03 fc0c 	mul.w	ip, r3, ip
 800052e:	45a4      	cmp	ip, r4
 8000530:	d907      	bls.n	8000542 <__udivmoddi4+0x1d2>
 8000532:	193c      	adds	r4, r7, r4
 8000534:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000538:	d267      	bcs.n	800060a <__udivmoddi4+0x29a>
 800053a:	45a4      	cmp	ip, r4
 800053c:	d965      	bls.n	800060a <__udivmoddi4+0x29a>
 800053e:	3b02      	subs	r3, #2
 8000540:	443c      	add	r4, r7
 8000542:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000546:	fba0 9302 	umull	r9, r3, r0, r2
 800054a:	eba4 040c 	sub.w	r4, r4, ip
 800054e:	429c      	cmp	r4, r3
 8000550:	46ce      	mov	lr, r9
 8000552:	469c      	mov	ip, r3
 8000554:	d351      	bcc.n	80005fa <__udivmoddi4+0x28a>
 8000556:	d04e      	beq.n	80005f6 <__udivmoddi4+0x286>
 8000558:	b155      	cbz	r5, 8000570 <__udivmoddi4+0x200>
 800055a:	ebb8 030e 	subs.w	r3, r8, lr
 800055e:	eb64 040c 	sbc.w	r4, r4, ip
 8000562:	fa04 f606 	lsl.w	r6, r4, r6
 8000566:	40cb      	lsrs	r3, r1
 8000568:	431e      	orrs	r6, r3
 800056a:	40cc      	lsrs	r4, r1
 800056c:	e9c5 6400 	strd	r6, r4, [r5]
 8000570:	2100      	movs	r1, #0
 8000572:	e750      	b.n	8000416 <__udivmoddi4+0xa6>
 8000574:	f1c2 0320 	rsb	r3, r2, #32
 8000578:	fa20 f103 	lsr.w	r1, r0, r3
 800057c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000580:	fa24 f303 	lsr.w	r3, r4, r3
 8000584:	4094      	lsls	r4, r2
 8000586:	430c      	orrs	r4, r1
 8000588:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800058c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000590:	fa1f f78c 	uxth.w	r7, ip
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3110 	mls	r1, r8, r0, r3
 800059c:	0c23      	lsrs	r3, r4, #16
 800059e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a2:	fb00 f107 	mul.w	r1, r0, r7
 80005a6:	4299      	cmp	r1, r3
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x24c>
 80005aa:	eb1c 0303 	adds.w	r3, ip, r3
 80005ae:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005b2:	d22c      	bcs.n	800060e <__udivmoddi4+0x29e>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	d92a      	bls.n	800060e <__udivmoddi4+0x29e>
 80005b8:	3802      	subs	r0, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	1a5b      	subs	r3, r3, r1
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005c4:	fb08 3311 	mls	r3, r8, r1, r3
 80005c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005cc:	fb01 f307 	mul.w	r3, r1, r7
 80005d0:	42a3      	cmp	r3, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x276>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005dc:	d213      	bcs.n	8000606 <__udivmoddi4+0x296>
 80005de:	42a3      	cmp	r3, r4
 80005e0:	d911      	bls.n	8000606 <__udivmoddi4+0x296>
 80005e2:	3902      	subs	r1, #2
 80005e4:	4464      	add	r4, ip
 80005e6:	1ae4      	subs	r4, r4, r3
 80005e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005ec:	e739      	b.n	8000462 <__udivmoddi4+0xf2>
 80005ee:	4604      	mov	r4, r0
 80005f0:	e6f0      	b.n	80003d4 <__udivmoddi4+0x64>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e706      	b.n	8000404 <__udivmoddi4+0x94>
 80005f6:	45c8      	cmp	r8, r9
 80005f8:	d2ae      	bcs.n	8000558 <__udivmoddi4+0x1e8>
 80005fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000602:	3801      	subs	r0, #1
 8000604:	e7a8      	b.n	8000558 <__udivmoddi4+0x1e8>
 8000606:	4631      	mov	r1, r6
 8000608:	e7ed      	b.n	80005e6 <__udivmoddi4+0x276>
 800060a:	4603      	mov	r3, r0
 800060c:	e799      	b.n	8000542 <__udivmoddi4+0x1d2>
 800060e:	4630      	mov	r0, r6
 8000610:	e7d4      	b.n	80005bc <__udivmoddi4+0x24c>
 8000612:	46d6      	mov	lr, sl
 8000614:	e77f      	b.n	8000516 <__udivmoddi4+0x1a6>
 8000616:	4463      	add	r3, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e74d      	b.n	80004b8 <__udivmoddi4+0x148>
 800061c:	4606      	mov	r6, r0
 800061e:	4623      	mov	r3, r4
 8000620:	4608      	mov	r0, r1
 8000622:	e70f      	b.n	8000444 <__udivmoddi4+0xd4>
 8000624:	3e02      	subs	r6, #2
 8000626:	4463      	add	r3, ip
 8000628:	e730      	b.n	800048c <__udivmoddi4+0x11c>
 800062a:	bf00      	nop

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <transport_open>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern UART_HandleTypeDef huart2;   // 已由 CubeMX 產生

static int transport_open(struct uxrCustomTransport * transport)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* 無需額外動作，回傳 0 代表成功 */
  return 0;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <transport_close>:

static int transport_close(struct uxrCustomTransport * transport)
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
  return 0;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <transport_write>:

static size_t transport_write(struct uxrCustomTransport* transport,
                              const uint8_t* buf,
                              size_t len,
                              uint8_t* err)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
 8000668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef ret =
      HAL_UART_Transmit(&huart2, (uint8_t*)buf, len, HAL_MAX_DELAY);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	b29a      	uxth	r2, r3
 800066e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000672:	68b9      	ldr	r1, [r7, #8]
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <transport_write+0x48>)
 8000676:	f005 fb6b 	bl	8005d50 <HAL_UART_Transmit>
 800067a:	4603      	mov	r3, r0
 800067c:	75fb      	strb	r3, [r7, #23]
  *err = (ret == HAL_OK) ? 0 : 1;
 800067e:	7dfb      	ldrb	r3, [r7, #23]
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	461a      	mov	r2, r3
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	701a      	strb	r2, [r3, #0]
  return (ret == HAL_OK) ? len : 0;
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d101      	bne.n	800069a <transport_write+0x3e>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	e000      	b.n	800069c <transport_write+0x40>
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000220 	.word	0x20000220

080006a8 <transport_read>:
static size_t transport_read(struct uxrCustomTransport* transport,
                             uint8_t* buf,
                             size_t len,
                             int timeout,
                             uint8_t* err)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	603b      	str	r3, [r7, #0]
  /* 這裡用 blocking 方式簡化示範；欲提升效能可改用 DMA + IRQ */
  HAL_StatusTypeDef ret =
      HAL_UART_Receive(&huart2, buf, len, timeout);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	68b9      	ldr	r1, [r7, #8]
 80006be:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <transport_read+0x48>)
 80006c0:	f005 fbd1 	bl	8005e66 <HAL_UART_Receive>
 80006c4:	4603      	mov	r3, r0
 80006c6:	75fb      	strb	r3, [r7, #23]
  *err = (ret == HAL_OK) ? 0 : 1;
 80006c8:	7dfb      	ldrb	r3, [r7, #23]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	bf14      	ite	ne
 80006ce:	2301      	movne	r3, #1
 80006d0:	2300      	moveq	r3, #0
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	6a3b      	ldr	r3, [r7, #32]
 80006d8:	701a      	strb	r2, [r3, #0]
  return (ret == HAL_OK) ? len : 0;
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d101      	bne.n	80006e4 <transport_read+0x3c>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	e000      	b.n	80006e6 <transport_read+0x3e>
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000220 	.word	0x20000220

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 ffca 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f820 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 f96e 	bl	80009e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000704:	f000 f944 	bl	8000990 <MX_DMA_Init>
  MX_I2C1_Init();
 8000708:	f000 f884 	bl	8000814 <MX_I2C1_Init>
  MX_I2S3_Init();
 800070c:	f000 f8b0 	bl	8000870 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000710:	f000 f8de 	bl	80008d0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000714:	f000 f912 	bl	800093c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000718:	f006 ffbc 	bl	8007694 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800071c:	4a05      	ldr	r2, [pc, #20]	@ (8000734 <main+0x40>)
 800071e:	2100      	movs	r1, #0
 8000720:	4805      	ldr	r0, [pc, #20]	@ (8000738 <main+0x44>)
 8000722:	f007 f801 	bl	8007728 <osThreadNew>
 8000726:	4603      	mov	r3, r0
 8000728:	4a04      	ldr	r2, [pc, #16]	@ (800073c <main+0x48>)
 800072a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800072c:	f006 ffd6 	bl	80076dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <main+0x3c>
 8000734:	08017ce0 	.word	0x08017ce0
 8000738:	08000c19 	.word	0x08000c19
 800073c:	20000328 	.word	0x20000328

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	@ 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2230      	movs	r2, #48	@ 0x30
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f016 faf0 	bl	8016d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	4b28      	ldr	r3, [pc, #160]	@ (800080c <SystemClock_Config+0xcc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	4a27      	ldr	r2, [pc, #156]	@ (800080c <SystemClock_Config+0xcc>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	@ 0x40
 8000774:	4b25      	ldr	r3, [pc, #148]	@ (800080c <SystemClock_Config+0xcc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <SystemClock_Config+0xd0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a21      	ldr	r2, [pc, #132]	@ (8000810 <SystemClock_Config+0xd0>)
 800078a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <SystemClock_Config+0xd0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079c:	2301      	movs	r3, #1
 800079e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b0:	2308      	movs	r3, #8
 80007b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007be:	2307      	movs	r3, #7
 80007c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	4618      	mov	r0, r3
 80007c8:	f004 f942 	bl	8004a50 <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007d2:	f000 fad7 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2302      	movs	r3, #2
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2105      	movs	r1, #5
 80007f4:	4618      	mov	r0, r3
 80007f6:	f004 fba3 	bl	8004f40 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000800:	f000 fac0 	bl	8000d84 <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3750      	adds	r7, #80	@ 0x50
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_I2C1_Init+0x50>)
 800081a:	4a13      	ldr	r2, [pc, #76]	@ (8000868 <MX_I2C1_Init+0x54>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000820:	4a12      	ldr	r2, [pc, #72]	@ (800086c <MX_I2C1_Init+0x58>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000832:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000836:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000852:	f003 fb19 	bl	8003e88 <HAL_I2C_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800085c:	f000 fa92 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000012c 	.word	0x2000012c
 8000868:	40005400 	.word	0x40005400
 800086c:	000186a0 	.word	0x000186a0

08000870 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000874:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <MX_I2S3_Init+0x54>)
 8000876:	4a14      	ldr	r2, [pc, #80]	@ (80008c8 <MX_I2S3_Init+0x58>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_I2S3_Init+0x54>)
 800087c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000880:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <MX_I2S3_Init+0x54>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000888:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_I2S3_Init+0x54>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800088e:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <MX_I2S3_Init+0x54>)
 8000890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000894:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <MX_I2S3_Init+0x54>)
 8000898:	4a0c      	ldr	r2, [pc, #48]	@ (80008cc <MX_I2S3_Init+0x5c>)
 800089a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800089c:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_I2S3_Init+0x54>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <MX_I2S3_Init+0x54>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_I2S3_Init+0x54>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_I2S3_Init+0x54>)
 80008b0:	f003 fc2e 	bl	8004110 <HAL_I2S_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ba:	f000 fa63 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000180 	.word	0x20000180
 80008c8:	40003c00 	.word	0x40003c00
 80008cc:	00017700 	.word	0x00017700

080008d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d4:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <MX_SPI1_Init+0x64>)
 80008d6:	4a18      	ldr	r2, [pc, #96]	@ (8000938 <MX_SPI1_Init+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008da:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <MX_SPI1_Init+0x64>)
 80008dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e2:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ee:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_SPI1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <MX_SPI1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <MX_SPI1_Init+0x64>)
 80008fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000900:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_SPI1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <MX_SPI1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_SPI1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <MX_SPI1_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <MX_SPI1_Init+0x64>)
 800091c:	220a      	movs	r2, #10
 800091e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	@ (8000934 <MX_SPI1_Init+0x64>)
 8000922:	f004 fea1 	bl	8005668 <HAL_SPI_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800092c:	f000 fa2a 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001c8 	.word	0x200001c8
 8000938:	40013000 	.word	0x40013000

0800093c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000940:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	@ (800098c <MX_USART2_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000974:	f005 f99c 	bl	8005cb0 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f000 fa01 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000220 	.word	0x20000220
 800098c:	40004400 	.word	0x40004400

08000990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <MX_DMA_Init+0x4c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <MX_DMA_Init+0x4c>)
 80009a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <MX_DMA_Init+0x4c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2105      	movs	r1, #5
 80009b6:	2010      	movs	r0, #16
 80009b8:	f000 ff64 	bl	8001884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009bc:	2010      	movs	r0, #16
 80009be:	f000 ff7d 	bl	80018bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2105      	movs	r1, #5
 80009c6:	2011      	movs	r0, #17
 80009c8:	f000 ff5c 	bl	8001884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009cc:	2011      	movs	r0, #17
 80009ce:	f000 ff75 	bl	80018bc <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	@ 0x30
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	4b72      	ldr	r3, [pc, #456]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a71      	ldr	r2, [pc, #452]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b6f      	ldr	r3, [pc, #444]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	4b6b      	ldr	r3, [pc, #428]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a6a      	ldr	r2, [pc, #424]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b68      	ldr	r3, [pc, #416]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b64      	ldr	r3, [pc, #400]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a63      	ldr	r2, [pc, #396]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b61      	ldr	r3, [pc, #388]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a5c      	ldr	r2, [pc, #368]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b56      	ldr	r3, [pc, #344]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a55      	ldr	r2, [pc, #340]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b53      	ldr	r3, [pc, #332]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b4f      	ldr	r3, [pc, #316]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a4e      	ldr	r2, [pc, #312]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b4c      	ldr	r3, [pc, #304]	@ (8000bc4 <MX_GPIO_Init+0x1e4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2108      	movs	r1, #8
 8000aa2:	4849      	ldr	r0, [pc, #292]	@ (8000bc8 <MX_GPIO_Init+0x1e8>)
 8000aa4:	f001 fc30 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4847      	ldr	r0, [pc, #284]	@ (8000bcc <MX_GPIO_Init+0x1ec>)
 8000aae:	f001 fc2b 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000ab8:	4845      	ldr	r0, [pc, #276]	@ (8000bd0 <MX_GPIO_Init+0x1f0>)
 8000aba:	f001 fc25 	bl	8002308 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000abe:	2308      	movs	r3, #8
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	483c      	ldr	r0, [pc, #240]	@ (8000bc8 <MX_GPIO_Init+0x1e8>)
 8000ad6:	f001 fa7b 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4836      	ldr	r0, [pc, #216]	@ (8000bcc <MX_GPIO_Init+0x1ec>)
 8000af2:	f001 fa6d 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000af6:	2308      	movs	r3, #8
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b06:	2305      	movs	r3, #5
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482e      	ldr	r0, [pc, #184]	@ (8000bcc <MX_GPIO_Init+0x1ec>)
 8000b12:	f001 fa5d 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b1a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	482a      	ldr	r0, [pc, #168]	@ (8000bd4 <MX_GPIO_Init+0x1f4>)
 8000b2c:	f001 fa50 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b30:	2304      	movs	r3, #4
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4825      	ldr	r0, [pc, #148]	@ (8000bd8 <MX_GPIO_Init+0x1f8>)
 8000b44:	f001 fa44 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	481c      	ldr	r0, [pc, #112]	@ (8000bd8 <MX_GPIO_Init+0x1f8>)
 8000b66:	f001 fa33 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b6a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000b6e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4813      	ldr	r0, [pc, #76]	@ (8000bd0 <MX_GPIO_Init+0x1f0>)
 8000b84:	f001 fa24 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b88:	2320      	movs	r3, #32
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <MX_GPIO_Init+0x1f0>)
 8000b9c:	f001 fa18 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ba4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <MX_GPIO_Init+0x1e8>)
 8000bb6:	f001 fa0b 	bl	8001fd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bba:	bf00      	nop
 8000bbc:	3730      	adds	r7, #48	@ 0x30
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	40020c00 	.word	0x40020c00
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020400 	.word	0x40020400

08000bdc <timer_callback>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	e9c7 2300 	strd	r2, r3, [r7]
  (void) last_call_time;
  static int32_t count = 0;
  std_msgs__msg__Int32 msg;
  msg.data = ++count;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <timer_callback+0x34>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <timer_callback+0x34>)
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <timer_callback+0x34>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	617b      	str	r3, [r7, #20]
  rcl_publish(&_publisher, &msg, NULL);   // _publisher 改成全域
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <timer_callback+0x38>)
 8000c02:	f009 fd13 	bl	800a62c <rcl_publish>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000334 	.word	0x20000334
 8000c14:	2000032c 	.word	0x2000032c

08000c18 <StartDefaultTask>:


void StartDefaultTask(void *argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0bc      	sub	sp, #240	@ 0xf0
 8000c1c:	af02      	add	r7, sp, #8
 8000c1e:	6078      	str	r0, [r7, #4]
  rmw_uros_set_custom_transport(
 8000c20:	4b43      	ldr	r3, [pc, #268]	@ (8000d30 <StartDefaultTask+0x118>)
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	4b43      	ldr	r3, [pc, #268]	@ (8000d34 <StartDefaultTask+0x11c>)
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	4b43      	ldr	r3, [pc, #268]	@ (8000d38 <StartDefaultTask+0x120>)
 8000c2a:	4a44      	ldr	r2, [pc, #272]	@ (8000d3c <StartDefaultTask+0x124>)
 8000c2c:	4944      	ldr	r1, [pc, #272]	@ (8000d40 <StartDefaultTask+0x128>)
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f00a fcde 	bl	800b5f0 <rmw_uros_set_custom_transport>
        transport_open,
        transport_close,
        transport_write,
        transport_read);

  rcl_allocator_t allocator = rcl_get_default_allocator();
 8000c34:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f00a fc37 	bl	800b4ac <rcutils_get_default_allocator>
  rclc_support_t support;
  rcl_ret_t rc;

  rc = rclc_support_init(&support, 0, NULL, &allocator);
 8000c3e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000c42:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	f00a fb3d 	bl	800b2c8 <rclc_support_init>
 8000c4e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  if (rc != RCL_RET_OK) Error_Handler();
 8000c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <StartDefaultTask+0x46>
 8000c5a:	f000 f893 	bl	8000d84 <Error_Handler>

  rcl_node_t node;
  rc = rclc_node_init_default(&node, "stm32_node", "", &support);
 8000c5e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c62:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8000c66:	4a37      	ldr	r2, [pc, #220]	@ (8000d44 <StartDefaultTask+0x12c>)
 8000c68:	4937      	ldr	r1, [pc, #220]	@ (8000d48 <StartDefaultTask+0x130>)
 8000c6a:	f00a fb77 	bl	800b35c <rclc_node_init_default>
 8000c6e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  if (rc != RCL_RET_OK) Error_Handler();
 8000c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <StartDefaultTask+0x66>
 8000c7a:	f000 f883 	bl	8000d84 <Error_Handler>

  msg.data = 0;
 8000c7e:	4b33      	ldr	r3, [pc, #204]	@ (8000d4c <StartDefaultTask+0x134>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
  rc = rclc_publisher_init_default(
 8000c84:	f00b f9e0 	bl	800c048 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8000c8e:	4b30      	ldr	r3, [pc, #192]	@ (8000d50 <StartDefaultTask+0x138>)
 8000c90:	4830      	ldr	r0, [pc, #192]	@ (8000d54 <StartDefaultTask+0x13c>)
 8000c92:	f00a fb9f 	bl	800b3d4 <rclc_publisher_init_default>
 8000c96:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        &_publisher,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
        "counter");
  if (rc != RCL_RET_OK) Error_Handler();
 8000c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <StartDefaultTask+0x8e>
 8000ca2:	f000 f86f 	bl	8000d84 <Error_Handler>

  rcl_timer_t timer;
  rc = rclc_timer_init_default(
 8000ca6:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8000caa:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8000cae:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <StartDefaultTask+0x140>)
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	a31d      	add	r3, pc, #116	@ (adr r3, 8000d28 <StartDefaultTask+0x110>)
 8000cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb8:	f00a fbc0 	bl	800b43c <rclc_timer_init_default>
 8000cbc:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        &timer,
        &support,
        RCL_MS_TO_NS(500),
        timer_callback);
  if (rc != RCL_RET_OK) Error_Handler();
 8000cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <StartDefaultTask+0xb4>
 8000cc8:	f000 f85c 	bl	8000d84 <Error_Handler>

  rclc_executor_t executor;
  rc = rclc_executor_init(&executor, &support.context, 1, &allocator);
 8000ccc:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000cd0:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8000cd4:	f107 0008 	add.w	r0, r7, #8
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f00a f835 	bl	800ad48 <rclc_executor_init>
 8000cde:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  if (rc != RCL_RET_OK) Error_Handler();
 8000ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <StartDefaultTask+0xd6>
 8000cea:	f000 f84b 	bl	8000d84 <Error_Handler>

  rc = rclc_executor_add_timer(&executor, &timer);
 8000cee:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f00a f895 	bl	800ae28 <rclc_executor_add_timer>
 8000cfe:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  if (rc != RCL_RET_OK) Error_Handler();
 8000d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <StartDefaultTask+0xf6>
 8000d0a:	f000 f83b 	bl	8000d84 <Error_Handler>

  for(;;)
  {
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 8000d0e:	f107 0108 	add.w	r1, r7, #8
 8000d12:	4a12      	ldr	r2, [pc, #72]	@ (8000d5c <StartDefaultTask+0x144>)
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	4608      	mov	r0, r1
 8000d1a:	f00a fa9b 	bl	800b254 <rclc_executor_spin_some>
    osDelay(10);
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f006 fd94 	bl	800784c <osDelay>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 8000d24:	bf00      	nop
 8000d26:	e7f2      	b.n	8000d0e <StartDefaultTask+0xf6>
 8000d28:	1dcd6500 	.word	0x1dcd6500
 8000d2c:	00000000 	.word	0x00000000
 8000d30:	080006a9 	.word	0x080006a9
 8000d34:	0800065d 	.word	0x0800065d
 8000d38:	08000647 	.word	0x08000647
 8000d3c:	08000631 	.word	0x08000631
 8000d40:	20000220 	.word	0x20000220
 8000d44:	08017c94 	.word	0x08017c94
 8000d48:	08017c98 	.word	0x08017c98
 8000d4c:	20000330 	.word	0x20000330
 8000d50:	08017ca4 	.word	0x08017ca4
 8000d54:	2000032c 	.word	0x2000032c
 8000d58:	08000bdd 	.word	0x08000bdd
 8000d5c:	00989680 	.word	0x00989680

08000d60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d72:	f000 fcaf 	bl	80016d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40010000 	.word	0x40010000

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <Error_Handler+0x8>

08000d90 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8000d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8000da2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000da6:	a320      	add	r3, pc, #128	@ (adr r3, 8000e28 <UTILS_NanosecondsToTimespec+0x98>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fa78 	bl	80002a0 <__aeabi_ldivmod>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8000dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dbe:	a31a      	add	r3, pc, #104	@ (adr r3, 8000e28 <UTILS_NanosecondsToTimespec+0x98>)
 8000dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc4:	f7ff fa6c 	bl	80002a0 <__aeabi_ldivmod>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	da20      	bge.n	8000e16 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	4a11      	ldr	r2, [pc, #68]	@ (8000e20 <UTILS_NanosecondsToTimespec+0x90>)
 8000dda:	fb82 1203 	smull	r1, r2, r2, r3
 8000dde:	1712      	asrs	r2, r2, #28
 8000de0:	17db      	asrs	r3, r3, #31
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	6979      	ldr	r1, [r7, #20]
 8000df0:	17c8      	asrs	r0, r1, #31
 8000df2:	460c      	mov	r4, r1
 8000df4:	4605      	mov	r5, r0
 8000df6:	ebb2 0804 	subs.w	r8, r2, r4
 8000dfa:	eb63 0905 	sbc.w	r9, r3, r5
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	4906      	ldr	r1, [pc, #24]	@ (8000e24 <UTILS_NanosecondsToTimespec+0x94>)
 8000e0c:	fb01 f303 	mul.w	r3, r1, r3
 8000e10:	441a      	add	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	609a      	str	r2, [r3, #8]
    }
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000e20:	44b82fa1 	.word	0x44b82fa1
 8000e24:	3b9aca00 	.word	0x3b9aca00
 8000e28:	3b9aca00 	.word	0x3b9aca00
 8000e2c:	00000000 	.word	0x00000000

08000e30 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8000e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e34:	b08e      	sub	sp, #56	@ 0x38
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6278      	str	r0, [r7, #36]	@ 0x24
 8000e3a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8000e3c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000e40:	2300      	movs	r3, #0
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8000e52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e56:	4618      	mov	r0, r3
 8000e58:	f008 f87e 	bl	8008f58 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8000e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e5e:	17da      	asrs	r2, r3, #31
 8000e60:	61bb      	str	r3, [r7, #24]
 8000e62:	61fa      	str	r2, [r7, #28]
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	69b9      	ldr	r1, [r7, #24]
 8000e6e:	000b      	movs	r3, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8000e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e78:	2200      	movs	r2, #0
 8000e7a:	461c      	mov	r4, r3
 8000e7c:	4615      	mov	r5, r2
 8000e7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000e82:	1911      	adds	r1, r2, r4
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	416b      	adcs	r3, r5
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000e8e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8000e92:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	f04f 0400 	mov.w	r4, #0
 8000e9e:	f04f 0500 	mov.w	r5, #0
 8000ea2:	015d      	lsls	r5, r3, #5
 8000ea4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8000ea8:	0154      	lsls	r4, r2, #5
 8000eaa:	4622      	mov	r2, r4
 8000eac:	462b      	mov	r3, r5
 8000eae:	ebb2 0800 	subs.w	r8, r2, r0
 8000eb2:	eb63 0901 	sbc.w	r9, r3, r1
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	f04f 0300 	mov.w	r3, #0
 8000ebe:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8000ec2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8000ec6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8000eca:	4690      	mov	r8, r2
 8000ecc:	4699      	mov	r9, r3
 8000ece:	eb18 0a00 	adds.w	sl, r8, r0
 8000ed2:	eb49 0b01 	adc.w	fp, r9, r1
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000ee2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000ee6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8000eea:	ebb2 040a 	subs.w	r4, r2, sl
 8000eee:	603c      	str	r4, [r7, #0]
 8000ef0:	eb63 030b 	sbc.w	r3, r3, fp
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000efa:	4623      	mov	r3, r4
 8000efc:	181b      	adds	r3, r3, r0
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	462b      	mov	r3, r5
 8000f02:	eb41 0303 	adc.w	r3, r1, r3
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	6a3a      	ldr	r2, [r7, #32]
 8000f0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f0e:	f7ff ff3f 	bl	8000d90 <UTILS_NanosecondsToTimespec>

    return 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	3738      	adds	r7, #56	@ 0x38
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <HAL_MspInit+0x54>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a11      	ldr	r2, [pc, #68]	@ (8000f74 <HAL_MspInit+0x54>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <HAL_MspInit+0x54>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <HAL_MspInit+0x54>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <HAL_MspInit+0x54>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <HAL_MspInit+0x54>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	210f      	movs	r1, #15
 8000f62:	f06f 0001 	mvn.w	r0, #1
 8000f66:	f000 fc8d 	bl	8001884 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a19      	ldr	r2, [pc, #100]	@ (8000ffc <HAL_I2C_MspInit+0x84>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12c      	bne.n	8000ff4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <HAL_I2C_MspInit+0x88>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a17      	ldr	r2, [pc, #92]	@ (8001000 <HAL_I2C_MspInit+0x88>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <HAL_I2C_MspInit+0x88>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fb6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbc:	2312      	movs	r3, #18
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480c      	ldr	r0, [pc, #48]	@ (8001004 <HAL_I2C_MspInit+0x8c>)
 8000fd4:	f000 fffc 	bl	8001fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <HAL_I2C_MspInit+0x88>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	4a07      	ldr	r2, [pc, #28]	@ (8001000 <HAL_I2C_MspInit+0x88>)
 8000fe2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fe6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <HAL_I2C_MspInit+0x88>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	@ 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40005400 	.word	0x40005400
 8001000:	40023800 	.word	0x40023800
 8001004:	40020400 	.word	0x40020400

08001008 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	@ 0x38
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a31      	ldr	r2, [pc, #196]	@ (80010f8 <HAL_I2S_MspInit+0xf0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d15a      	bne.n	80010ee <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001038:	2301      	movs	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800103c:	23c0      	movs	r3, #192	@ 0xc0
 800103e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4618      	mov	r0, r3
 800104a:	f004 f9cb 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001054:	f7ff fe96 	bl	8000d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	4a26      	ldr	r2, [pc, #152]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 8001062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001066:	6413      	str	r3, [r2, #64]	@ 0x40
 8001068:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107c:	4a1f      	ldr	r2, [pc, #124]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6313      	str	r3, [r2, #48]	@ 0x30
 8001084:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001098:	4a18      	ldr	r2, [pc, #96]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <HAL_I2S_MspInit+0xf4>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010ac:	2310      	movs	r3, #16
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010bc:	2306      	movs	r3, #6
 80010be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	480e      	ldr	r0, [pc, #56]	@ (8001100 <HAL_I2S_MspInit+0xf8>)
 80010c8:	f000 ff82 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010cc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010de:	2306      	movs	r3, #6
 80010e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e6:	4619      	mov	r1, r3
 80010e8:	4806      	ldr	r0, [pc, #24]	@ (8001104 <HAL_I2S_MspInit+0xfc>)
 80010ea:	f000 ff71 	bl	8001fd0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80010ee:	bf00      	nop
 80010f0:	3738      	adds	r7, #56	@ 0x38
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40003c00 	.word	0x40003c00
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000
 8001104:	40020800 	.word	0x40020800

08001108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a19      	ldr	r2, [pc, #100]	@ (800118c <HAL_SPI_MspInit+0x84>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12b      	bne.n	8001182 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_SPI_MspInit+0x88>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	4a17      	ldr	r2, [pc, #92]	@ (8001190 <HAL_SPI_MspInit+0x88>)
 8001134:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001138:	6453      	str	r3, [r2, #68]	@ 0x44
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <HAL_SPI_MspInit+0x88>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <HAL_SPI_MspInit+0x88>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a10      	ldr	r2, [pc, #64]	@ (8001190 <HAL_SPI_MspInit+0x88>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <HAL_SPI_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001162:	23e0      	movs	r3, #224	@ 0xe0
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001172:	2305      	movs	r3, #5
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <HAL_SPI_MspInit+0x8c>)
 800117e:	f000 ff27 	bl	8001fd0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	@ 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40013000 	.word	0x40013000
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000

08001198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a4d      	ldr	r2, [pc, #308]	@ (80012ec <HAL_UART_MspInit+0x154>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	f040 8093 	bne.w	80012e2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	4b4b      	ldr	r3, [pc, #300]	@ (80012f0 <HAL_UART_MspInit+0x158>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	4a4a      	ldr	r2, [pc, #296]	@ (80012f0 <HAL_UART_MspInit+0x158>)
 80011c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80011cc:	4b48      	ldr	r3, [pc, #288]	@ (80012f0 <HAL_UART_MspInit+0x158>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	4b44      	ldr	r3, [pc, #272]	@ (80012f0 <HAL_UART_MspInit+0x158>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	4a43      	ldr	r2, [pc, #268]	@ (80012f0 <HAL_UART_MspInit+0x158>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e8:	4b41      	ldr	r3, [pc, #260]	@ (80012f0 <HAL_UART_MspInit+0x158>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011f4:	230c      	movs	r3, #12
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001204:	2307      	movs	r3, #7
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4839      	ldr	r0, [pc, #228]	@ (80012f4 <HAL_UART_MspInit+0x15c>)
 8001210:	f000 fede 	bl	8001fd0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001214:	4b38      	ldr	r3, [pc, #224]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 8001216:	4a39      	ldr	r2, [pc, #228]	@ (80012fc <HAL_UART_MspInit+0x164>)
 8001218:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800121a:	4b37      	ldr	r3, [pc, #220]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 800121c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001220:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001222:	4b35      	ldr	r3, [pc, #212]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001228:	4b33      	ldr	r3, [pc, #204]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 8001230:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001234:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001236:	4b30      	ldr	r3, [pc, #192]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123c:	4b2e      	ldr	r3, [pc, #184]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001242:	4b2d      	ldr	r3, [pc, #180]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 8001244:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001248:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800124a:	4b2b      	ldr	r3, [pc, #172]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 800124c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001250:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001252:	4b29      	ldr	r3, [pc, #164]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 8001254:	2200      	movs	r2, #0
 8001256:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001258:	4827      	ldr	r0, [pc, #156]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 800125a:	f000 fb3d 	bl	80018d8 <HAL_DMA_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001264:	f7ff fd8e 	bl	8000d84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a23      	ldr	r2, [pc, #140]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 800126c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800126e:	4a22      	ldr	r2, [pc, #136]	@ (80012f8 <HAL_UART_MspInit+0x160>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001274:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <HAL_UART_MspInit+0x168>)
 8001276:	4a23      	ldr	r2, [pc, #140]	@ (8001304 <HAL_UART_MspInit+0x16c>)
 8001278:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800127a:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <HAL_UART_MspInit+0x168>)
 800127c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001280:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <HAL_UART_MspInit+0x168>)
 8001284:	2240      	movs	r2, #64	@ 0x40
 8001286:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <HAL_UART_MspInit+0x168>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <HAL_UART_MspInit+0x168>)
 8001290:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001294:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001296:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <HAL_UART_MspInit+0x168>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800129c:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <HAL_UART_MspInit+0x168>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <HAL_UART_MspInit+0x168>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <HAL_UART_MspInit+0x168>)
 80012aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012ae:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b0:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <HAL_UART_MspInit+0x168>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012b6:	4812      	ldr	r0, [pc, #72]	@ (8001300 <HAL_UART_MspInit+0x168>)
 80012b8:	f000 fb0e 	bl	80018d8 <HAL_DMA_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80012c2:	f7ff fd5f 	bl	8000d84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <HAL_UART_MspInit+0x168>)
 80012ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80012cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001300 <HAL_UART_MspInit+0x168>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2105      	movs	r1, #5
 80012d6:	2026      	movs	r0, #38	@ 0x26
 80012d8:	f000 fad4 	bl	8001884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012dc:	2026      	movs	r0, #38	@ 0x26
 80012de:	f000 faed 	bl	80018bc <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	@ 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40004400 	.word	0x40004400
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	20000268 	.word	0x20000268
 80012fc:	40026088 	.word	0x40026088
 8001300:	200002c8 	.word	0x200002c8
 8001304:	400260a0 	.word	0x400260a0

08001308 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	@ 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b2f      	ldr	r3, [pc, #188]	@ (80013dc <HAL_InitTick+0xd4>)
 800131e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001320:	4a2e      	ldr	r2, [pc, #184]	@ (80013dc <HAL_InitTick+0xd4>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6453      	str	r3, [r2, #68]	@ 0x44
 8001328:	4b2c      	ldr	r3, [pc, #176]	@ (80013dc <HAL_InitTick+0xd4>)
 800132a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001334:	f107 020c 	add.w	r2, r7, #12
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f004 f81e 	bl	8005380 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001344:	f004 f808 	bl	8005358 <HAL_RCC_GetPCLK2Freq>
 8001348:	4603      	mov	r3, r0
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800134e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001350:	4a23      	ldr	r2, [pc, #140]	@ (80013e0 <HAL_InitTick+0xd8>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	0c9b      	lsrs	r3, r3, #18
 8001358:	3b01      	subs	r3, #1
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800135c:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <HAL_InitTick+0xdc>)
 800135e:	4a22      	ldr	r2, [pc, #136]	@ (80013e8 <HAL_InitTick+0xe0>)
 8001360:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <HAL_InitTick+0xdc>)
 8001364:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001368:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800136a:	4a1e      	ldr	r2, [pc, #120]	@ (80013e4 <HAL_InitTick+0xdc>)
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <HAL_InitTick+0xdc>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <HAL_InitTick+0xdc>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <HAL_InitTick+0xdc>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001382:	4818      	ldr	r0, [pc, #96]	@ (80013e4 <HAL_InitTick+0xdc>)
 8001384:	f004 f9f9 	bl	800577a <HAL_TIM_Base_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800138e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001392:	2b00      	cmp	r3, #0
 8001394:	d11b      	bne.n	80013ce <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001396:	4813      	ldr	r0, [pc, #76]	@ (80013e4 <HAL_InitTick+0xdc>)
 8001398:	f004 fa48 	bl	800582c <HAL_TIM_Base_Start_IT>
 800139c:	4603      	mov	r3, r0
 800139e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80013a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d111      	bne.n	80013ce <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013aa:	2019      	movs	r0, #25
 80013ac:	f000 fa86 	bl	80018bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	d808      	bhi.n	80013c8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80013b6:	2200      	movs	r2, #0
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	2019      	movs	r0, #25
 80013bc:	f000 fa62 	bl	8001884 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c0:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <HAL_InitTick+0xe4>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e002      	b.n	80013ce <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3730      	adds	r7, #48	@ 0x30
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	431bde83 	.word	0x431bde83
 80013e4:	20000338 	.word	0x20000338
 80013e8:	40010000 	.word	0x40010000
 80013ec:	20000008 	.word	0x20000008

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <NMI_Handler+0x4>

080013f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <MemManage_Handler+0x4>

08001408 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <UsageFault_Handler+0x4>

08001418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <DMA1_Stream5_IRQHandler+0x10>)
 800142e:	f000 fb93 	bl	8001b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000268 	.word	0x20000268

0800143c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <DMA1_Stream6_IRQHandler+0x10>)
 8001442:	f000 fb89 	bl	8001b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200002c8 	.word	0x200002c8

08001450 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001454:	4802      	ldr	r0, [pc, #8]	@ (8001460 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001456:	f004 fa59 	bl	800590c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000338 	.word	0x20000338

08001464 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <USART2_IRQHandler+0x10>)
 800146a:	f004 fd93 	bl	8005f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000220 	.word	0x20000220

08001478 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800147c:	4802      	ldr	r0, [pc, #8]	@ (8001488 <OTG_FS_IRQHandler+0x10>)
 800147e:	f000 ff5c 	bl	800233a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200110dc 	.word	0x200110dc

0800148c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return 1;
 8001490:	2301      	movs	r3, #1
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_kill>:

int _kill(int pid, int sig)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014a6:	f015 fcd9 	bl	8016e5c <__errno>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2216      	movs	r2, #22
 80014ae:	601a      	str	r2, [r3, #0]
  return -1;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_exit>:

void _exit (int status)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ffe7 	bl	800149c <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ce:	bf00      	nop
 80014d0:	e7fd      	b.n	80014ce <_exit+0x12>

080014d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e00a      	b.n	80014fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e4:	f3af 8000 	nop.w
 80014e8:	4601      	mov	r1, r0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	60ba      	str	r2, [r7, #8]
 80014f0:	b2ca      	uxtb	r2, r1
 80014f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3301      	adds	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	dbf0      	blt.n	80014e4 <_read+0x12>
  }

  return len;
 8001502:	687b      	ldr	r3, [r7, #4]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e009      	b.n	8001532 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	60ba      	str	r2, [r7, #8]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	dbf1      	blt.n	800151e <_write+0x12>
  }
  return len;
 800153a:	687b      	ldr	r3, [r7, #4]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_close>:

int _close(int file)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800156c:	605a      	str	r2, [r3, #4]
  return 0;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_isatty>:

int _isatty(int file)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001584:	2301      	movs	r3, #1
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b4:	4a14      	ldr	r2, [pc, #80]	@ (8001608 <_sbrk+0x5c>)
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <_sbrk+0x60>)
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <_sbrk+0x64>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <_sbrk+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d207      	bcs.n	80015ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015dc:	f015 fc3e 	bl	8016e5c <__errno>
 80015e0:	4603      	mov	r3, r0
 80015e2:	220c      	movs	r2, #12
 80015e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015ea:	e009      	b.n	8001600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f2:	4b07      	ldr	r3, [pc, #28]	@ (8001610 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a05      	ldr	r2, [pc, #20]	@ (8001610 <_sbrk+0x64>)
 80015fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20020000 	.word	0x20020000
 800160c:	00000400 	.word	0x00000400
 8001610:	20000384 	.word	0x20000384
 8001614:	20016118 	.word	0x20016118

08001618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <SystemInit+0x20>)
 800161e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001622:	4a05      	ldr	r2, [pc, #20]	@ (8001638 <SystemInit+0x20>)
 8001624:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001628:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001674 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001640:	f7ff ffea 	bl	8001618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001644:	480c      	ldr	r0, [pc, #48]	@ (8001678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001646:	490d      	ldr	r1, [pc, #52]	@ (800167c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001648:	4a0d      	ldr	r2, [pc, #52]	@ (8001680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800165c:	4c0a      	ldr	r4, [pc, #40]	@ (8001688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166a:	f015 fbfd 	bl	8016e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff f841 	bl	80006f4 <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001680:	080188c4 	.word	0x080188c4
  ldr r2, =_sbss
 8001684:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001688:	20016114 	.word	0x20016114

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001694:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0d      	ldr	r2, [pc, #52]	@ (80016d0 <HAL_Init+0x40>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800169e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a0:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <HAL_Init+0x40>)
 80016a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a07      	ldr	r2, [pc, #28]	@ (80016d0 <HAL_Init+0x40>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 f8d8 	bl	800186e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016be:	200f      	movs	r0, #15
 80016c0:	f7ff fe22 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c4:	f7ff fc2c 	bl	8000f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023c00 	.word	0x40023c00

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	2000000c 	.word	0x2000000c
 80016f8:	20000388 	.word	0x20000388

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000388 	.word	0x20000388

08001714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	@ (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db0b      	blt.n	80017a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	4907      	ldr	r1, [pc, #28]	@ (80017b0 <__NVIC_EnableIRQ+0x38>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	2001      	movs	r0, #1
 800179a:	fa00 f202 	lsl.w	r2, r0, r2
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000e100 	.word	0xe000e100

080017b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	db0a      	blt.n	80017de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	490c      	ldr	r1, [pc, #48]	@ (8001800 <__NVIC_SetPriority+0x4c>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	0112      	lsls	r2, r2, #4
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	440b      	add	r3, r1
 80017d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017dc:	e00a      	b.n	80017f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4908      	ldr	r1, [pc, #32]	@ (8001804 <__NVIC_SetPriority+0x50>)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	3b04      	subs	r3, #4
 80017ec:	0112      	lsls	r2, r2, #4
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	440b      	add	r3, r1
 80017f2:	761a      	strb	r2, [r3, #24]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000e100 	.word	0xe000e100
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f1c3 0307 	rsb	r3, r3, #7
 8001822:	2b04      	cmp	r3, #4
 8001824:	bf28      	it	cs
 8001826:	2304      	movcs	r3, #4
 8001828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3304      	adds	r3, #4
 800182e:	2b06      	cmp	r3, #6
 8001830:	d902      	bls.n	8001838 <NVIC_EncodePriority+0x30>
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3b03      	subs	r3, #3
 8001836:	e000      	b.n	800183a <NVIC_EncodePriority+0x32>
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	401a      	ands	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001850:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	43d9      	mvns	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	4313      	orrs	r3, r2
         );
}
 8001862:	4618      	mov	r0, r3
 8001864:	3724      	adds	r7, #36	@ 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ff4c 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001896:	f7ff ff61 	bl	800175c <__NVIC_GetPriorityGrouping>
 800189a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	6978      	ldr	r0, [r7, #20]
 80018a2:	f7ff ffb1 	bl	8001808 <NVIC_EncodePriority>
 80018a6:	4602      	mov	r2, r0
 80018a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff80 	bl	80017b4 <__NVIC_SetPriority>
}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff54 	bl	8001778 <__NVIC_EnableIRQ>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff ff0a 	bl	80016fc <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e099      	b.n	8001a28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001914:	e00f      	b.n	8001936 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001916:	f7ff fef1 	bl	80016fc <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b05      	cmp	r3, #5
 8001922:	d908      	bls.n	8001936 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2220      	movs	r2, #32
 8001928:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2203      	movs	r2, #3
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e078      	b.n	8001a28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1e8      	bne.n	8001916 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	4b38      	ldr	r3, [pc, #224]	@ (8001a30 <HAL_DMA_Init+0x158>)
 8001950:	4013      	ands	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001962:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4313      	orrs	r3, r2
 8001986:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198c:	2b04      	cmp	r3, #4
 800198e:	d107      	bne.n	80019a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001998:	4313      	orrs	r3, r2
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f023 0307 	bic.w	r3, r3, #7
 80019b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	4313      	orrs	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d117      	bne.n	80019fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00e      	beq.n	80019fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fa7b 	bl	8001ed8 <DMA_CheckFifoParam>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2240      	movs	r2, #64	@ 0x40
 80019ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80019f6:	2301      	movs	r3, #1
 80019f8:	e016      	b.n	8001a28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fa32 	bl	8001e6c <DMA_CalcBaseAndBitshift>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a10:	223f      	movs	r2, #63	@ 0x3f
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	f010803f 	.word	0xf010803f

08001a34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a42:	f7ff fe5b 	bl	80016fc <HAL_GetTick>
 8001a46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d008      	beq.n	8001a66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2280      	movs	r2, #128	@ 0x80
 8001a58:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e052      	b.n	8001b0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0216 	bic.w	r2, r2, #22
 8001a74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d103      	bne.n	8001a96 <HAL_DMA_Abort+0x62>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0208 	bic.w	r2, r2, #8
 8001aa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab6:	e013      	b.n	8001ae0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ab8:	f7ff fe20 	bl	80016fc <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d90c      	bls.n	8001ae0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e015      	b.n	8001b0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1e4      	bne.n	8001ab8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af2:	223f      	movs	r2, #63	@ 0x3f
 8001af4:	409a      	lsls	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d004      	beq.n	8001b32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2280      	movs	r2, #128	@ 0x80
 8001b2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00c      	b.n	8001b4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2205      	movs	r2, #5
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b64:	4b8e      	ldr	r3, [pc, #568]	@ (8001da0 <HAL_DMA_IRQHandler+0x248>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a8e      	ldr	r2, [pc, #568]	@ (8001da4 <HAL_DMA_IRQHandler+0x24c>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0a9b      	lsrs	r3, r3, #10
 8001b70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b82:	2208      	movs	r2, #8
 8001b84:	409a      	lsls	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01a      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0204 	bic.w	r2, r2, #4
 8001baa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc8:	2201      	movs	r2, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d012      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be6:	2201      	movs	r2, #1
 8001be8:	409a      	lsls	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf2:	f043 0202 	orr.w	r2, r3, #2
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfe:	2204      	movs	r2, #4
 8001c00:	409a      	lsls	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d012      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c28:	f043 0204 	orr.w	r2, r3, #4
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c34:	2210      	movs	r2, #16
 8001c36:	409a      	lsls	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d043      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d03c      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	2210      	movs	r2, #16
 8001c54:	409a      	lsls	r2, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d018      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d108      	bne.n	8001c88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d024      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
 8001c86:	e01f      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
 8001c98:	e016      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0208 	bic.w	r2, r2, #8
 8001cb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ccc:	2220      	movs	r2, #32
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 808f 	beq.w	8001df8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8087 	beq.w	8001df8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cee:	2220      	movs	r2, #32
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d136      	bne.n	8001d70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0216 	bic.w	r2, r2, #22
 8001d10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d103      	bne.n	8001d32 <HAL_DMA_IRQHandler+0x1da>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0208 	bic.w	r2, r2, #8
 8001d40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d46:	223f      	movs	r2, #63	@ 0x3f
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d07e      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
        }
        return;
 8001d6e:	e079      	b.n	8001e64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d01d      	beq.n	8001dba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d031      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
 8001d9c:	e02c      	b.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
 8001d9e:	bf00      	nop
 8001da0:	20000004 	.word	0x20000004
 8001da4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d023      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
 8001db8:	e01e      	b.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10f      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0210 	bic.w	r2, r2, #16
 8001dd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d032      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d022      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2205      	movs	r2, #5
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d307      	bcc.n	8001e40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f2      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x2cc>
 8001e3e:	e000      	b.n	8001e42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
 8001e62:	e000      	b.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e64:	bf00      	nop
    }
  }
}
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	3b10      	subs	r3, #16
 8001e7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ed0 <DMA_CalcBaseAndBitshift+0x64>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e86:	4a13      	ldr	r2, [pc, #76]	@ (8001ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d909      	bls.n	8001eae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ea2:	f023 0303 	bic.w	r3, r3, #3
 8001ea6:	1d1a      	adds	r2, r3, #4
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	659a      	str	r2, [r3, #88]	@ 0x58
 8001eac:	e007      	b.n	8001ebe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001eb6:	f023 0303 	bic.w	r3, r3, #3
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	aaaaaaab 	.word	0xaaaaaaab
 8001ed4:	08017d1c 	.word	0x08017d1c

08001ed8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d11f      	bne.n	8001f32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d856      	bhi.n	8001fa6 <DMA_CheckFifoParam+0xce>
 8001ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8001f00 <DMA_CheckFifoParam+0x28>)
 8001efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efe:	bf00      	nop
 8001f00:	08001f11 	.word	0x08001f11
 8001f04:	08001f23 	.word	0x08001f23
 8001f08:	08001f11 	.word	0x08001f11
 8001f0c:	08001fa7 	.word	0x08001fa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d046      	beq.n	8001faa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f20:	e043      	b.n	8001faa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f2a:	d140      	bne.n	8001fae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f30:	e03d      	b.n	8001fae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f3a:	d121      	bne.n	8001f80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d837      	bhi.n	8001fb2 <DMA_CheckFifoParam+0xda>
 8001f42:	a201      	add	r2, pc, #4	@ (adr r2, 8001f48 <DMA_CheckFifoParam+0x70>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08001f59 	.word	0x08001f59
 8001f4c:	08001f5f 	.word	0x08001f5f
 8001f50:	08001f59 	.word	0x08001f59
 8001f54:	08001f71 	.word	0x08001f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f5c:	e030      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d025      	beq.n	8001fb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f6e:	e022      	b.n	8001fb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f78:	d11f      	bne.n	8001fba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f7e:	e01c      	b.n	8001fba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d903      	bls.n	8001f8e <DMA_CheckFifoParam+0xb6>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d003      	beq.n	8001f94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f8c:	e018      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
      break;
 8001f92:	e015      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00e      	beq.n	8001fbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa4:	e00b      	b.n	8001fbe <DMA_CheckFifoParam+0xe6>
      break;
 8001fa6:	bf00      	nop
 8001fa8:	e00a      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001faa:	bf00      	nop
 8001fac:	e008      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fae:	bf00      	nop
 8001fb0:	e006      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fb2:	bf00      	nop
 8001fb4:	e004      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fb6:	bf00      	nop
 8001fb8:	e002      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fba:	bf00      	nop
 8001fbc:	e000      	b.n	8001fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fbe:	bf00      	nop
    }
  } 
  
  return status; 
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	@ 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	e16b      	b.n	80022c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fec:	2201      	movs	r2, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	429a      	cmp	r2, r3
 8002006:	f040 815a 	bne.w	80022be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d005      	beq.n	8002022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201e:	2b02      	cmp	r3, #2
 8002020:	d130      	bne.n	8002084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002058:	2201      	movs	r2, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 0201 	and.w	r2, r3, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b03      	cmp	r3, #3
 800208e:	d017      	beq.n	80020c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d123      	bne.n	8002114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	08da      	lsrs	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3208      	adds	r2, #8
 80020d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	220f      	movs	r2, #15
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	08da      	lsrs	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3208      	adds	r2, #8
 800210e:	69b9      	ldr	r1, [r7, #24]
 8002110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0203 	and.w	r2, r3, #3
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80b4 	beq.w	80022be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b60      	ldr	r3, [pc, #384]	@ (80022dc <HAL_GPIO_Init+0x30c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	4a5f      	ldr	r2, [pc, #380]	@ (80022dc <HAL_GPIO_Init+0x30c>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002164:	6453      	str	r3, [r2, #68]	@ 0x44
 8002166:	4b5d      	ldr	r3, [pc, #372]	@ (80022dc <HAL_GPIO_Init+0x30c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002172:	4a5b      	ldr	r2, [pc, #364]	@ (80022e0 <HAL_GPIO_Init+0x310>)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	220f      	movs	r2, #15
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a52      	ldr	r2, [pc, #328]	@ (80022e4 <HAL_GPIO_Init+0x314>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d02b      	beq.n	80021f6 <HAL_GPIO_Init+0x226>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a51      	ldr	r2, [pc, #324]	@ (80022e8 <HAL_GPIO_Init+0x318>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d025      	beq.n	80021f2 <HAL_GPIO_Init+0x222>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a50      	ldr	r2, [pc, #320]	@ (80022ec <HAL_GPIO_Init+0x31c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01f      	beq.n	80021ee <HAL_GPIO_Init+0x21e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4f      	ldr	r2, [pc, #316]	@ (80022f0 <HAL_GPIO_Init+0x320>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d019      	beq.n	80021ea <HAL_GPIO_Init+0x21a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4e      	ldr	r2, [pc, #312]	@ (80022f4 <HAL_GPIO_Init+0x324>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0x216>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4d      	ldr	r2, [pc, #308]	@ (80022f8 <HAL_GPIO_Init+0x328>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00d      	beq.n	80021e2 <HAL_GPIO_Init+0x212>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	@ (80022fc <HAL_GPIO_Init+0x32c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <HAL_GPIO_Init+0x20e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002300 <HAL_GPIO_Init+0x330>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_GPIO_Init+0x20a>
 80021d6:	2307      	movs	r3, #7
 80021d8:	e00e      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021da:	2308      	movs	r3, #8
 80021dc:	e00c      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021de:	2306      	movs	r3, #6
 80021e0:	e00a      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021e2:	2305      	movs	r3, #5
 80021e4:	e008      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021e6:	2304      	movs	r3, #4
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021ea:	2303      	movs	r3, #3
 80021ec:	e004      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_GPIO_Init+0x228>
 80021f6:	2300      	movs	r3, #0
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	f002 0203 	and.w	r2, r2, #3
 80021fe:	0092      	lsls	r2, r2, #2
 8002200:	4093      	lsls	r3, r2
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002208:	4935      	ldr	r1, [pc, #212]	@ (80022e0 <HAL_GPIO_Init+0x310>)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	3302      	adds	r3, #2
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002216:	4b3b      	ldr	r3, [pc, #236]	@ (8002304 <HAL_GPIO_Init+0x334>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800223a:	4a32      	ldr	r2, [pc, #200]	@ (8002304 <HAL_GPIO_Init+0x334>)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002240:	4b30      	ldr	r3, [pc, #192]	@ (8002304 <HAL_GPIO_Init+0x334>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002264:	4a27      	ldr	r2, [pc, #156]	@ (8002304 <HAL_GPIO_Init+0x334>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800226a:	4b26      	ldr	r3, [pc, #152]	@ (8002304 <HAL_GPIO_Init+0x334>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800228e:	4a1d      	ldr	r2, [pc, #116]	@ (8002304 <HAL_GPIO_Init+0x334>)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002294:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_GPIO_Init+0x334>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b8:	4a12      	ldr	r2, [pc, #72]	@ (8002304 <HAL_GPIO_Init+0x334>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3301      	adds	r3, #1
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	2b0f      	cmp	r3, #15
 80022c8:	f67f ae90 	bls.w	8001fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3724      	adds	r7, #36	@ 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40013800 	.word	0x40013800
 80022e4:	40020000 	.word	0x40020000
 80022e8:	40020400 	.word	0x40020400
 80022ec:	40020800 	.word	0x40020800
 80022f0:	40020c00 	.word	0x40020c00
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40021400 	.word	0x40021400
 80022fc:	40021800 	.word	0x40021800
 8002300:	40021c00 	.word	0x40021c00
 8002304:	40013c00 	.word	0x40013c00

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002324:	e003      	b.n	800232e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f004 fe69 	bl	8007028 <USB_GetMode>
 8002356:	4603      	mov	r3, r0
 8002358:	2b01      	cmp	r3, #1
 800235a:	f040 80fb 	bne.w	8002554 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f004 fe2c 	bl	8006fc0 <USB_ReadInterrupts>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80f1 	beq.w	8002552 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f004 fe23 	bl	8006fc0 <USB_ReadInterrupts>
 800237a:	4603      	mov	r3, r0
 800237c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002380:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002384:	d104      	bne.n	8002390 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800238e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f004 fe13 	bl	8006fc0 <USB_ReadInterrupts>
 800239a:	4603      	mov	r3, r0
 800239c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023a4:	d104      	bne.n	80023b0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80023ae:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f004 fe03 	bl	8006fc0 <USB_ReadInterrupts>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023c4:	d104      	bne.n	80023d0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023ce:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 fdf3 	bl	8006fc0 <USB_ReadInterrupts>
 80023da:	4603      	mov	r3, r0
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d103      	bne.n	80023ec <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2202      	movs	r2, #2
 80023ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f004 fde5 	bl	8006fc0 <USB_ReadInterrupts>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002400:	d120      	bne.n	8002444 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800240a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d113      	bne.n	8002444 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800241c:	2110      	movs	r1, #16
 800241e:	6938      	ldr	r0, [r7, #16]
 8002420:	f004 fd16 	bl	8006e50 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002424:	6938      	ldr	r0, [r7, #16]
 8002426:	f004 fd45 	bl	8006eb4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7a5b      	ldrb	r3, [r3, #9]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d105      	bne.n	800243e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2101      	movs	r1, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f004 fe03 	bl	8007044 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f007 ffa6 	bl	800a390 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f004 fdb9 	bl	8006fc0 <USB_ReadInterrupts>
 800244e:	4603      	mov	r3, r0
 8002450:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002458:	d102      	bne.n	8002460 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f001 fca1 	bl	8003da2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f004 fdab 	bl	8006fc0 <USB_ReadInterrupts>
 800246a:	4603      	mov	r3, r0
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b08      	cmp	r3, #8
 8002472:	d106      	bne.n	8002482 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f007 ff6f 	bl	800a358 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2208      	movs	r2, #8
 8002480:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f004 fd9a 	bl	8006fc0 <USB_ReadInterrupts>
 800248c:	4603      	mov	r3, r0
 800248e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002492:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002496:	d139      	bne.n	800250c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f004 fe0e 	bl	80070be <USB_HC_ReadInterrupt>
 80024a2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	e025      	b.n	80024f6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d018      	beq.n	80024f0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024d4:	d106      	bne.n	80024e4 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	4619      	mov	r1, r3
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f859 	bl	8002594 <HCD_HC_IN_IRQHandler>
 80024e2:	e005      	b.n	80024f0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 febb 	bl	8003266 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3301      	adds	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	795b      	ldrb	r3, [r3, #5]
 80024fa:	461a      	mov	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	4293      	cmp	r3, r2
 8002500:	d3d3      	bcc.n	80024aa <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800250a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f004 fd55 	bl	8006fc0 <USB_ReadInterrupts>
 8002516:	4603      	mov	r3, r0
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b10      	cmp	r3, #16
 800251e:	d101      	bne.n	8002524 <HAL_HCD_IRQHandler+0x1ea>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_HCD_IRQHandler+0x1ec>
 8002524:	2300      	movs	r3, #0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d014      	beq.n	8002554 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0210 	bic.w	r2, r2, #16
 8002538:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f001 fb52 	bl	8003be4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0210 	orr.w	r2, r2, #16
 800254e:	619a      	str	r2, [r3, #24]
 8002550:	e000      	b.n	8002554 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002552:	bf00      	nop
    }
  }
}
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_HCD_Stop+0x16>
 800256c:	2302      	movs	r3, #2
 800256e:	e00d      	b.n	800258c <HAL_HCD_Stop+0x32>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fecf 	bl	8007320 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f004 fd17 	bl	8006fe6 <USB_ReadChInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d11a      	bne.n	80025f8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ce:	461a      	mov	r2, r3
 80025d0:	2304      	movs	r3, #4
 80025d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	334d      	adds	r3, #77	@ 0x4d
 80025e4:	2207      	movs	r2, #7
 80025e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f004 fd75 	bl	80070e0 <USB_HC_Halt>
 80025f6:	e09e      	b.n	8002736 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f004 fcf0 	bl	8006fe6 <USB_ReadChInterrupts>
 8002606:	4603      	mov	r3, r0
 8002608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002610:	d11b      	bne.n	800264a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800261e:	461a      	mov	r2, r3
 8002620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002624:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	334d      	adds	r3, #77	@ 0x4d
 8002636:	2208      	movs	r2, #8
 8002638:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f004 fd4c 	bl	80070e0 <USB_HC_Halt>
 8002648:	e075      	b.n	8002736 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	78fa      	ldrb	r2, [r7, #3]
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f004 fcc7 	bl	8006fe6 <USB_ReadChInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b08      	cmp	r3, #8
 8002660:	d11a      	bne.n	8002698 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800266e:	461a      	mov	r2, r3
 8002670:	2308      	movs	r3, #8
 8002672:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	334d      	adds	r3, #77	@ 0x4d
 8002684:	2206      	movs	r2, #6
 8002686:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f004 fd25 	bl	80070e0 <USB_HC_Halt>
 8002696:	e04e      	b.n	8002736 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f004 fca0 	bl	8006fe6 <USB_ReadChInterrupts>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026b0:	d11b      	bne.n	80026ea <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026be:	461a      	mov	r2, r3
 80026c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	334d      	adds	r3, #77	@ 0x4d
 80026d6:	2209      	movs	r2, #9
 80026d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 fcfc 	bl	80070e0 <USB_HC_Halt>
 80026e8:	e025      	b.n	8002736 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 fc77 	bl	8006fe6 <USB_ReadChInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fe:	2b80      	cmp	r3, #128	@ 0x80
 8002700:	d119      	bne.n	8002736 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270e:	461a      	mov	r2, r3
 8002710:	2380      	movs	r3, #128	@ 0x80
 8002712:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334d      	adds	r3, #77	@ 0x4d
 8002724:	2207      	movs	r2, #7
 8002726:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f004 fcd5 	bl	80070e0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f004 fc51 	bl	8006fe6 <USB_ReadChInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800274a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800274e:	d112      	bne.n	8002776 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f004 fcc1 	bl	80070e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002770:	6093      	str	r3, [r2, #8]
 8002772:	f000 bd75 	b.w	8003260 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fc31 	bl	8006fe6 <USB_ReadChInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	f040 8128 	bne.w	80029e0 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279c:	461a      	mov	r2, r3
 800279e:	2320      	movs	r3, #32
 80027a0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	331b      	adds	r3, #27
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d119      	bne.n	80027ec <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	331b      	adds	r3, #27
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	0151      	lsls	r1, r2, #5
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	440a      	add	r2, r1
 80027e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ea:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	799b      	ldrb	r3, [r3, #6]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01b      	beq.n	800282c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	3330      	adds	r3, #48	@ 0x30
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	1ac9      	subs	r1, r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4403      	add	r3, r0
 8002828:	3338      	adds	r3, #56	@ 0x38
 800282a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	334d      	adds	r3, #77	@ 0x4d
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	3344      	adds	r3, #68	@ 0x44
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002860:	461a      	mov	r2, r3
 8002862:	2301      	movs	r3, #1
 8002864:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3326      	adds	r3, #38	@ 0x26
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	3326      	adds	r3, #38	@ 0x26
 800288c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800288e:	2b02      	cmp	r3, #2
 8002890:	d110      	bne.n	80028b4 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f004 fc20 	bl	80070e0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ac:	461a      	mov	r2, r3
 80028ae:	2310      	movs	r3, #16
 80028b0:	6093      	str	r3, [r2, #8]
 80028b2:	e03d      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3326      	adds	r3, #38	@ 0x26
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d00a      	beq.n	80028e0 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3326      	adds	r3, #38	@ 0x26
 80028da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d127      	bne.n	8002930 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	0151      	lsls	r1, r2, #5
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	440a      	add	r2, r1
 80028f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80028fe:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	334c      	adds	r3, #76	@ 0x4c
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334c      	adds	r3, #76	@ 0x4c
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	78fb      	ldrb	r3, [r7, #3]
 8002928:	4619      	mov	r1, r3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f007 fd3e 	bl	800a3ac <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	799b      	ldrb	r3, [r3, #6]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d13b      	bne.n	80029b0 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	3338      	adds	r3, #56	@ 0x38
 8002948:	6819      	ldr	r1, [r3, #0]
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4403      	add	r3, r0
 8002958:	3328      	adds	r3, #40	@ 0x28
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	440b      	add	r3, r1
 800295e:	1e59      	subs	r1, r3, #1
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4403      	add	r3, r0
 800296e:	3328      	adds	r3, #40	@ 0x28
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	fbb1 f3f3 	udiv	r3, r1, r3
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8470 	beq.w	8003260 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	333c      	adds	r3, #60	@ 0x3c
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	f083 0301 	eor.w	r3, r3, #1
 8002998:	b2d8      	uxtb	r0, r3
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	333c      	adds	r3, #60	@ 0x3c
 80029a8:	4602      	mov	r2, r0
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	f000 bc58 	b.w	8003260 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	333c      	adds	r3, #60	@ 0x3c
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	f083 0301 	eor.w	r3, r3, #1
 80029c8:	b2d8      	uxtb	r0, r3
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	333c      	adds	r3, #60	@ 0x3c
 80029d8:	4602      	mov	r2, r0
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	f000 bc40 	b.w	8003260 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f004 fafc 	bl	8006fe6 <USB_ReadChInterrupts>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d131      	bne.n	8002a5c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a04:	461a      	mov	r2, r3
 8002a06:	2320      	movs	r3, #32
 8002a08:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	331a      	adds	r3, #26
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	f040 841f 	bne.w	8003260 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	331b      	adds	r3, #27
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	334d      	adds	r3, #77	@ 0x4d
 8002a46:	2203      	movs	r2, #3
 8002a48:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f004 fb44 	bl	80070e0 <USB_HC_Halt>
 8002a58:	f000 bc02 	b.w	8003260 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f004 fabe 	bl	8006fe6 <USB_ReadChInterrupts>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	f040 8305 	bne.w	8003080 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a82:	461a      	mov	r2, r3
 8002a84:	2302      	movs	r3, #2
 8002a86:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	334d      	adds	r3, #77	@ 0x4d
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d114      	bne.n	8002ac8 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	334d      	adds	r3, #77	@ 0x4d
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	334c      	adds	r3, #76	@ 0x4c
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e2cc      	b.n	8003062 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	334d      	adds	r3, #77	@ 0x4d
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d114      	bne.n	8002b08 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	334d      	adds	r3, #77	@ 0x4d
 8002aee:	2202      	movs	r2, #2
 8002af0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	334c      	adds	r3, #76	@ 0x4c
 8002b02:	2205      	movs	r2, #5
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e2ac      	b.n	8003062 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	334d      	adds	r3, #77	@ 0x4d
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b07      	cmp	r3, #7
 8002b1c:	d00b      	beq.n	8002b36 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	334d      	adds	r3, #77	@ 0x4d
 8002b2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002b30:	2b09      	cmp	r3, #9
 8002b32:	f040 80a6 	bne.w	8002c82 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	334d      	adds	r3, #77	@ 0x4d
 8002b46:	2202      	movs	r2, #2
 8002b48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	3344      	adds	r3, #68	@ 0x44
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	1c59      	adds	r1, r3, #1
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4403      	add	r3, r0
 8002b6a:	3344      	adds	r3, #68	@ 0x44
 8002b6c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3344      	adds	r3, #68	@ 0x44
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d943      	bls.n	8002c0c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3344      	adds	r3, #68	@ 0x44
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	331a      	adds	r3, #26
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d123      	bne.n	8002bf6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	331b      	adds	r3, #27
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	331c      	adds	r3, #28
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	0151      	lsls	r1, r2, #5
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	440a      	add	r2, r1
 8002bec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	334c      	adds	r3, #76	@ 0x4c
 8002c06:	2204      	movs	r2, #4
 8002c08:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c0a:	e229      	b.n	8003060 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334c      	adds	r3, #76	@ 0x4c
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3326      	adds	r3, #38	@ 0x26
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3326      	adds	r3, #38	@ 0x26
 8002c46:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	f040 8209 	bne.w	8003060 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c64:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c6c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c80:	e1ee      	b.n	8003060 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	334d      	adds	r3, #77	@ 0x4d
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	f040 80c8 	bne.w	8002e2a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	334d      	adds	r3, #77	@ 0x4d
 8002caa:	2202      	movs	r2, #2
 8002cac:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	331b      	adds	r3, #27
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	f040 81ce 	bne.w	8003062 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3326      	adds	r3, #38	@ 0x26
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d16b      	bne.n	8002db4 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	3348      	adds	r3, #72	@ 0x48
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	1c59      	adds	r1, r3, #1
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4403      	add	r3, r0
 8002cfc:	3348      	adds	r3, #72	@ 0x48
 8002cfe:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3348      	adds	r3, #72	@ 0x48
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d943      	bls.n	8002d9e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	3348      	adds	r3, #72	@ 0x48
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	331b      	adds	r3, #27
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3344      	adds	r3, #68	@ 0x44
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d809      	bhi.n	8002d68 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	331c      	adds	r3, #28
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	0151      	lsls	r1, r2, #5
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	440a      	add	r2, r1
 8002d7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d86:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	334c      	adds	r3, #76	@ 0x4c
 8002d98:	2204      	movs	r2, #4
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e014      	b.n	8002dc8 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	334c      	adds	r3, #76	@ 0x4c
 8002dae:	2202      	movs	r2, #2
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e009      	b.n	8002dc8 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	334c      	adds	r3, #76	@ 0x4c
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3326      	adds	r3, #38	@ 0x26
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	3326      	adds	r3, #38	@ 0x26
 8002dee:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	f040 8136 	bne.w	8003062 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e0c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e14:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e22:	461a      	mov	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	e11b      	b.n	8003062 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	334d      	adds	r3, #77	@ 0x4d
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	f040 8081 	bne.w	8002f44 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	334d      	adds	r3, #77	@ 0x4d
 8002e52:	2202      	movs	r2, #2
 8002e54:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	331b      	adds	r3, #27
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	f040 80fa 	bne.w	8003062 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	334c      	adds	r3, #76	@ 0x4c
 8002e7e:	2202      	movs	r2, #2
 8002e80:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	0151      	lsls	r1, r2, #5
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	440a      	add	r2, r1
 8002e98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea0:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	0151      	lsls	r1, r2, #5
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	440a      	add	r2, r1
 8002eb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ec0:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	0151      	lsls	r1, r2, #5
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	440a      	add	r2, r1
 8002ed8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002edc:	f023 0320 	bic.w	r3, r3, #32
 8002ee0:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3326      	adds	r3, #38	@ 0x26
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	3326      	adds	r3, #38	@ 0x26
 8002f08:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	f040 80a9 	bne.w	8003062 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f26:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f2e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e08e      	b.n	8003062 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	334d      	adds	r3, #77	@ 0x4d
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d143      	bne.n	8002fe2 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	334d      	adds	r3, #77	@ 0x4d
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	334c      	adds	r3, #76	@ 0x4c
 8002f7e:	2202      	movs	r2, #2
 8002f80:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	3326      	adds	r3, #38	@ 0x26
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3326      	adds	r3, #38	@ 0x26
 8002fa8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d159      	bne.n	8003062 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fc4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fcc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	e03f      	b.n	8003062 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	334d      	adds	r3, #77	@ 0x4d
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d126      	bne.n	8003046 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	334d      	adds	r3, #77	@ 0x4d
 8003008:	2202      	movs	r2, #2
 800300a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	3344      	adds	r3, #68	@ 0x44
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4403      	add	r3, r0
 800302c:	3344      	adds	r3, #68	@ 0x44
 800302e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	334c      	adds	r3, #76	@ 0x4c
 8003040:	2204      	movs	r2, #4
 8003042:	701a      	strb	r2, [r3, #0]
 8003044:	e00d      	b.n	8003062 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	334d      	adds	r3, #77	@ 0x4d
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b02      	cmp	r3, #2
 800305a:	f000 8100 	beq.w	800325e <HCD_HC_IN_IRQHandler+0xcca>
 800305e:	e000      	b.n	8003062 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003060:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	334c      	adds	r3, #76	@ 0x4c
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	4619      	mov	r1, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f007 f997 	bl	800a3ac <HAL_HCD_HC_NotifyURBChange_Callback>
 800307e:	e0ef      	b.n	8003260 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f003 ffac 	bl	8006fe6 <USB_ReadChInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003094:	2b40      	cmp	r3, #64	@ 0x40
 8003096:	d12f      	bne.n	80030f8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a4:	461a      	mov	r2, r3
 80030a6:	2340      	movs	r3, #64	@ 0x40
 80030a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	334d      	adds	r3, #77	@ 0x4d
 80030ba:	2205      	movs	r2, #5
 80030bc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	331a      	adds	r3, #26
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3344      	adds	r3, #68	@ 0x44
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f003 fff5 	bl	80070e0 <USB_HC_Halt>
 80030f6:	e0b3      	b.n	8003260 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f003 ff70 	bl	8006fe6 <USB_ReadChInterrupts>
 8003106:	4603      	mov	r3, r0
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b10      	cmp	r3, #16
 800310e:	f040 80a7 	bne.w	8003260 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	3326      	adds	r3, #38	@ 0x26
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d11b      	bne.n	8003160 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	3344      	adds	r3, #68	@ 0x44
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	334d      	adds	r3, #77	@ 0x4d
 800314c:	2204      	movs	r2, #4
 800314e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f003 ffc1 	bl	80070e0 <USB_HC_Halt>
 800315e:	e03f      	b.n	80031e0 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	3326      	adds	r3, #38	@ 0x26
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3326      	adds	r3, #38	@ 0x26
 8003186:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003188:	2b02      	cmp	r3, #2
 800318a:	d129      	bne.n	80031e0 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3344      	adds	r3, #68	@ 0x44
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	799b      	ldrb	r3, [r3, #6]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <HCD_HC_IN_IRQHandler+0xc2a>
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	331b      	adds	r3, #27
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d110      	bne.n	80031e0 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	334d      	adds	r3, #77	@ 0x4d
 80031ce:	2204      	movs	r2, #4
 80031d0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f003 ff80 	bl	80070e0 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	331b      	adds	r3, #27
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d129      	bne.n	800324a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	331b      	adds	r3, #27
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4413      	add	r3, r2
 8003212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	0151      	lsls	r1, r2, #5
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	440a      	add	r2, r1
 8003220:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003228:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	0151      	lsls	r1, r2, #5
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	440a      	add	r2, r1
 8003240:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003244:	f043 0320 	orr.w	r3, r3, #32
 8003248:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003256:	461a      	mov	r2, r3
 8003258:	2310      	movs	r3, #16
 800325a:	6093      	str	r3, [r2, #8]
 800325c:	e000      	b.n	8003260 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800325e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f003 feae 	bl	8006fe6 <USB_ReadChInterrupts>
 800328a:	4603      	mov	r3, r0
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b04      	cmp	r3, #4
 8003292:	d11b      	bne.n	80032cc <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a0:	461a      	mov	r2, r3
 80032a2:	2304      	movs	r3, #4
 80032a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	334d      	adds	r3, #77	@ 0x4d
 80032b6:	2207      	movs	r2, #7
 80032b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f003 ff0c 	bl	80070e0 <USB_HC_Halt>
 80032c8:	f000 bc89 	b.w	8003bde <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f003 fe86 	bl	8006fe6 <USB_ReadChInterrupts>
 80032da:	4603      	mov	r3, r0
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	f040 8082 	bne.w	80033ea <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f2:	461a      	mov	r2, r3
 80032f4:	2320      	movs	r3, #32
 80032f6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	3319      	adds	r3, #25
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d124      	bne.n	8003358 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	3319      	adds	r3, #25
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	334c      	adds	r3, #76	@ 0x4c
 8003332:	2202      	movs	r2, #2
 8003334:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	334d      	adds	r3, #77	@ 0x4d
 8003346:	2203      	movs	r2, #3
 8003348:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f003 fec4 	bl	80070e0 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	331a      	adds	r3, #26
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b01      	cmp	r3, #1
 800336c:	f040 8437 	bne.w	8003bde <HCD_HC_OUT_IRQHandler+0x978>
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	331b      	adds	r3, #27
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f040 842b 	bne.w	8003bde <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	3326      	adds	r3, #38	@ 0x26
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d009      	beq.n	80033b2 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	331b      	adds	r3, #27
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	334d      	adds	r3, #77	@ 0x4d
 80033c2:	2203      	movs	r2, #3
 80033c4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 fe86 	bl	80070e0 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3344      	adds	r3, #68	@ 0x44
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e3f9      	b.n	8003bde <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f003 fdf7 	bl	8006fe6 <USB_ReadChInterrupts>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003402:	d111      	bne.n	8003428 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003410:	461a      	mov	r2, r3
 8003412:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003416:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f003 fe5d 	bl	80070e0 <USB_HC_Halt>
 8003426:	e3da      	b.n	8003bde <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f003 fdd8 	bl	8006fe6 <USB_ReadChInterrupts>
 8003436:	4603      	mov	r3, r0
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d168      	bne.n	8003512 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	3344      	adds	r3, #68	@ 0x44
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f003 fdc2 	bl	8006fe6 <USB_ReadChInterrupts>
 8003462:	4603      	mov	r3, r0
 8003464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003468:	2b40      	cmp	r3, #64	@ 0x40
 800346a:	d112      	bne.n	8003492 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3319      	adds	r3, #25
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800348c:	461a      	mov	r2, r3
 800348e:	2340      	movs	r3, #64	@ 0x40
 8003490:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	331b      	adds	r3, #27
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d019      	beq.n	80034dc <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	331b      	adds	r3, #27
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	0151      	lsls	r1, r2, #5
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	440a      	add	r2, r1
 80034d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034da:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e8:	461a      	mov	r2, r3
 80034ea:	2301      	movs	r3, #1
 80034ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	334d      	adds	r3, #77	@ 0x4d
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	4611      	mov	r1, r2
 800350a:	4618      	mov	r0, r3
 800350c:	f003 fde8 	bl	80070e0 <USB_HC_Halt>
 8003510:	e365      	b.n	8003bde <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f003 fd63 	bl	8006fe6 <USB_ReadChInterrupts>
 8003520:	4603      	mov	r3, r0
 8003522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003526:	2b40      	cmp	r3, #64	@ 0x40
 8003528:	d139      	bne.n	800359e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	334d      	adds	r3, #77	@ 0x4d
 800353a:	2205      	movs	r2, #5
 800353c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	331a      	adds	r3, #26
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d109      	bne.n	8003568 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	3319      	adds	r3, #25
 8003564:	2201      	movs	r2, #1
 8003566:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	3344      	adds	r3, #68	@ 0x44
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f003 fdab 	bl	80070e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003596:	461a      	mov	r2, r3
 8003598:	2340      	movs	r3, #64	@ 0x40
 800359a:	6093      	str	r3, [r2, #8]
 800359c:	e31f      	b.n	8003bde <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f003 fd1d 	bl	8006fe6 <USB_ReadChInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d11a      	bne.n	80035ec <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c2:	461a      	mov	r2, r3
 80035c4:	2308      	movs	r3, #8
 80035c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	334d      	adds	r3, #77	@ 0x4d
 80035d8:	2206      	movs	r2, #6
 80035da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f003 fd7b 	bl	80070e0 <USB_HC_Halt>
 80035ea:	e2f8      	b.n	8003bde <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 fcf6 	bl	8006fe6 <USB_ReadChInterrupts>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b10      	cmp	r3, #16
 8003602:	d144      	bne.n	800368e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	3344      	adds	r3, #68	@ 0x44
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	334d      	adds	r3, #77	@ 0x4d
 8003628:	2204      	movs	r2, #4
 800362a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	3319      	adds	r3, #25
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d114      	bne.n	800366c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	3318      	adds	r3, #24
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	3319      	adds	r3, #25
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f003 fd33 	bl	80070e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003686:	461a      	mov	r2, r3
 8003688:	2310      	movs	r3, #16
 800368a:	6093      	str	r3, [r2, #8]
 800368c:	e2a7      	b.n	8003bde <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f003 fca5 	bl	8006fe6 <USB_ReadChInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a2:	2b80      	cmp	r3, #128	@ 0x80
 80036a4:	f040 8083 	bne.w	80037ae <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	799b      	ldrb	r3, [r3, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d111      	bne.n	80036d4 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	334d      	adds	r3, #77	@ 0x4d
 80036c0:	2207      	movs	r2, #7
 80036c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f003 fd07 	bl	80070e0 <USB_HC_Halt>
 80036d2:	e062      	b.n	800379a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	3344      	adds	r3, #68	@ 0x44
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	1c59      	adds	r1, r3, #1
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4403      	add	r3, r0
 80036f4:	3344      	adds	r3, #68	@ 0x44
 80036f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036f8:	78fa      	ldrb	r2, [r7, #3]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	3344      	adds	r3, #68	@ 0x44
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d922      	bls.n	8003754 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	3344      	adds	r3, #68	@ 0x44
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	334c      	adds	r3, #76	@ 0x4c
 8003732:	2204      	movs	r2, #4
 8003734:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	334c      	adds	r3, #76	@ 0x4c
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	4619      	mov	r1, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f006 fe2d 	bl	800a3ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003752:	e022      	b.n	800379a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	334c      	adds	r3, #76	@ 0x4c
 8003764:	2202      	movs	r2, #2
 8003766:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800377e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003786:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003794:	461a      	mov	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037a6:	461a      	mov	r2, r3
 80037a8:	2380      	movs	r3, #128	@ 0x80
 80037aa:	6093      	str	r3, [r2, #8]
 80037ac:	e217      	b.n	8003bde <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 fc15 	bl	8006fe6 <USB_ReadChInterrupts>
 80037bc:	4603      	mov	r3, r0
 80037be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c6:	d11b      	bne.n	8003800 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	334d      	adds	r3, #77	@ 0x4d
 80037d8:	2209      	movs	r2, #9
 80037da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f003 fc7b 	bl	80070e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f6:	461a      	mov	r2, r3
 80037f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037fc:	6093      	str	r3, [r2, #8]
 80037fe:	e1ee      	b.n	8003bde <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f003 fbec 	bl	8006fe6 <USB_ReadChInterrupts>
 800380e:	4603      	mov	r3, r0
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	f040 81df 	bne.w	8003bd8 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4413      	add	r3, r2
 8003822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003826:	461a      	mov	r2, r3
 8003828:	2302      	movs	r3, #2
 800382a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	334d      	adds	r3, #77	@ 0x4d
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	f040 8093 	bne.w	800396a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003844:	78fa      	ldrb	r2, [r7, #3]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	334d      	adds	r3, #77	@ 0x4d
 8003854:	2202      	movs	r2, #2
 8003856:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	334c      	adds	r3, #76	@ 0x4c
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	3326      	adds	r3, #38	@ 0x26
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d00b      	beq.n	800389a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	3326      	adds	r3, #38	@ 0x26
 8003892:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003894:	2b03      	cmp	r3, #3
 8003896:	f040 8190 	bne.w	8003bba <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	799b      	ldrb	r3, [r3, #6]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d115      	bne.n	80038ce <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	333d      	adds	r3, #61	@ 0x3d
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	f083 0301 	eor.w	r3, r3, #1
 80038ba:	b2d8      	uxtb	r0, r3
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	333d      	adds	r3, #61	@ 0x3d
 80038ca:	4602      	mov	r2, r0
 80038cc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	799b      	ldrb	r3, [r3, #6]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	f040 8171 	bne.w	8003bba <HCD_HC_OUT_IRQHandler+0x954>
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3334      	adds	r3, #52	@ 0x34
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 8165 	beq.w	8003bba <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	3334      	adds	r3, #52	@ 0x34
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4403      	add	r3, r0
 8003910:	3328      	adds	r3, #40	@ 0x28
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	440b      	add	r3, r1
 8003916:	1e59      	subs	r1, r3, #1
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4403      	add	r3, r0
 8003926:	3328      	adds	r3, #40	@ 0x28
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	fbb1 f3f3 	udiv	r3, r1, r3
 800392e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 813f 	beq.w	8003bba <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	333d      	adds	r3, #61	@ 0x3d
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	f083 0301 	eor.w	r3, r3, #1
 8003954:	b2d8      	uxtb	r0, r3
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	333d      	adds	r3, #61	@ 0x3d
 8003964:	4602      	mov	r2, r0
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	e127      	b.n	8003bba <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	334d      	adds	r3, #77	@ 0x4d
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d120      	bne.n	80039c2 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	334d      	adds	r3, #77	@ 0x4d
 8003990:	2202      	movs	r2, #2
 8003992:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	331b      	adds	r3, #27
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	f040 8107 	bne.w	8003bba <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	334c      	adds	r3, #76	@ 0x4c
 80039bc:	2202      	movs	r2, #2
 80039be:	701a      	strb	r2, [r3, #0]
 80039c0:	e0fb      	b.n	8003bba <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	334d      	adds	r3, #77	@ 0x4d
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d13a      	bne.n	8003a4e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	334d      	adds	r3, #77	@ 0x4d
 80039e8:	2202      	movs	r2, #2
 80039ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	334c      	adds	r3, #76	@ 0x4c
 80039fc:	2202      	movs	r2, #2
 80039fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	331b      	adds	r3, #27
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	f040 80d1 	bne.w	8003bba <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	331b      	adds	r3, #27
 8003a28:	2200      	movs	r2, #0
 8003a2a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	78fa      	ldrb	r2, [r7, #3]
 8003a3c:	0151      	lsls	r1, r2, #5
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	440a      	add	r2, r1
 8003a42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a4a:	6053      	str	r3, [r2, #4]
 8003a4c:	e0b5      	b.n	8003bba <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	334d      	adds	r3, #77	@ 0x4d
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b05      	cmp	r3, #5
 8003a62:	d114      	bne.n	8003a8e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	334d      	adds	r3, #77	@ 0x4d
 8003a74:	2202      	movs	r2, #2
 8003a76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	334c      	adds	r3, #76	@ 0x4c
 8003a88:	2202      	movs	r2, #2
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e095      	b.n	8003bba <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	334d      	adds	r3, #77	@ 0x4d
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b06      	cmp	r3, #6
 8003aa2:	d114      	bne.n	8003ace <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	334d      	adds	r3, #77	@ 0x4d
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	334c      	adds	r3, #76	@ 0x4c
 8003ac8:	2205      	movs	r2, #5
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e075      	b.n	8003bba <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	1a9b      	subs	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	334d      	adds	r3, #77	@ 0x4d
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b07      	cmp	r3, #7
 8003ae2:	d00a      	beq.n	8003afa <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	334d      	adds	r3, #77	@ 0x4d
 8003af4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003af6:	2b09      	cmp	r3, #9
 8003af8:	d170      	bne.n	8003bdc <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	334d      	adds	r3, #77	@ 0x4d
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3344      	adds	r3, #68	@ 0x44
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	1c59      	adds	r1, r3, #1
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4403      	add	r3, r0
 8003b2e:	3344      	adds	r3, #68	@ 0x44
 8003b30:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	3344      	adds	r3, #68	@ 0x44
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d914      	bls.n	8003b72 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	3344      	adds	r3, #68	@ 0x44
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b5c:	78fa      	ldrb	r2, [r7, #3]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	334c      	adds	r3, #76	@ 0x4c
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b70:	e022      	b.n	8003bb8 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	334c      	adds	r3, #76	@ 0x4c
 8003b82:	2202      	movs	r2, #2
 8003b84:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b9c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ba4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bb8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	334c      	adds	r3, #76	@ 0x4c
 8003bca:	781a      	ldrb	r2, [r3, #0]
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f006 fbeb 	bl	800a3ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bd6:	e002      	b.n	8003bde <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003bdc:	bf00      	nop
  }
}
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	@ 0x28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	0c5b      	lsrs	r3, r3, #17
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c18:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d004      	beq.n	8003c2a <HCD_RXQLVL_IRQHandler+0x46>
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	f000 80b6 	beq.w	8003d94 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c28:	e0b7      	b.n	8003d9a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80b3 	beq.w	8003d98 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	332c      	adds	r3, #44	@ 0x2c
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80a7 	beq.w	8003d98 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	3338      	adds	r3, #56	@ 0x38
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	18d1      	adds	r1, r2, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4403      	add	r3, r0
 8003c6e:	3334      	adds	r3, #52	@ 0x34
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4299      	cmp	r1, r3
 8003c74:	f200 8083 	bhi.w	8003d7e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	332c      	adds	r3, #44	@ 0x2c
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	b292      	uxth	r2, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	f003 f93c 	bl	8006f10 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	332c      	adds	r3, #44	@ 0x2c
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	18d1      	adds	r1, r2, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4403      	add	r3, r0
 8003cbc:	332c      	adds	r3, #44	@ 0x2c
 8003cbe:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	3338      	adds	r3, #56	@ 0x38
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	18d1      	adds	r1, r2, r3
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4403      	add	r3, r0
 8003ce4:	3338      	adds	r3, #56	@ 0x38
 8003ce6:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	0cdb      	lsrs	r3, r3, #19
 8003cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cfc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	3328      	adds	r3, #40	@ 0x28
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d13f      	bne.n	8003d98 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d03c      	beq.n	8003d98 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d34:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d3c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4613      	mov	r3, r2
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	333c      	adds	r3, #60	@ 0x3c
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	f083 0301 	eor.w	r3, r3, #1
 8003d66:	b2d8      	uxtb	r0, r3
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	333c      	adds	r3, #60	@ 0x3c
 8003d78:	4602      	mov	r2, r0
 8003d7a:	701a      	strb	r2, [r3, #0]
      break;
 8003d7c:	e00c      	b.n	8003d98 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	334c      	adds	r3, #76	@ 0x4c
 8003d8e:	2204      	movs	r2, #4
 8003d90:	701a      	strb	r2, [r3, #0]
      break;
 8003d92:	e001      	b.n	8003d98 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003d94:	bf00      	nop
 8003d96:	e000      	b.n	8003d9a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003d98:	bf00      	nop
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	3728      	adds	r7, #40	@ 0x28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003dce:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d10b      	bne.n	8003df2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d102      	bne.n	8003dea <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f006 fac5 	bl	800a374 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d132      	bne.n	8003e62 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f043 0308 	orr.w	r3, r3, #8
 8003e02:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d126      	bne.n	8003e5c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	7a5b      	ldrb	r3, [r3, #9]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d113      	bne.n	8003e3e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003e1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e20:	d106      	bne.n	8003e30 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2102      	movs	r1, #2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f003 f90b 	bl	8007044 <USB_InitFSLSPClkSel>
 8003e2e:	e011      	b.n	8003e54 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2101      	movs	r1, #1
 8003e36:	4618      	mov	r0, r3
 8003e38:	f003 f904 	bl	8007044 <USB_InitFSLSPClkSel>
 8003e3c:	e00a      	b.n	8003e54 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	79db      	ldrb	r3, [r3, #7]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d106      	bne.n	8003e54 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003e52:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f006 fabb 	bl	800a3d0 <HAL_HCD_PortEnabled_Callback>
 8003e5a:	e002      	b.n	8003e62 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f006 fac5 	bl	800a3ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d103      	bne.n	8003e74 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f043 0320 	orr.w	r3, r3, #32
 8003e72:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	6013      	str	r3, [r2, #0]
}
 8003e80:	bf00      	nop
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e12b      	b.n	80040f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fd f862 	bl	8000f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	@ 0x24
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003eda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003eec:	f001 fa20 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 8003ef0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4a81      	ldr	r2, [pc, #516]	@ (80040fc <HAL_I2C_Init+0x274>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d807      	bhi.n	8003f0c <HAL_I2C_Init+0x84>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a80      	ldr	r2, [pc, #512]	@ (8004100 <HAL_I2C_Init+0x278>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	bf94      	ite	ls
 8003f04:	2301      	movls	r3, #1
 8003f06:	2300      	movhi	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e006      	b.n	8003f1a <HAL_I2C_Init+0x92>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a7d      	ldr	r2, [pc, #500]	@ (8004104 <HAL_I2C_Init+0x27c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	bf94      	ite	ls
 8003f14:	2301      	movls	r3, #1
 8003f16:	2300      	movhi	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e0e7      	b.n	80040f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a78      	ldr	r2, [pc, #480]	@ (8004108 <HAL_I2C_Init+0x280>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0c9b      	lsrs	r3, r3, #18
 8003f2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4a6a      	ldr	r2, [pc, #424]	@ (80040fc <HAL_I2C_Init+0x274>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d802      	bhi.n	8003f5c <HAL_I2C_Init+0xd4>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	e009      	b.n	8003f70 <HAL_I2C_Init+0xe8>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	4a69      	ldr	r2, [pc, #420]	@ (800410c <HAL_I2C_Init+0x284>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	099b      	lsrs	r3, r3, #6
 8003f6e:	3301      	adds	r3, #1
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	430b      	orrs	r3, r1
 8003f76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	495c      	ldr	r1, [pc, #368]	@ (80040fc <HAL_I2C_Init+0x274>)
 8003f8c:	428b      	cmp	r3, r1
 8003f8e:	d819      	bhi.n	8003fc4 <HAL_I2C_Init+0x13c>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1e59      	subs	r1, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f9e:	1c59      	adds	r1, r3, #1
 8003fa0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003fa4:	400b      	ands	r3, r1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_I2C_Init+0x138>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1e59      	subs	r1, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fb8:	3301      	adds	r3, #1
 8003fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fbe:	e051      	b.n	8004064 <HAL_I2C_Init+0x1dc>
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	e04f      	b.n	8004064 <HAL_I2C_Init+0x1dc>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d111      	bne.n	8003ff0 <HAL_I2C_Init+0x168>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1e58      	subs	r0, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6859      	ldr	r1, [r3, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	440b      	add	r3, r1
 8003fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fde:	3301      	adds	r3, #1
 8003fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e012      	b.n	8004016 <HAL_I2C_Init+0x18e>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1e58      	subs	r0, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	0099      	lsls	r1, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	fbb0 f3f3 	udiv	r3, r0, r3
 8004006:	3301      	adds	r3, #1
 8004008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_I2C_Init+0x196>
 800401a:	2301      	movs	r3, #1
 800401c:	e022      	b.n	8004064 <HAL_I2C_Init+0x1dc>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10e      	bne.n	8004044 <HAL_I2C_Init+0x1bc>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1e58      	subs	r0, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6859      	ldr	r1, [r3, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	440b      	add	r3, r1
 8004034:	fbb0 f3f3 	udiv	r3, r0, r3
 8004038:	3301      	adds	r3, #1
 800403a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004042:	e00f      	b.n	8004064 <HAL_I2C_Init+0x1dc>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1e58      	subs	r0, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	0099      	lsls	r1, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	fbb0 f3f3 	udiv	r3, r0, r3
 800405a:	3301      	adds	r3, #1
 800405c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004060:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	6809      	ldr	r1, [r1, #0]
 8004068:	4313      	orrs	r3, r2
 800406a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004092:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6911      	ldr	r1, [r2, #16]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68d2      	ldr	r2, [r2, #12]
 800409e:	4311      	orrs	r1, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	000186a0 	.word	0x000186a0
 8004100:	001e847f 	.word	0x001e847f
 8004104:	003d08ff 	.word	0x003d08ff
 8004108:	431bde83 	.word	0x431bde83
 800410c:	10624dd3 	.word	0x10624dd3

08004110 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e128      	b.n	8004374 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a90      	ldr	r2, [pc, #576]	@ (800437c <HAL_I2S_Init+0x26c>)
 800413a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7fc ff63 	bl	8001008 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2202      	movs	r2, #2
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004158:	f023 030f 	bic.w	r3, r3, #15
 800415c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2202      	movs	r2, #2
 8004164:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d060      	beq.n	8004230 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d102      	bne.n	800417c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004176:	2310      	movs	r3, #16
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	e001      	b.n	8004180 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800417c:	2320      	movs	r3, #32
 800417e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b20      	cmp	r3, #32
 8004186:	d802      	bhi.n	800418e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800418e:	2001      	movs	r0, #1
 8004190:	f001 fa0a 	bl	80055a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004194:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800419e:	d125      	bne.n	80041ec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d010      	beq.n	80041ca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	461a      	mov	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	3305      	adds	r3, #5
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	e01f      	b.n	800420a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	461a      	mov	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	3305      	adds	r3, #5
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	e00e      	b.n	800420a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	461a      	mov	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	fbb2 f3f3 	udiv	r3, r2, r3
 8004206:	3305      	adds	r3, #5
 8004208:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4a5c      	ldr	r2, [pc, #368]	@ (8004380 <HAL_I2S_Init+0x270>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	08db      	lsrs	r3, r3, #3
 8004214:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	e003      	b.n	8004238 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004230:	2302      	movs	r3, #2
 8004232:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d902      	bls.n	8004244 <HAL_I2S_Init+0x134>
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	2bff      	cmp	r3, #255	@ 0xff
 8004242:	d907      	bls.n	8004254 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004248:	f043 0210 	orr.w	r2, r3, #16
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e08f      	b.n	8004374 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	ea42 0103 	orr.w	r1, r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	430a      	orrs	r2, r1
 8004266:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004272:	f023 030f 	bic.w	r3, r3, #15
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6851      	ldr	r1, [r2, #4]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6892      	ldr	r2, [r2, #8]
 800427e:	4311      	orrs	r1, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68d2      	ldr	r2, [r2, #12]
 8004284:	4311      	orrs	r1, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6992      	ldr	r2, [r2, #24]
 800428a:	430a      	orrs	r2, r1
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004296:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d161      	bne.n	8004364 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a38      	ldr	r2, [pc, #224]	@ (8004384 <HAL_I2S_Init+0x274>)
 80042a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a37      	ldr	r2, [pc, #220]	@ (8004388 <HAL_I2S_Init+0x278>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d101      	bne.n	80042b4 <HAL_I2S_Init+0x1a4>
 80042b0:	4b36      	ldr	r3, [pc, #216]	@ (800438c <HAL_I2S_Init+0x27c>)
 80042b2:	e001      	b.n	80042b8 <HAL_I2S_Init+0x1a8>
 80042b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	4932      	ldr	r1, [pc, #200]	@ (8004388 <HAL_I2S_Init+0x278>)
 80042c0:	428a      	cmp	r2, r1
 80042c2:	d101      	bne.n	80042c8 <HAL_I2S_Init+0x1b8>
 80042c4:	4a31      	ldr	r2, [pc, #196]	@ (800438c <HAL_I2S_Init+0x27c>)
 80042c6:	e001      	b.n	80042cc <HAL_I2S_Init+0x1bc>
 80042c8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80042cc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80042d0:	f023 030f 	bic.w	r3, r3, #15
 80042d4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a2b      	ldr	r2, [pc, #172]	@ (8004388 <HAL_I2S_Init+0x278>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d101      	bne.n	80042e4 <HAL_I2S_Init+0x1d4>
 80042e0:	4b2a      	ldr	r3, [pc, #168]	@ (800438c <HAL_I2S_Init+0x27c>)
 80042e2:	e001      	b.n	80042e8 <HAL_I2S_Init+0x1d8>
 80042e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042e8:	2202      	movs	r2, #2
 80042ea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a25      	ldr	r2, [pc, #148]	@ (8004388 <HAL_I2S_Init+0x278>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d101      	bne.n	80042fa <HAL_I2S_Init+0x1ea>
 80042f6:	4b25      	ldr	r3, [pc, #148]	@ (800438c <HAL_I2S_Init+0x27c>)
 80042f8:	e001      	b.n	80042fe <HAL_I2S_Init+0x1ee>
 80042fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800430a:	d003      	beq.n	8004314 <HAL_I2S_Init+0x204>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004314:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	e001      	b.n	8004320 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800431c:	2300      	movs	r3, #0
 800431e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800432a:	4313      	orrs	r3, r2
 800432c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004334:	4313      	orrs	r3, r2
 8004336:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800433e:	4313      	orrs	r3, r2
 8004340:	b29a      	uxth	r2, r3
 8004342:	897b      	ldrh	r3, [r7, #10]
 8004344:	4313      	orrs	r3, r2
 8004346:	b29b      	uxth	r3, r3
 8004348:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800434c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a0d      	ldr	r2, [pc, #52]	@ (8004388 <HAL_I2S_Init+0x278>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d101      	bne.n	800435c <HAL_I2S_Init+0x24c>
 8004358:	4b0c      	ldr	r3, [pc, #48]	@ (800438c <HAL_I2S_Init+0x27c>)
 800435a:	e001      	b.n	8004360 <HAL_I2S_Init+0x250>
 800435c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004360:	897a      	ldrh	r2, [r7, #10]
 8004362:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3720      	adds	r7, #32
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	08004487 	.word	0x08004487
 8004380:	cccccccd 	.word	0xcccccccd
 8004384:	0800459d 	.word	0x0800459d
 8004388:	40003800 	.word	0x40003800
 800438c:	40003400 	.word	0x40003400

08004390 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	881a      	ldrh	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	1c9a      	adds	r2, r3, #2
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10e      	bne.n	8004420 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004410:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ffb8 	bl	8004390 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	b292      	uxth	r2, r2
 800443c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004442:	1c9a      	adds	r2, r3, #2
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10e      	bne.n	800447e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800446e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff93 	bl	80043a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d13a      	bne.n	8004518 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d109      	bne.n	80044c0 <I2S_IRQHandler+0x3a>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b6:	2b40      	cmp	r3, #64	@ 0x40
 80044b8:	d102      	bne.n	80044c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff ffb4 	bl	8004428 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c6:	2b40      	cmp	r3, #64	@ 0x40
 80044c8:	d126      	bne.n	8004518 <I2S_IRQHandler+0x92>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d11f      	bne.n	8004518 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450a:	f043 0202 	orr.w	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff ff50 	bl	80043b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b03      	cmp	r3, #3
 8004522:	d136      	bne.n	8004592 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b02      	cmp	r3, #2
 800452c:	d109      	bne.n	8004542 <I2S_IRQHandler+0xbc>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004538:	2b80      	cmp	r3, #128	@ 0x80
 800453a:	d102      	bne.n	8004542 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ff45 	bl	80043cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b08      	cmp	r3, #8
 800454a:	d122      	bne.n	8004592 <I2S_IRQHandler+0x10c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b20      	cmp	r3, #32
 8004558:	d11b      	bne.n	8004592 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004568:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004584:	f043 0204 	orr.w	r2, r3, #4
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff ff13 	bl	80043b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004592:	bf00      	nop
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a92      	ldr	r2, [pc, #584]	@ (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80045b6:	4b92      	ldr	r3, [pc, #584]	@ (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045b8:	e001      	b.n	80045be <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80045ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a8b      	ldr	r2, [pc, #556]	@ (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80045d4:	4b8a      	ldr	r3, [pc, #552]	@ (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045d6:	e001      	b.n	80045dc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80045d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e8:	d004      	beq.n	80045f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f040 8099 	bne.w	8004726 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d107      	bne.n	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f925 	bl	8004858 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b01      	cmp	r3, #1
 8004616:	d107      	bne.n	8004628 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9c8 	bl	80049b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462e:	2b40      	cmp	r3, #64	@ 0x40
 8004630:	d13a      	bne.n	80046a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d035      	beq.n	80046a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a6e      	ldr	r2, [pc, #440]	@ (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004646:	4b6e      	ldr	r3, [pc, #440]	@ (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004648:	e001      	b.n	800464e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800464a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4969      	ldr	r1, [pc, #420]	@ (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004656:	428b      	cmp	r3, r1
 8004658:	d101      	bne.n	800465e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800465a:	4b69      	ldr	r3, [pc, #420]	@ (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800465c:	e001      	b.n	8004662 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800465e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004662:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004666:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004676:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469a:	f043 0202 	orr.w	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff fe88 	bl	80043b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	f040 80c3 	bne.w	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 80bd 	beq.w	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a49      	ldr	r2, [pc, #292]	@ (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d101      	bne.n	80046de <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80046da:	4b49      	ldr	r3, [pc, #292]	@ (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046dc:	e001      	b.n	80046e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80046de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4944      	ldr	r1, [pc, #272]	@ (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ea:	428b      	cmp	r3, r1
 80046ec:	d101      	bne.n	80046f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80046ee:	4b44      	ldr	r3, [pc, #272]	@ (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046f0:	e001      	b.n	80046f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80046f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046fa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80046fc:	2300      	movs	r3, #0
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]
 8004708:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004716:	f043 0204 	orr.w	r2, r3, #4
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fe4a 	bl	80043b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004724:	e089      	b.n	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b02      	cmp	r3, #2
 800472e:	d107      	bne.n	8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8be 	bl	80048bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b01      	cmp	r3, #1
 8004748:	d107      	bne.n	800475a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f8fd 	bl	8004954 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004760:	2b40      	cmp	r3, #64	@ 0x40
 8004762:	d12f      	bne.n	80047c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	d02a      	beq.n	80047c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800477c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1e      	ldr	r2, [pc, #120]	@ (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d101      	bne.n	800478c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004788:	4b1d      	ldr	r3, [pc, #116]	@ (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800478a:	e001      	b.n	8004790 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800478c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4919      	ldr	r1, [pc, #100]	@ (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004798:	428b      	cmp	r3, r1
 800479a:	d101      	bne.n	80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800479c:	4b18      	ldr	r3, [pc, #96]	@ (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800479e:	e001      	b.n	80047a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80047a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b6:	f043 0202 	orr.w	r2, r3, #2
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff fdfa 	bl	80043b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d136      	bne.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d031      	beq.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a07      	ldr	r2, [pc, #28]	@ (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d101      	bne.n	80047e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80047e2:	4b07      	ldr	r3, [pc, #28]	@ (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047e4:	e001      	b.n	80047ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80047e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4902      	ldr	r1, [pc, #8]	@ (80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047f2:	428b      	cmp	r3, r1
 80047f4:	d106      	bne.n	8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80047f6:	4b02      	ldr	r3, [pc, #8]	@ (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047f8:	e006      	b.n	8004808 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80047fa:	bf00      	nop
 80047fc:	40003800 	.word	0x40003800
 8004800:	40003400 	.word	0x40003400
 8004804:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004808:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800480c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800481c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482a:	f043 0204 	orr.w	r2, r3, #4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff fdc0 	bl	80043b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004838:	e000      	b.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800483a:	bf00      	nop
}
 800483c:	bf00      	nop
 800483e:	3720      	adds	r7, #32
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	1c99      	adds	r1, r3, #2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6251      	str	r1, [r2, #36]	@ 0x24
 800486a:	881a      	ldrh	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d113      	bne.n	80048b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004898:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ffc9 	bl	8004844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	1c99      	adds	r1, r3, #2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6251      	str	r1, [r2, #36]	@ 0x24
 80048ce:	8819      	ldrh	r1, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1d      	ldr	r2, [pc, #116]	@ (800494c <I2SEx_TxISR_I2SExt+0x90>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <I2SEx_TxISR_I2SExt+0x22>
 80048da:	4b1d      	ldr	r3, [pc, #116]	@ (8004950 <I2SEx_TxISR_I2SExt+0x94>)
 80048dc:	e001      	b.n	80048e2 <I2SEx_TxISR_I2SExt+0x26>
 80048de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048e2:	460a      	mov	r2, r1
 80048e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d121      	bne.n	8004942 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a12      	ldr	r2, [pc, #72]	@ (800494c <I2SEx_TxISR_I2SExt+0x90>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d101      	bne.n	800490c <I2SEx_TxISR_I2SExt+0x50>
 8004908:	4b11      	ldr	r3, [pc, #68]	@ (8004950 <I2SEx_TxISR_I2SExt+0x94>)
 800490a:	e001      	b.n	8004910 <I2SEx_TxISR_I2SExt+0x54>
 800490c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	490d      	ldr	r1, [pc, #52]	@ (800494c <I2SEx_TxISR_I2SExt+0x90>)
 8004918:	428b      	cmp	r3, r1
 800491a:	d101      	bne.n	8004920 <I2SEx_TxISR_I2SExt+0x64>
 800491c:	4b0c      	ldr	r3, [pc, #48]	@ (8004950 <I2SEx_TxISR_I2SExt+0x94>)
 800491e:	e001      	b.n	8004924 <I2SEx_TxISR_I2SExt+0x68>
 8004920:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004924:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004928:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff ff81 	bl	8004844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40003800 	.word	0x40003800
 8004950:	40003400 	.word	0x40003400

08004954 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68d8      	ldr	r0, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004966:	1c99      	adds	r1, r3, #2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800496c:	b282      	uxth	r2, r0
 800496e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d113      	bne.n	80049b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004996:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ff4a 	bl	8004844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a20      	ldr	r2, [pc, #128]	@ (8004a48 <I2SEx_RxISR_I2SExt+0x90>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d101      	bne.n	80049ce <I2SEx_RxISR_I2SExt+0x16>
 80049ca:	4b20      	ldr	r3, [pc, #128]	@ (8004a4c <I2SEx_RxISR_I2SExt+0x94>)
 80049cc:	e001      	b.n	80049d2 <I2SEx_RxISR_I2SExt+0x1a>
 80049ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049d2:	68d8      	ldr	r0, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	1c99      	adds	r1, r3, #2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80049de:	b282      	uxth	r2, r0
 80049e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d121      	bne.n	8004a3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a12      	ldr	r2, [pc, #72]	@ (8004a48 <I2SEx_RxISR_I2SExt+0x90>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d101      	bne.n	8004a08 <I2SEx_RxISR_I2SExt+0x50>
 8004a04:	4b11      	ldr	r3, [pc, #68]	@ (8004a4c <I2SEx_RxISR_I2SExt+0x94>)
 8004a06:	e001      	b.n	8004a0c <I2SEx_RxISR_I2SExt+0x54>
 8004a08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	490d      	ldr	r1, [pc, #52]	@ (8004a48 <I2SEx_RxISR_I2SExt+0x90>)
 8004a14:	428b      	cmp	r3, r1
 8004a16:	d101      	bne.n	8004a1c <I2SEx_RxISR_I2SExt+0x64>
 8004a18:	4b0c      	ldr	r3, [pc, #48]	@ (8004a4c <I2SEx_RxISR_I2SExt+0x94>)
 8004a1a:	e001      	b.n	8004a20 <I2SEx_RxISR_I2SExt+0x68>
 8004a1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff ff03 	bl	8004844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40003800 	.word	0x40003800
 8004a4c:	40003400 	.word	0x40003400

08004a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e267      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d075      	beq.n	8004b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a6e:	4b88      	ldr	r3, [pc, #544]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d00c      	beq.n	8004a94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7a:	4b85      	ldr	r3, [pc, #532]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d112      	bne.n	8004aac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a86:	4b82      	ldr	r3, [pc, #520]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a92:	d10b      	bne.n	8004aac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a94:	4b7e      	ldr	r3, [pc, #504]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d05b      	beq.n	8004b58 <HAL_RCC_OscConfig+0x108>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d157      	bne.n	8004b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e242      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab4:	d106      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x74>
 8004ab6:	4b76      	ldr	r3, [pc, #472]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a75      	ldr	r2, [pc, #468]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e01d      	b.n	8004b00 <HAL_RCC_OscConfig+0xb0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x98>
 8004ace:	4b70      	ldr	r3, [pc, #448]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6f      	ldr	r2, [pc, #444]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b6d      	ldr	r3, [pc, #436]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a6c      	ldr	r2, [pc, #432]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCC_OscConfig+0xb0>
 8004ae8:	4b69      	ldr	r3, [pc, #420]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a68      	ldr	r2, [pc, #416]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4b66      	ldr	r3, [pc, #408]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a65      	ldr	r2, [pc, #404]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d013      	beq.n	8004b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fc fdf8 	bl	80016fc <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b10:	f7fc fdf4 	bl	80016fc <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	@ 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e207      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b22:	4b5b      	ldr	r3, [pc, #364]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0xc0>
 8004b2e:	e014      	b.n	8004b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fc fde4 	bl	80016fc <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fc fde0 	bl	80016fc <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	@ 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e1f3      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4a:	4b51      	ldr	r3, [pc, #324]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0xe8>
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d063      	beq.n	8004c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b66:	4b4a      	ldr	r3, [pc, #296]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b72:	4b47      	ldr	r3, [pc, #284]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b7e:	4b44      	ldr	r3, [pc, #272]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	4b41      	ldr	r3, [pc, #260]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x152>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e1c7      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4937      	ldr	r1, [pc, #220]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	e03a      	b.n	8004c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc0:	4b34      	ldr	r3, [pc, #208]	@ (8004c94 <HAL_RCC_OscConfig+0x244>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fc fd99 	bl	80016fc <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bce:	f7fc fd95 	bl	80016fc <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e1a8      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b28      	ldr	r3, [pc, #160]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4925      	ldr	r1, [pc, #148]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c02:	4b24      	ldr	r3, [pc, #144]	@ (8004c94 <HAL_RCC_OscConfig+0x244>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fc fd78 	bl	80016fc <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c10:	f7fc fd74 	bl	80016fc <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e187      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	4b1b      	ldr	r3, [pc, #108]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d036      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c42:	4b15      	ldr	r3, [pc, #84]	@ (8004c98 <HAL_RCC_OscConfig+0x248>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fc fd58 	bl	80016fc <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c50:	f7fc fd54 	bl	80016fc <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e167      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <HAL_RCC_OscConfig+0x240>)
 8004c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x200>
 8004c6e:	e01b      	b.n	8004ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c70:	4b09      	ldr	r3, [pc, #36]	@ (8004c98 <HAL_RCC_OscConfig+0x248>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c76:	f7fc fd41 	bl	80016fc <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7c:	e00e      	b.n	8004c9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fc fd3d 	bl	80016fc <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d907      	bls.n	8004c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e150      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
 8004c90:	40023800 	.word	0x40023800
 8004c94:	42470000 	.word	0x42470000
 8004c98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c9c:	4b88      	ldr	r3, [pc, #544]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ea      	bne.n	8004c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8097 	beq.w	8004de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cba:	4b81      	ldr	r3, [pc, #516]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	4b7d      	ldr	r3, [pc, #500]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	4a7c      	ldr	r2, [pc, #496]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cd6:	4b7a      	ldr	r3, [pc, #488]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce6:	4b77      	ldr	r3, [pc, #476]	@ (8004ec4 <HAL_RCC_OscConfig+0x474>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d118      	bne.n	8004d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf2:	4b74      	ldr	r3, [pc, #464]	@ (8004ec4 <HAL_RCC_OscConfig+0x474>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a73      	ldr	r2, [pc, #460]	@ (8004ec4 <HAL_RCC_OscConfig+0x474>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfe:	f7fc fcfd 	bl	80016fc <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d06:	f7fc fcf9 	bl	80016fc <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e10c      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d18:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec4 <HAL_RCC_OscConfig+0x474>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d106      	bne.n	8004d3a <HAL_RCC_OscConfig+0x2ea>
 8004d2c:	4b64      	ldr	r3, [pc, #400]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d30:	4a63      	ldr	r2, [pc, #396]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d38:	e01c      	b.n	8004d74 <HAL_RCC_OscConfig+0x324>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b05      	cmp	r3, #5
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x30c>
 8004d42:	4b5f      	ldr	r3, [pc, #380]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	4a5e      	ldr	r2, [pc, #376]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d48:	f043 0304 	orr.w	r3, r3, #4
 8004d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d52:	4a5b      	ldr	r2, [pc, #364]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCC_OscConfig+0x324>
 8004d5c:	4b58      	ldr	r3, [pc, #352]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d60:	4a57      	ldr	r2, [pc, #348]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d68:	4b55      	ldr	r3, [pc, #340]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6c:	4a54      	ldr	r2, [pc, #336]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	f023 0304 	bic.w	r3, r3, #4
 8004d72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d015      	beq.n	8004da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fc fcbe 	bl	80016fc <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fc fcba 	bl	80016fc <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e0cb      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	4b49      	ldr	r3, [pc, #292]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ee      	beq.n	8004d84 <HAL_RCC_OscConfig+0x334>
 8004da6:	e014      	b.n	8004dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da8:	f7fc fca8 	bl	80016fc <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dae:	e00a      	b.n	8004dc6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db0:	f7fc fca4 	bl	80016fc <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e0b5      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1ee      	bne.n	8004db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd8:	4b39      	ldr	r3, [pc, #228]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ddc:	4a38      	ldr	r2, [pc, #224]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004dde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004de2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80a1 	beq.w	8004f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dee:	4b34      	ldr	r3, [pc, #208]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d05c      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d141      	bne.n	8004e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e02:	4b31      	ldr	r3, [pc, #196]	@ (8004ec8 <HAL_RCC_OscConfig+0x478>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e08:	f7fc fc78 	bl	80016fc <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e10:	f7fc fc74 	bl	80016fc <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e087      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e22:	4b27      	ldr	r3, [pc, #156]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	019b      	lsls	r3, r3, #6
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	3b01      	subs	r3, #1
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	061b      	lsls	r3, r3, #24
 8004e52:	491b      	ldr	r1, [pc, #108]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e58:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec8 <HAL_RCC_OscConfig+0x478>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5e:	f7fc fc4d 	bl	80016fc <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e66:	f7fc fc49 	bl	80016fc <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e05c      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e78:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x416>
 8004e84:	e054      	b.n	8004f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e86:	4b10      	ldr	r3, [pc, #64]	@ (8004ec8 <HAL_RCC_OscConfig+0x478>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fc fc36 	bl	80016fc <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e94:	f7fc fc32 	bl	80016fc <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e045      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea6:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <HAL_RCC_OscConfig+0x470>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x444>
 8004eb2:	e03d      	b.n	8004f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d107      	bne.n	8004ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e038      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	40007000 	.word	0x40007000
 8004ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f3c <HAL_RCC_OscConfig+0x4ec>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d028      	beq.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d121      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d11a      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004efc:	4013      	ands	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d111      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f12:	085b      	lsrs	r3, r3, #1
 8004f14:	3b01      	subs	r3, #1
 8004f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d107      	bne.n	8004f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40023800 	.word	0x40023800

08004f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0cc      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f54:	4b68      	ldr	r3, [pc, #416]	@ (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d90c      	bls.n	8004f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f62:	4b65      	ldr	r3, [pc, #404]	@ (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6a:	4b63      	ldr	r3, [pc, #396]	@ (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0b8      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d020      	beq.n	8004fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f94:	4b59      	ldr	r3, [pc, #356]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	4a58      	ldr	r2, [pc, #352]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fac:	4b53      	ldr	r3, [pc, #332]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4a52      	ldr	r2, [pc, #328]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb8:	4b50      	ldr	r3, [pc, #320]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	494d      	ldr	r1, [pc, #308]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d044      	beq.n	8005060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d107      	bne.n	8004fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fde:	4b47      	ldr	r3, [pc, #284]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d119      	bne.n	800501e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e07f      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d003      	beq.n	8004ffe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d107      	bne.n	800500e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e06f      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500e:	4b3b      	ldr	r3, [pc, #236]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e067      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800501e:	4b37      	ldr	r3, [pc, #220]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f023 0203 	bic.w	r2, r3, #3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	4934      	ldr	r1, [pc, #208]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	4313      	orrs	r3, r2
 800502e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005030:	f7fc fb64 	bl	80016fc <HAL_GetTick>
 8005034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005036:	e00a      	b.n	800504e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005038:	f7fc fb60 	bl	80016fc <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e04f      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504e:	4b2b      	ldr	r3, [pc, #172]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 020c 	and.w	r2, r3, #12
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	429a      	cmp	r2, r3
 800505e:	d1eb      	bne.n	8005038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005060:	4b25      	ldr	r3, [pc, #148]	@ (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d20c      	bcs.n	8005088 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506e:	4b22      	ldr	r3, [pc, #136]	@ (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005076:	4b20      	ldr	r3, [pc, #128]	@ (80050f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e032      	b.n	80050ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005094:	4b19      	ldr	r3, [pc, #100]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4916      	ldr	r1, [pc, #88]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050b2:	4b12      	ldr	r3, [pc, #72]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	490e      	ldr	r1, [pc, #56]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050c6:	f000 f821 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80050ca:	4602      	mov	r2, r0
 80050cc:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	490a      	ldr	r1, [pc, #40]	@ (8005100 <HAL_RCC_ClockConfig+0x1c0>)
 80050d8:	5ccb      	ldrb	r3, [r1, r3]
 80050da:	fa22 f303 	lsr.w	r3, r2, r3
 80050de:	4a09      	ldr	r2, [pc, #36]	@ (8005104 <HAL_RCC_ClockConfig+0x1c4>)
 80050e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050e2:	4b09      	ldr	r3, [pc, #36]	@ (8005108 <HAL_RCC_ClockConfig+0x1c8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fc f90e 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40023c00 	.word	0x40023c00
 80050fc:	40023800 	.word	0x40023800
 8005100:	08017d04 	.word	0x08017d04
 8005104:	20000004 	.word	0x20000004
 8005108:	20000008 	.word	0x20000008

0800510c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800510c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005110:	b094      	sub	sp, #80	@ 0x50
 8005112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005124:	4b79      	ldr	r3, [pc, #484]	@ (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 030c 	and.w	r3, r3, #12
 800512c:	2b08      	cmp	r3, #8
 800512e:	d00d      	beq.n	800514c <HAL_RCC_GetSysClockFreq+0x40>
 8005130:	2b08      	cmp	r3, #8
 8005132:	f200 80e1 	bhi.w	80052f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x34>
 800513a:	2b04      	cmp	r3, #4
 800513c:	d003      	beq.n	8005146 <HAL_RCC_GetSysClockFreq+0x3a>
 800513e:	e0db      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005140:	4b73      	ldr	r3, [pc, #460]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x204>)
 8005142:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005144:	e0db      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005146:	4b73      	ldr	r3, [pc, #460]	@ (8005314 <HAL_RCC_GetSysClockFreq+0x208>)
 8005148:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800514a:	e0d8      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800514c:	4b6f      	ldr	r3, [pc, #444]	@ (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005154:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005156:	4b6d      	ldr	r3, [pc, #436]	@ (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d063      	beq.n	800522a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005162:	4b6a      	ldr	r3, [pc, #424]	@ (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	099b      	lsrs	r3, r3, #6
 8005168:	2200      	movs	r2, #0
 800516a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800516c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800516e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005174:	633b      	str	r3, [r7, #48]	@ 0x30
 8005176:	2300      	movs	r3, #0
 8005178:	637b      	str	r3, [r7, #52]	@ 0x34
 800517a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800517e:	4622      	mov	r2, r4
 8005180:	462b      	mov	r3, r5
 8005182:	f04f 0000 	mov.w	r0, #0
 8005186:	f04f 0100 	mov.w	r1, #0
 800518a:	0159      	lsls	r1, r3, #5
 800518c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005190:	0150      	lsls	r0, r2, #5
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4621      	mov	r1, r4
 8005198:	1a51      	subs	r1, r2, r1
 800519a:	6139      	str	r1, [r7, #16]
 800519c:	4629      	mov	r1, r5
 800519e:	eb63 0301 	sbc.w	r3, r3, r1
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051b0:	4659      	mov	r1, fp
 80051b2:	018b      	lsls	r3, r1, #6
 80051b4:	4651      	mov	r1, sl
 80051b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ba:	4651      	mov	r1, sl
 80051bc:	018a      	lsls	r2, r1, #6
 80051be:	4651      	mov	r1, sl
 80051c0:	ebb2 0801 	subs.w	r8, r2, r1
 80051c4:	4659      	mov	r1, fp
 80051c6:	eb63 0901 	sbc.w	r9, r3, r1
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051de:	4690      	mov	r8, r2
 80051e0:	4699      	mov	r9, r3
 80051e2:	4623      	mov	r3, r4
 80051e4:	eb18 0303 	adds.w	r3, r8, r3
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	462b      	mov	r3, r5
 80051ec:	eb49 0303 	adc.w	r3, r9, r3
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051fe:	4629      	mov	r1, r5
 8005200:	024b      	lsls	r3, r1, #9
 8005202:	4621      	mov	r1, r4
 8005204:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005208:	4621      	mov	r1, r4
 800520a:	024a      	lsls	r2, r1, #9
 800520c:	4610      	mov	r0, r2
 800520e:	4619      	mov	r1, r3
 8005210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005212:	2200      	movs	r2, #0
 8005214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005216:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800521c:	f7fb f890 	bl	8000340 <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4613      	mov	r3, r2
 8005226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005228:	e058      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522a:	4b38      	ldr	r3, [pc, #224]	@ (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	099b      	lsrs	r3, r3, #6
 8005230:	2200      	movs	r2, #0
 8005232:	4618      	mov	r0, r3
 8005234:	4611      	mov	r1, r2
 8005236:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800523a:	623b      	str	r3, [r7, #32]
 800523c:	2300      	movs	r3, #0
 800523e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005240:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005244:	4642      	mov	r2, r8
 8005246:	464b      	mov	r3, r9
 8005248:	f04f 0000 	mov.w	r0, #0
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	0159      	lsls	r1, r3, #5
 8005252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005256:	0150      	lsls	r0, r2, #5
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4641      	mov	r1, r8
 800525e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005262:	4649      	mov	r1, r9
 8005264:	eb63 0b01 	sbc.w	fp, r3, r1
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005274:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005278:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800527c:	ebb2 040a 	subs.w	r4, r2, sl
 8005280:	eb63 050b 	sbc.w	r5, r3, fp
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	00eb      	lsls	r3, r5, #3
 800528e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005292:	00e2      	lsls	r2, r4, #3
 8005294:	4614      	mov	r4, r2
 8005296:	461d      	mov	r5, r3
 8005298:	4643      	mov	r3, r8
 800529a:	18e3      	adds	r3, r4, r3
 800529c:	603b      	str	r3, [r7, #0]
 800529e:	464b      	mov	r3, r9
 80052a0:	eb45 0303 	adc.w	r3, r5, r3
 80052a4:	607b      	str	r3, [r7, #4]
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052b2:	4629      	mov	r1, r5
 80052b4:	028b      	lsls	r3, r1, #10
 80052b6:	4621      	mov	r1, r4
 80052b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052bc:	4621      	mov	r1, r4
 80052be:	028a      	lsls	r2, r1, #10
 80052c0:	4610      	mov	r0, r2
 80052c2:	4619      	mov	r1, r3
 80052c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c6:	2200      	movs	r2, #0
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	61fa      	str	r2, [r7, #28]
 80052cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052d0:	f7fb f836 	bl	8000340 <__aeabi_uldivmod>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4613      	mov	r3, r2
 80052da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052dc:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <HAL_RCC_GetSysClockFreq+0x200>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	0c1b      	lsrs	r3, r3, #16
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	3301      	adds	r3, #1
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80052ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052f6:	e002      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052f8:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x204>)
 80052fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005300:	4618      	mov	r0, r3
 8005302:	3750      	adds	r7, #80	@ 0x50
 8005304:	46bd      	mov	sp, r7
 8005306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
 8005310:	00f42400 	.word	0x00f42400
 8005314:	007a1200 	.word	0x007a1200

08005318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800531c:	4b03      	ldr	r3, [pc, #12]	@ (800532c <HAL_RCC_GetHCLKFreq+0x14>)
 800531e:	681b      	ldr	r3, [r3, #0]
}
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000004 	.word	0x20000004

08005330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005334:	f7ff fff0 	bl	8005318 <HAL_RCC_GetHCLKFreq>
 8005338:	4602      	mov	r2, r0
 800533a:	4b05      	ldr	r3, [pc, #20]	@ (8005350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	0a9b      	lsrs	r3, r3, #10
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	4903      	ldr	r1, [pc, #12]	@ (8005354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005346:	5ccb      	ldrb	r3, [r1, r3]
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800534c:	4618      	mov	r0, r3
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40023800 	.word	0x40023800
 8005354:	08017d14 	.word	0x08017d14

08005358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800535c:	f7ff ffdc 	bl	8005318 <HAL_RCC_GetHCLKFreq>
 8005360:	4602      	mov	r2, r0
 8005362:	4b05      	ldr	r3, [pc, #20]	@ (8005378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	0b5b      	lsrs	r3, r3, #13
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	4903      	ldr	r1, [pc, #12]	@ (800537c <HAL_RCC_GetPCLK2Freq+0x24>)
 800536e:	5ccb      	ldrb	r3, [r1, r3]
 8005370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005374:	4618      	mov	r0, r3
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40023800 	.word	0x40023800
 800537c:	08017d14 	.word	0x08017d14

08005380 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	220f      	movs	r2, #15
 800538e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005390:	4b12      	ldr	r3, [pc, #72]	@ (80053dc <HAL_RCC_GetClockConfig+0x5c>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0203 	and.w	r2, r3, #3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800539c:	4b0f      	ldr	r3, [pc, #60]	@ (80053dc <HAL_RCC_GetClockConfig+0x5c>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053a8:	4b0c      	ldr	r3, [pc, #48]	@ (80053dc <HAL_RCC_GetClockConfig+0x5c>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053b4:	4b09      	ldr	r3, [pc, #36]	@ (80053dc <HAL_RCC_GetClockConfig+0x5c>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	08db      	lsrs	r3, r3, #3
 80053ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053c2:	4b07      	ldr	r3, [pc, #28]	@ (80053e0 <HAL_RCC_GetClockConfig+0x60>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0207 	and.w	r2, r3, #7
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	601a      	str	r2, [r3, #0]
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40023800 	.word	0x40023800
 80053e0:	40023c00 	.word	0x40023c00

080053e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d105      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005408:	2b00      	cmp	r3, #0
 800540a:	d035      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800540c:	4b62      	ldr	r3, [pc, #392]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005412:	f7fc f973 	bl	80016fc <HAL_GetTick>
 8005416:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005418:	e008      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800541a:	f7fc f96f 	bl	80016fc <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e0b0      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800542c:	4b5b      	ldr	r3, [pc, #364]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1f0      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	019a      	lsls	r2, r3, #6
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	071b      	lsls	r3, r3, #28
 8005444:	4955      	ldr	r1, [pc, #340]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800544c:	4b52      	ldr	r3, [pc, #328]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005452:	f7fc f953 	bl	80016fc <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005458:	e008      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800545a:	f7fc f94f 	bl	80016fc <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e090      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800546c:	4b4b      	ldr	r3, [pc, #300]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0f0      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8083 	beq.w	800558c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	4b44      	ldr	r3, [pc, #272]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548e:	4a43      	ldr	r2, [pc, #268]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005494:	6413      	str	r3, [r2, #64]	@ 0x40
 8005496:	4b41      	ldr	r3, [pc, #260]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054a2:	4b3f      	ldr	r3, [pc, #252]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a3e      	ldr	r2, [pc, #248]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054ae:	f7fc f925 	bl	80016fc <HAL_GetTick>
 80054b2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80054b4:	e008      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b6:	f7fc f921 	bl	80016fc <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e062      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80054c8:	4b35      	ldr	r3, [pc, #212]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054d4:	4b31      	ldr	r3, [pc, #196]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054dc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d02f      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d028      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054f2:	4b2a      	ldr	r3, [pc, #168]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054fc:	4b29      	ldr	r3, [pc, #164]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005502:	4b28      	ldr	r3, [pc, #160]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005508:	4a24      	ldr	r2, [pc, #144]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800550e:	4b23      	ldr	r3, [pc, #140]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b01      	cmp	r3, #1
 8005518:	d114      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800551a:	f7fc f8ef 	bl	80016fc <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005520:	e00a      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005522:	f7fc f8eb 	bl	80016fc <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005530:	4293      	cmp	r3, r2
 8005532:	d901      	bls.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e02a      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005538:	4b18      	ldr	r3, [pc, #96]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800553a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0ee      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800554c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005550:	d10d      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005552:	4b12      	ldr	r3, [pc, #72]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005566:	490d      	ldr	r1, [pc, #52]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005568:	4313      	orrs	r3, r2
 800556a:	608b      	str	r3, [r1, #8]
 800556c:	e005      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800556e:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	4a0a      	ldr	r2, [pc, #40]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005574:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005578:	6093      	str	r3, [r2, #8]
 800557a:	4b08      	ldr	r3, [pc, #32]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800557c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005586:	4905      	ldr	r1, [pc, #20]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005588:	4313      	orrs	r3, r2
 800558a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	42470068 	.word	0x42470068
 800559c:	40023800 	.word	0x40023800
 80055a0:	40007000 	.word	0x40007000
 80055a4:	42470e40 	.word	0x42470e40

080055a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d13f      	bne.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80055c6:	4b24      	ldr	r3, [pc, #144]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d006      	beq.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055dc:	d12f      	bne.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80055de:	4b1f      	ldr	r3, [pc, #124]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80055e0:	617b      	str	r3, [r7, #20]
          break;
 80055e2:	e02f      	b.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055f0:	d108      	bne.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055f2:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055fa:	4a19      	ldr	r2, [pc, #100]	@ (8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80055fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	e007      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005604:	4b14      	ldr	r3, [pc, #80]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800560c:	4a15      	ldr	r2, [pc, #84]	@ (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005614:	4b10      	ldr	r3, [pc, #64]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800561a:	099b      	lsrs	r3, r3, #6
 800561c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005628:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800562a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800562e:	0f1b      	lsrs	r3, r3, #28
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	fbb2 f3f3 	udiv	r3, r2, r3
 800563a:	617b      	str	r3, [r7, #20]
          break;
 800563c:	e002      	b.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
          break;
 8005642:	bf00      	nop
        }
      }
      break;
 8005644:	e000      	b.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005646:	bf00      	nop
    }
  }
  return frequency;
 8005648:	697b      	ldr	r3, [r7, #20]
}
 800564a:	4618      	mov	r0, r3
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40023800 	.word	0x40023800
 800565c:	00bb8000 	.word	0x00bb8000
 8005660:	007a1200 	.word	0x007a1200
 8005664:	00f42400 	.word	0x00f42400

08005668 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e07b      	b.n	8005772 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	2b00      	cmp	r3, #0
 8005680:	d108      	bne.n	8005694 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800568a:	d009      	beq.n	80056a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	61da      	str	r2, [r3, #28]
 8005692:	e005      	b.n	80056a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fb fd24 	bl	8001108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005724:	ea42 0103 	orr.w	r1, r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	0c1b      	lsrs	r3, r3, #16
 800573e:	f003 0104 	and.w	r1, r3, #4
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005746:	f003 0210 	and.w	r2, r3, #16
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005760:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e041      	b.n	8005810 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f839 	bl	8005818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3304      	adds	r3, #4
 80057b6:	4619      	mov	r1, r3
 80057b8:	4610      	mov	r0, r2
 80057ba:	f000 f9bf 	bl	8005b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d001      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e04e      	b.n	80058e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a23      	ldr	r2, [pc, #140]	@ (80058f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d022      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x80>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800586e:	d01d      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x80>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1f      	ldr	r2, [pc, #124]	@ (80058f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d018      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x80>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1e      	ldr	r2, [pc, #120]	@ (80058f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d013      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x80>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1c      	ldr	r2, [pc, #112]	@ (80058fc <HAL_TIM_Base_Start_IT+0xd0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00e      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x80>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1b      	ldr	r2, [pc, #108]	@ (8005900 <HAL_TIM_Base_Start_IT+0xd4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d009      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x80>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a19      	ldr	r2, [pc, #100]	@ (8005904 <HAL_TIM_Base_Start_IT+0xd8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x80>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a18      	ldr	r2, [pc, #96]	@ (8005908 <HAL_TIM_Base_Start_IT+0xdc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d111      	bne.n	80058d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b06      	cmp	r3, #6
 80058bc:	d010      	beq.n	80058e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0201 	orr.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ce:	e007      	b.n	80058e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40010000 	.word	0x40010000
 80058f4:	40000400 	.word	0x40000400
 80058f8:	40000800 	.word	0x40000800
 80058fc:	40000c00 	.word	0x40000c00
 8005900:	40010400 	.word	0x40010400
 8005904:	40014000 	.word	0x40014000
 8005908:	40001800 	.word	0x40001800

0800590c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d020      	beq.n	8005970 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01b      	beq.n	8005970 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0202 	mvn.w	r2, #2
 8005940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f8d2 	bl	8005b00 <HAL_TIM_IC_CaptureCallback>
 800595c:	e005      	b.n	800596a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f8c4 	bl	8005aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f8d5 	bl	8005b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b00      	cmp	r3, #0
 8005978:	d020      	beq.n	80059bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01b      	beq.n	80059bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0204 	mvn.w	r2, #4
 800598c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f8ac 	bl	8005b00 <HAL_TIM_IC_CaptureCallback>
 80059a8:	e005      	b.n	80059b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f89e 	bl	8005aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f8af 	bl	8005b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d020      	beq.n	8005a08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d01b      	beq.n	8005a08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0208 	mvn.w	r2, #8
 80059d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2204      	movs	r2, #4
 80059de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f886 	bl	8005b00 <HAL_TIM_IC_CaptureCallback>
 80059f4:	e005      	b.n	8005a02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f878 	bl	8005aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f889 	bl	8005b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d020      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01b      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0210 	mvn.w	r2, #16
 8005a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2208      	movs	r2, #8
 8005a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f860 	bl	8005b00 <HAL_TIM_IC_CaptureCallback>
 8005a40:	e005      	b.n	8005a4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f852 	bl	8005aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f863 	bl	8005b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00c      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f06f 0201 	mvn.w	r2, #1
 8005a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fb f974 	bl	8000d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00c      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d007      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f900 	bl	8005c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00c      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d007      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f834 	bl	8005b28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f003 0320 	and.w	r3, r3, #32
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00c      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d007      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0220 	mvn.w	r2, #32
 8005adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f8d2 	bl	8005c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ae4:	bf00      	nop
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a43      	ldr	r2, [pc, #268]	@ (8005c5c <TIM_Base_SetConfig+0x120>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d013      	beq.n	8005b7c <TIM_Base_SetConfig+0x40>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b5a:	d00f      	beq.n	8005b7c <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a40      	ldr	r2, [pc, #256]	@ (8005c60 <TIM_Base_SetConfig+0x124>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00b      	beq.n	8005b7c <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a3f      	ldr	r2, [pc, #252]	@ (8005c64 <TIM_Base_SetConfig+0x128>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a3e      	ldr	r2, [pc, #248]	@ (8005c68 <TIM_Base_SetConfig+0x12c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a3d      	ldr	r2, [pc, #244]	@ (8005c6c <TIM_Base_SetConfig+0x130>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d108      	bne.n	8005b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a32      	ldr	r2, [pc, #200]	@ (8005c5c <TIM_Base_SetConfig+0x120>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d02b      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b9c:	d027      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8005c60 <TIM_Base_SetConfig+0x124>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d023      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8005c64 <TIM_Base_SetConfig+0x128>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d01f      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8005c68 <TIM_Base_SetConfig+0x12c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01b      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8005c6c <TIM_Base_SetConfig+0x130>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d017      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8005c70 <TIM_Base_SetConfig+0x134>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8005c74 <TIM_Base_SetConfig+0x138>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00f      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a29      	ldr	r2, [pc, #164]	@ (8005c78 <TIM_Base_SetConfig+0x13c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00b      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a28      	ldr	r2, [pc, #160]	@ (8005c7c <TIM_Base_SetConfig+0x140>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a27      	ldr	r2, [pc, #156]	@ (8005c80 <TIM_Base_SetConfig+0x144>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a26      	ldr	r2, [pc, #152]	@ (8005c84 <TIM_Base_SetConfig+0x148>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d108      	bne.n	8005c00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a0e      	ldr	r2, [pc, #56]	@ (8005c5c <TIM_Base_SetConfig+0x120>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <TIM_Base_SetConfig+0xf2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a10      	ldr	r2, [pc, #64]	@ (8005c6c <TIM_Base_SetConfig+0x130>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d103      	bne.n	8005c36 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f043 0204 	orr.w	r2, r3, #4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	601a      	str	r2, [r3, #0]
}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40000c00 	.word	0x40000c00
 8005c6c:	40010400 	.word	0x40010400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800
 8005c7c:	40001800 	.word	0x40001800
 8005c80:	40001c00 	.word	0x40001c00
 8005c84:	40002000 	.word	0x40002000

08005c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e042      	b.n	8005d48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fb fa5e 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2224      	movs	r2, #36	@ 0x24
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fe15 	bl	8006924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695a      	ldr	r2, [r3, #20]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	@ 0x28
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d175      	bne.n	8005e5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_UART_Transmit+0x2c>
 8005d76:	88fb      	ldrh	r3, [r7, #6]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e06e      	b.n	8005e5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2221      	movs	r2, #33	@ 0x21
 8005d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d8e:	f7fb fcb5 	bl	80016fc <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	88fa      	ldrh	r2, [r7, #6]
 8005d9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005da8:	d108      	bne.n	8005dbc <HAL_UART_Transmit+0x6c>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d104      	bne.n	8005dbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	e003      	b.n	8005dc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dc4:	e02e      	b.n	8005e24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2180      	movs	r1, #128	@ 0x80
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 fbb3 	bl	800653c <UART_WaitOnFlagUntilTimeout>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e03a      	b.n	8005e5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10b      	bne.n	8005e06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	3302      	adds	r3, #2
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	e007      	b.n	8005e16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	3301      	adds	r3, #1
 8005e14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1cb      	bne.n	8005dc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2200      	movs	r2, #0
 8005e36:	2140      	movs	r1, #64	@ 0x40
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fb7f 	bl	800653c <UART_WaitOnFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e006      	b.n	8005e5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	e000      	b.n	8005e5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
  }
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3720      	adds	r7, #32
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b08a      	sub	sp, #40	@ 0x28
 8005e6a:	af02      	add	r7, sp, #8
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	603b      	str	r3, [r7, #0]
 8005e72:	4613      	mov	r3, r2
 8005e74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	f040 8081 	bne.w	8005f8a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <HAL_UART_Receive+0x2e>
 8005e8e:	88fb      	ldrh	r3, [r7, #6]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e079      	b.n	8005f8c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2222      	movs	r2, #34	@ 0x22
 8005ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eac:	f7fb fc26 	bl	80016fc <HAL_GetTick>
 8005eb0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	88fa      	ldrh	r2, [r7, #6]
 8005eb6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	88fa      	ldrh	r2, [r7, #6]
 8005ebc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec6:	d108      	bne.n	8005eda <HAL_UART_Receive+0x74>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	61bb      	str	r3, [r7, #24]
 8005ed8:	e003      	b.n	8005ee2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005ee2:	e047      	b.n	8005f74 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2200      	movs	r2, #0
 8005eec:	2120      	movs	r1, #32
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fb24 	bl	800653c <UART_WaitOnFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e042      	b.n	8005f8c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10c      	bne.n	8005f26 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	3302      	adds	r3, #2
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	e01f      	b.n	8005f66 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f2e:	d007      	beq.n	8005f40 <HAL_UART_Receive+0xda>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <HAL_UART_Receive+0xe8>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d106      	bne.n	8005f4e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	e008      	b.n	8005f60 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	3301      	adds	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1b2      	bne.n	8005ee4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	e000      	b.n	8005f8c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005f8a:	2302      	movs	r3, #2
  }
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b0ba      	sub	sp, #232	@ 0xe8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fca:	f003 030f 	and.w	r3, r3, #15
 8005fce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10f      	bne.n	8005ffa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d009      	beq.n	8005ffa <HAL_UART_IRQHandler+0x66>
 8005fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fbd7 	bl	80067a6 <UART_Receive_IT>
      return;
 8005ff8:	e273      	b.n	80064e2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ffa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 80de 	beq.w	80061c0 <HAL_UART_IRQHandler+0x22c>
 8006004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006014:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 80d1 	beq.w	80061c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800601e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00b      	beq.n	8006042 <HAL_UART_IRQHandler+0xae>
 800602a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800602e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006032:	2b00      	cmp	r3, #0
 8006034:	d005      	beq.n	8006042 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603a:	f043 0201 	orr.w	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <HAL_UART_IRQHandler+0xd2>
 800604e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d005      	beq.n	8006066 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800605e:	f043 0202 	orr.w	r2, r3, #2
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00b      	beq.n	800608a <HAL_UART_IRQHandler+0xf6>
 8006072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006082:	f043 0204 	orr.w	r2, r3, #4
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800608a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d011      	beq.n	80060ba <HAL_UART_IRQHandler+0x126>
 8006096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d105      	bne.n	80060ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b2:	f043 0208 	orr.w	r2, r3, #8
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 820a 	beq.w	80064d8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_UART_IRQHandler+0x14e>
 80060d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060d4:	f003 0320 	and.w	r3, r3, #32
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fb62 	bl	80067a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ec:	2b40      	cmp	r3, #64	@ 0x40
 80060ee:	bf0c      	ite	eq
 80060f0:	2301      	moveq	r3, #1
 80060f2:	2300      	movne	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d103      	bne.n	800610e <HAL_UART_IRQHandler+0x17a>
 8006106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800610a:	2b00      	cmp	r3, #0
 800610c:	d04f      	beq.n	80061ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa6d 	bl	80065ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611e:	2b40      	cmp	r3, #64	@ 0x40
 8006120:	d141      	bne.n	80061a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3314      	adds	r3, #20
 8006128:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006138:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800613c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006140:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3314      	adds	r3, #20
 800614a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800614e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006152:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800615a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800615e:	e841 2300 	strex	r3, r2, [r1]
 8006162:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1d9      	bne.n	8006122 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d013      	beq.n	800619e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617a:	4a8a      	ldr	r2, [pc, #552]	@ (80063a4 <HAL_UART_IRQHandler+0x410>)
 800617c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006182:	4618      	mov	r0, r3
 8006184:	f7fb fcc6 	bl	8001b14 <HAL_DMA_Abort_IT>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d016      	beq.n	80061bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006198:	4610      	mov	r0, r2
 800619a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619c:	e00e      	b.n	80061bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f9b6 	bl	8006510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a4:	e00a      	b.n	80061bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f9b2 	bl	8006510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ac:	e006      	b.n	80061bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f9ae 	bl	8006510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80061ba:	e18d      	b.n	80064d8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061bc:	bf00      	nop
    return;
 80061be:	e18b      	b.n	80064d8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	f040 8167 	bne.w	8006498 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 8160 	beq.w	8006498 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80061d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8159 	beq.w	8006498 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	60bb      	str	r3, [r7, #8]
 80061fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006206:	2b40      	cmp	r3, #64	@ 0x40
 8006208:	f040 80ce 	bne.w	80063a8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006218:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80a9 	beq.w	8006374 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006226:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800622a:	429a      	cmp	r2, r3
 800622c:	f080 80a2 	bcs.w	8006374 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006236:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006242:	f000 8088 	beq.w	8006356 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	330c      	adds	r3, #12
 800624c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800625c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006264:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	330c      	adds	r3, #12
 800626e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006272:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006276:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800627e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800628a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1d9      	bne.n	8006246 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3314      	adds	r3, #20
 8006298:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80062a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3314      	adds	r3, #20
 80062b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80062b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80062ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80062be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80062c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e1      	bne.n	8006292 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3314      	adds	r3, #20
 80062d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80062de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3314      	adds	r3, #20
 80062ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80062f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e3      	bne.n	80062ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2220      	movs	r2, #32
 800630a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	330c      	adds	r3, #12
 800631a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006326:	f023 0310 	bic.w	r3, r3, #16
 800632a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	330c      	adds	r3, #12
 8006334:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006338:	65ba      	str	r2, [r7, #88]	@ 0x58
 800633a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800633e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e3      	bne.n	8006314 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006350:	4618      	mov	r0, r3
 8006352:	f7fb fb6f 	bl	8001a34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2202      	movs	r2, #2
 800635a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006364:	b29b      	uxth	r3, r3
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	b29b      	uxth	r3, r3
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f8d9 	bl	8006524 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006372:	e0b3      	b.n	80064dc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006378:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800637c:	429a      	cmp	r2, r3
 800637e:	f040 80ad 	bne.w	80064dc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800638c:	f040 80a6 	bne.w	80064dc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f8c1 	bl	8006524 <HAL_UARTEx_RxEventCallback>
      return;
 80063a2:	e09b      	b.n	80064dc <HAL_UART_IRQHandler+0x548>
 80063a4:	080066b5 	.word	0x080066b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 808e 	beq.w	80064e0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80063c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8089 	beq.w	80064e0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	330c      	adds	r3, #12
 80063d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	330c      	adds	r3, #12
 80063ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80063f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80063f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e3      	bne.n	80063ce <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3314      	adds	r3, #20
 800640c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	623b      	str	r3, [r7, #32]
   return(result);
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	f023 0301 	bic.w	r3, r3, #1
 800641c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3314      	adds	r3, #20
 8006426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800642a:	633a      	str	r2, [r7, #48]	@ 0x30
 800642c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e3      	bne.n	8006406 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	330c      	adds	r3, #12
 8006452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	60fb      	str	r3, [r7, #12]
   return(result);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0310 	bic.w	r3, r3, #16
 8006462:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006470:	61fa      	str	r2, [r7, #28]
 8006472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	69b9      	ldr	r1, [r7, #24]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	617b      	str	r3, [r7, #20]
   return(result);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e3      	bne.n	800644c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800648a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f847 	bl	8006524 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006496:	e023      	b.n	80064e0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800649c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d009      	beq.n	80064b8 <HAL_UART_IRQHandler+0x524>
 80064a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f910 	bl	80066d6 <UART_Transmit_IT>
    return;
 80064b6:	e014      	b.n	80064e2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00e      	beq.n	80064e2 <HAL_UART_IRQHandler+0x54e>
 80064c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f950 	bl	8006776 <UART_EndTransmit_IT>
    return;
 80064d6:	e004      	b.n	80064e2 <HAL_UART_IRQHandler+0x54e>
    return;
 80064d8:	bf00      	nop
 80064da:	e002      	b.n	80064e2 <HAL_UART_IRQHandler+0x54e>
      return;
 80064dc:	bf00      	nop
 80064de:	e000      	b.n	80064e2 <HAL_UART_IRQHandler+0x54e>
      return;
 80064e0:	bf00      	nop
  }
}
 80064e2:	37e8      	adds	r7, #232	@ 0xe8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	4613      	mov	r3, r2
 800654a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654c:	e03b      	b.n	80065c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006554:	d037      	beq.n	80065c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006556:	f7fb f8d1 	bl	80016fc <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	6a3a      	ldr	r2, [r7, #32]
 8006562:	429a      	cmp	r2, r3
 8006564:	d302      	bcc.n	800656c <UART_WaitOnFlagUntilTimeout+0x30>
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e03a      	b.n	80065e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b00      	cmp	r3, #0
 800657c:	d023      	beq.n	80065c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b80      	cmp	r3, #128	@ 0x80
 8006582:	d020      	beq.n	80065c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b40      	cmp	r3, #64	@ 0x40
 8006588:	d01d      	beq.n	80065c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b08      	cmp	r3, #8
 8006596:	d116      	bne.n	80065c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 f81d 	bl	80065ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2208      	movs	r2, #8
 80065b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e00f      	b.n	80065e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4013      	ands	r3, r2
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	bf0c      	ite	eq
 80065d6:	2301      	moveq	r3, #1
 80065d8:	2300      	movne	r3, #0
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	79fb      	ldrb	r3, [r7, #7]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d0b4      	beq.n	800654e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b095      	sub	sp, #84	@ 0x54
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800660c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	330c      	adds	r3, #12
 8006614:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006616:	643a      	str	r2, [r7, #64]	@ 0x40
 8006618:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800661c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e5      	bne.n	80065f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3314      	adds	r3, #20
 8006630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	61fb      	str	r3, [r7, #28]
   return(result);
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	f023 0301 	bic.w	r3, r3, #1
 8006640:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3314      	adds	r3, #20
 8006648:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800664a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800664c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e5      	bne.n	800662a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006662:	2b01      	cmp	r3, #1
 8006664:	d119      	bne.n	800669a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	60bb      	str	r3, [r7, #8]
   return(result);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f023 0310 	bic.w	r3, r3, #16
 800667c:	647b      	str	r3, [r7, #68]	@ 0x44
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	330c      	adds	r3, #12
 8006684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006686:	61ba      	str	r2, [r7, #24]
 8006688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6979      	ldr	r1, [r7, #20]
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	613b      	str	r3, [r7, #16]
   return(result);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e5      	bne.n	8006666 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80066a8:	bf00      	nop
 80066aa:	3754      	adds	r7, #84	@ 0x54
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f7ff ff21 	bl	8006510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ce:	bf00      	nop
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b085      	sub	sp, #20
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b21      	cmp	r3, #33	@ 0x21
 80066e8:	d13e      	bne.n	8006768 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066f2:	d114      	bne.n	800671e <UART_Transmit_IT+0x48>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d110      	bne.n	800671e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006710:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	1c9a      	adds	r2, r3, #2
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	621a      	str	r2, [r3, #32]
 800671c:	e008      	b.n	8006730 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	1c59      	adds	r1, r3, #1
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6211      	str	r1, [r2, #32]
 8006728:	781a      	ldrb	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	b29b      	uxth	r3, r3
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	4619      	mov	r1, r3
 800673e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10f      	bne.n	8006764 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006752:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006762:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	e000      	b.n	800676a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006768:	2302      	movs	r3, #2
  }
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800678c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff fea6 	bl	80064e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b08c      	sub	sp, #48	@ 0x30
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b22      	cmp	r3, #34	@ 0x22
 80067c0:	f040 80aa 	bne.w	8006918 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067cc:	d115      	bne.n	80067fa <UART_Receive_IT+0x54>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d111      	bne.n	80067fa <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067da:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f2:	1c9a      	adds	r2, r3, #2
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80067f8:	e024      	b.n	8006844 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006808:	d007      	beq.n	800681a <UART_Receive_IT+0x74>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <UART_Receive_IT+0x82>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	b2da      	uxtb	r2, r3
 8006822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	e008      	b.n	800683a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006834:	b2da      	uxtb	r2, r3
 8006836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006838:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29b      	uxth	r3, r3
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	4619      	mov	r1, r3
 8006852:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006854:	2b00      	cmp	r3, #0
 8006856:	d15d      	bne.n	8006914 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0220 	bic.w	r2, r2, #32
 8006866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695a      	ldr	r2, [r3, #20]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0201 	bic.w	r2, r2, #1
 8006886:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689a:	2b01      	cmp	r3, #1
 800689c:	d135      	bne.n	800690a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	330c      	adds	r3, #12
 80068aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	613b      	str	r3, [r7, #16]
   return(result);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f023 0310 	bic.w	r3, r3, #16
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	330c      	adds	r3, #12
 80068c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068c4:	623a      	str	r2, [r7, #32]
 80068c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	69f9      	ldr	r1, [r7, #28]
 80068ca:	6a3a      	ldr	r2, [r7, #32]
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e5      	bne.n	80068a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0310 	and.w	r3, r3, #16
 80068e2:	2b10      	cmp	r3, #16
 80068e4:	d10a      	bne.n	80068fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff fe0e 	bl	8006524 <HAL_UARTEx_RxEventCallback>
 8006908:	e002      	b.n	8006910 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fdf6 	bl	80064fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	e002      	b.n	800691a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	e000      	b.n	800691a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006918:	2302      	movs	r3, #2
  }
}
 800691a:	4618      	mov	r0, r3
 800691c:	3730      	adds	r7, #48	@ 0x30
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006928:	b0c0      	sub	sp, #256	@ 0x100
 800692a:	af00      	add	r7, sp, #0
 800692c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006940:	68d9      	ldr	r1, [r3, #12]
 8006942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	ea40 0301 	orr.w	r3, r0, r1
 800694c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800694e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	431a      	orrs	r2, r3
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	431a      	orrs	r2, r3
 8006964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	4313      	orrs	r3, r2
 800696c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800697c:	f021 010c 	bic.w	r1, r1, #12
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800698a:	430b      	orrs	r3, r1
 800698c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800698e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800699a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699e:	6999      	ldr	r1, [r3, #24]
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	ea40 0301 	orr.w	r3, r0, r1
 80069aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	4b8f      	ldr	r3, [pc, #572]	@ (8006bf0 <UART_SetConfig+0x2cc>)
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d005      	beq.n	80069c4 <UART_SetConfig+0xa0>
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	4b8d      	ldr	r3, [pc, #564]	@ (8006bf4 <UART_SetConfig+0x2d0>)
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d104      	bne.n	80069ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069c4:	f7fe fcc8 	bl	8005358 <HAL_RCC_GetPCLK2Freq>
 80069c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80069cc:	e003      	b.n	80069d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069ce:	f7fe fcaf 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 80069d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069e0:	f040 810c 	bne.w	8006bfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80069ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80069f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80069f6:	4622      	mov	r2, r4
 80069f8:	462b      	mov	r3, r5
 80069fa:	1891      	adds	r1, r2, r2
 80069fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80069fe:	415b      	adcs	r3, r3
 8006a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a06:	4621      	mov	r1, r4
 8006a08:	eb12 0801 	adds.w	r8, r2, r1
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	eb43 0901 	adc.w	r9, r3, r1
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a26:	4690      	mov	r8, r2
 8006a28:	4699      	mov	r9, r3
 8006a2a:	4623      	mov	r3, r4
 8006a2c:	eb18 0303 	adds.w	r3, r8, r3
 8006a30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a34:	462b      	mov	r3, r5
 8006a36:	eb49 0303 	adc.w	r3, r9, r3
 8006a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a52:	460b      	mov	r3, r1
 8006a54:	18db      	adds	r3, r3, r3
 8006a56:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a58:	4613      	mov	r3, r2
 8006a5a:	eb42 0303 	adc.w	r3, r2, r3
 8006a5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006a64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a68:	f7f9 fc6a 	bl	8000340 <__aeabi_uldivmod>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4b61      	ldr	r3, [pc, #388]	@ (8006bf8 <UART_SetConfig+0x2d4>)
 8006a72:	fba3 2302 	umull	r2, r3, r3, r2
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	011c      	lsls	r4, r3, #4
 8006a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006a88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	464b      	mov	r3, r9
 8006a90:	1891      	adds	r1, r2, r2
 8006a92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006a94:	415b      	adcs	r3, r3
 8006a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	eb12 0a01 	adds.w	sl, r2, r1
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	eb43 0b01 	adc.w	fp, r3, r1
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ab4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006abc:	4692      	mov	sl, r2
 8006abe:	469b      	mov	fp, r3
 8006ac0:	4643      	mov	r3, r8
 8006ac2:	eb1a 0303 	adds.w	r3, sl, r3
 8006ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006aca:	464b      	mov	r3, r9
 8006acc:	eb4b 0303 	adc.w	r3, fp, r3
 8006ad0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ae0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ae4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	18db      	adds	r3, r3, r3
 8006aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8006aee:	4613      	mov	r3, r2
 8006af0:	eb42 0303 	adc.w	r3, r2, r3
 8006af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006af6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006afa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006afe:	f7f9 fc1f 	bl	8000340 <__aeabi_uldivmod>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4611      	mov	r1, r2
 8006b08:	4b3b      	ldr	r3, [pc, #236]	@ (8006bf8 <UART_SetConfig+0x2d4>)
 8006b0a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b0e:	095b      	lsrs	r3, r3, #5
 8006b10:	2264      	movs	r2, #100	@ 0x64
 8006b12:	fb02 f303 	mul.w	r3, r2, r3
 8006b16:	1acb      	subs	r3, r1, r3
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b1e:	4b36      	ldr	r3, [pc, #216]	@ (8006bf8 <UART_SetConfig+0x2d4>)
 8006b20:	fba3 2302 	umull	r2, r3, r3, r2
 8006b24:	095b      	lsrs	r3, r3, #5
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b2c:	441c      	add	r4, r3
 8006b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b40:	4642      	mov	r2, r8
 8006b42:	464b      	mov	r3, r9
 8006b44:	1891      	adds	r1, r2, r2
 8006b46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b48:	415b      	adcs	r3, r3
 8006b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b50:	4641      	mov	r1, r8
 8006b52:	1851      	adds	r1, r2, r1
 8006b54:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b56:	4649      	mov	r1, r9
 8006b58:	414b      	adcs	r3, r1
 8006b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	f04f 0300 	mov.w	r3, #0
 8006b64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b68:	4659      	mov	r1, fp
 8006b6a:	00cb      	lsls	r3, r1, #3
 8006b6c:	4651      	mov	r1, sl
 8006b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b72:	4651      	mov	r1, sl
 8006b74:	00ca      	lsls	r2, r1, #3
 8006b76:	4610      	mov	r0, r2
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	189b      	adds	r3, r3, r2
 8006b80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b84:	464b      	mov	r3, r9
 8006b86:	460a      	mov	r2, r1
 8006b88:	eb42 0303 	adc.w	r3, r2, r3
 8006b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ba0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	18db      	adds	r3, r3, r3
 8006ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006baa:	4613      	mov	r3, r2
 8006bac:	eb42 0303 	adc.w	r3, r2, r3
 8006bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006bb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006bba:	f7f9 fbc1 	bl	8000340 <__aeabi_uldivmod>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf8 <UART_SetConfig+0x2d4>)
 8006bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8006bc8:	095b      	lsrs	r3, r3, #5
 8006bca:	2164      	movs	r1, #100	@ 0x64
 8006bcc:	fb01 f303 	mul.w	r3, r1, r3
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	3332      	adds	r3, #50	@ 0x32
 8006bd6:	4a08      	ldr	r2, [pc, #32]	@ (8006bf8 <UART_SetConfig+0x2d4>)
 8006bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bdc:	095b      	lsrs	r3, r3, #5
 8006bde:	f003 0207 	and.w	r2, r3, #7
 8006be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4422      	add	r2, r4
 8006bea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bec:	e106      	b.n	8006dfc <UART_SetConfig+0x4d8>
 8006bee:	bf00      	nop
 8006bf0:	40011000 	.word	0x40011000
 8006bf4:	40011400 	.word	0x40011400
 8006bf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c00:	2200      	movs	r2, #0
 8006c02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c0e:	4642      	mov	r2, r8
 8006c10:	464b      	mov	r3, r9
 8006c12:	1891      	adds	r1, r2, r2
 8006c14:	6239      	str	r1, [r7, #32]
 8006c16:	415b      	adcs	r3, r3
 8006c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c1e:	4641      	mov	r1, r8
 8006c20:	1854      	adds	r4, r2, r1
 8006c22:	4649      	mov	r1, r9
 8006c24:	eb43 0501 	adc.w	r5, r3, r1
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	00eb      	lsls	r3, r5, #3
 8006c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c36:	00e2      	lsls	r2, r4, #3
 8006c38:	4614      	mov	r4, r2
 8006c3a:	461d      	mov	r5, r3
 8006c3c:	4643      	mov	r3, r8
 8006c3e:	18e3      	adds	r3, r4, r3
 8006c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c44:	464b      	mov	r3, r9
 8006c46:	eb45 0303 	adc.w	r3, r5, r3
 8006c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c5e:	f04f 0200 	mov.w	r2, #0
 8006c62:	f04f 0300 	mov.w	r3, #0
 8006c66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	008b      	lsls	r3, r1, #2
 8006c6e:	4621      	mov	r1, r4
 8006c70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c74:	4621      	mov	r1, r4
 8006c76:	008a      	lsls	r2, r1, #2
 8006c78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c7c:	f7f9 fb60 	bl	8000340 <__aeabi_uldivmod>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4b60      	ldr	r3, [pc, #384]	@ (8006e08 <UART_SetConfig+0x4e4>)
 8006c86:	fba3 2302 	umull	r2, r3, r3, r2
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	011c      	lsls	r4, r3, #4
 8006c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	1891      	adds	r1, r2, r2
 8006ca6:	61b9      	str	r1, [r7, #24]
 8006ca8:	415b      	adcs	r3, r3
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cb0:	4641      	mov	r1, r8
 8006cb2:	1851      	adds	r1, r2, r1
 8006cb4:	6139      	str	r1, [r7, #16]
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	414b      	adcs	r3, r1
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	f04f 0300 	mov.w	r3, #0
 8006cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cc8:	4659      	mov	r1, fp
 8006cca:	00cb      	lsls	r3, r1, #3
 8006ccc:	4651      	mov	r1, sl
 8006cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cd2:	4651      	mov	r1, sl
 8006cd4:	00ca      	lsls	r2, r1, #3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4603      	mov	r3, r0
 8006cdc:	4642      	mov	r2, r8
 8006cde:	189b      	adds	r3, r3, r2
 8006ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	460a      	mov	r2, r1
 8006ce8:	eb42 0303 	adc.w	r3, r2, r3
 8006cec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	f04f 0300 	mov.w	r3, #0
 8006d04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d08:	4649      	mov	r1, r9
 8006d0a:	008b      	lsls	r3, r1, #2
 8006d0c:	4641      	mov	r1, r8
 8006d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d12:	4641      	mov	r1, r8
 8006d14:	008a      	lsls	r2, r1, #2
 8006d16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d1a:	f7f9 fb11 	bl	8000340 <__aeabi_uldivmod>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	4611      	mov	r1, r2
 8006d24:	4b38      	ldr	r3, [pc, #224]	@ (8006e08 <UART_SetConfig+0x4e4>)
 8006d26:	fba3 2301 	umull	r2, r3, r3, r1
 8006d2a:	095b      	lsrs	r3, r3, #5
 8006d2c:	2264      	movs	r2, #100	@ 0x64
 8006d2e:	fb02 f303 	mul.w	r3, r2, r3
 8006d32:	1acb      	subs	r3, r1, r3
 8006d34:	011b      	lsls	r3, r3, #4
 8006d36:	3332      	adds	r3, #50	@ 0x32
 8006d38:	4a33      	ldr	r2, [pc, #204]	@ (8006e08 <UART_SetConfig+0x4e4>)
 8006d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d44:	441c      	add	r4, r3
 8006d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d54:	4642      	mov	r2, r8
 8006d56:	464b      	mov	r3, r9
 8006d58:	1891      	adds	r1, r2, r2
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	415b      	adcs	r3, r3
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d64:	4641      	mov	r1, r8
 8006d66:	1851      	adds	r1, r2, r1
 8006d68:	6039      	str	r1, [r7, #0]
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	414b      	adcs	r3, r1
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d7c:	4659      	mov	r1, fp
 8006d7e:	00cb      	lsls	r3, r1, #3
 8006d80:	4651      	mov	r1, sl
 8006d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d86:	4651      	mov	r1, sl
 8006d88:	00ca      	lsls	r2, r1, #3
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4603      	mov	r3, r0
 8006d90:	4642      	mov	r2, r8
 8006d92:	189b      	adds	r3, r3, r2
 8006d94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d96:	464b      	mov	r3, r9
 8006d98:	460a      	mov	r2, r1
 8006d9a:	eb42 0303 	adc.w	r3, r2, r3
 8006d9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006daa:	667a      	str	r2, [r7, #100]	@ 0x64
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006db8:	4649      	mov	r1, r9
 8006dba:	008b      	lsls	r3, r1, #2
 8006dbc:	4641      	mov	r1, r8
 8006dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dc2:	4641      	mov	r1, r8
 8006dc4:	008a      	lsls	r2, r1, #2
 8006dc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006dca:	f7f9 fab9 	bl	8000340 <__aeabi_uldivmod>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e08 <UART_SetConfig+0x4e4>)
 8006dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	2164      	movs	r1, #100	@ 0x64
 8006ddc:	fb01 f303 	mul.w	r3, r1, r3
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	3332      	adds	r3, #50	@ 0x32
 8006de6:	4a08      	ldr	r2, [pc, #32]	@ (8006e08 <UART_SetConfig+0x4e4>)
 8006de8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	f003 020f 	and.w	r2, r3, #15
 8006df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4422      	add	r2, r4
 8006dfa:	609a      	str	r2, [r3, #8]
}
 8006dfc:	bf00      	nop
 8006dfe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e02:	46bd      	mov	sp, r7
 8006e04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e08:	51eb851f 	.word	0x51eb851f

08006e0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f043 0201 	orr.w	r2, r3, #1
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f023 0201 	bic.w	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3301      	adds	r3, #1
 8006e62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e6a:	d901      	bls.n	8006e70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e01b      	b.n	8006ea8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	daf2      	bge.n	8006e5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	019b      	lsls	r3, r3, #6
 8006e80:	f043 0220 	orr.w	r2, r3, #32
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e94:	d901      	bls.n	8006e9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e006      	b.n	8006ea8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	d0f0      	beq.n	8006e88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ecc:	d901      	bls.n	8006ed2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e018      	b.n	8006f04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	daf2      	bge.n	8006ec0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2210      	movs	r2, #16
 8006ee2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ef0:	d901      	bls.n	8006ef6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e006      	b.n	8006f04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f003 0310 	and.w	r3, r3, #16
 8006efe:	2b10      	cmp	r3, #16
 8006f00:	d0f0      	beq.n	8006ee4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b08b      	sub	sp, #44	@ 0x2c
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	089b      	lsrs	r3, r3, #2
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	f003 0303 	and.w	r3, r3, #3
 8006f34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f36:	2300      	movs	r3, #0
 8006f38:	623b      	str	r3, [r7, #32]
 8006f3a:	e014      	b.n	8006f66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	3301      	adds	r3, #1
 8006f52:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	3301      	adds	r3, #1
 8006f58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	3301      	adds	r3, #1
 8006f64:	623b      	str	r3, [r7, #32]
 8006f66:	6a3a      	ldr	r2, [r7, #32]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d3e6      	bcc.n	8006f3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f6e:	8bfb      	ldrh	r3, [r7, #30]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01e      	beq.n	8006fb2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f107 0310 	add.w	r3, r7, #16
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	fa22 f303 	lsr.w	r3, r2, r3
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	701a      	strb	r2, [r3, #0]
      i++;
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006fa6:	8bfb      	ldrh	r3, [r7, #30]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006fac:	8bfb      	ldrh	r3, [r7, #30]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1ea      	bne.n	8006f88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	372c      	adds	r7, #44	@ 0x2c
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006ff6:	78fb      	ldrb	r3, [r7, #3]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007006:	78fb      	ldrb	r3, [r7, #3]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	4013      	ands	r3, r2
 8007018:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800701a:	68bb      	ldr	r3, [r7, #8]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	f003 0301 	and.w	r3, r3, #1
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007062:	f023 0303 	bic.w	r3, r3, #3
 8007066:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	68f9      	ldr	r1, [r7, #12]
 8007078:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800707c:	4313      	orrs	r3, r2
 800707e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d107      	bne.n	8007096 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800708c:	461a      	mov	r2, r3
 800708e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007092:	6053      	str	r3, [r2, #4]
 8007094:	e00c      	b.n	80070b0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	2b02      	cmp	r3, #2
 800709a:	d107      	bne.n	80070ac <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070a2:	461a      	mov	r2, r3
 80070a4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80070a8:	6053      	str	r3, [r2, #4]
 80070aa:	e001      	b.n	80070b0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	b29b      	uxth	r3, r3
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b089      	sub	sp, #36	@ 0x24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	0c9b      	lsrs	r3, r3, #18
 8007108:	f003 0303 	and.w	r3, r3, #3
 800710c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	4413      	add	r3, r2
 8007116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	0fdb      	lsrs	r3, r3, #31
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	0fdb      	lsrs	r3, r3, #31
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 0320 	and.w	r3, r3, #32
 8007142:	2b20      	cmp	r3, #32
 8007144:	d10d      	bne.n	8007162 <USB_HC_Halt+0x82>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <USB_HC_Halt+0x82>
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d002      	beq.n	800715e <USB_HC_Halt+0x7e>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2b03      	cmp	r3, #3
 800715c:	d101      	bne.n	8007162 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	e0d8      	b.n	8007314 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <USB_HC_Halt+0x8e>
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d173      	bne.n	8007256 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	4413      	add	r3, r2
 8007176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	0151      	lsls	r1, r2, #5
 8007180:	69fa      	ldr	r2, [r7, #28]
 8007182:	440a      	add	r2, r1
 8007184:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007188:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800718c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f003 0320 	and.w	r3, r3, #32
 8007196:	2b00      	cmp	r3, #0
 8007198:	d14a      	bne.n	8007230 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d133      	bne.n	800720e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	0151      	lsls	r1, r2, #5
 80071b8:	69fa      	ldr	r2, [r7, #28]
 80071ba:	440a      	add	r2, r1
 80071bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071c4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071e4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	3301      	adds	r3, #1
 80071ea:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071f2:	d82e      	bhi.n	8007252 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007206:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800720a:	d0ec      	beq.n	80071e6 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800720c:	e081      	b.n	8007312 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	4413      	add	r3, r2
 8007216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	0151      	lsls	r1, r2, #5
 8007220:	69fa      	ldr	r2, [r7, #28]
 8007222:	440a      	add	r2, r1
 8007224:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007228:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800722c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800722e:	e070      	b.n	8007312 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	4413      	add	r3, r2
 8007238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	0151      	lsls	r1, r2, #5
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	440a      	add	r2, r1
 8007246:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800724a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800724e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007250:	e05f      	b.n	8007312 <USB_HC_Halt+0x232>
            break;
 8007252:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007254:	e05d      	b.n	8007312 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	4413      	add	r3, r2
 800725e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	0151      	lsls	r1, r2, #5
 8007268:	69fa      	ldr	r2, [r7, #28]
 800726a:	440a      	add	r2, r1
 800726c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007270:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007274:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d133      	bne.n	80072ee <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	4413      	add	r3, r2
 800728e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	0151      	lsls	r1, r2, #5
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	440a      	add	r2, r1
 800729c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072a4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	0151      	lsls	r1, r2, #5
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	440a      	add	r2, r1
 80072bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072c4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	3301      	adds	r3, #1
 80072ca:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072d2:	d81d      	bhi.n	8007310 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072ea:	d0ec      	beq.n	80072c6 <USB_HC_Halt+0x1e6>
 80072ec:	e011      	b.n	8007312 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	0151      	lsls	r1, r2, #5
 8007300:	69fa      	ldr	r2, [r7, #28]
 8007302:	440a      	add	r2, r1
 8007304:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007308:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	e000      	b.n	8007312 <USB_HC_Halt+0x232>
          break;
 8007310:	bf00      	nop
    }
  }

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3724      	adds	r7, #36	@ 0x24
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff fd7a 	bl	8006e2e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800733a:	2110      	movs	r1, #16
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff fd87 	bl	8006e50 <USB_FlushTxFifo>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff fdb1 	bl	8006eb4 <USB_FlushRxFifo>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800735c:	2300      	movs	r3, #0
 800735e:	61bb      	str	r3, [r7, #24]
 8007360:	e01f      	b.n	80073a2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	4413      	add	r3, r2
 800736a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007378:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007380:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007388:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	4413      	add	r3, r2
 8007392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007396:	461a      	mov	r2, r3
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	3301      	adds	r3, #1
 80073a0:	61bb      	str	r3, [r7, #24]
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2b0f      	cmp	r3, #15
 80073a6:	d9dc      	bls.n	8007362 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80073a8:	2300      	movs	r3, #0
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	e034      	b.n	8007418 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80073cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80073d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073e2:	461a      	mov	r2, r3
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3301      	adds	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80073f4:	d80c      	bhi.n	8007410 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007408:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800740c:	d0ec      	beq.n	80073e8 <USB_StopHost+0xc8>
 800740e:	e000      	b.n	8007412 <USB_StopHost+0xf2>
        break;
 8007410:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	3301      	adds	r3, #1
 8007416:	61bb      	str	r3, [r7, #24]
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b0f      	cmp	r3, #15
 800741c:	d9c7      	bls.n	80073ae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007424:	461a      	mov	r2, r3
 8007426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800742a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007432:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff fce9 	bl	8006e0c <USB_EnableGlobalInt>

  return ret;
 800743a:	7ffb      	ldrb	r3, [r7, #31]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f804 	bl	8007468 <USBH_HandleSof>
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b0b      	cmp	r3, #11
 8007478:	d10a      	bne.n	8007490 <USBH_HandleSof+0x28>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	4798      	blx	r3
  }
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80074a8:	2300      	movs	r3, #0
 80074aa:	2200      	movs	r2, #0
 80074ac:	2101      	movs	r1, #1
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f85b 	bl	800756a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 80074b4:	bf00      	nop
}
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80074d4:	bf00      	nop
}
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8007500:	2300      	movs	r3, #0
 8007502:	2200      	movs	r2, #0
 8007504:	2101      	movs	r1, #1
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f82f 	bl	800756a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f002 ff66 	bl	800a408 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	791b      	ldrb	r3, [r3, #4]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f844 	bl	80075d0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	795b      	ldrb	r3, [r3, #5]
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f83e 	bl	80075d0 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8007554:	2300      	movs	r3, #0
 8007556:	2200      	movs	r2, #0
 8007558:	2101      	movs	r1, #1
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f805 	bl	800756a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
 8007576:	460b      	mov	r3, r1
 8007578:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 800757a:	7afa      	ldrb	r2, [r7, #11]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
  if (available_spaces != 0U)
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
  }
#else
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8007588:	4618      	mov	r0, r3
 800758a:	f000 f9db 	bl	8007944 <osMessageQueueGetSpace>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00a      	beq.n	80075aa <USBH_OS_PutMessage+0x40>
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f000 f96d 	bl	8007884 <osMessageQueuePut>
  }
#endif /* (osCMSIS < 0x20000U) */
}
 80075aa:	bf00      	nop
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80075ba:	2300      	movs	r3, #0
 80075bc:	2200      	movs	r2, #0
 80075be:	2101      	movs	r1, #1
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff ffd2 	bl	800756a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	2b0f      	cmp	r3, #15
 80075e0:	d80d      	bhi.n	80075fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80075e2:	78fb      	ldrb	r3, [r7, #3]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	33e0      	adds	r3, #224	@ 0xe0
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	78fb      	ldrb	r3, [r7, #3]
 80075f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	33e0      	adds	r3, #224	@ 0xe0
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	440b      	add	r3, r1
 80075fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <__NVIC_SetPriority>:
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	4603      	mov	r3, r0
 8007614:	6039      	str	r1, [r7, #0]
 8007616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800761c:	2b00      	cmp	r3, #0
 800761e:	db0a      	blt.n	8007636 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	b2da      	uxtb	r2, r3
 8007624:	490c      	ldr	r1, [pc, #48]	@ (8007658 <__NVIC_SetPriority+0x4c>)
 8007626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800762a:	0112      	lsls	r2, r2, #4
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	440b      	add	r3, r1
 8007630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007634:	e00a      	b.n	800764c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	b2da      	uxtb	r2, r3
 800763a:	4908      	ldr	r1, [pc, #32]	@ (800765c <__NVIC_SetPriority+0x50>)
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	3b04      	subs	r3, #4
 8007644:	0112      	lsls	r2, r2, #4
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	440b      	add	r3, r1
 800764a:	761a      	strb	r2, [r3, #24]
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	e000e100 	.word	0xe000e100
 800765c:	e000ed00 	.word	0xe000ed00

08007660 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007664:	4b05      	ldr	r3, [pc, #20]	@ (800767c <SysTick_Handler+0x1c>)
 8007666:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007668:	f001 fdfa 	bl	8009260 <xTaskGetSchedulerState>
 800766c:	4603      	mov	r3, r0
 800766e:	2b01      	cmp	r3, #1
 8007670:	d001      	beq.n	8007676 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007672:	f002 fbf1 	bl	8009e58 <xPortSysTickHandler>
  }
}
 8007676:	bf00      	nop
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	e000e010 	.word	0xe000e010

08007680 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007684:	2100      	movs	r1, #0
 8007686:	f06f 0004 	mvn.w	r0, #4
 800768a:	f7ff ffbf 	bl	800760c <__NVIC_SetPriority>
#endif
}
 800768e:	bf00      	nop
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800769a:	f3ef 8305 	mrs	r3, IPSR
 800769e:	603b      	str	r3, [r7, #0]
  return(result);
 80076a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80076a6:	f06f 0305 	mvn.w	r3, #5
 80076aa:	607b      	str	r3, [r7, #4]
 80076ac:	e00c      	b.n	80076c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076ae:	4b0a      	ldr	r3, [pc, #40]	@ (80076d8 <osKernelInitialize+0x44>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d105      	bne.n	80076c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076b6:	4b08      	ldr	r3, [pc, #32]	@ (80076d8 <osKernelInitialize+0x44>)
 80076b8:	2201      	movs	r2, #1
 80076ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076bc:	2300      	movs	r3, #0
 80076be:	607b      	str	r3, [r7, #4]
 80076c0:	e002      	b.n	80076c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076c8:	687b      	ldr	r3, [r7, #4]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	2000038c 	.word	0x2000038c

080076dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076e2:	f3ef 8305 	mrs	r3, IPSR
 80076e6:	603b      	str	r3, [r7, #0]
  return(result);
 80076e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80076ee:	f06f 0305 	mvn.w	r3, #5
 80076f2:	607b      	str	r3, [r7, #4]
 80076f4:	e010      	b.n	8007718 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80076f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007724 <osKernelStart+0x48>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d109      	bne.n	8007712 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80076fe:	f7ff ffbf 	bl	8007680 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007702:	4b08      	ldr	r3, [pc, #32]	@ (8007724 <osKernelStart+0x48>)
 8007704:	2202      	movs	r2, #2
 8007706:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007708:	f001 f934 	bl	8008974 <vTaskStartScheduler>
      stat = osOK;
 800770c:	2300      	movs	r3, #0
 800770e:	607b      	str	r3, [r7, #4]
 8007710:	e002      	b.n	8007718 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007716:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007718:	687b      	ldr	r3, [r7, #4]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	2000038c 	.word	0x2000038c

08007728 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007728:	b580      	push	{r7, lr}
 800772a:	b08e      	sub	sp, #56	@ 0x38
 800772c:	af04      	add	r7, sp, #16
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007734:	2300      	movs	r3, #0
 8007736:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007738:	f3ef 8305 	mrs	r3, IPSR
 800773c:	617b      	str	r3, [r7, #20]
  return(result);
 800773e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007740:	2b00      	cmp	r3, #0
 8007742:	d17e      	bne.n	8007842 <osThreadNew+0x11a>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d07b      	beq.n	8007842 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800774a:	2380      	movs	r3, #128	@ 0x80
 800774c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800774e:	2318      	movs	r3, #24
 8007750:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007752:	2300      	movs	r3, #0
 8007754:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800775a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d045      	beq.n	80077ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <osThreadNew+0x48>
        name = attr->name;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <osThreadNew+0x6e>
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	2b38      	cmp	r3, #56	@ 0x38
 8007788:	d805      	bhi.n	8007796 <osThreadNew+0x6e>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <osThreadNew+0x72>
        return (NULL);
 8007796:	2300      	movs	r3, #0
 8007798:	e054      	b.n	8007844 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	089b      	lsrs	r3, r3, #2
 80077a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00e      	beq.n	80077d0 <osThreadNew+0xa8>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	2b5b      	cmp	r3, #91	@ 0x5b
 80077b8:	d90a      	bls.n	80077d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d006      	beq.n	80077d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <osThreadNew+0xa8>
        mem = 1;
 80077ca:	2301      	movs	r3, #1
 80077cc:	61bb      	str	r3, [r7, #24]
 80077ce:	e010      	b.n	80077f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10c      	bne.n	80077f2 <osThreadNew+0xca>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d108      	bne.n	80077f2 <osThreadNew+0xca>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <osThreadNew+0xca>
          mem = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	61bb      	str	r3, [r7, #24]
 80077ec:	e001      	b.n	80077f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d110      	bne.n	800781a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007800:	9202      	str	r2, [sp, #8]
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	6a3a      	ldr	r2, [r7, #32]
 800780c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 fed4 	bl	80085bc <xTaskCreateStatic>
 8007814:	4603      	mov	r3, r0
 8007816:	613b      	str	r3, [r7, #16]
 8007818:	e013      	b.n	8007842 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d110      	bne.n	8007842 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	b29a      	uxth	r2, r3
 8007824:	f107 0310 	add.w	r3, r7, #16
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 ff22 	bl	800867c <xTaskCreate>
 8007838:	4603      	mov	r3, r0
 800783a:	2b01      	cmp	r3, #1
 800783c:	d001      	beq.n	8007842 <osThreadNew+0x11a>
            hTask = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007842:	693b      	ldr	r3, [r7, #16]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3728      	adds	r7, #40	@ 0x28
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007854:	f3ef 8305 	mrs	r3, IPSR
 8007858:	60bb      	str	r3, [r7, #8]
  return(result);
 800785a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <osDelay+0x1c>
    stat = osErrorISR;
 8007860:	f06f 0305 	mvn.w	r3, #5
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	e007      	b.n	8007878 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 f848 	bl	8008908 <vTaskDelay>
    }
  }

  return (stat);
 8007878:	68fb      	ldr	r3, [r7, #12]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	4613      	mov	r3, r2
 8007892:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007898:	2300      	movs	r3, #0
 800789a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800789c:	f3ef 8305 	mrs	r3, IPSR
 80078a0:	617b      	str	r3, [r7, #20]
  return(result);
 80078a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d028      	beq.n	80078fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <osMessageQueuePut+0x36>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <osMessageQueuePut+0x36>
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80078ba:	f06f 0303 	mvn.w	r3, #3
 80078be:	61fb      	str	r3, [r7, #28]
 80078c0:	e038      	b.n	8007934 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80078c2:	2300      	movs	r3, #0
 80078c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80078c6:	f107 0210 	add.w	r2, r7, #16
 80078ca:	2300      	movs	r3, #0
 80078cc:	68b9      	ldr	r1, [r7, #8]
 80078ce:	69b8      	ldr	r0, [r7, #24]
 80078d0:	f000 fb62 	bl	8007f98 <xQueueGenericSendFromISR>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d003      	beq.n	80078e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80078da:	f06f 0302 	mvn.w	r3, #2
 80078de:	61fb      	str	r3, [r7, #28]
 80078e0:	e028      	b.n	8007934 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d025      	beq.n	8007934 <osMessageQueuePut+0xb0>
 80078e8:	4b15      	ldr	r3, [pc, #84]	@ (8007940 <osMessageQueuePut+0xbc>)
 80078ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	e01c      	b.n	8007934 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <osMessageQueuePut+0x82>
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d103      	bne.n	800790e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007906:	f06f 0303 	mvn.w	r3, #3
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	e012      	b.n	8007934 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800790e:	2300      	movs	r3, #0
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	68b9      	ldr	r1, [r7, #8]
 8007914:	69b8      	ldr	r0, [r7, #24]
 8007916:	f000 fa3d 	bl	8007d94 <xQueueGenericSend>
 800791a:	4603      	mov	r3, r0
 800791c:	2b01      	cmp	r3, #1
 800791e:	d009      	beq.n	8007934 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007926:	f06f 0301 	mvn.w	r3, #1
 800792a:	61fb      	str	r3, [r7, #28]
 800792c:	e002      	b.n	8007934 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800792e:	f06f 0302 	mvn.w	r3, #2
 8007932:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007934:	69fb      	ldr	r3, [r7, #28]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	e000ed04 	.word	0xe000ed04

08007944 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8007944:	b580      	push	{r7, lr}
 8007946:	b08a      	sub	sp, #40	@ 0x28
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d102      	bne.n	800795c <osMessageQueueGetSpace+0x18>
    space = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	627b      	str	r3, [r7, #36]	@ 0x24
 800795a:	e023      	b.n	80079a4 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800795c:	f3ef 8305 	mrs	r3, IPSR
 8007960:	61bb      	str	r3, [r7, #24]
  return(result);
 8007962:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8007964:	2b00      	cmp	r3, #0
 8007966:	d019      	beq.n	800799c <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007968:	f3ef 8211 	mrs	r2, BASEPRI
 800796c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	613a      	str	r2, [r7, #16]
 800797e:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007980:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8007982:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800799a:	e003      	b.n	80079a4 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800799c:	6a38      	ldr	r0, [r7, #32]
 800799e:	f000 fc7b 	bl	8008298 <uxQueueSpacesAvailable>
 80079a2:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 80079a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3728      	adds	r7, #40	@ 0x28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4a07      	ldr	r2, [pc, #28]	@ (80079dc <vApplicationGetIdleTaskMemory+0x2c>)
 80079c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	4a06      	ldr	r2, [pc, #24]	@ (80079e0 <vApplicationGetIdleTaskMemory+0x30>)
 80079c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2280      	movs	r2, #128	@ 0x80
 80079cc:	601a      	str	r2, [r3, #0]
}
 80079ce:	bf00      	nop
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	20000390 	.word	0x20000390
 80079e0:	200003ec 	.word	0x200003ec

080079e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4a07      	ldr	r2, [pc, #28]	@ (8007a10 <vApplicationGetTimerTaskMemory+0x2c>)
 80079f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	4a06      	ldr	r2, [pc, #24]	@ (8007a14 <vApplicationGetTimerTaskMemory+0x30>)
 80079fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a02:	601a      	str	r2, [r3, #0]
}
 8007a04:	bf00      	nop
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	200005ec 	.word	0x200005ec
 8007a14:	20000648 	.word	0x20000648

08007a18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f103 0208 	add.w	r2, r3, #8
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f103 0208 	add.w	r2, r3, #8
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f103 0208 	add.w	r2, r3, #8
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	601a      	str	r2, [r3, #0]
}
 8007aae:	bf00      	nop
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007aba:	b480      	push	{r7}
 8007abc:	b085      	sub	sp, #20
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ad0:	d103      	bne.n	8007ada <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	e00c      	b.n	8007af4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3308      	adds	r3, #8
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	e002      	b.n	8007ae8 <vListInsert+0x2e>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d2f6      	bcs.n	8007ae2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	601a      	str	r2, [r3, #0]
}
 8007b20:	bf00      	nop
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6892      	ldr	r2, [r2, #8]
 8007b42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6852      	ldr	r2, [r2, #4]
 8007b4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d103      	bne.n	8007b60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689a      	ldr	r2, [r3, #8]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	1e5a      	subs	r2, r3, #1
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10b      	bne.n	8007bac <xQueueGenericReset+0x2c>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	60bb      	str	r3, [r7, #8]
}
 8007ba6:	bf00      	nop
 8007ba8:	bf00      	nop
 8007baa:	e7fd      	b.n	8007ba8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007bac:	f002 f8c4 	bl	8009d38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb8:	68f9      	ldr	r1, [r7, #12]
 8007bba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007bbc:	fb01 f303 	mul.w	r3, r1, r3
 8007bc0:	441a      	add	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	68f9      	ldr	r1, [r7, #12]
 8007be0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007be2:	fb01 f303 	mul.w	r3, r1, r3
 8007be6:	441a      	add	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	22ff      	movs	r2, #255	@ 0xff
 8007bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	22ff      	movs	r2, #255	@ 0xff
 8007bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d114      	bne.n	8007c2c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d01a      	beq.n	8007c40 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3310      	adds	r3, #16
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f001 f93e 	bl	8008e90 <xTaskRemoveFromEventList>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d012      	beq.n	8007c40 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c50 <xQueueGenericReset+0xd0>)
 8007c1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	e009      	b.n	8007c40 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3310      	adds	r3, #16
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff fef1 	bl	8007a18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3324      	adds	r3, #36	@ 0x24
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff feec 	bl	8007a18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c40:	f002 f8ac 	bl	8009d9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c44:	2301      	movs	r3, #1
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08e      	sub	sp, #56	@ 0x38
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10b      	bne.n	8007c80 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c7a:	bf00      	nop
 8007c7c:	bf00      	nop
 8007c7e:	e7fd      	b.n	8007c7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10b      	bne.n	8007c9e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c98:	bf00      	nop
 8007c9a:	bf00      	nop
 8007c9c:	e7fd      	b.n	8007c9a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <xQueueGenericCreateStatic+0x56>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <xQueueGenericCreateStatic+0x5a>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <xQueueGenericCreateStatic+0x5c>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10b      	bne.n	8007ccc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	623b      	str	r3, [r7, #32]
}
 8007cc6:	bf00      	nop
 8007cc8:	bf00      	nop
 8007cca:	e7fd      	b.n	8007cc8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <xQueueGenericCreateStatic+0x84>
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <xQueueGenericCreateStatic+0x88>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e000      	b.n	8007cde <xQueueGenericCreateStatic+0x8a>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10b      	bne.n	8007cfa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	61fb      	str	r3, [r7, #28]
}
 8007cf4:	bf00      	nop
 8007cf6:	bf00      	nop
 8007cf8:	e7fd      	b.n	8007cf6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cfa:	2350      	movs	r3, #80	@ 0x50
 8007cfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b50      	cmp	r3, #80	@ 0x50
 8007d02:	d00b      	beq.n	8007d1c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	61bb      	str	r3, [r7, #24]
}
 8007d16:	bf00      	nop
 8007d18:	bf00      	nop
 8007d1a:	e7fd      	b.n	8007d18 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00d      	beq.n	8007d44 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d30:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	68b9      	ldr	r1, [r7, #8]
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 f805 	bl	8007d4e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3730      	adds	r7, #48	@ 0x30
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d103      	bne.n	8007d6a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	e002      	b.n	8007d70 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	69b8      	ldr	r0, [r7, #24]
 8007d80:	f7ff fefe 	bl	8007b80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d8c:	bf00      	nop
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08e      	sub	sp, #56	@ 0x38
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
 8007da0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007da2:	2300      	movs	r3, #0
 8007da4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10b      	bne.n	8007dc8 <xQueueGenericSend+0x34>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
 8007dc6:	e7fd      	b.n	8007dc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d103      	bne.n	8007dd6 <xQueueGenericSend+0x42>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <xQueueGenericSend+0x46>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <xQueueGenericSend+0x48>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10b      	bne.n	8007df8 <xQueueGenericSend+0x64>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007df2:	bf00      	nop
 8007df4:	bf00      	nop
 8007df6:	e7fd      	b.n	8007df4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d103      	bne.n	8007e06 <xQueueGenericSend+0x72>
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d101      	bne.n	8007e0a <xQueueGenericSend+0x76>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e000      	b.n	8007e0c <xQueueGenericSend+0x78>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10b      	bne.n	8007e28 <xQueueGenericSend+0x94>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	623b      	str	r3, [r7, #32]
}
 8007e22:	bf00      	nop
 8007e24:	bf00      	nop
 8007e26:	e7fd      	b.n	8007e24 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e28:	f001 fa1a 	bl	8009260 <xTaskGetSchedulerState>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d102      	bne.n	8007e38 <xQueueGenericSend+0xa4>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <xQueueGenericSend+0xa8>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e000      	b.n	8007e3e <xQueueGenericSend+0xaa>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10b      	bne.n	8007e5a <xQueueGenericSend+0xc6>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	61fb      	str	r3, [r7, #28]
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	e7fd      	b.n	8007e56 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e5a:	f001 ff6d 	bl	8009d38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d302      	bcc.n	8007e70 <xQueueGenericSend+0xdc>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d129      	bne.n	8007ec4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	68b9      	ldr	r1, [r7, #8]
 8007e74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e76:	f000 fa33 	bl	80082e0 <prvCopyDataToQueue>
 8007e7a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d010      	beq.n	8007ea6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e86:	3324      	adds	r3, #36	@ 0x24
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 f801 	bl	8008e90 <xTaskRemoveFromEventList>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d013      	beq.n	8007ebc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e94:	4b3f      	ldr	r3, [pc, #252]	@ (8007f94 <xQueueGenericSend+0x200>)
 8007e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	e00a      	b.n	8007ebc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d007      	beq.n	8007ebc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007eac:	4b39      	ldr	r3, [pc, #228]	@ (8007f94 <xQueueGenericSend+0x200>)
 8007eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ebc:	f001 ff6e 	bl	8009d9c <vPortExitCritical>
				return pdPASS;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e063      	b.n	8007f8c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d103      	bne.n	8007ed2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007eca:	f001 ff67 	bl	8009d9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e05c      	b.n	8007f8c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d106      	bne.n	8007ee6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4618      	mov	r0, r3
 8007ede:	f001 f863 	bl	8008fa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ee6:	f001 ff59 	bl	8009d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eea:	f000 fdab 	bl	8008a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eee:	f001 ff23 	bl	8009d38 <vPortEnterCritical>
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ef8:	b25b      	sxtb	r3, r3
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007efe:	d103      	bne.n	8007f08 <xQueueGenericSend+0x174>
 8007f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f0e:	b25b      	sxtb	r3, r3
 8007f10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f14:	d103      	bne.n	8007f1e <xQueueGenericSend+0x18a>
 8007f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f1e:	f001 ff3d 	bl	8009d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f22:	1d3a      	adds	r2, r7, #4
 8007f24:	f107 0314 	add.w	r3, r7, #20
 8007f28:	4611      	mov	r1, r2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f852 	bl	8008fd4 <xTaskCheckForTimeOut>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d124      	bne.n	8007f80 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f38:	f000 faca 	bl	80084d0 <prvIsQueueFull>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d018      	beq.n	8007f74 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	3310      	adds	r3, #16
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 ff4e 	bl	8008dec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f52:	f000 fa55 	bl	8008400 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f56:	f000 fd83 	bl	8008a60 <xTaskResumeAll>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f47f af7c 	bne.w	8007e5a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007f62:	4b0c      	ldr	r3, [pc, #48]	@ (8007f94 <xQueueGenericSend+0x200>)
 8007f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	e772      	b.n	8007e5a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f76:	f000 fa43 	bl	8008400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f7a:	f000 fd71 	bl	8008a60 <xTaskResumeAll>
 8007f7e:	e76c      	b.n	8007e5a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f82:	f000 fa3d 	bl	8008400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f86:	f000 fd6b 	bl	8008a60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3738      	adds	r7, #56	@ 0x38
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	e000ed04 	.word	0xe000ed04

08007f98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b090      	sub	sp, #64	@ 0x40
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
 8007fa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10b      	bne.n	8007fc8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007fc2:	bf00      	nop
 8007fc4:	bf00      	nop
 8007fc6:	e7fd      	b.n	8007fc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d103      	bne.n	8007fd6 <xQueueGenericSendFromISR+0x3e>
 8007fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <xQueueGenericSendFromISR+0x42>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e000      	b.n	8007fdc <xQueueGenericSendFromISR+0x44>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10b      	bne.n	8007ff8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ff2:	bf00      	nop
 8007ff4:	bf00      	nop
 8007ff6:	e7fd      	b.n	8007ff4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d103      	bne.n	8008006 <xQueueGenericSendFromISR+0x6e>
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008002:	2b01      	cmp	r3, #1
 8008004:	d101      	bne.n	800800a <xQueueGenericSendFromISR+0x72>
 8008006:	2301      	movs	r3, #1
 8008008:	e000      	b.n	800800c <xQueueGenericSendFromISR+0x74>
 800800a:	2300      	movs	r3, #0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10b      	bne.n	8008028 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	623b      	str	r3, [r7, #32]
}
 8008022:	bf00      	nop
 8008024:	bf00      	nop
 8008026:	e7fd      	b.n	8008024 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008028:	f001 ff66 	bl	8009ef8 <vPortValidateInterruptPriority>
	__asm volatile
 800802c:	f3ef 8211 	mrs	r2, BASEPRI
 8008030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	61fa      	str	r2, [r7, #28]
 8008042:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008044:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008046:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008050:	429a      	cmp	r2, r3
 8008052:	d302      	bcc.n	800805a <xQueueGenericSendFromISR+0xc2>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	2b02      	cmp	r3, #2
 8008058:	d12f      	bne.n	80080ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800805a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800805c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008060:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	68b9      	ldr	r1, [r7, #8]
 800806e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008070:	f000 f936 	bl	80082e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008074:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008078:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800807c:	d112      	bne.n	80080a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800807e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008082:	2b00      	cmp	r3, #0
 8008084:	d016      	beq.n	80080b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008088:	3324      	adds	r3, #36	@ 0x24
 800808a:	4618      	mov	r0, r3
 800808c:	f000 ff00 	bl	8008e90 <xTaskRemoveFromEventList>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00e      	beq.n	80080b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00b      	beq.n	80080b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	e007      	b.n	80080b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80080a8:	3301      	adds	r3, #1
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	b25a      	sxtb	r2, r3
 80080ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80080b4:	2301      	movs	r3, #1
 80080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80080b8:	e001      	b.n	80080be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080ba:	2300      	movs	r3, #0
 80080bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080c0:	617b      	str	r3, [r7, #20]
	__asm volatile
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f383 8811 	msr	BASEPRI, r3
}
 80080c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3740      	adds	r7, #64	@ 0x40
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08c      	sub	sp, #48	@ 0x30
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080e0:	2300      	movs	r3, #0
 80080e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10b      	bne.n	8008106 <xQueueReceive+0x32>
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	623b      	str	r3, [r7, #32]
}
 8008100:	bf00      	nop
 8008102:	bf00      	nop
 8008104:	e7fd      	b.n	8008102 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d103      	bne.n	8008114 <xQueueReceive+0x40>
 800810c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <xQueueReceive+0x44>
 8008114:	2301      	movs	r3, #1
 8008116:	e000      	b.n	800811a <xQueueReceive+0x46>
 8008118:	2300      	movs	r3, #0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10b      	bne.n	8008136 <xQueueReceive+0x62>
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	61fb      	str	r3, [r7, #28]
}
 8008130:	bf00      	nop
 8008132:	bf00      	nop
 8008134:	e7fd      	b.n	8008132 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008136:	f001 f893 	bl	8009260 <xTaskGetSchedulerState>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d102      	bne.n	8008146 <xQueueReceive+0x72>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <xQueueReceive+0x76>
 8008146:	2301      	movs	r3, #1
 8008148:	e000      	b.n	800814c <xQueueReceive+0x78>
 800814a:	2300      	movs	r3, #0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10b      	bne.n	8008168 <xQueueReceive+0x94>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	61bb      	str	r3, [r7, #24]
}
 8008162:	bf00      	nop
 8008164:	bf00      	nop
 8008166:	e7fd      	b.n	8008164 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008168:	f001 fde6 	bl	8009d38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800816c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008170:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008174:	2b00      	cmp	r3, #0
 8008176:	d01f      	beq.n	80081b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008178:	68b9      	ldr	r1, [r7, #8]
 800817a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800817c:	f000 f91a 	bl	80083b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008182:	1e5a      	subs	r2, r3, #1
 8008184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008186:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00f      	beq.n	80081b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008192:	3310      	adds	r3, #16
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fe7b 	bl	8008e90 <xTaskRemoveFromEventList>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d007      	beq.n	80081b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081a0:	4b3c      	ldr	r3, [pc, #240]	@ (8008294 <xQueueReceive+0x1c0>)
 80081a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081b0:	f001 fdf4 	bl	8009d9c <vPortExitCritical>
				return pdPASS;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e069      	b.n	800828c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d103      	bne.n	80081c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081be:	f001 fded 	bl	8009d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081c2:	2300      	movs	r3, #0
 80081c4:	e062      	b.n	800828c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081cc:	f107 0310 	add.w	r3, r7, #16
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 fee9 	bl	8008fa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081d6:	2301      	movs	r3, #1
 80081d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081da:	f001 fddf 	bl	8009d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081de:	f000 fc31 	bl	8008a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081e2:	f001 fda9 	bl	8009d38 <vPortEnterCritical>
 80081e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081ec:	b25b      	sxtb	r3, r3
 80081ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081f2:	d103      	bne.n	80081fc <xQueueReceive+0x128>
 80081f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008202:	b25b      	sxtb	r3, r3
 8008204:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008208:	d103      	bne.n	8008212 <xQueueReceive+0x13e>
 800820a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008212:	f001 fdc3 	bl	8009d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008216:	1d3a      	adds	r2, r7, #4
 8008218:	f107 0310 	add.w	r3, r7, #16
 800821c:	4611      	mov	r1, r2
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fed8 	bl	8008fd4 <xTaskCheckForTimeOut>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d123      	bne.n	8008272 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800822a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800822c:	f000 f93a 	bl	80084a4 <prvIsQueueEmpty>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d017      	beq.n	8008266 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	3324      	adds	r3, #36	@ 0x24
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	4611      	mov	r1, r2
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fdd4 	bl	8008dec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008244:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008246:	f000 f8db 	bl	8008400 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800824a:	f000 fc09 	bl	8008a60 <xTaskResumeAll>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d189      	bne.n	8008168 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008254:	4b0f      	ldr	r3, [pc, #60]	@ (8008294 <xQueueReceive+0x1c0>)
 8008256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	e780      	b.n	8008168 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008268:	f000 f8ca 	bl	8008400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800826c:	f000 fbf8 	bl	8008a60 <xTaskResumeAll>
 8008270:	e77a      	b.n	8008168 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008274:	f000 f8c4 	bl	8008400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008278:	f000 fbf2 	bl	8008a60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800827c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800827e:	f000 f911 	bl	80084a4 <prvIsQueueEmpty>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	f43f af6f 	beq.w	8008168 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800828a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800828c:	4618      	mov	r0, r3
 800828e:	3730      	adds	r7, #48	@ 0x30
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	e000ed04 	.word	0xe000ed04

08008298 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10b      	bne.n	80082c2 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	60fb      	str	r3, [r7, #12]
}
 80082bc:	bf00      	nop
 80082be:	bf00      	nop
 80082c0:	e7fd      	b.n	80082be <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 80082c2:	f001 fd39 	bl	8009d38 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80082d2:	f001 fd63 	bl	8009d9c <vPortExitCritical>

	return uxReturn;
 80082d6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80082d8:	4618      	mov	r0, r3
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80082ec:	2300      	movs	r3, #0
 80082ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10d      	bne.n	800831a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d14d      	bne.n	80083a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	4618      	mov	r0, r3
 800830c:	f000 ffc6 	bl	800929c <xTaskPriorityDisinherit>
 8008310:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	609a      	str	r2, [r3, #8]
 8008318:	e043      	b.n	80083a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d119      	bne.n	8008354 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6858      	ldr	r0, [r3, #4]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008328:	461a      	mov	r2, r3
 800832a:	68b9      	ldr	r1, [r7, #8]
 800832c:	f00e fdcb 	bl	8016ec6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008338:	441a      	add	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	429a      	cmp	r2, r3
 8008348:	d32b      	bcc.n	80083a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	605a      	str	r2, [r3, #4]
 8008352:	e026      	b.n	80083a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	68d8      	ldr	r0, [r3, #12]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835c:	461a      	mov	r2, r3
 800835e:	68b9      	ldr	r1, [r7, #8]
 8008360:	f00e fdb1 	bl	8016ec6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	68da      	ldr	r2, [r3, #12]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836c:	425b      	negs	r3, r3
 800836e:	441a      	add	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	429a      	cmp	r2, r3
 800837e:	d207      	bcs.n	8008390 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008388:	425b      	negs	r3, r3
 800838a:	441a      	add	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b02      	cmp	r3, #2
 8008394:	d105      	bne.n	80083a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	3b01      	subs	r3, #1
 80083a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	1c5a      	adds	r2, r3, #1
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80083aa:	697b      	ldr	r3, [r7, #20]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d018      	beq.n	80083f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68da      	ldr	r2, [r3, #12]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ce:	441a      	add	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d303      	bcc.n	80083e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68d9      	ldr	r1, [r3, #12]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f0:	461a      	mov	r2, r3
 80083f2:	6838      	ldr	r0, [r7, #0]
 80083f4:	f00e fd67 	bl	8016ec6 <memcpy>
	}
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008408:	f001 fc96 	bl	8009d38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008412:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008414:	e011      	b.n	800843a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841a:	2b00      	cmp	r3, #0
 800841c:	d012      	beq.n	8008444 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3324      	adds	r3, #36	@ 0x24
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fd34 	bl	8008e90 <xTaskRemoveFromEventList>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800842e:	f000 fe35 	bl	800909c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	3b01      	subs	r3, #1
 8008436:	b2db      	uxtb	r3, r3
 8008438:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800843a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800843e:	2b00      	cmp	r3, #0
 8008440:	dce9      	bgt.n	8008416 <prvUnlockQueue+0x16>
 8008442:	e000      	b.n	8008446 <prvUnlockQueue+0x46>
					break;
 8008444:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	22ff      	movs	r2, #255	@ 0xff
 800844a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800844e:	f001 fca5 	bl	8009d9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008452:	f001 fc71 	bl	8009d38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800845c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800845e:	e011      	b.n	8008484 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d012      	beq.n	800848e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3310      	adds	r3, #16
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fd0f 	bl	8008e90 <xTaskRemoveFromEventList>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008478:	f000 fe10 	bl	800909c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	3b01      	subs	r3, #1
 8008480:	b2db      	uxtb	r3, r3
 8008482:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008488:	2b00      	cmp	r3, #0
 800848a:	dce9      	bgt.n	8008460 <prvUnlockQueue+0x60>
 800848c:	e000      	b.n	8008490 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800848e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	22ff      	movs	r2, #255	@ 0xff
 8008494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008498:	f001 fc80 	bl	8009d9c <vPortExitCritical>
}
 800849c:	bf00      	nop
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084ac:	f001 fc44 	bl	8009d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d102      	bne.n	80084be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80084b8:	2301      	movs	r3, #1
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	e001      	b.n	80084c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80084be:	2300      	movs	r3, #0
 80084c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084c2:	f001 fc6b 	bl	8009d9c <vPortExitCritical>

	return xReturn;
 80084c6:	68fb      	ldr	r3, [r7, #12]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084d8:	f001 fc2e 	bl	8009d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d102      	bne.n	80084ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084e8:	2301      	movs	r3, #1
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	e001      	b.n	80084f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084f2:	f001 fc53 	bl	8009d9c <vPortExitCritical>

	return xReturn;
 80084f6:	68fb      	ldr	r3, [r7, #12]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800850a:	2300      	movs	r3, #0
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	e014      	b.n	800853a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008510:	4a0f      	ldr	r2, [pc, #60]	@ (8008550 <vQueueAddToRegistry+0x50>)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10b      	bne.n	8008534 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800851c:	490c      	ldr	r1, [pc, #48]	@ (8008550 <vQueueAddToRegistry+0x50>)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008526:	4a0a      	ldr	r2, [pc, #40]	@ (8008550 <vQueueAddToRegistry+0x50>)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	00db      	lsls	r3, r3, #3
 800852c:	4413      	add	r3, r2
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008532:	e006      	b.n	8008542 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3301      	adds	r3, #1
 8008538:	60fb      	str	r3, [r7, #12]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2b07      	cmp	r3, #7
 800853e:	d9e7      	bls.n	8008510 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008540:	bf00      	nop
 8008542:	bf00      	nop
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	20000a48 	.word	0x20000a48

08008554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008564:	f001 fbe8 	bl	8009d38 <vPortEnterCritical>
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800856e:	b25b      	sxtb	r3, r3
 8008570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008574:	d103      	bne.n	800857e <vQueueWaitForMessageRestricted+0x2a>
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008584:	b25b      	sxtb	r3, r3
 8008586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800858a:	d103      	bne.n	8008594 <vQueueWaitForMessageRestricted+0x40>
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008594:	f001 fc02 	bl	8009d9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859c:	2b00      	cmp	r3, #0
 800859e:	d106      	bne.n	80085ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	3324      	adds	r3, #36	@ 0x24
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	68b9      	ldr	r1, [r7, #8]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 fc45 	bl	8008e38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80085ae:	6978      	ldr	r0, [r7, #20]
 80085b0:	f7ff ff26 	bl	8008400 <prvUnlockQueue>
	}
 80085b4:	bf00      	nop
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08e      	sub	sp, #56	@ 0x38
 80085c0:	af04      	add	r7, sp, #16
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10b      	bne.n	80085e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	623b      	str	r3, [r7, #32]
}
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	e7fd      	b.n	80085e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80085e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10b      	bne.n	8008606 <xTaskCreateStatic+0x4a>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	61fb      	str	r3, [r7, #28]
}
 8008600:	bf00      	nop
 8008602:	bf00      	nop
 8008604:	e7fd      	b.n	8008602 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008606:	235c      	movs	r3, #92	@ 0x5c
 8008608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2b5c      	cmp	r3, #92	@ 0x5c
 800860e:	d00b      	beq.n	8008628 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	61bb      	str	r3, [r7, #24]
}
 8008622:	bf00      	nop
 8008624:	bf00      	nop
 8008626:	e7fd      	b.n	8008624 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008628:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800862a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862c:	2b00      	cmp	r3, #0
 800862e:	d01e      	beq.n	800866e <xTaskCreateStatic+0xb2>
 8008630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008632:	2b00      	cmp	r3, #0
 8008634:	d01b      	beq.n	800866e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008638:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800863e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008642:	2202      	movs	r2, #2
 8008644:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008648:	2300      	movs	r3, #0
 800864a:	9303      	str	r3, [sp, #12]
 800864c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864e:	9302      	str	r3, [sp, #8]
 8008650:	f107 0314 	add.w	r3, r7, #20
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	68b9      	ldr	r1, [r7, #8]
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 f850 	bl	8008706 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008668:	f000 f8de 	bl	8008828 <prvAddNewTaskToReadyList>
 800866c:	e001      	b.n	8008672 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008672:	697b      	ldr	r3, [r7, #20]
	}
 8008674:	4618      	mov	r0, r3
 8008676:	3728      	adds	r7, #40	@ 0x28
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08c      	sub	sp, #48	@ 0x30
 8008680:	af04      	add	r7, sp, #16
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	4613      	mov	r3, r2
 800868a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800868c:	88fb      	ldrh	r3, [r7, #6]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4618      	mov	r0, r3
 8008692:	f001 fc73 	bl	8009f7c <pvPortMalloc>
 8008696:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00e      	beq.n	80086bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800869e:	205c      	movs	r0, #92	@ 0x5c
 80086a0:	f001 fc6c 	bl	8009f7c <pvPortMalloc>
 80086a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d003      	beq.n	80086b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80086b2:	e005      	b.n	80086c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086b4:	6978      	ldr	r0, [r7, #20]
 80086b6:	f001 fd2f 	bl	800a118 <vPortFree>
 80086ba:	e001      	b.n	80086c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086bc:	2300      	movs	r3, #0
 80086be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d017      	beq.n	80086f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086ce:	88fa      	ldrh	r2, [r7, #6]
 80086d0:	2300      	movs	r3, #0
 80086d2:	9303      	str	r3, [sp, #12]
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	9302      	str	r3, [sp, #8]
 80086d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	68b9      	ldr	r1, [r7, #8]
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 f80e 	bl	8008706 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086ea:	69f8      	ldr	r0, [r7, #28]
 80086ec:	f000 f89c 	bl	8008828 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086f0:	2301      	movs	r3, #1
 80086f2:	61bb      	str	r3, [r7, #24]
 80086f4:	e002      	b.n	80086fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80086f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80086fc:	69bb      	ldr	r3, [r7, #24]
	}
 80086fe:	4618      	mov	r0, r3
 8008700:	3720      	adds	r7, #32
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b088      	sub	sp, #32
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
 8008712:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008716:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	461a      	mov	r2, r3
 800871e:	21a5      	movs	r1, #165	@ 0xa5
 8008720:	f00e fb08 	bl	8016d34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008726:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800872e:	3b01      	subs	r3, #1
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	f023 0307 	bic.w	r3, r3, #7
 800873c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	f003 0307 	and.w	r3, r3, #7
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00b      	beq.n	8008760 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	617b      	str	r3, [r7, #20]
}
 800875a:	bf00      	nop
 800875c:	bf00      	nop
 800875e:	e7fd      	b.n	800875c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d01f      	beq.n	80087a6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008766:	2300      	movs	r3, #0
 8008768:	61fb      	str	r3, [r7, #28]
 800876a:	e012      	b.n	8008792 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	4413      	add	r3, r2
 8008772:	7819      	ldrb	r1, [r3, #0]
 8008774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	3334      	adds	r3, #52	@ 0x34
 800877c:	460a      	mov	r2, r1
 800877e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	4413      	add	r3, r2
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d006      	beq.n	800879a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	3301      	adds	r3, #1
 8008790:	61fb      	str	r3, [r7, #28]
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	2b0f      	cmp	r3, #15
 8008796:	d9e9      	bls.n	800876c <prvInitialiseNewTask+0x66>
 8008798:	e000      	b.n	800879c <prvInitialiseNewTask+0x96>
			{
				break;
 800879a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800879c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087a4:	e003      	b.n	80087ae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80087a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b0:	2b37      	cmp	r3, #55	@ 0x37
 80087b2:	d901      	bls.n	80087b8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087b4:	2337      	movs	r3, #55	@ 0x37
 80087b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087c2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80087c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c6:	2200      	movs	r2, #0
 80087c8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	3304      	adds	r3, #4
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff f942 	bl	8007a58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d6:	3318      	adds	r3, #24
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff f93d 	bl	8007a58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80087ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80087f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f6:	2200      	movs	r2, #0
 80087f8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	68f9      	ldr	r1, [r7, #12]
 8008806:	69b8      	ldr	r0, [r7, #24]
 8008808:	f001 f966 	bl	8009ad8 <pxPortInitialiseStack>
 800880c:	4602      	mov	r2, r0
 800880e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008810:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800881c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800881e:	bf00      	nop
 8008820:	3720      	adds	r7, #32
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008830:	f001 fa82 	bl	8009d38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008834:	4b2d      	ldr	r3, [pc, #180]	@ (80088ec <prvAddNewTaskToReadyList+0xc4>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3301      	adds	r3, #1
 800883a:	4a2c      	ldr	r2, [pc, #176]	@ (80088ec <prvAddNewTaskToReadyList+0xc4>)
 800883c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800883e:	4b2c      	ldr	r3, [pc, #176]	@ (80088f0 <prvAddNewTaskToReadyList+0xc8>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d109      	bne.n	800885a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008846:	4a2a      	ldr	r2, [pc, #168]	@ (80088f0 <prvAddNewTaskToReadyList+0xc8>)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800884c:	4b27      	ldr	r3, [pc, #156]	@ (80088ec <prvAddNewTaskToReadyList+0xc4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d110      	bne.n	8008876 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008854:	f000 fc46 	bl	80090e4 <prvInitialiseTaskLists>
 8008858:	e00d      	b.n	8008876 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800885a:	4b26      	ldr	r3, [pc, #152]	@ (80088f4 <prvAddNewTaskToReadyList+0xcc>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d109      	bne.n	8008876 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008862:	4b23      	ldr	r3, [pc, #140]	@ (80088f0 <prvAddNewTaskToReadyList+0xc8>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886c:	429a      	cmp	r2, r3
 800886e:	d802      	bhi.n	8008876 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008870:	4a1f      	ldr	r2, [pc, #124]	@ (80088f0 <prvAddNewTaskToReadyList+0xc8>)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008876:	4b20      	ldr	r3, [pc, #128]	@ (80088f8 <prvAddNewTaskToReadyList+0xd0>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3301      	adds	r3, #1
 800887c:	4a1e      	ldr	r2, [pc, #120]	@ (80088f8 <prvAddNewTaskToReadyList+0xd0>)
 800887e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008880:	4b1d      	ldr	r3, [pc, #116]	@ (80088f8 <prvAddNewTaskToReadyList+0xd0>)
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800888c:	4b1b      	ldr	r3, [pc, #108]	@ (80088fc <prvAddNewTaskToReadyList+0xd4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	429a      	cmp	r2, r3
 8008892:	d903      	bls.n	800889c <prvAddNewTaskToReadyList+0x74>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008898:	4a18      	ldr	r2, [pc, #96]	@ (80088fc <prvAddNewTaskToReadyList+0xd4>)
 800889a:	6013      	str	r3, [r2, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a0:	4613      	mov	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4a15      	ldr	r2, [pc, #84]	@ (8008900 <prvAddNewTaskToReadyList+0xd8>)
 80088aa:	441a      	add	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	3304      	adds	r3, #4
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	f7ff f8dd 	bl	8007a72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088b8:	f001 fa70 	bl	8009d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80088bc:	4b0d      	ldr	r3, [pc, #52]	@ (80088f4 <prvAddNewTaskToReadyList+0xcc>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00e      	beq.n	80088e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088c4:	4b0a      	ldr	r3, [pc, #40]	@ (80088f0 <prvAddNewTaskToReadyList+0xc8>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d207      	bcs.n	80088e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80088d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008904 <prvAddNewTaskToReadyList+0xdc>)
 80088d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088e2:	bf00      	nop
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	20000f5c 	.word	0x20000f5c
 80088f0:	20000a88 	.word	0x20000a88
 80088f4:	20000f68 	.word	0x20000f68
 80088f8:	20000f78 	.word	0x20000f78
 80088fc:	20000f64 	.word	0x20000f64
 8008900:	20000a8c 	.word	0x20000a8c
 8008904:	e000ed04 	.word	0xe000ed04

08008908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d018      	beq.n	800894c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800891a:	4b14      	ldr	r3, [pc, #80]	@ (800896c <vTaskDelay+0x64>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00b      	beq.n	800893a <vTaskDelay+0x32>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	60bb      	str	r3, [r7, #8]
}
 8008934:	bf00      	nop
 8008936:	bf00      	nop
 8008938:	e7fd      	b.n	8008936 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800893a:	f000 f883 	bl	8008a44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800893e:	2100      	movs	r1, #0
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fd1b 	bl	800937c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008946:	f000 f88b 	bl	8008a60 <xTaskResumeAll>
 800894a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d107      	bne.n	8008962 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008952:	4b07      	ldr	r3, [pc, #28]	@ (8008970 <vTaskDelay+0x68>)
 8008954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008962:	bf00      	nop
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	20000f84 	.word	0x20000f84
 8008970:	e000ed04 	.word	0xe000ed04

08008974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08a      	sub	sp, #40	@ 0x28
 8008978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008982:	463a      	mov	r2, r7
 8008984:	1d39      	adds	r1, r7, #4
 8008986:	f107 0308 	add.w	r3, r7, #8
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff f810 	bl	80079b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	9202      	str	r2, [sp, #8]
 8008998:	9301      	str	r3, [sp, #4]
 800899a:	2300      	movs	r3, #0
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	2300      	movs	r3, #0
 80089a0:	460a      	mov	r2, r1
 80089a2:	4922      	ldr	r1, [pc, #136]	@ (8008a2c <vTaskStartScheduler+0xb8>)
 80089a4:	4822      	ldr	r0, [pc, #136]	@ (8008a30 <vTaskStartScheduler+0xbc>)
 80089a6:	f7ff fe09 	bl	80085bc <xTaskCreateStatic>
 80089aa:	4603      	mov	r3, r0
 80089ac:	4a21      	ldr	r2, [pc, #132]	@ (8008a34 <vTaskStartScheduler+0xc0>)
 80089ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80089b0:	4b20      	ldr	r3, [pc, #128]	@ (8008a34 <vTaskStartScheduler+0xc0>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80089b8:	2301      	movs	r3, #1
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	e001      	b.n	80089c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80089be:	2300      	movs	r3, #0
 80089c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d102      	bne.n	80089ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80089c8:	f000 fd2c 	bl	8009424 <xTimerCreateTimerTask>
 80089cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d116      	bne.n	8008a02 <vTaskStartScheduler+0x8e>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	613b      	str	r3, [r7, #16]
}
 80089e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80089e8:	4b13      	ldr	r3, [pc, #76]	@ (8008a38 <vTaskStartScheduler+0xc4>)
 80089ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80089f0:	4b12      	ldr	r3, [pc, #72]	@ (8008a3c <vTaskStartScheduler+0xc8>)
 80089f2:	2201      	movs	r2, #1
 80089f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80089f6:	4b12      	ldr	r3, [pc, #72]	@ (8008a40 <vTaskStartScheduler+0xcc>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089fc:	f001 f8f8 	bl	8009bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a00:	e00f      	b.n	8008a22 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a08:	d10b      	bne.n	8008a22 <vTaskStartScheduler+0xae>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	60fb      	str	r3, [r7, #12]
}
 8008a1c:	bf00      	nop
 8008a1e:	bf00      	nop
 8008a20:	e7fd      	b.n	8008a1e <vTaskStartScheduler+0xaa>
}
 8008a22:	bf00      	nop
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	08017cac 	.word	0x08017cac
 8008a30:	080090b5 	.word	0x080090b5
 8008a34:	20000f80 	.word	0x20000f80
 8008a38:	20000f7c 	.word	0x20000f7c
 8008a3c:	20000f68 	.word	0x20000f68
 8008a40:	20000f60 	.word	0x20000f60

08008a44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a44:	b480      	push	{r7}
 8008a46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a48:	4b04      	ldr	r3, [pc, #16]	@ (8008a5c <vTaskSuspendAll+0x18>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	4a03      	ldr	r2, [pc, #12]	@ (8008a5c <vTaskSuspendAll+0x18>)
 8008a50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a52:	bf00      	nop
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	20000f84 	.word	0x20000f84

08008a60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a6e:	4b42      	ldr	r3, [pc, #264]	@ (8008b78 <xTaskResumeAll+0x118>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10b      	bne.n	8008a8e <xTaskResumeAll+0x2e>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	603b      	str	r3, [r7, #0]
}
 8008a88:	bf00      	nop
 8008a8a:	bf00      	nop
 8008a8c:	e7fd      	b.n	8008a8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a8e:	f001 f953 	bl	8009d38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a92:	4b39      	ldr	r3, [pc, #228]	@ (8008b78 <xTaskResumeAll+0x118>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	4a37      	ldr	r2, [pc, #220]	@ (8008b78 <xTaskResumeAll+0x118>)
 8008a9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a9c:	4b36      	ldr	r3, [pc, #216]	@ (8008b78 <xTaskResumeAll+0x118>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d162      	bne.n	8008b6a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008aa4:	4b35      	ldr	r3, [pc, #212]	@ (8008b7c <xTaskResumeAll+0x11c>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d05e      	beq.n	8008b6a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008aac:	e02f      	b.n	8008b0e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aae:	4b34      	ldr	r3, [pc, #208]	@ (8008b80 <xTaskResumeAll+0x120>)
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3318      	adds	r3, #24
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7ff f836 	bl	8007b2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7ff f831 	bl	8007b2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ace:	4b2d      	ldr	r3, [pc, #180]	@ (8008b84 <xTaskResumeAll+0x124>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d903      	bls.n	8008ade <xTaskResumeAll+0x7e>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ada:	4a2a      	ldr	r2, [pc, #168]	@ (8008b84 <xTaskResumeAll+0x124>)
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4a27      	ldr	r2, [pc, #156]	@ (8008b88 <xTaskResumeAll+0x128>)
 8008aec:	441a      	add	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3304      	adds	r3, #4
 8008af2:	4619      	mov	r1, r3
 8008af4:	4610      	mov	r0, r2
 8008af6:	f7fe ffbc 	bl	8007a72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008afe:	4b23      	ldr	r3, [pc, #140]	@ (8008b8c <xTaskResumeAll+0x12c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d302      	bcc.n	8008b0e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008b08:	4b21      	ldr	r3, [pc, #132]	@ (8008b90 <xTaskResumeAll+0x130>)
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8008b80 <xTaskResumeAll+0x120>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1cb      	bne.n	8008aae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b1c:	f000 fb80 	bl	8009220 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b20:	4b1c      	ldr	r3, [pc, #112]	@ (8008b94 <xTaskResumeAll+0x134>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d010      	beq.n	8008b4e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b2c:	f000 f846 	bl	8008bbc <xTaskIncrementTick>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008b36:	4b16      	ldr	r3, [pc, #88]	@ (8008b90 <xTaskResumeAll+0x130>)
 8008b38:	2201      	movs	r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1f1      	bne.n	8008b2c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008b48:	4b12      	ldr	r3, [pc, #72]	@ (8008b94 <xTaskResumeAll+0x134>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b4e:	4b10      	ldr	r3, [pc, #64]	@ (8008b90 <xTaskResumeAll+0x130>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d009      	beq.n	8008b6a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b56:	2301      	movs	r3, #1
 8008b58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8008b98 <xTaskResumeAll+0x138>)
 8008b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b6a:	f001 f917 	bl	8009d9c <vPortExitCritical>

	return xAlreadyYielded;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	20000f84 	.word	0x20000f84
 8008b7c:	20000f5c 	.word	0x20000f5c
 8008b80:	20000f1c 	.word	0x20000f1c
 8008b84:	20000f64 	.word	0x20000f64
 8008b88:	20000a8c 	.word	0x20000a8c
 8008b8c:	20000a88 	.word	0x20000a88
 8008b90:	20000f70 	.word	0x20000f70
 8008b94:	20000f6c 	.word	0x20000f6c
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ba2:	4b05      	ldr	r3, [pc, #20]	@ (8008bb8 <xTaskGetTickCount+0x1c>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ba8:	687b      	ldr	r3, [r7, #4]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	20000f60 	.word	0x20000f60

08008bbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8008d04 <xTaskIncrementTick+0x148>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f040 8090 	bne.w	8008cf0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8008d08 <xTaskIncrementTick+0x14c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8008d08 <xTaskIncrementTick+0x14c>)
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d121      	bne.n	8008c28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008be4:	4b49      	ldr	r3, [pc, #292]	@ (8008d0c <xTaskIncrementTick+0x150>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00b      	beq.n	8008c06 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	603b      	str	r3, [r7, #0]
}
 8008c00:	bf00      	nop
 8008c02:	bf00      	nop
 8008c04:	e7fd      	b.n	8008c02 <xTaskIncrementTick+0x46>
 8008c06:	4b41      	ldr	r3, [pc, #260]	@ (8008d0c <xTaskIncrementTick+0x150>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	4b40      	ldr	r3, [pc, #256]	@ (8008d10 <xTaskIncrementTick+0x154>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a3e      	ldr	r2, [pc, #248]	@ (8008d0c <xTaskIncrementTick+0x150>)
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	4a3e      	ldr	r2, [pc, #248]	@ (8008d10 <xTaskIncrementTick+0x154>)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8008d14 <xTaskIncrementTick+0x158>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	4a3c      	ldr	r2, [pc, #240]	@ (8008d14 <xTaskIncrementTick+0x158>)
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	f000 fafc 	bl	8009220 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c28:	4b3b      	ldr	r3, [pc, #236]	@ (8008d18 <xTaskIncrementTick+0x15c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d349      	bcc.n	8008cc6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c32:	4b36      	ldr	r3, [pc, #216]	@ (8008d0c <xTaskIncrementTick+0x150>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d104      	bne.n	8008c46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c3c:	4b36      	ldr	r3, [pc, #216]	@ (8008d18 <xTaskIncrementTick+0x15c>)
 8008c3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c42:	601a      	str	r2, [r3, #0]
					break;
 8008c44:	e03f      	b.n	8008cc6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c46:	4b31      	ldr	r3, [pc, #196]	@ (8008d0c <xTaskIncrementTick+0x150>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d203      	bcs.n	8008c66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8008d18 <xTaskIncrementTick+0x15c>)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c64:	e02f      	b.n	8008cc6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe ff5e 	bl	8007b2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d004      	beq.n	8008c82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	3318      	adds	r3, #24
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fe ff55 	bl	8007b2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c86:	4b25      	ldr	r3, [pc, #148]	@ (8008d1c <xTaskIncrementTick+0x160>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d903      	bls.n	8008c96 <xTaskIncrementTick+0xda>
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c92:	4a22      	ldr	r2, [pc, #136]	@ (8008d1c <xTaskIncrementTick+0x160>)
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8008d20 <xTaskIncrementTick+0x164>)
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	3304      	adds	r3, #4
 8008caa:	4619      	mov	r1, r3
 8008cac:	4610      	mov	r0, r2
 8008cae:	f7fe fee0 	bl	8007a72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8008d24 <xTaskIncrementTick+0x168>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d3b8      	bcc.n	8008c32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cc4:	e7b5      	b.n	8008c32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008cc6:	4b17      	ldr	r3, [pc, #92]	@ (8008d24 <xTaskIncrementTick+0x168>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ccc:	4914      	ldr	r1, [pc, #80]	@ (8008d20 <xTaskIncrementTick+0x164>)
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	440b      	add	r3, r1
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d901      	bls.n	8008ce2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ce2:	4b11      	ldr	r3, [pc, #68]	@ (8008d28 <xTaskIncrementTick+0x16c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d007      	beq.n	8008cfa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008cea:	2301      	movs	r3, #1
 8008cec:	617b      	str	r3, [r7, #20]
 8008cee:	e004      	b.n	8008cfa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8008d2c <xTaskIncrementTick+0x170>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8008d2c <xTaskIncrementTick+0x170>)
 8008cf8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008cfa:	697b      	ldr	r3, [r7, #20]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	20000f84 	.word	0x20000f84
 8008d08:	20000f60 	.word	0x20000f60
 8008d0c:	20000f14 	.word	0x20000f14
 8008d10:	20000f18 	.word	0x20000f18
 8008d14:	20000f74 	.word	0x20000f74
 8008d18:	20000f7c 	.word	0x20000f7c
 8008d1c:	20000f64 	.word	0x20000f64
 8008d20:	20000a8c 	.word	0x20000a8c
 8008d24:	20000a88 	.word	0x20000a88
 8008d28:	20000f70 	.word	0x20000f70
 8008d2c:	20000f6c 	.word	0x20000f6c

08008d30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d36:	4b28      	ldr	r3, [pc, #160]	@ (8008dd8 <vTaskSwitchContext+0xa8>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d3e:	4b27      	ldr	r3, [pc, #156]	@ (8008ddc <vTaskSwitchContext+0xac>)
 8008d40:	2201      	movs	r2, #1
 8008d42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d44:	e042      	b.n	8008dcc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008d46:	4b25      	ldr	r3, [pc, #148]	@ (8008ddc <vTaskSwitchContext+0xac>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4c:	4b24      	ldr	r3, [pc, #144]	@ (8008de0 <vTaskSwitchContext+0xb0>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	e011      	b.n	8008d78 <vTaskSwitchContext+0x48>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10b      	bne.n	8008d72 <vTaskSwitchContext+0x42>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	607b      	str	r3, [r7, #4]
}
 8008d6c:	bf00      	nop
 8008d6e:	bf00      	nop
 8008d70:	e7fd      	b.n	8008d6e <vTaskSwitchContext+0x3e>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	491a      	ldr	r1, [pc, #104]	@ (8008de4 <vTaskSwitchContext+0xb4>)
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	440b      	add	r3, r1
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0e3      	beq.n	8008d54 <vTaskSwitchContext+0x24>
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4a13      	ldr	r2, [pc, #76]	@ (8008de4 <vTaskSwitchContext+0xb4>)
 8008d98:	4413      	add	r3, r2
 8008d9a:	60bb      	str	r3, [r7, #8]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	605a      	str	r2, [r3, #4]
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	3308      	adds	r3, #8
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d104      	bne.n	8008dbc <vTaskSwitchContext+0x8c>
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	605a      	str	r2, [r3, #4]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	4a09      	ldr	r2, [pc, #36]	@ (8008de8 <vTaskSwitchContext+0xb8>)
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	4a06      	ldr	r2, [pc, #24]	@ (8008de0 <vTaskSwitchContext+0xb0>)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6013      	str	r3, [r2, #0]
}
 8008dcc:	bf00      	nop
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	20000f84 	.word	0x20000f84
 8008ddc:	20000f70 	.word	0x20000f70
 8008de0:	20000f64 	.word	0x20000f64
 8008de4:	20000a8c 	.word	0x20000a8c
 8008de8:	20000a88 	.word	0x20000a88

08008dec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10b      	bne.n	8008e14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	60fb      	str	r3, [r7, #12]
}
 8008e0e:	bf00      	nop
 8008e10:	bf00      	nop
 8008e12:	e7fd      	b.n	8008e10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e14:	4b07      	ldr	r3, [pc, #28]	@ (8008e34 <vTaskPlaceOnEventList+0x48>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3318      	adds	r3, #24
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7fe fe4c 	bl	8007aba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e22:	2101      	movs	r1, #1
 8008e24:	6838      	ldr	r0, [r7, #0]
 8008e26:	f000 faa9 	bl	800937c <prvAddCurrentTaskToDelayedList>
}
 8008e2a:	bf00      	nop
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20000a88 	.word	0x20000a88

08008e38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10b      	bne.n	8008e62 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	617b      	str	r3, [r7, #20]
}
 8008e5c:	bf00      	nop
 8008e5e:	bf00      	nop
 8008e60:	e7fd      	b.n	8008e5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e62:	4b0a      	ldr	r3, [pc, #40]	@ (8008e8c <vTaskPlaceOnEventListRestricted+0x54>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3318      	adds	r3, #24
 8008e68:	4619      	mov	r1, r3
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f7fe fe01 	bl	8007a72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008e76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e7c:	6879      	ldr	r1, [r7, #4]
 8008e7e:	68b8      	ldr	r0, [r7, #8]
 8008e80:	f000 fa7c 	bl	800937c <prvAddCurrentTaskToDelayedList>
	}
 8008e84:	bf00      	nop
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	20000a88 	.word	0x20000a88

08008e90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10b      	bne.n	8008ebe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	60fb      	str	r3, [r7, #12]
}
 8008eb8:	bf00      	nop
 8008eba:	bf00      	nop
 8008ebc:	e7fd      	b.n	8008eba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	3318      	adds	r3, #24
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fe32 	bl	8007b2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8008f40 <xTaskRemoveFromEventList+0xb0>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d11d      	bne.n	8008f0c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fe29 	bl	8007b2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ede:	4b19      	ldr	r3, [pc, #100]	@ (8008f44 <xTaskRemoveFromEventList+0xb4>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d903      	bls.n	8008eee <xTaskRemoveFromEventList+0x5e>
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eea:	4a16      	ldr	r2, [pc, #88]	@ (8008f44 <xTaskRemoveFromEventList+0xb4>)
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4a13      	ldr	r2, [pc, #76]	@ (8008f48 <xTaskRemoveFromEventList+0xb8>)
 8008efc:	441a      	add	r2, r3
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	3304      	adds	r3, #4
 8008f02:	4619      	mov	r1, r3
 8008f04:	4610      	mov	r0, r2
 8008f06:	f7fe fdb4 	bl	8007a72 <vListInsertEnd>
 8008f0a:	e005      	b.n	8008f18 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	3318      	adds	r3, #24
 8008f10:	4619      	mov	r1, r3
 8008f12:	480e      	ldr	r0, [pc, #56]	@ (8008f4c <xTaskRemoveFromEventList+0xbc>)
 8008f14:	f7fe fdad 	bl	8007a72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f50 <xTaskRemoveFromEventList+0xc0>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d905      	bls.n	8008f32 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f26:	2301      	movs	r3, #1
 8008f28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f54 <xTaskRemoveFromEventList+0xc4>)
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	601a      	str	r2, [r3, #0]
 8008f30:	e001      	b.n	8008f36 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008f32:	2300      	movs	r3, #0
 8008f34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f36:	697b      	ldr	r3, [r7, #20]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	20000f84 	.word	0x20000f84
 8008f44:	20000f64 	.word	0x20000f64
 8008f48:	20000a8c 	.word	0x20000a8c
 8008f4c:	20000f1c 	.word	0x20000f1c
 8008f50:	20000a88 	.word	0x20000a88
 8008f54:	20000f70 	.word	0x20000f70

08008f58 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10b      	bne.n	8008f7e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	bf00      	nop
 8008f7c:	e7fd      	b.n	8008f7a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008f7e:	f000 fedb 	bl	8009d38 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f82:	4b07      	ldr	r3, [pc, #28]	@ (8008fa0 <vTaskSetTimeOutState+0x48>)
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008f8a:	4b06      	ldr	r3, [pc, #24]	@ (8008fa4 <vTaskSetTimeOutState+0x4c>)
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008f92:	f000 ff03 	bl	8009d9c <vPortExitCritical>
}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000f74 	.word	0x20000f74
 8008fa4:	20000f60 	.word	0x20000f60

08008fa8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fb0:	4b06      	ldr	r3, [pc, #24]	@ (8008fcc <vTaskInternalSetTimeOutState+0x24>)
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fb8:	4b05      	ldr	r3, [pc, #20]	@ (8008fd0 <vTaskInternalSetTimeOutState+0x28>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	605a      	str	r2, [r3, #4]
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	20000f74 	.word	0x20000f74
 8008fd0:	20000f60 	.word	0x20000f60

08008fd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b088      	sub	sp, #32
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10b      	bne.n	8008ffc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	613b      	str	r3, [r7, #16]
}
 8008ff6:	bf00      	nop
 8008ff8:	bf00      	nop
 8008ffa:	e7fd      	b.n	8008ff8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10b      	bne.n	800901a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	60fb      	str	r3, [r7, #12]
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop
 8009018:	e7fd      	b.n	8009016 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800901a:	f000 fe8d 	bl	8009d38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800901e:	4b1d      	ldr	r3, [pc, #116]	@ (8009094 <xTaskCheckForTimeOut+0xc0>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009036:	d102      	bne.n	800903e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009038:	2300      	movs	r3, #0
 800903a:	61fb      	str	r3, [r7, #28]
 800903c:	e023      	b.n	8009086 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	4b15      	ldr	r3, [pc, #84]	@ (8009098 <xTaskCheckForTimeOut+0xc4>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	d007      	beq.n	800905a <xTaskCheckForTimeOut+0x86>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	429a      	cmp	r2, r3
 8009052:	d302      	bcc.n	800905a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009054:	2301      	movs	r3, #1
 8009056:	61fb      	str	r3, [r7, #28]
 8009058:	e015      	b.n	8009086 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	429a      	cmp	r2, r3
 8009062:	d20b      	bcs.n	800907c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	1ad2      	subs	r2, r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff ff99 	bl	8008fa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009076:	2300      	movs	r3, #0
 8009078:	61fb      	str	r3, [r7, #28]
 800907a:	e004      	b.n	8009086 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	2200      	movs	r2, #0
 8009080:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009082:	2301      	movs	r3, #1
 8009084:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009086:	f000 fe89 	bl	8009d9c <vPortExitCritical>

	return xReturn;
 800908a:	69fb      	ldr	r3, [r7, #28]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3720      	adds	r7, #32
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20000f60 	.word	0x20000f60
 8009098:	20000f74 	.word	0x20000f74

0800909c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090a0:	4b03      	ldr	r3, [pc, #12]	@ (80090b0 <vTaskMissedYield+0x14>)
 80090a2:	2201      	movs	r2, #1
 80090a4:	601a      	str	r2, [r3, #0]
}
 80090a6:	bf00      	nop
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	20000f70 	.word	0x20000f70

080090b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090bc:	f000 f852 	bl	8009164 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090c0:	4b06      	ldr	r3, [pc, #24]	@ (80090dc <prvIdleTask+0x28>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d9f9      	bls.n	80090bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80090c8:	4b05      	ldr	r3, [pc, #20]	@ (80090e0 <prvIdleTask+0x2c>)
 80090ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090d8:	e7f0      	b.n	80090bc <prvIdleTask+0x8>
 80090da:	bf00      	nop
 80090dc:	20000a8c 	.word	0x20000a8c
 80090e0:	e000ed04 	.word	0xe000ed04

080090e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090ea:	2300      	movs	r3, #0
 80090ec:	607b      	str	r3, [r7, #4]
 80090ee:	e00c      	b.n	800910a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	4613      	mov	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4413      	add	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4a12      	ldr	r2, [pc, #72]	@ (8009144 <prvInitialiseTaskLists+0x60>)
 80090fc:	4413      	add	r3, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fc8a 	bl	8007a18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	3301      	adds	r3, #1
 8009108:	607b      	str	r3, [r7, #4]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b37      	cmp	r3, #55	@ 0x37
 800910e:	d9ef      	bls.n	80090f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009110:	480d      	ldr	r0, [pc, #52]	@ (8009148 <prvInitialiseTaskLists+0x64>)
 8009112:	f7fe fc81 	bl	8007a18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009116:	480d      	ldr	r0, [pc, #52]	@ (800914c <prvInitialiseTaskLists+0x68>)
 8009118:	f7fe fc7e 	bl	8007a18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800911c:	480c      	ldr	r0, [pc, #48]	@ (8009150 <prvInitialiseTaskLists+0x6c>)
 800911e:	f7fe fc7b 	bl	8007a18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009122:	480c      	ldr	r0, [pc, #48]	@ (8009154 <prvInitialiseTaskLists+0x70>)
 8009124:	f7fe fc78 	bl	8007a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009128:	480b      	ldr	r0, [pc, #44]	@ (8009158 <prvInitialiseTaskLists+0x74>)
 800912a:	f7fe fc75 	bl	8007a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800912e:	4b0b      	ldr	r3, [pc, #44]	@ (800915c <prvInitialiseTaskLists+0x78>)
 8009130:	4a05      	ldr	r2, [pc, #20]	@ (8009148 <prvInitialiseTaskLists+0x64>)
 8009132:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009134:	4b0a      	ldr	r3, [pc, #40]	@ (8009160 <prvInitialiseTaskLists+0x7c>)
 8009136:	4a05      	ldr	r2, [pc, #20]	@ (800914c <prvInitialiseTaskLists+0x68>)
 8009138:	601a      	str	r2, [r3, #0]
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20000a8c 	.word	0x20000a8c
 8009148:	20000eec 	.word	0x20000eec
 800914c:	20000f00 	.word	0x20000f00
 8009150:	20000f1c 	.word	0x20000f1c
 8009154:	20000f30 	.word	0x20000f30
 8009158:	20000f48 	.word	0x20000f48
 800915c:	20000f14 	.word	0x20000f14
 8009160:	20000f18 	.word	0x20000f18

08009164 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800916a:	e019      	b.n	80091a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800916c:	f000 fde4 	bl	8009d38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009170:	4b10      	ldr	r3, [pc, #64]	@ (80091b4 <prvCheckTasksWaitingTermination+0x50>)
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3304      	adds	r3, #4
 800917c:	4618      	mov	r0, r3
 800917e:	f7fe fcd5 	bl	8007b2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009182:	4b0d      	ldr	r3, [pc, #52]	@ (80091b8 <prvCheckTasksWaitingTermination+0x54>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3b01      	subs	r3, #1
 8009188:	4a0b      	ldr	r2, [pc, #44]	@ (80091b8 <prvCheckTasksWaitingTermination+0x54>)
 800918a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800918c:	4b0b      	ldr	r3, [pc, #44]	@ (80091bc <prvCheckTasksWaitingTermination+0x58>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3b01      	subs	r3, #1
 8009192:	4a0a      	ldr	r2, [pc, #40]	@ (80091bc <prvCheckTasksWaitingTermination+0x58>)
 8009194:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009196:	f000 fe01 	bl	8009d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f810 	bl	80091c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091a0:	4b06      	ldr	r3, [pc, #24]	@ (80091bc <prvCheckTasksWaitingTermination+0x58>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e1      	bne.n	800916c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091a8:	bf00      	nop
 80091aa:	bf00      	nop
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20000f30 	.word	0x20000f30
 80091b8:	20000f5c 	.word	0x20000f5c
 80091bc:	20000f44 	.word	0x20000f44

080091c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d108      	bne.n	80091e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 ff9e 	bl	800a118 <vPortFree>
				vPortFree( pxTCB );
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 ff9b 	bl	800a118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091e2:	e019      	b.n	8009218 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d103      	bne.n	80091f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 ff92 	bl	800a118 <vPortFree>
	}
 80091f4:	e010      	b.n	8009218 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d00b      	beq.n	8009218 <prvDeleteTCB+0x58>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	60fb      	str	r3, [r7, #12]
}
 8009212:	bf00      	nop
 8009214:	bf00      	nop
 8009216:	e7fd      	b.n	8009214 <prvDeleteTCB+0x54>
	}
 8009218:	bf00      	nop
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009226:	4b0c      	ldr	r3, [pc, #48]	@ (8009258 <prvResetNextTaskUnblockTime+0x38>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d104      	bne.n	800923a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009230:	4b0a      	ldr	r3, [pc, #40]	@ (800925c <prvResetNextTaskUnblockTime+0x3c>)
 8009232:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009236:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009238:	e008      	b.n	800924c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800923a:	4b07      	ldr	r3, [pc, #28]	@ (8009258 <prvResetNextTaskUnblockTime+0x38>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	4a04      	ldr	r2, [pc, #16]	@ (800925c <prvResetNextTaskUnblockTime+0x3c>)
 800924a:	6013      	str	r3, [r2, #0]
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	20000f14 	.word	0x20000f14
 800925c:	20000f7c 	.word	0x20000f7c

08009260 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009266:	4b0b      	ldr	r3, [pc, #44]	@ (8009294 <xTaskGetSchedulerState+0x34>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800926e:	2301      	movs	r3, #1
 8009270:	607b      	str	r3, [r7, #4]
 8009272:	e008      	b.n	8009286 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009274:	4b08      	ldr	r3, [pc, #32]	@ (8009298 <xTaskGetSchedulerState+0x38>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d102      	bne.n	8009282 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800927c:	2302      	movs	r3, #2
 800927e:	607b      	str	r3, [r7, #4]
 8009280:	e001      	b.n	8009286 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009282:	2300      	movs	r3, #0
 8009284:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009286:	687b      	ldr	r3, [r7, #4]
	}
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	20000f68 	.word	0x20000f68
 8009298:	20000f84 	.word	0x20000f84

0800929c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092a8:	2300      	movs	r3, #0
 80092aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d058      	beq.n	8009364 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80092b2:	4b2f      	ldr	r3, [pc, #188]	@ (8009370 <xTaskPriorityDisinherit+0xd4>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d00b      	beq.n	80092d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	60fb      	str	r3, [r7, #12]
}
 80092ce:	bf00      	nop
 80092d0:	bf00      	nop
 80092d2:	e7fd      	b.n	80092d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10b      	bne.n	80092f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80092dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	60bb      	str	r3, [r7, #8]
}
 80092ee:	bf00      	nop
 80092f0:	bf00      	nop
 80092f2:	e7fd      	b.n	80092f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092f8:	1e5a      	subs	r2, r3, #1
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009306:	429a      	cmp	r2, r3
 8009308:	d02c      	beq.n	8009364 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800930e:	2b00      	cmp	r3, #0
 8009310:	d128      	bne.n	8009364 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	3304      	adds	r3, #4
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe fc08 	bl	8007b2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009328:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009334:	4b0f      	ldr	r3, [pc, #60]	@ (8009374 <xTaskPriorityDisinherit+0xd8>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	429a      	cmp	r2, r3
 800933a:	d903      	bls.n	8009344 <xTaskPriorityDisinherit+0xa8>
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009340:	4a0c      	ldr	r2, [pc, #48]	@ (8009374 <xTaskPriorityDisinherit+0xd8>)
 8009342:	6013      	str	r3, [r2, #0]
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009348:	4613      	mov	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4413      	add	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4a09      	ldr	r2, [pc, #36]	@ (8009378 <xTaskPriorityDisinherit+0xdc>)
 8009352:	441a      	add	r2, r3
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	3304      	adds	r3, #4
 8009358:	4619      	mov	r1, r3
 800935a:	4610      	mov	r0, r2
 800935c:	f7fe fb89 	bl	8007a72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009360:	2301      	movs	r3, #1
 8009362:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009364:	697b      	ldr	r3, [r7, #20]
	}
 8009366:	4618      	mov	r0, r3
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20000a88 	.word	0x20000a88
 8009374:	20000f64 	.word	0x20000f64
 8009378:	20000a8c 	.word	0x20000a8c

0800937c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009386:	4b21      	ldr	r3, [pc, #132]	@ (800940c <prvAddCurrentTaskToDelayedList+0x90>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800938c:	4b20      	ldr	r3, [pc, #128]	@ (8009410 <prvAddCurrentTaskToDelayedList+0x94>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3304      	adds	r3, #4
 8009392:	4618      	mov	r0, r3
 8009394:	f7fe fbca 	bl	8007b2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800939e:	d10a      	bne.n	80093b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d007      	beq.n	80093b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009410 <prvAddCurrentTaskToDelayedList+0x94>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3304      	adds	r3, #4
 80093ac:	4619      	mov	r1, r3
 80093ae:	4819      	ldr	r0, [pc, #100]	@ (8009414 <prvAddCurrentTaskToDelayedList+0x98>)
 80093b0:	f7fe fb5f 	bl	8007a72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093b4:	e026      	b.n	8009404 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4413      	add	r3, r2
 80093bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093be:	4b14      	ldr	r3, [pc, #80]	@ (8009410 <prvAddCurrentTaskToDelayedList+0x94>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d209      	bcs.n	80093e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093ce:	4b12      	ldr	r3, [pc, #72]	@ (8009418 <prvAddCurrentTaskToDelayedList+0x9c>)
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009410 <prvAddCurrentTaskToDelayedList+0x94>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3304      	adds	r3, #4
 80093d8:	4619      	mov	r1, r3
 80093da:	4610      	mov	r0, r2
 80093dc:	f7fe fb6d 	bl	8007aba <vListInsert>
}
 80093e0:	e010      	b.n	8009404 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093e2:	4b0e      	ldr	r3, [pc, #56]	@ (800941c <prvAddCurrentTaskToDelayedList+0xa0>)
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009410 <prvAddCurrentTaskToDelayedList+0x94>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3304      	adds	r3, #4
 80093ec:	4619      	mov	r1, r3
 80093ee:	4610      	mov	r0, r2
 80093f0:	f7fe fb63 	bl	8007aba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009420 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d202      	bcs.n	8009404 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80093fe:	4a08      	ldr	r2, [pc, #32]	@ (8009420 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	6013      	str	r3, [r2, #0]
}
 8009404:	bf00      	nop
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	20000f60 	.word	0x20000f60
 8009410:	20000a88 	.word	0x20000a88
 8009414:	20000f48 	.word	0x20000f48
 8009418:	20000f18 	.word	0x20000f18
 800941c:	20000f14 	.word	0x20000f14
 8009420:	20000f7c 	.word	0x20000f7c

08009424 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b08a      	sub	sp, #40	@ 0x28
 8009428:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800942a:	2300      	movs	r3, #0
 800942c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800942e:	f000 fb13 	bl	8009a58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009432:	4b1d      	ldr	r3, [pc, #116]	@ (80094a8 <xTimerCreateTimerTask+0x84>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d021      	beq.n	800947e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800943a:	2300      	movs	r3, #0
 800943c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800943e:	2300      	movs	r3, #0
 8009440:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009442:	1d3a      	adds	r2, r7, #4
 8009444:	f107 0108 	add.w	r1, r7, #8
 8009448:	f107 030c 	add.w	r3, r7, #12
 800944c:	4618      	mov	r0, r3
 800944e:	f7fe fac9 	bl	80079e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	9202      	str	r2, [sp, #8]
 800945a:	9301      	str	r3, [sp, #4]
 800945c:	2302      	movs	r3, #2
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	2300      	movs	r3, #0
 8009462:	460a      	mov	r2, r1
 8009464:	4911      	ldr	r1, [pc, #68]	@ (80094ac <xTimerCreateTimerTask+0x88>)
 8009466:	4812      	ldr	r0, [pc, #72]	@ (80094b0 <xTimerCreateTimerTask+0x8c>)
 8009468:	f7ff f8a8 	bl	80085bc <xTaskCreateStatic>
 800946c:	4603      	mov	r3, r0
 800946e:	4a11      	ldr	r2, [pc, #68]	@ (80094b4 <xTimerCreateTimerTask+0x90>)
 8009470:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009472:	4b10      	ldr	r3, [pc, #64]	@ (80094b4 <xTimerCreateTimerTask+0x90>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800947a:	2301      	movs	r3, #1
 800947c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10b      	bne.n	800949c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	613b      	str	r3, [r7, #16]
}
 8009496:	bf00      	nop
 8009498:	bf00      	nop
 800949a:	e7fd      	b.n	8009498 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800949c:	697b      	ldr	r3, [r7, #20]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20000fb8 	.word	0x20000fb8
 80094ac:	08017cb4 	.word	0x08017cb4
 80094b0:	080095f1 	.word	0x080095f1
 80094b4:	20000fbc 	.word	0x20000fbc

080094b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08a      	sub	sp, #40	@ 0x28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10b      	bne.n	80094e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	623b      	str	r3, [r7, #32]
}
 80094e2:	bf00      	nop
 80094e4:	bf00      	nop
 80094e6:	e7fd      	b.n	80094e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80094e8:	4b19      	ldr	r3, [pc, #100]	@ (8009550 <xTimerGenericCommand+0x98>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d02a      	beq.n	8009546 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2b05      	cmp	r3, #5
 8009500:	dc18      	bgt.n	8009534 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009502:	f7ff fead 	bl	8009260 <xTaskGetSchedulerState>
 8009506:	4603      	mov	r3, r0
 8009508:	2b02      	cmp	r3, #2
 800950a:	d109      	bne.n	8009520 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800950c:	4b10      	ldr	r3, [pc, #64]	@ (8009550 <xTimerGenericCommand+0x98>)
 800950e:	6818      	ldr	r0, [r3, #0]
 8009510:	f107 0110 	add.w	r1, r7, #16
 8009514:	2300      	movs	r3, #0
 8009516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009518:	f7fe fc3c 	bl	8007d94 <xQueueGenericSend>
 800951c:	6278      	str	r0, [r7, #36]	@ 0x24
 800951e:	e012      	b.n	8009546 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009520:	4b0b      	ldr	r3, [pc, #44]	@ (8009550 <xTimerGenericCommand+0x98>)
 8009522:	6818      	ldr	r0, [r3, #0]
 8009524:	f107 0110 	add.w	r1, r7, #16
 8009528:	2300      	movs	r3, #0
 800952a:	2200      	movs	r2, #0
 800952c:	f7fe fc32 	bl	8007d94 <xQueueGenericSend>
 8009530:	6278      	str	r0, [r7, #36]	@ 0x24
 8009532:	e008      	b.n	8009546 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009534:	4b06      	ldr	r3, [pc, #24]	@ (8009550 <xTimerGenericCommand+0x98>)
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	f107 0110 	add.w	r1, r7, #16
 800953c:	2300      	movs	r3, #0
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	f7fe fd2a 	bl	8007f98 <xQueueGenericSendFromISR>
 8009544:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009548:	4618      	mov	r0, r3
 800954a:	3728      	adds	r7, #40	@ 0x28
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	20000fb8 	.word	0x20000fb8

08009554 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af02      	add	r7, sp, #8
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800955e:	4b23      	ldr	r3, [pc, #140]	@ (80095ec <prvProcessExpiredTimer+0x98>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	3304      	adds	r3, #4
 800956c:	4618      	mov	r0, r3
 800956e:	f7fe fadd 	bl	8007b2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009578:	f003 0304 	and.w	r3, r3, #4
 800957c:	2b00      	cmp	r3, #0
 800957e:	d023      	beq.n	80095c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	699a      	ldr	r2, [r3, #24]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	18d1      	adds	r1, r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	6978      	ldr	r0, [r7, #20]
 800958e:	f000 f8d5 	bl	800973c <prvInsertTimerInActiveList>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d020      	beq.n	80095da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009598:	2300      	movs	r3, #0
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	2300      	movs	r3, #0
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	2100      	movs	r1, #0
 80095a2:	6978      	ldr	r0, [r7, #20]
 80095a4:	f7ff ff88 	bl	80094b8 <xTimerGenericCommand>
 80095a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d114      	bne.n	80095da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	60fb      	str	r3, [r7, #12]
}
 80095c2:	bf00      	nop
 80095c4:	bf00      	nop
 80095c6:	e7fd      	b.n	80095c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	6978      	ldr	r0, [r7, #20]
 80095e0:	4798      	blx	r3
}
 80095e2:	bf00      	nop
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20000fb0 	.word	0x20000fb0

080095f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095f8:	f107 0308 	add.w	r3, r7, #8
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f859 	bl	80096b4 <prvGetNextExpireTime>
 8009602:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	4619      	mov	r1, r3
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f000 f805 	bl	8009618 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800960e:	f000 f8d7 	bl	80097c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009612:	bf00      	nop
 8009614:	e7f0      	b.n	80095f8 <prvTimerTask+0x8>
	...

08009618 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009622:	f7ff fa0f 	bl	8008a44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009626:	f107 0308 	add.w	r3, r7, #8
 800962a:	4618      	mov	r0, r3
 800962c:	f000 f866 	bl	80096fc <prvSampleTimeNow>
 8009630:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d130      	bne.n	800969a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <prvProcessTimerOrBlockTask+0x3c>
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	429a      	cmp	r2, r3
 8009644:	d806      	bhi.n	8009654 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009646:	f7ff fa0b 	bl	8008a60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800964a:	68f9      	ldr	r1, [r7, #12]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff ff81 	bl	8009554 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009652:	e024      	b.n	800969e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d008      	beq.n	800966c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800965a:	4b13      	ldr	r3, [pc, #76]	@ (80096a8 <prvProcessTimerOrBlockTask+0x90>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <prvProcessTimerOrBlockTask+0x50>
 8009664:	2301      	movs	r3, #1
 8009666:	e000      	b.n	800966a <prvProcessTimerOrBlockTask+0x52>
 8009668:	2300      	movs	r3, #0
 800966a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800966c:	4b0f      	ldr	r3, [pc, #60]	@ (80096ac <prvProcessTimerOrBlockTask+0x94>)
 800966e:	6818      	ldr	r0, [r3, #0]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	4619      	mov	r1, r3
 800967a:	f7fe ff6b 	bl	8008554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800967e:	f7ff f9ef 	bl	8008a60 <xTaskResumeAll>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009688:	4b09      	ldr	r3, [pc, #36]	@ (80096b0 <prvProcessTimerOrBlockTask+0x98>)
 800968a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	f3bf 8f6f 	isb	sy
}
 8009698:	e001      	b.n	800969e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800969a:	f7ff f9e1 	bl	8008a60 <xTaskResumeAll>
}
 800969e:	bf00      	nop
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20000fb4 	.word	0x20000fb4
 80096ac:	20000fb8 	.word	0x20000fb8
 80096b0:	e000ed04 	.word	0xe000ed04

080096b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096bc:	4b0e      	ldr	r3, [pc, #56]	@ (80096f8 <prvGetNextExpireTime+0x44>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <prvGetNextExpireTime+0x16>
 80096c6:	2201      	movs	r2, #1
 80096c8:	e000      	b.n	80096cc <prvGetNextExpireTime+0x18>
 80096ca:	2200      	movs	r2, #0
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d105      	bne.n	80096e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096d8:	4b07      	ldr	r3, [pc, #28]	@ (80096f8 <prvGetNextExpireTime+0x44>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	e001      	b.n	80096e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80096e4:	2300      	movs	r3, #0
 80096e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80096e8:	68fb      	ldr	r3, [r7, #12]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	20000fb0 	.word	0x20000fb0

080096fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009704:	f7ff fa4a 	bl	8008b9c <xTaskGetTickCount>
 8009708:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800970a:	4b0b      	ldr	r3, [pc, #44]	@ (8009738 <prvSampleTimeNow+0x3c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	429a      	cmp	r2, r3
 8009712:	d205      	bcs.n	8009720 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009714:	f000 f93a 	bl	800998c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	e002      	b.n	8009726 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009726:	4a04      	ldr	r2, [pc, #16]	@ (8009738 <prvSampleTimeNow+0x3c>)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800972c:	68fb      	ldr	r3, [r7, #12]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	20000fc0 	.word	0x20000fc0

0800973c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800974a:	2300      	movs	r3, #0
 800974c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	429a      	cmp	r2, r3
 8009760:	d812      	bhi.n	8009788 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	1ad2      	subs	r2, r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	429a      	cmp	r2, r3
 800976e:	d302      	bcc.n	8009776 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009770:	2301      	movs	r3, #1
 8009772:	617b      	str	r3, [r7, #20]
 8009774:	e01b      	b.n	80097ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009776:	4b10      	ldr	r3, [pc, #64]	@ (80097b8 <prvInsertTimerInActiveList+0x7c>)
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	3304      	adds	r3, #4
 800977e:	4619      	mov	r1, r3
 8009780:	4610      	mov	r0, r2
 8009782:	f7fe f99a 	bl	8007aba <vListInsert>
 8009786:	e012      	b.n	80097ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	429a      	cmp	r2, r3
 800978e:	d206      	bcs.n	800979e <prvInsertTimerInActiveList+0x62>
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	429a      	cmp	r2, r3
 8009796:	d302      	bcc.n	800979e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009798:	2301      	movs	r3, #1
 800979a:	617b      	str	r3, [r7, #20]
 800979c:	e007      	b.n	80097ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800979e:	4b07      	ldr	r3, [pc, #28]	@ (80097bc <prvInsertTimerInActiveList+0x80>)
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	3304      	adds	r3, #4
 80097a6:	4619      	mov	r1, r3
 80097a8:	4610      	mov	r0, r2
 80097aa:	f7fe f986 	bl	8007aba <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097ae:	697b      	ldr	r3, [r7, #20]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	20000fb4 	.word	0x20000fb4
 80097bc:	20000fb0 	.word	0x20000fb0

080097c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08e      	sub	sp, #56	@ 0x38
 80097c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097c6:	e0ce      	b.n	8009966 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	da19      	bge.n	8009802 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80097ce:	1d3b      	adds	r3, r7, #4
 80097d0:	3304      	adds	r3, #4
 80097d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80097d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10b      	bne.n	80097f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80097da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	61fb      	str	r3, [r7, #28]
}
 80097ec:	bf00      	nop
 80097ee:	bf00      	nop
 80097f0:	e7fd      	b.n	80097ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80097f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097f8:	6850      	ldr	r0, [r2, #4]
 80097fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097fc:	6892      	ldr	r2, [r2, #8]
 80097fe:	4611      	mov	r1, r2
 8009800:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	f2c0 80ae 	blt.w	8009966 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800980e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d004      	beq.n	8009820 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009818:	3304      	adds	r3, #4
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe f986 	bl	8007b2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009820:	463b      	mov	r3, r7
 8009822:	4618      	mov	r0, r3
 8009824:	f7ff ff6a 	bl	80096fc <prvSampleTimeNow>
 8009828:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b09      	cmp	r3, #9
 800982e:	f200 8097 	bhi.w	8009960 <prvProcessReceivedCommands+0x1a0>
 8009832:	a201      	add	r2, pc, #4	@ (adr r2, 8009838 <prvProcessReceivedCommands+0x78>)
 8009834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009838:	08009861 	.word	0x08009861
 800983c:	08009861 	.word	0x08009861
 8009840:	08009861 	.word	0x08009861
 8009844:	080098d7 	.word	0x080098d7
 8009848:	080098eb 	.word	0x080098eb
 800984c:	08009937 	.word	0x08009937
 8009850:	08009861 	.word	0x08009861
 8009854:	08009861 	.word	0x08009861
 8009858:	080098d7 	.word	0x080098d7
 800985c:	080098eb 	.word	0x080098eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009862:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009866:	f043 0301 	orr.w	r3, r3, #1
 800986a:	b2da      	uxtb	r2, r3
 800986c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	18d1      	adds	r1, r2, r3
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800987e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009880:	f7ff ff5c 	bl	800973c <prvInsertTimerInActiveList>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d06c      	beq.n	8009964 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009890:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009894:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	2b00      	cmp	r3, #0
 800989e:	d061      	beq.n	8009964 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	441a      	add	r2, r3
 80098a8:	2300      	movs	r3, #0
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	2300      	movs	r3, #0
 80098ae:	2100      	movs	r1, #0
 80098b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098b2:	f7ff fe01 	bl	80094b8 <xTimerGenericCommand>
 80098b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d152      	bne.n	8009964 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	61bb      	str	r3, [r7, #24]
}
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	e7fd      	b.n	80098d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098dc:	f023 0301 	bic.w	r3, r3, #1
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80098e8:	e03d      	b.n	8009966 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098f0:	f043 0301 	orr.w	r3, r3, #1
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009900:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10b      	bne.n	8009922 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	617b      	str	r3, [r7, #20]
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	e7fd      	b.n	800991e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009924:	699a      	ldr	r2, [r3, #24]
 8009926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009928:	18d1      	adds	r1, r2, r3
 800992a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800992e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009930:	f7ff ff04 	bl	800973c <prvInsertTimerInActiveList>
					break;
 8009934:	e017      	b.n	8009966 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800993c:	f003 0302 	and.w	r3, r3, #2
 8009940:	2b00      	cmp	r3, #0
 8009942:	d103      	bne.n	800994c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009946:	f000 fbe7 	bl	800a118 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800994a:	e00c      	b.n	8009966 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800994c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009952:	f023 0301 	bic.w	r3, r3, #1
 8009956:	b2da      	uxtb	r2, r3
 8009958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800995e:	e002      	b.n	8009966 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009960:	bf00      	nop
 8009962:	e000      	b.n	8009966 <prvProcessReceivedCommands+0x1a6>
					break;
 8009964:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009966:	4b08      	ldr	r3, [pc, #32]	@ (8009988 <prvProcessReceivedCommands+0x1c8>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	1d39      	adds	r1, r7, #4
 800996c:	2200      	movs	r2, #0
 800996e:	4618      	mov	r0, r3
 8009970:	f7fe fbb0 	bl	80080d4 <xQueueReceive>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	f47f af26 	bne.w	80097c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800997c:	bf00      	nop
 800997e:	bf00      	nop
 8009980:	3730      	adds	r7, #48	@ 0x30
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	20000fb8 	.word	0x20000fb8

0800998c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b088      	sub	sp, #32
 8009990:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009992:	e049      	b.n	8009a28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009994:	4b2e      	ldr	r3, [pc, #184]	@ (8009a50 <prvSwitchTimerLists+0xc4>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800999e:	4b2c      	ldr	r3, [pc, #176]	@ (8009a50 <prvSwitchTimerLists+0xc4>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fe f8bd 	bl	8007b2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d02f      	beq.n	8009a28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	4413      	add	r3, r2
 80099d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d90e      	bls.n	80099f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009a50 <prvSwitchTimerLists+0xc4>)
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3304      	adds	r3, #4
 80099ee:	4619      	mov	r1, r3
 80099f0:	4610      	mov	r0, r2
 80099f2:	f7fe f862 	bl	8007aba <vListInsert>
 80099f6:	e017      	b.n	8009a28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099f8:	2300      	movs	r3, #0
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	2300      	movs	r3, #0
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	2100      	movs	r1, #0
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f7ff fd58 	bl	80094b8 <xTimerGenericCommand>
 8009a08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10b      	bne.n	8009a28 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	603b      	str	r3, [r7, #0]
}
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
 8009a26:	e7fd      	b.n	8009a24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a28:	4b09      	ldr	r3, [pc, #36]	@ (8009a50 <prvSwitchTimerLists+0xc4>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1b0      	bne.n	8009994 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a32:	4b07      	ldr	r3, [pc, #28]	@ (8009a50 <prvSwitchTimerLists+0xc4>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a38:	4b06      	ldr	r3, [pc, #24]	@ (8009a54 <prvSwitchTimerLists+0xc8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a04      	ldr	r2, [pc, #16]	@ (8009a50 <prvSwitchTimerLists+0xc4>)
 8009a3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a40:	4a04      	ldr	r2, [pc, #16]	@ (8009a54 <prvSwitchTimerLists+0xc8>)
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	6013      	str	r3, [r2, #0]
}
 8009a46:	bf00      	nop
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20000fb0 	.word	0x20000fb0
 8009a54:	20000fb4 	.word	0x20000fb4

08009a58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a5e:	f000 f96b 	bl	8009d38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a62:	4b15      	ldr	r3, [pc, #84]	@ (8009ab8 <prvCheckForValidListAndQueue+0x60>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d120      	bne.n	8009aac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a6a:	4814      	ldr	r0, [pc, #80]	@ (8009abc <prvCheckForValidListAndQueue+0x64>)
 8009a6c:	f7fd ffd4 	bl	8007a18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a70:	4813      	ldr	r0, [pc, #76]	@ (8009ac0 <prvCheckForValidListAndQueue+0x68>)
 8009a72:	f7fd ffd1 	bl	8007a18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a76:	4b13      	ldr	r3, [pc, #76]	@ (8009ac4 <prvCheckForValidListAndQueue+0x6c>)
 8009a78:	4a10      	ldr	r2, [pc, #64]	@ (8009abc <prvCheckForValidListAndQueue+0x64>)
 8009a7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a7c:	4b12      	ldr	r3, [pc, #72]	@ (8009ac8 <prvCheckForValidListAndQueue+0x70>)
 8009a7e:	4a10      	ldr	r2, [pc, #64]	@ (8009ac0 <prvCheckForValidListAndQueue+0x68>)
 8009a80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a82:	2300      	movs	r3, #0
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	4b11      	ldr	r3, [pc, #68]	@ (8009acc <prvCheckForValidListAndQueue+0x74>)
 8009a88:	4a11      	ldr	r2, [pc, #68]	@ (8009ad0 <prvCheckForValidListAndQueue+0x78>)
 8009a8a:	2110      	movs	r1, #16
 8009a8c:	200a      	movs	r0, #10
 8009a8e:	f7fe f8e1 	bl	8007c54 <xQueueGenericCreateStatic>
 8009a92:	4603      	mov	r3, r0
 8009a94:	4a08      	ldr	r2, [pc, #32]	@ (8009ab8 <prvCheckForValidListAndQueue+0x60>)
 8009a96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a98:	4b07      	ldr	r3, [pc, #28]	@ (8009ab8 <prvCheckForValidListAndQueue+0x60>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d005      	beq.n	8009aac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009aa0:	4b05      	ldr	r3, [pc, #20]	@ (8009ab8 <prvCheckForValidListAndQueue+0x60>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	490b      	ldr	r1, [pc, #44]	@ (8009ad4 <prvCheckForValidListAndQueue+0x7c>)
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe fd2a 	bl	8008500 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009aac:	f000 f976 	bl	8009d9c <vPortExitCritical>
}
 8009ab0:	bf00      	nop
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20000fb8 	.word	0x20000fb8
 8009abc:	20000f88 	.word	0x20000f88
 8009ac0:	20000f9c 	.word	0x20000f9c
 8009ac4:	20000fb0 	.word	0x20000fb0
 8009ac8:	20000fb4 	.word	0x20000fb4
 8009acc:	20001064 	.word	0x20001064
 8009ad0:	20000fc4 	.word	0x20000fc4
 8009ad4:	08017cbc 	.word	0x08017cbc

08009ad8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3b04      	subs	r3, #4
 8009ae8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3b04      	subs	r3, #4
 8009af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	f023 0201 	bic.w	r2, r3, #1
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3b04      	subs	r3, #4
 8009b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b08:	4a0c      	ldr	r2, [pc, #48]	@ (8009b3c <pxPortInitialiseStack+0x64>)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3b14      	subs	r3, #20
 8009b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3b04      	subs	r3, #4
 8009b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f06f 0202 	mvn.w	r2, #2
 8009b26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	3b20      	subs	r3, #32
 8009b2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3714      	adds	r7, #20
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	08009b41 	.word	0x08009b41

08009b40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b4a:	4b13      	ldr	r3, [pc, #76]	@ (8009b98 <prvTaskExitError+0x58>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b52:	d00b      	beq.n	8009b6c <prvTaskExitError+0x2c>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	60fb      	str	r3, [r7, #12]
}
 8009b66:	bf00      	nop
 8009b68:	bf00      	nop
 8009b6a:	e7fd      	b.n	8009b68 <prvTaskExitError+0x28>
	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	60bb      	str	r3, [r7, #8]
}
 8009b7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b80:	bf00      	nop
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0fc      	beq.n	8009b82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b88:	bf00      	nop
 8009b8a:	bf00      	nop
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	20000010 	.word	0x20000010
 8009b9c:	00000000 	.word	0x00000000

08009ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ba0:	4b07      	ldr	r3, [pc, #28]	@ (8009bc0 <pxCurrentTCBConst2>)
 8009ba2:	6819      	ldr	r1, [r3, #0]
 8009ba4:	6808      	ldr	r0, [r1, #0]
 8009ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009baa:	f380 8809 	msr	PSP, r0
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f04f 0000 	mov.w	r0, #0
 8009bb6:	f380 8811 	msr	BASEPRI, r0
 8009bba:	4770      	bx	lr
 8009bbc:	f3af 8000 	nop.w

08009bc0 <pxCurrentTCBConst2>:
 8009bc0:	20000a88 	.word	0x20000a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop

08009bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009bc8:	4808      	ldr	r0, [pc, #32]	@ (8009bec <prvPortStartFirstTask+0x24>)
 8009bca:	6800      	ldr	r0, [r0, #0]
 8009bcc:	6800      	ldr	r0, [r0, #0]
 8009bce:	f380 8808 	msr	MSP, r0
 8009bd2:	f04f 0000 	mov.w	r0, #0
 8009bd6:	f380 8814 	msr	CONTROL, r0
 8009bda:	b662      	cpsie	i
 8009bdc:	b661      	cpsie	f
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	df00      	svc	0
 8009be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009bea:	bf00      	nop
 8009bec:	e000ed08 	.word	0xe000ed08

08009bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009bf6:	4b47      	ldr	r3, [pc, #284]	@ (8009d14 <xPortStartScheduler+0x124>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a47      	ldr	r2, [pc, #284]	@ (8009d18 <xPortStartScheduler+0x128>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d10b      	bne.n	8009c18 <xPortStartScheduler+0x28>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	613b      	str	r3, [r7, #16]
}
 8009c12:	bf00      	nop
 8009c14:	bf00      	nop
 8009c16:	e7fd      	b.n	8009c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c18:	4b3e      	ldr	r3, [pc, #248]	@ (8009d14 <xPortStartScheduler+0x124>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8009d1c <xPortStartScheduler+0x12c>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d10b      	bne.n	8009c3a <xPortStartScheduler+0x4a>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	60fb      	str	r3, [r7, #12]
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop
 8009c38:	e7fd      	b.n	8009c36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c3a:	4b39      	ldr	r3, [pc, #228]	@ (8009d20 <xPortStartScheduler+0x130>)
 8009c3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	22ff      	movs	r2, #255	@ 0xff
 8009c4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	4b31      	ldr	r3, [pc, #196]	@ (8009d24 <xPortStartScheduler+0x134>)
 8009c60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c62:	4b31      	ldr	r3, [pc, #196]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009c64:	2207      	movs	r2, #7
 8009c66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c68:	e009      	b.n	8009c7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	4a2d      	ldr	r2, [pc, #180]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009c72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c86:	2b80      	cmp	r3, #128	@ 0x80
 8009c88:	d0ef      	beq.n	8009c6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c8a:	4b27      	ldr	r3, [pc, #156]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f1c3 0307 	rsb	r3, r3, #7
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	d00b      	beq.n	8009cae <xPortStartScheduler+0xbe>
	__asm volatile
 8009c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	60bb      	str	r3, [r7, #8]
}
 8009ca8:	bf00      	nop
 8009caa:	bf00      	nop
 8009cac:	e7fd      	b.n	8009caa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009cae:	4b1e      	ldr	r3, [pc, #120]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	021b      	lsls	r3, r3, #8
 8009cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009cc0:	4a19      	ldr	r2, [pc, #100]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ccc:	4b17      	ldr	r3, [pc, #92]	@ (8009d2c <xPortStartScheduler+0x13c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a16      	ldr	r2, [pc, #88]	@ (8009d2c <xPortStartScheduler+0x13c>)
 8009cd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009cd8:	4b14      	ldr	r3, [pc, #80]	@ (8009d2c <xPortStartScheduler+0x13c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a13      	ldr	r2, [pc, #76]	@ (8009d2c <xPortStartScheduler+0x13c>)
 8009cde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ce4:	f000 f8da 	bl	8009e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ce8:	4b11      	ldr	r3, [pc, #68]	@ (8009d30 <xPortStartScheduler+0x140>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009cee:	f000 f8f9 	bl	8009ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009cf2:	4b10      	ldr	r3, [pc, #64]	@ (8009d34 <xPortStartScheduler+0x144>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8009d34 <xPortStartScheduler+0x144>)
 8009cf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009cfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009cfe:	f7ff ff63 	bl	8009bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d02:	f7ff f815 	bl	8008d30 <vTaskSwitchContext>
	prvTaskExitError();
 8009d06:	f7ff ff1b 	bl	8009b40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3718      	adds	r7, #24
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	e000ed00 	.word	0xe000ed00
 8009d18:	410fc271 	.word	0x410fc271
 8009d1c:	410fc270 	.word	0x410fc270
 8009d20:	e000e400 	.word	0xe000e400
 8009d24:	200010b4 	.word	0x200010b4
 8009d28:	200010b8 	.word	0x200010b8
 8009d2c:	e000ed20 	.word	0xe000ed20
 8009d30:	20000010 	.word	0x20000010
 8009d34:	e000ef34 	.word	0xe000ef34

08009d38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	607b      	str	r3, [r7, #4]
}
 8009d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d52:	4b10      	ldr	r3, [pc, #64]	@ (8009d94 <vPortEnterCritical+0x5c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	3301      	adds	r3, #1
 8009d58:	4a0e      	ldr	r2, [pc, #56]	@ (8009d94 <vPortEnterCritical+0x5c>)
 8009d5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d94 <vPortEnterCritical+0x5c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d110      	bne.n	8009d86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d64:	4b0c      	ldr	r3, [pc, #48]	@ (8009d98 <vPortEnterCritical+0x60>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00b      	beq.n	8009d86 <vPortEnterCritical+0x4e>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	603b      	str	r3, [r7, #0]
}
 8009d80:	bf00      	nop
 8009d82:	bf00      	nop
 8009d84:	e7fd      	b.n	8009d82 <vPortEnterCritical+0x4a>
	}
}
 8009d86:	bf00      	nop
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	20000010 	.word	0x20000010
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009da2:	4b12      	ldr	r3, [pc, #72]	@ (8009dec <vPortExitCritical+0x50>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10b      	bne.n	8009dc2 <vPortExitCritical+0x26>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	607b      	str	r3, [r7, #4]
}
 8009dbc:	bf00      	nop
 8009dbe:	bf00      	nop
 8009dc0:	e7fd      	b.n	8009dbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8009dec <vPortExitCritical+0x50>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	4a08      	ldr	r2, [pc, #32]	@ (8009dec <vPortExitCritical+0x50>)
 8009dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009dcc:	4b07      	ldr	r3, [pc, #28]	@ (8009dec <vPortExitCritical+0x50>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d105      	bne.n	8009de0 <vPortExitCritical+0x44>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	f383 8811 	msr	BASEPRI, r3
}
 8009dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	20000010 	.word	0x20000010

08009df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009df0:	f3ef 8009 	mrs	r0, PSP
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	4b15      	ldr	r3, [pc, #84]	@ (8009e50 <pxCurrentTCBConst>)
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	f01e 0f10 	tst.w	lr, #16
 8009e00:	bf08      	it	eq
 8009e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0a:	6010      	str	r0, [r2, #0]
 8009e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009e14:	f380 8811 	msr	BASEPRI, r0
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f7fe ff86 	bl	8008d30 <vTaskSwitchContext>
 8009e24:	f04f 0000 	mov.w	r0, #0
 8009e28:	f380 8811 	msr	BASEPRI, r0
 8009e2c:	bc09      	pop	{r0, r3}
 8009e2e:	6819      	ldr	r1, [r3, #0]
 8009e30:	6808      	ldr	r0, [r1, #0]
 8009e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e36:	f01e 0f10 	tst.w	lr, #16
 8009e3a:	bf08      	it	eq
 8009e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e40:	f380 8809 	msr	PSP, r0
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	f3af 8000 	nop.w

08009e50 <pxCurrentTCBConst>:
 8009e50:	20000a88 	.word	0x20000a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop

08009e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	607b      	str	r3, [r7, #4]
}
 8009e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e72:	f7fe fea3 	bl	8008bbc <xTaskIncrementTick>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d003      	beq.n	8009e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e7c:	4b06      	ldr	r3, [pc, #24]	@ (8009e98 <xPortSysTickHandler+0x40>)
 8009e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	2300      	movs	r3, #0
 8009e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	f383 8811 	msr	BASEPRI, r3
}
 8009e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e90:	bf00      	nop
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	e000ed04 	.word	0xe000ed04

08009e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ed0 <vPortSetupTimerInterrupt+0x34>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ed4 <vPortSetupTimerInterrupt+0x38>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009eac:	4b0a      	ldr	r3, [pc, #40]	@ (8009ed8 <vPortSetupTimerInterrupt+0x3c>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8009edc <vPortSetupTimerInterrupt+0x40>)
 8009eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb6:	099b      	lsrs	r3, r3, #6
 8009eb8:	4a09      	ldr	r2, [pc, #36]	@ (8009ee0 <vPortSetupTimerInterrupt+0x44>)
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ebe:	4b04      	ldr	r3, [pc, #16]	@ (8009ed0 <vPortSetupTimerInterrupt+0x34>)
 8009ec0:	2207      	movs	r2, #7
 8009ec2:	601a      	str	r2, [r3, #0]
}
 8009ec4:	bf00      	nop
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	e000e010 	.word	0xe000e010
 8009ed4:	e000e018 	.word	0xe000e018
 8009ed8:	20000004 	.word	0x20000004
 8009edc:	10624dd3 	.word	0x10624dd3
 8009ee0:	e000e014 	.word	0xe000e014

08009ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009ef4 <vPortEnableVFP+0x10>
 8009ee8:	6801      	ldr	r1, [r0, #0]
 8009eea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009eee:	6001      	str	r1, [r0, #0]
 8009ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ef2:	bf00      	nop
 8009ef4:	e000ed88 	.word	0xe000ed88

08009ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009efe:	f3ef 8305 	mrs	r3, IPSR
 8009f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2b0f      	cmp	r3, #15
 8009f08:	d915      	bls.n	8009f36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f0a:	4a18      	ldr	r2, [pc, #96]	@ (8009f6c <vPortValidateInterruptPriority+0x74>)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4413      	add	r3, r2
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f14:	4b16      	ldr	r3, [pc, #88]	@ (8009f70 <vPortValidateInterruptPriority+0x78>)
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	7afa      	ldrb	r2, [r7, #11]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d20b      	bcs.n	8009f36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	607b      	str	r3, [r7, #4]
}
 8009f30:	bf00      	nop
 8009f32:	bf00      	nop
 8009f34:	e7fd      	b.n	8009f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f36:	4b0f      	ldr	r3, [pc, #60]	@ (8009f74 <vPortValidateInterruptPriority+0x7c>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8009f78 <vPortValidateInterruptPriority+0x80>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d90b      	bls.n	8009f5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	603b      	str	r3, [r7, #0]
}
 8009f58:	bf00      	nop
 8009f5a:	bf00      	nop
 8009f5c:	e7fd      	b.n	8009f5a <vPortValidateInterruptPriority+0x62>
	}
 8009f5e:	bf00      	nop
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	e000e3f0 	.word	0xe000e3f0
 8009f70:	200010b4 	.word	0x200010b4
 8009f74:	e000ed0c 	.word	0xe000ed0c
 8009f78:	200010b8 	.word	0x200010b8

08009f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08a      	sub	sp, #40	@ 0x28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f84:	2300      	movs	r3, #0
 8009f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f88:	f7fe fd5c 	bl	8008a44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f8c:	4b5c      	ldr	r3, [pc, #368]	@ (800a100 <pvPortMalloc+0x184>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f94:	f000 f924 	bl	800a1e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f98:	4b5a      	ldr	r3, [pc, #360]	@ (800a104 <pvPortMalloc+0x188>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f040 8095 	bne.w	800a0d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d01e      	beq.n	8009fea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009fac:	2208      	movs	r2, #8
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f003 0307 	and.w	r3, r3, #7
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d015      	beq.n	8009fea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f023 0307 	bic.w	r3, r3, #7
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f003 0307 	and.w	r3, r3, #7
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00b      	beq.n	8009fea <pvPortMalloc+0x6e>
	__asm volatile
 8009fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	617b      	str	r3, [r7, #20]
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop
 8009fe8:	e7fd      	b.n	8009fe6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d06f      	beq.n	800a0d0 <pvPortMalloc+0x154>
 8009ff0:	4b45      	ldr	r3, [pc, #276]	@ (800a108 <pvPortMalloc+0x18c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d86a      	bhi.n	800a0d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ffa:	4b44      	ldr	r3, [pc, #272]	@ (800a10c <pvPortMalloc+0x190>)
 8009ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ffe:	4b43      	ldr	r3, [pc, #268]	@ (800a10c <pvPortMalloc+0x190>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a004:	e004      	b.n	800a010 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	429a      	cmp	r2, r3
 800a018:	d903      	bls.n	800a022 <pvPortMalloc+0xa6>
 800a01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1f1      	bne.n	800a006 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a022:	4b37      	ldr	r3, [pc, #220]	@ (800a100 <pvPortMalloc+0x184>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a028:	429a      	cmp	r2, r3
 800a02a:	d051      	beq.n	800a0d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2208      	movs	r2, #8
 800a032:	4413      	add	r3, r2
 800a034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	1ad2      	subs	r2, r2, r3
 800a046:	2308      	movs	r3, #8
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d920      	bls.n	800a090 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a04e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4413      	add	r3, r2
 800a054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	f003 0307 	and.w	r3, r3, #7
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00b      	beq.n	800a078 <pvPortMalloc+0xfc>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	613b      	str	r3, [r7, #16]
}
 800a072:	bf00      	nop
 800a074:	bf00      	nop
 800a076:	e7fd      	b.n	800a074 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	1ad2      	subs	r2, r2, r3
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a08a:	69b8      	ldr	r0, [r7, #24]
 800a08c:	f000 f90a 	bl	800a2a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a090:	4b1d      	ldr	r3, [pc, #116]	@ (800a108 <pvPortMalloc+0x18c>)
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	4a1b      	ldr	r2, [pc, #108]	@ (800a108 <pvPortMalloc+0x18c>)
 800a09c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a09e:	4b1a      	ldr	r3, [pc, #104]	@ (800a108 <pvPortMalloc+0x18c>)
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a110 <pvPortMalloc+0x194>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d203      	bcs.n	800a0b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0aa:	4b17      	ldr	r3, [pc, #92]	@ (800a108 <pvPortMalloc+0x18c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a18      	ldr	r2, [pc, #96]	@ (800a110 <pvPortMalloc+0x194>)
 800a0b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	4b13      	ldr	r3, [pc, #76]	@ (800a104 <pvPortMalloc+0x188>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a0c6:	4b13      	ldr	r3, [pc, #76]	@ (800a114 <pvPortMalloc+0x198>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	4a11      	ldr	r2, [pc, #68]	@ (800a114 <pvPortMalloc+0x198>)
 800a0ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a0d0:	f7fe fcc6 	bl	8008a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	f003 0307 	and.w	r3, r3, #7
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00b      	beq.n	800a0f6 <pvPortMalloc+0x17a>
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	60fb      	str	r3, [r7, #12]
}
 800a0f0:	bf00      	nop
 800a0f2:	bf00      	nop
 800a0f4:	e7fd      	b.n	800a0f2 <pvPortMalloc+0x176>
	return pvReturn;
 800a0f6:	69fb      	ldr	r3, [r7, #28]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3728      	adds	r7, #40	@ 0x28
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	200110c4 	.word	0x200110c4
 800a104:	200110d8 	.word	0x200110d8
 800a108:	200110c8 	.word	0x200110c8
 800a10c:	200110bc 	.word	0x200110bc
 800a110:	200110cc 	.word	0x200110cc
 800a114:	200110d0 	.word	0x200110d0

0800a118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d04f      	beq.n	800a1ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a12a:	2308      	movs	r3, #8
 800a12c:	425b      	negs	r3, r3
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	4413      	add	r3, r2
 800a132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	4b25      	ldr	r3, [pc, #148]	@ (800a1d4 <vPortFree+0xbc>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4013      	ands	r3, r2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10b      	bne.n	800a15e <vPortFree+0x46>
	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	60fb      	str	r3, [r7, #12]
}
 800a158:	bf00      	nop
 800a15a:	bf00      	nop
 800a15c:	e7fd      	b.n	800a15a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00b      	beq.n	800a17e <vPortFree+0x66>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60bb      	str	r3, [r7, #8]
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	e7fd      	b.n	800a17a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	4b14      	ldr	r3, [pc, #80]	@ (800a1d4 <vPortFree+0xbc>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4013      	ands	r3, r2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d01e      	beq.n	800a1ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d11a      	bne.n	800a1ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d4 <vPortFree+0xbc>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	43db      	mvns	r3, r3
 800a19e:	401a      	ands	r2, r3
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1a4:	f7fe fc4e 	bl	8008a44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a1d8 <vPortFree+0xc0>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	4a09      	ldr	r2, [pc, #36]	@ (800a1d8 <vPortFree+0xc0>)
 800a1b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1b6:	6938      	ldr	r0, [r7, #16]
 800a1b8:	f000 f874 	bl	800a2a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a1bc:	4b07      	ldr	r3, [pc, #28]	@ (800a1dc <vPortFree+0xc4>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	4a06      	ldr	r2, [pc, #24]	@ (800a1dc <vPortFree+0xc4>)
 800a1c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a1c6:	f7fe fc4b 	bl	8008a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1ca:	bf00      	nop
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	200110d8 	.word	0x200110d8
 800a1d8:	200110c8 	.word	0x200110c8
 800a1dc:	200110d4 	.word	0x200110d4

0800a1e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a1e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a1ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a1ec:	4b27      	ldr	r3, [pc, #156]	@ (800a28c <prvHeapInit+0xac>)
 800a1ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00c      	beq.n	800a214 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3307      	adds	r3, #7
 800a1fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f023 0307 	bic.w	r3, r3, #7
 800a206:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	4a1f      	ldr	r2, [pc, #124]	@ (800a28c <prvHeapInit+0xac>)
 800a210:	4413      	add	r3, r2
 800a212:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a218:	4a1d      	ldr	r2, [pc, #116]	@ (800a290 <prvHeapInit+0xb0>)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a21e:	4b1c      	ldr	r3, [pc, #112]	@ (800a290 <prvHeapInit+0xb0>)
 800a220:	2200      	movs	r2, #0
 800a222:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	4413      	add	r3, r2
 800a22a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a22c:	2208      	movs	r2, #8
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	1a9b      	subs	r3, r3, r2
 800a232:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f023 0307 	bic.w	r3, r3, #7
 800a23a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4a15      	ldr	r2, [pc, #84]	@ (800a294 <prvHeapInit+0xb4>)
 800a240:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a242:	4b14      	ldr	r3, [pc, #80]	@ (800a294 <prvHeapInit+0xb4>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2200      	movs	r2, #0
 800a248:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a24a:	4b12      	ldr	r3, [pc, #72]	@ (800a294 <prvHeapInit+0xb4>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2200      	movs	r2, #0
 800a250:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	1ad2      	subs	r2, r2, r3
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a260:	4b0c      	ldr	r3, [pc, #48]	@ (800a294 <prvHeapInit+0xb4>)
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	4a0a      	ldr	r2, [pc, #40]	@ (800a298 <prvHeapInit+0xb8>)
 800a26e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	4a09      	ldr	r2, [pc, #36]	@ (800a29c <prvHeapInit+0xbc>)
 800a276:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a278:	4b09      	ldr	r3, [pc, #36]	@ (800a2a0 <prvHeapInit+0xc0>)
 800a27a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a27e:	601a      	str	r2, [r3, #0]
}
 800a280:	bf00      	nop
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	200010bc 	.word	0x200010bc
 800a290:	200110bc 	.word	0x200110bc
 800a294:	200110c4 	.word	0x200110c4
 800a298:	200110cc 	.word	0x200110cc
 800a29c:	200110c8 	.word	0x200110c8
 800a2a0:	200110d8 	.word	0x200110d8

0800a2a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2ac:	4b28      	ldr	r3, [pc, #160]	@ (800a350 <prvInsertBlockIntoFreeList+0xac>)
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	e002      	b.n	800a2b8 <prvInsertBlockIntoFreeList+0x14>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	60fb      	str	r3, [r7, #12]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d8f7      	bhi.n	800a2b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d108      	bne.n	800a2e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	441a      	add	r2, r3
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	441a      	add	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d118      	bne.n	800a32c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	4b15      	ldr	r3, [pc, #84]	@ (800a354 <prvInsertBlockIntoFreeList+0xb0>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	429a      	cmp	r2, r3
 800a304:	d00d      	beq.n	800a322 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	685a      	ldr	r2, [r3, #4]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	441a      	add	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	e008      	b.n	800a334 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a322:	4b0c      	ldr	r3, [pc, #48]	@ (800a354 <prvInsertBlockIntoFreeList+0xb0>)
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	e003      	b.n	800a334 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d002      	beq.n	800a342 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a342:	bf00      	nop
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	200110bc 	.word	0x200110bc
 800a354:	200110c4 	.word	0x200110c4

0800a358 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a366:	4618      	mov	r0, r3
 800a368:	f7fd f86c 	bl	8007444 <USBH_LL_IncTimer>
}
 800a36c:	bf00      	nop
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a382:	4618      	mov	r0, r3
 800a384:	f7fd f8ac 	bl	80074e0 <USBH_LL_Connect>
}
 800a388:	bf00      	nop
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fd f8b9 	bl	8007516 <USBH_LL_Disconnect>
}
 800a3a4:	bf00      	nop
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	70fb      	strb	r3, [r7, #3]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7fd f8f5 	bl	80075b2 <USBH_LL_NotifyURBChange>
#endif
}
 800a3c8:	bf00      	nop
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fd f85a 	bl	8007498 <USBH_LL_PortEnabled>
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fd f85e 	bl	80074bc <USBH_LL_PortDisabled>
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a414:	2300      	movs	r3, #0
 800a416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a41e:	4618      	mov	r0, r3
 800a420:	f7f8 f89b 	bl	800255a <HAL_HCD_Stop>
 800a424:	4603      	mov	r3, r0
 800a426:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 f808 	bl	800a440 <USBH_Get_USB_Status>
 800a430:	4603      	mov	r3, r0
 800a432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a434:	7bbb      	ldrb	r3, [r7, #14]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
	...

0800a440 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	4603      	mov	r3, r0
 800a448:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a44e:	79fb      	ldrb	r3, [r7, #7]
 800a450:	2b03      	cmp	r3, #3
 800a452:	d817      	bhi.n	800a484 <USBH_Get_USB_Status+0x44>
 800a454:	a201      	add	r2, pc, #4	@ (adr r2, 800a45c <USBH_Get_USB_Status+0x1c>)
 800a456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45a:	bf00      	nop
 800a45c:	0800a46d 	.word	0x0800a46d
 800a460:	0800a473 	.word	0x0800a473
 800a464:	0800a479 	.word	0x0800a479
 800a468:	0800a47f 	.word	0x0800a47f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]
    break;
 800a470:	e00b      	b.n	800a48a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a472:	2302      	movs	r3, #2
 800a474:	73fb      	strb	r3, [r7, #15]
    break;
 800a476:	e008      	b.n	800a48a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a478:	2301      	movs	r3, #1
 800a47a:	73fb      	strb	r3, [r7, #15]
    break;
 800a47c:	e005      	b.n	800a48a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a47e:	2302      	movs	r3, #2
 800a480:	73fb      	strb	r3, [r7, #15]
    break;
 800a482:	e002      	b.n	800a48a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a484:	2302      	movs	r3, #2
 800a486:	73fb      	strb	r3, [r7, #15]
    break;
 800a488:	bf00      	nop
  }
  return usb_status;
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <rcl_get_zero_initialized_publisher>:
 800a498:	4b01      	ldr	r3, [pc, #4]	@ (800a4a0 <rcl_get_zero_initialized_publisher+0x8>)
 800a49a:	6818      	ldr	r0, [r3, #0]
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	08017d24 	.word	0x08017d24

0800a4a4 <rcl_publisher_init>:
 800a4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a8:	b088      	sub	sp, #32
 800a4aa:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a4ac:	2d00      	cmp	r5, #0
 800a4ae:	d069      	beq.n	800a584 <rcl_publisher_init+0xe0>
 800a4b0:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	4648      	mov	r0, r9
 800a4b8:	460e      	mov	r6, r1
 800a4ba:	4690      	mov	r8, r2
 800a4bc:	461f      	mov	r7, r3
 800a4be:	f001 f803 	bl	800b4c8 <rcutils_allocator_is_valid>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d05e      	beq.n	800a584 <rcl_publisher_init+0xe0>
 800a4c6:	2c00      	cmp	r4, #0
 800a4c8:	d05c      	beq.n	800a584 <rcl_publisher_init+0xe0>
 800a4ca:	f8d4 a000 	ldr.w	sl, [r4]
 800a4ce:	f1ba 0f00 	cmp.w	sl, #0
 800a4d2:	d004      	beq.n	800a4de <rcl_publisher_init+0x3a>
 800a4d4:	2764      	movs	r7, #100	@ 0x64
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	b008      	add	sp, #32
 800a4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f005 ffb6 	bl	8010450 <rcl_node_is_valid>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d052      	beq.n	800a58e <rcl_publisher_init+0xea>
 800a4e8:	f1b8 0f00 	cmp.w	r8, #0
 800a4ec:	d04a      	beq.n	800a584 <rcl_publisher_init+0xe0>
 800a4ee:	2f00      	cmp	r7, #0
 800a4f0:	d048      	beq.n	800a584 <rcl_publisher_init+0xe0>
 800a4f2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a4f6:	aa07      	add	r2, sp, #28
 800a4f8:	9205      	str	r2, [sp, #20]
 800a4fa:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a4fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a502:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a506:	f8cd a01c 	str.w	sl, [sp, #28]
 800a50a:	4639      	mov	r1, r7
 800a50c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a510:	4630      	mov	r0, r6
 800a512:	f005 fff1 	bl	80104f8 <rcl_node_resolve_name>
 800a516:	4607      	mov	r7, r0
 800a518:	2800      	cmp	r0, #0
 800a51a:	d14f      	bne.n	800a5bc <rcl_publisher_init+0x118>
 800a51c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a51e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a520:	20c8      	movs	r0, #200	@ 0xc8
 800a522:	4798      	blx	r3
 800a524:	6020      	str	r0, [r4, #0]
 800a526:	2800      	cmp	r0, #0
 800a528:	d04e      	beq.n	800a5c8 <rcl_publisher_init+0x124>
 800a52a:	4630      	mov	r0, r6
 800a52c:	f005 ffb2 	bl	8010494 <rcl_node_get_rmw_handle>
 800a530:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	9a07      	ldr	r2, [sp, #28]
 800a538:	6827      	ldr	r7, [r4, #0]
 800a53a:	462b      	mov	r3, r5
 800a53c:	4641      	mov	r1, r8
 800a53e:	f001 f8d1 	bl	800b6e4 <rmw_create_publisher>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a548:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a54c:	b370      	cbz	r0, 800a5ac <rcl_publisher_init+0x108>
 800a54e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a552:	f001 f9a5 	bl	800b8a0 <rmw_publisher_get_actual_qos>
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	4607      	mov	r7, r0
 800a55a:	b9d0      	cbnz	r0, 800a592 <rcl_publisher_init+0xee>
 800a55c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a560:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a564:	4629      	mov	r1, r5
 800a566:	2270      	movs	r2, #112	@ 0x70
 800a568:	4618      	mov	r0, r3
 800a56a:	f00c fcac 	bl	8016ec6 <memcpy>
 800a56e:	6832      	ldr	r2, [r6, #0]
 800a570:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a574:	9807      	ldr	r0, [sp, #28]
 800a576:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a578:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a57a:	4798      	blx	r3
 800a57c:	4638      	mov	r0, r7
 800a57e:	b008      	add	sp, #32
 800a580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a584:	270b      	movs	r7, #11
 800a586:	4638      	mov	r0, r7
 800a588:	b008      	add	sp, #32
 800a58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a58e:	27c8      	movs	r7, #200	@ 0xc8
 800a590:	e7a1      	b.n	800a4d6 <rcl_publisher_init+0x32>
 800a592:	b18b      	cbz	r3, 800a5b8 <rcl_publisher_init+0x114>
 800a594:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a598:	b142      	cbz	r2, 800a5ac <rcl_publisher_init+0x108>
 800a59a:	4630      	mov	r0, r6
 800a59c:	f005 ff7a 	bl	8010494 <rcl_node_get_rmw_handle>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a5a6:	f001 f98b 	bl	800b8c0 <rmw_destroy_publisher>
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a5ae:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	4790      	blx	r2
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	6023      	str	r3, [r4, #0]
 800a5b8:	2701      	movs	r7, #1
 800a5ba:	e7db      	b.n	800a574 <rcl_publisher_init+0xd0>
 800a5bc:	2867      	cmp	r0, #103	@ 0x67
 800a5be:	d0d9      	beq.n	800a574 <rcl_publisher_init+0xd0>
 800a5c0:	2869      	cmp	r0, #105	@ 0x69
 800a5c2:	d003      	beq.n	800a5cc <rcl_publisher_init+0x128>
 800a5c4:	280a      	cmp	r0, #10
 800a5c6:	d1f7      	bne.n	800a5b8 <rcl_publisher_init+0x114>
 800a5c8:	270a      	movs	r7, #10
 800a5ca:	e7d3      	b.n	800a574 <rcl_publisher_init+0xd0>
 800a5cc:	2767      	movs	r7, #103	@ 0x67
 800a5ce:	e7d1      	b.n	800a574 <rcl_publisher_init+0xd0>

0800a5d0 <rcl_publisher_get_default_options>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	4d14      	ldr	r5, [pc, #80]	@ (800a624 <rcl_publisher_get_default_options+0x54>)
 800a5d4:	4914      	ldr	r1, [pc, #80]	@ (800a628 <rcl_publisher_get_default_options+0x58>)
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	4604      	mov	r4, r0
 800a5da:	2250      	movs	r2, #80	@ 0x50
 800a5dc:	4628      	mov	r0, r5
 800a5de:	f00c fc72 	bl	8016ec6 <memcpy>
 800a5e2:	a802      	add	r0, sp, #8
 800a5e4:	f000 ff62 	bl	800b4ac <rcutils_get_default_allocator>
 800a5e8:	f10d 0c08 	add.w	ip, sp, #8
 800a5ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a5f0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a5f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a5f8:	466e      	mov	r6, sp
 800a5fa:	f8dc 3000 	ldr.w	r3, [ip]
 800a5fe:	f8ce 3000 	str.w	r3, [lr]
 800a602:	4630      	mov	r0, r6
 800a604:	f000 fff0 	bl	800b5e8 <rmw_get_default_publisher_options>
 800a608:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a60c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a610:	e883 0003 	stmia.w	r3, {r0, r1}
 800a614:	2270      	movs	r2, #112	@ 0x70
 800a616:	4629      	mov	r1, r5
 800a618:	4620      	mov	r0, r4
 800a61a:	f00c fc54 	bl	8016ec6 <memcpy>
 800a61e:	4620      	mov	r0, r4
 800a620:	b008      	add	sp, #32
 800a622:	bd70      	pop	{r4, r5, r6, pc}
 800a624:	200114c0 	.word	0x200114c0
 800a628:	08017d28 	.word	0x08017d28

0800a62c <rcl_publish>:
 800a62c:	b1f8      	cbz	r0, 800a66e <rcl_publish+0x42>
 800a62e:	6803      	ldr	r3, [r0, #0]
 800a630:	b570      	push	{r4, r5, r6, lr}
 800a632:	4604      	mov	r4, r0
 800a634:	b1b3      	cbz	r3, 800a664 <rcl_publish+0x38>
 800a636:	4616      	mov	r6, r2
 800a638:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a63c:	b192      	cbz	r2, 800a664 <rcl_publish+0x38>
 800a63e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a642:	460d      	mov	r5, r1
 800a644:	f005 fb40 	bl	800fcc8 <rcl_context_is_valid>
 800a648:	b160      	cbz	r0, 800a664 <rcl_publish+0x38>
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a650:	b140      	cbz	r0, 800a664 <rcl_publish+0x38>
 800a652:	b155      	cbz	r5, 800a66a <rcl_publish+0x3e>
 800a654:	4632      	mov	r2, r6
 800a656:	4629      	mov	r1, r5
 800a658:	f000 ffe4 	bl	800b624 <rmw_publish>
 800a65c:	3800      	subs	r0, #0
 800a65e:	bf18      	it	ne
 800a660:	2001      	movne	r0, #1
 800a662:	bd70      	pop	{r4, r5, r6, pc}
 800a664:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a668:	bd70      	pop	{r4, r5, r6, pc}
 800a66a:	200b      	movs	r0, #11
 800a66c:	bd70      	pop	{r4, r5, r6, pc}
 800a66e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a672:	4770      	bx	lr

0800a674 <rcl_publisher_is_valid>:
 800a674:	b1a0      	cbz	r0, 800a6a0 <rcl_publisher_is_valid+0x2c>
 800a676:	6803      	ldr	r3, [r0, #0]
 800a678:	b510      	push	{r4, lr}
 800a67a:	4604      	mov	r4, r0
 800a67c:	b173      	cbz	r3, 800a69c <rcl_publisher_is_valid+0x28>
 800a67e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a682:	b15a      	cbz	r2, 800a69c <rcl_publisher_is_valid+0x28>
 800a684:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a688:	f005 fb1e 	bl	800fcc8 <rcl_context_is_valid>
 800a68c:	b130      	cbz	r0, 800a69c <rcl_publisher_is_valid+0x28>
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a694:	3800      	subs	r0, #0
 800a696:	bf18      	it	ne
 800a698:	2001      	movne	r0, #1
 800a69a:	bd10      	pop	{r4, pc}
 800a69c:	2000      	movs	r0, #0
 800a69e:	bd10      	pop	{r4, pc}
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	4770      	bx	lr

0800a6a4 <rcl_publisher_is_valid_except_context>:
 800a6a4:	b130      	cbz	r0, 800a6b4 <rcl_publisher_is_valid_except_context+0x10>
 800a6a6:	6800      	ldr	r0, [r0, #0]
 800a6a8:	b120      	cbz	r0, 800a6b4 <rcl_publisher_is_valid_except_context+0x10>
 800a6aa:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a6ae:	3800      	subs	r0, #0
 800a6b0:	bf18      	it	ne
 800a6b2:	2001      	movne	r0, #1
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop

0800a6b8 <_rclc_check_for_new_data>:
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d046      	beq.n	800a74a <_rclc_check_for_new_data+0x92>
 800a6bc:	b510      	push	{r4, lr}
 800a6be:	7802      	ldrb	r2, [r0, #0]
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2a0a      	cmp	r2, #10
 800a6c6:	d842      	bhi.n	800a74e <_rclc_check_for_new_data+0x96>
 800a6c8:	e8df f002 	tbb	[pc, r2]
 800a6cc:	14181212 	.word	0x14181212
 800a6d0:	06060614 	.word	0x06060614
 800a6d4:	2e1a      	.short	0x2e1a
 800a6d6:	16          	.byte	0x16
 800a6d7:	00          	.byte	0x00
 800a6d8:	6a0a      	ldr	r2, [r1, #32]
 800a6da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a6dc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	1a12      	subs	r2, r2, r0
 800a6e4:	bf18      	it	ne
 800a6e6:	2201      	movne	r2, #1
 800a6e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a6ec:	b004      	add	sp, #16
 800a6ee:	bd10      	pop	{r4, pc}
 800a6f0:	680a      	ldr	r2, [r1, #0]
 800a6f2:	e7f2      	b.n	800a6da <_rclc_check_for_new_data+0x22>
 800a6f4:	698a      	ldr	r2, [r1, #24]
 800a6f6:	e7f0      	b.n	800a6da <_rclc_check_for_new_data+0x22>
 800a6f8:	688a      	ldr	r2, [r1, #8]
 800a6fa:	e7ee      	b.n	800a6da <_rclc_check_for_new_data+0x22>
 800a6fc:	690a      	ldr	r2, [r1, #16]
 800a6fe:	e7ec      	b.n	800a6da <_rclc_check_for_new_data+0x22>
 800a700:	685c      	ldr	r4, [r3, #4]
 800a702:	4608      	mov	r0, r1
 800a704:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a708:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a70c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a710:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a71a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a71e:	f104 0110 	add.w	r1, r4, #16
 800a722:	f007 fb7d 	bl	8011e20 <rcl_action_client_wait_set_get_entities_ready>
 800a726:	e7e1      	b.n	800a6ec <_rclc_check_for_new_data+0x34>
 800a728:	685c      	ldr	r4, [r3, #4]
 800a72a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800a72e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800a732:	e9cd 3200 	strd	r3, r2, [sp]
 800a736:	4608      	mov	r0, r1
 800a738:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a73c:	f104 0220 	add.w	r2, r4, #32
 800a740:	f104 0110 	add.w	r1, r4, #16
 800a744:	f007 fd84 	bl	8012250 <rcl_action_server_wait_set_get_entities_ready>
 800a748:	e7d0      	b.n	800a6ec <_rclc_check_for_new_data+0x34>
 800a74a:	200b      	movs	r0, #11
 800a74c:	4770      	bx	lr
 800a74e:	2001      	movs	r0, #1
 800a750:	e7cc      	b.n	800a6ec <_rclc_check_for_new_data+0x34>
 800a752:	bf00      	nop

0800a754 <_rclc_take_new_data>:
 800a754:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a756:	b09b      	sub	sp, #108	@ 0x6c
 800a758:	2800      	cmp	r0, #0
 800a75a:	f000 8088 	beq.w	800a86e <_rclc_take_new_data+0x11a>
 800a75e:	7803      	ldrb	r3, [r0, #0]
 800a760:	4604      	mov	r4, r0
 800a762:	2b0a      	cmp	r3, #10
 800a764:	f200 8167 	bhi.w	800aa36 <_rclc_take_new_data+0x2e2>
 800a768:	e8df f003 	tbb	[pc, r3]
 800a76c:	44152d2d 	.word	0x44152d2d
 800a770:	19191944 	.word	0x19191944
 800a774:	065a      	.short	0x065a
 800a776:	15          	.byte	0x15
 800a777:	00          	.byte	0x00
 800a778:	6840      	ldr	r0, [r0, #4]
 800a77a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f040 80b2 	bne.w	800a8e8 <_rclc_take_new_data+0x194>
 800a784:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f040 80e4 	bne.w	800a956 <_rclc_take_new_data+0x202>
 800a78e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a792:	2b00      	cmp	r3, #0
 800a794:	d16f      	bne.n	800a876 <_rclc_take_new_data+0x122>
 800a796:	2500      	movs	r5, #0
 800a798:	4628      	mov	r0, r5
 800a79a:	b01b      	add	sp, #108	@ 0x6c
 800a79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a79e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a7a0:	6a0b      	ldr	r3, [r1, #32]
 800a7a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0f5      	beq.n	800a796 <_rclc_take_new_data+0x42>
 800a7aa:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a7ae:	f104 0110 	add.w	r1, r4, #16
 800a7b2:	f005 ff4f 	bl	8010654 <rcl_take_request>
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d0ec      	beq.n	800a796 <_rclc_take_new_data+0x42>
 800a7bc:	f240 2359 	movw	r3, #601	@ 0x259
 800a7c0:	4298      	cmp	r0, r3
 800a7c2:	d013      	beq.n	800a7ec <_rclc_take_new_data+0x98>
 800a7c4:	e029      	b.n	800a81a <_rclc_take_new_data+0xc6>
 800a7c6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a7c8:	680b      	ldr	r3, [r1, #0]
 800a7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0e1      	beq.n	800a796 <_rclc_take_new_data+0x42>
 800a7d2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	aa0a      	add	r2, sp, #40	@ 0x28
 800a7da:	f005 ff9d 	bl	8010718 <rcl_take>
 800a7de:	4605      	mov	r5, r0
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	d0d9      	beq.n	800a798 <_rclc_take_new_data+0x44>
 800a7e4:	f240 1391 	movw	r3, #401	@ 0x191
 800a7e8:	4298      	cmp	r0, r3
 800a7ea:	d116      	bne.n	800a81a <_rclc_take_new_data+0xc6>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800a7f2:	e7d1      	b.n	800a798 <_rclc_take_new_data+0x44>
 800a7f4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a7f6:	698b      	ldr	r3, [r1, #24]
 800a7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0ca      	beq.n	800a796 <_rclc_take_new_data+0x42>
 800a800:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a804:	f104 0110 	add.w	r1, r4, #16
 800a808:	f005 f9ee 	bl	800fbe8 <rcl_take_response>
 800a80c:	4605      	mov	r5, r0
 800a80e:	2800      	cmp	r0, #0
 800a810:	d0c1      	beq.n	800a796 <_rclc_take_new_data+0x42>
 800a812:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800a816:	4298      	cmp	r0, r3
 800a818:	d0be      	beq.n	800a798 <_rclc_take_new_data+0x44>
 800a81a:	f000 fe79 	bl	800b510 <rcutils_reset_error>
 800a81e:	e7bb      	b.n	800a798 <_rclc_take_new_data+0x44>
 800a820:	6840      	ldr	r0, [r0, #4]
 800a822:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a826:	2b00      	cmp	r3, #0
 800a828:	d17d      	bne.n	800a926 <_rclc_take_new_data+0x1d2>
 800a82a:	69c3      	ldr	r3, [r0, #28]
 800a82c:	b11b      	cbz	r3, 800a836 <_rclc_take_new_data+0xe2>
 800a82e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a832:	2b00      	cmp	r3, #0
 800a834:	d144      	bne.n	800a8c0 <_rclc_take_new_data+0x16c>
 800a836:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f040 80ac 	bne.w	800a998 <_rclc_take_new_data+0x244>
 800a840:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a844:	2b00      	cmp	r3, #0
 800a846:	d0a6      	beq.n	800a796 <_rclc_take_new_data+0x42>
 800a848:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800a84a:	a90a      	add	r1, sp, #40	@ 0x28
 800a84c:	3010      	adds	r0, #16
 800a84e:	f007 f9bf 	bl	8011bd0 <rcl_action_take_result_response>
 800a852:	4605      	mov	r5, r0
 800a854:	2800      	cmp	r0, #0
 800a856:	d1e0      	bne.n	800a81a <_rclc_take_new_data+0xc6>
 800a858:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a85c:	6860      	ldr	r0, [r4, #4]
 800a85e:	f007 fe1b 	bl	8012498 <rclc_action_find_handle_by_result_request_sequence_number>
 800a862:	2800      	cmp	r0, #0
 800a864:	d098      	beq.n	800a798 <_rclc_take_new_data+0x44>
 800a866:	2301      	movs	r3, #1
 800a868:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800a86c:	e794      	b.n	800a798 <_rclc_take_new_data+0x44>
 800a86e:	250b      	movs	r5, #11
 800a870:	4628      	mov	r0, r5
 800a872:	b01b      	add	sp, #108	@ 0x6c
 800a874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a876:	ae04      	add	r6, sp, #16
 800a878:	aa0a      	add	r2, sp, #40	@ 0x28
 800a87a:	3010      	adds	r0, #16
 800a87c:	4631      	mov	r1, r6
 800a87e:	f007 fc1b 	bl	80120b8 <rcl_action_take_cancel_request>
 800a882:	4605      	mov	r5, r0
 800a884:	2800      	cmp	r0, #0
 800a886:	d1c8      	bne.n	800a81a <_rclc_take_new_data+0xc6>
 800a888:	6860      	ldr	r0, [r4, #4]
 800a88a:	a90a      	add	r1, sp, #40	@ 0x28
 800a88c:	f007 fdc2 	bl	8012414 <rclc_action_find_goal_handle_by_uuid>
 800a890:	4607      	mov	r7, r0
 800a892:	2800      	cmp	r0, #0
 800a894:	f000 80bb 	beq.w	800aa0e <_rclc_take_new_data+0x2ba>
 800a898:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800a89c:	2101      	movs	r1, #1
 800a89e:	f007 fd43 	bl	8012328 <rcl_action_transition_goal_state>
 800a8a2:	2803      	cmp	r0, #3
 800a8a4:	4684      	mov	ip, r0
 800a8a6:	f040 80a7 	bne.w	800a9f8 <_rclc_take_new_data+0x2a4>
 800a8aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a8ac:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800a8b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8b2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a8b6:	e884 0003 	stmia.w	r4, {r0, r1}
 800a8ba:	f887 c008 	strb.w	ip, [r7, #8]
 800a8be:	e76b      	b.n	800a798 <_rclc_take_new_data+0x44>
 800a8c0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a8c2:	3010      	adds	r0, #16
 800a8c4:	f007 fa04 	bl	8011cd0 <rcl_action_take_feedback>
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d1a5      	bne.n	800a81a <_rclc_take_new_data+0xc6>
 800a8ce:	6860      	ldr	r0, [r4, #4]
 800a8d0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a8d2:	f007 fd9f 	bl	8012414 <rclc_action_find_goal_handle_by_uuid>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	f000 80a3 	beq.w	800aa24 <_rclc_take_new_data+0x2d0>
 800a8de:	2201      	movs	r2, #1
 800a8e0:	6860      	ldr	r0, [r4, #4]
 800a8e2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800a8e6:	e7a6      	b.n	800a836 <_rclc_take_new_data+0xe2>
 800a8e8:	f007 fd6e 	bl	80123c8 <rclc_action_take_goal_handle>
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	6860      	ldr	r0, [r4, #4]
 800a8f0:	2e00      	cmp	r6, #0
 800a8f2:	f43f af47 	beq.w	800a784 <_rclc_take_new_data+0x30>
 800a8f6:	6070      	str	r0, [r6, #4]
 800a8f8:	69f2      	ldr	r2, [r6, #28]
 800a8fa:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800a8fe:	3010      	adds	r0, #16
 800a900:	f007 fb22 	bl	8011f48 <rcl_action_take_goal_request>
 800a904:	4605      	mov	r5, r0
 800a906:	2800      	cmp	r0, #0
 800a908:	f040 808e 	bne.w	800aa28 <_rclc_take_new_data+0x2d4>
 800a90c:	69f7      	ldr	r7, [r6, #28]
 800a90e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a910:	7235      	strb	r5, [r6, #8]
 800a912:	f8c6 0009 	str.w	r0, [r6, #9]
 800a916:	f8c6 100d 	str.w	r1, [r6, #13]
 800a91a:	6860      	ldr	r0, [r4, #4]
 800a91c:	f8c6 2011 	str.w	r2, [r6, #17]
 800a920:	f8c6 3015 	str.w	r3, [r6, #21]
 800a924:	e72e      	b.n	800a784 <_rclc_take_new_data+0x30>
 800a926:	aa04      	add	r2, sp, #16
 800a928:	a90a      	add	r1, sp, #40	@ 0x28
 800a92a:	3010      	adds	r0, #16
 800a92c:	f007 f8d8 	bl	8011ae0 <rcl_action_take_goal_response>
 800a930:	4605      	mov	r5, r0
 800a932:	2800      	cmp	r0, #0
 800a934:	f47f af71 	bne.w	800a81a <_rclc_take_new_data+0xc6>
 800a938:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a93c:	6860      	ldr	r0, [r4, #4]
 800a93e:	f007 fd99 	bl	8012474 <rclc_action_find_handle_by_goal_request_sequence_number>
 800a942:	b130      	cbz	r0, 800a952 <_rclc_take_new_data+0x1fe>
 800a944:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a948:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a94c:	2201      	movs	r2, #1
 800a94e:	f880 2020 	strb.w	r2, [r0, #32]
 800a952:	6860      	ldr	r0, [r4, #4]
 800a954:	e769      	b.n	800a82a <_rclc_take_new_data+0xd6>
 800a956:	aa04      	add	r2, sp, #16
 800a958:	3010      	adds	r0, #16
 800a95a:	a90a      	add	r1, sp, #40	@ 0x28
 800a95c:	f007 fb6c 	bl	8012038 <rcl_action_take_result_request>
 800a960:	4605      	mov	r5, r0
 800a962:	2800      	cmp	r0, #0
 800a964:	f47f af59 	bne.w	800a81a <_rclc_take_new_data+0xc6>
 800a968:	6860      	ldr	r0, [r4, #4]
 800a96a:	a904      	add	r1, sp, #16
 800a96c:	f007 fd52 	bl	8012414 <rclc_action_find_goal_handle_by_uuid>
 800a970:	4607      	mov	r7, r0
 800a972:	b160      	cbz	r0, 800a98e <_rclc_take_new_data+0x23a>
 800a974:	ad0a      	add	r5, sp, #40	@ 0x28
 800a976:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800a97a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a97c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a97e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a982:	f04f 0c02 	mov.w	ip, #2
 800a986:	e886 0003 	stmia.w	r6, {r0, r1}
 800a98a:	f887 c008 	strb.w	ip, [r7, #8]
 800a98e:	6860      	ldr	r0, [r4, #4]
 800a990:	2300      	movs	r3, #0
 800a992:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800a996:	e6fa      	b.n	800a78e <_rclc_take_new_data+0x3a>
 800a998:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800a99c:	a90a      	add	r1, sp, #40	@ 0x28
 800a99e:	3010      	adds	r0, #16
 800a9a0:	f007 f956 	bl	8011c50 <rcl_action_take_cancel_response>
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	f47f af37 	bne.w	800a81a <_rclc_take_new_data+0xc6>
 800a9ac:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a9b0:	6860      	ldr	r0, [r4, #4]
 800a9b2:	f007 fd83 	bl	80124bc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	6860      	ldr	r0, [r4, #4]
 800a9ba:	2e00      	cmp	r6, #0
 800a9bc:	f43f af40 	beq.w	800a840 <_rclc_take_new_data+0xec>
 800a9c0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a9c2:	2701      	movs	r7, #1
 800a9c4:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f43f af3a 	beq.w	800a840 <_rclc_take_new_data+0xec>
 800a9cc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a9ce:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a9d2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a9d6:	f007 fd1d 	bl	8012414 <rclc_action_find_goal_handle_by_uuid>
 800a9da:	b138      	cbz	r0, 800a9ec <_rclc_take_new_data+0x298>
 800a9dc:	6860      	ldr	r0, [r4, #4]
 800a9de:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a9e0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800a9e4:	3501      	adds	r5, #1
 800a9e6:	42ab      	cmp	r3, r5
 800a9e8:	d8f0      	bhi.n	800a9cc <_rclc_take_new_data+0x278>
 800a9ea:	e729      	b.n	800a840 <_rclc_take_new_data+0xec>
 800a9ec:	6860      	ldr	r0, [r4, #4]
 800a9ee:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a9f0:	3501      	adds	r5, #1
 800a9f2:	42ab      	cmp	r3, r5
 800a9f4:	d8ea      	bhi.n	800a9cc <_rclc_take_new_data+0x278>
 800a9f6:	e723      	b.n	800a840 <_rclc_take_new_data+0xec>
 800a9f8:	ab06      	add	r3, sp, #24
 800a9fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a9fc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800aa00:	2103      	movs	r1, #3
 800aa02:	e896 000c 	ldmia.w	r6, {r2, r3}
 800aa06:	6860      	ldr	r0, [r4, #4]
 800aa08:	f007 fdce 	bl	80125a8 <rclc_action_server_goal_cancel_reject>
 800aa0c:	e6c4      	b.n	800a798 <_rclc_take_new_data+0x44>
 800aa0e:	ab06      	add	r3, sp, #24
 800aa10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aa12:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800aa16:	2102      	movs	r1, #2
 800aa18:	e896 000c 	ldmia.w	r6, {r2, r3}
 800aa1c:	6860      	ldr	r0, [r4, #4]
 800aa1e:	f007 fdc3 	bl	80125a8 <rclc_action_server_goal_cancel_reject>
 800aa22:	e6b9      	b.n	800a798 <_rclc_take_new_data+0x44>
 800aa24:	6860      	ldr	r0, [r4, #4]
 800aa26:	e706      	b.n	800a836 <_rclc_take_new_data+0xe2>
 800aa28:	6860      	ldr	r0, [r4, #4]
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	f007 fcdc 	bl	80123e8 <rclc_action_remove_used_goal_handle>
 800aa30:	f000 fd6e 	bl	800b510 <rcutils_reset_error>
 800aa34:	e6b0      	b.n	800a798 <_rclc_take_new_data+0x44>
 800aa36:	2501      	movs	r5, #1
 800aa38:	e6ae      	b.n	800a798 <_rclc_take_new_data+0x44>
 800aa3a:	bf00      	nop

0800aa3c <_rclc_execute.part.0>:
 800aa3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa3e:	7803      	ldrb	r3, [r0, #0]
 800aa40:	b087      	sub	sp, #28
 800aa42:	4604      	mov	r4, r0
 800aa44:	2b0a      	cmp	r3, #10
 800aa46:	f200 8136 	bhi.w	800acb6 <_rclc_execute.part.0+0x27a>
 800aa4a:	e8df f003 	tbb	[pc, r3]
 800aa4e:	435e      	.short	0x435e
 800aa50:	06a1664f 	.word	0x06a1664f
 800aa54:	6c1e0606 	.word	0x6c1e0606
 800aa58:	59          	.byte	0x59
 800aa59:	00          	.byte	0x00
 800aa5a:	2b06      	cmp	r3, #6
 800aa5c:	f000 8122 	beq.w	800aca4 <_rclc_execute.part.0+0x268>
 800aa60:	2b07      	cmp	r3, #7
 800aa62:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aa64:	f040 8118 	bne.w	800ac98 <_rclc_execute.part.0+0x25c>
 800aa68:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800aa6c:	6880      	ldr	r0, [r0, #8]
 800aa6e:	4798      	blx	r3
 800aa70:	f104 0110 	add.w	r1, r4, #16
 800aa74:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800aa76:	6860      	ldr	r0, [r4, #4]
 800aa78:	f005 fe2c 	bl	80106d4 <rcl_send_response>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d033      	beq.n	800aae8 <_rclc_execute.part.0+0xac>
 800aa80:	9005      	str	r0, [sp, #20]
 800aa82:	f000 fd45 	bl	800b510 <rcutils_reset_error>
 800aa86:	9805      	ldr	r0, [sp, #20]
 800aa88:	e02e      	b.n	800aae8 <_rclc_execute.part.0+0xac>
 800aa8a:	6840      	ldr	r0, [r0, #4]
 800aa8c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 8086 	beq.w	800aba2 <_rclc_execute.part.0+0x166>
 800aa96:	2600      	movs	r6, #0
 800aa98:	2701      	movs	r7, #1
 800aa9a:	e004      	b.n	800aaa6 <_rclc_execute.part.0+0x6a>
 800aa9c:	f007 fc6e 	bl	801237c <rclc_action_send_result_request>
 800aaa0:	b998      	cbnz	r0, 800aaca <_rclc_execute.part.0+0x8e>
 800aaa2:	722f      	strb	r7, [r5, #8]
 800aaa4:	6860      	ldr	r0, [r4, #4]
 800aaa6:	f007 fd1b 	bl	80124e0 <rclc_action_find_first_handle_with_goal_response>
 800aaaa:	4605      	mov	r5, r0
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d077      	beq.n	800aba0 <_rclc_execute.part.0+0x164>
 800aab0:	6863      	ldr	r3, [r4, #4]
 800aab2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800aaba:	f885 6020 	strb.w	r6, [r5, #32]
 800aabe:	4798      	blx	r3
 800aac0:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800aac4:	4628      	mov	r0, r5
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1e8      	bne.n	800aa9c <_rclc_execute.part.0+0x60>
 800aaca:	6860      	ldr	r0, [r4, #4]
 800aacc:	4629      	mov	r1, r5
 800aace:	f007 fc8b 	bl	80123e8 <rclc_action_remove_used_goal_handle>
 800aad2:	e7e7      	b.n	800aaa4 <_rclc_execute.part.0+0x68>
 800aad4:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800aad8:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800aadc:	2d00      	cmp	r5, #0
 800aade:	f000 80c9 	beq.w	800ac74 <_rclc_execute.part.0+0x238>
 800aae2:	6880      	ldr	r0, [r0, #8]
 800aae4:	4798      	blx	r3
 800aae6:	2000      	movs	r0, #0
 800aae8:	b007      	add	sp, #28
 800aaea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaec:	6840      	ldr	r0, [r0, #4]
 800aaee:	f006 f921 	bl	8010d34 <rcl_timer_call>
 800aaf2:	f240 3321 	movw	r3, #801	@ 0x321
 800aaf6:	4298      	cmp	r0, r3
 800aaf8:	d004      	beq.n	800ab04 <_rclc_execute.part.0+0xc8>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d0f4      	beq.n	800aae8 <_rclc_execute.part.0+0xac>
 800aafe:	e7bf      	b.n	800aa80 <_rclc_execute.part.0+0x44>
 800ab00:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ab02:	4798      	blx	r3
 800ab04:	2000      	movs	r0, #0
 800ab06:	b007      	add	sp, #28
 800ab08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab0a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ab0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ab10:	b925      	cbnz	r5, 800ab1c <_rclc_execute.part.0+0xe0>
 800ab12:	4628      	mov	r0, r5
 800ab14:	4798      	blx	r3
 800ab16:	4628      	mov	r0, r5
 800ab18:	e7e6      	b.n	800aae8 <_rclc_execute.part.0+0xac>
 800ab1a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ab1c:	68a0      	ldr	r0, [r4, #8]
 800ab1e:	4798      	blx	r3
 800ab20:	2000      	movs	r0, #0
 800ab22:	b007      	add	sp, #28
 800ab24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab26:	6840      	ldr	r0, [r0, #4]
 800ab28:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800ab2c:	bb3b      	cbnz	r3, 800ab7e <_rclc_execute.part.0+0x142>
 800ab2e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d07b      	beq.n	800ac2e <_rclc_execute.part.0+0x1f2>
 800ab36:	f640 0634 	movw	r6, #2100	@ 0x834
 800ab3a:	2701      	movs	r7, #1
 800ab3c:	e007      	b.n	800ab4e <_rclc_execute.part.0+0x112>
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f007 fce6 	bl	8012510 <rclc_action_server_response_goal_request>
 800ab44:	6860      	ldr	r0, [r4, #4]
 800ab46:	4629      	mov	r1, r5
 800ab48:	f007 fc4e 	bl	80123e8 <rclc_action_remove_used_goal_handle>
 800ab4c:	6860      	ldr	r0, [r4, #4]
 800ab4e:	2100      	movs	r1, #0
 800ab50:	f007 fc78 	bl	8012444 <rclc_action_find_first_handle_by_status>
 800ab54:	4605      	mov	r5, r0
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d066      	beq.n	800ac28 <_rclc_execute.part.0+0x1ec>
 800ab5a:	6863      	ldr	r3, [r4, #4]
 800ab5c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	4798      	blx	r3
 800ab62:	42b0      	cmp	r0, r6
 800ab64:	f04f 0100 	mov.w	r1, #0
 800ab68:	d1e9      	bne.n	800ab3e <_rclc_execute.part.0+0x102>
 800ab6a:	2101      	movs	r1, #1
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	f007 fccf 	bl	8012510 <rclc_action_server_response_goal_request>
 800ab72:	722f      	strb	r7, [r5, #8]
 800ab74:	e7ea      	b.n	800ab4c <_rclc_execute.part.0+0x110>
 800ab76:	6848      	ldr	r0, [r1, #4]
 800ab78:	f007 fc36 	bl	80123e8 <rclc_action_remove_used_goal_handle>
 800ab7c:	6860      	ldr	r0, [r4, #4]
 800ab7e:	f007 fc6d 	bl	801245c <rclc_action_find_first_terminated_handle>
 800ab82:	4601      	mov	r1, r0
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d1f6      	bne.n	800ab76 <_rclc_execute.part.0+0x13a>
 800ab88:	6860      	ldr	r0, [r4, #4]
 800ab8a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ab8e:	e7ce      	b.n	800ab2e <_rclc_execute.part.0+0xf2>
 800ab90:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ab92:	6880      	ldr	r0, [r0, #8]
 800ab94:	f104 0110 	add.w	r1, r4, #16
 800ab98:	4798      	blx	r3
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	b007      	add	sp, #28
 800ab9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aba0:	6860      	ldr	r0, [r4, #4]
 800aba2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800aba6:	b18b      	cbz	r3, 800abcc <_rclc_execute.part.0+0x190>
 800aba8:	68c5      	ldr	r5, [r0, #12]
 800abaa:	b32d      	cbz	r5, 800abf8 <_rclc_execute.part.0+0x1bc>
 800abac:	2600      	movs	r6, #0
 800abae:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800abb2:	b143      	cbz	r3, 800abc6 <_rclc_execute.part.0+0x18a>
 800abb4:	69c3      	ldr	r3, [r0, #28]
 800abb6:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800abba:	b123      	cbz	r3, 800abc6 <_rclc_execute.part.0+0x18a>
 800abbc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800abbe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800abc0:	4628      	mov	r0, r5
 800abc2:	4798      	blx	r3
 800abc4:	6860      	ldr	r0, [r4, #4]
 800abc6:	682d      	ldr	r5, [r5, #0]
 800abc8:	2d00      	cmp	r5, #0
 800abca:	d1f0      	bne.n	800abae <_rclc_execute.part.0+0x172>
 800abcc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800abd0:	b193      	cbz	r3, 800abf8 <_rclc_execute.part.0+0x1bc>
 800abd2:	68c5      	ldr	r5, [r0, #12]
 800abd4:	b185      	cbz	r5, 800abf8 <_rclc_execute.part.0+0x1bc>
 800abd6:	2600      	movs	r6, #0
 800abd8:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800abdc:	b14b      	cbz	r3, 800abf2 <_rclc_execute.part.0+0x1b6>
 800abde:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800abe0:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800abe4:	b12b      	cbz	r3, 800abf2 <_rclc_execute.part.0+0x1b6>
 800abe6:	4628      	mov	r0, r5
 800abe8:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800abec:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800abee:	4798      	blx	r3
 800abf0:	6860      	ldr	r0, [r4, #4]
 800abf2:	682d      	ldr	r5, [r5, #0]
 800abf4:	2d00      	cmp	r5, #0
 800abf6:	d1ef      	bne.n	800abd8 <_rclc_execute.part.0+0x19c>
 800abf8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d081      	beq.n	800ab04 <_rclc_execute.part.0+0xc8>
 800ac00:	2700      	movs	r7, #0
 800ac02:	e00b      	b.n	800ac1c <_rclc_execute.part.0+0x1e0>
 800ac04:	6863      	ldr	r3, [r4, #4]
 800ac06:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ac08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ac0a:	6a1e      	ldr	r6, [r3, #32]
 800ac0c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800ac10:	47b0      	blx	r6
 800ac12:	6860      	ldr	r0, [r4, #4]
 800ac14:	4629      	mov	r1, r5
 800ac16:	f007 fbe7 	bl	80123e8 <rclc_action_remove_used_goal_handle>
 800ac1a:	6860      	ldr	r0, [r4, #4]
 800ac1c:	f007 fc6c 	bl	80124f8 <rclc_action_find_first_handle_with_result_response>
 800ac20:	4605      	mov	r5, r0
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d1ee      	bne.n	800ac04 <_rclc_execute.part.0+0x1c8>
 800ac26:	e76d      	b.n	800ab04 <_rclc_execute.part.0+0xc8>
 800ac28:	6860      	ldr	r0, [r4, #4]
 800ac2a:	f880 5020 	strb.w	r5, [r0, #32]
 800ac2e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f43f af66 	beq.w	800ab04 <_rclc_execute.part.0+0xc8>
 800ac38:	68c5      	ldr	r5, [r0, #12]
 800ac3a:	b1b5      	cbz	r5, 800ac6a <_rclc_execute.part.0+0x22e>
 800ac3c:	2602      	movs	r6, #2
 800ac3e:	e001      	b.n	800ac44 <_rclc_execute.part.0+0x208>
 800ac40:	682d      	ldr	r5, [r5, #0]
 800ac42:	b195      	cbz	r5, 800ac6a <_rclc_execute.part.0+0x22e>
 800ac44:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800ac48:	2b03      	cmp	r3, #3
 800ac4a:	d1f9      	bne.n	800ac40 <_rclc_execute.part.0+0x204>
 800ac4c:	69c3      	ldr	r3, [r0, #28]
 800ac4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ac50:	4628      	mov	r0, r5
 800ac52:	4798      	blx	r3
 800ac54:	4603      	mov	r3, r0
 800ac56:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ac60:	b163      	cbz	r3, 800ac7c <_rclc_execute.part.0+0x240>
 800ac62:	f007 fc75 	bl	8012550 <rclc_action_server_goal_cancel_accept>
 800ac66:	6860      	ldr	r0, [r4, #4]
 800ac68:	e7ea      	b.n	800ac40 <_rclc_execute.part.0+0x204>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ac70:	4618      	mov	r0, r3
 800ac72:	e739      	b.n	800aae8 <_rclc_execute.part.0+0xac>
 800ac74:	4628      	mov	r0, r5
 800ac76:	4798      	blx	r3
 800ac78:	4628      	mov	r0, r5
 800ac7a:	e735      	b.n	800aae8 <_rclc_execute.part.0+0xac>
 800ac7c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ac7e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ac82:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800ac86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac8a:	6860      	ldr	r0, [r4, #4]
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	f007 fc8b 	bl	80125a8 <rclc_action_server_goal_cancel_reject>
 800ac92:	722e      	strb	r6, [r5, #8]
 800ac94:	6860      	ldr	r0, [r4, #4]
 800ac96:	e7d3      	b.n	800ac40 <_rclc_execute.part.0+0x204>
 800ac98:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ac9a:	6880      	ldr	r0, [r0, #8]
 800ac9c:	4798      	blx	r3
 800ac9e:	f104 0110 	add.w	r1, r4, #16
 800aca2:	e6e7      	b.n	800aa74 <_rclc_execute.part.0+0x38>
 800aca4:	f100 0110 	add.w	r1, r0, #16
 800aca8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800acaa:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800acac:	6880      	ldr	r0, [r0, #8]
 800acae:	9105      	str	r1, [sp, #20]
 800acb0:	4798      	blx	r3
 800acb2:	9905      	ldr	r1, [sp, #20]
 800acb4:	e6de      	b.n	800aa74 <_rclc_execute.part.0+0x38>
 800acb6:	2001      	movs	r0, #1
 800acb8:	e716      	b.n	800aae8 <_rclc_execute.part.0+0xac>
 800acba:	bf00      	nop

0800acbc <rclc_executor_trigger_any>:
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d03f      	beq.n	800ad40 <rclc_executor_trigger_any+0x84>
 800acc0:	2900      	cmp	r1, #0
 800acc2:	d03e      	beq.n	800ad42 <rclc_executor_trigger_any+0x86>
 800acc4:	4603      	mov	r3, r0
 800acc6:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800acca:	2200      	movs	r2, #0
 800accc:	2800      	cmp	r0, #0
 800acce:	d037      	beq.n	800ad40 <rclc_executor_trigger_any+0x84>
 800acd0:	b430      	push	{r4, r5}
 800acd2:	f893 c000 	ldrb.w	ip, [r3]
 800acd6:	f1bc 0f08 	cmp.w	ip, #8
 800acda:	d11e      	bne.n	800ad1a <rclc_executor_trigger_any+0x5e>
 800acdc:	685c      	ldr	r4, [r3, #4]
 800acde:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800ace0:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800ace4:	d105      	bne.n	800acf2 <rclc_executor_trigger_any+0x36>
 800ace6:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800acea:	b910      	cbnz	r0, 800acf2 <rclc_executor_trigger_any+0x36>
 800acec:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800acf0:	b128      	cbz	r0, 800acfe <rclc_executor_trigger_any+0x42>
 800acf2:	bc30      	pop	{r4, r5}
 800acf4:	4770      	bx	lr
 800acf6:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d1f9      	bne.n	800acf2 <rclc_executor_trigger_any+0x36>
 800acfe:	3201      	adds	r2, #1
 800ad00:	4291      	cmp	r1, r2
 800ad02:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ad06:	d018      	beq.n	800ad3a <rclc_executor_trigger_any+0x7e>
 800ad08:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	d0f0      	beq.n	800acf2 <rclc_executor_trigger_any+0x36>
 800ad10:	f893 c000 	ldrb.w	ip, [r3]
 800ad14:	f1bc 0f08 	cmp.w	ip, #8
 800ad18:	d0e0      	beq.n	800acdc <rclc_executor_trigger_any+0x20>
 800ad1a:	f1bc 0f09 	cmp.w	ip, #9
 800ad1e:	d1ea      	bne.n	800acf6 <rclc_executor_trigger_any+0x3a>
 800ad20:	685c      	ldr	r4, [r3, #4]
 800ad22:	6a25      	ldr	r5, [r4, #32]
 800ad24:	2d00      	cmp	r5, #0
 800ad26:	d1e4      	bne.n	800acf2 <rclc_executor_trigger_any+0x36>
 800ad28:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d1e0      	bne.n	800acf2 <rclc_executor_trigger_any+0x36>
 800ad30:	3201      	adds	r2, #1
 800ad32:	4291      	cmp	r1, r2
 800ad34:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ad38:	d1e6      	bne.n	800ad08 <rclc_executor_trigger_any+0x4c>
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	bc30      	pop	{r4, r5}
 800ad3e:	4770      	bx	lr
 800ad40:	4770      	bx	lr
 800ad42:	4608      	mov	r0, r1
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop

0800ad48 <rclc_executor_init>:
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	d05f      	beq.n	800ae0c <rclc_executor_init+0xc4>
 800ad4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad50:	460c      	mov	r4, r1
 800ad52:	b0b0      	sub	sp, #192	@ 0xc0
 800ad54:	2900      	cmp	r1, #0
 800ad56:	d051      	beq.n	800adfc <rclc_executor_init+0xb4>
 800ad58:	4605      	mov	r5, r0
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	4616      	mov	r6, r2
 800ad5e:	461f      	mov	r7, r3
 800ad60:	f000 fbb2 	bl	800b4c8 <rcutils_allocator_is_valid>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d049      	beq.n	800adfc <rclc_executor_init+0xb4>
 800ad68:	2e00      	cmp	r6, #0
 800ad6a:	d047      	beq.n	800adfc <rclc_executor_init+0xb4>
 800ad6c:	492c      	ldr	r1, [pc, #176]	@ (800ae20 <rclc_executor_init+0xd8>)
 800ad6e:	2288      	movs	r2, #136	@ 0x88
 800ad70:	a80e      	add	r0, sp, #56	@ 0x38
 800ad72:	f00c f8a8 	bl	8016ec6 <memcpy>
 800ad76:	a90e      	add	r1, sp, #56	@ 0x38
 800ad78:	2288      	movs	r2, #136	@ 0x88
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	f00c f8a3 	bl	8016ec6 <memcpy>
 800ad80:	602c      	str	r4, [r5, #0]
 800ad82:	4668      	mov	r0, sp
 800ad84:	60ae      	str	r6, [r5, #8]
 800ad86:	466c      	mov	r4, sp
 800ad88:	f006 f8dc 	bl	8010f44 <rcl_get_zero_initialized_wait_set>
 800ad8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad8e:	f105 0c14 	add.w	ip, r5, #20
 800ad92:	f8d7 8000 	ldr.w	r8, [r7]
 800ad96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ada0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ada2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ada6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800ae18 <rclc_executor_init+0xd0>
 800adaa:	6823      	ldr	r3, [r4, #0]
 800adac:	f8cc 3000 	str.w	r3, [ip]
 800adb0:	6939      	ldr	r1, [r7, #16]
 800adb2:	612f      	str	r7, [r5, #16]
 800adb4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800adb8:	01b0      	lsls	r0, r6, #6
 800adba:	47c0      	blx	r8
 800adbc:	6068      	str	r0, [r5, #4]
 800adbe:	b338      	cbz	r0, 800ae10 <rclc_executor_init+0xc8>
 800adc0:	2400      	movs	r4, #0
 800adc2:	e000      	b.n	800adc6 <rclc_executor_init+0x7e>
 800adc4:	6868      	ldr	r0, [r5, #4]
 800adc6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800adca:	4631      	mov	r1, r6
 800adcc:	3401      	adds	r4, #1
 800adce:	f000 fa63 	bl	800b298 <rclc_executor_handle_init>
 800add2:	42a6      	cmp	r6, r4
 800add4:	d1f6      	bne.n	800adc4 <rclc_executor_init+0x7c>
 800add6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800adda:	f000 fa51 	bl	800b280 <rclc_executor_handle_counters_zero_init>
 800adde:	4a11      	ldr	r2, [pc, #68]	@ (800ae24 <rclc_executor_init+0xdc>)
 800ade0:	686b      	ldr	r3, [r5, #4]
 800ade2:	2000      	movs	r0, #0
 800ade4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800ade8:	b163      	cbz	r3, 800ae04 <rclc_executor_init+0xbc>
 800adea:	692b      	ldr	r3, [r5, #16]
 800adec:	b153      	cbz	r3, 800ae04 <rclc_executor_init+0xbc>
 800adee:	68ab      	ldr	r3, [r5, #8]
 800adf0:	b143      	cbz	r3, 800ae04 <rclc_executor_init+0xbc>
 800adf2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800adf6:	b030      	add	sp, #192	@ 0xc0
 800adf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adfc:	200b      	movs	r0, #11
 800adfe:	b030      	add	sp, #192	@ 0xc0
 800ae00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae04:	4618      	mov	r0, r3
 800ae06:	b030      	add	sp, #192	@ 0xc0
 800ae08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae0c:	200b      	movs	r0, #11
 800ae0e:	4770      	bx	lr
 800ae10:	200a      	movs	r0, #10
 800ae12:	e7f4      	b.n	800adfe <rclc_executor_init+0xb6>
 800ae14:	f3af 8000 	nop.w
 800ae18:	3b9aca00 	.word	0x3b9aca00
 800ae1c:	00000000 	.word	0x00000000
 800ae20:	08017d78 	.word	0x08017d78
 800ae24:	0800acbd 	.word	0x0800acbd

0800ae28 <rclc_executor_add_timer>:
 800ae28:	b300      	cbz	r0, 800ae6c <rclc_executor_add_timer+0x44>
 800ae2a:	b1f9      	cbz	r1, 800ae6c <rclc_executor_add_timer+0x44>
 800ae2c:	b538      	push	{r3, r4, r5, lr}
 800ae2e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ae32:	4293      	cmp	r3, r2
 800ae34:	4604      	mov	r4, r0
 800ae36:	d301      	bcc.n	800ae3c <rclc_executor_add_timer+0x14>
 800ae38:	2001      	movs	r0, #1
 800ae3a:	bd38      	pop	{r3, r4, r5, pc}
 800ae3c:	6840      	ldr	r0, [r0, #4]
 800ae3e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ae42:	019d      	lsls	r5, r3, #6
 800ae44:	6051      	str	r1, [r2, #4]
 800ae46:	2102      	movs	r1, #2
 800ae48:	5341      	strh	r1, [r0, r5]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	2101      	movs	r1, #1
 800ae50:	f104 0514 	add.w	r5, r4, #20
 800ae54:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800ae56:	8711      	strh	r1, [r2, #56]	@ 0x38
 800ae58:	4628      	mov	r0, r5
 800ae5a:	60e3      	str	r3, [r4, #12]
 800ae5c:	f006 f886 	bl	8010f6c <rcl_wait_set_is_valid>
 800ae60:	b930      	cbnz	r0, 800ae70 <rclc_executor_add_timer+0x48>
 800ae62:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ae64:	3301      	adds	r3, #1
 800ae66:	2000      	movs	r0, #0
 800ae68:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800ae6a:	bd38      	pop	{r3, r4, r5, pc}
 800ae6c:	200b      	movs	r0, #11
 800ae6e:	4770      	bx	lr
 800ae70:	4628      	mov	r0, r5
 800ae72:	f006 f881 	bl	8010f78 <rcl_wait_set_fini>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d0f3      	beq.n	800ae62 <rclc_executor_add_timer+0x3a>
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}

0800ae7c <rclc_executor_prepare>:
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d044      	beq.n	800af0a <rclc_executor_prepare+0x8e>
 800ae80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae82:	f100 0514 	add.w	r5, r0, #20
 800ae86:	b09b      	sub	sp, #108	@ 0x6c
 800ae88:	4604      	mov	r4, r0
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	f006 f86e 	bl	8010f6c <rcl_wait_set_is_valid>
 800ae90:	b110      	cbz	r0, 800ae98 <rclc_executor_prepare+0x1c>
 800ae92:	2000      	movs	r0, #0
 800ae94:	b01b      	add	sp, #108	@ 0x6c
 800ae96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f006 f86d 	bl	8010f78 <rcl_wait_set_fini>
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d130      	bne.n	800af04 <rclc_executor_prepare+0x88>
 800aea2:	a80c      	add	r0, sp, #48	@ 0x30
 800aea4:	f006 f84e 	bl	8010f44 <rcl_get_zero_initialized_wait_set>
 800aea8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800aeac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aeb0:	46ae      	mov	lr, r5
 800aeb2:	6927      	ldr	r7, [r4, #16]
 800aeb4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aeb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aebc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aec0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aec4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aec8:	f8dc 3000 	ldr.w	r3, [ip]
 800aecc:	f8ce 3000 	str.w	r3, [lr]
 800aed0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aed2:	ae04      	add	r6, sp, #16
 800aed4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	6822      	ldr	r2, [r4, #0]
 800aeda:	6033      	str	r3, [r6, #0]
 800aedc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aede:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800aee0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800aee4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800aee8:	e9cd 2100 	strd	r2, r1, [sp]
 800aeec:	4628      	mov	r0, r5
 800aeee:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800aef0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800aef2:	f006 fb3f 	bl	8011574 <rcl_wait_set_init>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d0cc      	beq.n	800ae94 <rclc_executor_prepare+0x18>
 800aefa:	900b      	str	r0, [sp, #44]	@ 0x2c
 800aefc:	f000 fb08 	bl	800b510 <rcutils_reset_error>
 800af00:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800af02:	e7c7      	b.n	800ae94 <rclc_executor_prepare+0x18>
 800af04:	f000 fb04 	bl	800b510 <rcutils_reset_error>
 800af08:	e7cb      	b.n	800aea2 <rclc_executor_prepare+0x26>
 800af0a:	200b      	movs	r0, #11
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop

0800af10 <rclc_executor_spin_some.part.0>:
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	f100 0614 	add.w	r6, r0, #20
 800af18:	b083      	sub	sp, #12
 800af1a:	4691      	mov	r9, r2
 800af1c:	4698      	mov	r8, r3
 800af1e:	4605      	mov	r5, r0
 800af20:	f7ff ffac 	bl	800ae7c <rclc_executor_prepare>
 800af24:	4630      	mov	r0, r6
 800af26:	f006 f8f3 	bl	8011110 <rcl_wait_set_clear>
 800af2a:	4607      	mov	r7, r0
 800af2c:	2800      	cmp	r0, #0
 800af2e:	f040 80ed 	bne.w	800b10c <rclc_executor_spin_some.part.0+0x1fc>
 800af32:	68ab      	ldr	r3, [r5, #8]
 800af34:	4604      	mov	r4, r0
 800af36:	b303      	cbz	r3, 800af7a <rclc_executor_spin_some.part.0+0x6a>
 800af38:	6869      	ldr	r1, [r5, #4]
 800af3a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800af3e:	01a2      	lsls	r2, r4, #6
 800af40:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800af44:	b1cb      	cbz	r3, 800af7a <rclc_executor_spin_some.part.0+0x6a>
 800af46:	5c8b      	ldrb	r3, [r1, r2]
 800af48:	2b0a      	cmp	r3, #10
 800af4a:	f200 80d8 	bhi.w	800b0fe <rclc_executor_spin_some.part.0+0x1ee>
 800af4e:	e8df f003 	tbb	[pc, r3]
 800af52:	9c9c      	.short	0x9c9c
 800af54:	068c8ca7 	.word	0x068c8ca7
 800af58:	bdc90606 	.word	0xbdc90606
 800af5c:	b2          	.byte	0xb2
 800af5d:	00          	.byte	0x00
 800af5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800af62:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800af66:	4630      	mov	r0, r6
 800af68:	f006 fc1a 	bl	80117a0 <rcl_wait_set_add_service>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	f040 8086 	bne.w	800b07e <rclc_executor_spin_some.part.0+0x16e>
 800af72:	68ab      	ldr	r3, [r5, #8]
 800af74:	3401      	adds	r4, #1
 800af76:	429c      	cmp	r4, r3
 800af78:	d3de      	bcc.n	800af38 <rclc_executor_spin_some.part.0+0x28>
 800af7a:	4643      	mov	r3, r8
 800af7c:	464a      	mov	r2, r9
 800af7e:	4630      	mov	r0, r6
 800af80:	f006 fc3a 	bl	80117f8 <rcl_wait>
 800af84:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 80c7 	beq.w	800b11c <rclc_executor_spin_some.part.0+0x20c>
 800af8e:	2b01      	cmp	r3, #1
 800af90:	f040 80b5 	bne.w	800b0fe <rclc_executor_spin_some.part.0+0x1ee>
 800af94:	68ab      	ldr	r3, [r5, #8]
 800af96:	2b00      	cmp	r3, #0
 800af98:	f000 8159 	beq.w	800b24e <rclc_executor_spin_some.part.0+0x33e>
 800af9c:	2400      	movs	r4, #0
 800af9e:	46a0      	mov	r8, r4
 800afa0:	f240 1991 	movw	r9, #401	@ 0x191
 800afa4:	e00a      	b.n	800afbc <rclc_executor_spin_some.part.0+0xac>
 800afa6:	f7ff fb87 	bl	800a6b8 <_rclc_check_for_new_data>
 800afaa:	4604      	mov	r4, r0
 800afac:	b110      	cbz	r0, 800afb4 <rclc_executor_spin_some.part.0+0xa4>
 800afae:	4548      	cmp	r0, r9
 800afb0:	f040 80b2 	bne.w	800b118 <rclc_executor_spin_some.part.0+0x208>
 800afb4:	68ab      	ldr	r3, [r5, #8]
 800afb6:	4598      	cmp	r8, r3
 800afb8:	f080 8126 	bcs.w	800b208 <rclc_executor_spin_some.part.0+0x2f8>
 800afbc:	686a      	ldr	r2, [r5, #4]
 800afbe:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800afc2:	4631      	mov	r1, r6
 800afc4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800afc8:	f108 0801 	add.w	r8, r8, #1
 800afcc:	f1bc 0f00 	cmp.w	ip, #0
 800afd0:	d1e9      	bne.n	800afa6 <rclc_executor_spin_some.part.0+0x96>
 800afd2:	4619      	mov	r1, r3
 800afd4:	4610      	mov	r0, r2
 800afd6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800afda:	4798      	blx	r3
 800afdc:	2800      	cmp	r0, #0
 800afde:	f000 809b 	beq.w	800b118 <rclc_executor_spin_some.part.0+0x208>
 800afe2:	68ab      	ldr	r3, [r5, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f000 8097 	beq.w	800b118 <rclc_executor_spin_some.part.0+0x208>
 800afea:	f04f 0800 	mov.w	r8, #0
 800afee:	f240 1991 	movw	r9, #401	@ 0x191
 800aff2:	e009      	b.n	800b008 <rclc_executor_spin_some.part.0+0xf8>
 800aff4:	f7ff fbae 	bl	800a754 <_rclc_take_new_data>
 800aff8:	4604      	mov	r4, r0
 800affa:	b110      	cbz	r0, 800b002 <rclc_executor_spin_some.part.0+0xf2>
 800affc:	4548      	cmp	r0, r9
 800affe:	f040 808b 	bne.w	800b118 <rclc_executor_spin_some.part.0+0x208>
 800b002:	68ab      	ldr	r3, [r5, #8]
 800b004:	4598      	cmp	r8, r3
 800b006:	d209      	bcs.n	800b01c <rclc_executor_spin_some.part.0+0x10c>
 800b008:	6868      	ldr	r0, [r5, #4]
 800b00a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b00e:	4631      	mov	r1, r6
 800b010:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800b014:	f108 0801 	add.w	r8, r8, #1
 800b018:	2a00      	cmp	r2, #0
 800b01a:	d1eb      	bne.n	800aff4 <rclc_executor_spin_some.part.0+0xe4>
 800b01c:	2600      	movs	r6, #0
 800b01e:	b97b      	cbnz	r3, 800b040 <rclc_executor_spin_some.part.0+0x130>
 800b020:	e07a      	b.n	800b118 <rclc_executor_spin_some.part.0+0x208>
 800b022:	f812 200c 	ldrb.w	r2, [r2, ip]
 800b026:	2a08      	cmp	r2, #8
 800b028:	f000 80fd 	beq.w	800b226 <rclc_executor_spin_some.part.0+0x316>
 800b02c:	2a09      	cmp	r2, #9
 800b02e:	f000 80ef 	beq.w	800b210 <rclc_executor_spin_some.part.0+0x300>
 800b032:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800b036:	b98a      	cbnz	r2, 800b05c <rclc_executor_spin_some.part.0+0x14c>
 800b038:	3601      	adds	r6, #1
 800b03a:	429e      	cmp	r6, r3
 800b03c:	d262      	bcs.n	800b104 <rclc_executor_spin_some.part.0+0x1f4>
 800b03e:	2400      	movs	r4, #0
 800b040:	686a      	ldr	r2, [r5, #4]
 800b042:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b046:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800b04a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800b04e:	2900      	cmp	r1, #0
 800b050:	d062      	beq.n	800b118 <rclc_executor_spin_some.part.0+0x208>
 800b052:	7841      	ldrb	r1, [r0, #1]
 800b054:	2900      	cmp	r1, #0
 800b056:	d0e4      	beq.n	800b022 <rclc_executor_spin_some.part.0+0x112>
 800b058:	2901      	cmp	r1, #1
 800b05a:	d1ed      	bne.n	800b038 <rclc_executor_spin_some.part.0+0x128>
 800b05c:	f7ff fcee 	bl	800aa3c <_rclc_execute.part.0>
 800b060:	2800      	cmp	r0, #0
 800b062:	f040 80b6 	bne.w	800b1d2 <rclc_executor_spin_some.part.0+0x2c2>
 800b066:	68ab      	ldr	r3, [r5, #8]
 800b068:	e7e6      	b.n	800b038 <rclc_executor_spin_some.part.0+0x128>
 800b06a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b06e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b072:	4630      	mov	r0, r6
 800b074:	f006 fb68 	bl	8011748 <rcl_wait_set_add_client>
 800b078:	2800      	cmp	r0, #0
 800b07a:	f43f af7a 	beq.w	800af72 <rclc_executor_spin_some.part.0+0x62>
 800b07e:	9001      	str	r0, [sp, #4]
 800b080:	f000 fa46 	bl	800b510 <rcutils_reset_error>
 800b084:	9801      	ldr	r0, [sp, #4]
 800b086:	4607      	mov	r7, r0
 800b088:	e03c      	b.n	800b104 <rclc_executor_spin_some.part.0+0x1f4>
 800b08a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b08e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b092:	4630      	mov	r0, r6
 800b094:	f006 f810 	bl	80110b8 <rcl_wait_set_add_subscription>
 800b098:	2800      	cmp	r0, #0
 800b09a:	f43f af6a 	beq.w	800af72 <rclc_executor_spin_some.part.0+0x62>
 800b09e:	e7ee      	b.n	800b07e <rclc_executor_spin_some.part.0+0x16e>
 800b0a0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b0a4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f006 fb1d 	bl	80116e8 <rcl_wait_set_add_timer>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	f43f af5f 	beq.w	800af72 <rclc_executor_spin_some.part.0+0x62>
 800b0b4:	e7e3      	b.n	800b07e <rclc_executor_spin_some.part.0+0x16e>
 800b0b6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b0ba:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b0be:	4630      	mov	r0, r6
 800b0c0:	f006 fae6 	bl	8011690 <rcl_wait_set_add_guard_condition>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	f43f af54 	beq.w	800af72 <rclc_executor_spin_some.part.0+0x62>
 800b0ca:	e7d8      	b.n	800b07e <rclc_executor_spin_some.part.0+0x16e>
 800b0cc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b0d0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b0d4:	3110      	adds	r1, #16
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	f007 f866 	bl	80121a8 <rcl_action_wait_set_add_action_server>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	f43f af48 	beq.w	800af72 <rclc_executor_spin_some.part.0+0x62>
 800b0e2:	e7cc      	b.n	800b07e <rclc_executor_spin_some.part.0+0x16e>
 800b0e4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b0e8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b0ec:	3110      	adds	r1, #16
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	f006 fe31 	bl	8011d58 <rcl_action_wait_set_add_action_client>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	f43f af3b 	beq.w	800af72 <rclc_executor_spin_some.part.0+0x62>
 800b0fc:	e7bf      	b.n	800b07e <rclc_executor_spin_some.part.0+0x16e>
 800b0fe:	f000 fa07 	bl	800b510 <rcutils_reset_error>
 800b102:	2701      	movs	r7, #1
 800b104:	4638      	mov	r0, r7
 800b106:	b003      	add	sp, #12
 800b108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10c:	f000 fa00 	bl	800b510 <rcutils_reset_error>
 800b110:	4638      	mov	r0, r7
 800b112:	b003      	add	sp, #12
 800b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b118:	4627      	mov	r7, r4
 800b11a:	e7f3      	b.n	800b104 <rclc_executor_spin_some.part.0+0x1f4>
 800b11c:	68ab      	ldr	r3, [r5, #8]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f000 8092 	beq.w	800b248 <rclc_executor_spin_some.part.0+0x338>
 800b124:	2400      	movs	r4, #0
 800b126:	46a0      	mov	r8, r4
 800b128:	f240 1991 	movw	r9, #401	@ 0x191
 800b12c:	e008      	b.n	800b140 <rclc_executor_spin_some.part.0+0x230>
 800b12e:	f7ff fac3 	bl	800a6b8 <_rclc_check_for_new_data>
 800b132:	4604      	mov	r4, r0
 800b134:	b108      	cbz	r0, 800b13a <rclc_executor_spin_some.part.0+0x22a>
 800b136:	4548      	cmp	r0, r9
 800b138:	d1ee      	bne.n	800b118 <rclc_executor_spin_some.part.0+0x208>
 800b13a:	68ab      	ldr	r3, [r5, #8]
 800b13c:	4598      	cmp	r8, r3
 800b13e:	d265      	bcs.n	800b20c <rclc_executor_spin_some.part.0+0x2fc>
 800b140:	686a      	ldr	r2, [r5, #4]
 800b142:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b146:	4631      	mov	r1, r6
 800b148:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b14c:	f108 0801 	add.w	r8, r8, #1
 800b150:	f1bc 0f00 	cmp.w	ip, #0
 800b154:	d1eb      	bne.n	800b12e <rclc_executor_spin_some.part.0+0x21e>
 800b156:	4619      	mov	r1, r3
 800b158:	4610      	mov	r0, r2
 800b15a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b15e:	4798      	blx	r3
 800b160:	2800      	cmp	r0, #0
 800b162:	d0d9      	beq.n	800b118 <rclc_executor_spin_some.part.0+0x208>
 800b164:	68ab      	ldr	r3, [r5, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d0d6      	beq.n	800b118 <rclc_executor_spin_some.part.0+0x208>
 800b16a:	f04f 0800 	mov.w	r8, #0
 800b16e:	f240 1991 	movw	r9, #401	@ 0x191
 800b172:	f240 2a59 	movw	sl, #601	@ 0x259
 800b176:	e00e      	b.n	800b196 <rclc_executor_spin_some.part.0+0x286>
 800b178:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b17c:	2b08      	cmp	r3, #8
 800b17e:	d033      	beq.n	800b1e8 <rclc_executor_spin_some.part.0+0x2d8>
 800b180:	2b09      	cmp	r3, #9
 800b182:	d028      	beq.n	800b1d6 <rclc_executor_spin_some.part.0+0x2c6>
 800b184:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800b188:	b9fb      	cbnz	r3, 800b1ca <rclc_executor_spin_some.part.0+0x2ba>
 800b18a:	68ab      	ldr	r3, [r5, #8]
 800b18c:	f108 0801 	add.w	r8, r8, #1
 800b190:	4598      	cmp	r8, r3
 800b192:	d2b7      	bcs.n	800b104 <rclc_executor_spin_some.part.0+0x1f4>
 800b194:	2400      	movs	r4, #0
 800b196:	6868      	ldr	r0, [r5, #4]
 800b198:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b19c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b1a0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d0b7      	beq.n	800b118 <rclc_executor_spin_some.part.0+0x208>
 800b1a8:	4631      	mov	r1, r6
 800b1aa:	f7ff fad3 	bl	800a754 <_rclc_take_new_data>
 800b1ae:	b118      	cbz	r0, 800b1b8 <rclc_executor_spin_some.part.0+0x2a8>
 800b1b0:	4548      	cmp	r0, r9
 800b1b2:	d001      	beq.n	800b1b8 <rclc_executor_spin_some.part.0+0x2a8>
 800b1b4:	4550      	cmp	r0, sl
 800b1b6:	d10c      	bne.n	800b1d2 <rclc_executor_spin_some.part.0+0x2c2>
 800b1b8:	686b      	ldr	r3, [r5, #4]
 800b1ba:	eb13 000b 	adds.w	r0, r3, fp
 800b1be:	d021      	beq.n	800b204 <rclc_executor_spin_some.part.0+0x2f4>
 800b1c0:	7842      	ldrb	r2, [r0, #1]
 800b1c2:	2a00      	cmp	r2, #0
 800b1c4:	d0d8      	beq.n	800b178 <rclc_executor_spin_some.part.0+0x268>
 800b1c6:	2a01      	cmp	r2, #1
 800b1c8:	d1df      	bne.n	800b18a <rclc_executor_spin_some.part.0+0x27a>
 800b1ca:	f7ff fc37 	bl	800aa3c <_rclc_execute.part.0>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d0db      	beq.n	800b18a <rclc_executor_spin_some.part.0+0x27a>
 800b1d2:	4607      	mov	r7, r0
 800b1d4:	e796      	b.n	800b104 <rclc_executor_spin_some.part.0+0x1f4>
 800b1d6:	6843      	ldr	r3, [r0, #4]
 800b1d8:	6a1a      	ldr	r2, [r3, #32]
 800b1da:	2a00      	cmp	r2, #0
 800b1dc:	d1f5      	bne.n	800b1ca <rclc_executor_spin_some.part.0+0x2ba>
 800b1de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d0d1      	beq.n	800b18a <rclc_executor_spin_some.part.0+0x27a>
 800b1e6:	e7f0      	b.n	800b1ca <rclc_executor_spin_some.part.0+0x2ba>
 800b1e8:	6843      	ldr	r3, [r0, #4]
 800b1ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b1ec:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800b1f0:	d1eb      	bne.n	800b1ca <rclc_executor_spin_some.part.0+0x2ba>
 800b1f2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b1f6:	2a00      	cmp	r2, #0
 800b1f8:	d1e7      	bne.n	800b1ca <rclc_executor_spin_some.part.0+0x2ba>
 800b1fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d0c3      	beq.n	800b18a <rclc_executor_spin_some.part.0+0x27a>
 800b202:	e7e2      	b.n	800b1ca <rclc_executor_spin_some.part.0+0x2ba>
 800b204:	270b      	movs	r7, #11
 800b206:	e77d      	b.n	800b104 <rclc_executor_spin_some.part.0+0x1f4>
 800b208:	686a      	ldr	r2, [r5, #4]
 800b20a:	e6e2      	b.n	800afd2 <rclc_executor_spin_some.part.0+0xc2>
 800b20c:	686a      	ldr	r2, [r5, #4]
 800b20e:	e7a2      	b.n	800b156 <rclc_executor_spin_some.part.0+0x246>
 800b210:	6842      	ldr	r2, [r0, #4]
 800b212:	6a11      	ldr	r1, [r2, #32]
 800b214:	2900      	cmp	r1, #0
 800b216:	f47f af21 	bne.w	800b05c <rclc_executor_spin_some.part.0+0x14c>
 800b21a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800b21e:	2a00      	cmp	r2, #0
 800b220:	f43f af0a 	beq.w	800b038 <rclc_executor_spin_some.part.0+0x128>
 800b224:	e71a      	b.n	800b05c <rclc_executor_spin_some.part.0+0x14c>
 800b226:	6842      	ldr	r2, [r0, #4]
 800b228:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800b22a:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800b22e:	f47f af15 	bne.w	800b05c <rclc_executor_spin_some.part.0+0x14c>
 800b232:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800b236:	2900      	cmp	r1, #0
 800b238:	f47f af10 	bne.w	800b05c <rclc_executor_spin_some.part.0+0x14c>
 800b23c:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800b240:	2a00      	cmp	r2, #0
 800b242:	f43f aef9 	beq.w	800b038 <rclc_executor_spin_some.part.0+0x128>
 800b246:	e709      	b.n	800b05c <rclc_executor_spin_some.part.0+0x14c>
 800b248:	686a      	ldr	r2, [r5, #4]
 800b24a:	461c      	mov	r4, r3
 800b24c:	e783      	b.n	800b156 <rclc_executor_spin_some.part.0+0x246>
 800b24e:	686a      	ldr	r2, [r5, #4]
 800b250:	461c      	mov	r4, r3
 800b252:	e6be      	b.n	800afd2 <rclc_executor_spin_some.part.0+0xc2>

0800b254 <rclc_executor_spin_some>:
 800b254:	b190      	cbz	r0, 800b27c <rclc_executor_spin_some+0x28>
 800b256:	b570      	push	{r4, r5, r6, lr}
 800b258:	4604      	mov	r4, r0
 800b25a:	6800      	ldr	r0, [r0, #0]
 800b25c:	4616      	mov	r6, r2
 800b25e:	461d      	mov	r5, r3
 800b260:	f004 fd32 	bl	800fcc8 <rcl_context_is_valid>
 800b264:	b130      	cbz	r0, 800b274 <rclc_executor_spin_some+0x20>
 800b266:	4632      	mov	r2, r6
 800b268:	462b      	mov	r3, r5
 800b26a:	4620      	mov	r0, r4
 800b26c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b270:	f7ff be4e 	b.w	800af10 <rclc_executor_spin_some.part.0>
 800b274:	f000 f94c 	bl	800b510 <rcutils_reset_error>
 800b278:	2001      	movs	r0, #1
 800b27a:	bd70      	pop	{r4, r5, r6, pc}
 800b27c:	200b      	movs	r0, #11
 800b27e:	4770      	bx	lr

0800b280 <rclc_executor_handle_counters_zero_init>:
 800b280:	b130      	cbz	r0, 800b290 <rclc_executor_handle_counters_zero_init+0x10>
 800b282:	b508      	push	{r3, lr}
 800b284:	2220      	movs	r2, #32
 800b286:	2100      	movs	r1, #0
 800b288:	f00b fd54 	bl	8016d34 <memset>
 800b28c:	2000      	movs	r0, #0
 800b28e:	bd08      	pop	{r3, pc}
 800b290:	200b      	movs	r0, #11
 800b292:	4770      	bx	lr
 800b294:	0000      	movs	r0, r0
	...

0800b298 <rclc_executor_handle_init>:
 800b298:	b168      	cbz	r0, 800b2b6 <rclc_executor_handle_init+0x1e>
 800b29a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b2c0 <rclc_executor_handle_init+0x28>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	220b      	movs	r2, #11
 800b2a2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b2a6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b2aa:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b2ae:	8002      	strh	r2, [r0, #0]
 800b2b0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	4770      	bx	lr
 800b2b6:	200b      	movs	r0, #11
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	f3af 8000 	nop.w
	...

0800b2c8 <rclc_support_init>:
 800b2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2cc:	b086      	sub	sp, #24
 800b2ce:	b3b8      	cbz	r0, 800b340 <rclc_support_init+0x78>
 800b2d0:	461c      	mov	r4, r3
 800b2d2:	b3ab      	cbz	r3, 800b340 <rclc_support_init+0x78>
 800b2d4:	460f      	mov	r7, r1
 800b2d6:	4690      	mov	r8, r2
 800b2d8:	4606      	mov	r6, r0
 800b2da:	f004 fe49 	bl	800ff70 <rcl_get_zero_initialized_init_options>
 800b2de:	f104 030c 	add.w	r3, r4, #12
 800b2e2:	9005      	str	r0, [sp, #20]
 800b2e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b2e8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b2ec:	a805      	add	r0, sp, #20
 800b2ee:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b2f2:	f004 fe3f 	bl	800ff74 <rcl_init_options_init>
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	b9e0      	cbnz	r0, 800b334 <rclc_support_init+0x6c>
 800b2fa:	ad02      	add	r5, sp, #8
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f004 fcd9 	bl	800fcb4 <rcl_get_zero_initialized_context>
 800b302:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b306:	4633      	mov	r3, r6
 800b308:	e886 0003 	stmia.w	r6, {r0, r1}
 800b30c:	aa05      	add	r2, sp, #20
 800b30e:	4641      	mov	r1, r8
 800b310:	4638      	mov	r0, r7
 800b312:	f004 fd3f 	bl	800fd94 <rcl_init>
 800b316:	4605      	mov	r5, r0
 800b318:	b9b8      	cbnz	r0, 800b34a <rclc_support_init+0x82>
 800b31a:	60b4      	str	r4, [r6, #8]
 800b31c:	4622      	mov	r2, r4
 800b31e:	f106 010c 	add.w	r1, r6, #12
 800b322:	2003      	movs	r0, #3
 800b324:	f005 fa78 	bl	8010818 <rcl_clock_init>
 800b328:	4605      	mov	r5, r0
 800b32a:	b970      	cbnz	r0, 800b34a <rclc_support_init+0x82>
 800b32c:	a805      	add	r0, sp, #20
 800b32e:	f004 fe87 	bl	8010040 <rcl_init_options_fini>
 800b332:	b108      	cbz	r0, 800b338 <rclc_support_init+0x70>
 800b334:	f000 f8ec 	bl	800b510 <rcutils_reset_error>
 800b338:	4628      	mov	r0, r5
 800b33a:	b006      	add	sp, #24
 800b33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b340:	250b      	movs	r5, #11
 800b342:	4628      	mov	r0, r5
 800b344:	b006      	add	sp, #24
 800b346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b34a:	f000 f8e1 	bl	800b510 <rcutils_reset_error>
 800b34e:	a805      	add	r0, sp, #20
 800b350:	f004 fe76 	bl	8010040 <rcl_init_options_fini>
 800b354:	2800      	cmp	r0, #0
 800b356:	d0ef      	beq.n	800b338 <rclc_support_init+0x70>
 800b358:	e7ec      	b.n	800b334 <rclc_support_init+0x6c>
 800b35a:	bf00      	nop

0800b35c <rclc_node_init_default>:
 800b35c:	b3b8      	cbz	r0, 800b3ce <rclc_node_init_default+0x72>
 800b35e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b362:	460d      	mov	r5, r1
 800b364:	b0a1      	sub	sp, #132	@ 0x84
 800b366:	b329      	cbz	r1, 800b3b4 <rclc_node_init_default+0x58>
 800b368:	4616      	mov	r6, r2
 800b36a:	b31a      	cbz	r2, 800b3b4 <rclc_node_init_default+0x58>
 800b36c:	461f      	mov	r7, r3
 800b36e:	b30b      	cbz	r3, 800b3b4 <rclc_node_init_default+0x58>
 800b370:	f10d 0810 	add.w	r8, sp, #16
 800b374:	4604      	mov	r4, r0
 800b376:	4640      	mov	r0, r8
 800b378:	f004 ff1a 	bl	80101b0 <rcl_get_zero_initialized_node>
 800b37c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b380:	f10d 0918 	add.w	r9, sp, #24
 800b384:	e884 0003 	stmia.w	r4, {r0, r1}
 800b388:	4648      	mov	r0, r9
 800b38a:	f005 f889 	bl	80104a0 <rcl_node_get_default_options>
 800b38e:	4640      	mov	r0, r8
 800b390:	f004 ff0e 	bl	80101b0 <rcl_get_zero_initialized_node>
 800b394:	f8cd 9000 	str.w	r9, [sp]
 800b398:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b39c:	463b      	mov	r3, r7
 800b39e:	e884 0003 	stmia.w	r4, {r0, r1}
 800b3a2:	4632      	mov	r2, r6
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f004 ff0c 	bl	80101c4 <rcl_node_init>
 800b3ac:	b930      	cbnz	r0, 800b3bc <rclc_node_init_default+0x60>
 800b3ae:	b021      	add	sp, #132	@ 0x84
 800b3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3b4:	200b      	movs	r0, #11
 800b3b6:	b021      	add	sp, #132	@ 0x84
 800b3b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3bc:	9003      	str	r0, [sp, #12]
 800b3be:	f000 f8a7 	bl	800b510 <rcutils_reset_error>
 800b3c2:	f000 f8a5 	bl	800b510 <rcutils_reset_error>
 800b3c6:	9803      	ldr	r0, [sp, #12]
 800b3c8:	b021      	add	sp, #132	@ 0x84
 800b3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3ce:	200b      	movs	r0, #11
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop

0800b3d4 <rclc_publisher_init_default>:
 800b3d4:	b368      	cbz	r0, 800b432 <rclc_publisher_init_default+0x5e>
 800b3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3da:	460d      	mov	r5, r1
 800b3dc:	b0a0      	sub	sp, #128	@ 0x80
 800b3de:	b321      	cbz	r1, 800b42a <rclc_publisher_init_default+0x56>
 800b3e0:	4616      	mov	r6, r2
 800b3e2:	b312      	cbz	r2, 800b42a <rclc_publisher_init_default+0x56>
 800b3e4:	461f      	mov	r7, r3
 800b3e6:	b303      	cbz	r3, 800b42a <rclc_publisher_init_default+0x56>
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	f7ff f855 	bl	800a498 <rcl_get_zero_initialized_publisher>
 800b3ee:	f10d 0810 	add.w	r8, sp, #16
 800b3f2:	6020      	str	r0, [r4, #0]
 800b3f4:	4640      	mov	r0, r8
 800b3f6:	f7ff f8eb 	bl	800a5d0 <rcl_publisher_get_default_options>
 800b3fa:	490f      	ldr	r1, [pc, #60]	@ (800b438 <rclc_publisher_init_default+0x64>)
 800b3fc:	2250      	movs	r2, #80	@ 0x50
 800b3fe:	4640      	mov	r0, r8
 800b400:	f00b fd61 	bl	8016ec6 <memcpy>
 800b404:	f8cd 8000 	str.w	r8, [sp]
 800b408:	463b      	mov	r3, r7
 800b40a:	4632      	mov	r2, r6
 800b40c:	4629      	mov	r1, r5
 800b40e:	4620      	mov	r0, r4
 800b410:	f7ff f848 	bl	800a4a4 <rcl_publisher_init>
 800b414:	b910      	cbnz	r0, 800b41c <rclc_publisher_init_default+0x48>
 800b416:	b020      	add	sp, #128	@ 0x80
 800b418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b41c:	9003      	str	r0, [sp, #12]
 800b41e:	f000 f877 	bl	800b510 <rcutils_reset_error>
 800b422:	9803      	ldr	r0, [sp, #12]
 800b424:	b020      	add	sp, #128	@ 0x80
 800b426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b42a:	200b      	movs	r0, #11
 800b42c:	b020      	add	sp, #128	@ 0x80
 800b42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b432:	200b      	movs	r0, #11
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	08017e00 	.word	0x08017e00

0800b43c <rclc_timer_init_default>:
 800b43c:	b360      	cbz	r0, 800b498 <rclc_timer_init_default+0x5c>
 800b43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b442:	460e      	mov	r6, r1
 800b444:	b08a      	sub	sp, #40	@ 0x28
 800b446:	b319      	cbz	r1, 800b490 <rclc_timer_init_default+0x54>
 800b448:	4690      	mov	r8, r2
 800b44a:	461f      	mov	r7, r3
 800b44c:	4605      	mov	r5, r0
 800b44e:	f005 fbc1 	bl	8010bd4 <rcl_get_zero_initialized_timer>
 800b452:	68b4      	ldr	r4, [r6, #8]
 800b454:	6028      	str	r0, [r5, #0]
 800b456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b458:	f10d 0c0c 	add.w	ip, sp, #12
 800b45c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	f8cc 3000 	str.w	r3, [ip]
 800b466:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b468:	9302      	str	r3, [sp, #8]
 800b46a:	e9cd 8700 	strd	r8, r7, [sp]
 800b46e:	4628      	mov	r0, r5
 800b470:	4632      	mov	r2, r6
 800b472:	f106 010c 	add.w	r1, r6, #12
 800b476:	f005 fbb3 	bl	8010be0 <rcl_timer_init>
 800b47a:	b910      	cbnz	r0, 800b482 <rclc_timer_init_default+0x46>
 800b47c:	b00a      	add	sp, #40	@ 0x28
 800b47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b482:	9009      	str	r0, [sp, #36]	@ 0x24
 800b484:	f000 f844 	bl	800b510 <rcutils_reset_error>
 800b488:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b48a:	b00a      	add	sp, #40	@ 0x28
 800b48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b490:	200b      	movs	r0, #11
 800b492:	b00a      	add	sp, #40	@ 0x28
 800b494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b498:	200b      	movs	r0, #11
 800b49a:	4770      	bx	lr

0800b49c <__default_zero_allocate>:
 800b49c:	f00b b872 	b.w	8016584 <calloc>

0800b4a0 <__default_reallocate>:
 800b4a0:	f00b b9fe 	b.w	80168a0 <realloc>

0800b4a4 <__default_deallocate>:
 800b4a4:	f00b b8da 	b.w	801665c <free>

0800b4a8 <__default_allocate>:
 800b4a8:	f00b b8d0 	b.w	801664c <malloc>

0800b4ac <rcutils_get_default_allocator>:
 800b4ac:	b510      	push	{r4, lr}
 800b4ae:	4c05      	ldr	r4, [pc, #20]	@ (800b4c4 <rcutils_get_default_allocator+0x18>)
 800b4b0:	4686      	mov	lr, r0
 800b4b2:	4684      	mov	ip, r0
 800b4b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	f8cc 3000 	str.w	r3, [ip]
 800b4c0:	4670      	mov	r0, lr
 800b4c2:	bd10      	pop	{r4, pc}
 800b4c4:	20000014 	.word	0x20000014

0800b4c8 <rcutils_allocator_is_valid>:
 800b4c8:	b158      	cbz	r0, 800b4e2 <rcutils_allocator_is_valid+0x1a>
 800b4ca:	6803      	ldr	r3, [r0, #0]
 800b4cc:	b143      	cbz	r3, 800b4e0 <rcutils_allocator_is_valid+0x18>
 800b4ce:	6843      	ldr	r3, [r0, #4]
 800b4d0:	b133      	cbz	r3, 800b4e0 <rcutils_allocator_is_valid+0x18>
 800b4d2:	68c3      	ldr	r3, [r0, #12]
 800b4d4:	b123      	cbz	r3, 800b4e0 <rcutils_allocator_is_valid+0x18>
 800b4d6:	6880      	ldr	r0, [r0, #8]
 800b4d8:	3800      	subs	r0, #0
 800b4da:	bf18      	it	ne
 800b4dc:	2001      	movne	r0, #1
 800b4de:	4770      	bx	lr
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	4770      	bx	lr

0800b4e4 <rcutils_get_error_string>:
 800b4e4:	4b06      	ldr	r3, [pc, #24]	@ (800b500 <rcutils_get_error_string+0x1c>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	b13b      	cbz	r3, 800b4fa <rcutils_get_error_string+0x16>
 800b4ea:	4b06      	ldr	r3, [pc, #24]	@ (800b504 <rcutils_get_error_string+0x20>)
 800b4ec:	781a      	ldrb	r2, [r3, #0]
 800b4ee:	b90a      	cbnz	r2, 800b4f4 <rcutils_get_error_string+0x10>
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	701a      	strb	r2, [r3, #0]
 800b4f4:	4b04      	ldr	r3, [pc, #16]	@ (800b508 <rcutils_get_error_string+0x24>)
 800b4f6:	7818      	ldrb	r0, [r3, #0]
 800b4f8:	4770      	bx	lr
 800b4fa:	4b04      	ldr	r3, [pc, #16]	@ (800b50c <rcutils_get_error_string+0x28>)
 800b4fc:	7818      	ldrb	r0, [r3, #0]
 800b4fe:	4770      	bx	lr
 800b500:	20011530 	.word	0x20011530
 800b504:	20011549 	.word	0x20011549
 800b508:	20011548 	.word	0x20011548
 800b50c:	08017e50 	.word	0x08017e50

0800b510 <rcutils_reset_error>:
 800b510:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b530 <rcutils_reset_error+0x20>
 800b514:	4a08      	ldr	r2, [pc, #32]	@ (800b538 <rcutils_reset_error+0x28>)
 800b516:	4809      	ldr	r0, [pc, #36]	@ (800b53c <rcutils_reset_error+0x2c>)
 800b518:	4909      	ldr	r1, [pc, #36]	@ (800b540 <rcutils_reset_error+0x30>)
 800b51a:	2300      	movs	r3, #0
 800b51c:	8013      	strh	r3, [r2, #0]
 800b51e:	ed82 7b02 	vstr	d7, [r2, #8]
 800b522:	4a08      	ldr	r2, [pc, #32]	@ (800b544 <rcutils_reset_error+0x34>)
 800b524:	7003      	strb	r3, [r0, #0]
 800b526:	700b      	strb	r3, [r1, #0]
 800b528:	7013      	strb	r3, [r2, #0]
 800b52a:	4770      	bx	lr
 800b52c:	f3af 8000 	nop.w
	...
 800b538:	20011538 	.word	0x20011538
 800b53c:	20011549 	.word	0x20011549
 800b540:	20011548 	.word	0x20011548
 800b544:	20011530 	.word	0x20011530

0800b548 <rcutils_system_time_now>:
 800b548:	b308      	cbz	r0, 800b58e <rcutils_system_time_now+0x46>
 800b54a:	b570      	push	{r4, r5, r6, lr}
 800b54c:	b084      	sub	sp, #16
 800b54e:	4604      	mov	r4, r0
 800b550:	4669      	mov	r1, sp
 800b552:	2001      	movs	r0, #1
 800b554:	f7f5 fc6c 	bl	8000e30 <clock_gettime>
 800b558:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b55c:	2d00      	cmp	r5, #0
 800b55e:	db13      	blt.n	800b588 <rcutils_system_time_now+0x40>
 800b560:	9902      	ldr	r1, [sp, #8]
 800b562:	2900      	cmp	r1, #0
 800b564:	db0d      	blt.n	800b582 <rcutils_system_time_now+0x3a>
 800b566:	4e0b      	ldr	r6, [pc, #44]	@ (800b594 <rcutils_system_time_now+0x4c>)
 800b568:	fba3 3206 	umull	r3, r2, r3, r6
 800b56c:	185b      	adds	r3, r3, r1
 800b56e:	fb06 2205 	mla	r2, r6, r5, r2
 800b572:	f04f 0000 	mov.w	r0, #0
 800b576:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b57a:	e9c4 3200 	strd	r3, r2, [r4]
 800b57e:	b004      	add	sp, #16
 800b580:	bd70      	pop	{r4, r5, r6, pc}
 800b582:	ea53 0205 	orrs.w	r2, r3, r5
 800b586:	d1ee      	bne.n	800b566 <rcutils_system_time_now+0x1e>
 800b588:	2002      	movs	r0, #2
 800b58a:	b004      	add	sp, #16
 800b58c:	bd70      	pop	{r4, r5, r6, pc}
 800b58e:	200b      	movs	r0, #11
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	3b9aca00 	.word	0x3b9aca00

0800b598 <rcutils_steady_time_now>:
 800b598:	b308      	cbz	r0, 800b5de <rcutils_steady_time_now+0x46>
 800b59a:	b570      	push	{r4, r5, r6, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	4604      	mov	r4, r0
 800b5a0:	4669      	mov	r1, sp
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	f7f5 fc44 	bl	8000e30 <clock_gettime>
 800b5a8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b5ac:	2d00      	cmp	r5, #0
 800b5ae:	db13      	blt.n	800b5d8 <rcutils_steady_time_now+0x40>
 800b5b0:	9902      	ldr	r1, [sp, #8]
 800b5b2:	2900      	cmp	r1, #0
 800b5b4:	db0d      	blt.n	800b5d2 <rcutils_steady_time_now+0x3a>
 800b5b6:	4e0b      	ldr	r6, [pc, #44]	@ (800b5e4 <rcutils_steady_time_now+0x4c>)
 800b5b8:	fba3 3206 	umull	r3, r2, r3, r6
 800b5bc:	185b      	adds	r3, r3, r1
 800b5be:	fb06 2205 	mla	r2, r6, r5, r2
 800b5c2:	f04f 0000 	mov.w	r0, #0
 800b5c6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b5ca:	e9c4 3200 	strd	r3, r2, [r4]
 800b5ce:	b004      	add	sp, #16
 800b5d0:	bd70      	pop	{r4, r5, r6, pc}
 800b5d2:	ea53 0205 	orrs.w	r2, r3, r5
 800b5d6:	d1ee      	bne.n	800b5b6 <rcutils_steady_time_now+0x1e>
 800b5d8:	2002      	movs	r0, #2
 800b5da:	b004      	add	sp, #16
 800b5dc:	bd70      	pop	{r4, r5, r6, pc}
 800b5de:	200b      	movs	r0, #11
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	3b9aca00 	.word	0x3b9aca00

0800b5e8 <rmw_get_default_publisher_options>:
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	6002      	str	r2, [r0, #0]
 800b5ec:	7102      	strb	r2, [r0, #4]
 800b5ee:	4770      	bx	lr

0800b5f0 <rmw_uros_set_custom_transport>:
 800b5f0:	b470      	push	{r4, r5, r6}
 800b5f2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b5f6:	b162      	cbz	r2, 800b612 <rmw_uros_set_custom_transport+0x22>
 800b5f8:	b15b      	cbz	r3, 800b612 <rmw_uros_set_custom_transport+0x22>
 800b5fa:	b155      	cbz	r5, 800b612 <rmw_uros_set_custom_transport+0x22>
 800b5fc:	b14e      	cbz	r6, 800b612 <rmw_uros_set_custom_transport+0x22>
 800b5fe:	4c06      	ldr	r4, [pc, #24]	@ (800b618 <rmw_uros_set_custom_transport+0x28>)
 800b600:	7020      	strb	r0, [r4, #0]
 800b602:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b606:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b60a:	6166      	str	r6, [r4, #20]
 800b60c:	2000      	movs	r0, #0
 800b60e:	bc70      	pop	{r4, r5, r6}
 800b610:	4770      	bx	lr
 800b612:	200b      	movs	r0, #11
 800b614:	bc70      	pop	{r4, r5, r6}
 800b616:	4770      	bx	lr
 800b618:	2001154c 	.word	0x2001154c

0800b61c <flush_session>:
 800b61c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800b61e:	f002 bc1f 	b.w	800de60 <uxr_run_session_until_confirm_delivery>
 800b622:	bf00      	nop

0800b624 <rmw_publish>:
 800b624:	2800      	cmp	r0, #0
 800b626:	d053      	beq.n	800b6d0 <rmw_publish+0xac>
 800b628:	b570      	push	{r4, r5, r6, lr}
 800b62a:	460d      	mov	r5, r1
 800b62c:	b08e      	sub	sp, #56	@ 0x38
 800b62e:	2900      	cmp	r1, #0
 800b630:	d04b      	beq.n	800b6ca <rmw_publish+0xa6>
 800b632:	4604      	mov	r4, r0
 800b634:	6800      	ldr	r0, [r0, #0]
 800b636:	f000 fced 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	d045      	beq.n	800b6ca <rmw_publish+0xa6>
 800b63e:	6866      	ldr	r6, [r4, #4]
 800b640:	2e00      	cmp	r6, #0
 800b642:	d042      	beq.n	800b6ca <rmw_publish+0xa6>
 800b644:	69b4      	ldr	r4, [r6, #24]
 800b646:	4628      	mov	r0, r5
 800b648:	6923      	ldr	r3, [r4, #16]
 800b64a:	4798      	blx	r3
 800b64c:	69f3      	ldr	r3, [r6, #28]
 800b64e:	9005      	str	r0, [sp, #20]
 800b650:	b113      	cbz	r3, 800b658 <rmw_publish+0x34>
 800b652:	a805      	add	r0, sp, #20
 800b654:	4798      	blx	r3
 800b656:	9805      	ldr	r0, [sp, #20]
 800b658:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	9000      	str	r0, [sp, #0]
 800b660:	6972      	ldr	r2, [r6, #20]
 800b662:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b664:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b668:	ab06      	add	r3, sp, #24
 800b66a:	f003 f9e5 	bl	800ea38 <uxr_prepare_output_stream>
 800b66e:	b1d8      	cbz	r0, 800b6a8 <rmw_publish+0x84>
 800b670:	68a3      	ldr	r3, [r4, #8]
 800b672:	a906      	add	r1, sp, #24
 800b674:	4628      	mov	r0, r5
 800b676:	4798      	blx	r3
 800b678:	6a33      	ldr	r3, [r6, #32]
 800b67a:	4604      	mov	r4, r0
 800b67c:	b10b      	cbz	r3, 800b682 <rmw_publish+0x5e>
 800b67e:	a806      	add	r0, sp, #24
 800b680:	4798      	blx	r3
 800b682:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800b686:	2b01      	cmp	r3, #1
 800b688:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b68c:	d022      	beq.n	800b6d4 <rmw_publish+0xb0>
 800b68e:	6918      	ldr	r0, [r3, #16]
 800b690:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800b692:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b696:	f002 fbe3 	bl	800de60 <uxr_run_session_until_confirm_delivery>
 800b69a:	4020      	ands	r0, r4
 800b69c:	b2c4      	uxtb	r4, r0
 800b69e:	f084 0001 	eor.w	r0, r4, #1
 800b6a2:	b2c0      	uxtb	r0, r0
 800b6a4:	b00e      	add	sp, #56	@ 0x38
 800b6a6:	bd70      	pop	{r4, r5, r6, pc}
 800b6a8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b6ac:	6918      	ldr	r0, [r3, #16]
 800b6ae:	9b05      	ldr	r3, [sp, #20]
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b6e0 <rmw_publish+0xbc>)
 800b6b4:	9301      	str	r3, [sp, #4]
 800b6b6:	9602      	str	r6, [sp, #8]
 800b6b8:	6972      	ldr	r2, [r6, #20]
 800b6ba:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b6bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b6c0:	ab06      	add	r3, sp, #24
 800b6c2:	f003 f9e9 	bl	800ea98 <uxr_prepare_output_stream_fragmented>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d1d2      	bne.n	800b670 <rmw_publish+0x4c>
 800b6ca:	2001      	movs	r0, #1
 800b6cc:	b00e      	add	sp, #56	@ 0x38
 800b6ce:	bd70      	pop	{r4, r5, r6, pc}
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	4770      	bx	lr
 800b6d4:	6918      	ldr	r0, [r3, #16]
 800b6d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b6da:	f002 f801 	bl	800d6e0 <uxr_flash_output_streams>
 800b6de:	e7de      	b.n	800b69e <rmw_publish+0x7a>
 800b6e0:	0800b61d 	.word	0x0800b61d

0800b6e4 <rmw_create_publisher>:
 800b6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e8:	b087      	sub	sp, #28
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	f000 80cc 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b6f0:	460e      	mov	r6, r1
 800b6f2:	2900      	cmp	r1, #0
 800b6f4:	f000 80c8 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	6800      	ldr	r0, [r0, #0]
 800b6fc:	4615      	mov	r5, r2
 800b6fe:	4698      	mov	r8, r3
 800b700:	f000 fc88 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 800b704:	2800      	cmp	r0, #0
 800b706:	f000 80bf 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b70a:	2d00      	cmp	r5, #0
 800b70c:	f000 80bc 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b710:	782b      	ldrb	r3, [r5, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	f000 80b8 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b718:	f1b8 0f00 	cmp.w	r8, #0
 800b71c:	f000 80b4 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b720:	485c      	ldr	r0, [pc, #368]	@ (800b894 <rmw_create_publisher+0x1b0>)
 800b722:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b726:	f007 fc8f 	bl	8013048 <get_memory>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	f000 80ac 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b730:	6884      	ldr	r4, [r0, #8]
 800b732:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800b736:	f007 fcef 	bl	8013118 <rmw_get_implementation_identifier>
 800b73a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800b73e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800b742:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800b746:	4628      	mov	r0, r5
 800b748:	f7f4 fd4c 	bl	80001e4 <strlen>
 800b74c:	3001      	adds	r0, #1
 800b74e:	283c      	cmp	r0, #60	@ 0x3c
 800b750:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800b754:	f200 8091 	bhi.w	800b87a <rmw_create_publisher+0x196>
 800b758:	4a4f      	ldr	r2, [pc, #316]	@ (800b898 <rmw_create_publisher+0x1b4>)
 800b75a:	462b      	mov	r3, r5
 800b75c:	213c      	movs	r1, #60	@ 0x3c
 800b75e:	4650      	mov	r0, sl
 800b760:	f00b fa0e 	bl	8016b80 <sniprintf>
 800b764:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b768:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800b76a:	4641      	mov	r1, r8
 800b76c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800b770:	2250      	movs	r2, #80	@ 0x50
 800b772:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800b776:	f00b fba6 	bl	8016ec6 <memcpy>
 800b77a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800b77e:	4947      	ldr	r1, [pc, #284]	@ (800b89c <rmw_create_publisher+0x1b8>)
 800b780:	2b02      	cmp	r3, #2
 800b782:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b786:	bf0c      	ite	eq
 800b788:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800b78c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800b790:	67a3      	str	r3, [r4, #120]	@ 0x78
 800b792:	2300      	movs	r3, #0
 800b794:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b798:	4630      	mov	r0, r6
 800b79a:	f000 fc49 	bl	800c030 <get_message_typesupport_handle>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d06b      	beq.n	800b87a <rmw_create_publisher+0x196>
 800b7a2:	6842      	ldr	r2, [r0, #4]
 800b7a4:	61a2      	str	r2, [r4, #24]
 800b7a6:	2a00      	cmp	r2, #0
 800b7a8:	d067      	beq.n	800b87a <rmw_create_publisher+0x196>
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	4643      	mov	r3, r8
 800b7ae:	4648      	mov	r0, r9
 800b7b0:	f007 ff42 	bl	8013638 <create_topic>
 800b7b4:	6260      	str	r0, [r4, #36]	@ 0x24
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d063      	beq.n	800b882 <rmw_create_publisher+0x19e>
 800b7ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7c2:	2103      	movs	r1, #3
 800b7c4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800b7c8:	1c42      	adds	r2, r0, #1
 800b7ca:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800b7ce:	f001 fe37 	bl	800d440 <uxr_object_id>
 800b7d2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800b7d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7da:	6120      	str	r0, [r4, #16]
 800b7dc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800b7e0:	6910      	ldr	r0, [r2, #16]
 800b7e2:	2506      	movs	r5, #6
 800b7e4:	9500      	str	r5, [sp, #0]
 800b7e6:	6819      	ldr	r1, [r3, #0]
 800b7e8:	6922      	ldr	r2, [r4, #16]
 800b7ea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b7ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b7f2:	f001 fd7f 	bl	800d2f4 <uxr_buffer_create_publisher_bin>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b7fc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b800:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b804:	f000 fb86 	bl	800bf14 <run_xrce_session>
 800b808:	b3b8      	cbz	r0, 800b87a <rmw_create_publisher+0x196>
 800b80a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b80e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b812:	2105      	movs	r1, #5
 800b814:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800b818:	1c42      	adds	r2, r0, #1
 800b81a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800b81e:	f001 fe0f 	bl	800d440 <uxr_object_id>
 800b822:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b826:	6160      	str	r0, [r4, #20]
 800b828:	691e      	ldr	r6, [r3, #16]
 800b82a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b82e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800b832:	f10d 0a10 	add.w	sl, sp, #16
 800b836:	4641      	mov	r1, r8
 800b838:	4650      	mov	r0, sl
 800b83a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800b83e:	f000 fb85 	bl	800bf4c <convert_qos_profile>
 800b842:	9503      	str	r5, [sp, #12]
 800b844:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b848:	9001      	str	r0, [sp, #4]
 800b84a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b84e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800b858:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b85c:	f8d8 1000 	ldr.w	r1, [r8]
 800b860:	4630      	mov	r0, r6
 800b862:	f001 fd77 	bl	800d354 <uxr_buffer_create_datawriter_bin>
 800b866:	4602      	mov	r2, r0
 800b868:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b86c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b870:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b874:	f000 fb4e 	bl	800bf14 <run_xrce_session>
 800b878:	b938      	cbnz	r0, 800b88a <rmw_create_publisher+0x1a6>
 800b87a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b87c:	b108      	cbz	r0, 800b882 <rmw_create_publisher+0x19e>
 800b87e:	f000 fa47 	bl	800bd10 <rmw_uxrce_fini_topic_memory>
 800b882:	4638      	mov	r0, r7
 800b884:	f000 f9ec 	bl	800bc60 <rmw_uxrce_fini_publisher_memory>
 800b888:	2700      	movs	r7, #0
 800b88a:	4638      	mov	r0, r7
 800b88c:	b007      	add	sp, #28
 800b88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b892:	bf00      	nop
 800b894:	20015e44 	.word	0x20015e44
 800b898:	08017e88 	.word	0x08017e88
 800b89c:	08017e54 	.word	0x08017e54

0800b8a0 <rmw_publisher_get_actual_qos>:
 800b8a0:	b150      	cbz	r0, 800b8b8 <rmw_publisher_get_actual_qos+0x18>
 800b8a2:	b508      	push	{r3, lr}
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	b149      	cbz	r1, 800b8bc <rmw_publisher_get_actual_qos+0x1c>
 800b8a8:	6841      	ldr	r1, [r0, #4]
 800b8aa:	2250      	movs	r2, #80	@ 0x50
 800b8ac:	3128      	adds	r1, #40	@ 0x28
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f00b fb09 	bl	8016ec6 <memcpy>
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	bd08      	pop	{r3, pc}
 800b8b8:	200b      	movs	r0, #11
 800b8ba:	4770      	bx	lr
 800b8bc:	200b      	movs	r0, #11
 800b8be:	bd08      	pop	{r3, pc}

0800b8c0 <rmw_destroy_publisher>:
 800b8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c2:	b128      	cbz	r0, 800b8d0 <rmw_destroy_publisher+0x10>
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	6800      	ldr	r0, [r0, #0]
 800b8c8:	460d      	mov	r5, r1
 800b8ca:	f000 fba3 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 800b8ce:	b910      	cbnz	r0, 800b8d6 <rmw_destroy_publisher+0x16>
 800b8d0:	2401      	movs	r4, #1
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d6:	6863      	ldr	r3, [r4, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d0f9      	beq.n	800b8d0 <rmw_destroy_publisher+0x10>
 800b8dc:	2d00      	cmp	r5, #0
 800b8de:	d0f7      	beq.n	800b8d0 <rmw_destroy_publisher+0x10>
 800b8e0:	6828      	ldr	r0, [r5, #0]
 800b8e2:	f000 fb97 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d0f2      	beq.n	800b8d0 <rmw_destroy_publisher+0x10>
 800b8ea:	686c      	ldr	r4, [r5, #4]
 800b8ec:	2c00      	cmp	r4, #0
 800b8ee:	d0ef      	beq.n	800b8d0 <rmw_destroy_publisher+0x10>
 800b8f0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b8f2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800b8f6:	f007 feef 	bl	80136d8 <destroy_topic>
 800b8fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b8fe:	6962      	ldr	r2, [r4, #20]
 800b900:	6918      	ldr	r0, [r3, #16]
 800b902:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b906:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b90a:	6819      	ldr	r1, [r3, #0]
 800b90c:	f001 fc3e 	bl	800d18c <uxr_buffer_delete_entity>
 800b910:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b914:	6922      	ldr	r2, [r4, #16]
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800b91c:	4604      	mov	r4, r0
 800b91e:	6809      	ldr	r1, [r1, #0]
 800b920:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b924:	f001 fc32 	bl	800d18c <uxr_buffer_delete_entity>
 800b928:	693e      	ldr	r6, [r7, #16]
 800b92a:	4622      	mov	r2, r4
 800b92c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b930:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b934:	4604      	mov	r4, r0
 800b936:	4630      	mov	r0, r6
 800b938:	f000 faec 	bl	800bf14 <run_xrce_session>
 800b93c:	693e      	ldr	r6, [r7, #16]
 800b93e:	4622      	mov	r2, r4
 800b940:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b944:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b948:	4604      	mov	r4, r0
 800b94a:	4630      	mov	r0, r6
 800b94c:	f000 fae2 	bl	800bf14 <run_xrce_session>
 800b950:	b12c      	cbz	r4, 800b95e <rmw_destroy_publisher+0x9e>
 800b952:	b120      	cbz	r0, 800b95e <rmw_destroy_publisher+0x9e>
 800b954:	2400      	movs	r4, #0
 800b956:	4628      	mov	r0, r5
 800b958:	f000 f982 	bl	800bc60 <rmw_uxrce_fini_publisher_memory>
 800b95c:	e7b9      	b.n	800b8d2 <rmw_destroy_publisher+0x12>
 800b95e:	2402      	movs	r4, #2
 800b960:	e7f9      	b.n	800b956 <rmw_destroy_publisher+0x96>
 800b962:	bf00      	nop

0800b964 <rmw_uxrce_init_service_memory>:
 800b964:	b1e2      	cbz	r2, 800b9a0 <rmw_uxrce_init_service_memory+0x3c>
 800b966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96a:	7b05      	ldrb	r5, [r0, #12]
 800b96c:	4606      	mov	r6, r0
 800b96e:	b9ad      	cbnz	r5, 800b99c <rmw_uxrce_init_service_memory+0x38>
 800b970:	23c8      	movs	r3, #200	@ 0xc8
 800b972:	e9c0 5500 	strd	r5, r5, [r0]
 800b976:	6083      	str	r3, [r0, #8]
 800b978:	f240 1301 	movw	r3, #257	@ 0x101
 800b97c:	4617      	mov	r7, r2
 800b97e:	8183      	strh	r3, [r0, #12]
 800b980:	460c      	mov	r4, r1
 800b982:	46a8      	mov	r8, r5
 800b984:	4621      	mov	r1, r4
 800b986:	4630      	mov	r0, r6
 800b988:	3501      	adds	r5, #1
 800b98a:	f007 fb6d 	bl	8013068 <put_memory>
 800b98e:	42af      	cmp	r7, r5
 800b990:	60a4      	str	r4, [r4, #8]
 800b992:	f884 800c 	strb.w	r8, [r4, #12]
 800b996:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b99a:	d1f3      	bne.n	800b984 <rmw_uxrce_init_service_memory+0x20>
 800b99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop

0800b9a4 <rmw_uxrce_init_client_memory>:
 800b9a4:	b1e2      	cbz	r2, 800b9e0 <rmw_uxrce_init_client_memory+0x3c>
 800b9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9aa:	7b05      	ldrb	r5, [r0, #12]
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	b9ad      	cbnz	r5, 800b9dc <rmw_uxrce_init_client_memory+0x38>
 800b9b0:	23c8      	movs	r3, #200	@ 0xc8
 800b9b2:	e9c0 5500 	strd	r5, r5, [r0]
 800b9b6:	6083      	str	r3, [r0, #8]
 800b9b8:	f240 1301 	movw	r3, #257	@ 0x101
 800b9bc:	4617      	mov	r7, r2
 800b9be:	8183      	strh	r3, [r0, #12]
 800b9c0:	460c      	mov	r4, r1
 800b9c2:	46a8      	mov	r8, r5
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	3501      	adds	r5, #1
 800b9ca:	f007 fb4d 	bl	8013068 <put_memory>
 800b9ce:	42af      	cmp	r7, r5
 800b9d0:	60a4      	str	r4, [r4, #8]
 800b9d2:	f884 800c 	strb.w	r8, [r4, #12]
 800b9d6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b9da:	d1f3      	bne.n	800b9c4 <rmw_uxrce_init_client_memory+0x20>
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop

0800b9e4 <rmw_uxrce_init_publisher_memory>:
 800b9e4:	b1e2      	cbz	r2, 800ba20 <rmw_uxrce_init_publisher_memory+0x3c>
 800b9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ea:	7b05      	ldrb	r5, [r0, #12]
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	b9ad      	cbnz	r5, 800ba1c <rmw_uxrce_init_publisher_memory+0x38>
 800b9f0:	23d8      	movs	r3, #216	@ 0xd8
 800b9f2:	e9c0 5500 	strd	r5, r5, [r0]
 800b9f6:	6083      	str	r3, [r0, #8]
 800b9f8:	f240 1301 	movw	r3, #257	@ 0x101
 800b9fc:	4617      	mov	r7, r2
 800b9fe:	8183      	strh	r3, [r0, #12]
 800ba00:	460c      	mov	r4, r1
 800ba02:	46a8      	mov	r8, r5
 800ba04:	4621      	mov	r1, r4
 800ba06:	4630      	mov	r0, r6
 800ba08:	3501      	adds	r5, #1
 800ba0a:	f007 fb2d 	bl	8013068 <put_memory>
 800ba0e:	42af      	cmp	r7, r5
 800ba10:	60a4      	str	r4, [r4, #8]
 800ba12:	f884 800c 	strb.w	r8, [r4, #12]
 800ba16:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ba1a:	d1f3      	bne.n	800ba04 <rmw_uxrce_init_publisher_memory+0x20>
 800ba1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop

0800ba24 <rmw_uxrce_init_subscription_memory>:
 800ba24:	b1e2      	cbz	r2, 800ba60 <rmw_uxrce_init_subscription_memory+0x3c>
 800ba26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba2a:	7b05      	ldrb	r5, [r0, #12]
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	b9ad      	cbnz	r5, 800ba5c <rmw_uxrce_init_subscription_memory+0x38>
 800ba30:	23d8      	movs	r3, #216	@ 0xd8
 800ba32:	e9c0 5500 	strd	r5, r5, [r0]
 800ba36:	6083      	str	r3, [r0, #8]
 800ba38:	f240 1301 	movw	r3, #257	@ 0x101
 800ba3c:	4617      	mov	r7, r2
 800ba3e:	8183      	strh	r3, [r0, #12]
 800ba40:	460c      	mov	r4, r1
 800ba42:	46a8      	mov	r8, r5
 800ba44:	4621      	mov	r1, r4
 800ba46:	4630      	mov	r0, r6
 800ba48:	3501      	adds	r5, #1
 800ba4a:	f007 fb0d 	bl	8013068 <put_memory>
 800ba4e:	42af      	cmp	r7, r5
 800ba50:	60a4      	str	r4, [r4, #8]
 800ba52:	f884 800c 	strb.w	r8, [r4, #12]
 800ba56:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ba5a:	d1f3      	bne.n	800ba44 <rmw_uxrce_init_subscription_memory+0x20>
 800ba5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop

0800ba64 <rmw_uxrce_init_node_memory>:
 800ba64:	b1e2      	cbz	r2, 800baa0 <rmw_uxrce_init_node_memory+0x3c>
 800ba66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6a:	7b05      	ldrb	r5, [r0, #12]
 800ba6c:	4606      	mov	r6, r0
 800ba6e:	b9ad      	cbnz	r5, 800ba9c <rmw_uxrce_init_node_memory+0x38>
 800ba70:	23a4      	movs	r3, #164	@ 0xa4
 800ba72:	e9c0 5500 	strd	r5, r5, [r0]
 800ba76:	6083      	str	r3, [r0, #8]
 800ba78:	f240 1301 	movw	r3, #257	@ 0x101
 800ba7c:	4617      	mov	r7, r2
 800ba7e:	8183      	strh	r3, [r0, #12]
 800ba80:	460c      	mov	r4, r1
 800ba82:	46a8      	mov	r8, r5
 800ba84:	4621      	mov	r1, r4
 800ba86:	4630      	mov	r0, r6
 800ba88:	3501      	adds	r5, #1
 800ba8a:	f007 faed 	bl	8013068 <put_memory>
 800ba8e:	42af      	cmp	r7, r5
 800ba90:	60a4      	str	r4, [r4, #8]
 800ba92:	f884 800c 	strb.w	r8, [r4, #12]
 800ba96:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ba9a:	d1f3      	bne.n	800ba84 <rmw_uxrce_init_node_memory+0x20>
 800ba9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop

0800baa4 <rmw_uxrce_init_session_memory>:
 800baa4:	b1ea      	cbz	r2, 800bae2 <rmw_uxrce_init_session_memory+0x3e>
 800baa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baaa:	7b05      	ldrb	r5, [r0, #12]
 800baac:	4606      	mov	r6, r0
 800baae:	b9b5      	cbnz	r5, 800bade <rmw_uxrce_init_session_memory+0x3a>
 800bab0:	e9c0 5500 	strd	r5, r5, [r0]
 800bab4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800bab8:	f240 1301 	movw	r3, #257	@ 0x101
 800babc:	4617      	mov	r7, r2
 800babe:	f8c0 8008 	str.w	r8, [r0, #8]
 800bac2:	460c      	mov	r4, r1
 800bac4:	8183      	strh	r3, [r0, #12]
 800bac6:	46a9      	mov	r9, r5
 800bac8:	4621      	mov	r1, r4
 800baca:	4630      	mov	r0, r6
 800bacc:	3501      	adds	r5, #1
 800bace:	f007 facb 	bl	8013068 <put_memory>
 800bad2:	42af      	cmp	r7, r5
 800bad4:	60a4      	str	r4, [r4, #8]
 800bad6:	f884 900c 	strb.w	r9, [r4, #12]
 800bada:	4444      	add	r4, r8
 800badc:	d1f4      	bne.n	800bac8 <rmw_uxrce_init_session_memory+0x24>
 800bade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bae2:	4770      	bx	lr

0800bae4 <rmw_uxrce_init_topic_memory>:
 800bae4:	b1e2      	cbz	r2, 800bb20 <rmw_uxrce_init_topic_memory+0x3c>
 800bae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baea:	7b05      	ldrb	r5, [r0, #12]
 800baec:	4606      	mov	r6, r0
 800baee:	b9ad      	cbnz	r5, 800bb1c <rmw_uxrce_init_topic_memory+0x38>
 800baf0:	231c      	movs	r3, #28
 800baf2:	e9c0 5500 	strd	r5, r5, [r0]
 800baf6:	6083      	str	r3, [r0, #8]
 800baf8:	f240 1301 	movw	r3, #257	@ 0x101
 800bafc:	4617      	mov	r7, r2
 800bafe:	8183      	strh	r3, [r0, #12]
 800bb00:	460c      	mov	r4, r1
 800bb02:	46a8      	mov	r8, r5
 800bb04:	4621      	mov	r1, r4
 800bb06:	4630      	mov	r0, r6
 800bb08:	3501      	adds	r5, #1
 800bb0a:	f007 faad 	bl	8013068 <put_memory>
 800bb0e:	42af      	cmp	r7, r5
 800bb10:	60a4      	str	r4, [r4, #8]
 800bb12:	f884 800c 	strb.w	r8, [r4, #12]
 800bb16:	f104 041c 	add.w	r4, r4, #28
 800bb1a:	d1f3      	bne.n	800bb04 <rmw_uxrce_init_topic_memory+0x20>
 800bb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop

0800bb24 <rmw_uxrce_init_static_input_buffer_memory>:
 800bb24:	b1ea      	cbz	r2, 800bb62 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800bb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb2a:	7b05      	ldrb	r5, [r0, #12]
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	b9b5      	cbnz	r5, 800bb5e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800bb30:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800bb34:	e9c0 5500 	strd	r5, r5, [r0]
 800bb38:	6083      	str	r3, [r0, #8]
 800bb3a:	f240 1301 	movw	r3, #257	@ 0x101
 800bb3e:	4617      	mov	r7, r2
 800bb40:	8183      	strh	r3, [r0, #12]
 800bb42:	460c      	mov	r4, r1
 800bb44:	46a8      	mov	r8, r5
 800bb46:	4621      	mov	r1, r4
 800bb48:	4630      	mov	r0, r6
 800bb4a:	3501      	adds	r5, #1
 800bb4c:	f007 fa8c 	bl	8013068 <put_memory>
 800bb50:	42af      	cmp	r7, r5
 800bb52:	60a4      	str	r4, [r4, #8]
 800bb54:	f884 800c 	strb.w	r8, [r4, #12]
 800bb58:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800bb5c:	d1f3      	bne.n	800bb46 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800bb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb62:	4770      	bx	lr

0800bb64 <rmw_uxrce_init_init_options_impl_memory>:
 800bb64:	b1e2      	cbz	r2, 800bba0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800bb66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6a:	7b05      	ldrb	r5, [r0, #12]
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	b9ad      	cbnz	r5, 800bb9c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800bb70:	232c      	movs	r3, #44	@ 0x2c
 800bb72:	e9c0 5500 	strd	r5, r5, [r0]
 800bb76:	6083      	str	r3, [r0, #8]
 800bb78:	f240 1301 	movw	r3, #257	@ 0x101
 800bb7c:	4617      	mov	r7, r2
 800bb7e:	8183      	strh	r3, [r0, #12]
 800bb80:	460c      	mov	r4, r1
 800bb82:	46a8      	mov	r8, r5
 800bb84:	4621      	mov	r1, r4
 800bb86:	4630      	mov	r0, r6
 800bb88:	3501      	adds	r5, #1
 800bb8a:	f007 fa6d 	bl	8013068 <put_memory>
 800bb8e:	42af      	cmp	r7, r5
 800bb90:	60a4      	str	r4, [r4, #8]
 800bb92:	f884 800c 	strb.w	r8, [r4, #12]
 800bb96:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800bb9a:	d1f3      	bne.n	800bb84 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800bb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop

0800bba4 <rmw_uxrce_init_wait_set_memory>:
 800bba4:	b1e2      	cbz	r2, 800bbe0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800bba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbaa:	7b05      	ldrb	r5, [r0, #12]
 800bbac:	4606      	mov	r6, r0
 800bbae:	b9ad      	cbnz	r5, 800bbdc <rmw_uxrce_init_wait_set_memory+0x38>
 800bbb0:	231c      	movs	r3, #28
 800bbb2:	e9c0 5500 	strd	r5, r5, [r0]
 800bbb6:	6083      	str	r3, [r0, #8]
 800bbb8:	f240 1301 	movw	r3, #257	@ 0x101
 800bbbc:	4617      	mov	r7, r2
 800bbbe:	8183      	strh	r3, [r0, #12]
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	46a8      	mov	r8, r5
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	3501      	adds	r5, #1
 800bbca:	f007 fa4d 	bl	8013068 <put_memory>
 800bbce:	42af      	cmp	r7, r5
 800bbd0:	60a4      	str	r4, [r4, #8]
 800bbd2:	f884 800c 	strb.w	r8, [r4, #12]
 800bbd6:	f104 041c 	add.w	r4, r4, #28
 800bbda:	d1f3      	bne.n	800bbc4 <rmw_uxrce_init_wait_set_memory+0x20>
 800bbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop

0800bbe4 <rmw_uxrce_init_guard_condition_memory>:
 800bbe4:	b1e2      	cbz	r2, 800bc20 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800bbe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbea:	7b05      	ldrb	r5, [r0, #12]
 800bbec:	4606      	mov	r6, r0
 800bbee:	b9ad      	cbnz	r5, 800bc1c <rmw_uxrce_init_guard_condition_memory+0x38>
 800bbf0:	2320      	movs	r3, #32
 800bbf2:	e9c0 5500 	strd	r5, r5, [r0]
 800bbf6:	6083      	str	r3, [r0, #8]
 800bbf8:	f240 1301 	movw	r3, #257	@ 0x101
 800bbfc:	4617      	mov	r7, r2
 800bbfe:	8183      	strh	r3, [r0, #12]
 800bc00:	460c      	mov	r4, r1
 800bc02:	46a8      	mov	r8, r5
 800bc04:	4621      	mov	r1, r4
 800bc06:	4630      	mov	r0, r6
 800bc08:	3501      	adds	r5, #1
 800bc0a:	f007 fa2d 	bl	8013068 <put_memory>
 800bc0e:	42af      	cmp	r7, r5
 800bc10:	60a4      	str	r4, [r4, #8]
 800bc12:	f884 800c 	strb.w	r8, [r4, #12]
 800bc16:	f104 0420 	add.w	r4, r4, #32
 800bc1a:	d1f3      	bne.n	800bc04 <rmw_uxrce_init_guard_condition_memory+0x20>
 800bc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop

0800bc24 <rmw_uxrce_fini_session_memory>:
 800bc24:	4601      	mov	r1, r0
 800bc26:	4801      	ldr	r0, [pc, #4]	@ (800bc2c <rmw_uxrce_fini_session_memory+0x8>)
 800bc28:	f007 ba1e 	b.w	8013068 <put_memory>
 800bc2c:	20015e64 	.word	0x20015e64

0800bc30 <rmw_uxrce_fini_node_memory>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	4604      	mov	r4, r0
 800bc34:	6800      	ldr	r0, [r0, #0]
 800bc36:	b128      	cbz	r0, 800bc44 <rmw_uxrce_fini_node_memory+0x14>
 800bc38:	4b07      	ldr	r3, [pc, #28]	@ (800bc58 <rmw_uxrce_fini_node_memory+0x28>)
 800bc3a:	6819      	ldr	r1, [r3, #0]
 800bc3c:	f7f4 fac8 	bl	80001d0 <strcmp>
 800bc40:	b940      	cbnz	r0, 800bc54 <rmw_uxrce_fini_node_memory+0x24>
 800bc42:	6020      	str	r0, [r4, #0]
 800bc44:	6861      	ldr	r1, [r4, #4]
 800bc46:	b129      	cbz	r1, 800bc54 <rmw_uxrce_fini_node_memory+0x24>
 800bc48:	2500      	movs	r5, #0
 800bc4a:	4804      	ldr	r0, [pc, #16]	@ (800bc5c <rmw_uxrce_fini_node_memory+0x2c>)
 800bc4c:	610d      	str	r5, [r1, #16]
 800bc4e:	f007 fa0b 	bl	8013068 <put_memory>
 800bc52:	6065      	str	r5, [r4, #4]
 800bc54:	bd38      	pop	{r3, r4, r5, pc}
 800bc56:	bf00      	nop
 800bc58:	08018478 	.word	0x08018478
 800bc5c:	20015e34 	.word	0x20015e34

0800bc60 <rmw_uxrce_fini_publisher_memory>:
 800bc60:	b510      	push	{r4, lr}
 800bc62:	4604      	mov	r4, r0
 800bc64:	6800      	ldr	r0, [r0, #0]
 800bc66:	b128      	cbz	r0, 800bc74 <rmw_uxrce_fini_publisher_memory+0x14>
 800bc68:	4b06      	ldr	r3, [pc, #24]	@ (800bc84 <rmw_uxrce_fini_publisher_memory+0x24>)
 800bc6a:	6819      	ldr	r1, [r3, #0]
 800bc6c:	f7f4 fab0 	bl	80001d0 <strcmp>
 800bc70:	b938      	cbnz	r0, 800bc82 <rmw_uxrce_fini_publisher_memory+0x22>
 800bc72:	6020      	str	r0, [r4, #0]
 800bc74:	6861      	ldr	r1, [r4, #4]
 800bc76:	b121      	cbz	r1, 800bc82 <rmw_uxrce_fini_publisher_memory+0x22>
 800bc78:	4803      	ldr	r0, [pc, #12]	@ (800bc88 <rmw_uxrce_fini_publisher_memory+0x28>)
 800bc7a:	f007 f9f5 	bl	8013068 <put_memory>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	6063      	str	r3, [r4, #4]
 800bc82:	bd10      	pop	{r4, pc}
 800bc84:	08018478 	.word	0x08018478
 800bc88:	20015e44 	.word	0x20015e44

0800bc8c <rmw_uxrce_fini_subscription_memory>:
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	4604      	mov	r4, r0
 800bc90:	6800      	ldr	r0, [r0, #0]
 800bc92:	b128      	cbz	r0, 800bca0 <rmw_uxrce_fini_subscription_memory+0x14>
 800bc94:	4b06      	ldr	r3, [pc, #24]	@ (800bcb0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800bc96:	6819      	ldr	r1, [r3, #0]
 800bc98:	f7f4 fa9a 	bl	80001d0 <strcmp>
 800bc9c:	b938      	cbnz	r0, 800bcae <rmw_uxrce_fini_subscription_memory+0x22>
 800bc9e:	6020      	str	r0, [r4, #0]
 800bca0:	6861      	ldr	r1, [r4, #4]
 800bca2:	b121      	cbz	r1, 800bcae <rmw_uxrce_fini_subscription_memory+0x22>
 800bca4:	4803      	ldr	r0, [pc, #12]	@ (800bcb4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800bca6:	f007 f9df 	bl	8013068 <put_memory>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	6063      	str	r3, [r4, #4]
 800bcae:	bd10      	pop	{r4, pc}
 800bcb0:	08018478 	.word	0x08018478
 800bcb4:	20015e84 	.word	0x20015e84

0800bcb8 <rmw_uxrce_fini_service_memory>:
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	4604      	mov	r4, r0
 800bcbc:	6800      	ldr	r0, [r0, #0]
 800bcbe:	b128      	cbz	r0, 800bccc <rmw_uxrce_fini_service_memory+0x14>
 800bcc0:	4b06      	ldr	r3, [pc, #24]	@ (800bcdc <rmw_uxrce_fini_service_memory+0x24>)
 800bcc2:	6819      	ldr	r1, [r3, #0]
 800bcc4:	f7f4 fa84 	bl	80001d0 <strcmp>
 800bcc8:	b938      	cbnz	r0, 800bcda <rmw_uxrce_fini_service_memory+0x22>
 800bcca:	6020      	str	r0, [r4, #0]
 800bccc:	6861      	ldr	r1, [r4, #4]
 800bcce:	b121      	cbz	r1, 800bcda <rmw_uxrce_fini_service_memory+0x22>
 800bcd0:	4803      	ldr	r0, [pc, #12]	@ (800bce0 <rmw_uxrce_fini_service_memory+0x28>)
 800bcd2:	f007 f9c9 	bl	8013068 <put_memory>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	6063      	str	r3, [r4, #4]
 800bcda:	bd10      	pop	{r4, pc}
 800bcdc:	08018478 	.word	0x08018478
 800bce0:	20015e54 	.word	0x20015e54

0800bce4 <rmw_uxrce_fini_client_memory>:
 800bce4:	b510      	push	{r4, lr}
 800bce6:	4604      	mov	r4, r0
 800bce8:	6800      	ldr	r0, [r0, #0]
 800bcea:	b128      	cbz	r0, 800bcf8 <rmw_uxrce_fini_client_memory+0x14>
 800bcec:	4b06      	ldr	r3, [pc, #24]	@ (800bd08 <rmw_uxrce_fini_client_memory+0x24>)
 800bcee:	6819      	ldr	r1, [r3, #0]
 800bcf0:	f7f4 fa6e 	bl	80001d0 <strcmp>
 800bcf4:	b938      	cbnz	r0, 800bd06 <rmw_uxrce_fini_client_memory+0x22>
 800bcf6:	6020      	str	r0, [r4, #0]
 800bcf8:	6861      	ldr	r1, [r4, #4]
 800bcfa:	b121      	cbz	r1, 800bd06 <rmw_uxrce_fini_client_memory+0x22>
 800bcfc:	4803      	ldr	r0, [pc, #12]	@ (800bd0c <rmw_uxrce_fini_client_memory+0x28>)
 800bcfe:	f007 f9b3 	bl	8013068 <put_memory>
 800bd02:	2300      	movs	r3, #0
 800bd04:	6063      	str	r3, [r4, #4]
 800bd06:	bd10      	pop	{r4, pc}
 800bd08:	08018478 	.word	0x08018478
 800bd0c:	20011568 	.word	0x20011568

0800bd10 <rmw_uxrce_fini_topic_memory>:
 800bd10:	b510      	push	{r4, lr}
 800bd12:	4604      	mov	r4, r0
 800bd14:	4621      	mov	r1, r4
 800bd16:	4803      	ldr	r0, [pc, #12]	@ (800bd24 <rmw_uxrce_fini_topic_memory+0x14>)
 800bd18:	f007 f9a6 	bl	8013068 <put_memory>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	61a3      	str	r3, [r4, #24]
 800bd20:	bd10      	pop	{r4, pc}
 800bd22:	bf00      	nop
 800bd24:	20015e94 	.word	0x20015e94

0800bd28 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800bd28:	b082      	sub	sp, #8
 800bd2a:	b530      	push	{r4, r5, lr}
 800bd2c:	4925      	ldr	r1, [pc, #148]	@ (800bdc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bd2e:	680d      	ldr	r5, [r1, #0]
 800bd30:	ac03      	add	r4, sp, #12
 800bd32:	e884 000c 	stmia.w	r4, {r2, r3}
 800bd36:	461c      	mov	r4, r3
 800bd38:	2d00      	cmp	r5, #0
 800bd3a:	d041      	beq.n	800bdc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800bd3c:	462b      	mov	r3, r5
 800bd3e:	2100      	movs	r1, #0
 800bd40:	689a      	ldr	r2, [r3, #8]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800bd48:	4290      	cmp	r0, r2
 800bd4a:	bf08      	it	eq
 800bd4c:	3101      	addeq	r1, #1
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d1f6      	bne.n	800bd40 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800bd52:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	d029      	beq.n	800bdae <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800bd5a:	d907      	bls.n	800bd6c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d005      	beq.n	800bd6c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bd60:	2100      	movs	r1, #0
 800bd62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd66:	4608      	mov	r0, r1
 800bd68:	b002      	add	sp, #8
 800bd6a:	4770      	bx	lr
 800bd6c:	b314      	cbz	r4, 800bdb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bd6e:	428c      	cmp	r4, r1
 800bd70:	d820      	bhi.n	800bdb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bd72:	2d00      	cmp	r5, #0
 800bd74:	d0f4      	beq.n	800bd60 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bd76:	2100      	movs	r1, #0
 800bd78:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800bd7c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800bd80:	e002      	b.n	800bd88 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800bd82:	686d      	ldr	r5, [r5, #4]
 800bd84:	2d00      	cmp	r5, #0
 800bd86:	d0ec      	beq.n	800bd62 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800bd88:	68ab      	ldr	r3, [r5, #8]
 800bd8a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800bd8e:	4290      	cmp	r0, r2
 800bd90:	d1f7      	bne.n	800bd82 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bd92:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800bd96:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800bd9a:	4562      	cmp	r2, ip
 800bd9c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800bda0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800bda4:	daed      	bge.n	800bd82 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bda6:	4694      	mov	ip, r2
 800bda8:	461c      	mov	r4, r3
 800bdaa:	4629      	mov	r1, r5
 800bdac:	e7e9      	b.n	800bd82 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bdae:	b10c      	cbz	r4, 800bdb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bdb0:	428c      	cmp	r4, r1
 800bdb2:	d9d5      	bls.n	800bd60 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bdb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdb8:	4802      	ldr	r0, [pc, #8]	@ (800bdc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bdba:	b002      	add	sp, #8
 800bdbc:	f007 b944 	b.w	8013048 <get_memory>
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	e7c6      	b.n	800bd52 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800bdc4:	20015e74 	.word	0x20015e74

0800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800bdc8:	4b11      	ldr	r3, [pc, #68]	@ (800be10 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	b530      	push	{r4, r5, lr}
 800bdce:	b1e3      	cbz	r3, 800be0a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800bdd0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800bdd4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800bdd8:	2400      	movs	r4, #0
 800bdda:	e001      	b.n	800bde0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	b193      	cbz	r3, 800be06 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800bde0:	689a      	ldr	r2, [r3, #8]
 800bde2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800bde6:	4288      	cmp	r0, r1
 800bde8:	d1f8      	bne.n	800bddc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800bdea:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800bdee:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800bdf2:	4571      	cmp	r1, lr
 800bdf4:	eb72 050c 	sbcs.w	r5, r2, ip
 800bdf8:	daf0      	bge.n	800bddc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800bdfa:	461c      	mov	r4, r3
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	468e      	mov	lr, r1
 800be00:	4694      	mov	ip, r2
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1ec      	bne.n	800bde0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800be06:	4620      	mov	r0, r4
 800be08:	bd30      	pop	{r4, r5, pc}
 800be0a:	461c      	mov	r4, r3
 800be0c:	4620      	mov	r0, r4
 800be0e:	bd30      	pop	{r4, r5, pc}
 800be10:	20015e74 	.word	0x20015e74
 800be14:	00000000 	.word	0x00000000

0800be18 <rmw_uxrce_clean_expired_static_input_buffer>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	4b3c      	ldr	r3, [pc, #240]	@ (800bf10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800be1e:	ed2d 8b06 	vpush	{d8-d10}
 800be22:	681f      	ldr	r7, [r3, #0]
 800be24:	b08d      	sub	sp, #52	@ 0x34
 800be26:	f008 f985 	bl	8014134 <rmw_uros_epoch_nanos>
 800be2a:	2f00      	cmp	r7, #0
 800be2c:	d05d      	beq.n	800beea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800be2e:	46b8      	mov	r8, r7
 800be30:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800bef8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800be34:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800be38:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800be3c:	2b04      	cmp	r3, #4
 800be3e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800bf00 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800be42:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800bf08 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800be46:	4681      	mov	r9, r0
 800be48:	468a      	mov	sl, r1
 800be4a:	ac04      	add	r4, sp, #16
 800be4c:	d03f      	beq.n	800bece <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800be4e:	2b05      	cmp	r3, #5
 800be50:	d044      	beq.n	800bedc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800be52:	2b03      	cmp	r3, #3
 800be54:	d03b      	beq.n	800bece <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800be56:	ed8d 8b04 	vstr	d8, [sp, #16]
 800be5a:	ed8d ab06 	vstr	d10, [sp, #24]
 800be5e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800be62:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800be66:	ab08      	add	r3, sp, #32
 800be68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be6a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800be6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800be72:	f006 ff1d 	bl	8012cb0 <rmw_time_equal>
 800be76:	b118      	cbz	r0, 800be80 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800be78:	ed8d 9b04 	vstr	d9, [sp, #16]
 800be7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800be80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800be84:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800be88:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800be8c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800be90:	f006 ff62 	bl	8012d58 <rmw_time_total_nsec>
 800be94:	1830      	adds	r0, r6, r0
 800be96:	eb47 0101 	adc.w	r1, r7, r1
 800be9a:	4548      	cmp	r0, r9
 800be9c:	eb71 030a 	sbcs.w	r3, r1, sl
 800bea0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800bea4:	db05      	blt.n	800beb2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800bea6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800beaa:	4591      	cmp	r9, r2
 800beac:	eb7a 0303 	sbcs.w	r3, sl, r3
 800beb0:	da03      	bge.n	800beba <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800beb2:	4817      	ldr	r0, [pc, #92]	@ (800bf10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800beb4:	4641      	mov	r1, r8
 800beb6:	f007 f8d7 	bl	8013068 <put_memory>
 800beba:	f1bb 0f00 	cmp.w	fp, #0
 800bebe:	d014      	beq.n	800beea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800bec0:	46d8      	mov	r8, fp
 800bec2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bec6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800beca:	2b04      	cmp	r3, #4
 800becc:	d1bf      	bne.n	800be4e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800bece:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800bed2:	3340      	adds	r3, #64	@ 0x40
 800bed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bed6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800beda:	e7c0      	b.n	800be5e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800bedc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800bee0:	3348      	adds	r3, #72	@ 0x48
 800bee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bee8:	e7b9      	b.n	800be5e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800beea:	b00d      	add	sp, #52	@ 0x34
 800beec:	ecbd 8b06 	vpop	{d8-d10}
 800bef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef4:	f3af 8000 	nop.w
	...
 800bf00:	00000001 	.word	0x00000001
 800bf04:	00000000 	.word	0x00000000
 800bf08:	0000001e 	.word	0x0000001e
 800bf0c:	00000000 	.word	0x00000000
 800bf10:	20015e74 	.word	0x20015e74

0800bf14 <run_xrce_session>:
 800bf14:	b510      	push	{r4, lr}
 800bf16:	788c      	ldrb	r4, [r1, #2]
 800bf18:	b086      	sub	sp, #24
 800bf1a:	2c01      	cmp	r4, #1
 800bf1c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800bf20:	d00c      	beq.n	800bf3c <run_xrce_session+0x28>
 800bf22:	4619      	mov	r1, r3
 800bf24:	2301      	movs	r3, #1
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	f10d 020e 	add.w	r2, sp, #14
 800bf2c:	f10d 0317 	add.w	r3, sp, #23
 800bf30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf34:	f001 ffba 	bl	800deac <uxr_run_session_until_all_status>
 800bf38:	b006      	add	sp, #24
 800bf3a:	bd10      	pop	{r4, pc}
 800bf3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf40:	f001 fbce 	bl	800d6e0 <uxr_flash_output_streams>
 800bf44:	4620      	mov	r0, r4
 800bf46:	b006      	add	sp, #24
 800bf48:	bd10      	pop	{r4, pc}
 800bf4a:	bf00      	nop

0800bf4c <convert_qos_profile>:
 800bf4c:	7a4a      	ldrb	r2, [r1, #9]
 800bf4e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800bf52:	2a02      	cmp	r2, #2
 800bf54:	bf18      	it	ne
 800bf56:	2200      	movne	r2, #0
 800bf58:	7002      	strb	r2, [r0, #0]
 800bf5a:	780a      	ldrb	r2, [r1, #0]
 800bf5c:	8889      	ldrh	r1, [r1, #4]
 800bf5e:	8081      	strh	r1, [r0, #4]
 800bf60:	f1ac 0c02 	sub.w	ip, ip, #2
 800bf64:	f1a2 0202 	sub.w	r2, r2, #2
 800bf68:	fabc fc8c 	clz	ip, ip
 800bf6c:	fab2 f282 	clz	r2, r2
 800bf70:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800bf74:	0952      	lsrs	r2, r2, #5
 800bf76:	f880 c001 	strb.w	ip, [r0, #1]
 800bf7a:	7082      	strb	r2, [r0, #2]
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop

0800bf80 <generate_type_name>:
 800bf80:	b530      	push	{r4, r5, lr}
 800bf82:	2300      	movs	r3, #0
 800bf84:	700b      	strb	r3, [r1, #0]
 800bf86:	6803      	ldr	r3, [r0, #0]
 800bf88:	b087      	sub	sp, #28
 800bf8a:	4614      	mov	r4, r2
 800bf8c:	b1d3      	cbz	r3, 800bfc4 <generate_type_name+0x44>
 800bf8e:	4a0f      	ldr	r2, [pc, #60]	@ (800bfcc <generate_type_name+0x4c>)
 800bf90:	4615      	mov	r5, r2
 800bf92:	9203      	str	r2, [sp, #12]
 800bf94:	9500      	str	r5, [sp, #0]
 800bf96:	6842      	ldr	r2, [r0, #4]
 800bf98:	480d      	ldr	r0, [pc, #52]	@ (800bfd0 <generate_type_name+0x50>)
 800bf9a:	9001      	str	r0, [sp, #4]
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	490d      	ldr	r1, [pc, #52]	@ (800bfd4 <generate_type_name+0x54>)
 800bfa0:	9204      	str	r2, [sp, #16]
 800bfa2:	9105      	str	r1, [sp, #20]
 800bfa4:	9102      	str	r1, [sp, #8]
 800bfa6:	4a0c      	ldr	r2, [pc, #48]	@ (800bfd8 <generate_type_name+0x58>)
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	f00a fde9 	bl	8016b80 <sniprintf>
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	db05      	blt.n	800bfbe <generate_type_name+0x3e>
 800bfb2:	4284      	cmp	r4, r0
 800bfb4:	bfd4      	ite	le
 800bfb6:	2000      	movle	r0, #0
 800bfb8:	2001      	movgt	r0, #1
 800bfba:	b007      	add	sp, #28
 800bfbc:	bd30      	pop	{r4, r5, pc}
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	b007      	add	sp, #28
 800bfc2:	bd30      	pop	{r4, r5, pc}
 800bfc4:	4b05      	ldr	r3, [pc, #20]	@ (800bfdc <generate_type_name+0x5c>)
 800bfc6:	4a01      	ldr	r2, [pc, #4]	@ (800bfcc <generate_type_name+0x4c>)
 800bfc8:	461d      	mov	r5, r3
 800bfca:	e7e2      	b.n	800bf92 <generate_type_name+0x12>
 800bfcc:	08017e78 	.word	0x08017e78
 800bfd0:	08017e90 	.word	0x08017e90
 800bfd4:	08017e8c 	.word	0x08017e8c
 800bfd8:	08017e7c 	.word	0x08017e7c
 800bfdc:	08018250 	.word	0x08018250

0800bfe0 <generate_topic_name>:
 800bfe0:	b510      	push	{r4, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	4614      	mov	r4, r2
 800bfe6:	9000      	str	r0, [sp, #0]
 800bfe8:	4b08      	ldr	r3, [pc, #32]	@ (800c00c <generate_topic_name+0x2c>)
 800bfea:	4a09      	ldr	r2, [pc, #36]	@ (800c010 <generate_topic_name+0x30>)
 800bfec:	4608      	mov	r0, r1
 800bfee:	4621      	mov	r1, r4
 800bff0:	f00a fdc6 	bl	8016b80 <sniprintf>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	db05      	blt.n	800c004 <generate_topic_name+0x24>
 800bff8:	4284      	cmp	r4, r0
 800bffa:	bfd4      	ite	le
 800bffc:	2000      	movle	r0, #0
 800bffe:	2001      	movgt	r0, #1
 800c000:	b002      	add	sp, #8
 800c002:	bd10      	pop	{r4, pc}
 800c004:	2000      	movs	r0, #0
 800c006:	b002      	add	sp, #8
 800c008:	bd10      	pop	{r4, pc}
 800c00a:	bf00      	nop
 800c00c:	08017e9c 	.word	0x08017e9c
 800c010:	08017e94 	.word	0x08017e94

0800c014 <is_uxrce_rmw_identifier_valid>:
 800c014:	b510      	push	{r4, lr}
 800c016:	4604      	mov	r4, r0
 800c018:	b140      	cbz	r0, 800c02c <is_uxrce_rmw_identifier_valid+0x18>
 800c01a:	f007 f87d 	bl	8013118 <rmw_get_implementation_identifier>
 800c01e:	4601      	mov	r1, r0
 800c020:	4620      	mov	r0, r4
 800c022:	f7f4 f8d5 	bl	80001d0 <strcmp>
 800c026:	fab0 f080 	clz	r0, r0
 800c02a:	0940      	lsrs	r0, r0, #5
 800c02c:	bd10      	pop	{r4, pc}
 800c02e:	bf00      	nop

0800c030 <get_message_typesupport_handle>:
 800c030:	6883      	ldr	r3, [r0, #8]
 800c032:	4718      	bx	r3

0800c034 <get_message_typesupport_handle_function>:
 800c034:	b510      	push	{r4, lr}
 800c036:	4604      	mov	r4, r0
 800c038:	6800      	ldr	r0, [r0, #0]
 800c03a:	f7f4 f8c9 	bl	80001d0 <strcmp>
 800c03e:	2800      	cmp	r0, #0
 800c040:	bf0c      	ite	eq
 800c042:	4620      	moveq	r0, r4
 800c044:	2000      	movne	r0, #0
 800c046:	bd10      	pop	{r4, pc}

0800c048 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800c048:	4b04      	ldr	r3, [pc, #16]	@ (800c05c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	b10a      	cbz	r2, 800c052 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800c04e:	4803      	ldr	r0, [pc, #12]	@ (800c05c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c050:	4770      	bx	lr
 800c052:	4a03      	ldr	r2, [pc, #12]	@ (800c060 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800c054:	4801      	ldr	r0, [pc, #4]	@ (800c05c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c056:	6812      	ldr	r2, [r2, #0]
 800c058:	601a      	str	r2, [r3, #0]
 800c05a:	4770      	bx	lr
 800c05c:	20000030 	.word	0x20000030
 800c060:	200000ac 	.word	0x200000ac

0800c064 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800c064:	4a02      	ldr	r2, [pc, #8]	@ (800c070 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800c066:	4b03      	ldr	r3, [pc, #12]	@ (800c074 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800c068:	6812      	ldr	r2, [r2, #0]
 800c06a:	601a      	str	r2, [r3, #0]
 800c06c:	4770      	bx	lr
 800c06e:	bf00      	nop
 800c070:	200000ac 	.word	0x200000ac
 800c074:	20000030 	.word	0x20000030

0800c078 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800c078:	f008 b898 	b.w	80141ac <std_msgs__msg__Int32__init>

0800c07c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800c07c:	f008 b89a 	b.w	80141b4 <std_msgs__msg__Int32__fini>

0800c080 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800c080:	4b04      	ldr	r3, [pc, #16]	@ (800c094 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	b10a      	cbz	r2, 800c08a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800c086:	4803      	ldr	r0, [pc, #12]	@ (800c094 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c088:	4770      	bx	lr
 800c08a:	4a03      	ldr	r2, [pc, #12]	@ (800c098 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800c08c:	4801      	ldr	r0, [pc, #4]	@ (800c094 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c08e:	6812      	ldr	r2, [r2, #0]
 800c090:	601a      	str	r2, [r3, #0]
 800c092:	4770      	bx	lr
 800c094:	20000078 	.word	0x20000078
 800c098:	200000b0 	.word	0x200000b0

0800c09c <_Int32__max_serialized_size>:
 800c09c:	b508      	push	{r3, lr}
 800c09e:	2104      	movs	r1, #4
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	f001 f807 	bl	800d0b4 <ucdr_alignment>
 800c0a6:	3004      	adds	r0, #4
 800c0a8:	bd08      	pop	{r3, pc}
 800c0aa:	bf00      	nop

0800c0ac <_Int32__cdr_deserialize>:
 800c0ac:	b109      	cbz	r1, 800c0b2 <_Int32__cdr_deserialize+0x6>
 800c0ae:	f000 bf19 	b.w	800cee4 <ucdr_deserialize_int32_t>
 800c0b2:	4608      	mov	r0, r1
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop

0800c0b8 <get_serialized_size_std_msgs__msg__Int32>:
 800c0b8:	b138      	cbz	r0, 800c0ca <get_serialized_size_std_msgs__msg__Int32+0x12>
 800c0ba:	b508      	push	{r3, lr}
 800c0bc:	460b      	mov	r3, r1
 800c0be:	4618      	mov	r0, r3
 800c0c0:	2104      	movs	r1, #4
 800c0c2:	f000 fff7 	bl	800d0b4 <ucdr_alignment>
 800c0c6:	3004      	adds	r0, #4
 800c0c8:	bd08      	pop	{r3, pc}
 800c0ca:	4770      	bx	lr

0800c0cc <_Int32__cdr_serialize>:
 800c0cc:	460a      	mov	r2, r1
 800c0ce:	b118      	cbz	r0, 800c0d8 <_Int32__cdr_serialize+0xc>
 800c0d0:	6801      	ldr	r1, [r0, #0]
 800c0d2:	4610      	mov	r0, r2
 800c0d4:	f000 be6e 	b.w	800cdb4 <ucdr_serialize_int32_t>
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop

0800c0dc <_Int32__get_serialized_size>:
 800c0dc:	b130      	cbz	r0, 800c0ec <_Int32__get_serialized_size+0x10>
 800c0de:	b508      	push	{r3, lr}
 800c0e0:	2104      	movs	r1, #4
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	f000 ffe6 	bl	800d0b4 <ucdr_alignment>
 800c0e8:	3004      	adds	r0, #4
 800c0ea:	bd08      	pop	{r3, pc}
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop

0800c0f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800c0f0:	4800      	ldr	r0, [pc, #0]	@ (800c0f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800c0f2:	4770      	bx	lr
 800c0f4:	20000084 	.word	0x20000084

0800c0f8 <ucdr_serialize_bool>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	460d      	mov	r5, r1
 800c0fc:	2101      	movs	r1, #1
 800c0fe:	4604      	mov	r4, r0
 800c100:	f000 ff8c 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c104:	b148      	cbz	r0, 800c11a <ucdr_serialize_bool+0x22>
 800c106:	68a3      	ldr	r3, [r4, #8]
 800c108:	701d      	strb	r5, [r3, #0]
 800c10a:	68a2      	ldr	r2, [r4, #8]
 800c10c:	6923      	ldr	r3, [r4, #16]
 800c10e:	2101      	movs	r1, #1
 800c110:	440a      	add	r2, r1
 800c112:	440b      	add	r3, r1
 800c114:	60a2      	str	r2, [r4, #8]
 800c116:	6123      	str	r3, [r4, #16]
 800c118:	7561      	strb	r1, [r4, #21]
 800c11a:	7da0      	ldrb	r0, [r4, #22]
 800c11c:	f080 0001 	eor.w	r0, r0, #1
 800c120:	bd38      	pop	{r3, r4, r5, pc}
 800c122:	bf00      	nop

0800c124 <ucdr_deserialize_bool>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	460d      	mov	r5, r1
 800c128:	2101      	movs	r1, #1
 800c12a:	4604      	mov	r4, r0
 800c12c:	f000 ff76 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c130:	b160      	cbz	r0, 800c14c <ucdr_deserialize_bool+0x28>
 800c132:	68a2      	ldr	r2, [r4, #8]
 800c134:	6923      	ldr	r3, [r4, #16]
 800c136:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c13a:	3900      	subs	r1, #0
 800c13c:	bf18      	it	ne
 800c13e:	2101      	movne	r1, #1
 800c140:	7029      	strb	r1, [r5, #0]
 800c142:	3301      	adds	r3, #1
 800c144:	2101      	movs	r1, #1
 800c146:	60a2      	str	r2, [r4, #8]
 800c148:	6123      	str	r3, [r4, #16]
 800c14a:	7561      	strb	r1, [r4, #21]
 800c14c:	7da0      	ldrb	r0, [r4, #22]
 800c14e:	f080 0001 	eor.w	r0, r0, #1
 800c152:	bd38      	pop	{r3, r4, r5, pc}

0800c154 <ucdr_serialize_uint8_t>:
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	460d      	mov	r5, r1
 800c158:	2101      	movs	r1, #1
 800c15a:	4604      	mov	r4, r0
 800c15c:	f000 ff5e 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c160:	b148      	cbz	r0, 800c176 <ucdr_serialize_uint8_t+0x22>
 800c162:	68a3      	ldr	r3, [r4, #8]
 800c164:	701d      	strb	r5, [r3, #0]
 800c166:	68a2      	ldr	r2, [r4, #8]
 800c168:	6923      	ldr	r3, [r4, #16]
 800c16a:	2101      	movs	r1, #1
 800c16c:	440a      	add	r2, r1
 800c16e:	440b      	add	r3, r1
 800c170:	60a2      	str	r2, [r4, #8]
 800c172:	6123      	str	r3, [r4, #16]
 800c174:	7561      	strb	r1, [r4, #21]
 800c176:	7da0      	ldrb	r0, [r4, #22]
 800c178:	f080 0001 	eor.w	r0, r0, #1
 800c17c:	bd38      	pop	{r3, r4, r5, pc}
 800c17e:	bf00      	nop

0800c180 <ucdr_deserialize_uint8_t>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	460d      	mov	r5, r1
 800c184:	2101      	movs	r1, #1
 800c186:	4604      	mov	r4, r0
 800c188:	f000 ff48 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c18c:	b150      	cbz	r0, 800c1a4 <ucdr_deserialize_uint8_t+0x24>
 800c18e:	68a3      	ldr	r3, [r4, #8]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	702b      	strb	r3, [r5, #0]
 800c194:	68a2      	ldr	r2, [r4, #8]
 800c196:	6923      	ldr	r3, [r4, #16]
 800c198:	2101      	movs	r1, #1
 800c19a:	440a      	add	r2, r1
 800c19c:	440b      	add	r3, r1
 800c19e:	60a2      	str	r2, [r4, #8]
 800c1a0:	6123      	str	r3, [r4, #16]
 800c1a2:	7561      	strb	r1, [r4, #21]
 800c1a4:	7da0      	ldrb	r0, [r4, #22]
 800c1a6:	f080 0001 	eor.w	r0, r0, #1
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}

0800c1ac <ucdr_serialize_uint16_t>:
 800c1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b0:	b082      	sub	sp, #8
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	2102      	movs	r1, #2
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c1bc:	f000 ff82 	bl	800d0c4 <ucdr_buffer_alignment>
 800c1c0:	4601      	mov	r1, r0
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	7d67      	ldrb	r7, [r4, #21]
 800c1c6:	f000 ffc1 	bl	800d14c <ucdr_advance_buffer>
 800c1ca:	2102      	movs	r1, #2
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f000 ff19 	bl	800d004 <ucdr_check_buffer_available_for>
 800c1d2:	bb78      	cbnz	r0, 800c234 <ucdr_serialize_uint16_t+0x88>
 800c1d4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c1d8:	42ab      	cmp	r3, r5
 800c1da:	d926      	bls.n	800c22a <ucdr_serialize_uint16_t+0x7e>
 800c1dc:	1b5e      	subs	r6, r3, r5
 800c1de:	60a3      	str	r3, [r4, #8]
 800c1e0:	6923      	ldr	r3, [r4, #16]
 800c1e2:	f1c6 0802 	rsb	r8, r6, #2
 800c1e6:	4433      	add	r3, r6
 800c1e8:	6123      	str	r3, [r4, #16]
 800c1ea:	4641      	mov	r1, r8
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f000 ff15 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	d03b      	beq.n	800c26e <ucdr_serialize_uint16_t+0xc2>
 800c1f6:	7d23      	ldrb	r3, [r4, #20]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d04a      	beq.n	800c292 <ucdr_serialize_uint16_t+0xe6>
 800c1fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c200:	702b      	strb	r3, [r5, #0]
 800c202:	2e00      	cmp	r6, #0
 800c204:	d040      	beq.n	800c288 <ucdr_serialize_uint16_t+0xdc>
 800c206:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c20a:	706b      	strb	r3, [r5, #1]
 800c20c:	6923      	ldr	r3, [r4, #16]
 800c20e:	68a2      	ldr	r2, [r4, #8]
 800c210:	7da0      	ldrb	r0, [r4, #22]
 800c212:	3302      	adds	r3, #2
 800c214:	1b9e      	subs	r6, r3, r6
 800c216:	4442      	add	r2, r8
 800c218:	2302      	movs	r3, #2
 800c21a:	f080 0001 	eor.w	r0, r0, #1
 800c21e:	60a2      	str	r2, [r4, #8]
 800c220:	6126      	str	r6, [r4, #16]
 800c222:	7563      	strb	r3, [r4, #21]
 800c224:	b002      	add	sp, #8
 800c226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c22a:	2102      	movs	r1, #2
 800c22c:	4620      	mov	r0, r4
 800c22e:	f000 fef5 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c232:	b190      	cbz	r0, 800c25a <ucdr_serialize_uint16_t+0xae>
 800c234:	7d23      	ldrb	r3, [r4, #20]
 800c236:	2b01      	cmp	r3, #1
 800c238:	68a3      	ldr	r3, [r4, #8]
 800c23a:	d014      	beq.n	800c266 <ucdr_serialize_uint16_t+0xba>
 800c23c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c240:	701a      	strb	r2, [r3, #0]
 800c242:	68a3      	ldr	r3, [r4, #8]
 800c244:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c248:	705a      	strb	r2, [r3, #1]
 800c24a:	68a2      	ldr	r2, [r4, #8]
 800c24c:	6923      	ldr	r3, [r4, #16]
 800c24e:	3202      	adds	r2, #2
 800c250:	3302      	adds	r3, #2
 800c252:	2102      	movs	r1, #2
 800c254:	60a2      	str	r2, [r4, #8]
 800c256:	6123      	str	r3, [r4, #16]
 800c258:	7561      	strb	r1, [r4, #21]
 800c25a:	7da0      	ldrb	r0, [r4, #22]
 800c25c:	f080 0001 	eor.w	r0, r0, #1
 800c260:	b002      	add	sp, #8
 800c262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c266:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c26a:	801a      	strh	r2, [r3, #0]
 800c26c:	e7ed      	b.n	800c24a <ucdr_serialize_uint16_t+0x9e>
 800c26e:	68a2      	ldr	r2, [r4, #8]
 800c270:	6923      	ldr	r3, [r4, #16]
 800c272:	7da0      	ldrb	r0, [r4, #22]
 800c274:	7567      	strb	r7, [r4, #21]
 800c276:	1b92      	subs	r2, r2, r6
 800c278:	1b9b      	subs	r3, r3, r6
 800c27a:	f080 0001 	eor.w	r0, r0, #1
 800c27e:	60a2      	str	r2, [r4, #8]
 800c280:	6123      	str	r3, [r4, #16]
 800c282:	b002      	add	sp, #8
 800c284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c288:	68a3      	ldr	r3, [r4, #8]
 800c28a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c28e:	701a      	strb	r2, [r3, #0]
 800c290:	e7bc      	b.n	800c20c <ucdr_serialize_uint16_t+0x60>
 800c292:	4628      	mov	r0, r5
 800c294:	f10d 0506 	add.w	r5, sp, #6
 800c298:	4629      	mov	r1, r5
 800c29a:	4632      	mov	r2, r6
 800c29c:	f00a fe13 	bl	8016ec6 <memcpy>
 800c2a0:	68a0      	ldr	r0, [r4, #8]
 800c2a2:	4642      	mov	r2, r8
 800c2a4:	19a9      	adds	r1, r5, r6
 800c2a6:	f00a fe0e 	bl	8016ec6 <memcpy>
 800c2aa:	e7af      	b.n	800c20c <ucdr_serialize_uint16_t+0x60>

0800c2ac <ucdr_serialize_endian_uint16_t>:
 800c2ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2b0:	b083      	sub	sp, #12
 800c2b2:	460d      	mov	r5, r1
 800c2b4:	2102      	movs	r1, #2
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c2bc:	f000 ff02 	bl	800d0c4 <ucdr_buffer_alignment>
 800c2c0:	4601      	mov	r1, r0
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c2c8:	f000 ff40 	bl	800d14c <ucdr_advance_buffer>
 800c2cc:	2102      	movs	r1, #2
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f000 fe98 	bl	800d004 <ucdr_check_buffer_available_for>
 800c2d4:	bb70      	cbnz	r0, 800c334 <ucdr_serialize_endian_uint16_t+0x88>
 800c2d6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c2da:	42be      	cmp	r6, r7
 800c2dc:	d925      	bls.n	800c32a <ucdr_serialize_endian_uint16_t+0x7e>
 800c2de:	6923      	ldr	r3, [r4, #16]
 800c2e0:	60a6      	str	r6, [r4, #8]
 800c2e2:	1bf6      	subs	r6, r6, r7
 800c2e4:	4433      	add	r3, r6
 800c2e6:	f1c6 0902 	rsb	r9, r6, #2
 800c2ea:	6123      	str	r3, [r4, #16]
 800c2ec:	4649      	mov	r1, r9
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f000 fe94 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d039      	beq.n	800c36c <ucdr_serialize_endian_uint16_t+0xc0>
 800c2f8:	2d01      	cmp	r5, #1
 800c2fa:	d04a      	beq.n	800c392 <ucdr_serialize_endian_uint16_t+0xe6>
 800c2fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c300:	703b      	strb	r3, [r7, #0]
 800c302:	2e00      	cmp	r6, #0
 800c304:	d040      	beq.n	800c388 <ucdr_serialize_endian_uint16_t+0xdc>
 800c306:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c30a:	707b      	strb	r3, [r7, #1]
 800c30c:	6923      	ldr	r3, [r4, #16]
 800c30e:	68a2      	ldr	r2, [r4, #8]
 800c310:	7da0      	ldrb	r0, [r4, #22]
 800c312:	3302      	adds	r3, #2
 800c314:	444a      	add	r2, r9
 800c316:	1b9b      	subs	r3, r3, r6
 800c318:	2102      	movs	r1, #2
 800c31a:	f080 0001 	eor.w	r0, r0, #1
 800c31e:	60a2      	str	r2, [r4, #8]
 800c320:	6123      	str	r3, [r4, #16]
 800c322:	7561      	strb	r1, [r4, #21]
 800c324:	b003      	add	sp, #12
 800c326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c32a:	2102      	movs	r1, #2
 800c32c:	4620      	mov	r0, r4
 800c32e:	f000 fe75 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c332:	b188      	cbz	r0, 800c358 <ucdr_serialize_endian_uint16_t+0xac>
 800c334:	2d01      	cmp	r5, #1
 800c336:	68a3      	ldr	r3, [r4, #8]
 800c338:	d014      	beq.n	800c364 <ucdr_serialize_endian_uint16_t+0xb8>
 800c33a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c33e:	701a      	strb	r2, [r3, #0]
 800c340:	68a3      	ldr	r3, [r4, #8]
 800c342:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c346:	705a      	strb	r2, [r3, #1]
 800c348:	68a2      	ldr	r2, [r4, #8]
 800c34a:	6923      	ldr	r3, [r4, #16]
 800c34c:	3202      	adds	r2, #2
 800c34e:	3302      	adds	r3, #2
 800c350:	2102      	movs	r1, #2
 800c352:	60a2      	str	r2, [r4, #8]
 800c354:	6123      	str	r3, [r4, #16]
 800c356:	7561      	strb	r1, [r4, #21]
 800c358:	7da0      	ldrb	r0, [r4, #22]
 800c35a:	f080 0001 	eor.w	r0, r0, #1
 800c35e:	b003      	add	sp, #12
 800c360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c364:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c368:	801a      	strh	r2, [r3, #0]
 800c36a:	e7ed      	b.n	800c348 <ucdr_serialize_endian_uint16_t+0x9c>
 800c36c:	68a2      	ldr	r2, [r4, #8]
 800c36e:	6923      	ldr	r3, [r4, #16]
 800c370:	7da0      	ldrb	r0, [r4, #22]
 800c372:	f884 8015 	strb.w	r8, [r4, #21]
 800c376:	1b92      	subs	r2, r2, r6
 800c378:	1b9b      	subs	r3, r3, r6
 800c37a:	f080 0001 	eor.w	r0, r0, #1
 800c37e:	60a2      	str	r2, [r4, #8]
 800c380:	6123      	str	r3, [r4, #16]
 800c382:	b003      	add	sp, #12
 800c384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c388:	68a3      	ldr	r3, [r4, #8]
 800c38a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c38e:	701a      	strb	r2, [r3, #0]
 800c390:	e7bc      	b.n	800c30c <ucdr_serialize_endian_uint16_t+0x60>
 800c392:	f10d 0506 	add.w	r5, sp, #6
 800c396:	4629      	mov	r1, r5
 800c398:	4632      	mov	r2, r6
 800c39a:	4638      	mov	r0, r7
 800c39c:	f00a fd93 	bl	8016ec6 <memcpy>
 800c3a0:	68a0      	ldr	r0, [r4, #8]
 800c3a2:	464a      	mov	r2, r9
 800c3a4:	19a9      	adds	r1, r5, r6
 800c3a6:	f00a fd8e 	bl	8016ec6 <memcpy>
 800c3aa:	e7af      	b.n	800c30c <ucdr_serialize_endian_uint16_t+0x60>

0800c3ac <ucdr_deserialize_uint16_t>:
 800c3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3b0:	460d      	mov	r5, r1
 800c3b2:	2102      	movs	r1, #2
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	f000 fe85 	bl	800d0c4 <ucdr_buffer_alignment>
 800c3ba:	4601      	mov	r1, r0
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c3c2:	f000 fec3 	bl	800d14c <ucdr_advance_buffer>
 800c3c6:	2102      	movs	r1, #2
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f000 fe1b 	bl	800d004 <ucdr_check_buffer_available_for>
 800c3ce:	bb60      	cbnz	r0, 800c42a <ucdr_deserialize_uint16_t+0x7e>
 800c3d0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c3d4:	42be      	cmp	r6, r7
 800c3d6:	d923      	bls.n	800c420 <ucdr_deserialize_uint16_t+0x74>
 800c3d8:	6923      	ldr	r3, [r4, #16]
 800c3da:	60a6      	str	r6, [r4, #8]
 800c3dc:	1bf6      	subs	r6, r6, r7
 800c3de:	4433      	add	r3, r6
 800c3e0:	f1c6 0902 	rsb	r9, r6, #2
 800c3e4:	6123      	str	r3, [r4, #16]
 800c3e6:	4649      	mov	r1, r9
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f000 fe17 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	d034      	beq.n	800c45c <ucdr_deserialize_uint16_t+0xb0>
 800c3f2:	7d23      	ldrb	r3, [r4, #20]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d042      	beq.n	800c47e <ucdr_deserialize_uint16_t+0xd2>
 800c3f8:	787b      	ldrb	r3, [r7, #1]
 800c3fa:	702b      	strb	r3, [r5, #0]
 800c3fc:	2e00      	cmp	r6, #0
 800c3fe:	d03a      	beq.n	800c476 <ucdr_deserialize_uint16_t+0xca>
 800c400:	783b      	ldrb	r3, [r7, #0]
 800c402:	706b      	strb	r3, [r5, #1]
 800c404:	6923      	ldr	r3, [r4, #16]
 800c406:	68a2      	ldr	r2, [r4, #8]
 800c408:	7da0      	ldrb	r0, [r4, #22]
 800c40a:	2102      	movs	r1, #2
 800c40c:	3302      	adds	r3, #2
 800c40e:	444a      	add	r2, r9
 800c410:	1b9b      	subs	r3, r3, r6
 800c412:	7561      	strb	r1, [r4, #21]
 800c414:	60a2      	str	r2, [r4, #8]
 800c416:	6123      	str	r3, [r4, #16]
 800c418:	f080 0001 	eor.w	r0, r0, #1
 800c41c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c420:	2102      	movs	r1, #2
 800c422:	4620      	mov	r0, r4
 800c424:	f000 fdfa 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c428:	b180      	cbz	r0, 800c44c <ucdr_deserialize_uint16_t+0xa0>
 800c42a:	7d23      	ldrb	r3, [r4, #20]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	68a3      	ldr	r3, [r4, #8]
 800c430:	d011      	beq.n	800c456 <ucdr_deserialize_uint16_t+0xaa>
 800c432:	785b      	ldrb	r3, [r3, #1]
 800c434:	702b      	strb	r3, [r5, #0]
 800c436:	68a3      	ldr	r3, [r4, #8]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	706b      	strb	r3, [r5, #1]
 800c43c:	68a2      	ldr	r2, [r4, #8]
 800c43e:	6923      	ldr	r3, [r4, #16]
 800c440:	3202      	adds	r2, #2
 800c442:	3302      	adds	r3, #2
 800c444:	2102      	movs	r1, #2
 800c446:	60a2      	str	r2, [r4, #8]
 800c448:	6123      	str	r3, [r4, #16]
 800c44a:	7561      	strb	r1, [r4, #21]
 800c44c:	7da0      	ldrb	r0, [r4, #22]
 800c44e:	f080 0001 	eor.w	r0, r0, #1
 800c452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	802b      	strh	r3, [r5, #0]
 800c45a:	e7ef      	b.n	800c43c <ucdr_deserialize_uint16_t+0x90>
 800c45c:	68a2      	ldr	r2, [r4, #8]
 800c45e:	6923      	ldr	r3, [r4, #16]
 800c460:	7da0      	ldrb	r0, [r4, #22]
 800c462:	f884 8015 	strb.w	r8, [r4, #21]
 800c466:	1b92      	subs	r2, r2, r6
 800c468:	1b9b      	subs	r3, r3, r6
 800c46a:	60a2      	str	r2, [r4, #8]
 800c46c:	6123      	str	r3, [r4, #16]
 800c46e:	f080 0001 	eor.w	r0, r0, #1
 800c472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c476:	68a3      	ldr	r3, [r4, #8]
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	706b      	strb	r3, [r5, #1]
 800c47c:	e7c2      	b.n	800c404 <ucdr_deserialize_uint16_t+0x58>
 800c47e:	4639      	mov	r1, r7
 800c480:	4632      	mov	r2, r6
 800c482:	4628      	mov	r0, r5
 800c484:	f00a fd1f 	bl	8016ec6 <memcpy>
 800c488:	68a1      	ldr	r1, [r4, #8]
 800c48a:	464a      	mov	r2, r9
 800c48c:	19a8      	adds	r0, r5, r6
 800c48e:	f00a fd1a 	bl	8016ec6 <memcpy>
 800c492:	e7b7      	b.n	800c404 <ucdr_deserialize_uint16_t+0x58>

0800c494 <ucdr_deserialize_endian_uint16_t>:
 800c494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c498:	460e      	mov	r6, r1
 800c49a:	2102      	movs	r1, #2
 800c49c:	4604      	mov	r4, r0
 800c49e:	4615      	mov	r5, r2
 800c4a0:	f000 fe10 	bl	800d0c4 <ucdr_buffer_alignment>
 800c4a4:	4601      	mov	r1, r0
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c4ac:	f000 fe4e 	bl	800d14c <ucdr_advance_buffer>
 800c4b0:	2102      	movs	r1, #2
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f000 fda6 	bl	800d004 <ucdr_check_buffer_available_for>
 800c4b8:	bb70      	cbnz	r0, 800c518 <ucdr_deserialize_endian_uint16_t+0x84>
 800c4ba:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800c4be:	4547      	cmp	r7, r8
 800c4c0:	d925      	bls.n	800c50e <ucdr_deserialize_endian_uint16_t+0x7a>
 800c4c2:	6923      	ldr	r3, [r4, #16]
 800c4c4:	60a7      	str	r7, [r4, #8]
 800c4c6:	eba7 0708 	sub.w	r7, r7, r8
 800c4ca:	443b      	add	r3, r7
 800c4cc:	f1c7 0a02 	rsb	sl, r7, #2
 800c4d0:	6123      	str	r3, [r4, #16]
 800c4d2:	4651      	mov	r1, sl
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f000 fda1 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d034      	beq.n	800c548 <ucdr_deserialize_endian_uint16_t+0xb4>
 800c4de:	2e01      	cmp	r6, #1
 800c4e0:	d043      	beq.n	800c56a <ucdr_deserialize_endian_uint16_t+0xd6>
 800c4e2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c4e6:	702b      	strb	r3, [r5, #0]
 800c4e8:	2f00      	cmp	r7, #0
 800c4ea:	d03a      	beq.n	800c562 <ucdr_deserialize_endian_uint16_t+0xce>
 800c4ec:	f898 3000 	ldrb.w	r3, [r8]
 800c4f0:	706b      	strb	r3, [r5, #1]
 800c4f2:	6923      	ldr	r3, [r4, #16]
 800c4f4:	68a2      	ldr	r2, [r4, #8]
 800c4f6:	7da0      	ldrb	r0, [r4, #22]
 800c4f8:	2102      	movs	r1, #2
 800c4fa:	3302      	adds	r3, #2
 800c4fc:	4452      	add	r2, sl
 800c4fe:	1bdb      	subs	r3, r3, r7
 800c500:	7561      	strb	r1, [r4, #21]
 800c502:	60a2      	str	r2, [r4, #8]
 800c504:	6123      	str	r3, [r4, #16]
 800c506:	f080 0001 	eor.w	r0, r0, #1
 800c50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c50e:	2102      	movs	r1, #2
 800c510:	4620      	mov	r0, r4
 800c512:	f000 fd83 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c516:	b178      	cbz	r0, 800c538 <ucdr_deserialize_endian_uint16_t+0xa4>
 800c518:	2e01      	cmp	r6, #1
 800c51a:	68a3      	ldr	r3, [r4, #8]
 800c51c:	d011      	beq.n	800c542 <ucdr_deserialize_endian_uint16_t+0xae>
 800c51e:	785b      	ldrb	r3, [r3, #1]
 800c520:	702b      	strb	r3, [r5, #0]
 800c522:	68a3      	ldr	r3, [r4, #8]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	706b      	strb	r3, [r5, #1]
 800c528:	68a2      	ldr	r2, [r4, #8]
 800c52a:	6923      	ldr	r3, [r4, #16]
 800c52c:	3202      	adds	r2, #2
 800c52e:	3302      	adds	r3, #2
 800c530:	2102      	movs	r1, #2
 800c532:	60a2      	str	r2, [r4, #8]
 800c534:	6123      	str	r3, [r4, #16]
 800c536:	7561      	strb	r1, [r4, #21]
 800c538:	7da0      	ldrb	r0, [r4, #22]
 800c53a:	f080 0001 	eor.w	r0, r0, #1
 800c53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c542:	881b      	ldrh	r3, [r3, #0]
 800c544:	802b      	strh	r3, [r5, #0]
 800c546:	e7ef      	b.n	800c528 <ucdr_deserialize_endian_uint16_t+0x94>
 800c548:	68a2      	ldr	r2, [r4, #8]
 800c54a:	6923      	ldr	r3, [r4, #16]
 800c54c:	7da0      	ldrb	r0, [r4, #22]
 800c54e:	f884 9015 	strb.w	r9, [r4, #21]
 800c552:	1bd2      	subs	r2, r2, r7
 800c554:	1bdb      	subs	r3, r3, r7
 800c556:	60a2      	str	r2, [r4, #8]
 800c558:	6123      	str	r3, [r4, #16]
 800c55a:	f080 0001 	eor.w	r0, r0, #1
 800c55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c562:	68a3      	ldr	r3, [r4, #8]
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	706b      	strb	r3, [r5, #1]
 800c568:	e7c3      	b.n	800c4f2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800c56a:	4641      	mov	r1, r8
 800c56c:	463a      	mov	r2, r7
 800c56e:	4628      	mov	r0, r5
 800c570:	f00a fca9 	bl	8016ec6 <memcpy>
 800c574:	68a1      	ldr	r1, [r4, #8]
 800c576:	4652      	mov	r2, sl
 800c578:	19e8      	adds	r0, r5, r7
 800c57a:	f00a fca4 	bl	8016ec6 <memcpy>
 800c57e:	e7b8      	b.n	800c4f2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800c580 <ucdr_serialize_uint32_t>:
 800c580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c584:	b082      	sub	sp, #8
 800c586:	4604      	mov	r4, r0
 800c588:	9101      	str	r1, [sp, #4]
 800c58a:	2104      	movs	r1, #4
 800c58c:	f000 fd9a 	bl	800d0c4 <ucdr_buffer_alignment>
 800c590:	4601      	mov	r1, r0
 800c592:	4620      	mov	r0, r4
 800c594:	7d67      	ldrb	r7, [r4, #21]
 800c596:	f000 fdd9 	bl	800d14c <ucdr_advance_buffer>
 800c59a:	2104      	movs	r1, #4
 800c59c:	4620      	mov	r0, r4
 800c59e:	f000 fd31 	bl	800d004 <ucdr_check_buffer_available_for>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d139      	bne.n	800c61a <ucdr_serialize_uint32_t+0x9a>
 800c5a6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c5aa:	42ab      	cmp	r3, r5
 800c5ac:	d930      	bls.n	800c610 <ucdr_serialize_uint32_t+0x90>
 800c5ae:	1b5e      	subs	r6, r3, r5
 800c5b0:	60a3      	str	r3, [r4, #8]
 800c5b2:	6923      	ldr	r3, [r4, #16]
 800c5b4:	f1c6 0804 	rsb	r8, r6, #4
 800c5b8:	4433      	add	r3, r6
 800c5ba:	6123      	str	r3, [r4, #16]
 800c5bc:	4641      	mov	r1, r8
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f000 fd2c 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	d04c      	beq.n	800c662 <ucdr_serialize_uint32_t+0xe2>
 800c5c8:	7d23      	ldrb	r3, [r4, #20]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d063      	beq.n	800c696 <ucdr_serialize_uint32_t+0x116>
 800c5ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c5d2:	702b      	strb	r3, [r5, #0]
 800c5d4:	2e00      	cmp	r6, #0
 800c5d6:	d051      	beq.n	800c67c <ucdr_serialize_uint32_t+0xfc>
 800c5d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c5dc:	706b      	strb	r3, [r5, #1]
 800c5de:	2e01      	cmp	r6, #1
 800c5e0:	d050      	beq.n	800c684 <ucdr_serialize_uint32_t+0x104>
 800c5e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c5e6:	70ab      	strb	r3, [r5, #2]
 800c5e8:	2e02      	cmp	r6, #2
 800c5ea:	d04f      	beq.n	800c68c <ucdr_serialize_uint32_t+0x10c>
 800c5ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c5f0:	70eb      	strb	r3, [r5, #3]
 800c5f2:	6923      	ldr	r3, [r4, #16]
 800c5f4:	68a2      	ldr	r2, [r4, #8]
 800c5f6:	7da0      	ldrb	r0, [r4, #22]
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	1b9e      	subs	r6, r3, r6
 800c5fc:	4442      	add	r2, r8
 800c5fe:	2304      	movs	r3, #4
 800c600:	f080 0001 	eor.w	r0, r0, #1
 800c604:	60a2      	str	r2, [r4, #8]
 800c606:	6126      	str	r6, [r4, #16]
 800c608:	7563      	strb	r3, [r4, #21]
 800c60a:	b002      	add	sp, #8
 800c60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c610:	2104      	movs	r1, #4
 800c612:	4620      	mov	r0, r4
 800c614:	f000 fd02 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c618:	b1d0      	cbz	r0, 800c650 <ucdr_serialize_uint32_t+0xd0>
 800c61a:	7d23      	ldrb	r3, [r4, #20]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	68a3      	ldr	r3, [r4, #8]
 800c620:	d01c      	beq.n	800c65c <ucdr_serialize_uint32_t+0xdc>
 800c622:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c626:	701a      	strb	r2, [r3, #0]
 800c628:	68a3      	ldr	r3, [r4, #8]
 800c62a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c62e:	705a      	strb	r2, [r3, #1]
 800c630:	68a3      	ldr	r3, [r4, #8]
 800c632:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c636:	709a      	strb	r2, [r3, #2]
 800c638:	68a3      	ldr	r3, [r4, #8]
 800c63a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c63e:	70da      	strb	r2, [r3, #3]
 800c640:	68a2      	ldr	r2, [r4, #8]
 800c642:	6923      	ldr	r3, [r4, #16]
 800c644:	3204      	adds	r2, #4
 800c646:	3304      	adds	r3, #4
 800c648:	2104      	movs	r1, #4
 800c64a:	60a2      	str	r2, [r4, #8]
 800c64c:	6123      	str	r3, [r4, #16]
 800c64e:	7561      	strb	r1, [r4, #21]
 800c650:	7da0      	ldrb	r0, [r4, #22]
 800c652:	f080 0001 	eor.w	r0, r0, #1
 800c656:	b002      	add	sp, #8
 800c658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c65c:	9a01      	ldr	r2, [sp, #4]
 800c65e:	601a      	str	r2, [r3, #0]
 800c660:	e7ee      	b.n	800c640 <ucdr_serialize_uint32_t+0xc0>
 800c662:	68a2      	ldr	r2, [r4, #8]
 800c664:	6923      	ldr	r3, [r4, #16]
 800c666:	7da0      	ldrb	r0, [r4, #22]
 800c668:	7567      	strb	r7, [r4, #21]
 800c66a:	1b92      	subs	r2, r2, r6
 800c66c:	1b9b      	subs	r3, r3, r6
 800c66e:	f080 0001 	eor.w	r0, r0, #1
 800c672:	60a2      	str	r2, [r4, #8]
 800c674:	6123      	str	r3, [r4, #16]
 800c676:	b002      	add	sp, #8
 800c678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c67c:	68a3      	ldr	r3, [r4, #8]
 800c67e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c682:	701a      	strb	r2, [r3, #0]
 800c684:	68a3      	ldr	r3, [r4, #8]
 800c686:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c68a:	701a      	strb	r2, [r3, #0]
 800c68c:	68a3      	ldr	r3, [r4, #8]
 800c68e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c692:	701a      	strb	r2, [r3, #0]
 800c694:	e7ad      	b.n	800c5f2 <ucdr_serialize_uint32_t+0x72>
 800c696:	4628      	mov	r0, r5
 800c698:	ad01      	add	r5, sp, #4
 800c69a:	4629      	mov	r1, r5
 800c69c:	4632      	mov	r2, r6
 800c69e:	f00a fc12 	bl	8016ec6 <memcpy>
 800c6a2:	68a0      	ldr	r0, [r4, #8]
 800c6a4:	4642      	mov	r2, r8
 800c6a6:	19a9      	adds	r1, r5, r6
 800c6a8:	f00a fc0d 	bl	8016ec6 <memcpy>
 800c6ac:	e7a1      	b.n	800c5f2 <ucdr_serialize_uint32_t+0x72>
 800c6ae:	bf00      	nop

0800c6b0 <ucdr_serialize_endian_uint32_t>:
 800c6b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6b4:	b083      	sub	sp, #12
 800c6b6:	460d      	mov	r5, r1
 800c6b8:	2104      	movs	r1, #4
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	9201      	str	r2, [sp, #4]
 800c6be:	f000 fd01 	bl	800d0c4 <ucdr_buffer_alignment>
 800c6c2:	4601      	mov	r1, r0
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c6ca:	f000 fd3f 	bl	800d14c <ucdr_advance_buffer>
 800c6ce:	2104      	movs	r1, #4
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f000 fc97 	bl	800d004 <ucdr_check_buffer_available_for>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d138      	bne.n	800c74c <ucdr_serialize_endian_uint32_t+0x9c>
 800c6da:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c6de:	42b7      	cmp	r7, r6
 800c6e0:	d92f      	bls.n	800c742 <ucdr_serialize_endian_uint32_t+0x92>
 800c6e2:	6923      	ldr	r3, [r4, #16]
 800c6e4:	60a7      	str	r7, [r4, #8]
 800c6e6:	1bbf      	subs	r7, r7, r6
 800c6e8:	443b      	add	r3, r7
 800c6ea:	f1c7 0904 	rsb	r9, r7, #4
 800c6ee:	6123      	str	r3, [r4, #16]
 800c6f0:	4649      	mov	r1, r9
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f000 fc92 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d04a      	beq.n	800c792 <ucdr_serialize_endian_uint32_t+0xe2>
 800c6fc:	2d01      	cmp	r5, #1
 800c6fe:	d063      	beq.n	800c7c8 <ucdr_serialize_endian_uint32_t+0x118>
 800c700:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c704:	7033      	strb	r3, [r6, #0]
 800c706:	2f00      	cmp	r7, #0
 800c708:	d051      	beq.n	800c7ae <ucdr_serialize_endian_uint32_t+0xfe>
 800c70a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c70e:	7073      	strb	r3, [r6, #1]
 800c710:	2f01      	cmp	r7, #1
 800c712:	d050      	beq.n	800c7b6 <ucdr_serialize_endian_uint32_t+0x106>
 800c714:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c718:	70b3      	strb	r3, [r6, #2]
 800c71a:	2f02      	cmp	r7, #2
 800c71c:	d04f      	beq.n	800c7be <ucdr_serialize_endian_uint32_t+0x10e>
 800c71e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c722:	70f3      	strb	r3, [r6, #3]
 800c724:	6923      	ldr	r3, [r4, #16]
 800c726:	68a2      	ldr	r2, [r4, #8]
 800c728:	7da0      	ldrb	r0, [r4, #22]
 800c72a:	3304      	adds	r3, #4
 800c72c:	444a      	add	r2, r9
 800c72e:	1bdb      	subs	r3, r3, r7
 800c730:	2104      	movs	r1, #4
 800c732:	f080 0001 	eor.w	r0, r0, #1
 800c736:	60a2      	str	r2, [r4, #8]
 800c738:	6123      	str	r3, [r4, #16]
 800c73a:	7561      	strb	r1, [r4, #21]
 800c73c:	b003      	add	sp, #12
 800c73e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c742:	2104      	movs	r1, #4
 800c744:	4620      	mov	r0, r4
 800c746:	f000 fc69 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c74a:	b1c8      	cbz	r0, 800c780 <ucdr_serialize_endian_uint32_t+0xd0>
 800c74c:	2d01      	cmp	r5, #1
 800c74e:	68a3      	ldr	r3, [r4, #8]
 800c750:	d01c      	beq.n	800c78c <ucdr_serialize_endian_uint32_t+0xdc>
 800c752:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c756:	701a      	strb	r2, [r3, #0]
 800c758:	68a3      	ldr	r3, [r4, #8]
 800c75a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c75e:	705a      	strb	r2, [r3, #1]
 800c760:	68a3      	ldr	r3, [r4, #8]
 800c762:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c766:	709a      	strb	r2, [r3, #2]
 800c768:	68a3      	ldr	r3, [r4, #8]
 800c76a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c76e:	70da      	strb	r2, [r3, #3]
 800c770:	68a2      	ldr	r2, [r4, #8]
 800c772:	6923      	ldr	r3, [r4, #16]
 800c774:	3204      	adds	r2, #4
 800c776:	3304      	adds	r3, #4
 800c778:	2104      	movs	r1, #4
 800c77a:	60a2      	str	r2, [r4, #8]
 800c77c:	6123      	str	r3, [r4, #16]
 800c77e:	7561      	strb	r1, [r4, #21]
 800c780:	7da0      	ldrb	r0, [r4, #22]
 800c782:	f080 0001 	eor.w	r0, r0, #1
 800c786:	b003      	add	sp, #12
 800c788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c78c:	9a01      	ldr	r2, [sp, #4]
 800c78e:	601a      	str	r2, [r3, #0]
 800c790:	e7ee      	b.n	800c770 <ucdr_serialize_endian_uint32_t+0xc0>
 800c792:	68a2      	ldr	r2, [r4, #8]
 800c794:	6923      	ldr	r3, [r4, #16]
 800c796:	7da0      	ldrb	r0, [r4, #22]
 800c798:	f884 8015 	strb.w	r8, [r4, #21]
 800c79c:	1bd2      	subs	r2, r2, r7
 800c79e:	1bdb      	subs	r3, r3, r7
 800c7a0:	f080 0001 	eor.w	r0, r0, #1
 800c7a4:	60a2      	str	r2, [r4, #8]
 800c7a6:	6123      	str	r3, [r4, #16]
 800c7a8:	b003      	add	sp, #12
 800c7aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7ae:	68a3      	ldr	r3, [r4, #8]
 800c7b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c7b4:	701a      	strb	r2, [r3, #0]
 800c7b6:	68a3      	ldr	r3, [r4, #8]
 800c7b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c7bc:	701a      	strb	r2, [r3, #0]
 800c7be:	68a3      	ldr	r3, [r4, #8]
 800c7c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c7c4:	701a      	strb	r2, [r3, #0]
 800c7c6:	e7ad      	b.n	800c724 <ucdr_serialize_endian_uint32_t+0x74>
 800c7c8:	ad01      	add	r5, sp, #4
 800c7ca:	4629      	mov	r1, r5
 800c7cc:	463a      	mov	r2, r7
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	f00a fb79 	bl	8016ec6 <memcpy>
 800c7d4:	68a0      	ldr	r0, [r4, #8]
 800c7d6:	464a      	mov	r2, r9
 800c7d8:	19e9      	adds	r1, r5, r7
 800c7da:	f00a fb74 	bl	8016ec6 <memcpy>
 800c7de:	e7a1      	b.n	800c724 <ucdr_serialize_endian_uint32_t+0x74>

0800c7e0 <ucdr_deserialize_uint32_t>:
 800c7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7e4:	460d      	mov	r5, r1
 800c7e6:	2104      	movs	r1, #4
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	f000 fc6b 	bl	800d0c4 <ucdr_buffer_alignment>
 800c7ee:	4601      	mov	r1, r0
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c7f6:	f000 fca9 	bl	800d14c <ucdr_advance_buffer>
 800c7fa:	2104      	movs	r1, #4
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f000 fc01 	bl	800d004 <ucdr_check_buffer_available_for>
 800c802:	2800      	cmp	r0, #0
 800c804:	d138      	bne.n	800c878 <ucdr_deserialize_uint32_t+0x98>
 800c806:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c80a:	42b7      	cmp	r7, r6
 800c80c:	d92f      	bls.n	800c86e <ucdr_deserialize_uint32_t+0x8e>
 800c80e:	6923      	ldr	r3, [r4, #16]
 800c810:	60a7      	str	r7, [r4, #8]
 800c812:	1bbf      	subs	r7, r7, r6
 800c814:	443b      	add	r3, r7
 800c816:	f1c7 0904 	rsb	r9, r7, #4
 800c81a:	6123      	str	r3, [r4, #16]
 800c81c:	4649      	mov	r1, r9
 800c81e:	4620      	mov	r0, r4
 800c820:	f000 fbfc 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c824:	2800      	cmp	r0, #0
 800c826:	d046      	beq.n	800c8b6 <ucdr_deserialize_uint32_t+0xd6>
 800c828:	7d23      	ldrb	r3, [r4, #20]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d05c      	beq.n	800c8e8 <ucdr_deserialize_uint32_t+0x108>
 800c82e:	78f3      	ldrb	r3, [r6, #3]
 800c830:	702b      	strb	r3, [r5, #0]
 800c832:	2f00      	cmp	r7, #0
 800c834:	d04c      	beq.n	800c8d0 <ucdr_deserialize_uint32_t+0xf0>
 800c836:	78b3      	ldrb	r3, [r6, #2]
 800c838:	706b      	strb	r3, [r5, #1]
 800c83a:	2f01      	cmp	r7, #1
 800c83c:	f105 0302 	add.w	r3, r5, #2
 800c840:	d04a      	beq.n	800c8d8 <ucdr_deserialize_uint32_t+0xf8>
 800c842:	7873      	ldrb	r3, [r6, #1]
 800c844:	70ab      	strb	r3, [r5, #2]
 800c846:	2f02      	cmp	r7, #2
 800c848:	f105 0303 	add.w	r3, r5, #3
 800c84c:	d048      	beq.n	800c8e0 <ucdr_deserialize_uint32_t+0x100>
 800c84e:	7833      	ldrb	r3, [r6, #0]
 800c850:	70eb      	strb	r3, [r5, #3]
 800c852:	6923      	ldr	r3, [r4, #16]
 800c854:	68a2      	ldr	r2, [r4, #8]
 800c856:	7da0      	ldrb	r0, [r4, #22]
 800c858:	2104      	movs	r1, #4
 800c85a:	3304      	adds	r3, #4
 800c85c:	444a      	add	r2, r9
 800c85e:	1bdb      	subs	r3, r3, r7
 800c860:	7561      	strb	r1, [r4, #21]
 800c862:	60a2      	str	r2, [r4, #8]
 800c864:	6123      	str	r3, [r4, #16]
 800c866:	f080 0001 	eor.w	r0, r0, #1
 800c86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c86e:	2104      	movs	r1, #4
 800c870:	4620      	mov	r0, r4
 800c872:	f000 fbd3 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c876:	b1b0      	cbz	r0, 800c8a6 <ucdr_deserialize_uint32_t+0xc6>
 800c878:	7d23      	ldrb	r3, [r4, #20]
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	68a3      	ldr	r3, [r4, #8]
 800c87e:	d017      	beq.n	800c8b0 <ucdr_deserialize_uint32_t+0xd0>
 800c880:	78db      	ldrb	r3, [r3, #3]
 800c882:	702b      	strb	r3, [r5, #0]
 800c884:	68a3      	ldr	r3, [r4, #8]
 800c886:	789b      	ldrb	r3, [r3, #2]
 800c888:	706b      	strb	r3, [r5, #1]
 800c88a:	68a3      	ldr	r3, [r4, #8]
 800c88c:	785b      	ldrb	r3, [r3, #1]
 800c88e:	70ab      	strb	r3, [r5, #2]
 800c890:	68a3      	ldr	r3, [r4, #8]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	70eb      	strb	r3, [r5, #3]
 800c896:	68a2      	ldr	r2, [r4, #8]
 800c898:	6923      	ldr	r3, [r4, #16]
 800c89a:	3204      	adds	r2, #4
 800c89c:	3304      	adds	r3, #4
 800c89e:	2104      	movs	r1, #4
 800c8a0:	60a2      	str	r2, [r4, #8]
 800c8a2:	6123      	str	r3, [r4, #16]
 800c8a4:	7561      	strb	r1, [r4, #21]
 800c8a6:	7da0      	ldrb	r0, [r4, #22]
 800c8a8:	f080 0001 	eor.w	r0, r0, #1
 800c8ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	602b      	str	r3, [r5, #0]
 800c8b4:	e7ef      	b.n	800c896 <ucdr_deserialize_uint32_t+0xb6>
 800c8b6:	68a2      	ldr	r2, [r4, #8]
 800c8b8:	6923      	ldr	r3, [r4, #16]
 800c8ba:	7da0      	ldrb	r0, [r4, #22]
 800c8bc:	f884 8015 	strb.w	r8, [r4, #21]
 800c8c0:	1bd2      	subs	r2, r2, r7
 800c8c2:	1bdb      	subs	r3, r3, r7
 800c8c4:	60a2      	str	r2, [r4, #8]
 800c8c6:	6123      	str	r3, [r4, #16]
 800c8c8:	f080 0001 	eor.w	r0, r0, #1
 800c8cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8d0:	68a3      	ldr	r3, [r4, #8]
 800c8d2:	789b      	ldrb	r3, [r3, #2]
 800c8d4:	706b      	strb	r3, [r5, #1]
 800c8d6:	1cab      	adds	r3, r5, #2
 800c8d8:	68a2      	ldr	r2, [r4, #8]
 800c8da:	7852      	ldrb	r2, [r2, #1]
 800c8dc:	f803 2b01 	strb.w	r2, [r3], #1
 800c8e0:	68a2      	ldr	r2, [r4, #8]
 800c8e2:	7812      	ldrb	r2, [r2, #0]
 800c8e4:	701a      	strb	r2, [r3, #0]
 800c8e6:	e7b4      	b.n	800c852 <ucdr_deserialize_uint32_t+0x72>
 800c8e8:	4631      	mov	r1, r6
 800c8ea:	463a      	mov	r2, r7
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	f00a faea 	bl	8016ec6 <memcpy>
 800c8f2:	68a1      	ldr	r1, [r4, #8]
 800c8f4:	464a      	mov	r2, r9
 800c8f6:	19e8      	adds	r0, r5, r7
 800c8f8:	f00a fae5 	bl	8016ec6 <memcpy>
 800c8fc:	e7a9      	b.n	800c852 <ucdr_deserialize_uint32_t+0x72>
 800c8fe:	bf00      	nop

0800c900 <ucdr_deserialize_endian_uint32_t>:
 800c900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c904:	460e      	mov	r6, r1
 800c906:	2104      	movs	r1, #4
 800c908:	4604      	mov	r4, r0
 800c90a:	4615      	mov	r5, r2
 800c90c:	f000 fbda 	bl	800d0c4 <ucdr_buffer_alignment>
 800c910:	4601      	mov	r1, r0
 800c912:	4620      	mov	r0, r4
 800c914:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c918:	f000 fc18 	bl	800d14c <ucdr_advance_buffer>
 800c91c:	2104      	movs	r1, #4
 800c91e:	4620      	mov	r0, r4
 800c920:	f000 fb70 	bl	800d004 <ucdr_check_buffer_available_for>
 800c924:	2800      	cmp	r0, #0
 800c926:	d13c      	bne.n	800c9a2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800c928:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800c92c:	42bb      	cmp	r3, r7
 800c92e:	d933      	bls.n	800c998 <ucdr_deserialize_endian_uint32_t+0x98>
 800c930:	eba3 0807 	sub.w	r8, r3, r7
 800c934:	60a3      	str	r3, [r4, #8]
 800c936:	6923      	ldr	r3, [r4, #16]
 800c938:	f1c8 0a04 	rsb	sl, r8, #4
 800c93c:	4443      	add	r3, r8
 800c93e:	6123      	str	r3, [r4, #16]
 800c940:	4651      	mov	r1, sl
 800c942:	4620      	mov	r0, r4
 800c944:	f000 fb6a 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c948:	2800      	cmp	r0, #0
 800c94a:	d048      	beq.n	800c9de <ucdr_deserialize_endian_uint32_t+0xde>
 800c94c:	2e01      	cmp	r6, #1
 800c94e:	d061      	beq.n	800ca14 <ucdr_deserialize_endian_uint32_t+0x114>
 800c950:	78fb      	ldrb	r3, [r7, #3]
 800c952:	702b      	strb	r3, [r5, #0]
 800c954:	f1b8 0f00 	cmp.w	r8, #0
 800c958:	d050      	beq.n	800c9fc <ucdr_deserialize_endian_uint32_t+0xfc>
 800c95a:	78bb      	ldrb	r3, [r7, #2]
 800c95c:	706b      	strb	r3, [r5, #1]
 800c95e:	f1b8 0f01 	cmp.w	r8, #1
 800c962:	f105 0302 	add.w	r3, r5, #2
 800c966:	d04d      	beq.n	800ca04 <ucdr_deserialize_endian_uint32_t+0x104>
 800c968:	787b      	ldrb	r3, [r7, #1]
 800c96a:	70ab      	strb	r3, [r5, #2]
 800c96c:	f1b8 0f02 	cmp.w	r8, #2
 800c970:	f105 0303 	add.w	r3, r5, #3
 800c974:	d04a      	beq.n	800ca0c <ucdr_deserialize_endian_uint32_t+0x10c>
 800c976:	783b      	ldrb	r3, [r7, #0]
 800c978:	70eb      	strb	r3, [r5, #3]
 800c97a:	6923      	ldr	r3, [r4, #16]
 800c97c:	68a2      	ldr	r2, [r4, #8]
 800c97e:	7da0      	ldrb	r0, [r4, #22]
 800c980:	2104      	movs	r1, #4
 800c982:	3304      	adds	r3, #4
 800c984:	4452      	add	r2, sl
 800c986:	eba3 0308 	sub.w	r3, r3, r8
 800c98a:	7561      	strb	r1, [r4, #21]
 800c98c:	60a2      	str	r2, [r4, #8]
 800c98e:	6123      	str	r3, [r4, #16]
 800c990:	f080 0001 	eor.w	r0, r0, #1
 800c994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c998:	2104      	movs	r1, #4
 800c99a:	4620      	mov	r0, r4
 800c99c:	f000 fb3e 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800c9a0:	b1a8      	cbz	r0, 800c9ce <ucdr_deserialize_endian_uint32_t+0xce>
 800c9a2:	2e01      	cmp	r6, #1
 800c9a4:	68a3      	ldr	r3, [r4, #8]
 800c9a6:	d017      	beq.n	800c9d8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800c9a8:	78db      	ldrb	r3, [r3, #3]
 800c9aa:	702b      	strb	r3, [r5, #0]
 800c9ac:	68a3      	ldr	r3, [r4, #8]
 800c9ae:	789b      	ldrb	r3, [r3, #2]
 800c9b0:	706b      	strb	r3, [r5, #1]
 800c9b2:	68a3      	ldr	r3, [r4, #8]
 800c9b4:	785b      	ldrb	r3, [r3, #1]
 800c9b6:	70ab      	strb	r3, [r5, #2]
 800c9b8:	68a3      	ldr	r3, [r4, #8]
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	70eb      	strb	r3, [r5, #3]
 800c9be:	68a2      	ldr	r2, [r4, #8]
 800c9c0:	6923      	ldr	r3, [r4, #16]
 800c9c2:	3204      	adds	r2, #4
 800c9c4:	3304      	adds	r3, #4
 800c9c6:	2104      	movs	r1, #4
 800c9c8:	60a2      	str	r2, [r4, #8]
 800c9ca:	6123      	str	r3, [r4, #16]
 800c9cc:	7561      	strb	r1, [r4, #21]
 800c9ce:	7da0      	ldrb	r0, [r4, #22]
 800c9d0:	f080 0001 	eor.w	r0, r0, #1
 800c9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	602b      	str	r3, [r5, #0]
 800c9dc:	e7ef      	b.n	800c9be <ucdr_deserialize_endian_uint32_t+0xbe>
 800c9de:	68a2      	ldr	r2, [r4, #8]
 800c9e0:	6923      	ldr	r3, [r4, #16]
 800c9e2:	7da0      	ldrb	r0, [r4, #22]
 800c9e4:	f884 9015 	strb.w	r9, [r4, #21]
 800c9e8:	eba2 0208 	sub.w	r2, r2, r8
 800c9ec:	eba3 0308 	sub.w	r3, r3, r8
 800c9f0:	60a2      	str	r2, [r4, #8]
 800c9f2:	6123      	str	r3, [r4, #16]
 800c9f4:	f080 0001 	eor.w	r0, r0, #1
 800c9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9fc:	68a3      	ldr	r3, [r4, #8]
 800c9fe:	789b      	ldrb	r3, [r3, #2]
 800ca00:	706b      	strb	r3, [r5, #1]
 800ca02:	1cab      	adds	r3, r5, #2
 800ca04:	68a2      	ldr	r2, [r4, #8]
 800ca06:	7852      	ldrb	r2, [r2, #1]
 800ca08:	f803 2b01 	strb.w	r2, [r3], #1
 800ca0c:	68a2      	ldr	r2, [r4, #8]
 800ca0e:	7812      	ldrb	r2, [r2, #0]
 800ca10:	701a      	strb	r2, [r3, #0]
 800ca12:	e7b2      	b.n	800c97a <ucdr_deserialize_endian_uint32_t+0x7a>
 800ca14:	4639      	mov	r1, r7
 800ca16:	4642      	mov	r2, r8
 800ca18:	4628      	mov	r0, r5
 800ca1a:	f00a fa54 	bl	8016ec6 <memcpy>
 800ca1e:	68a1      	ldr	r1, [r4, #8]
 800ca20:	4652      	mov	r2, sl
 800ca22:	eb05 0008 	add.w	r0, r5, r8
 800ca26:	f00a fa4e 	bl	8016ec6 <memcpy>
 800ca2a:	e7a6      	b.n	800c97a <ucdr_deserialize_endian_uint32_t+0x7a>

0800ca2c <ucdr_serialize_uint64_t>:
 800ca2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca30:	2108      	movs	r1, #8
 800ca32:	b082      	sub	sp, #8
 800ca34:	4604      	mov	r4, r0
 800ca36:	e9cd 2300 	strd	r2, r3, [sp]
 800ca3a:	f000 fb43 	bl	800d0c4 <ucdr_buffer_alignment>
 800ca3e:	4601      	mov	r1, r0
 800ca40:	4620      	mov	r0, r4
 800ca42:	7d67      	ldrb	r7, [r4, #21]
 800ca44:	f000 fb82 	bl	800d14c <ucdr_advance_buffer>
 800ca48:	2108      	movs	r1, #8
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f000 fada 	bl	800d004 <ucdr_check_buffer_available_for>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d14e      	bne.n	800caf2 <ucdr_serialize_uint64_t+0xc6>
 800ca54:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ca58:	42ab      	cmp	r3, r5
 800ca5a:	d945      	bls.n	800cae8 <ucdr_serialize_uint64_t+0xbc>
 800ca5c:	1b5e      	subs	r6, r3, r5
 800ca5e:	60a3      	str	r3, [r4, #8]
 800ca60:	6923      	ldr	r3, [r4, #16]
 800ca62:	f1c6 0808 	rsb	r8, r6, #8
 800ca66:	4433      	add	r3, r6
 800ca68:	6123      	str	r3, [r4, #16]
 800ca6a:	4641      	mov	r1, r8
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f000 fad5 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d074      	beq.n	800cb60 <ucdr_serialize_uint64_t+0x134>
 800ca76:	7d23      	ldrb	r3, [r4, #20]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	f000 809b 	beq.w	800cbb4 <ucdr_serialize_uint64_t+0x188>
 800ca7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca82:	702b      	strb	r3, [r5, #0]
 800ca84:	2e00      	cmp	r6, #0
 800ca86:	d078      	beq.n	800cb7a <ucdr_serialize_uint64_t+0x14e>
 800ca88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca8c:	706b      	strb	r3, [r5, #1]
 800ca8e:	2e01      	cmp	r6, #1
 800ca90:	d077      	beq.n	800cb82 <ucdr_serialize_uint64_t+0x156>
 800ca92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ca96:	70ab      	strb	r3, [r5, #2]
 800ca98:	2e02      	cmp	r6, #2
 800ca9a:	d076      	beq.n	800cb8a <ucdr_serialize_uint64_t+0x15e>
 800ca9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800caa0:	70eb      	strb	r3, [r5, #3]
 800caa2:	2e03      	cmp	r6, #3
 800caa4:	d075      	beq.n	800cb92 <ucdr_serialize_uint64_t+0x166>
 800caa6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800caaa:	712b      	strb	r3, [r5, #4]
 800caac:	2e04      	cmp	r6, #4
 800caae:	d074      	beq.n	800cb9a <ucdr_serialize_uint64_t+0x16e>
 800cab0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800cab4:	716b      	strb	r3, [r5, #5]
 800cab6:	2e05      	cmp	r6, #5
 800cab8:	d073      	beq.n	800cba2 <ucdr_serialize_uint64_t+0x176>
 800caba:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800cabe:	71ab      	strb	r3, [r5, #6]
 800cac0:	2e06      	cmp	r6, #6
 800cac2:	d072      	beq.n	800cbaa <ucdr_serialize_uint64_t+0x17e>
 800cac4:	f89d 3000 	ldrb.w	r3, [sp]
 800cac8:	71eb      	strb	r3, [r5, #7]
 800caca:	6923      	ldr	r3, [r4, #16]
 800cacc:	68a2      	ldr	r2, [r4, #8]
 800cace:	7da0      	ldrb	r0, [r4, #22]
 800cad0:	3308      	adds	r3, #8
 800cad2:	1b9e      	subs	r6, r3, r6
 800cad4:	4442      	add	r2, r8
 800cad6:	2308      	movs	r3, #8
 800cad8:	f080 0001 	eor.w	r0, r0, #1
 800cadc:	60a2      	str	r2, [r4, #8]
 800cade:	6126      	str	r6, [r4, #16]
 800cae0:	7563      	strb	r3, [r4, #21]
 800cae2:	b002      	add	sp, #8
 800cae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae8:	2108      	movs	r1, #8
 800caea:	4620      	mov	r0, r4
 800caec:	f000 fa96 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800caf0:	b350      	cbz	r0, 800cb48 <ucdr_serialize_uint64_t+0x11c>
 800caf2:	7d23      	ldrb	r3, [r4, #20]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d02d      	beq.n	800cb54 <ucdr_serialize_uint64_t+0x128>
 800caf8:	68a3      	ldr	r3, [r4, #8]
 800cafa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cafe:	701a      	strb	r2, [r3, #0]
 800cb00:	68a3      	ldr	r3, [r4, #8]
 800cb02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb06:	705a      	strb	r2, [r3, #1]
 800cb08:	68a3      	ldr	r3, [r4, #8]
 800cb0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cb0e:	709a      	strb	r2, [r3, #2]
 800cb10:	68a3      	ldr	r3, [r4, #8]
 800cb12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cb16:	70da      	strb	r2, [r3, #3]
 800cb18:	68a3      	ldr	r3, [r4, #8]
 800cb1a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cb1e:	711a      	strb	r2, [r3, #4]
 800cb20:	68a3      	ldr	r3, [r4, #8]
 800cb22:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cb26:	715a      	strb	r2, [r3, #5]
 800cb28:	68a3      	ldr	r3, [r4, #8]
 800cb2a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cb2e:	719a      	strb	r2, [r3, #6]
 800cb30:	68a3      	ldr	r3, [r4, #8]
 800cb32:	f89d 2000 	ldrb.w	r2, [sp]
 800cb36:	71da      	strb	r2, [r3, #7]
 800cb38:	68a2      	ldr	r2, [r4, #8]
 800cb3a:	6923      	ldr	r3, [r4, #16]
 800cb3c:	3208      	adds	r2, #8
 800cb3e:	3308      	adds	r3, #8
 800cb40:	2108      	movs	r1, #8
 800cb42:	60a2      	str	r2, [r4, #8]
 800cb44:	6123      	str	r3, [r4, #16]
 800cb46:	7561      	strb	r1, [r4, #21]
 800cb48:	7da0      	ldrb	r0, [r4, #22]
 800cb4a:	f080 0001 	eor.w	r0, r0, #1
 800cb4e:	b002      	add	sp, #8
 800cb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb54:	466b      	mov	r3, sp
 800cb56:	cb03      	ldmia	r3!, {r0, r1}
 800cb58:	68a3      	ldr	r3, [r4, #8]
 800cb5a:	6018      	str	r0, [r3, #0]
 800cb5c:	6059      	str	r1, [r3, #4]
 800cb5e:	e7eb      	b.n	800cb38 <ucdr_serialize_uint64_t+0x10c>
 800cb60:	68a2      	ldr	r2, [r4, #8]
 800cb62:	6923      	ldr	r3, [r4, #16]
 800cb64:	7da0      	ldrb	r0, [r4, #22]
 800cb66:	7567      	strb	r7, [r4, #21]
 800cb68:	1b92      	subs	r2, r2, r6
 800cb6a:	1b9b      	subs	r3, r3, r6
 800cb6c:	f080 0001 	eor.w	r0, r0, #1
 800cb70:	60a2      	str	r2, [r4, #8]
 800cb72:	6123      	str	r3, [r4, #16]
 800cb74:	b002      	add	sp, #8
 800cb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb7a:	68a3      	ldr	r3, [r4, #8]
 800cb7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb80:	701a      	strb	r2, [r3, #0]
 800cb82:	68a3      	ldr	r3, [r4, #8]
 800cb84:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cb88:	701a      	strb	r2, [r3, #0]
 800cb8a:	68a3      	ldr	r3, [r4, #8]
 800cb8c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cb90:	701a      	strb	r2, [r3, #0]
 800cb92:	68a3      	ldr	r3, [r4, #8]
 800cb94:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cb98:	701a      	strb	r2, [r3, #0]
 800cb9a:	68a3      	ldr	r3, [r4, #8]
 800cb9c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cba0:	701a      	strb	r2, [r3, #0]
 800cba2:	68a3      	ldr	r3, [r4, #8]
 800cba4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cba8:	701a      	strb	r2, [r3, #0]
 800cbaa:	68a3      	ldr	r3, [r4, #8]
 800cbac:	f89d 2000 	ldrb.w	r2, [sp]
 800cbb0:	701a      	strb	r2, [r3, #0]
 800cbb2:	e78a      	b.n	800caca <ucdr_serialize_uint64_t+0x9e>
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	466d      	mov	r5, sp
 800cbb8:	4629      	mov	r1, r5
 800cbba:	4632      	mov	r2, r6
 800cbbc:	f00a f983 	bl	8016ec6 <memcpy>
 800cbc0:	68a0      	ldr	r0, [r4, #8]
 800cbc2:	4642      	mov	r2, r8
 800cbc4:	19a9      	adds	r1, r5, r6
 800cbc6:	f00a f97e 	bl	8016ec6 <memcpy>
 800cbca:	e77e      	b.n	800caca <ucdr_serialize_uint64_t+0x9e>

0800cbcc <ucdr_serialize_int16_t>:
 800cbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd0:	b082      	sub	sp, #8
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	2102      	movs	r1, #2
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cbdc:	f000 fa72 	bl	800d0c4 <ucdr_buffer_alignment>
 800cbe0:	4601      	mov	r1, r0
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	7d67      	ldrb	r7, [r4, #21]
 800cbe6:	f000 fab1 	bl	800d14c <ucdr_advance_buffer>
 800cbea:	2102      	movs	r1, #2
 800cbec:	4620      	mov	r0, r4
 800cbee:	f000 fa09 	bl	800d004 <ucdr_check_buffer_available_for>
 800cbf2:	bb78      	cbnz	r0, 800cc54 <ucdr_serialize_int16_t+0x88>
 800cbf4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cbf8:	42ab      	cmp	r3, r5
 800cbfa:	d926      	bls.n	800cc4a <ucdr_serialize_int16_t+0x7e>
 800cbfc:	1b5e      	subs	r6, r3, r5
 800cbfe:	60a3      	str	r3, [r4, #8]
 800cc00:	6923      	ldr	r3, [r4, #16]
 800cc02:	f1c6 0802 	rsb	r8, r6, #2
 800cc06:	4433      	add	r3, r6
 800cc08:	6123      	str	r3, [r4, #16]
 800cc0a:	4641      	mov	r1, r8
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	f000 fa05 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d03b      	beq.n	800cc8e <ucdr_serialize_int16_t+0xc2>
 800cc16:	7d23      	ldrb	r3, [r4, #20]
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d04a      	beq.n	800ccb2 <ucdr_serialize_int16_t+0xe6>
 800cc1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc20:	702b      	strb	r3, [r5, #0]
 800cc22:	2e00      	cmp	r6, #0
 800cc24:	d040      	beq.n	800cca8 <ucdr_serialize_int16_t+0xdc>
 800cc26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cc2a:	706b      	strb	r3, [r5, #1]
 800cc2c:	6923      	ldr	r3, [r4, #16]
 800cc2e:	68a2      	ldr	r2, [r4, #8]
 800cc30:	7da0      	ldrb	r0, [r4, #22]
 800cc32:	3302      	adds	r3, #2
 800cc34:	1b9e      	subs	r6, r3, r6
 800cc36:	4442      	add	r2, r8
 800cc38:	2302      	movs	r3, #2
 800cc3a:	f080 0001 	eor.w	r0, r0, #1
 800cc3e:	60a2      	str	r2, [r4, #8]
 800cc40:	6126      	str	r6, [r4, #16]
 800cc42:	7563      	strb	r3, [r4, #21]
 800cc44:	b002      	add	sp, #8
 800cc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc4a:	2102      	movs	r1, #2
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f000 f9e5 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800cc52:	b190      	cbz	r0, 800cc7a <ucdr_serialize_int16_t+0xae>
 800cc54:	7d23      	ldrb	r3, [r4, #20]
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	68a3      	ldr	r3, [r4, #8]
 800cc5a:	d014      	beq.n	800cc86 <ucdr_serialize_int16_t+0xba>
 800cc5c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cc60:	701a      	strb	r2, [r3, #0]
 800cc62:	68a3      	ldr	r3, [r4, #8]
 800cc64:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cc68:	705a      	strb	r2, [r3, #1]
 800cc6a:	68a2      	ldr	r2, [r4, #8]
 800cc6c:	6923      	ldr	r3, [r4, #16]
 800cc6e:	3202      	adds	r2, #2
 800cc70:	3302      	adds	r3, #2
 800cc72:	2102      	movs	r1, #2
 800cc74:	60a2      	str	r2, [r4, #8]
 800cc76:	6123      	str	r3, [r4, #16]
 800cc78:	7561      	strb	r1, [r4, #21]
 800cc7a:	7da0      	ldrb	r0, [r4, #22]
 800cc7c:	f080 0001 	eor.w	r0, r0, #1
 800cc80:	b002      	add	sp, #8
 800cc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc86:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cc8a:	801a      	strh	r2, [r3, #0]
 800cc8c:	e7ed      	b.n	800cc6a <ucdr_serialize_int16_t+0x9e>
 800cc8e:	68a2      	ldr	r2, [r4, #8]
 800cc90:	6923      	ldr	r3, [r4, #16]
 800cc92:	7da0      	ldrb	r0, [r4, #22]
 800cc94:	7567      	strb	r7, [r4, #21]
 800cc96:	1b92      	subs	r2, r2, r6
 800cc98:	1b9b      	subs	r3, r3, r6
 800cc9a:	f080 0001 	eor.w	r0, r0, #1
 800cc9e:	60a2      	str	r2, [r4, #8]
 800cca0:	6123      	str	r3, [r4, #16]
 800cca2:	b002      	add	sp, #8
 800cca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cca8:	68a3      	ldr	r3, [r4, #8]
 800ccaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ccae:	701a      	strb	r2, [r3, #0]
 800ccb0:	e7bc      	b.n	800cc2c <ucdr_serialize_int16_t+0x60>
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	f10d 0506 	add.w	r5, sp, #6
 800ccb8:	4629      	mov	r1, r5
 800ccba:	4632      	mov	r2, r6
 800ccbc:	f00a f903 	bl	8016ec6 <memcpy>
 800ccc0:	68a0      	ldr	r0, [r4, #8]
 800ccc2:	4642      	mov	r2, r8
 800ccc4:	19a9      	adds	r1, r5, r6
 800ccc6:	f00a f8fe 	bl	8016ec6 <memcpy>
 800ccca:	e7af      	b.n	800cc2c <ucdr_serialize_int16_t+0x60>

0800cccc <ucdr_deserialize_int16_t>:
 800cccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccd0:	460d      	mov	r5, r1
 800ccd2:	2102      	movs	r1, #2
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	f000 f9f5 	bl	800d0c4 <ucdr_buffer_alignment>
 800ccda:	4601      	mov	r1, r0
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cce2:	f000 fa33 	bl	800d14c <ucdr_advance_buffer>
 800cce6:	2102      	movs	r1, #2
 800cce8:	4620      	mov	r0, r4
 800ccea:	f000 f98b 	bl	800d004 <ucdr_check_buffer_available_for>
 800ccee:	bb60      	cbnz	r0, 800cd4a <ucdr_deserialize_int16_t+0x7e>
 800ccf0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ccf4:	42be      	cmp	r6, r7
 800ccf6:	d923      	bls.n	800cd40 <ucdr_deserialize_int16_t+0x74>
 800ccf8:	6923      	ldr	r3, [r4, #16]
 800ccfa:	60a6      	str	r6, [r4, #8]
 800ccfc:	1bf6      	subs	r6, r6, r7
 800ccfe:	4433      	add	r3, r6
 800cd00:	f1c6 0902 	rsb	r9, r6, #2
 800cd04:	6123      	str	r3, [r4, #16]
 800cd06:	4649      	mov	r1, r9
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f000 f987 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d034      	beq.n	800cd7c <ucdr_deserialize_int16_t+0xb0>
 800cd12:	7d23      	ldrb	r3, [r4, #20]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d042      	beq.n	800cd9e <ucdr_deserialize_int16_t+0xd2>
 800cd18:	787b      	ldrb	r3, [r7, #1]
 800cd1a:	702b      	strb	r3, [r5, #0]
 800cd1c:	2e00      	cmp	r6, #0
 800cd1e:	d03a      	beq.n	800cd96 <ucdr_deserialize_int16_t+0xca>
 800cd20:	783b      	ldrb	r3, [r7, #0]
 800cd22:	706b      	strb	r3, [r5, #1]
 800cd24:	6923      	ldr	r3, [r4, #16]
 800cd26:	68a2      	ldr	r2, [r4, #8]
 800cd28:	7da0      	ldrb	r0, [r4, #22]
 800cd2a:	2102      	movs	r1, #2
 800cd2c:	3302      	adds	r3, #2
 800cd2e:	444a      	add	r2, r9
 800cd30:	1b9b      	subs	r3, r3, r6
 800cd32:	7561      	strb	r1, [r4, #21]
 800cd34:	60a2      	str	r2, [r4, #8]
 800cd36:	6123      	str	r3, [r4, #16]
 800cd38:	f080 0001 	eor.w	r0, r0, #1
 800cd3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd40:	2102      	movs	r1, #2
 800cd42:	4620      	mov	r0, r4
 800cd44:	f000 f96a 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800cd48:	b180      	cbz	r0, 800cd6c <ucdr_deserialize_int16_t+0xa0>
 800cd4a:	7d23      	ldrb	r3, [r4, #20]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	68a3      	ldr	r3, [r4, #8]
 800cd50:	d011      	beq.n	800cd76 <ucdr_deserialize_int16_t+0xaa>
 800cd52:	785b      	ldrb	r3, [r3, #1]
 800cd54:	702b      	strb	r3, [r5, #0]
 800cd56:	68a3      	ldr	r3, [r4, #8]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	706b      	strb	r3, [r5, #1]
 800cd5c:	68a2      	ldr	r2, [r4, #8]
 800cd5e:	6923      	ldr	r3, [r4, #16]
 800cd60:	3202      	adds	r2, #2
 800cd62:	3302      	adds	r3, #2
 800cd64:	2102      	movs	r1, #2
 800cd66:	60a2      	str	r2, [r4, #8]
 800cd68:	6123      	str	r3, [r4, #16]
 800cd6a:	7561      	strb	r1, [r4, #21]
 800cd6c:	7da0      	ldrb	r0, [r4, #22]
 800cd6e:	f080 0001 	eor.w	r0, r0, #1
 800cd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd76:	881b      	ldrh	r3, [r3, #0]
 800cd78:	802b      	strh	r3, [r5, #0]
 800cd7a:	e7ef      	b.n	800cd5c <ucdr_deserialize_int16_t+0x90>
 800cd7c:	68a2      	ldr	r2, [r4, #8]
 800cd7e:	6923      	ldr	r3, [r4, #16]
 800cd80:	7da0      	ldrb	r0, [r4, #22]
 800cd82:	f884 8015 	strb.w	r8, [r4, #21]
 800cd86:	1b92      	subs	r2, r2, r6
 800cd88:	1b9b      	subs	r3, r3, r6
 800cd8a:	60a2      	str	r2, [r4, #8]
 800cd8c:	6123      	str	r3, [r4, #16]
 800cd8e:	f080 0001 	eor.w	r0, r0, #1
 800cd92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd96:	68a3      	ldr	r3, [r4, #8]
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	706b      	strb	r3, [r5, #1]
 800cd9c:	e7c2      	b.n	800cd24 <ucdr_deserialize_int16_t+0x58>
 800cd9e:	4639      	mov	r1, r7
 800cda0:	4632      	mov	r2, r6
 800cda2:	4628      	mov	r0, r5
 800cda4:	f00a f88f 	bl	8016ec6 <memcpy>
 800cda8:	68a1      	ldr	r1, [r4, #8]
 800cdaa:	464a      	mov	r2, r9
 800cdac:	19a8      	adds	r0, r5, r6
 800cdae:	f00a f88a 	bl	8016ec6 <memcpy>
 800cdb2:	e7b7      	b.n	800cd24 <ucdr_deserialize_int16_t+0x58>

0800cdb4 <ucdr_serialize_int32_t>:
 800cdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb8:	b082      	sub	sp, #8
 800cdba:	4604      	mov	r4, r0
 800cdbc:	9101      	str	r1, [sp, #4]
 800cdbe:	2104      	movs	r1, #4
 800cdc0:	f000 f980 	bl	800d0c4 <ucdr_buffer_alignment>
 800cdc4:	4601      	mov	r1, r0
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	7d67      	ldrb	r7, [r4, #21]
 800cdca:	f000 f9bf 	bl	800d14c <ucdr_advance_buffer>
 800cdce:	2104      	movs	r1, #4
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f000 f917 	bl	800d004 <ucdr_check_buffer_available_for>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d139      	bne.n	800ce4e <ucdr_serialize_int32_t+0x9a>
 800cdda:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cdde:	42ab      	cmp	r3, r5
 800cde0:	d930      	bls.n	800ce44 <ucdr_serialize_int32_t+0x90>
 800cde2:	1b5e      	subs	r6, r3, r5
 800cde4:	60a3      	str	r3, [r4, #8]
 800cde6:	6923      	ldr	r3, [r4, #16]
 800cde8:	f1c6 0804 	rsb	r8, r6, #4
 800cdec:	4433      	add	r3, r6
 800cdee:	6123      	str	r3, [r4, #16]
 800cdf0:	4641      	mov	r1, r8
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f000 f912 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d04c      	beq.n	800ce96 <ucdr_serialize_int32_t+0xe2>
 800cdfc:	7d23      	ldrb	r3, [r4, #20]
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d063      	beq.n	800ceca <ucdr_serialize_int32_t+0x116>
 800ce02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce06:	702b      	strb	r3, [r5, #0]
 800ce08:	2e00      	cmp	r6, #0
 800ce0a:	d051      	beq.n	800ceb0 <ucdr_serialize_int32_t+0xfc>
 800ce0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ce10:	706b      	strb	r3, [r5, #1]
 800ce12:	2e01      	cmp	r6, #1
 800ce14:	d050      	beq.n	800ceb8 <ucdr_serialize_int32_t+0x104>
 800ce16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ce1a:	70ab      	strb	r3, [r5, #2]
 800ce1c:	2e02      	cmp	r6, #2
 800ce1e:	d04f      	beq.n	800cec0 <ucdr_serialize_int32_t+0x10c>
 800ce20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce24:	70eb      	strb	r3, [r5, #3]
 800ce26:	6923      	ldr	r3, [r4, #16]
 800ce28:	68a2      	ldr	r2, [r4, #8]
 800ce2a:	7da0      	ldrb	r0, [r4, #22]
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	1b9e      	subs	r6, r3, r6
 800ce30:	4442      	add	r2, r8
 800ce32:	2304      	movs	r3, #4
 800ce34:	f080 0001 	eor.w	r0, r0, #1
 800ce38:	60a2      	str	r2, [r4, #8]
 800ce3a:	6126      	str	r6, [r4, #16]
 800ce3c:	7563      	strb	r3, [r4, #21]
 800ce3e:	b002      	add	sp, #8
 800ce40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce44:	2104      	movs	r1, #4
 800ce46:	4620      	mov	r0, r4
 800ce48:	f000 f8e8 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800ce4c:	b1d0      	cbz	r0, 800ce84 <ucdr_serialize_int32_t+0xd0>
 800ce4e:	7d23      	ldrb	r3, [r4, #20]
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	68a3      	ldr	r3, [r4, #8]
 800ce54:	d01c      	beq.n	800ce90 <ucdr_serialize_int32_t+0xdc>
 800ce56:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ce5a:	701a      	strb	r2, [r3, #0]
 800ce5c:	68a3      	ldr	r3, [r4, #8]
 800ce5e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ce62:	705a      	strb	r2, [r3, #1]
 800ce64:	68a3      	ldr	r3, [r4, #8]
 800ce66:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ce6a:	709a      	strb	r2, [r3, #2]
 800ce6c:	68a3      	ldr	r3, [r4, #8]
 800ce6e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ce72:	70da      	strb	r2, [r3, #3]
 800ce74:	68a2      	ldr	r2, [r4, #8]
 800ce76:	6923      	ldr	r3, [r4, #16]
 800ce78:	3204      	adds	r2, #4
 800ce7a:	3304      	adds	r3, #4
 800ce7c:	2104      	movs	r1, #4
 800ce7e:	60a2      	str	r2, [r4, #8]
 800ce80:	6123      	str	r3, [r4, #16]
 800ce82:	7561      	strb	r1, [r4, #21]
 800ce84:	7da0      	ldrb	r0, [r4, #22]
 800ce86:	f080 0001 	eor.w	r0, r0, #1
 800ce8a:	b002      	add	sp, #8
 800ce8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce90:	9a01      	ldr	r2, [sp, #4]
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	e7ee      	b.n	800ce74 <ucdr_serialize_int32_t+0xc0>
 800ce96:	68a2      	ldr	r2, [r4, #8]
 800ce98:	6923      	ldr	r3, [r4, #16]
 800ce9a:	7da0      	ldrb	r0, [r4, #22]
 800ce9c:	7567      	strb	r7, [r4, #21]
 800ce9e:	1b92      	subs	r2, r2, r6
 800cea0:	1b9b      	subs	r3, r3, r6
 800cea2:	f080 0001 	eor.w	r0, r0, #1
 800cea6:	60a2      	str	r2, [r4, #8]
 800cea8:	6123      	str	r3, [r4, #16]
 800ceaa:	b002      	add	sp, #8
 800ceac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb0:	68a3      	ldr	r3, [r4, #8]
 800ceb2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ceb6:	701a      	strb	r2, [r3, #0]
 800ceb8:	68a3      	ldr	r3, [r4, #8]
 800ceba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cebe:	701a      	strb	r2, [r3, #0]
 800cec0:	68a3      	ldr	r3, [r4, #8]
 800cec2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cec6:	701a      	strb	r2, [r3, #0]
 800cec8:	e7ad      	b.n	800ce26 <ucdr_serialize_int32_t+0x72>
 800ceca:	4628      	mov	r0, r5
 800cecc:	ad01      	add	r5, sp, #4
 800cece:	4629      	mov	r1, r5
 800ced0:	4632      	mov	r2, r6
 800ced2:	f009 fff8 	bl	8016ec6 <memcpy>
 800ced6:	68a0      	ldr	r0, [r4, #8]
 800ced8:	4642      	mov	r2, r8
 800ceda:	19a9      	adds	r1, r5, r6
 800cedc:	f009 fff3 	bl	8016ec6 <memcpy>
 800cee0:	e7a1      	b.n	800ce26 <ucdr_serialize_int32_t+0x72>
 800cee2:	bf00      	nop

0800cee4 <ucdr_deserialize_int32_t>:
 800cee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cee8:	460d      	mov	r5, r1
 800ceea:	2104      	movs	r1, #4
 800ceec:	4604      	mov	r4, r0
 800ceee:	f000 f8e9 	bl	800d0c4 <ucdr_buffer_alignment>
 800cef2:	4601      	mov	r1, r0
 800cef4:	4620      	mov	r0, r4
 800cef6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cefa:	f000 f927 	bl	800d14c <ucdr_advance_buffer>
 800cefe:	2104      	movs	r1, #4
 800cf00:	4620      	mov	r0, r4
 800cf02:	f000 f87f 	bl	800d004 <ucdr_check_buffer_available_for>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d138      	bne.n	800cf7c <ucdr_deserialize_int32_t+0x98>
 800cf0a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cf0e:	42b7      	cmp	r7, r6
 800cf10:	d92f      	bls.n	800cf72 <ucdr_deserialize_int32_t+0x8e>
 800cf12:	6923      	ldr	r3, [r4, #16]
 800cf14:	60a7      	str	r7, [r4, #8]
 800cf16:	1bbf      	subs	r7, r7, r6
 800cf18:	443b      	add	r3, r7
 800cf1a:	f1c7 0904 	rsb	r9, r7, #4
 800cf1e:	6123      	str	r3, [r4, #16]
 800cf20:	4649      	mov	r1, r9
 800cf22:	4620      	mov	r0, r4
 800cf24:	f000 f87a 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d046      	beq.n	800cfba <ucdr_deserialize_int32_t+0xd6>
 800cf2c:	7d23      	ldrb	r3, [r4, #20]
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d05c      	beq.n	800cfec <ucdr_deserialize_int32_t+0x108>
 800cf32:	78f3      	ldrb	r3, [r6, #3]
 800cf34:	702b      	strb	r3, [r5, #0]
 800cf36:	2f00      	cmp	r7, #0
 800cf38:	d04c      	beq.n	800cfd4 <ucdr_deserialize_int32_t+0xf0>
 800cf3a:	78b3      	ldrb	r3, [r6, #2]
 800cf3c:	706b      	strb	r3, [r5, #1]
 800cf3e:	2f01      	cmp	r7, #1
 800cf40:	f105 0302 	add.w	r3, r5, #2
 800cf44:	d04a      	beq.n	800cfdc <ucdr_deserialize_int32_t+0xf8>
 800cf46:	7873      	ldrb	r3, [r6, #1]
 800cf48:	70ab      	strb	r3, [r5, #2]
 800cf4a:	2f02      	cmp	r7, #2
 800cf4c:	f105 0303 	add.w	r3, r5, #3
 800cf50:	d048      	beq.n	800cfe4 <ucdr_deserialize_int32_t+0x100>
 800cf52:	7833      	ldrb	r3, [r6, #0]
 800cf54:	70eb      	strb	r3, [r5, #3]
 800cf56:	6923      	ldr	r3, [r4, #16]
 800cf58:	68a2      	ldr	r2, [r4, #8]
 800cf5a:	7da0      	ldrb	r0, [r4, #22]
 800cf5c:	2104      	movs	r1, #4
 800cf5e:	3304      	adds	r3, #4
 800cf60:	444a      	add	r2, r9
 800cf62:	1bdb      	subs	r3, r3, r7
 800cf64:	7561      	strb	r1, [r4, #21]
 800cf66:	60a2      	str	r2, [r4, #8]
 800cf68:	6123      	str	r3, [r4, #16]
 800cf6a:	f080 0001 	eor.w	r0, r0, #1
 800cf6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf72:	2104      	movs	r1, #4
 800cf74:	4620      	mov	r0, r4
 800cf76:	f000 f851 	bl	800d01c <ucdr_check_final_buffer_behavior>
 800cf7a:	b1b0      	cbz	r0, 800cfaa <ucdr_deserialize_int32_t+0xc6>
 800cf7c:	7d23      	ldrb	r3, [r4, #20]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	68a3      	ldr	r3, [r4, #8]
 800cf82:	d017      	beq.n	800cfb4 <ucdr_deserialize_int32_t+0xd0>
 800cf84:	78db      	ldrb	r3, [r3, #3]
 800cf86:	702b      	strb	r3, [r5, #0]
 800cf88:	68a3      	ldr	r3, [r4, #8]
 800cf8a:	789b      	ldrb	r3, [r3, #2]
 800cf8c:	706b      	strb	r3, [r5, #1]
 800cf8e:	68a3      	ldr	r3, [r4, #8]
 800cf90:	785b      	ldrb	r3, [r3, #1]
 800cf92:	70ab      	strb	r3, [r5, #2]
 800cf94:	68a3      	ldr	r3, [r4, #8]
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	70eb      	strb	r3, [r5, #3]
 800cf9a:	68a2      	ldr	r2, [r4, #8]
 800cf9c:	6923      	ldr	r3, [r4, #16]
 800cf9e:	3204      	adds	r2, #4
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	2104      	movs	r1, #4
 800cfa4:	60a2      	str	r2, [r4, #8]
 800cfa6:	6123      	str	r3, [r4, #16]
 800cfa8:	7561      	strb	r1, [r4, #21]
 800cfaa:	7da0      	ldrb	r0, [r4, #22]
 800cfac:	f080 0001 	eor.w	r0, r0, #1
 800cfb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	602b      	str	r3, [r5, #0]
 800cfb8:	e7ef      	b.n	800cf9a <ucdr_deserialize_int32_t+0xb6>
 800cfba:	68a2      	ldr	r2, [r4, #8]
 800cfbc:	6923      	ldr	r3, [r4, #16]
 800cfbe:	7da0      	ldrb	r0, [r4, #22]
 800cfc0:	f884 8015 	strb.w	r8, [r4, #21]
 800cfc4:	1bd2      	subs	r2, r2, r7
 800cfc6:	1bdb      	subs	r3, r3, r7
 800cfc8:	60a2      	str	r2, [r4, #8]
 800cfca:	6123      	str	r3, [r4, #16]
 800cfcc:	f080 0001 	eor.w	r0, r0, #1
 800cfd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfd4:	68a3      	ldr	r3, [r4, #8]
 800cfd6:	789b      	ldrb	r3, [r3, #2]
 800cfd8:	706b      	strb	r3, [r5, #1]
 800cfda:	1cab      	adds	r3, r5, #2
 800cfdc:	68a2      	ldr	r2, [r4, #8]
 800cfde:	7852      	ldrb	r2, [r2, #1]
 800cfe0:	f803 2b01 	strb.w	r2, [r3], #1
 800cfe4:	68a2      	ldr	r2, [r4, #8]
 800cfe6:	7812      	ldrb	r2, [r2, #0]
 800cfe8:	701a      	strb	r2, [r3, #0]
 800cfea:	e7b4      	b.n	800cf56 <ucdr_deserialize_int32_t+0x72>
 800cfec:	4631      	mov	r1, r6
 800cfee:	463a      	mov	r2, r7
 800cff0:	4628      	mov	r0, r5
 800cff2:	f009 ff68 	bl	8016ec6 <memcpy>
 800cff6:	68a1      	ldr	r1, [r4, #8]
 800cff8:	464a      	mov	r2, r9
 800cffa:	19e8      	adds	r0, r5, r7
 800cffc:	f009 ff63 	bl	8016ec6 <memcpy>
 800d000:	e7a9      	b.n	800cf56 <ucdr_deserialize_int32_t+0x72>
 800d002:	bf00      	nop

0800d004 <ucdr_check_buffer_available_for>:
 800d004:	7d83      	ldrb	r3, [r0, #22]
 800d006:	b93b      	cbnz	r3, 800d018 <ucdr_check_buffer_available_for+0x14>
 800d008:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800d00c:	4419      	add	r1, r3
 800d00e:	4288      	cmp	r0, r1
 800d010:	bf34      	ite	cc
 800d012:	2000      	movcc	r0, #0
 800d014:	2001      	movcs	r0, #1
 800d016:	4770      	bx	lr
 800d018:	2000      	movs	r0, #0
 800d01a:	4770      	bx	lr

0800d01c <ucdr_check_final_buffer_behavior>:
 800d01c:	7d83      	ldrb	r3, [r0, #22]
 800d01e:	b943      	cbnz	r3, 800d032 <ucdr_check_final_buffer_behavior+0x16>
 800d020:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800d024:	4291      	cmp	r1, r2
 800d026:	b510      	push	{r4, lr}
 800d028:	4604      	mov	r4, r0
 800d02a:	d205      	bcs.n	800d038 <ucdr_check_final_buffer_behavior+0x1c>
 800d02c:	2301      	movs	r3, #1
 800d02e:	4618      	mov	r0, r3
 800d030:	bd10      	pop	{r4, pc}
 800d032:	2300      	movs	r3, #0
 800d034:	4618      	mov	r0, r3
 800d036:	4770      	bx	lr
 800d038:	6982      	ldr	r2, [r0, #24]
 800d03a:	b13a      	cbz	r2, 800d04c <ucdr_check_final_buffer_behavior+0x30>
 800d03c:	69c1      	ldr	r1, [r0, #28]
 800d03e:	4790      	blx	r2
 800d040:	f080 0301 	eor.w	r3, r0, #1
 800d044:	b2db      	uxtb	r3, r3
 800d046:	75a0      	strb	r0, [r4, #22]
 800d048:	4618      	mov	r0, r3
 800d04a:	bd10      	pop	{r4, pc}
 800d04c:	2001      	movs	r0, #1
 800d04e:	75a0      	strb	r0, [r4, #22]
 800d050:	e7fa      	b.n	800d048 <ucdr_check_final_buffer_behavior+0x2c>
 800d052:	bf00      	nop

0800d054 <ucdr_set_on_full_buffer_callback>:
 800d054:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop

0800d05c <ucdr_init_buffer_origin_offset_endian>:
 800d05c:	b410      	push	{r4}
 800d05e:	9c01      	ldr	r4, [sp, #4]
 800d060:	6001      	str	r1, [r0, #0]
 800d062:	440a      	add	r2, r1
 800d064:	6042      	str	r2, [r0, #4]
 800d066:	190a      	adds	r2, r1, r4
 800d068:	441c      	add	r4, r3
 800d06a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800d06e:	6082      	str	r2, [r0, #8]
 800d070:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d074:	7503      	strb	r3, [r0, #20]
 800d076:	2200      	movs	r2, #0
 800d078:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800d07c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d080:	7542      	strb	r2, [r0, #21]
 800d082:	7582      	strb	r2, [r0, #22]
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop

0800d088 <ucdr_init_buffer_origin_offset>:
 800d088:	b510      	push	{r4, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	9c04      	ldr	r4, [sp, #16]
 800d08e:	9400      	str	r4, [sp, #0]
 800d090:	2401      	movs	r4, #1
 800d092:	9401      	str	r4, [sp, #4]
 800d094:	f7ff ffe2 	bl	800d05c <ucdr_init_buffer_origin_offset_endian>
 800d098:	b002      	add	sp, #8
 800d09a:	bd10      	pop	{r4, pc}

0800d09c <ucdr_init_buffer_origin>:
 800d09c:	b510      	push	{r4, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	2400      	movs	r4, #0
 800d0a2:	9400      	str	r4, [sp, #0]
 800d0a4:	f7ff fff0 	bl	800d088 <ucdr_init_buffer_origin_offset>
 800d0a8:	b002      	add	sp, #8
 800d0aa:	bd10      	pop	{r4, pc}

0800d0ac <ucdr_init_buffer>:
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	f7ff bff5 	b.w	800d09c <ucdr_init_buffer_origin>
 800d0b2:	bf00      	nop

0800d0b4 <ucdr_alignment>:
 800d0b4:	fbb0 f3f1 	udiv	r3, r0, r1
 800d0b8:	fb03 0011 	mls	r0, r3, r1, r0
 800d0bc:	1a08      	subs	r0, r1, r0
 800d0be:	3901      	subs	r1, #1
 800d0c0:	4008      	ands	r0, r1
 800d0c2:	4770      	bx	lr

0800d0c4 <ucdr_buffer_alignment>:
 800d0c4:	7d43      	ldrb	r3, [r0, #21]
 800d0c6:	428b      	cmp	r3, r1
 800d0c8:	d208      	bcs.n	800d0dc <ucdr_buffer_alignment+0x18>
 800d0ca:	6900      	ldr	r0, [r0, #16]
 800d0cc:	fbb0 f3f1 	udiv	r3, r0, r1
 800d0d0:	fb01 0013 	mls	r0, r1, r3, r0
 800d0d4:	1a08      	subs	r0, r1, r0
 800d0d6:	3901      	subs	r1, #1
 800d0d8:	4008      	ands	r0, r1
 800d0da:	4770      	bx	lr
 800d0dc:	2000      	movs	r0, #0
 800d0de:	4770      	bx	lr

0800d0e0 <ucdr_align_to>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	460d      	mov	r5, r1
 800d0e6:	f7ff ffed 	bl	800d0c4 <ucdr_buffer_alignment>
 800d0ea:	68a3      	ldr	r3, [r4, #8]
 800d0ec:	6921      	ldr	r1, [r4, #16]
 800d0ee:	7565      	strb	r5, [r4, #21]
 800d0f0:	181a      	adds	r2, r3, r0
 800d0f2:	6863      	ldr	r3, [r4, #4]
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	4408      	add	r0, r1
 800d0f8:	bf28      	it	cs
 800d0fa:	4613      	movcs	r3, r2
 800d0fc:	6120      	str	r0, [r4, #16]
 800d0fe:	60a3      	str	r3, [r4, #8]
 800d100:	bd38      	pop	{r3, r4, r5, pc}
 800d102:	bf00      	nop

0800d104 <ucdr_buffer_length>:
 800d104:	6882      	ldr	r2, [r0, #8]
 800d106:	6800      	ldr	r0, [r0, #0]
 800d108:	1a10      	subs	r0, r2, r0
 800d10a:	4770      	bx	lr

0800d10c <ucdr_buffer_remaining>:
 800d10c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800d110:	1a10      	subs	r0, r2, r0
 800d112:	4770      	bx	lr

0800d114 <ucdr_check_final_buffer_behavior_array>:
 800d114:	b538      	push	{r3, r4, r5, lr}
 800d116:	7d83      	ldrb	r3, [r0, #22]
 800d118:	b963      	cbnz	r3, 800d134 <ucdr_check_final_buffer_behavior_array+0x20>
 800d11a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d11e:	429a      	cmp	r2, r3
 800d120:	4604      	mov	r4, r0
 800d122:	460d      	mov	r5, r1
 800d124:	d308      	bcc.n	800d138 <ucdr_check_final_buffer_behavior_array+0x24>
 800d126:	b139      	cbz	r1, 800d138 <ucdr_check_final_buffer_behavior_array+0x24>
 800d128:	6983      	ldr	r3, [r0, #24]
 800d12a:	b163      	cbz	r3, 800d146 <ucdr_check_final_buffer_behavior_array+0x32>
 800d12c:	69c1      	ldr	r1, [r0, #28]
 800d12e:	4798      	blx	r3
 800d130:	75a0      	strb	r0, [r4, #22]
 800d132:	b108      	cbz	r0, 800d138 <ucdr_check_final_buffer_behavior_array+0x24>
 800d134:	2000      	movs	r0, #0
 800d136:	bd38      	pop	{r3, r4, r5, pc}
 800d138:	4620      	mov	r0, r4
 800d13a:	f7ff ffe7 	bl	800d10c <ucdr_buffer_remaining>
 800d13e:	42a8      	cmp	r0, r5
 800d140:	bf28      	it	cs
 800d142:	4628      	movcs	r0, r5
 800d144:	bd38      	pop	{r3, r4, r5, pc}
 800d146:	2301      	movs	r3, #1
 800d148:	7583      	strb	r3, [r0, #22]
 800d14a:	e7f3      	b.n	800d134 <ucdr_check_final_buffer_behavior_array+0x20>

0800d14c <ucdr_advance_buffer>:
 800d14c:	b538      	push	{r3, r4, r5, lr}
 800d14e:	4604      	mov	r4, r0
 800d150:	460d      	mov	r5, r1
 800d152:	f7ff ff57 	bl	800d004 <ucdr_check_buffer_available_for>
 800d156:	b178      	cbz	r0, 800d178 <ucdr_advance_buffer+0x2c>
 800d158:	6923      	ldr	r3, [r4, #16]
 800d15a:	68a2      	ldr	r2, [r4, #8]
 800d15c:	442b      	add	r3, r5
 800d15e:	6123      	str	r3, [r4, #16]
 800d160:	2301      	movs	r3, #1
 800d162:	442a      	add	r2, r5
 800d164:	7563      	strb	r3, [r4, #21]
 800d166:	60a2      	str	r2, [r4, #8]
 800d168:	bd38      	pop	{r3, r4, r5, pc}
 800d16a:	68a2      	ldr	r2, [r4, #8]
 800d16c:	6923      	ldr	r3, [r4, #16]
 800d16e:	4402      	add	r2, r0
 800d170:	4403      	add	r3, r0
 800d172:	1a2d      	subs	r5, r5, r0
 800d174:	60a2      	str	r2, [r4, #8]
 800d176:	6123      	str	r3, [r4, #16]
 800d178:	4629      	mov	r1, r5
 800d17a:	2201      	movs	r2, #1
 800d17c:	4620      	mov	r0, r4
 800d17e:	f7ff ffc9 	bl	800d114 <ucdr_check_final_buffer_behavior_array>
 800d182:	2800      	cmp	r0, #0
 800d184:	d1f1      	bne.n	800d16a <ucdr_advance_buffer+0x1e>
 800d186:	2301      	movs	r3, #1
 800d188:	7563      	strb	r3, [r4, #21]
 800d18a:	bd38      	pop	{r3, r4, r5, pc}

0800d18c <uxr_buffer_delete_entity>:
 800d18c:	b510      	push	{r4, lr}
 800d18e:	2300      	movs	r3, #0
 800d190:	b08e      	sub	sp, #56	@ 0x38
 800d192:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d196:	2303      	movs	r3, #3
 800d198:	9300      	str	r3, [sp, #0]
 800d19a:	2204      	movs	r2, #4
 800d19c:	ab06      	add	r3, sp, #24
 800d19e:	4604      	mov	r4, r0
 800d1a0:	9103      	str	r1, [sp, #12]
 800d1a2:	f001 f8ab 	bl	800e2fc <uxr_prepare_stream_to_write_submessage>
 800d1a6:	b918      	cbnz	r0, 800d1b0 <uxr_buffer_delete_entity+0x24>
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	b00e      	add	sp, #56	@ 0x38
 800d1ae:	bd10      	pop	{r4, pc}
 800d1b0:	9902      	ldr	r1, [sp, #8]
 800d1b2:	aa05      	add	r2, sp, #20
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f001 f9d7 	bl	800e568 <uxr_init_base_object_request>
 800d1ba:	a905      	add	r1, sp, #20
 800d1bc:	4604      	mov	r4, r0
 800d1be:	a806      	add	r0, sp, #24
 800d1c0:	f002 fb3c 	bl	800f83c <uxr_serialize_DELETE_Payload>
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	b00e      	add	sp, #56	@ 0x38
 800d1c8:	bd10      	pop	{r4, pc}
 800d1ca:	bf00      	nop

0800d1cc <uxr_common_create_entity>:
 800d1cc:	b510      	push	{r4, lr}
 800d1ce:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d1d2:	b08c      	sub	sp, #48	@ 0x30
 800d1d4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d1d8:	f1bc 0f01 	cmp.w	ip, #1
 800d1dc:	bf0c      	ite	eq
 800d1de:	f003 0201 	andeq.w	r2, r3, #1
 800d1e2:	2200      	movne	r2, #0
 800d1e4:	330e      	adds	r3, #14
 800d1e6:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d1ea:	9101      	str	r1, [sp, #4]
 800d1ec:	441a      	add	r2, r3
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	9903      	ldr	r1, [sp, #12]
 800d1f4:	ab04      	add	r3, sp, #16
 800d1f6:	b292      	uxth	r2, r2
 800d1f8:	4604      	mov	r4, r0
 800d1fa:	f001 f87f 	bl	800e2fc <uxr_prepare_stream_to_write_submessage>
 800d1fe:	b918      	cbnz	r0, 800d208 <uxr_common_create_entity+0x3c>
 800d200:	4604      	mov	r4, r0
 800d202:	4620      	mov	r0, r4
 800d204:	b00c      	add	sp, #48	@ 0x30
 800d206:	bd10      	pop	{r4, pc}
 800d208:	9902      	ldr	r1, [sp, #8]
 800d20a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d20c:	4620      	mov	r0, r4
 800d20e:	f001 f9ab 	bl	800e568 <uxr_init_base_object_request>
 800d212:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d214:	4604      	mov	r4, r0
 800d216:	a804      	add	r0, sp, #16
 800d218:	f002 fa6c 	bl	800f6f4 <uxr_serialize_CREATE_Payload>
 800d21c:	4620      	mov	r0, r4
 800d21e:	b00c      	add	sp, #48	@ 0x30
 800d220:	bd10      	pop	{r4, pc}
 800d222:	bf00      	nop

0800d224 <uxr_buffer_create_participant_bin>:
 800d224:	b570      	push	{r4, r5, r6, lr}
 800d226:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d22a:	ac11      	add	r4, sp, #68	@ 0x44
 800d22c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d230:	2303      	movs	r3, #3
 800d232:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d236:	7223      	strb	r3, [r4, #8]
 800d238:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d23a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d23e:	2201      	movs	r2, #1
 800d240:	2100      	movs	r1, #0
 800d242:	4605      	mov	r5, r0
 800d244:	7122      	strb	r2, [r4, #4]
 800d246:	f88d 1014 	strb.w	r1, [sp, #20]
 800d24a:	b1cb      	cbz	r3, 800d280 <uxr_buffer_create_participant_bin+0x5c>
 800d24c:	f88d 201c 	strb.w	r2, [sp, #28]
 800d250:	9308      	str	r3, [sp, #32]
 800d252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d256:	a915      	add	r1, sp, #84	@ 0x54
 800d258:	a809      	add	r0, sp, #36	@ 0x24
 800d25a:	f7ff ff27 	bl	800d0ac <ucdr_init_buffer>
 800d25e:	a905      	add	r1, sp, #20
 800d260:	a809      	add	r0, sp, #36	@ 0x24
 800d262:	f001 ff15 	bl	800f090 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d266:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d268:	9600      	str	r6, [sp, #0]
 800d26a:	9401      	str	r4, [sp, #4]
 800d26c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d270:	60e3      	str	r3, [r4, #12]
 800d272:	4628      	mov	r0, r5
 800d274:	b29b      	uxth	r3, r3
 800d276:	f7ff ffa9 	bl	800d1cc <uxr_common_create_entity>
 800d27a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800d27e:	bd70      	pop	{r4, r5, r6, pc}
 800d280:	f88d 301c 	strb.w	r3, [sp, #28]
 800d284:	e7e5      	b.n	800d252 <uxr_buffer_create_participant_bin+0x2e>
 800d286:	bf00      	nop

0800d288 <uxr_buffer_create_topic_bin>:
 800d288:	b570      	push	{r4, r5, r6, lr}
 800d28a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800d28e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d292:	9105      	str	r1, [sp, #20]
 800d294:	4605      	mov	r5, r0
 800d296:	a997      	add	r1, sp, #604	@ 0x25c
 800d298:	4618      	mov	r0, r3
 800d29a:	2302      	movs	r3, #2
 800d29c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800d2a0:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800d2a4:	f000 f8ee 	bl	800d484 <uxr_object_id_to_raw>
 800d2a8:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800d2aa:	9306      	str	r3, [sp, #24]
 800d2ac:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800d2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2b0:	2303      	movs	r3, #3
 800d2b2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2bc:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800d2c0:	a917      	add	r1, sp, #92	@ 0x5c
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	a80b      	add	r0, sp, #44	@ 0x2c
 800d2c6:	f88d 301c 	strb.w	r3, [sp, #28]
 800d2ca:	f7ff feef 	bl	800d0ac <ucdr_init_buffer>
 800d2ce:	a906      	add	r1, sp, #24
 800d2d0:	a80b      	add	r0, sp, #44	@ 0x2c
 800d2d2:	f001 feff 	bl	800f0d4 <uxr_serialize_OBJK_Topic_Binary>
 800d2d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2d8:	9316      	str	r3, [sp, #88]	@ 0x58
 800d2da:	ac13      	add	r4, sp, #76	@ 0x4c
 800d2dc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d2e0:	9600      	str	r6, [sp, #0]
 800d2e2:	9401      	str	r4, [sp, #4]
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	f7ff ff70 	bl	800d1cc <uxr_common_create_entity>
 800d2ec:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800d2f0:	bd70      	pop	{r4, r5, r6, pc}
 800d2f2:	bf00      	nop

0800d2f4 <uxr_buffer_create_publisher_bin>:
 800d2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2f6:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800d2fa:	4605      	mov	r5, r0
 800d2fc:	9105      	str	r1, [sp, #20]
 800d2fe:	4618      	mov	r0, r3
 800d300:	2603      	movs	r6, #3
 800d302:	a992      	add	r1, sp, #584	@ 0x248
 800d304:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d308:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800d30c:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800d310:	f000 f8b8 	bl	800d484 <uxr_object_id_to_raw>
 800d314:	2300      	movs	r3, #0
 800d316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d31a:	a912      	add	r1, sp, #72	@ 0x48
 800d31c:	a806      	add	r0, sp, #24
 800d31e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d322:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d326:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800d32a:	f7ff febf 	bl	800d0ac <ucdr_init_buffer>
 800d32e:	a993      	add	r1, sp, #588	@ 0x24c
 800d330:	a806      	add	r0, sp, #24
 800d332:	f001 ff83 	bl	800f23c <uxr_serialize_OBJK_Publisher_Binary>
 800d336:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d338:	9311      	str	r3, [sp, #68]	@ 0x44
 800d33a:	ac0e      	add	r4, sp, #56	@ 0x38
 800d33c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d340:	9700      	str	r7, [sp, #0]
 800d342:	9401      	str	r4, [sp, #4]
 800d344:	b29b      	uxth	r3, r3
 800d346:	4628      	mov	r0, r5
 800d348:	f7ff ff40 	bl	800d1cc <uxr_common_create_entity>
 800d34c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800d350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d352:	bf00      	nop

0800d354 <uxr_buffer_create_datawriter_bin>:
 800d354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d358:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d35c:	ac1d      	add	r4, sp, #116	@ 0x74
 800d35e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d362:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800d366:	9105      	str	r1, [sp, #20]
 800d368:	4606      	mov	r6, r0
 800d36a:	a9a1      	add	r1, sp, #644	@ 0x284
 800d36c:	4618      	mov	r0, r3
 800d36e:	2305      	movs	r3, #5
 800d370:	7123      	strb	r3, [r4, #4]
 800d372:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800d376:	2703      	movs	r7, #3
 800d378:	f000 f884 	bl	800d484 <uxr_object_id_to_raw>
 800d37c:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800d37e:	7227      	strb	r7, [r4, #8]
 800d380:	a90e      	add	r1, sp, #56	@ 0x38
 800d382:	f000 f87f 	bl	800d484 <uxr_object_id_to_raw>
 800d386:	2300      	movs	r3, #0
 800d388:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800d38c:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800d390:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800d394:	3d00      	subs	r5, #0
 800d396:	bf18      	it	ne
 800d398:	2501      	movne	r5, #1
 800d39a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800d39e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800d3a2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d3a6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800d3b0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800d3b4:	bb8a      	cbnz	r2, 800d41a <uxr_buffer_create_datawriter_bin+0xc6>
 800d3b6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d3ba:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800d3be:	f04f 0c13 	mov.w	ip, #19
 800d3c2:	250b      	movs	r5, #11
 800d3c4:	2221      	movs	r2, #33	@ 0x21
 800d3c6:	2111      	movs	r1, #17
 800d3c8:	2009      	movs	r0, #9
 800d3ca:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800d3ce:	b923      	cbnz	r3, 800d3da <uxr_buffer_create_datawriter_bin+0x86>
 800d3d0:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800d3d4:	4672      	mov	r2, lr
 800d3d6:	4661      	mov	r1, ip
 800d3d8:	4628      	mov	r0, r5
 800d3da:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d025      	beq.n	800d42e <uxr_buffer_create_datawriter_bin+0xda>
 800d3e2:	2b03      	cmp	r3, #3
 800d3e4:	d029      	beq.n	800d43a <uxr_buffer_create_datawriter_bin+0xe6>
 800d3e6:	b32b      	cbz	r3, 800d434 <uxr_buffer_create_datawriter_bin+0xe0>
 800d3e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3ec:	a921      	add	r1, sp, #132	@ 0x84
 800d3ee:	a806      	add	r0, sp, #24
 800d3f0:	f7ff fe5c 	bl	800d0ac <ucdr_init_buffer>
 800d3f4:	a90e      	add	r1, sp, #56	@ 0x38
 800d3f6:	a806      	add	r0, sp, #24
 800d3f8:	f001 ff96 	bl	800f328 <uxr_serialize_OBJK_DataWriter_Binary>
 800d3fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3fe:	f8cd 8000 	str.w	r8, [sp]
 800d402:	9401      	str	r4, [sp, #4]
 800d404:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d408:	60e3      	str	r3, [r4, #12]
 800d40a:	4630      	mov	r0, r6
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	f7ff fedd 	bl	800d1cc <uxr_common_create_entity>
 800d412:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800d416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d41a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800d41e:	f04f 0c12 	mov.w	ip, #18
 800d422:	250a      	movs	r5, #10
 800d424:	2220      	movs	r2, #32
 800d426:	2110      	movs	r1, #16
 800d428:	2008      	movs	r0, #8
 800d42a:	2702      	movs	r7, #2
 800d42c:	e7cd      	b.n	800d3ca <uxr_buffer_create_datawriter_bin+0x76>
 800d42e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800d432:	e7d9      	b.n	800d3e8 <uxr_buffer_create_datawriter_bin+0x94>
 800d434:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d438:	e7d6      	b.n	800d3e8 <uxr_buffer_create_datawriter_bin+0x94>
 800d43a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d43e:	e7d3      	b.n	800d3e8 <uxr_buffer_create_datawriter_bin+0x94>

0800d440 <uxr_object_id>:
 800d440:	b082      	sub	sp, #8
 800d442:	2300      	movs	r3, #0
 800d444:	f88d 1006 	strb.w	r1, [sp, #6]
 800d448:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d44c:	f360 030f 	bfi	r3, r0, #0, #16
 800d450:	f362 431f 	bfi	r3, r2, #16, #16
 800d454:	4618      	mov	r0, r3
 800d456:	b002      	add	sp, #8
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop

0800d45c <uxr_object_id_from_raw>:
 800d45c:	7843      	ldrb	r3, [r0, #1]
 800d45e:	7801      	ldrb	r1, [r0, #0]
 800d460:	b082      	sub	sp, #8
 800d462:	f003 020f 	and.w	r2, r3, #15
 800d466:	f88d 2006 	strb.w	r2, [sp, #6]
 800d46a:	091b      	lsrs	r3, r3, #4
 800d46c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d470:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d474:	2000      	movs	r0, #0
 800d476:	f363 000f 	bfi	r0, r3, #0, #16
 800d47a:	f362 401f 	bfi	r0, r2, #16, #16
 800d47e:	b002      	add	sp, #8
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop

0800d484 <uxr_object_id_to_raw>:
 800d484:	4602      	mov	r2, r0
 800d486:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d48a:	b082      	sub	sp, #8
 800d48c:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800d490:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800d494:	f881 c000 	strb.w	ip, [r1]
 800d498:	7048      	strb	r0, [r1, #1]
 800d49a:	b002      	add	sp, #8
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop

0800d4a0 <on_get_fragmentation_info>:
 800d4a0:	b500      	push	{lr}
 800d4a2:	b08b      	sub	sp, #44	@ 0x2c
 800d4a4:	4601      	mov	r1, r0
 800d4a6:	2204      	movs	r2, #4
 800d4a8:	a802      	add	r0, sp, #8
 800d4aa:	f7ff fdff 	bl	800d0ac <ucdr_init_buffer>
 800d4ae:	f10d 0305 	add.w	r3, sp, #5
 800d4b2:	f10d 0206 	add.w	r2, sp, #6
 800d4b6:	a901      	add	r1, sp, #4
 800d4b8:	a802      	add	r0, sp, #8
 800d4ba:	f001 f9d7 	bl	800e86c <uxr_read_submessage_header>
 800d4be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d4c2:	2b0d      	cmp	r3, #13
 800d4c4:	d003      	beq.n	800d4ce <on_get_fragmentation_info+0x2e>
 800d4c6:	2000      	movs	r0, #0
 800d4c8:	b00b      	add	sp, #44	@ 0x2c
 800d4ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800d4ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d4d2:	f013 0f02 	tst.w	r3, #2
 800d4d6:	bf14      	ite	ne
 800d4d8:	2002      	movne	r0, #2
 800d4da:	2001      	moveq	r0, #1
 800d4dc:	b00b      	add	sp, #44	@ 0x2c
 800d4de:	f85d fb04 	ldr.w	pc, [sp], #4
 800d4e2:	bf00      	nop

0800d4e4 <read_submessage_get_info>:
 800d4e4:	b570      	push	{r4, r5, r6, lr}
 800d4e6:	2500      	movs	r5, #0
 800d4e8:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800d4f2:	460e      	mov	r6, r1
 800d4f4:	a810      	add	r0, sp, #64	@ 0x40
 800d4f6:	4629      	mov	r1, r5
 800d4f8:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d4fc:	f009 fc1a 	bl	8016d34 <memset>
 800d500:	a903      	add	r1, sp, #12
 800d502:	4630      	mov	r0, r6
 800d504:	f002 f986 	bl	800f814 <uxr_deserialize_GET_INFO_Payload>
 800d508:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d50c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d510:	4620      	mov	r0, r4
 800d512:	f001 f821 	bl	800e558 <uxr_session_header_offset>
 800d516:	462b      	mov	r3, r5
 800d518:	9000      	str	r0, [sp, #0]
 800d51a:	220c      	movs	r2, #12
 800d51c:	a905      	add	r1, sp, #20
 800d51e:	a808      	add	r0, sp, #32
 800d520:	f7ff fdb2 	bl	800d088 <ucdr_init_buffer_origin_offset>
 800d524:	a910      	add	r1, sp, #64	@ 0x40
 800d526:	a808      	add	r0, sp, #32
 800d528:	f002 f9e6 	bl	800f8f8 <uxr_serialize_INFO_Payload>
 800d52c:	9b08      	ldr	r3, [sp, #32]
 800d52e:	462a      	mov	r2, r5
 800d530:	4629      	mov	r1, r5
 800d532:	4620      	mov	r0, r4
 800d534:	f000 ffba 	bl	800e4ac <uxr_stamp_session_header>
 800d538:	a808      	add	r0, sp, #32
 800d53a:	f7ff fde3 	bl	800d104 <ucdr_buffer_length>
 800d53e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d540:	4602      	mov	r2, r0
 800d542:	a905      	add	r1, sp, #20
 800d544:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d548:	47a0      	blx	r4
 800d54a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800d54e:	bd70      	pop	{r4, r5, r6, pc}

0800d550 <write_submessage_acknack.isra.0>:
 800d550:	b570      	push	{r4, r5, r6, lr}
 800d552:	b092      	sub	sp, #72	@ 0x48
 800d554:	4605      	mov	r5, r0
 800d556:	460e      	mov	r6, r1
 800d558:	4614      	mov	r4, r2
 800d55a:	f000 fffd 	bl	800e558 <uxr_session_header_offset>
 800d55e:	a905      	add	r1, sp, #20
 800d560:	9000      	str	r0, [sp, #0]
 800d562:	2300      	movs	r3, #0
 800d564:	a80a      	add	r0, sp, #40	@ 0x28
 800d566:	2211      	movs	r2, #17
 800d568:	f7ff fd8e 	bl	800d088 <ucdr_init_buffer_origin_offset>
 800d56c:	2218      	movs	r2, #24
 800d56e:	fb02 5404 	mla	r4, r2, r4, r5
 800d572:	2300      	movs	r3, #0
 800d574:	2205      	movs	r2, #5
 800d576:	3450      	adds	r4, #80	@ 0x50
 800d578:	210a      	movs	r1, #10
 800d57a:	a80a      	add	r0, sp, #40	@ 0x28
 800d57c:	f001 f95c 	bl	800e838 <uxr_buffer_submessage_header>
 800d580:	a903      	add	r1, sp, #12
 800d582:	4620      	mov	r0, r4
 800d584:	f007 fa18 	bl	80149b8 <uxr_compute_acknack>
 800d588:	ba40      	rev16	r0, r0
 800d58a:	f8ad 000e 	strh.w	r0, [sp, #14]
 800d58e:	a903      	add	r1, sp, #12
 800d590:	a80a      	add	r0, sp, #40	@ 0x28
 800d592:	f88d 6010 	strb.w	r6, [sp, #16]
 800d596:	f002 fa1f 	bl	800f9d8 <uxr_serialize_ACKNACK_Payload>
 800d59a:	2200      	movs	r2, #0
 800d59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d59e:	4611      	mov	r1, r2
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	f000 ff83 	bl	800e4ac <uxr_stamp_session_header>
 800d5a6:	a80a      	add	r0, sp, #40	@ 0x28
 800d5a8:	f7ff fdac 	bl	800d104 <ucdr_buffer_length>
 800d5ac:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	a905      	add	r1, sp, #20
 800d5b2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d5b6:	47a0      	blx	r4
 800d5b8:	b012      	add	sp, #72	@ 0x48
 800d5ba:	bd70      	pop	{r4, r5, r6, pc}
 800d5bc:	0000      	movs	r0, r0
	...

0800d5c0 <uxr_init_session>:
 800d5c0:	b510      	push	{r4, lr}
 800d5c2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800d5f8 <uxr_init_session+0x38>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800d5d2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800d5d6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800d5da:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800d5de:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800d5e2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800d5e6:	2181      	movs	r1, #129	@ 0x81
 800d5e8:	f000 fecc 	bl	800e384 <uxr_init_session_info>
 800d5ec:	f104 0008 	add.w	r0, r4, #8
 800d5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5f4:	f001 b83c 	b.w	800e670 <uxr_init_stream_storage>
	...

0800d600 <uxr_set_status_callback>:
 800d600:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800d604:	4770      	bx	lr
 800d606:	bf00      	nop

0800d608 <uxr_set_topic_callback>:
 800d608:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop

0800d610 <uxr_set_request_callback>:
 800d610:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop

0800d618 <uxr_set_reply_callback>:
 800d618:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop

0800d620 <uxr_create_output_best_effort_stream>:
 800d620:	b510      	push	{r4, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	e9cd 2100 	strd	r2, r1, [sp]
 800d628:	4604      	mov	r4, r0
 800d62a:	f000 ff95 	bl	800e558 <uxr_session_header_offset>
 800d62e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800d632:	4603      	mov	r3, r0
 800d634:	f104 0008 	add.w	r0, r4, #8
 800d638:	b004      	add	sp, #16
 800d63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d63e:	f001 b861 	b.w	800e704 <uxr_add_output_best_effort_buffer>
 800d642:	bf00      	nop

0800d644 <uxr_create_output_reliable_stream>:
 800d644:	b510      	push	{r4, lr}
 800d646:	b088      	sub	sp, #32
 800d648:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d64c:	4604      	mov	r4, r0
 800d64e:	9303      	str	r3, [sp, #12]
 800d650:	f000 ff82 	bl	800e558 <uxr_session_header_offset>
 800d654:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d658:	9000      	str	r0, [sp, #0]
 800d65a:	9905      	ldr	r1, [sp, #20]
 800d65c:	f104 0008 	add.w	r0, r4, #8
 800d660:	f001 f864 	bl	800e72c <uxr_add_output_reliable_buffer>
 800d664:	2200      	movs	r2, #0
 800d666:	b2c3      	uxtb	r3, r0
 800d668:	f363 0207 	bfi	r2, r3, #0, #8
 800d66c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d670:	f363 220f 	bfi	r2, r3, #8, #8
 800d674:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d678:	f363 4217 	bfi	r2, r3, #16, #8
 800d67c:	0e03      	lsrs	r3, r0, #24
 800d67e:	f363 621f 	bfi	r2, r3, #24, #8
 800d682:	4610      	mov	r0, r2
 800d684:	b008      	add	sp, #32
 800d686:	bd10      	pop	{r4, pc}

0800d688 <uxr_create_input_best_effort_stream>:
 800d688:	b082      	sub	sp, #8
 800d68a:	3008      	adds	r0, #8
 800d68c:	b002      	add	sp, #8
 800d68e:	f001 b867 	b.w	800e760 <uxr_add_input_best_effort_buffer>
 800d692:	bf00      	nop

0800d694 <uxr_create_input_reliable_stream>:
 800d694:	b510      	push	{r4, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	4c0b      	ldr	r4, [pc, #44]	@ (800d6c8 <uxr_create_input_reliable_stream+0x34>)
 800d69a:	9400      	str	r4, [sp, #0]
 800d69c:	3008      	adds	r0, #8
 800d69e:	f001 f875 	bl	800e78c <uxr_add_input_reliable_buffer>
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	b2c3      	uxtb	r3, r0
 800d6a6:	f363 0207 	bfi	r2, r3, #0, #8
 800d6aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d6ae:	f363 220f 	bfi	r2, r3, #8, #8
 800d6b2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d6b6:	f363 4217 	bfi	r2, r3, #16, #8
 800d6ba:	0e03      	lsrs	r3, r0, #24
 800d6bc:	f363 621f 	bfi	r2, r3, #24, #8
 800d6c0:	4610      	mov	r0, r2
 800d6c2:	b004      	add	sp, #16
 800d6c4:	bd10      	pop	{r4, pc}
 800d6c6:	bf00      	nop
 800d6c8:	0800d4a1 	.word	0x0800d4a1

0800d6cc <uxr_epoch_nanos>:
 800d6cc:	b510      	push	{r4, lr}
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	f001 f912 	bl	800e8f8 <uxr_nanos>
 800d6d4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800d6d8:	1ac0      	subs	r0, r0, r3
 800d6da:	eb61 0102 	sbc.w	r1, r1, r2
 800d6de:	bd10      	pop	{r4, pc}

0800d6e0 <uxr_flash_output_streams>:
 800d6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6e4:	7e03      	ldrb	r3, [r0, #24]
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d035      	beq.n	800d75a <uxr_flash_output_streams+0x7a>
 800d6ee:	f04f 0900 	mov.w	r9, #0
 800d6f2:	4648      	mov	r0, r9
 800d6f4:	f10d 0802 	add.w	r8, sp, #2
 800d6f8:	af03      	add	r7, sp, #12
 800d6fa:	ae02      	add	r6, sp, #8
 800d6fc:	e006      	b.n	800d70c <uxr_flash_output_streams+0x2c>
 800d6fe:	7e23      	ldrb	r3, [r4, #24]
 800d700:	f109 0901 	add.w	r9, r9, #1
 800d704:	fa5f f089 	uxtb.w	r0, r9
 800d708:	4283      	cmp	r3, r0
 800d70a:	d926      	bls.n	800d75a <uxr_flash_output_streams+0x7a>
 800d70c:	2201      	movs	r2, #1
 800d70e:	4611      	mov	r1, r2
 800d710:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800d714:	f000 ff58 	bl	800e5c8 <uxr_stream_id>
 800d718:	3508      	adds	r5, #8
 800d71a:	4684      	mov	ip, r0
 800d71c:	4643      	mov	r3, r8
 800d71e:	463a      	mov	r2, r7
 800d720:	4631      	mov	r1, r6
 800d722:	4628      	mov	r0, r5
 800d724:	f8cd c004 	str.w	ip, [sp, #4]
 800d728:	f007 f9cc 	bl	8014ac4 <uxr_prepare_best_effort_buffer_to_send>
 800d72c:	2800      	cmp	r0, #0
 800d72e:	d0e6      	beq.n	800d6fe <uxr_flash_output_streams+0x1e>
 800d730:	9b02      	ldr	r3, [sp, #8]
 800d732:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d736:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d73a:	4620      	mov	r0, r4
 800d73c:	f000 feb6 	bl	800e4ac <uxr_stamp_session_header>
 800d740:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d742:	9a03      	ldr	r2, [sp, #12]
 800d744:	685d      	ldr	r5, [r3, #4]
 800d746:	6818      	ldr	r0, [r3, #0]
 800d748:	9902      	ldr	r1, [sp, #8]
 800d74a:	47a8      	blx	r5
 800d74c:	f109 0901 	add.w	r9, r9, #1
 800d750:	7e23      	ldrb	r3, [r4, #24]
 800d752:	fa5f f089 	uxtb.w	r0, r9
 800d756:	4283      	cmp	r3, r0
 800d758:	d8d8      	bhi.n	800d70c <uxr_flash_output_streams+0x2c>
 800d75a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d75e:	b38b      	cbz	r3, 800d7c4 <uxr_flash_output_streams+0xe4>
 800d760:	f04f 0900 	mov.w	r9, #0
 800d764:	f10d 0802 	add.w	r8, sp, #2
 800d768:	af03      	add	r7, sp, #12
 800d76a:	ae02      	add	r6, sp, #8
 800d76c:	4648      	mov	r0, r9
 800d76e:	2201      	movs	r2, #1
 800d770:	2102      	movs	r1, #2
 800d772:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800d776:	f000 ff27 	bl	800e5c8 <uxr_stream_id>
 800d77a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800d77e:	3520      	adds	r5, #32
 800d780:	9001      	str	r0, [sp, #4]
 800d782:	e00d      	b.n	800d7a0 <uxr_flash_output_streams+0xc0>
 800d784:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d788:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d78c:	9b02      	ldr	r3, [sp, #8]
 800d78e:	f000 fe8d 	bl	800e4ac <uxr_stamp_session_header>
 800d792:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d794:	9a03      	ldr	r2, [sp, #12]
 800d796:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d79a:	9902      	ldr	r1, [sp, #8]
 800d79c:	6818      	ldr	r0, [r3, #0]
 800d79e:	47d0      	blx	sl
 800d7a0:	4643      	mov	r3, r8
 800d7a2:	463a      	mov	r2, r7
 800d7a4:	4631      	mov	r1, r6
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	f007 fbaa 	bl	8014f00 <uxr_prepare_next_reliable_buffer_to_send>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d1e7      	bne.n	800d784 <uxr_flash_output_streams+0xa4>
 800d7b4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d7b8:	f109 0901 	add.w	r9, r9, #1
 800d7bc:	fa5f f089 	uxtb.w	r0, r9
 800d7c0:	4283      	cmp	r3, r0
 800d7c2:	d8d4      	bhi.n	800d76e <uxr_flash_output_streams+0x8e>
 800d7c4:	b004      	add	sp, #16
 800d7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ca:	bf00      	nop

0800d7cc <read_submessage_info>:
 800d7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d0:	460d      	mov	r5, r1
 800d7d2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d7d6:	4669      	mov	r1, sp
 800d7d8:	4607      	mov	r7, r0
 800d7da:	4628      	mov	r0, r5
 800d7dc:	f001 ff28 	bl	800f630 <uxr_deserialize_BaseObjectReply>
 800d7e0:	a902      	add	r1, sp, #8
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d7ea:	f7fe fc9b 	bl	800c124 <ucdr_deserialize_bool>
 800d7ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d7f2:	4004      	ands	r4, r0
 800d7f4:	b2e4      	uxtb	r4, r4
 800d7f6:	b95b      	cbnz	r3, 800d810 <read_submessage_info+0x44>
 800d7f8:	a987      	add	r1, sp, #540	@ 0x21c
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	f7fe fc92 	bl	800c124 <ucdr_deserialize_bool>
 800d800:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800d804:	4606      	mov	r6, r0
 800d806:	b94b      	cbnz	r3, 800d81c <read_submessage_info+0x50>
 800d808:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d810:	a903      	add	r1, sp, #12
 800d812:	4628      	mov	r0, r5
 800d814:	f001 fdb4 	bl	800f380 <uxr_deserialize_ObjectVariant>
 800d818:	4004      	ands	r4, r0
 800d81a:	e7ed      	b.n	800d7f8 <read_submessage_info+0x2c>
 800d81c:	a988      	add	r1, sp, #544	@ 0x220
 800d81e:	4628      	mov	r0, r5
 800d820:	f7fe fcae 	bl	800c180 <ucdr_deserialize_uint8_t>
 800d824:	4234      	tst	r4, r6
 800d826:	d0ef      	beq.n	800d808 <read_submessage_info+0x3c>
 800d828:	2800      	cmp	r0, #0
 800d82a:	d0ed      	beq.n	800d808 <read_submessage_info+0x3c>
 800d82c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800d830:	2b0d      	cmp	r3, #13
 800d832:	d1e9      	bne.n	800d808 <read_submessage_info+0x3c>
 800d834:	a98a      	add	r1, sp, #552	@ 0x228
 800d836:	4628      	mov	r0, r5
 800d838:	f7ff fa48 	bl	800cccc <ucdr_deserialize_int16_t>
 800d83c:	b140      	cbz	r0, 800d850 <read_submessage_info+0x84>
 800d83e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800d842:	2b00      	cmp	r3, #0
 800d844:	dd07      	ble.n	800d856 <read_submessage_info+0x8a>
 800d846:	f1b8 0f00 	cmp.w	r8, #0
 800d84a:	bf14      	ite	ne
 800d84c:	2001      	movne	r0, #1
 800d84e:	2002      	moveq	r0, #2
 800d850:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800d854:	e7d8      	b.n	800d808 <read_submessage_info+0x3c>
 800d856:	2000      	movs	r0, #0
 800d858:	e7fa      	b.n	800d850 <read_submessage_info+0x84>
 800d85a:	bf00      	nop

0800d85c <read_submessage_list>:
 800d85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d860:	b097      	sub	sp, #92	@ 0x5c
 800d862:	4ec1      	ldr	r6, [pc, #772]	@ (800db68 <read_submessage_list+0x30c>)
 800d864:	9209      	str	r2, [sp, #36]	@ 0x24
 800d866:	4604      	mov	r4, r0
 800d868:	460d      	mov	r5, r1
 800d86a:	f04f 0801 	mov.w	r8, #1
 800d86e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800d872:	aa0c      	add	r2, sp, #48	@ 0x30
 800d874:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800d878:	4628      	mov	r0, r5
 800d87a:	f000 fff7 	bl	800e86c <uxr_read_submessage_header>
 800d87e:	2800      	cmp	r0, #0
 800d880:	f000 813e 	beq.w	800db00 <read_submessage_list+0x2a4>
 800d884:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800d888:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800d88c:	3b02      	subs	r3, #2
 800d88e:	2b0d      	cmp	r3, #13
 800d890:	d8ed      	bhi.n	800d86e <read_submessage_list+0x12>
 800d892:	a101      	add	r1, pc, #4	@ (adr r1, 800d898 <read_submessage_list+0x3c>)
 800d894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d898:	0800daf7 	.word	0x0800daf7
 800d89c:	0800d86f 	.word	0x0800d86f
 800d8a0:	0800dae7 	.word	0x0800dae7
 800d8a4:	0800da85 	.word	0x0800da85
 800d8a8:	0800da7b 	.word	0x0800da7b
 800d8ac:	0800d86f 	.word	0x0800d86f
 800d8b0:	0800d86f 	.word	0x0800d86f
 800d8b4:	0800d9db 	.word	0x0800d9db
 800d8b8:	0800d96b 	.word	0x0800d96b
 800d8bc:	0800d92b 	.word	0x0800d92b
 800d8c0:	0800d86f 	.word	0x0800d86f
 800d8c4:	0800d86f 	.word	0x0800d86f
 800d8c8:	0800d86f 	.word	0x0800d86f
 800d8cc:	0800d8d1 	.word	0x0800d8d1
 800d8d0:	a910      	add	r1, sp, #64	@ 0x40
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	f002 f8d0 	bl	800fa78 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d8d8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800d8dc:	f1b9 0f00 	cmp.w	r9, #0
 800d8e0:	f000 8116 	beq.w	800db10 <read_submessage_list+0x2b4>
 800d8e4:	f001 f808 	bl	800e8f8 <uxr_nanos>
 800d8e8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d8f0:	2100      	movs	r1, #0
 800d8f2:	468c      	mov	ip, r1
 800d8f4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d8f8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d8fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d8fe:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800d900:	468c      	mov	ip, r1
 800d902:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d906:	46e2      	mov	sl, ip
 800d908:	46bc      	mov	ip, r7
 800d90a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800d90e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800d912:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800d916:	e9cd 7100 	strd	r7, r1, [sp]
 800d91a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800d91e:	9106      	str	r1, [sp, #24]
 800d920:	4620      	mov	r0, r4
 800d922:	47c8      	blx	r9
 800d924:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800d928:	e7a1      	b.n	800d86e <read_submessage_list+0x12>
 800d92a:	a910      	add	r1, sp, #64	@ 0x40
 800d92c:	4628      	mov	r0, r5
 800d92e:	f002 f891 	bl	800fa54 <uxr_deserialize_HEARTBEAT_Payload>
 800d932:	2100      	movs	r1, #0
 800d934:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d938:	f000 fe70 	bl	800e61c <uxr_stream_id_from_raw>
 800d93c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d940:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d942:	4639      	mov	r1, r7
 800d944:	f104 0008 	add.w	r0, r4, #8
 800d948:	f000 ff56 	bl	800e7f8 <uxr_get_input_reliable_stream>
 800d94c:	2800      	cmp	r0, #0
 800d94e:	d08e      	beq.n	800d86e <read_submessage_list+0x12>
 800d950:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800d954:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800d958:	f007 f822 	bl	80149a0 <uxr_process_heartbeat>
 800d95c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800d960:	463a      	mov	r2, r7
 800d962:	4620      	mov	r0, r4
 800d964:	f7ff fdf4 	bl	800d550 <write_submessage_acknack.isra.0>
 800d968:	e781      	b.n	800d86e <read_submessage_list+0x12>
 800d96a:	a910      	add	r1, sp, #64	@ 0x40
 800d96c:	4628      	mov	r0, r5
 800d96e:	f002 f849 	bl	800fa04 <uxr_deserialize_ACKNACK_Payload>
 800d972:	2100      	movs	r1, #0
 800d974:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d978:	f000 fe50 	bl	800e61c <uxr_stream_id_from_raw>
 800d97c:	900d      	str	r0, [sp, #52]	@ 0x34
 800d97e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d982:	f104 0008 	add.w	r0, r4, #8
 800d986:	f000 ff23 	bl	800e7d0 <uxr_get_output_reliable_stream>
 800d98a:	4607      	mov	r7, r0
 800d98c:	2800      	cmp	r0, #0
 800d98e:	f43f af6e 	beq.w	800d86e <read_submessage_list+0x12>
 800d992:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800d996:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800d99a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800d99e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d9a2:	b289      	uxth	r1, r1
 800d9a4:	f007 fb56 	bl	8015054 <uxr_process_acknack>
 800d9a8:	4638      	mov	r0, r7
 800d9aa:	f007 fb13 	bl	8014fd4 <uxr_begin_output_nack_buffer_it>
 800d9ae:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d9b2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800d9b6:	e006      	b.n	800d9c6 <read_submessage_list+0x16a>
 800d9b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d9ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d9bc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d9c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d9c2:	6818      	ldr	r0, [r3, #0]
 800d9c4:	47c8      	blx	r9
 800d9c6:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800d9ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d9cc:	4651      	mov	r1, sl
 800d9ce:	4638      	mov	r0, r7
 800d9d0:	f007 fb02 	bl	8014fd8 <uxr_next_reliable_nack_buffer_to_send>
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d1ef      	bne.n	800d9b8 <read_submessage_list+0x15c>
 800d9d8:	e749      	b.n	800d86e <read_submessage_list+0x12>
 800d9da:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d9de:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800d9e2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d9e6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800d9ea:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800d9ee:	4651      	mov	r1, sl
 800d9f0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d9f4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800d9f8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800d9fc:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800da00:	4628      	mov	r0, r5
 800da02:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800da06:	f001 fd5d 	bl	800f4c4 <uxr_deserialize_BaseObjectRequest>
 800da0a:	4650      	mov	r0, sl
 800da0c:	a90f      	add	r1, sp, #60	@ 0x3c
 800da0e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800da12:	f000 fdc7 	bl	800e5a4 <uxr_parse_base_object_request>
 800da16:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800da1a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800da1c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800da20:	9110      	str	r1, [sp, #64]	@ 0x40
 800da22:	3f04      	subs	r7, #4
 800da24:	f009 090e 	and.w	r9, r9, #14
 800da28:	b2bf      	uxth	r7, r7
 800da2a:	f1bb 0f00 	cmp.w	fp, #0
 800da2e:	d006      	beq.n	800da3e <read_submessage_list+0x1e2>
 800da30:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	4652      	mov	r2, sl
 800da38:	2300      	movs	r3, #0
 800da3a:	4620      	mov	r0, r4
 800da3c:	47d8      	blx	fp
 800da3e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800da40:	b16a      	cbz	r2, 800da5e <read_submessage_list+0x202>
 800da42:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800da44:	2100      	movs	r1, #0
 800da46:	3802      	subs	r0, #2
 800da48:	e002      	b.n	800da50 <read_submessage_list+0x1f4>
 800da4a:	3101      	adds	r1, #1
 800da4c:	4291      	cmp	r1, r2
 800da4e:	d006      	beq.n	800da5e <read_submessage_list+0x202>
 800da50:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800da54:	4553      	cmp	r3, sl
 800da56:	d1f8      	bne.n	800da4a <read_submessage_list+0x1ee>
 800da58:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800da5a:	2200      	movs	r2, #0
 800da5c:	545a      	strb	r2, [r3, r1]
 800da5e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800da62:	9102      	str	r1, [sp, #8]
 800da64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800da66:	9101      	str	r1, [sp, #4]
 800da68:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800da6a:	9100      	str	r1, [sp, #0]
 800da6c:	464b      	mov	r3, r9
 800da6e:	463a      	mov	r2, r7
 800da70:	4629      	mov	r1, r5
 800da72:	4620      	mov	r0, r4
 800da74:	f007 fb72 	bl	801515c <read_submessage_format>
 800da78:	e6f9      	b.n	800d86e <read_submessage_list+0x12>
 800da7a:	4629      	mov	r1, r5
 800da7c:	4620      	mov	r0, r4
 800da7e:	f7ff fea5 	bl	800d7cc <read_submessage_info>
 800da82:	e6f4      	b.n	800d86e <read_submessage_list+0x12>
 800da84:	2a00      	cmp	r2, #0
 800da86:	d03e      	beq.n	800db06 <read_submessage_list+0x2aa>
 800da88:	a910      	add	r1, sp, #64	@ 0x40
 800da8a:	4628      	mov	r0, r5
 800da8c:	f001 ff16 	bl	800f8bc <uxr_deserialize_STATUS_Payload>
 800da90:	a90e      	add	r1, sp, #56	@ 0x38
 800da92:	aa0d      	add	r2, sp, #52	@ 0x34
 800da94:	a810      	add	r0, sp, #64	@ 0x40
 800da96:	f000 fd85 	bl	800e5a4 <uxr_parse_base_object_request>
 800da9a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800da9e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800daa0:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800daa4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800daa8:	910f      	str	r1, [sp, #60]	@ 0x3c
 800daaa:	f1ba 0f00 	cmp.w	sl, #0
 800daae:	d006      	beq.n	800dabe <read_submessage_list+0x262>
 800dab0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	463a      	mov	r2, r7
 800dab8:	464b      	mov	r3, r9
 800daba:	4620      	mov	r0, r4
 800dabc:	47d0      	blx	sl
 800dabe:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800dac0:	2a00      	cmp	r2, #0
 800dac2:	f43f aed4 	beq.w	800d86e <read_submessage_list+0x12>
 800dac6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800dac8:	2100      	movs	r1, #0
 800daca:	3802      	subs	r0, #2
 800dacc:	e003      	b.n	800dad6 <read_submessage_list+0x27a>
 800dace:	3101      	adds	r1, #1
 800dad0:	4291      	cmp	r1, r2
 800dad2:	f43f aecc 	beq.w	800d86e <read_submessage_list+0x12>
 800dad6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800dada:	42bb      	cmp	r3, r7
 800dadc:	d1f7      	bne.n	800dace <read_submessage_list+0x272>
 800dade:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800dae0:	f803 9001 	strb.w	r9, [r3, r1]
 800dae4:	e6c3      	b.n	800d86e <read_submessage_list+0x12>
 800dae6:	2a00      	cmp	r2, #0
 800dae8:	f47f aec1 	bne.w	800d86e <read_submessage_list+0x12>
 800daec:	4629      	mov	r1, r5
 800daee:	4620      	mov	r0, r4
 800daf0:	f000 fc9e 	bl	800e430 <uxr_read_create_session_status>
 800daf4:	e6bb      	b.n	800d86e <read_submessage_list+0x12>
 800daf6:	4629      	mov	r1, r5
 800daf8:	4620      	mov	r0, r4
 800dafa:	f7ff fcf3 	bl	800d4e4 <read_submessage_get_info>
 800dafe:	e6b6      	b.n	800d86e <read_submessage_list+0x12>
 800db00:	b017      	add	sp, #92	@ 0x5c
 800db02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db06:	4629      	mov	r1, r5
 800db08:	4620      	mov	r0, r4
 800db0a:	f000 fc9d 	bl	800e448 <uxr_read_delete_session_status>
 800db0e:	e6ae      	b.n	800d86e <read_submessage_list+0x12>
 800db10:	f000 fef2 	bl	800e8f8 <uxr_nanos>
 800db14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800db16:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800db18:	464f      	mov	r7, r9
 800db1a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800db1e:	1812      	adds	r2, r2, r0
 800db20:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db22:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800db24:	eb47 0101 	adc.w	r1, r7, r1
 800db28:	464f      	mov	r7, r9
 800db2a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800db2e:	463b      	mov	r3, r7
 800db30:	4684      	mov	ip, r0
 800db32:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800db36:	fbc7 0906 	smlal	r0, r9, r7, r6
 800db3a:	eb1c 0c00 	adds.w	ip, ip, r0
 800db3e:	464f      	mov	r7, r9
 800db40:	eb43 0307 	adc.w	r3, r3, r7
 800db44:	ebb2 0c0c 	subs.w	ip, r2, ip
 800db48:	eb61 0303 	sbc.w	r3, r1, r3
 800db4c:	0fda      	lsrs	r2, r3, #31
 800db4e:	eb12 020c 	adds.w	r2, r2, ip
 800db52:	f143 0300 	adc.w	r3, r3, #0
 800db56:	0852      	lsrs	r2, r2, #1
 800db58:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800db5c:	105b      	asrs	r3, r3, #1
 800db5e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800db62:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800db66:	e6dd      	b.n	800d924 <read_submessage_list+0xc8>
 800db68:	3b9aca00 	.word	0x3b9aca00

0800db6c <listen_message_reliably>:
 800db6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db70:	1e0b      	subs	r3, r1, #0
 800db72:	b09d      	sub	sp, #116	@ 0x74
 800db74:	bfb8      	it	lt
 800db76:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800db7a:	4680      	mov	r8, r0
 800db7c:	9305      	str	r3, [sp, #20]
 800db7e:	f000 fea1 	bl	800e8c4 <uxr_millis>
 800db82:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800db86:	4681      	mov	r9, r0
 800db88:	2a00      	cmp	r2, #0
 800db8a:	f000 80a1 	beq.w	800dcd0 <listen_message_reliably+0x164>
 800db8e:	2600      	movs	r6, #0
 800db90:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800db94:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800db98:	9303      	str	r3, [sp, #12]
 800db9a:	4630      	mov	r0, r6
 800db9c:	460f      	mov	r7, r1
 800db9e:	e00f      	b.n	800dbc0 <listen_message_reliably+0x54>
 800dba0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dba4:	9903      	ldr	r1, [sp, #12]
 800dba6:	455a      	cmp	r2, fp
 800dba8:	f106 0601 	add.w	r6, r6, #1
 800dbac:	eb73 0101 	sbcs.w	r1, r3, r1
 800dbb0:	b2f0      	uxtb	r0, r6
 800dbb2:	da01      	bge.n	800dbb8 <listen_message_reliably+0x4c>
 800dbb4:	4693      	mov	fp, r2
 800dbb6:	9303      	str	r3, [sp, #12]
 800dbb8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800dbbc:	4283      	cmp	r3, r0
 800dbbe:	d960      	bls.n	800dc82 <listen_message_reliably+0x116>
 800dbc0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800dbc4:	2102      	movs	r1, #2
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f000 fcfe 	bl	800e5c8 <uxr_stream_id>
 800dbcc:	00e4      	lsls	r4, r4, #3
 800dbce:	f104 0520 	add.w	r5, r4, #32
 800dbd2:	4445      	add	r5, r8
 800dbd4:	4601      	mov	r1, r0
 800dbd6:	463b      	mov	r3, r7
 800dbd8:	464a      	mov	r2, r9
 800dbda:	4628      	mov	r0, r5
 800dbdc:	9109      	str	r1, [sp, #36]	@ 0x24
 800dbde:	f007 f9cf 	bl	8014f80 <uxr_update_output_stream_heartbeat_timestamp>
 800dbe2:	eb08 0304 	add.w	r3, r8, r4
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d0da      	beq.n	800dba0 <listen_message_reliably+0x34>
 800dbea:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800dbee:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800dbf2:	9304      	str	r3, [sp, #16]
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	f000 fcaf 	bl	800e558 <uxr_session_header_offset>
 800dbfa:	3501      	adds	r5, #1
 800dbfc:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800dc00:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800dc04:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800dc08:	2300      	movs	r3, #0
 800dc0a:	2211      	movs	r2, #17
 800dc0c:	9000      	str	r0, [sp, #0]
 800dc0e:	a90c      	add	r1, sp, #48	@ 0x30
 800dc10:	4650      	mov	r0, sl
 800dc12:	f7ff fa39 	bl	800d088 <ucdr_init_buffer_origin_offset>
 800dc16:	2300      	movs	r3, #0
 800dc18:	2205      	movs	r2, #5
 800dc1a:	210b      	movs	r1, #11
 800dc1c:	4650      	mov	r0, sl
 800dc1e:	f000 fe0b 	bl	800e838 <uxr_buffer_submessage_header>
 800dc22:	8968      	ldrh	r0, [r5, #10]
 800dc24:	2101      	movs	r1, #1
 800dc26:	f007 fb63 	bl	80152f0 <uxr_seq_num_add>
 800dc2a:	892b      	ldrh	r3, [r5, #8]
 800dc2c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800dc30:	4602      	mov	r2, r0
 800dc32:	9b04      	ldr	r3, [sp, #16]
 800dc34:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800dc38:	a90a      	add	r1, sp, #40	@ 0x28
 800dc3a:	4650      	mov	r0, sl
 800dc3c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800dc40:	f001 fef4 	bl	800fa2c <uxr_serialize_HEARTBEAT_Payload>
 800dc44:	2200      	movs	r2, #0
 800dc46:	4611      	mov	r1, r2
 800dc48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dc4a:	4640      	mov	r0, r8
 800dc4c:	f000 fc2e 	bl	800e4ac <uxr_stamp_session_header>
 800dc50:	4650      	mov	r0, sl
 800dc52:	f7ff fa57 	bl	800d104 <ucdr_buffer_length>
 800dc56:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	a90c      	add	r1, sp, #48	@ 0x30
 800dc5e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800dc62:	4444      	add	r4, r8
 800dc64:	47a8      	blx	r5
 800dc66:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800dc6a:	9903      	ldr	r1, [sp, #12]
 800dc6c:	455a      	cmp	r2, fp
 800dc6e:	f106 0601 	add.w	r6, r6, #1
 800dc72:	eb73 0101 	sbcs.w	r1, r3, r1
 800dc76:	b2f0      	uxtb	r0, r6
 800dc78:	db9c      	blt.n	800dbb4 <listen_message_reliably+0x48>
 800dc7a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800dc7e:	4283      	cmp	r3, r0
 800dc80:	d89e      	bhi.n	800dbc0 <listen_message_reliably+0x54>
 800dc82:	9a03      	ldr	r2, [sp, #12]
 800dc84:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	bf08      	it	eq
 800dc8c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800dc90:	d01e      	beq.n	800dcd0 <listen_message_reliably+0x164>
 800dc92:	ebab 0309 	sub.w	r3, fp, r9
 800dc96:	9905      	ldr	r1, [sp, #20]
 800dc98:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	bf08      	it	eq
 800dca0:	2301      	moveq	r3, #1
 800dca2:	4299      	cmp	r1, r3
 800dca4:	bfa8      	it	ge
 800dca6:	4619      	movge	r1, r3
 800dca8:	6894      	ldr	r4, [r2, #8]
 800dcaa:	6810      	ldr	r0, [r2, #0]
 800dcac:	4689      	mov	r9, r1
 800dcae:	460b      	mov	r3, r1
 800dcb0:	aa08      	add	r2, sp, #32
 800dcb2:	a907      	add	r1, sp, #28
 800dcb4:	47a0      	blx	r4
 800dcb6:	b968      	cbnz	r0, 800dcd4 <listen_message_reliably+0x168>
 800dcb8:	9b05      	ldr	r3, [sp, #20]
 800dcba:	eba3 0309 	sub.w	r3, r3, r9
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	9305      	str	r3, [sp, #20]
 800dcc2:	f73f af5c 	bgt.w	800db7e <listen_message_reliably+0x12>
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	4620      	mov	r0, r4
 800dcca:	b01d      	add	sp, #116	@ 0x74
 800dccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd0:	9b05      	ldr	r3, [sp, #20]
 800dcd2:	e7e0      	b.n	800dc96 <listen_message_reliably+0x12a>
 800dcd4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800dcd8:	4604      	mov	r4, r0
 800dcda:	a80c      	add	r0, sp, #48	@ 0x30
 800dcdc:	f7ff f9e6 	bl	800d0ac <ucdr_init_buffer>
 800dce0:	2500      	movs	r5, #0
 800dce2:	f10d 031a 	add.w	r3, sp, #26
 800dce6:	aa06      	add	r2, sp, #24
 800dce8:	a90c      	add	r1, sp, #48	@ 0x30
 800dcea:	4640      	mov	r0, r8
 800dcec:	f88d 5018 	strb.w	r5, [sp, #24]
 800dcf0:	f000 fbf0 	bl	800e4d4 <uxr_read_session_header>
 800dcf4:	b918      	cbnz	r0, 800dcfe <listen_message_reliably+0x192>
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	b01d      	add	sp, #116	@ 0x74
 800dcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcfe:	4629      	mov	r1, r5
 800dd00:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800dd04:	f000 fc8a 	bl	800e61c <uxr_stream_id_from_raw>
 800dd08:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800dd0c:	2d01      	cmp	r5, #1
 800dd0e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800dd12:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800dd16:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800dd1a:	d04b      	beq.n	800ddb4 <listen_message_reliably+0x248>
 800dd1c:	2d02      	cmp	r5, #2
 800dd1e:	d00f      	beq.n	800dd40 <listen_message_reliably+0x1d4>
 800dd20:	2d00      	cmp	r5, #0
 800dd22:	d1e8      	bne.n	800dcf6 <listen_message_reliably+0x18a>
 800dd24:	4629      	mov	r1, r5
 800dd26:	4628      	mov	r0, r5
 800dd28:	f000 fc78 	bl	800e61c <uxr_stream_id_from_raw>
 800dd2c:	a90c      	add	r1, sp, #48	@ 0x30
 800dd2e:	4602      	mov	r2, r0
 800dd30:	4640      	mov	r0, r8
 800dd32:	920a      	str	r2, [sp, #40]	@ 0x28
 800dd34:	f7ff fd92 	bl	800d85c <read_submessage_list>
 800dd38:	4620      	mov	r0, r4
 800dd3a:	b01d      	add	sp, #116	@ 0x74
 800dd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd40:	4631      	mov	r1, r6
 800dd42:	f108 0008 	add.w	r0, r8, #8
 800dd46:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800dd4a:	f000 fd55 	bl	800e7f8 <uxr_get_input_reliable_stream>
 800dd4e:	4607      	mov	r7, r0
 800dd50:	b338      	cbz	r0, 800dda2 <listen_message_reliably+0x236>
 800dd52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd54:	9203      	str	r2, [sp, #12]
 800dd56:	a80c      	add	r0, sp, #48	@ 0x30
 800dd58:	f7ff f9d8 	bl	800d10c <ucdr_buffer_remaining>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	f10d 0019 	add.w	r0, sp, #25
 800dd62:	9000      	str	r0, [sp, #0]
 800dd64:	9a03      	ldr	r2, [sp, #12]
 800dd66:	4651      	mov	r1, sl
 800dd68:	4638      	mov	r0, r7
 800dd6a:	f006 fd1f 	bl	80147ac <uxr_receive_reliable_message>
 800dd6e:	b1c0      	cbz	r0, 800dda2 <listen_message_reliably+0x236>
 800dd70:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800dd74:	b393      	cbz	r3, 800dddc <listen_message_reliably+0x270>
 800dd76:	ad14      	add	r5, sp, #80	@ 0x50
 800dd78:	f04f 0a02 	mov.w	sl, #2
 800dd7c:	e00a      	b.n	800dd94 <listen_message_reliably+0x228>
 800dd7e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800dd82:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800dd86:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800dd8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	4640      	mov	r0, r8
 800dd90:	f7ff fd64 	bl	800d85c <read_submessage_list>
 800dd94:	2204      	movs	r2, #4
 800dd96:	4629      	mov	r1, r5
 800dd98:	4638      	mov	r0, r7
 800dd9a:	f006 fd87 	bl	80148ac <uxr_next_input_reliable_buffer_available>
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	d1ed      	bne.n	800dd7e <listen_message_reliably+0x212>
 800dda2:	4640      	mov	r0, r8
 800dda4:	4632      	mov	r2, r6
 800dda6:	4649      	mov	r1, r9
 800dda8:	f7ff fbd2 	bl	800d550 <write_submessage_acknack.isra.0>
 800ddac:	4620      	mov	r0, r4
 800ddae:	b01d      	add	sp, #116	@ 0x74
 800ddb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb4:	4631      	mov	r1, r6
 800ddb6:	f108 0008 	add.w	r0, r8, #8
 800ddba:	f000 fd13 	bl	800e7e4 <uxr_get_input_best_effort_stream>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d099      	beq.n	800dcf6 <listen_message_reliably+0x18a>
 800ddc2:	4651      	mov	r1, sl
 800ddc4:	f006 fc5e 	bl	8014684 <uxr_receive_best_effort_message>
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d094      	beq.n	800dcf6 <listen_message_reliably+0x18a>
 800ddcc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800ddd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ddd2:	a90c      	add	r1, sp, #48	@ 0x30
 800ddd4:	4640      	mov	r0, r8
 800ddd6:	f7ff fd41 	bl	800d85c <read_submessage_list>
 800ddda:	e78c      	b.n	800dcf6 <listen_message_reliably+0x18a>
 800dddc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800dde0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dde2:	a90c      	add	r1, sp, #48	@ 0x30
 800dde4:	4640      	mov	r0, r8
 800dde6:	f7ff fd39 	bl	800d85c <read_submessage_list>
 800ddea:	e7c4      	b.n	800dd76 <listen_message_reliably+0x20a>

0800ddec <uxr_run_session_timeout>:
 800ddec:	b570      	push	{r4, r5, r6, lr}
 800ddee:	4604      	mov	r4, r0
 800ddf0:	460d      	mov	r5, r1
 800ddf2:	f000 fd67 	bl	800e8c4 <uxr_millis>
 800ddf6:	4606      	mov	r6, r0
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f7ff fc71 	bl	800d6e0 <uxr_flash_output_streams>
 800ddfe:	4629      	mov	r1, r5
 800de00:	4620      	mov	r0, r4
 800de02:	f7ff feb3 	bl	800db6c <listen_message_reliably>
 800de06:	f000 fd5d 	bl	800e8c4 <uxr_millis>
 800de0a:	1b83      	subs	r3, r0, r6
 800de0c:	1ae9      	subs	r1, r5, r3
 800de0e:	2900      	cmp	r1, #0
 800de10:	dcf6      	bgt.n	800de00 <uxr_run_session_timeout+0x14>
 800de12:	f104 0008 	add.w	r0, r4, #8
 800de16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de1a:	f000 bcf7 	b.w	800e80c <uxr_output_streams_confirmed>
 800de1e:	bf00      	nop

0800de20 <uxr_run_session_until_data>:
 800de20:	b570      	push	{r4, r5, r6, lr}
 800de22:	4604      	mov	r4, r0
 800de24:	460d      	mov	r5, r1
 800de26:	f000 fd4d 	bl	800e8c4 <uxr_millis>
 800de2a:	4606      	mov	r6, r0
 800de2c:	4620      	mov	r0, r4
 800de2e:	f7ff fc57 	bl	800d6e0 <uxr_flash_output_streams>
 800de32:	2300      	movs	r3, #0
 800de34:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800de38:	4629      	mov	r1, r5
 800de3a:	e005      	b.n	800de48 <uxr_run_session_until_data+0x28>
 800de3c:	f000 fd42 	bl	800e8c4 <uxr_millis>
 800de40:	1b83      	subs	r3, r0, r6
 800de42:	1ae9      	subs	r1, r5, r3
 800de44:	2900      	cmp	r1, #0
 800de46:	dd07      	ble.n	800de58 <uxr_run_session_until_data+0x38>
 800de48:	4620      	mov	r0, r4
 800de4a:	f7ff fe8f 	bl	800db6c <listen_message_reliably>
 800de4e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800de52:	2800      	cmp	r0, #0
 800de54:	d0f2      	beq.n	800de3c <uxr_run_session_until_data+0x1c>
 800de56:	bd70      	pop	{r4, r5, r6, pc}
 800de58:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800de5c:	bd70      	pop	{r4, r5, r6, pc}
 800de5e:	bf00      	nop

0800de60 <uxr_run_session_until_confirm_delivery>:
 800de60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de64:	4606      	mov	r6, r0
 800de66:	460d      	mov	r5, r1
 800de68:	f000 fd2c 	bl	800e8c4 <uxr_millis>
 800de6c:	4607      	mov	r7, r0
 800de6e:	4630      	mov	r0, r6
 800de70:	f7ff fc36 	bl	800d6e0 <uxr_flash_output_streams>
 800de74:	2d00      	cmp	r5, #0
 800de76:	f106 0808 	add.w	r8, r6, #8
 800de7a:	bfa8      	it	ge
 800de7c:	462c      	movge	r4, r5
 800de7e:	da07      	bge.n	800de90 <uxr_run_session_until_confirm_delivery+0x30>
 800de80:	e00e      	b.n	800dea0 <uxr_run_session_until_confirm_delivery+0x40>
 800de82:	f7ff fe73 	bl	800db6c <listen_message_reliably>
 800de86:	f000 fd1d 	bl	800e8c4 <uxr_millis>
 800de8a:	1bc3      	subs	r3, r0, r7
 800de8c:	1aec      	subs	r4, r5, r3
 800de8e:	d407      	bmi.n	800dea0 <uxr_run_session_until_confirm_delivery+0x40>
 800de90:	4640      	mov	r0, r8
 800de92:	f000 fcbb 	bl	800e80c <uxr_output_streams_confirmed>
 800de96:	4603      	mov	r3, r0
 800de98:	4621      	mov	r1, r4
 800de9a:	4630      	mov	r0, r6
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d0f0      	beq.n	800de82 <uxr_run_session_until_confirm_delivery+0x22>
 800dea0:	4640      	mov	r0, r8
 800dea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dea6:	f000 bcb1 	b.w	800e80c <uxr_output_streams_confirmed>
 800deaa:	bf00      	nop

0800deac <uxr_run_session_until_all_status>:
 800deac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deb0:	9c08      	ldr	r4, [sp, #32]
 800deb2:	4606      	mov	r6, r0
 800deb4:	460f      	mov	r7, r1
 800deb6:	4691      	mov	r9, r2
 800deb8:	461d      	mov	r5, r3
 800deba:	f7ff fc11 	bl	800d6e0 <uxr_flash_output_streams>
 800debe:	b124      	cbz	r4, 800deca <uxr_run_session_until_all_status+0x1e>
 800dec0:	4622      	mov	r2, r4
 800dec2:	21ff      	movs	r1, #255	@ 0xff
 800dec4:	4628      	mov	r0, r5
 800dec6:	f008 ff35 	bl	8016d34 <memset>
 800deca:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800dece:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800ded0:	f000 fcf8 	bl	800e8c4 <uxr_millis>
 800ded4:	3d01      	subs	r5, #1
 800ded6:	f1a9 0902 	sub.w	r9, r9, #2
 800deda:	4680      	mov	r8, r0
 800dedc:	4639      	mov	r1, r7
 800dede:	4630      	mov	r0, r6
 800dee0:	f7ff fe44 	bl	800db6c <listen_message_reliably>
 800dee4:	f000 fcee 	bl	800e8c4 <uxr_millis>
 800dee8:	eba0 0008 	sub.w	r0, r0, r8
 800deec:	1a39      	subs	r1, r7, r0
 800deee:	b344      	cbz	r4, 800df42 <uxr_run_session_until_all_status+0x96>
 800def0:	4628      	mov	r0, r5
 800def2:	46ac      	mov	ip, r5
 800def4:	2301      	movs	r3, #1
 800def6:	e002      	b.n	800defe <uxr_run_session_until_all_status+0x52>
 800def8:	42a3      	cmp	r3, r4
 800defa:	d20d      	bcs.n	800df18 <uxr_run_session_until_all_status+0x6c>
 800defc:	3301      	adds	r3, #1
 800defe:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800df02:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800df06:	d1f7      	bne.n	800def8 <uxr_run_session_until_all_status+0x4c>
 800df08:	42a3      	cmp	r3, r4
 800df0a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800df0e:	d213      	bcs.n	800df38 <uxr_run_session_until_all_status+0x8c>
 800df10:	2a00      	cmp	r2, #0
 800df12:	d0f3      	beq.n	800defc <uxr_run_session_until_all_status+0x50>
 800df14:	2900      	cmp	r1, #0
 800df16:	dce2      	bgt.n	800dede <uxr_run_session_until_all_status+0x32>
 800df18:	2300      	movs	r3, #0
 800df1a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800df1c:	442c      	add	r4, r5
 800df1e:	e001      	b.n	800df24 <uxr_run_session_until_all_status+0x78>
 800df20:	2b01      	cmp	r3, #1
 800df22:	d812      	bhi.n	800df4a <uxr_run_session_until_all_status+0x9e>
 800df24:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800df28:	4284      	cmp	r4, r0
 800df2a:	d1f9      	bne.n	800df20 <uxr_run_session_until_all_status+0x74>
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	bf8c      	ite	hi
 800df30:	2000      	movhi	r0, #0
 800df32:	2001      	movls	r0, #1
 800df34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df38:	2900      	cmp	r1, #0
 800df3a:	dded      	ble.n	800df18 <uxr_run_session_until_all_status+0x6c>
 800df3c:	2a00      	cmp	r2, #0
 800df3e:	d1ce      	bne.n	800dede <uxr_run_session_until_all_status+0x32>
 800df40:	e7ea      	b.n	800df18 <uxr_run_session_until_all_status+0x6c>
 800df42:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800df44:	2001      	movs	r0, #1
 800df46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df4a:	2000      	movs	r0, #0
 800df4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800df50 <wait_session_status>:
 800df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	4604      	mov	r4, r0
 800df56:	b09d      	sub	sp, #116	@ 0x74
 800df58:	20ff      	movs	r0, #255	@ 0xff
 800df5a:	7160      	strb	r0, [r4, #5]
 800df5c:	9303      	str	r3, [sp, #12]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f000 80b6 	beq.w	800e0d0 <wait_session_status+0x180>
 800df64:	468a      	mov	sl, r1
 800df66:	4691      	mov	r9, r2
 800df68:	f04f 0b00 	mov.w	fp, #0
 800df6c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800df6e:	464a      	mov	r2, r9
 800df70:	e9d3 0500 	ldrd	r0, r5, [r3]
 800df74:	4651      	mov	r1, sl
 800df76:	47a8      	blx	r5
 800df78:	f000 fca4 	bl	800e8c4 <uxr_millis>
 800df7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800df80:	4605      	mov	r5, r0
 800df82:	e009      	b.n	800df98 <wait_session_status+0x48>
 800df84:	f000 fc9e 	bl	800e8c4 <uxr_millis>
 800df88:	1b40      	subs	r0, r0, r5
 800df8a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800df8e:	2b00      	cmp	r3, #0
 800df90:	dd40      	ble.n	800e014 <wait_session_status+0xc4>
 800df92:	7960      	ldrb	r0, [r4, #5]
 800df94:	28ff      	cmp	r0, #255	@ 0xff
 800df96:	d145      	bne.n	800e024 <wait_session_status+0xd4>
 800df98:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800df9a:	a908      	add	r1, sp, #32
 800df9c:	6896      	ldr	r6, [r2, #8]
 800df9e:	6810      	ldr	r0, [r2, #0]
 800dfa0:	aa09      	add	r2, sp, #36	@ 0x24
 800dfa2:	47b0      	blx	r6
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	d0ed      	beq.n	800df84 <wait_session_status+0x34>
 800dfa8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800dfac:	a80c      	add	r0, sp, #48	@ 0x30
 800dfae:	f7ff f87d 	bl	800d0ac <ucdr_init_buffer>
 800dfb2:	2600      	movs	r6, #0
 800dfb4:	f10d 031e 	add.w	r3, sp, #30
 800dfb8:	aa07      	add	r2, sp, #28
 800dfba:	a90c      	add	r1, sp, #48	@ 0x30
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f88d 601c 	strb.w	r6, [sp, #28]
 800dfc2:	f000 fa87 	bl	800e4d4 <uxr_read_session_header>
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d0dc      	beq.n	800df84 <wait_session_status+0x34>
 800dfca:	4631      	mov	r1, r6
 800dfcc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800dfd0:	f000 fb24 	bl	800e61c <uxr_stream_id_from_raw>
 800dfd4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800dfd8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800dfdc:	9302      	str	r3, [sp, #8]
 800dfde:	2f01      	cmp	r7, #1
 800dfe0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800dfe4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800dfe8:	d05c      	beq.n	800e0a4 <wait_session_status+0x154>
 800dfea:	2f02      	cmp	r7, #2
 800dfec:	d020      	beq.n	800e030 <wait_session_status+0xe0>
 800dfee:	2f00      	cmp	r7, #0
 800dff0:	d1c8      	bne.n	800df84 <wait_session_status+0x34>
 800dff2:	4639      	mov	r1, r7
 800dff4:	4638      	mov	r0, r7
 800dff6:	f000 fb11 	bl	800e61c <uxr_stream_id_from_raw>
 800dffa:	a90c      	add	r1, sp, #48	@ 0x30
 800dffc:	4602      	mov	r2, r0
 800dffe:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e000:	4620      	mov	r0, r4
 800e002:	f7ff fc2b 	bl	800d85c <read_submessage_list>
 800e006:	f000 fc5d 	bl	800e8c4 <uxr_millis>
 800e00a:	1b40      	subs	r0, r0, r5
 800e00c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e010:	2b00      	cmp	r3, #0
 800e012:	dcbe      	bgt.n	800df92 <wait_session_status+0x42>
 800e014:	9b03      	ldr	r3, [sp, #12]
 800e016:	7960      	ldrb	r0, [r4, #5]
 800e018:	f10b 0b01 	add.w	fp, fp, #1
 800e01c:	455b      	cmp	r3, fp
 800e01e:	d001      	beq.n	800e024 <wait_session_status+0xd4>
 800e020:	28ff      	cmp	r0, #255	@ 0xff
 800e022:	d0a3      	beq.n	800df6c <wait_session_status+0x1c>
 800e024:	38ff      	subs	r0, #255	@ 0xff
 800e026:	bf18      	it	ne
 800e028:	2001      	movne	r0, #1
 800e02a:	b01d      	add	sp, #116	@ 0x74
 800e02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e030:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800e034:	9304      	str	r3, [sp, #16]
 800e036:	4631      	mov	r1, r6
 800e038:	f104 0008 	add.w	r0, r4, #8
 800e03c:	f000 fbdc 	bl	800e7f8 <uxr_get_input_reliable_stream>
 800e040:	4680      	mov	r8, r0
 800e042:	b348      	cbz	r0, 800e098 <wait_session_status+0x148>
 800e044:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e046:	9205      	str	r2, [sp, #20]
 800e048:	a80c      	add	r0, sp, #48	@ 0x30
 800e04a:	f7ff f85f 	bl	800d10c <ucdr_buffer_remaining>
 800e04e:	4603      	mov	r3, r0
 800e050:	f10d 001d 	add.w	r0, sp, #29
 800e054:	9000      	str	r0, [sp, #0]
 800e056:	9a05      	ldr	r2, [sp, #20]
 800e058:	9902      	ldr	r1, [sp, #8]
 800e05a:	4640      	mov	r0, r8
 800e05c:	f006 fba6 	bl	80147ac <uxr_receive_reliable_message>
 800e060:	b1d0      	cbz	r0, 800e098 <wait_session_status+0x148>
 800e062:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d03a      	beq.n	800e0e0 <wait_session_status+0x190>
 800e06a:	9f04      	ldr	r7, [sp, #16]
 800e06c:	e00a      	b.n	800e084 <wait_session_status+0x134>
 800e06e:	f04f 0302 	mov.w	r3, #2
 800e072:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800e076:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800e07a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800e07e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e080:	f7ff fbec 	bl	800d85c <read_submessage_list>
 800e084:	a914      	add	r1, sp, #80	@ 0x50
 800e086:	2204      	movs	r2, #4
 800e088:	4640      	mov	r0, r8
 800e08a:	f006 fc0f 	bl	80148ac <uxr_next_input_reliable_buffer_available>
 800e08e:	4603      	mov	r3, r0
 800e090:	a914      	add	r1, sp, #80	@ 0x50
 800e092:	4620      	mov	r0, r4
 800e094:	2b00      	cmp	r3, #0
 800e096:	d1ea      	bne.n	800e06e <wait_session_status+0x11e>
 800e098:	9904      	ldr	r1, [sp, #16]
 800e09a:	4632      	mov	r2, r6
 800e09c:	4620      	mov	r0, r4
 800e09e:	f7ff fa57 	bl	800d550 <write_submessage_acknack.isra.0>
 800e0a2:	e76f      	b.n	800df84 <wait_session_status+0x34>
 800e0a4:	4631      	mov	r1, r6
 800e0a6:	f104 0008 	add.w	r0, r4, #8
 800e0aa:	f000 fb9b 	bl	800e7e4 <uxr_get_input_best_effort_stream>
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	f43f af68 	beq.w	800df84 <wait_session_status+0x34>
 800e0b4:	9902      	ldr	r1, [sp, #8]
 800e0b6:	f006 fae5 	bl	8014684 <uxr_receive_best_effort_message>
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	f43f af62 	beq.w	800df84 <wait_session_status+0x34>
 800e0c0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e0c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e0c6:	a90c      	add	r1, sp, #48	@ 0x30
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	f7ff fbc7 	bl	800d85c <read_submessage_list>
 800e0ce:	e759      	b.n	800df84 <wait_session_status+0x34>
 800e0d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e0d2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e0d6:	47a0      	blx	r4
 800e0d8:	2001      	movs	r0, #1
 800e0da:	b01d      	add	sp, #116	@ 0x74
 800e0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e0e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e0e6:	a90c      	add	r1, sp, #48	@ 0x30
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	f7ff fbb7 	bl	800d85c <read_submessage_list>
 800e0ee:	e7bc      	b.n	800e06a <wait_session_status+0x11a>

0800e0f0 <uxr_delete_session_retries>:
 800e0f0:	b530      	push	{r4, r5, lr}
 800e0f2:	b08f      	sub	sp, #60	@ 0x3c
 800e0f4:	4604      	mov	r4, r0
 800e0f6:	460d      	mov	r5, r1
 800e0f8:	f000 fa2e 	bl	800e558 <uxr_session_header_offset>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	2210      	movs	r2, #16
 800e100:	9000      	str	r0, [sp, #0]
 800e102:	a902      	add	r1, sp, #8
 800e104:	a806      	add	r0, sp, #24
 800e106:	f7fe ffbf 	bl	800d088 <ucdr_init_buffer_origin_offset>
 800e10a:	a906      	add	r1, sp, #24
 800e10c:	4620      	mov	r0, r4
 800e10e:	f000 f973 	bl	800e3f8 <uxr_buffer_delete_session>
 800e112:	2200      	movs	r2, #0
 800e114:	4611      	mov	r1, r2
 800e116:	9b06      	ldr	r3, [sp, #24]
 800e118:	4620      	mov	r0, r4
 800e11a:	f000 f9c7 	bl	800e4ac <uxr_stamp_session_header>
 800e11e:	a806      	add	r0, sp, #24
 800e120:	f7fe fff0 	bl	800d104 <ucdr_buffer_length>
 800e124:	462b      	mov	r3, r5
 800e126:	4602      	mov	r2, r0
 800e128:	a902      	add	r1, sp, #8
 800e12a:	4620      	mov	r0, r4
 800e12c:	f7ff ff10 	bl	800df50 <wait_session_status>
 800e130:	b118      	cbz	r0, 800e13a <uxr_delete_session_retries+0x4a>
 800e132:	7960      	ldrb	r0, [r4, #5]
 800e134:	fab0 f080 	clz	r0, r0
 800e138:	0940      	lsrs	r0, r0, #5
 800e13a:	b00f      	add	sp, #60	@ 0x3c
 800e13c:	bd30      	pop	{r4, r5, pc}
 800e13e:	bf00      	nop

0800e140 <uxr_create_session>:
 800e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	f100 0b08 	add.w	fp, r0, #8
 800e148:	b0ab      	sub	sp, #172	@ 0xac
 800e14a:	4604      	mov	r4, r0
 800e14c:	4658      	mov	r0, fp
 800e14e:	f000 fa99 	bl	800e684 <uxr_reset_stream_storage>
 800e152:	4620      	mov	r0, r4
 800e154:	f000 fa00 	bl	800e558 <uxr_session_header_offset>
 800e158:	2300      	movs	r3, #0
 800e15a:	9000      	str	r0, [sp, #0]
 800e15c:	221c      	movs	r2, #28
 800e15e:	a90b      	add	r1, sp, #44	@ 0x2c
 800e160:	a812      	add	r0, sp, #72	@ 0x48
 800e162:	f7fe ff91 	bl	800d088 <ucdr_init_buffer_origin_offset>
 800e166:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e168:	8a1a      	ldrh	r2, [r3, #16]
 800e16a:	3a04      	subs	r2, #4
 800e16c:	b292      	uxth	r2, r2
 800e16e:	a912      	add	r1, sp, #72	@ 0x48
 800e170:	4620      	mov	r0, r4
 800e172:	f000 f917 	bl	800e3a4 <uxr_buffer_create_session>
 800e176:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 f983 	bl	800e484 <uxr_stamp_create_session_header>
 800e17e:	a812      	add	r0, sp, #72	@ 0x48
 800e180:	f7fe ffc0 	bl	800d104 <ucdr_buffer_length>
 800e184:	23ff      	movs	r3, #255	@ 0xff
 800e186:	7163      	strb	r3, [r4, #5]
 800e188:	230a      	movs	r3, #10
 800e18a:	46da      	mov	sl, fp
 800e18c:	9303      	str	r3, [sp, #12]
 800e18e:	4683      	mov	fp, r0
 800e190:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e192:	465a      	mov	r2, fp
 800e194:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e198:	a90b      	add	r1, sp, #44	@ 0x2c
 800e19a:	47a8      	blx	r5
 800e19c:	f000 fb92 	bl	800e8c4 <uxr_millis>
 800e1a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e1a4:	4605      	mov	r5, r0
 800e1a6:	e009      	b.n	800e1bc <uxr_create_session+0x7c>
 800e1a8:	f000 fb8c 	bl	800e8c4 <uxr_millis>
 800e1ac:	1b40      	subs	r0, r0, r5
 800e1ae:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	7962      	ldrb	r2, [r4, #5]
 800e1b6:	dd38      	ble.n	800e22a <uxr_create_session+0xea>
 800e1b8:	2aff      	cmp	r2, #255	@ 0xff
 800e1ba:	d13c      	bne.n	800e236 <uxr_create_session+0xf6>
 800e1bc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e1be:	a907      	add	r1, sp, #28
 800e1c0:	6896      	ldr	r6, [r2, #8]
 800e1c2:	6810      	ldr	r0, [r2, #0]
 800e1c4:	aa08      	add	r2, sp, #32
 800e1c6:	47b0      	blx	r6
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d0ed      	beq.n	800e1a8 <uxr_create_session+0x68>
 800e1cc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e1d0:	a81a      	add	r0, sp, #104	@ 0x68
 800e1d2:	f7fe ff6b 	bl	800d0ac <ucdr_init_buffer>
 800e1d6:	2600      	movs	r6, #0
 800e1d8:	f10d 031a 	add.w	r3, sp, #26
 800e1dc:	aa06      	add	r2, sp, #24
 800e1de:	a91a      	add	r1, sp, #104	@ 0x68
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	f88d 6018 	strb.w	r6, [sp, #24]
 800e1e6:	f000 f975 	bl	800e4d4 <uxr_read_session_header>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d0dc      	beq.n	800e1a8 <uxr_create_session+0x68>
 800e1ee:	4631      	mov	r1, r6
 800e1f0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e1f4:	f000 fa12 	bl	800e61c <uxr_stream_id_from_raw>
 800e1f8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e1fc:	2e01      	cmp	r6, #1
 800e1fe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e202:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e206:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e20a:	d053      	beq.n	800e2b4 <uxr_create_session+0x174>
 800e20c:	2e02      	cmp	r6, #2
 800e20e:	d018      	beq.n	800e242 <uxr_create_session+0x102>
 800e210:	2e00      	cmp	r6, #0
 800e212:	d1c9      	bne.n	800e1a8 <uxr_create_session+0x68>
 800e214:	4631      	mov	r1, r6
 800e216:	4630      	mov	r0, r6
 800e218:	f000 fa00 	bl	800e61c <uxr_stream_id_from_raw>
 800e21c:	a91a      	add	r1, sp, #104	@ 0x68
 800e21e:	4602      	mov	r2, r0
 800e220:	900a      	str	r0, [sp, #40]	@ 0x28
 800e222:	4620      	mov	r0, r4
 800e224:	f7ff fb1a 	bl	800d85c <read_submessage_list>
 800e228:	e7be      	b.n	800e1a8 <uxr_create_session+0x68>
 800e22a:	9b03      	ldr	r3, [sp, #12]
 800e22c:	3b01      	subs	r3, #1
 800e22e:	9303      	str	r3, [sp, #12]
 800e230:	d001      	beq.n	800e236 <uxr_create_session+0xf6>
 800e232:	2aff      	cmp	r2, #255	@ 0xff
 800e234:	d0ac      	beq.n	800e190 <uxr_create_session+0x50>
 800e236:	2a00      	cmp	r2, #0
 800e238:	d051      	beq.n	800e2de <uxr_create_session+0x19e>
 800e23a:	2000      	movs	r0, #0
 800e23c:	b02b      	add	sp, #172	@ 0xac
 800e23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e242:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e246:	9304      	str	r3, [sp, #16]
 800e248:	4639      	mov	r1, r7
 800e24a:	4650      	mov	r0, sl
 800e24c:	f000 fad4 	bl	800e7f8 <uxr_get_input_reliable_stream>
 800e250:	4680      	mov	r8, r0
 800e252:	b348      	cbz	r0, 800e2a8 <uxr_create_session+0x168>
 800e254:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e256:	9205      	str	r2, [sp, #20]
 800e258:	a81a      	add	r0, sp, #104	@ 0x68
 800e25a:	f7fe ff57 	bl	800d10c <ucdr_buffer_remaining>
 800e25e:	4603      	mov	r3, r0
 800e260:	f10d 0019 	add.w	r0, sp, #25
 800e264:	9000      	str	r0, [sp, #0]
 800e266:	9a05      	ldr	r2, [sp, #20]
 800e268:	4649      	mov	r1, r9
 800e26a:	4640      	mov	r0, r8
 800e26c:	f006 fa9e 	bl	80147ac <uxr_receive_reliable_message>
 800e270:	b1d0      	cbz	r0, 800e2a8 <uxr_create_session+0x168>
 800e272:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d038      	beq.n	800e2ec <uxr_create_session+0x1ac>
 800e27a:	9e04      	ldr	r6, [sp, #16]
 800e27c:	e00a      	b.n	800e294 <uxr_create_session+0x154>
 800e27e:	f04f 0302 	mov.w	r3, #2
 800e282:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800e286:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800e28a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e28e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e290:	f7ff fae4 	bl	800d85c <read_submessage_list>
 800e294:	a922      	add	r1, sp, #136	@ 0x88
 800e296:	2204      	movs	r2, #4
 800e298:	4640      	mov	r0, r8
 800e29a:	f006 fb07 	bl	80148ac <uxr_next_input_reliable_buffer_available>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	a922      	add	r1, sp, #136	@ 0x88
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d1ea      	bne.n	800e27e <uxr_create_session+0x13e>
 800e2a8:	9904      	ldr	r1, [sp, #16]
 800e2aa:	463a      	mov	r2, r7
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f7ff f94f 	bl	800d550 <write_submessage_acknack.isra.0>
 800e2b2:	e779      	b.n	800e1a8 <uxr_create_session+0x68>
 800e2b4:	4639      	mov	r1, r7
 800e2b6:	4650      	mov	r0, sl
 800e2b8:	f000 fa94 	bl	800e7e4 <uxr_get_input_best_effort_stream>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	f43f af73 	beq.w	800e1a8 <uxr_create_session+0x68>
 800e2c2:	4649      	mov	r1, r9
 800e2c4:	f006 f9de 	bl	8014684 <uxr_receive_best_effort_message>
 800e2c8:	2800      	cmp	r0, #0
 800e2ca:	f43f af6d 	beq.w	800e1a8 <uxr_create_session+0x68>
 800e2ce:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e2d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2d4:	a91a      	add	r1, sp, #104	@ 0x68
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f7ff fac0 	bl	800d85c <read_submessage_list>
 800e2dc:	e764      	b.n	800e1a8 <uxr_create_session+0x68>
 800e2de:	4650      	mov	r0, sl
 800e2e0:	f000 f9d0 	bl	800e684 <uxr_reset_stream_storage>
 800e2e4:	2001      	movs	r0, #1
 800e2e6:	b02b      	add	sp, #172	@ 0xac
 800e2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ec:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e2f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2f2:	a91a      	add	r1, sp, #104	@ 0x68
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	f7ff fab1 	bl	800d85c <read_submessage_list>
 800e2fa:	e7be      	b.n	800e27a <uxr_create_session+0x13a>

0800e2fc <uxr_prepare_stream_to_write_submessage>:
 800e2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e300:	b082      	sub	sp, #8
 800e302:	4682      	mov	sl, r0
 800e304:	4610      	mov	r0, r2
 800e306:	4615      	mov	r5, r2
 800e308:	461e      	mov	r6, r3
 800e30a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800e30e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800e312:	9101      	str	r1, [sp, #4]
 800e314:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e318:	f000 face 	bl	800e8b8 <uxr_submessage_padding>
 800e31c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e320:	f105 0904 	add.w	r9, r5, #4
 800e324:	2b01      	cmp	r3, #1
 800e326:	4481      	add	r9, r0
 800e328:	d01d      	beq.n	800e366 <uxr_prepare_stream_to_write_submessage+0x6a>
 800e32a:	2b02      	cmp	r3, #2
 800e32c:	d116      	bne.n	800e35c <uxr_prepare_stream_to_write_submessage+0x60>
 800e32e:	4621      	mov	r1, r4
 800e330:	f10a 0008 	add.w	r0, sl, #8
 800e334:	f000 fa4c 	bl	800e7d0 <uxr_get_output_reliable_stream>
 800e338:	4604      	mov	r4, r0
 800e33a:	b158      	cbz	r0, 800e354 <uxr_prepare_stream_to_write_submessage+0x58>
 800e33c:	4649      	mov	r1, r9
 800e33e:	4632      	mov	r2, r6
 800e340:	f006 fc70 	bl	8014c24 <uxr_prepare_reliable_buffer_to_write>
 800e344:	4604      	mov	r4, r0
 800e346:	b12c      	cbz	r4, 800e354 <uxr_prepare_stream_to_write_submessage+0x58>
 800e348:	4643      	mov	r3, r8
 800e34a:	b2aa      	uxth	r2, r5
 800e34c:	4639      	mov	r1, r7
 800e34e:	4630      	mov	r0, r6
 800e350:	f000 fa72 	bl	800e838 <uxr_buffer_submessage_header>
 800e354:	4620      	mov	r0, r4
 800e356:	b002      	add	sp, #8
 800e358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e35c:	2400      	movs	r4, #0
 800e35e:	4620      	mov	r0, r4
 800e360:	b002      	add	sp, #8
 800e362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e366:	4621      	mov	r1, r4
 800e368:	f10a 0008 	add.w	r0, sl, #8
 800e36c:	f000 fa28 	bl	800e7c0 <uxr_get_output_best_effort_stream>
 800e370:	4604      	mov	r4, r0
 800e372:	2800      	cmp	r0, #0
 800e374:	d0ee      	beq.n	800e354 <uxr_prepare_stream_to_write_submessage+0x58>
 800e376:	4649      	mov	r1, r9
 800e378:	4632      	mov	r2, r6
 800e37a:	f006 fb83 	bl	8014a84 <uxr_prepare_best_effort_buffer_to_write>
 800e37e:	4604      	mov	r4, r0
 800e380:	e7e1      	b.n	800e346 <uxr_prepare_stream_to_write_submessage+0x4a>
 800e382:	bf00      	nop

0800e384 <uxr_init_session_info>:
 800e384:	0e13      	lsrs	r3, r2, #24
 800e386:	7043      	strb	r3, [r0, #1]
 800e388:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e38c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e390:	7001      	strb	r1, [r0, #0]
 800e392:	70c3      	strb	r3, [r0, #3]
 800e394:	2109      	movs	r1, #9
 800e396:	23ff      	movs	r3, #255	@ 0xff
 800e398:	f880 c002 	strb.w	ip, [r0, #2]
 800e39c:	7102      	strb	r2, [r0, #4]
 800e39e:	80c1      	strh	r1, [r0, #6]
 800e3a0:	7143      	strb	r3, [r0, #5]
 800e3a2:	4770      	bx	lr

0800e3a4 <uxr_buffer_create_session>:
 800e3a4:	b530      	push	{r4, r5, lr}
 800e3a6:	b089      	sub	sp, #36	@ 0x24
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	4d12      	ldr	r5, [pc, #72]	@ (800e3f4 <uxr_buffer_create_session+0x50>)
 800e3ac:	9307      	str	r3, [sp, #28]
 800e3ae:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	9301      	str	r3, [sp, #4]
 800e3b6:	80c2      	strh	r2, [r0, #6]
 800e3b8:	f88d 2004 	strb.w	r2, [sp, #4]
 800e3bc:	682a      	ldr	r2, [r5, #0]
 800e3be:	9200      	str	r2, [sp, #0]
 800e3c0:	88aa      	ldrh	r2, [r5, #4]
 800e3c2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e3c6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800e3ca:	9202      	str	r2, [sp, #8]
 800e3cc:	460c      	mov	r4, r1
 800e3ce:	7802      	ldrb	r2, [r0, #0]
 800e3d0:	9303      	str	r3, [sp, #12]
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	f88d 200c 	strb.w	r2, [sp, #12]
 800e3d8:	4620      	mov	r0, r4
 800e3da:	2210      	movs	r2, #16
 800e3dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e3e0:	9306      	str	r3, [sp, #24]
 800e3e2:	f000 fa29 	bl	800e838 <uxr_buffer_submessage_header>
 800e3e6:	4669      	mov	r1, sp
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	f001 f981 	bl	800f6f0 <uxr_serialize_CREATE_CLIENT_Payload>
 800e3ee:	b009      	add	sp, #36	@ 0x24
 800e3f0:	bd30      	pop	{r4, r5, pc}
 800e3f2:	bf00      	nop
 800e3f4:	08017cc4 	.word	0x08017cc4

0800e3f8 <uxr_buffer_delete_session>:
 800e3f8:	b510      	push	{r4, lr}
 800e3fa:	4b0c      	ldr	r3, [pc, #48]	@ (800e42c <uxr_buffer_delete_session+0x34>)
 800e3fc:	b082      	sub	sp, #8
 800e3fe:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800e402:	f8ad c006 	strh.w	ip, [sp, #6]
 800e406:	460c      	mov	r4, r1
 800e408:	2202      	movs	r2, #2
 800e40a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e40e:	80c2      	strh	r2, [r0, #6]
 800e410:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e414:	2204      	movs	r2, #4
 800e416:	2300      	movs	r3, #0
 800e418:	2103      	movs	r1, #3
 800e41a:	4620      	mov	r0, r4
 800e41c:	f000 fa0c 	bl	800e838 <uxr_buffer_submessage_header>
 800e420:	a901      	add	r1, sp, #4
 800e422:	4620      	mov	r0, r4
 800e424:	f001 fa0a 	bl	800f83c <uxr_serialize_DELETE_Payload>
 800e428:	b002      	add	sp, #8
 800e42a:	bd10      	pop	{r4, pc}
 800e42c:	08017cc4 	.word	0x08017cc4

0800e430 <uxr_read_create_session_status>:
 800e430:	b510      	push	{r4, lr}
 800e432:	b088      	sub	sp, #32
 800e434:	4604      	mov	r4, r0
 800e436:	4608      	mov	r0, r1
 800e438:	a901      	add	r1, sp, #4
 800e43a:	f001 fa0f 	bl	800f85c <uxr_deserialize_STATUS_AGENT_Payload>
 800e43e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e442:	7163      	strb	r3, [r4, #5]
 800e444:	b008      	add	sp, #32
 800e446:	bd10      	pop	{r4, pc}

0800e448 <uxr_read_delete_session_status>:
 800e448:	b510      	push	{r4, lr}
 800e44a:	4604      	mov	r4, r0
 800e44c:	b084      	sub	sp, #16
 800e44e:	4608      	mov	r0, r1
 800e450:	a902      	add	r1, sp, #8
 800e452:	f001 fa33 	bl	800f8bc <uxr_deserialize_STATUS_Payload>
 800e456:	88e3      	ldrh	r3, [r4, #6]
 800e458:	2b02      	cmp	r3, #2
 800e45a:	d001      	beq.n	800e460 <uxr_read_delete_session_status+0x18>
 800e45c:	b004      	add	sp, #16
 800e45e:	bd10      	pop	{r4, pc}
 800e460:	f10d 000a 	add.w	r0, sp, #10
 800e464:	f7fe fffa 	bl	800d45c <uxr_object_id_from_raw>
 800e468:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e46c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e470:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e474:	b29b      	uxth	r3, r3
 800e476:	2b02      	cmp	r3, #2
 800e478:	bf04      	itt	eq
 800e47a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e47e:	7163      	strbeq	r3, [r4, #5]
 800e480:	b004      	add	sp, #16
 800e482:	bd10      	pop	{r4, pc}

0800e484 <uxr_stamp_create_session_header>:
 800e484:	b510      	push	{r4, lr}
 800e486:	2208      	movs	r2, #8
 800e488:	b08a      	sub	sp, #40	@ 0x28
 800e48a:	4604      	mov	r4, r0
 800e48c:	eb0d 0002 	add.w	r0, sp, r2
 800e490:	f7fe fe0c 	bl	800d0ac <ucdr_init_buffer>
 800e494:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e498:	9400      	str	r4, [sp, #0]
 800e49a:	2300      	movs	r3, #0
 800e49c:	461a      	mov	r2, r3
 800e49e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800e4a2:	a802      	add	r0, sp, #8
 800e4a4:	f000 fbc2 	bl	800ec2c <uxr_serialize_message_header>
 800e4a8:	b00a      	add	sp, #40	@ 0x28
 800e4aa:	bd10      	pop	{r4, pc}

0800e4ac <uxr_stamp_session_header>:
 800e4ac:	b530      	push	{r4, r5, lr}
 800e4ae:	b08d      	sub	sp, #52	@ 0x34
 800e4b0:	4604      	mov	r4, r0
 800e4b2:	460d      	mov	r5, r1
 800e4b4:	9203      	str	r2, [sp, #12]
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	a804      	add	r0, sp, #16
 800e4ba:	2208      	movs	r2, #8
 800e4bc:	f7fe fdf6 	bl	800d0ac <ucdr_init_buffer>
 800e4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4c4:	9b03      	ldr	r3, [sp, #12]
 800e4c6:	9400      	str	r4, [sp, #0]
 800e4c8:	462a      	mov	r2, r5
 800e4ca:	a804      	add	r0, sp, #16
 800e4cc:	f000 fbae 	bl	800ec2c <uxr_serialize_message_header>
 800e4d0:	b00d      	add	sp, #52	@ 0x34
 800e4d2:	bd30      	pop	{r4, r5, pc}

0800e4d4 <uxr_read_session_header>:
 800e4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d8:	4607      	mov	r7, r0
 800e4da:	b084      	sub	sp, #16
 800e4dc:	4608      	mov	r0, r1
 800e4de:	460c      	mov	r4, r1
 800e4e0:	4615      	mov	r5, r2
 800e4e2:	461e      	mov	r6, r3
 800e4e4:	f7fe fe12 	bl	800d10c <ucdr_buffer_remaining>
 800e4e8:	2808      	cmp	r0, #8
 800e4ea:	d803      	bhi.n	800e4f4 <uxr_read_session_header+0x20>
 800e4ec:	2000      	movs	r0, #0
 800e4ee:	b004      	add	sp, #16
 800e4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4f4:	f10d 080c 	add.w	r8, sp, #12
 800e4f8:	4633      	mov	r3, r6
 800e4fa:	462a      	mov	r2, r5
 800e4fc:	f8cd 8000 	str.w	r8, [sp]
 800e500:	4620      	mov	r0, r4
 800e502:	f10d 010b 	add.w	r1, sp, #11
 800e506:	f000 fbaf 	bl	800ec68 <uxr_deserialize_message_header>
 800e50a:	783a      	ldrb	r2, [r7, #0]
 800e50c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e510:	4293      	cmp	r3, r2
 800e512:	d1eb      	bne.n	800e4ec <uxr_read_session_header+0x18>
 800e514:	061b      	lsls	r3, r3, #24
 800e516:	d41c      	bmi.n	800e552 <uxr_read_session_header+0x7e>
 800e518:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e51c:	787b      	ldrb	r3, [r7, #1]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d003      	beq.n	800e52a <uxr_read_session_header+0x56>
 800e522:	2001      	movs	r0, #1
 800e524:	f080 0001 	eor.w	r0, r0, #1
 800e528:	e7e1      	b.n	800e4ee <uxr_read_session_header+0x1a>
 800e52a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800e52e:	78bb      	ldrb	r3, [r7, #2]
 800e530:	429a      	cmp	r2, r3
 800e532:	f107 0102 	add.w	r1, r7, #2
 800e536:	d1f4      	bne.n	800e522 <uxr_read_session_header+0x4e>
 800e538:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e53c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e540:	429a      	cmp	r2, r3
 800e542:	d1ee      	bne.n	800e522 <uxr_read_session_header+0x4e>
 800e544:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800e548:	784b      	ldrb	r3, [r1, #1]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d1e9      	bne.n	800e522 <uxr_read_session_header+0x4e>
 800e54e:	2000      	movs	r0, #0
 800e550:	e7e8      	b.n	800e524 <uxr_read_session_header+0x50>
 800e552:	2001      	movs	r0, #1
 800e554:	e7cb      	b.n	800e4ee <uxr_read_session_header+0x1a>
 800e556:	bf00      	nop

0800e558 <uxr_session_header_offset>:
 800e558:	f990 3000 	ldrsb.w	r3, [r0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	bfac      	ite	ge
 800e560:	2008      	movge	r0, #8
 800e562:	2004      	movlt	r0, #4
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop

0800e568 <uxr_init_base_object_request>:
 800e568:	b510      	push	{r4, lr}
 800e56a:	88c3      	ldrh	r3, [r0, #6]
 800e56c:	b082      	sub	sp, #8
 800e56e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800e572:	9101      	str	r1, [sp, #4]
 800e574:	f1a3 010a 	sub.w	r1, r3, #10
 800e578:	b289      	uxth	r1, r1
 800e57a:	42a1      	cmp	r1, r4
 800e57c:	d80e      	bhi.n	800e59c <uxr_init_base_object_request+0x34>
 800e57e:	3301      	adds	r3, #1
 800e580:	b29c      	uxth	r4, r3
 800e582:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e586:	b2db      	uxtb	r3, r3
 800e588:	80c4      	strh	r4, [r0, #6]
 800e58a:	9801      	ldr	r0, [sp, #4]
 800e58c:	7011      	strb	r1, [r2, #0]
 800e58e:	7053      	strb	r3, [r2, #1]
 800e590:	1c91      	adds	r1, r2, #2
 800e592:	f7fe ff77 	bl	800d484 <uxr_object_id_to_raw>
 800e596:	4620      	mov	r0, r4
 800e598:	b002      	add	sp, #8
 800e59a:	bd10      	pop	{r4, pc}
 800e59c:	230a      	movs	r3, #10
 800e59e:	2100      	movs	r1, #0
 800e5a0:	461c      	mov	r4, r3
 800e5a2:	e7f1      	b.n	800e588 <uxr_init_base_object_request+0x20>

0800e5a4 <uxr_parse_base_object_request>:
 800e5a4:	b570      	push	{r4, r5, r6, lr}
 800e5a6:	4604      	mov	r4, r0
 800e5a8:	3002      	adds	r0, #2
 800e5aa:	460d      	mov	r5, r1
 800e5ac:	4616      	mov	r6, r2
 800e5ae:	f7fe ff55 	bl	800d45c <uxr_object_id_from_raw>
 800e5b2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800e5b6:	8028      	strh	r0, [r5, #0]
 800e5b8:	806b      	strh	r3, [r5, #2]
 800e5ba:	7822      	ldrb	r2, [r4, #0]
 800e5bc:	7863      	ldrb	r3, [r4, #1]
 800e5be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e5c2:	8033      	strh	r3, [r6, #0]
 800e5c4:	bd70      	pop	{r4, r5, r6, pc}
 800e5c6:	bf00      	nop

0800e5c8 <uxr_stream_id>:
 800e5c8:	2901      	cmp	r1, #1
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	d01d      	beq.n	800e60a <uxr_stream_id+0x42>
 800e5ce:	2902      	cmp	r1, #2
 800e5d0:	f04f 0c00 	mov.w	ip, #0
 800e5d4:	d01e      	beq.n	800e614 <uxr_stream_id+0x4c>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	f36c 0307 	bfi	r3, ip, #0, #8
 800e5dc:	f360 230f 	bfi	r3, r0, #8, #8
 800e5e0:	f361 4317 	bfi	r3, r1, #16, #8
 800e5e4:	f362 631f 	bfi	r3, r2, #24, #8
 800e5e8:	b2da      	uxtb	r2, r3
 800e5ea:	2000      	movs	r0, #0
 800e5ec:	f362 0007 	bfi	r0, r2, #0, #8
 800e5f0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e5f4:	f362 200f 	bfi	r0, r2, #8, #8
 800e5f8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e5fc:	f362 4017 	bfi	r0, r2, #16, #8
 800e600:	0e1b      	lsrs	r3, r3, #24
 800e602:	f363 601f 	bfi	r0, r3, #24, #8
 800e606:	b002      	add	sp, #8
 800e608:	4770      	bx	lr
 800e60a:	f100 0c01 	add.w	ip, r0, #1
 800e60e:	fa5f fc8c 	uxtb.w	ip, ip
 800e612:	e7e0      	b.n	800e5d6 <uxr_stream_id+0xe>
 800e614:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800e618:	e7dd      	b.n	800e5d6 <uxr_stream_id+0xe>
 800e61a:	bf00      	nop

0800e61c <uxr_stream_id_from_raw>:
 800e61c:	b082      	sub	sp, #8
 800e61e:	b130      	cbz	r0, 800e62e <uxr_stream_id_from_raw+0x12>
 800e620:	0603      	lsls	r3, r0, #24
 800e622:	d420      	bmi.n	800e666 <uxr_stream_id_from_raw+0x4a>
 800e624:	1e42      	subs	r2, r0, #1
 800e626:	b2d2      	uxtb	r2, r2
 800e628:	f04f 0c01 	mov.w	ip, #1
 800e62c:	e001      	b.n	800e632 <uxr_stream_id_from_raw+0x16>
 800e62e:	4684      	mov	ip, r0
 800e630:	4602      	mov	r2, r0
 800e632:	2300      	movs	r3, #0
 800e634:	f360 0307 	bfi	r3, r0, #0, #8
 800e638:	f362 230f 	bfi	r3, r2, #8, #8
 800e63c:	f36c 4317 	bfi	r3, ip, #16, #8
 800e640:	f361 631f 	bfi	r3, r1, #24, #8
 800e644:	b2da      	uxtb	r2, r3
 800e646:	2000      	movs	r0, #0
 800e648:	f362 0007 	bfi	r0, r2, #0, #8
 800e64c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e650:	f362 200f 	bfi	r0, r2, #8, #8
 800e654:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e658:	f362 4017 	bfi	r0, r2, #16, #8
 800e65c:	0e1b      	lsrs	r3, r3, #24
 800e65e:	f363 601f 	bfi	r0, r3, #24, #8
 800e662:	b002      	add	sp, #8
 800e664:	4770      	bx	lr
 800e666:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800e66a:	f04f 0c02 	mov.w	ip, #2
 800e66e:	e7e0      	b.n	800e632 <uxr_stream_id_from_raw+0x16>

0800e670 <uxr_init_stream_storage>:
 800e670:	2300      	movs	r3, #0
 800e672:	7403      	strb	r3, [r0, #16]
 800e674:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800e678:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800e67c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop

0800e684 <uxr_reset_stream_storage>:
 800e684:	b570      	push	{r4, r5, r6, lr}
 800e686:	7c03      	ldrb	r3, [r0, #16]
 800e688:	4604      	mov	r4, r0
 800e68a:	b153      	cbz	r3, 800e6a2 <uxr_reset_stream_storage+0x1e>
 800e68c:	4606      	mov	r6, r0
 800e68e:	2500      	movs	r5, #0
 800e690:	4630      	mov	r0, r6
 800e692:	f006 f9f1 	bl	8014a78 <uxr_reset_output_best_effort_stream>
 800e696:	7c23      	ldrb	r3, [r4, #16]
 800e698:	3501      	adds	r5, #1
 800e69a:	42ab      	cmp	r3, r5
 800e69c:	f106 0610 	add.w	r6, r6, #16
 800e6a0:	d8f6      	bhi.n	800e690 <uxr_reset_stream_storage+0xc>
 800e6a2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e6a6:	b163      	cbz	r3, 800e6c2 <uxr_reset_stream_storage+0x3e>
 800e6a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6ac:	2500      	movs	r5, #0
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f005 ffe4 	bl	801467c <uxr_reset_input_best_effort_stream>
 800e6b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e6b8:	3501      	adds	r5, #1
 800e6ba:	42ab      	cmp	r3, r5
 800e6bc:	f106 0602 	add.w	r6, r6, #2
 800e6c0:	d8f5      	bhi.n	800e6ae <uxr_reset_stream_storage+0x2a>
 800e6c2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e6c6:	b163      	cbz	r3, 800e6e2 <uxr_reset_stream_storage+0x5e>
 800e6c8:	f104 0618 	add.w	r6, r4, #24
 800e6cc:	2500      	movs	r5, #0
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	f006 fa7e 	bl	8014bd0 <uxr_reset_output_reliable_stream>
 800e6d4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e6d8:	3501      	adds	r5, #1
 800e6da:	42ab      	cmp	r3, r5
 800e6dc:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800e6e0:	d8f5      	bhi.n	800e6ce <uxr_reset_stream_storage+0x4a>
 800e6e2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e6e6:	b163      	cbz	r3, 800e702 <uxr_reset_stream_storage+0x7e>
 800e6e8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800e6ec:	2500      	movs	r5, #0
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	f006 f838 	bl	8014764 <uxr_reset_input_reliable_stream>
 800e6f4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e6f8:	3501      	adds	r5, #1
 800e6fa:	42ab      	cmp	r3, r5
 800e6fc:	f106 0618 	add.w	r6, r6, #24
 800e700:	d8f5      	bhi.n	800e6ee <uxr_reset_stream_storage+0x6a>
 800e702:	bd70      	pop	{r4, r5, r6, pc}

0800e704 <uxr_add_output_best_effort_buffer>:
 800e704:	b510      	push	{r4, lr}
 800e706:	7c04      	ldrb	r4, [r0, #16]
 800e708:	f104 0c01 	add.w	ip, r4, #1
 800e70c:	b082      	sub	sp, #8
 800e70e:	f880 c010 	strb.w	ip, [r0, #16]
 800e712:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800e716:	f006 f9a5 	bl	8014a64 <uxr_init_output_best_effort_stream>
 800e71a:	2201      	movs	r2, #1
 800e71c:	4611      	mov	r1, r2
 800e71e:	4620      	mov	r0, r4
 800e720:	b002      	add	sp, #8
 800e722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e726:	f7ff bf4f 	b.w	800e5c8 <uxr_stream_id>
 800e72a:	bf00      	nop

0800e72c <uxr_add_output_reliable_buffer>:
 800e72c:	b510      	push	{r4, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	4684      	mov	ip, r0
 800e732:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e736:	9000      	str	r0, [sp, #0]
 800e738:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800e73c:	2028      	movs	r0, #40	@ 0x28
 800e73e:	fb00 c004 	mla	r0, r0, r4, ip
 800e742:	f104 0e01 	add.w	lr, r4, #1
 800e746:	3018      	adds	r0, #24
 800e748:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800e74c:	f006 fa08 	bl	8014b60 <uxr_init_output_reliable_stream>
 800e750:	2201      	movs	r2, #1
 800e752:	2102      	movs	r1, #2
 800e754:	4620      	mov	r0, r4
 800e756:	b004      	add	sp, #16
 800e758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e75c:	f7ff bf34 	b.w	800e5c8 <uxr_stream_id>

0800e760 <uxr_add_input_best_effort_buffer>:
 800e760:	b510      	push	{r4, lr}
 800e762:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800e766:	4603      	mov	r3, r0
 800e768:	1c62      	adds	r2, r4, #1
 800e76a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800e76e:	b082      	sub	sp, #8
 800e770:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800e774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e778:	f005 ff7c 	bl	8014674 <uxr_init_input_best_effort_stream>
 800e77c:	2200      	movs	r2, #0
 800e77e:	2101      	movs	r1, #1
 800e780:	4620      	mov	r0, r4
 800e782:	b002      	add	sp, #8
 800e784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e788:	f7ff bf1e 	b.w	800e5c8 <uxr_stream_id>

0800e78c <uxr_add_input_reliable_buffer>:
 800e78c:	b510      	push	{r4, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	4684      	mov	ip, r0
 800e792:	9806      	ldr	r0, [sp, #24]
 800e794:	9000      	str	r0, [sp, #0]
 800e796:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800e79a:	2018      	movs	r0, #24
 800e79c:	fb00 c004 	mla	r0, r0, r4, ip
 800e7a0:	f104 0e01 	add.w	lr, r4, #1
 800e7a4:	3048      	adds	r0, #72	@ 0x48
 800e7a6:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800e7aa:	f005 ffaf 	bl	801470c <uxr_init_input_reliable_stream>
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	2102      	movs	r1, #2
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	b004      	add	sp, #16
 800e7b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7ba:	f7ff bf05 	b.w	800e5c8 <uxr_stream_id>
 800e7be:	bf00      	nop

0800e7c0 <uxr_get_output_best_effort_stream>:
 800e7c0:	7c03      	ldrb	r3, [r0, #16]
 800e7c2:	428b      	cmp	r3, r1
 800e7c4:	bf8c      	ite	hi
 800e7c6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800e7ca:	2000      	movls	r0, #0
 800e7cc:	4770      	bx	lr
 800e7ce:	bf00      	nop

0800e7d0 <uxr_get_output_reliable_stream>:
 800e7d0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e7d4:	428b      	cmp	r3, r1
 800e7d6:	bf83      	ittte	hi
 800e7d8:	2328      	movhi	r3, #40	@ 0x28
 800e7da:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e7de:	3018      	addhi	r0, #24
 800e7e0:	2000      	movls	r0, #0
 800e7e2:	4770      	bx	lr

0800e7e4 <uxr_get_input_best_effort_stream>:
 800e7e4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e7e8:	428b      	cmp	r3, r1
 800e7ea:	bf86      	itte	hi
 800e7ec:	3121      	addhi	r1, #33	@ 0x21
 800e7ee:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800e7f2:	2000      	movls	r0, #0
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop

0800e7f8 <uxr_get_input_reliable_stream>:
 800e7f8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800e7fc:	428b      	cmp	r3, r1
 800e7fe:	bf83      	ittte	hi
 800e800:	2318      	movhi	r3, #24
 800e802:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e806:	3048      	addhi	r0, #72	@ 0x48
 800e808:	2000      	movls	r0, #0
 800e80a:	4770      	bx	lr

0800e80c <uxr_output_streams_confirmed>:
 800e80c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e810:	b183      	cbz	r3, 800e834 <uxr_output_streams_confirmed+0x28>
 800e812:	b570      	push	{r4, r5, r6, lr}
 800e814:	4606      	mov	r6, r0
 800e816:	f100 0518 	add.w	r5, r0, #24
 800e81a:	2400      	movs	r4, #0
 800e81c:	e001      	b.n	800e822 <uxr_output_streams_confirmed+0x16>
 800e81e:	3528      	adds	r5, #40	@ 0x28
 800e820:	b138      	cbz	r0, 800e832 <uxr_output_streams_confirmed+0x26>
 800e822:	4628      	mov	r0, r5
 800e824:	f006 fc44 	bl	80150b0 <uxr_is_output_up_to_date>
 800e828:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800e82c:	3401      	adds	r4, #1
 800e82e:	42a3      	cmp	r3, r4
 800e830:	d8f5      	bhi.n	800e81e <uxr_output_streams_confirmed+0x12>
 800e832:	bd70      	pop	{r4, r5, r6, pc}
 800e834:	2001      	movs	r0, #1
 800e836:	4770      	bx	lr

0800e838 <uxr_buffer_submessage_header>:
 800e838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e83a:	4604      	mov	r4, r0
 800e83c:	460e      	mov	r6, r1
 800e83e:	2104      	movs	r1, #4
 800e840:	4615      	mov	r5, r2
 800e842:	461f      	mov	r7, r3
 800e844:	f7fe fc4c 	bl	800d0e0 <ucdr_align_to>
 800e848:	2301      	movs	r3, #1
 800e84a:	ea47 0203 	orr.w	r2, r7, r3
 800e84e:	4631      	mov	r1, r6
 800e850:	7523      	strb	r3, [r4, #20]
 800e852:	4620      	mov	r0, r4
 800e854:	462b      	mov	r3, r5
 800e856:	f000 fa27 	bl	800eca8 <uxr_serialize_submessage_header>
 800e85a:	4620      	mov	r0, r4
 800e85c:	f7fe fc56 	bl	800d10c <ucdr_buffer_remaining>
 800e860:	42a8      	cmp	r0, r5
 800e862:	bf34      	ite	cc
 800e864:	2000      	movcc	r0, #0
 800e866:	2001      	movcs	r0, #1
 800e868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e86a:	bf00      	nop

0800e86c <uxr_read_submessage_header>:
 800e86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e870:	4604      	mov	r4, r0
 800e872:	460d      	mov	r5, r1
 800e874:	2104      	movs	r1, #4
 800e876:	4616      	mov	r6, r2
 800e878:	4698      	mov	r8, r3
 800e87a:	f7fe fc31 	bl	800d0e0 <ucdr_align_to>
 800e87e:	4620      	mov	r0, r4
 800e880:	f7fe fc44 	bl	800d10c <ucdr_buffer_remaining>
 800e884:	2803      	cmp	r0, #3
 800e886:	bf8c      	ite	hi
 800e888:	2701      	movhi	r7, #1
 800e88a:	2700      	movls	r7, #0
 800e88c:	d802      	bhi.n	800e894 <uxr_read_submessage_header+0x28>
 800e88e:	4638      	mov	r0, r7
 800e890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e894:	4633      	mov	r3, r6
 800e896:	4642      	mov	r2, r8
 800e898:	4620      	mov	r0, r4
 800e89a:	4629      	mov	r1, r5
 800e89c:	f000 fa18 	bl	800ecd0 <uxr_deserialize_submessage_header>
 800e8a0:	f898 3000 	ldrb.w	r3, [r8]
 800e8a4:	f003 0201 	and.w	r2, r3, #1
 800e8a8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800e8ac:	f888 3000 	strb.w	r3, [r8]
 800e8b0:	7522      	strb	r2, [r4, #20]
 800e8b2:	4638      	mov	r0, r7
 800e8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e8b8 <uxr_submessage_padding>:
 800e8b8:	f010 0003 	ands.w	r0, r0, #3
 800e8bc:	bf18      	it	ne
 800e8be:	f1c0 0004 	rsbne	r0, r0, #4
 800e8c2:	4770      	bx	lr

0800e8c4 <uxr_millis>:
 800e8c4:	b510      	push	{r4, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	4669      	mov	r1, sp
 800e8ca:	2001      	movs	r0, #1
 800e8cc:	f7f2 fab0 	bl	8000e30 <clock_gettime>
 800e8d0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e8d4:	4906      	ldr	r1, [pc, #24]	@ (800e8f0 <uxr_millis+0x2c>)
 800e8d6:	fba0 0301 	umull	r0, r3, r0, r1
 800e8da:	1900      	adds	r0, r0, r4
 800e8dc:	fb01 3102 	mla	r1, r1, r2, r3
 800e8e0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e8e4:	4a03      	ldr	r2, [pc, #12]	@ (800e8f4 <uxr_millis+0x30>)
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	f7f1 fcda 	bl	80002a0 <__aeabi_ldivmod>
 800e8ec:	b004      	add	sp, #16
 800e8ee:	bd10      	pop	{r4, pc}
 800e8f0:	3b9aca00 	.word	0x3b9aca00
 800e8f4:	000f4240 	.word	0x000f4240

0800e8f8 <uxr_nanos>:
 800e8f8:	b510      	push	{r4, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	4669      	mov	r1, sp
 800e8fe:	2001      	movs	r0, #1
 800e900:	f7f2 fa96 	bl	8000e30 <clock_gettime>
 800e904:	4a06      	ldr	r2, [pc, #24]	@ (800e920 <uxr_nanos+0x28>)
 800e906:	9800      	ldr	r0, [sp, #0]
 800e908:	9902      	ldr	r1, [sp, #8]
 800e90a:	9c01      	ldr	r4, [sp, #4]
 800e90c:	fba0 0302 	umull	r0, r3, r0, r2
 800e910:	1840      	adds	r0, r0, r1
 800e912:	fb02 3304 	mla	r3, r2, r4, r3
 800e916:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e91a:	b004      	add	sp, #16
 800e91c:	bd10      	pop	{r4, pc}
 800e91e:	bf00      	nop
 800e920:	3b9aca00 	.word	0x3b9aca00

0800e924 <on_full_output_buffer_fragmented>:
 800e924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e928:	460c      	mov	r4, r1
 800e92a:	b08a      	sub	sp, #40	@ 0x28
 800e92c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800e930:	4606      	mov	r6, r0
 800e932:	f104 0008 	add.w	r0, r4, #8
 800e936:	f7ff ff4b 	bl	800e7d0 <uxr_get_output_reliable_stream>
 800e93a:	4605      	mov	r5, r0
 800e93c:	f006 fbc2 	bl	80150c4 <get_available_free_slots>
 800e940:	b968      	cbnz	r0, 800e95e <on_full_output_buffer_fragmented+0x3a>
 800e942:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800e946:	4620      	mov	r0, r4
 800e948:	4798      	blx	r3
 800e94a:	b918      	cbnz	r0, 800e954 <on_full_output_buffer_fragmented+0x30>
 800e94c:	2001      	movs	r0, #1
 800e94e:	b00a      	add	sp, #40	@ 0x28
 800e950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e954:	4628      	mov	r0, r5
 800e956:	f006 fbb5 	bl	80150c4 <get_available_free_slots>
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d0f6      	beq.n	800e94c <on_full_output_buffer_fragmented+0x28>
 800e95e:	8929      	ldrh	r1, [r5, #8]
 800e960:	89eb      	ldrh	r3, [r5, #14]
 800e962:	7b28      	ldrb	r0, [r5, #12]
 800e964:	686a      	ldr	r2, [r5, #4]
 800e966:	fbb2 f8f1 	udiv	r8, r2, r1
 800e96a:	fbb3 f2f1 	udiv	r2, r3, r1
 800e96e:	fb01 3112 	mls	r1, r1, r2, r3
 800e972:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800e976:	b289      	uxth	r1, r1
 800e978:	fb08 f101 	mul.w	r1, r8, r1
 800e97c:	30fc      	adds	r0, #252	@ 0xfc
 800e97e:	f1a8 0804 	sub.w	r8, r8, #4
 800e982:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800e986:	4440      	add	r0, r8
 800e988:	b287      	uxth	r7, r0
 800e98a:	1bdb      	subs	r3, r3, r7
 800e98c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800e990:	682b      	ldr	r3, [r5, #0]
 800e992:	3104      	adds	r1, #4
 800e994:	4419      	add	r1, r3
 800e996:	4642      	mov	r2, r8
 800e998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e99c:	9300      	str	r3, [sp, #0]
 800e99e:	a802      	add	r0, sp, #8
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	f7fe fb71 	bl	800d088 <ucdr_init_buffer_origin_offset>
 800e9a6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e9aa:	f102 0308 	add.w	r3, r2, #8
 800e9ae:	4543      	cmp	r3, r8
 800e9b0:	d928      	bls.n	800ea04 <on_full_output_buffer_fragmented+0xe0>
 800e9b2:	463a      	mov	r2, r7
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	210d      	movs	r1, #13
 800e9b8:	a802      	add	r0, sp, #8
 800e9ba:	f7ff ff3d 	bl	800e838 <uxr_buffer_submessage_header>
 800e9be:	8929      	ldrh	r1, [r5, #8]
 800e9c0:	89eb      	ldrh	r3, [r5, #14]
 800e9c2:	fbb3 f2f1 	udiv	r2, r3, r1
 800e9c6:	fb01 3312 	mls	r3, r1, r2, r3
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	686a      	ldr	r2, [r5, #4]
 800e9ce:	fbb2 f2f1 	udiv	r2, r2, r1
 800e9d2:	fb02 f303 	mul.w	r3, r2, r3
 800e9d6:	682a      	ldr	r2, [r5, #0]
 800e9d8:	f842 8003 	str.w	r8, [r2, r3]
 800e9dc:	89e8      	ldrh	r0, [r5, #14]
 800e9de:	2101      	movs	r1, #1
 800e9e0:	f006 fc86 	bl	80152f0 <uxr_seq_num_add>
 800e9e4:	9904      	ldr	r1, [sp, #16]
 800e9e6:	9a03      	ldr	r2, [sp, #12]
 800e9e8:	81e8      	strh	r0, [r5, #14]
 800e9ea:	1a52      	subs	r2, r2, r1
 800e9ec:	4630      	mov	r0, r6
 800e9ee:	f7fe fb5d 	bl	800d0ac <ucdr_init_buffer>
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	490f      	ldr	r1, [pc, #60]	@ (800ea34 <on_full_output_buffer_fragmented+0x110>)
 800e9f6:	4622      	mov	r2, r4
 800e9f8:	f7fe fb2c 	bl	800d054 <ucdr_set_on_full_buffer_callback>
 800e9fc:	2000      	movs	r0, #0
 800e9fe:	b00a      	add	sp, #40	@ 0x28
 800ea00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea04:	b292      	uxth	r2, r2
 800ea06:	2302      	movs	r3, #2
 800ea08:	210d      	movs	r1, #13
 800ea0a:	a802      	add	r0, sp, #8
 800ea0c:	f7ff ff14 	bl	800e838 <uxr_buffer_submessage_header>
 800ea10:	8928      	ldrh	r0, [r5, #8]
 800ea12:	89eb      	ldrh	r3, [r5, #14]
 800ea14:	fbb3 f1f0 	udiv	r1, r3, r0
 800ea18:	fb00 3311 	mls	r3, r0, r1, r3
 800ea1c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800ea20:	6869      	ldr	r1, [r5, #4]
 800ea22:	fbb1 f1f0 	udiv	r1, r1, r0
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	fb01 f303 	mul.w	r3, r1, r3
 800ea2c:	6829      	ldr	r1, [r5, #0]
 800ea2e:	3208      	adds	r2, #8
 800ea30:	50ca      	str	r2, [r1, r3]
 800ea32:	e7d3      	b.n	800e9dc <on_full_output_buffer_fragmented+0xb8>
 800ea34:	0800e925 	.word	0x0800e925

0800ea38 <uxr_prepare_output_stream>:
 800ea38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea3a:	b087      	sub	sp, #28
 800ea3c:	2707      	movs	r7, #7
 800ea3e:	9202      	str	r2, [sp, #8]
 800ea40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ea42:	9103      	str	r1, [sp, #12]
 800ea44:	2500      	movs	r5, #0
 800ea46:	3204      	adds	r2, #4
 800ea48:	e9cd 7500 	strd	r7, r5, [sp]
 800ea4c:	461c      	mov	r4, r3
 800ea4e:	4606      	mov	r6, r0
 800ea50:	f7ff fc54 	bl	800e2fc <uxr_prepare_stream_to_write_submessage>
 800ea54:	f080 0201 	eor.w	r2, r0, #1
 800ea58:	b2d2      	uxtb	r2, r2
 800ea5a:	75a2      	strb	r2, [r4, #22]
 800ea5c:	b112      	cbz	r2, 800ea64 <uxr_prepare_output_stream+0x2c>
 800ea5e:	4628      	mov	r0, r5
 800ea60:	b007      	add	sp, #28
 800ea62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea64:	aa05      	add	r2, sp, #20
 800ea66:	9902      	ldr	r1, [sp, #8]
 800ea68:	4630      	mov	r0, r6
 800ea6a:	f7ff fd7d 	bl	800e568 <uxr_init_base_object_request>
 800ea6e:	a905      	add	r1, sp, #20
 800ea70:	4605      	mov	r5, r0
 800ea72:	4620      	mov	r0, r4
 800ea74:	f000 ffa0 	bl	800f9b8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800ea78:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800ea7c:	69a6      	ldr	r6, [r4, #24]
 800ea7e:	69e7      	ldr	r7, [r4, #28]
 800ea80:	1a52      	subs	r2, r2, r1
 800ea82:	4620      	mov	r0, r4
 800ea84:	f7fe fb12 	bl	800d0ac <ucdr_init_buffer>
 800ea88:	4620      	mov	r0, r4
 800ea8a:	463a      	mov	r2, r7
 800ea8c:	4631      	mov	r1, r6
 800ea8e:	f7fe fae1 	bl	800d054 <ucdr_set_on_full_buffer_callback>
 800ea92:	4628      	mov	r0, r5
 800ea94:	b007      	add	sp, #28
 800ea96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea98 <uxr_prepare_output_stream_fragmented>:
 800ea98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9c:	b091      	sub	sp, #68	@ 0x44
 800ea9e:	4605      	mov	r5, r0
 800eaa0:	9105      	str	r1, [sp, #20]
 800eaa2:	3008      	adds	r0, #8
 800eaa4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800eaa8:	461e      	mov	r6, r3
 800eaaa:	9204      	str	r2, [sp, #16]
 800eaac:	f7ff fe90 	bl	800e7d0 <uxr_get_output_reliable_stream>
 800eab0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	f000 8091 	beq.w	800ebdc <uxr_prepare_output_stream_fragmented+0x144>
 800eaba:	4604      	mov	r4, r0
 800eabc:	2800      	cmp	r0, #0
 800eabe:	f000 808d 	beq.w	800ebdc <uxr_prepare_output_stream_fragmented+0x144>
 800eac2:	f006 faff 	bl	80150c4 <get_available_free_slots>
 800eac6:	2800      	cmp	r0, #0
 800eac8:	f000 8083 	beq.w	800ebd2 <uxr_prepare_output_stream_fragmented+0x13a>
 800eacc:	8922      	ldrh	r2, [r4, #8]
 800eace:	89e7      	ldrh	r7, [r4, #14]
 800ead0:	fbb7 f9f2 	udiv	r9, r7, r2
 800ead4:	fb02 7919 	mls	r9, r2, r9, r7
 800ead8:	fa1f f989 	uxth.w	r9, r9
 800eadc:	6863      	ldr	r3, [r4, #4]
 800eade:	fbb3 f2f2 	udiv	r2, r3, r2
 800eae2:	6823      	ldr	r3, [r4, #0]
 800eae4:	9203      	str	r2, [sp, #12]
 800eae6:	fb02 f909 	mul.w	r9, r2, r9
 800eaea:	f109 0904 	add.w	r9, r9, #4
 800eaee:	4499      	add	r9, r3
 800eaf0:	7b23      	ldrb	r3, [r4, #12]
 800eaf2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800eaf6:	4543      	cmp	r3, r8
 800eaf8:	f1a2 0b04 	sub.w	fp, r2, #4
 800eafc:	d37a      	bcc.n	800ebf4 <uxr_prepare_output_stream_fragmented+0x15c>
 800eafe:	f1ab 0a04 	sub.w	sl, fp, #4
 800eb02:	ebaa 0a03 	sub.w	sl, sl, r3
 800eb06:	465a      	mov	r2, fp
 800eb08:	2300      	movs	r3, #0
 800eb0a:	4649      	mov	r1, r9
 800eb0c:	a808      	add	r0, sp, #32
 800eb0e:	f8cd 8000 	str.w	r8, [sp]
 800eb12:	f7fe fab9 	bl	800d088 <ucdr_init_buffer_origin_offset>
 800eb16:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800eb18:	fa1f fa8a 	uxth.w	sl, sl
 800eb1c:	4652      	mov	r2, sl
 800eb1e:	f103 0a08 	add.w	sl, r3, #8
 800eb22:	45da      	cmp	sl, fp
 800eb24:	bf34      	ite	cc
 800eb26:	2302      	movcc	r3, #2
 800eb28:	2300      	movcs	r3, #0
 800eb2a:	210d      	movs	r1, #13
 800eb2c:	a808      	add	r0, sp, #32
 800eb2e:	f7ff fe83 	bl	800e838 <uxr_buffer_submessage_header>
 800eb32:	8921      	ldrh	r1, [r4, #8]
 800eb34:	fbb7 f2f1 	udiv	r2, r7, r1
 800eb38:	fb01 7212 	mls	r2, r1, r2, r7
 800eb3c:	b292      	uxth	r2, r2
 800eb3e:	6863      	ldr	r3, [r4, #4]
 800eb40:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb44:	fb02 f303 	mul.w	r3, r2, r3
 800eb48:	6822      	ldr	r2, [r4, #0]
 800eb4a:	4638      	mov	r0, r7
 800eb4c:	f842 b003 	str.w	fp, [r2, r3]
 800eb50:	2101      	movs	r1, #1
 800eb52:	f006 fbcd 	bl	80152f0 <uxr_seq_num_add>
 800eb56:	9b03      	ldr	r3, [sp, #12]
 800eb58:	f108 0104 	add.w	r1, r8, #4
 800eb5c:	f1a3 0208 	sub.w	r2, r3, #8
 800eb60:	eba2 0208 	sub.w	r2, r2, r8
 800eb64:	4449      	add	r1, r9
 800eb66:	4607      	mov	r7, r0
 800eb68:	4630      	mov	r0, r6
 800eb6a:	f7fe fa9f 	bl	800d0ac <ucdr_init_buffer>
 800eb6e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800eb70:	81e7      	strh	r7, [r4, #14]
 800eb72:	1d1a      	adds	r2, r3, #4
 800eb74:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800eb78:	bf28      	it	cs
 800eb7a:	2200      	movcs	r2, #0
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	b292      	uxth	r2, r2
 800eb80:	2107      	movs	r1, #7
 800eb82:	4630      	mov	r0, r6
 800eb84:	f7ff fe58 	bl	800e838 <uxr_buffer_submessage_header>
 800eb88:	9904      	ldr	r1, [sp, #16]
 800eb8a:	aa07      	add	r2, sp, #28
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f7ff fceb 	bl	800e568 <uxr_init_base_object_request>
 800eb92:	4604      	mov	r4, r0
 800eb94:	b318      	cbz	r0, 800ebde <uxr_prepare_output_stream_fragmented+0x146>
 800eb96:	a907      	add	r1, sp, #28
 800eb98:	4630      	mov	r0, r6
 800eb9a:	f000 ff0d 	bl	800f9b8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800eb9e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800eba2:	4630      	mov	r0, r6
 800eba4:	1a52      	subs	r2, r2, r1
 800eba6:	f7fe fa81 	bl	800d0ac <ucdr_init_buffer>
 800ebaa:	9b05      	ldr	r3, [sp, #20]
 800ebac:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800ebb0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ebb2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800ebb6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800ebb8:	491b      	ldr	r1, [pc, #108]	@ (800ec28 <uxr_prepare_output_stream_fragmented+0x190>)
 800ebba:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800ebc4:	462a      	mov	r2, r5
 800ebc6:	f7fe fa45 	bl	800d054 <ucdr_set_on_full_buffer_callback>
 800ebca:	4620      	mov	r0, r4
 800ebcc:	b011      	add	sp, #68	@ 0x44
 800ebce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebd2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800ebd4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ebd6:	4628      	mov	r0, r5
 800ebd8:	4798      	blx	r3
 800ebda:	b920      	cbnz	r0, 800ebe6 <uxr_prepare_output_stream_fragmented+0x14e>
 800ebdc:	2400      	movs	r4, #0
 800ebde:	4620      	mov	r0, r4
 800ebe0:	b011      	add	sp, #68	@ 0x44
 800ebe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f006 fa6c 	bl	80150c4 <get_available_free_slots>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	f47f af6d 	bne.w	800eacc <uxr_prepare_output_stream_fragmented+0x34>
 800ebf2:	e7f3      	b.n	800ebdc <uxr_prepare_output_stream_fragmented+0x144>
 800ebf4:	4638      	mov	r0, r7
 800ebf6:	2101      	movs	r1, #1
 800ebf8:	f006 fb7a 	bl	80152f0 <uxr_seq_num_add>
 800ebfc:	8921      	ldrh	r1, [r4, #8]
 800ebfe:	fbb0 f2f1 	udiv	r2, r0, r1
 800ec02:	fb01 0912 	mls	r9, r1, r2, r0
 800ec06:	fa1f f289 	uxth.w	r2, r9
 800ec0a:	6863      	ldr	r3, [r4, #4]
 800ec0c:	fbb3 f9f1 	udiv	r9, r3, r1
 800ec10:	6823      	ldr	r3, [r4, #0]
 800ec12:	fb02 f909 	mul.w	r9, r2, r9
 800ec16:	f109 0904 	add.w	r9, r9, #4
 800ec1a:	4499      	add	r9, r3
 800ec1c:	4607      	mov	r7, r0
 800ec1e:	7b23      	ldrb	r3, [r4, #12]
 800ec20:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800ec24:	e76b      	b.n	800eafe <uxr_prepare_output_stream_fragmented+0x66>
 800ec26:	bf00      	nop
 800ec28:	0800e925 	.word	0x0800e925

0800ec2c <uxr_serialize_message_header>:
 800ec2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	4616      	mov	r6, r2
 800ec32:	4604      	mov	r4, r0
 800ec34:	9301      	str	r3, [sp, #4]
 800ec36:	460d      	mov	r5, r1
 800ec38:	9f08      	ldr	r7, [sp, #32]
 800ec3a:	f7fd fa8b 	bl	800c154 <ucdr_serialize_uint8_t>
 800ec3e:	4631      	mov	r1, r6
 800ec40:	4620      	mov	r0, r4
 800ec42:	f7fd fa87 	bl	800c154 <ucdr_serialize_uint8_t>
 800ec46:	9a01      	ldr	r2, [sp, #4]
 800ec48:	2101      	movs	r1, #1
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f7fd fb2e 	bl	800c2ac <ucdr_serialize_endian_uint16_t>
 800ec50:	062b      	lsls	r3, r5, #24
 800ec52:	d501      	bpl.n	800ec58 <uxr_serialize_message_header+0x2c>
 800ec54:	b003      	add	sp, #12
 800ec56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec58:	2204      	movs	r2, #4
 800ec5a:	4639      	mov	r1, r7
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	b003      	add	sp, #12
 800ec60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ec64:	f005 bb0c 	b.w	8014280 <ucdr_serialize_array_uint8_t>

0800ec68 <uxr_deserialize_message_header>:
 800ec68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec6a:	b083      	sub	sp, #12
 800ec6c:	4616      	mov	r6, r2
 800ec6e:	4604      	mov	r4, r0
 800ec70:	9301      	str	r3, [sp, #4]
 800ec72:	460d      	mov	r5, r1
 800ec74:	9f08      	ldr	r7, [sp, #32]
 800ec76:	f7fd fa83 	bl	800c180 <ucdr_deserialize_uint8_t>
 800ec7a:	4631      	mov	r1, r6
 800ec7c:	4620      	mov	r0, r4
 800ec7e:	f7fd fa7f 	bl	800c180 <ucdr_deserialize_uint8_t>
 800ec82:	9a01      	ldr	r2, [sp, #4]
 800ec84:	2101      	movs	r1, #1
 800ec86:	4620      	mov	r0, r4
 800ec88:	f7fd fc04 	bl	800c494 <ucdr_deserialize_endian_uint16_t>
 800ec8c:	f995 3000 	ldrsb.w	r3, [r5]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	da01      	bge.n	800ec98 <uxr_deserialize_message_header+0x30>
 800ec94:	b003      	add	sp, #12
 800ec96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec98:	2204      	movs	r2, #4
 800ec9a:	4639      	mov	r1, r7
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	b003      	add	sp, #12
 800eca0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eca4:	f005 bb50 	b.w	8014348 <ucdr_deserialize_array_uint8_t>

0800eca8 <uxr_serialize_submessage_header>:
 800eca8:	b530      	push	{r4, r5, lr}
 800ecaa:	b083      	sub	sp, #12
 800ecac:	4615      	mov	r5, r2
 800ecae:	4604      	mov	r4, r0
 800ecb0:	9301      	str	r3, [sp, #4]
 800ecb2:	f7fd fa4f 	bl	800c154 <ucdr_serialize_uint8_t>
 800ecb6:	4629      	mov	r1, r5
 800ecb8:	4620      	mov	r0, r4
 800ecba:	f7fd fa4b 	bl	800c154 <ucdr_serialize_uint8_t>
 800ecbe:	9a01      	ldr	r2, [sp, #4]
 800ecc0:	2101      	movs	r1, #1
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	b003      	add	sp, #12
 800ecc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecca:	f7fd baef 	b.w	800c2ac <ucdr_serialize_endian_uint16_t>
 800ecce:	bf00      	nop

0800ecd0 <uxr_deserialize_submessage_header>:
 800ecd0:	b530      	push	{r4, r5, lr}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	4615      	mov	r5, r2
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	9301      	str	r3, [sp, #4]
 800ecda:	f7fd fa51 	bl	800c180 <ucdr_deserialize_uint8_t>
 800ecde:	4629      	mov	r1, r5
 800ece0:	4620      	mov	r0, r4
 800ece2:	f7fd fa4d 	bl	800c180 <ucdr_deserialize_uint8_t>
 800ece6:	9a01      	ldr	r2, [sp, #4]
 800ece8:	2101      	movs	r1, #1
 800ecea:	4620      	mov	r0, r4
 800ecec:	b003      	add	sp, #12
 800ecee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecf2:	f7fd bbcf 	b.w	800c494 <ucdr_deserialize_endian_uint16_t>
 800ecf6:	bf00      	nop

0800ecf8 <uxr_serialize_CLIENT_Representation>:
 800ecf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecfc:	2204      	movs	r2, #4
 800ecfe:	460e      	mov	r6, r1
 800ed00:	4605      	mov	r5, r0
 800ed02:	f005 fabd 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800ed06:	2202      	movs	r2, #2
 800ed08:	4607      	mov	r7, r0
 800ed0a:	1d31      	adds	r1, r6, #4
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	f005 fab7 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800ed12:	4038      	ands	r0, r7
 800ed14:	2202      	movs	r2, #2
 800ed16:	1db1      	adds	r1, r6, #6
 800ed18:	b2c7      	uxtb	r7, r0
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	f005 fab0 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800ed20:	2204      	movs	r2, #4
 800ed22:	4007      	ands	r7, r0
 800ed24:	f106 0108 	add.w	r1, r6, #8
 800ed28:	4628      	mov	r0, r5
 800ed2a:	f005 faa9 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800ed2e:	7b31      	ldrb	r1, [r6, #12]
 800ed30:	4007      	ands	r7, r0
 800ed32:	4628      	mov	r0, r5
 800ed34:	f7fd fa0e 	bl	800c154 <ucdr_serialize_uint8_t>
 800ed38:	7b71      	ldrb	r1, [r6, #13]
 800ed3a:	4007      	ands	r7, r0
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	f7fd f9db 	bl	800c0f8 <ucdr_serialize_bool>
 800ed42:	7b73      	ldrb	r3, [r6, #13]
 800ed44:	ea07 0800 	and.w	r8, r7, r0
 800ed48:	b93b      	cbnz	r3, 800ed5a <uxr_serialize_CLIENT_Representation+0x62>
 800ed4a:	8bb1      	ldrh	r1, [r6, #28]
 800ed4c:	4628      	mov	r0, r5
 800ed4e:	f7fd fa2d 	bl	800c1ac <ucdr_serialize_uint16_t>
 800ed52:	ea08 0000 	and.w	r0, r8, r0
 800ed56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed5a:	6931      	ldr	r1, [r6, #16]
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	f7fd fc0f 	bl	800c580 <ucdr_serialize_uint32_t>
 800ed62:	6933      	ldr	r3, [r6, #16]
 800ed64:	b1e3      	cbz	r3, 800eda0 <uxr_serialize_CLIENT_Representation+0xa8>
 800ed66:	b1c0      	cbz	r0, 800ed9a <uxr_serialize_CLIENT_Representation+0xa2>
 800ed68:	4637      	mov	r7, r6
 800ed6a:	f04f 0900 	mov.w	r9, #0
 800ed6e:	e001      	b.n	800ed74 <uxr_serialize_CLIENT_Representation+0x7c>
 800ed70:	3708      	adds	r7, #8
 800ed72:	b194      	cbz	r4, 800ed9a <uxr_serialize_CLIENT_Representation+0xa2>
 800ed74:	6979      	ldr	r1, [r7, #20]
 800ed76:	4628      	mov	r0, r5
 800ed78:	f005 fba2 	bl	80144c0 <ucdr_serialize_string>
 800ed7c:	69b9      	ldr	r1, [r7, #24]
 800ed7e:	4604      	mov	r4, r0
 800ed80:	4628      	mov	r0, r5
 800ed82:	f005 fb9d 	bl	80144c0 <ucdr_serialize_string>
 800ed86:	6933      	ldr	r3, [r6, #16]
 800ed88:	f109 0901 	add.w	r9, r9, #1
 800ed8c:	4004      	ands	r4, r0
 800ed8e:	4599      	cmp	r9, r3
 800ed90:	b2e4      	uxtb	r4, r4
 800ed92:	d3ed      	bcc.n	800ed70 <uxr_serialize_CLIENT_Representation+0x78>
 800ed94:	ea08 0804 	and.w	r8, r8, r4
 800ed98:	e7d7      	b.n	800ed4a <uxr_serialize_CLIENT_Representation+0x52>
 800ed9a:	f04f 0800 	mov.w	r8, #0
 800ed9e:	e7d4      	b.n	800ed4a <uxr_serialize_CLIENT_Representation+0x52>
 800eda0:	ea08 0800 	and.w	r8, r8, r0
 800eda4:	e7d1      	b.n	800ed4a <uxr_serialize_CLIENT_Representation+0x52>
 800eda6:	bf00      	nop

0800eda8 <uxr_deserialize_CLIENT_Representation>:
 800eda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edac:	2204      	movs	r2, #4
 800edae:	460c      	mov	r4, r1
 800edb0:	4605      	mov	r5, r0
 800edb2:	f005 fac9 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800edb6:	2202      	movs	r2, #2
 800edb8:	4607      	mov	r7, r0
 800edba:	1d21      	adds	r1, r4, #4
 800edbc:	4628      	mov	r0, r5
 800edbe:	f005 fac3 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800edc2:	4038      	ands	r0, r7
 800edc4:	2202      	movs	r2, #2
 800edc6:	1da1      	adds	r1, r4, #6
 800edc8:	b2c6      	uxtb	r6, r0
 800edca:	4628      	mov	r0, r5
 800edcc:	f005 fabc 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800edd0:	2204      	movs	r2, #4
 800edd2:	4006      	ands	r6, r0
 800edd4:	f104 0108 	add.w	r1, r4, #8
 800edd8:	4628      	mov	r0, r5
 800edda:	f005 fab5 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800edde:	f104 010c 	add.w	r1, r4, #12
 800ede2:	4006      	ands	r6, r0
 800ede4:	4628      	mov	r0, r5
 800ede6:	f7fd f9cb 	bl	800c180 <ucdr_deserialize_uint8_t>
 800edea:	f104 010d 	add.w	r1, r4, #13
 800edee:	ea06 0700 	and.w	r7, r6, r0
 800edf2:	4628      	mov	r0, r5
 800edf4:	f7fd f996 	bl	800c124 <ucdr_deserialize_bool>
 800edf8:	7b63      	ldrb	r3, [r4, #13]
 800edfa:	4007      	ands	r7, r0
 800edfc:	b93b      	cbnz	r3, 800ee0e <uxr_deserialize_CLIENT_Representation+0x66>
 800edfe:	f104 011c 	add.w	r1, r4, #28
 800ee02:	4628      	mov	r0, r5
 800ee04:	f7fd fad2 	bl	800c3ac <ucdr_deserialize_uint16_t>
 800ee08:	4038      	ands	r0, r7
 800ee0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee0e:	f104 0110 	add.w	r1, r4, #16
 800ee12:	4628      	mov	r0, r5
 800ee14:	f7fd fce4 	bl	800c7e0 <ucdr_deserialize_uint32_t>
 800ee18:	6923      	ldr	r3, [r4, #16]
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d903      	bls.n	800ee26 <uxr_deserialize_CLIENT_Representation+0x7e>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	75ab      	strb	r3, [r5, #22]
 800ee22:	2700      	movs	r7, #0
 800ee24:	e7eb      	b.n	800edfe <uxr_deserialize_CLIENT_Representation+0x56>
 800ee26:	b30b      	cbz	r3, 800ee6c <uxr_deserialize_CLIENT_Representation+0xc4>
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	d0fa      	beq.n	800ee22 <uxr_deserialize_CLIENT_Representation+0x7a>
 800ee2c:	46a0      	mov	r8, r4
 800ee2e:	f04f 0900 	mov.w	r9, #0
 800ee32:	e001      	b.n	800ee38 <uxr_deserialize_CLIENT_Representation+0x90>
 800ee34:	2e00      	cmp	r6, #0
 800ee36:	d0f4      	beq.n	800ee22 <uxr_deserialize_CLIENT_Representation+0x7a>
 800ee38:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ee3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee40:	4628      	mov	r0, r5
 800ee42:	f005 fb4d 	bl	80144e0 <ucdr_deserialize_string>
 800ee46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee4a:	4606      	mov	r6, r0
 800ee4c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ee50:	4628      	mov	r0, r5
 800ee52:	f005 fb45 	bl	80144e0 <ucdr_deserialize_string>
 800ee56:	6923      	ldr	r3, [r4, #16]
 800ee58:	f109 0901 	add.w	r9, r9, #1
 800ee5c:	4006      	ands	r6, r0
 800ee5e:	4599      	cmp	r9, r3
 800ee60:	f108 0808 	add.w	r8, r8, #8
 800ee64:	b2f6      	uxtb	r6, r6
 800ee66:	d3e5      	bcc.n	800ee34 <uxr_deserialize_CLIENT_Representation+0x8c>
 800ee68:	4037      	ands	r7, r6
 800ee6a:	e7c8      	b.n	800edfe <uxr_deserialize_CLIENT_Representation+0x56>
 800ee6c:	4007      	ands	r7, r0
 800ee6e:	e7c6      	b.n	800edfe <uxr_deserialize_CLIENT_Representation+0x56>

0800ee70 <uxr_serialize_AGENT_Representation>:
 800ee70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee74:	2204      	movs	r2, #4
 800ee76:	460f      	mov	r7, r1
 800ee78:	4605      	mov	r5, r0
 800ee7a:	f005 fa01 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800ee7e:	2202      	movs	r2, #2
 800ee80:	4604      	mov	r4, r0
 800ee82:	1d39      	adds	r1, r7, #4
 800ee84:	4628      	mov	r0, r5
 800ee86:	f005 f9fb 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800ee8a:	4020      	ands	r0, r4
 800ee8c:	2202      	movs	r2, #2
 800ee8e:	1db9      	adds	r1, r7, #6
 800ee90:	b2c4      	uxtb	r4, r0
 800ee92:	4628      	mov	r0, r5
 800ee94:	f005 f9f4 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800ee98:	7a39      	ldrb	r1, [r7, #8]
 800ee9a:	4004      	ands	r4, r0
 800ee9c:	4628      	mov	r0, r5
 800ee9e:	f7fd f92b 	bl	800c0f8 <ucdr_serialize_bool>
 800eea2:	7a3b      	ldrb	r3, [r7, #8]
 800eea4:	ea00 0804 	and.w	r8, r0, r4
 800eea8:	b913      	cbnz	r3, 800eeb0 <uxr_serialize_AGENT_Representation+0x40>
 800eeaa:	4640      	mov	r0, r8
 800eeac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeb0:	68f9      	ldr	r1, [r7, #12]
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	f7fd fb64 	bl	800c580 <ucdr_serialize_uint32_t>
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	b303      	cbz	r3, 800eefe <uxr_serialize_AGENT_Representation+0x8e>
 800eebc:	b1d0      	cbz	r0, 800eef4 <uxr_serialize_AGENT_Representation+0x84>
 800eebe:	463e      	mov	r6, r7
 800eec0:	f04f 0900 	mov.w	r9, #0
 800eec4:	e001      	b.n	800eeca <uxr_serialize_AGENT_Representation+0x5a>
 800eec6:	3608      	adds	r6, #8
 800eec8:	b1a4      	cbz	r4, 800eef4 <uxr_serialize_AGENT_Representation+0x84>
 800eeca:	6931      	ldr	r1, [r6, #16]
 800eecc:	4628      	mov	r0, r5
 800eece:	f005 faf7 	bl	80144c0 <ucdr_serialize_string>
 800eed2:	6971      	ldr	r1, [r6, #20]
 800eed4:	4604      	mov	r4, r0
 800eed6:	4628      	mov	r0, r5
 800eed8:	f005 faf2 	bl	80144c0 <ucdr_serialize_string>
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f109 0901 	add.w	r9, r9, #1
 800eee2:	4004      	ands	r4, r0
 800eee4:	4599      	cmp	r9, r3
 800eee6:	b2e4      	uxtb	r4, r4
 800eee8:	d3ed      	bcc.n	800eec6 <uxr_serialize_AGENT_Representation+0x56>
 800eeea:	ea08 0804 	and.w	r8, r8, r4
 800eeee:	4640      	mov	r0, r8
 800eef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eef4:	f04f 0800 	mov.w	r8, #0
 800eef8:	4640      	mov	r0, r8
 800eefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eefe:	ea08 0800 	and.w	r8, r8, r0
 800ef02:	e7d2      	b.n	800eeaa <uxr_serialize_AGENT_Representation+0x3a>

0800ef04 <uxr_serialize_DATAWRITER_Representation>:
 800ef04:	b570      	push	{r4, r5, r6, lr}
 800ef06:	460d      	mov	r5, r1
 800ef08:	7809      	ldrb	r1, [r1, #0]
 800ef0a:	4606      	mov	r6, r0
 800ef0c:	f7fd f922 	bl	800c154 <ucdr_serialize_uint8_t>
 800ef10:	4604      	mov	r4, r0
 800ef12:	b130      	cbz	r0, 800ef22 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ef14:	782b      	ldrb	r3, [r5, #0]
 800ef16:	2b02      	cmp	r3, #2
 800ef18:	d00c      	beq.n	800ef34 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ef1a:	2b03      	cmp	r3, #3
 800ef1c:	d010      	beq.n	800ef40 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d008      	beq.n	800ef34 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ef22:	2202      	movs	r2, #2
 800ef24:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ef28:	4630      	mov	r0, r6
 800ef2a:	f005 f9a9 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800ef2e:	4020      	ands	r0, r4
 800ef30:	b2c0      	uxtb	r0, r0
 800ef32:	bd70      	pop	{r4, r5, r6, pc}
 800ef34:	6869      	ldr	r1, [r5, #4]
 800ef36:	4630      	mov	r0, r6
 800ef38:	f005 fac2 	bl	80144c0 <ucdr_serialize_string>
 800ef3c:	4604      	mov	r4, r0
 800ef3e:	e7f0      	b.n	800ef22 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ef40:	4629      	mov	r1, r5
 800ef42:	4630      	mov	r0, r6
 800ef44:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ef48:	3104      	adds	r1, #4
 800ef4a:	f005 fa8d 	bl	8014468 <ucdr_serialize_sequence_uint8_t>
 800ef4e:	4604      	mov	r4, r0
 800ef50:	e7e7      	b.n	800ef22 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ef52:	bf00      	nop

0800ef54 <uxr_serialize_ObjectVariant.part.0>:
 800ef54:	b570      	push	{r4, r5, r6, lr}
 800ef56:	780b      	ldrb	r3, [r1, #0]
 800ef58:	3b01      	subs	r3, #1
 800ef5a:	460c      	mov	r4, r1
 800ef5c:	4605      	mov	r5, r0
 800ef5e:	2b0d      	cmp	r3, #13
 800ef60:	d854      	bhi.n	800f00c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ef62:	e8df f003 	tbb	[pc, r3]
 800ef66:	0730      	.short	0x0730
 800ef68:	07071b1b 	.word	0x07071b1b
 800ef6c:	0c530707 	.word	0x0c530707
 800ef70:	494e0c0c 	.word	0x494e0c0c
 800ef74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef78:	3104      	adds	r1, #4
 800ef7a:	f7ff bfc3 	b.w	800ef04 <uxr_serialize_DATAWRITER_Representation>
 800ef7e:	7909      	ldrb	r1, [r1, #4]
 800ef80:	f7fd f8e8 	bl	800c154 <ucdr_serialize_uint8_t>
 800ef84:	b1e8      	cbz	r0, 800efc2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800ef86:	7923      	ldrb	r3, [r4, #4]
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d001      	beq.n	800ef90 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800ef8c:	2b02      	cmp	r3, #2
 800ef8e:	d13d      	bne.n	800f00c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ef90:	68a1      	ldr	r1, [r4, #8]
 800ef92:	4628      	mov	r0, r5
 800ef94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef98:	f005 ba92 	b.w	80144c0 <ucdr_serialize_string>
 800ef9c:	7909      	ldrb	r1, [r1, #4]
 800ef9e:	f7fd f8d9 	bl	800c154 <ucdr_serialize_uint8_t>
 800efa2:	4606      	mov	r6, r0
 800efa4:	b120      	cbz	r0, 800efb0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800efa6:	7923      	ldrb	r3, [r4, #4]
 800efa8:	2b02      	cmp	r3, #2
 800efaa:	d039      	beq.n	800f020 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800efac:	2b03      	cmp	r3, #3
 800efae:	d02f      	beq.n	800f010 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800efb0:	2202      	movs	r2, #2
 800efb2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800efb6:	4628      	mov	r0, r5
 800efb8:	f005 f962 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800efbc:	4030      	ands	r0, r6
 800efbe:	b2c0      	uxtb	r0, r0
 800efc0:	bd70      	pop	{r4, r5, r6, pc}
 800efc2:	2000      	movs	r0, #0
 800efc4:	bd70      	pop	{r4, r5, r6, pc}
 800efc6:	7909      	ldrb	r1, [r1, #4]
 800efc8:	f7fd f8c4 	bl	800c154 <ucdr_serialize_uint8_t>
 800efcc:	4606      	mov	r6, r0
 800efce:	b158      	cbz	r0, 800efe8 <uxr_serialize_ObjectVariant.part.0+0x94>
 800efd0:	7923      	ldrb	r3, [r4, #4]
 800efd2:	2b02      	cmp	r3, #2
 800efd4:	d003      	beq.n	800efde <uxr_serialize_ObjectVariant.part.0+0x8a>
 800efd6:	2b03      	cmp	r3, #3
 800efd8:	d028      	beq.n	800f02c <uxr_serialize_ObjectVariant.part.0+0xd8>
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d104      	bne.n	800efe8 <uxr_serialize_ObjectVariant.part.0+0x94>
 800efde:	68a1      	ldr	r1, [r4, #8]
 800efe0:	4628      	mov	r0, r5
 800efe2:	f005 fa6d 	bl	80144c0 <ucdr_serialize_string>
 800efe6:	4606      	mov	r6, r0
 800efe8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800efec:	4628      	mov	r0, r5
 800efee:	f7fd fded 	bl	800cbcc <ucdr_serialize_int16_t>
 800eff2:	4030      	ands	r0, r6
 800eff4:	b2c0      	uxtb	r0, r0
 800eff6:	bd70      	pop	{r4, r5, r6, pc}
 800eff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800effc:	3104      	adds	r1, #4
 800effe:	f7ff be7b 	b.w	800ecf8 <uxr_serialize_CLIENT_Representation>
 800f002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f006:	3104      	adds	r1, #4
 800f008:	f7ff bf32 	b.w	800ee70 <uxr_serialize_AGENT_Representation>
 800f00c:	2001      	movs	r0, #1
 800f00e:	bd70      	pop	{r4, r5, r6, pc}
 800f010:	68a2      	ldr	r2, [r4, #8]
 800f012:	f104 010c 	add.w	r1, r4, #12
 800f016:	4628      	mov	r0, r5
 800f018:	f005 fa26 	bl	8014468 <ucdr_serialize_sequence_uint8_t>
 800f01c:	4606      	mov	r6, r0
 800f01e:	e7c7      	b.n	800efb0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f020:	68a1      	ldr	r1, [r4, #8]
 800f022:	4628      	mov	r0, r5
 800f024:	f005 fa4c 	bl	80144c0 <ucdr_serialize_string>
 800f028:	4606      	mov	r6, r0
 800f02a:	e7c1      	b.n	800efb0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f02c:	68a2      	ldr	r2, [r4, #8]
 800f02e:	f104 010c 	add.w	r1, r4, #12
 800f032:	4628      	mov	r0, r5
 800f034:	f005 fa18 	bl	8014468 <ucdr_serialize_sequence_uint8_t>
 800f038:	4606      	mov	r6, r0
 800f03a:	e7d5      	b.n	800efe8 <uxr_serialize_ObjectVariant.part.0+0x94>

0800f03c <uxr_deserialize_DATAWRITER_Representation>:
 800f03c:	b570      	push	{r4, r5, r6, lr}
 800f03e:	4606      	mov	r6, r0
 800f040:	460d      	mov	r5, r1
 800f042:	f7fd f89d 	bl	800c180 <ucdr_deserialize_uint8_t>
 800f046:	4604      	mov	r4, r0
 800f048:	b130      	cbz	r0, 800f058 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f04a:	782b      	ldrb	r3, [r5, #0]
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	d00c      	beq.n	800f06a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f050:	2b03      	cmp	r3, #3
 800f052:	d012      	beq.n	800f07a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800f054:	2b01      	cmp	r3, #1
 800f056:	d008      	beq.n	800f06a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f058:	2202      	movs	r2, #2
 800f05a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f05e:	4630      	mov	r0, r6
 800f060:	f005 f972 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f064:	4020      	ands	r0, r4
 800f066:	b2c0      	uxtb	r0, r0
 800f068:	bd70      	pop	{r4, r5, r6, pc}
 800f06a:	6869      	ldr	r1, [r5, #4]
 800f06c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f070:	4630      	mov	r0, r6
 800f072:	f005 fa35 	bl	80144e0 <ucdr_deserialize_string>
 800f076:	4604      	mov	r4, r0
 800f078:	e7ee      	b.n	800f058 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f07a:	1d2b      	adds	r3, r5, #4
 800f07c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f080:	f105 0108 	add.w	r1, r5, #8
 800f084:	4630      	mov	r0, r6
 800f086:	f005 fa01 	bl	801448c <ucdr_deserialize_sequence_uint8_t>
 800f08a:	4604      	mov	r4, r0
 800f08c:	e7e4      	b.n	800f058 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f08e:	bf00      	nop

0800f090 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f090:	b570      	push	{r4, r5, r6, lr}
 800f092:	460d      	mov	r5, r1
 800f094:	7809      	ldrb	r1, [r1, #0]
 800f096:	4606      	mov	r6, r0
 800f098:	f7fd f82e 	bl	800c0f8 <ucdr_serialize_bool>
 800f09c:	782b      	ldrb	r3, [r5, #0]
 800f09e:	4604      	mov	r4, r0
 800f0a0:	b94b      	cbnz	r3, 800f0b6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f0a2:	7a29      	ldrb	r1, [r5, #8]
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	f7fd f827 	bl	800c0f8 <ucdr_serialize_bool>
 800f0aa:	7a2b      	ldrb	r3, [r5, #8]
 800f0ac:	4004      	ands	r4, r0
 800f0ae:	b2e4      	uxtb	r4, r4
 800f0b0:	b943      	cbnz	r3, 800f0c4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	bd70      	pop	{r4, r5, r6, pc}
 800f0b6:	6869      	ldr	r1, [r5, #4]
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	f005 fa01 	bl	80144c0 <ucdr_serialize_string>
 800f0be:	4004      	ands	r4, r0
 800f0c0:	b2e4      	uxtb	r4, r4
 800f0c2:	e7ee      	b.n	800f0a2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f0c4:	68e9      	ldr	r1, [r5, #12]
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	f005 f9fa 	bl	80144c0 <ucdr_serialize_string>
 800f0cc:	4004      	ands	r4, r0
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	bd70      	pop	{r4, r5, r6, pc}
 800f0d2:	bf00      	nop

0800f0d4 <uxr_serialize_OBJK_Topic_Binary>:
 800f0d4:	b570      	push	{r4, r5, r6, lr}
 800f0d6:	460d      	mov	r5, r1
 800f0d8:	6809      	ldr	r1, [r1, #0]
 800f0da:	4606      	mov	r6, r0
 800f0dc:	f005 f9f0 	bl	80144c0 <ucdr_serialize_string>
 800f0e0:	7929      	ldrb	r1, [r5, #4]
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	4630      	mov	r0, r6
 800f0e6:	f7fd f807 	bl	800c0f8 <ucdr_serialize_bool>
 800f0ea:	792b      	ldrb	r3, [r5, #4]
 800f0ec:	4004      	ands	r4, r0
 800f0ee:	b2e4      	uxtb	r4, r4
 800f0f0:	b943      	cbnz	r3, 800f104 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f0f2:	7b29      	ldrb	r1, [r5, #12]
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	f7fc ffff 	bl	800c0f8 <ucdr_serialize_bool>
 800f0fa:	7b2b      	ldrb	r3, [r5, #12]
 800f0fc:	4004      	ands	r4, r0
 800f0fe:	b93b      	cbnz	r3, 800f110 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f100:	4620      	mov	r0, r4
 800f102:	bd70      	pop	{r4, r5, r6, pc}
 800f104:	68a9      	ldr	r1, [r5, #8]
 800f106:	4630      	mov	r0, r6
 800f108:	f005 f9da 	bl	80144c0 <ucdr_serialize_string>
 800f10c:	4004      	ands	r4, r0
 800f10e:	e7f0      	b.n	800f0f2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f110:	6929      	ldr	r1, [r5, #16]
 800f112:	4630      	mov	r0, r6
 800f114:	f005 f9d4 	bl	80144c0 <ucdr_serialize_string>
 800f118:	4004      	ands	r4, r0
 800f11a:	b2e4      	uxtb	r4, r4
 800f11c:	4620      	mov	r0, r4
 800f11e:	bd70      	pop	{r4, r5, r6, pc}

0800f120 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800f120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f124:	460c      	mov	r4, r1
 800f126:	7809      	ldrb	r1, [r1, #0]
 800f128:	4606      	mov	r6, r0
 800f12a:	f7fc ffe5 	bl	800c0f8 <ucdr_serialize_bool>
 800f12e:	7823      	ldrb	r3, [r4, #0]
 800f130:	4605      	mov	r5, r0
 800f132:	b96b      	cbnz	r3, 800f150 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800f134:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f138:	4630      	mov	r0, r6
 800f13a:	f7fc ffdd 	bl	800c0f8 <ucdr_serialize_bool>
 800f13e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f142:	4005      	ands	r5, r0
 800f144:	b2ed      	uxtb	r5, r5
 800f146:	2b00      	cmp	r3, #0
 800f148:	d169      	bne.n	800f21e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800f14a:	4628      	mov	r0, r5
 800f14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f150:	6861      	ldr	r1, [r4, #4]
 800f152:	4630      	mov	r0, r6
 800f154:	f7fd fa14 	bl	800c580 <ucdr_serialize_uint32_t>
 800f158:	6863      	ldr	r3, [r4, #4]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d06b      	beq.n	800f236 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800f15e:	2800      	cmp	r0, #0
 800f160:	d067      	beq.n	800f232 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f162:	68a1      	ldr	r1, [r4, #8]
 800f164:	4630      	mov	r0, r6
 800f166:	f005 f9ab 	bl	80144c0 <ucdr_serialize_string>
 800f16a:	6863      	ldr	r3, [r4, #4]
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d953      	bls.n	800f218 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f170:	2800      	cmp	r0, #0
 800f172:	d05e      	beq.n	800f232 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f174:	68e1      	ldr	r1, [r4, #12]
 800f176:	4630      	mov	r0, r6
 800f178:	f005 f9a2 	bl	80144c0 <ucdr_serialize_string>
 800f17c:	6863      	ldr	r3, [r4, #4]
 800f17e:	2b02      	cmp	r3, #2
 800f180:	d94a      	bls.n	800f218 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f182:	2800      	cmp	r0, #0
 800f184:	d055      	beq.n	800f232 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f186:	6921      	ldr	r1, [r4, #16]
 800f188:	4630      	mov	r0, r6
 800f18a:	f005 f999 	bl	80144c0 <ucdr_serialize_string>
 800f18e:	6863      	ldr	r3, [r4, #4]
 800f190:	2b03      	cmp	r3, #3
 800f192:	d941      	bls.n	800f218 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f194:	2800      	cmp	r0, #0
 800f196:	d04c      	beq.n	800f232 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f198:	6961      	ldr	r1, [r4, #20]
 800f19a:	4630      	mov	r0, r6
 800f19c:	f005 f990 	bl	80144c0 <ucdr_serialize_string>
 800f1a0:	6863      	ldr	r3, [r4, #4]
 800f1a2:	2b04      	cmp	r3, #4
 800f1a4:	d938      	bls.n	800f218 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	d043      	beq.n	800f232 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f1aa:	69a1      	ldr	r1, [r4, #24]
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	f005 f987 	bl	80144c0 <ucdr_serialize_string>
 800f1b2:	6863      	ldr	r3, [r4, #4]
 800f1b4:	2b05      	cmp	r3, #5
 800f1b6:	d92f      	bls.n	800f218 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	d03a      	beq.n	800f232 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f1bc:	69e1      	ldr	r1, [r4, #28]
 800f1be:	4630      	mov	r0, r6
 800f1c0:	f005 f97e 	bl	80144c0 <ucdr_serialize_string>
 800f1c4:	6863      	ldr	r3, [r4, #4]
 800f1c6:	2b06      	cmp	r3, #6
 800f1c8:	d926      	bls.n	800f218 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f1ca:	b390      	cbz	r0, 800f232 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f1cc:	6a21      	ldr	r1, [r4, #32]
 800f1ce:	4630      	mov	r0, r6
 800f1d0:	f005 f976 	bl	80144c0 <ucdr_serialize_string>
 800f1d4:	6863      	ldr	r3, [r4, #4]
 800f1d6:	2b07      	cmp	r3, #7
 800f1d8:	d91e      	bls.n	800f218 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f1da:	b350      	cbz	r0, 800f232 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f1dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f1de:	4630      	mov	r0, r6
 800f1e0:	f005 f96e 	bl	80144c0 <ucdr_serialize_string>
 800f1e4:	6863      	ldr	r3, [r4, #4]
 800f1e6:	2b08      	cmp	r3, #8
 800f1e8:	d916      	bls.n	800f218 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f1ea:	b310      	cbz	r0, 800f232 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f1ec:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f1ee:	4630      	mov	r0, r6
 800f1f0:	f005 f966 	bl	80144c0 <ucdr_serialize_string>
 800f1f4:	6863      	ldr	r3, [r4, #4]
 800f1f6:	2b09      	cmp	r3, #9
 800f1f8:	d90e      	bls.n	800f218 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f1fa:	b1d0      	cbz	r0, 800f232 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f1fc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f200:	2709      	movs	r7, #9
 800f202:	e000      	b.n	800f206 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800f204:	b1a8      	cbz	r0, 800f232 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f206:	f858 1b04 	ldr.w	r1, [r8], #4
 800f20a:	4630      	mov	r0, r6
 800f20c:	f005 f958 	bl	80144c0 <ucdr_serialize_string>
 800f210:	6862      	ldr	r2, [r4, #4]
 800f212:	3701      	adds	r7, #1
 800f214:	4297      	cmp	r7, r2
 800f216:	d3f5      	bcc.n	800f204 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800f218:	4005      	ands	r5, r0
 800f21a:	b2ed      	uxtb	r5, r5
 800f21c:	e78a      	b.n	800f134 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f21e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f220:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f224:	4630      	mov	r0, r6
 800f226:	f005 f91f 	bl	8014468 <ucdr_serialize_sequence_uint8_t>
 800f22a:	4005      	ands	r5, r0
 800f22c:	4628      	mov	r0, r5
 800f22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f232:	2500      	movs	r5, #0
 800f234:	e77e      	b.n	800f134 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f236:	4028      	ands	r0, r5
 800f238:	b2c5      	uxtb	r5, r0
 800f23a:	e77b      	b.n	800f134 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800f23c <uxr_serialize_OBJK_Publisher_Binary>:
 800f23c:	b570      	push	{r4, r5, r6, lr}
 800f23e:	460d      	mov	r5, r1
 800f240:	7809      	ldrb	r1, [r1, #0]
 800f242:	4606      	mov	r6, r0
 800f244:	f7fc ff58 	bl	800c0f8 <ucdr_serialize_bool>
 800f248:	782b      	ldrb	r3, [r5, #0]
 800f24a:	4604      	mov	r4, r0
 800f24c:	b94b      	cbnz	r3, 800f262 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800f24e:	7a29      	ldrb	r1, [r5, #8]
 800f250:	4630      	mov	r0, r6
 800f252:	f7fc ff51 	bl	800c0f8 <ucdr_serialize_bool>
 800f256:	7a2b      	ldrb	r3, [r5, #8]
 800f258:	4004      	ands	r4, r0
 800f25a:	b2e4      	uxtb	r4, r4
 800f25c:	b943      	cbnz	r3, 800f270 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800f25e:	4620      	mov	r0, r4
 800f260:	bd70      	pop	{r4, r5, r6, pc}
 800f262:	6869      	ldr	r1, [r5, #4]
 800f264:	4630      	mov	r0, r6
 800f266:	f005 f92b 	bl	80144c0 <ucdr_serialize_string>
 800f26a:	4004      	ands	r4, r0
 800f26c:	b2e4      	uxtb	r4, r4
 800f26e:	e7ee      	b.n	800f24e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800f270:	f105 010c 	add.w	r1, r5, #12
 800f274:	4630      	mov	r0, r6
 800f276:	f7ff ff53 	bl	800f120 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800f27a:	4004      	ands	r4, r0
 800f27c:	4620      	mov	r0, r4
 800f27e:	bd70      	pop	{r4, r5, r6, pc}

0800f280 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f280:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800f284:	4688      	mov	r8, r1
 800f286:	8809      	ldrh	r1, [r1, #0]
 800f288:	4681      	mov	r9, r0
 800f28a:	f7fc ff8f 	bl	800c1ac <ucdr_serialize_uint16_t>
 800f28e:	f898 1002 	ldrb.w	r1, [r8, #2]
 800f292:	4606      	mov	r6, r0
 800f294:	4648      	mov	r0, r9
 800f296:	f7fc ff2f 	bl	800c0f8 <ucdr_serialize_bool>
 800f29a:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f29e:	4006      	ands	r6, r0
 800f2a0:	b2f5      	uxtb	r5, r6
 800f2a2:	b9eb      	cbnz	r3, 800f2e0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800f2a4:	f898 1006 	ldrb.w	r1, [r8, #6]
 800f2a8:	4648      	mov	r0, r9
 800f2aa:	f7fc ff25 	bl	800c0f8 <ucdr_serialize_bool>
 800f2ae:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f2b2:	4005      	ands	r5, r0
 800f2b4:	bb7b      	cbnz	r3, 800f316 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800f2b6:	f898 100c 	ldrb.w	r1, [r8, #12]
 800f2ba:	4648      	mov	r0, r9
 800f2bc:	f7fc ff1c 	bl	800c0f8 <ucdr_serialize_bool>
 800f2c0:	f898 300c 	ldrb.w	r3, [r8, #12]
 800f2c4:	4005      	ands	r5, r0
 800f2c6:	b9f3      	cbnz	r3, 800f306 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800f2c8:	f898 1014 	ldrb.w	r1, [r8, #20]
 800f2cc:	4648      	mov	r0, r9
 800f2ce:	f7fc ff13 	bl	800c0f8 <ucdr_serialize_bool>
 800f2d2:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f2d6:	4005      	ands	r5, r0
 800f2d8:	b94b      	cbnz	r3, 800f2ee <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800f2da:	4628      	mov	r0, r5
 800f2dc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f2e0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800f2e4:	4648      	mov	r0, r9
 800f2e6:	f7fc ff61 	bl	800c1ac <ucdr_serialize_uint16_t>
 800f2ea:	4005      	ands	r5, r0
 800f2ec:	e7da      	b.n	800f2a4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800f2ee:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f2f2:	f108 011c 	add.w	r1, r8, #28
 800f2f6:	4648      	mov	r0, r9
 800f2f8:	f005 f8b6 	bl	8014468 <ucdr_serialize_sequence_uint8_t>
 800f2fc:	4028      	ands	r0, r5
 800f2fe:	b2c5      	uxtb	r5, r0
 800f300:	4628      	mov	r0, r5
 800f302:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f306:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f30a:	4648      	mov	r0, r9
 800f30c:	f7fd f938 	bl	800c580 <ucdr_serialize_uint32_t>
 800f310:	4028      	ands	r0, r5
 800f312:	b2c5      	uxtb	r5, r0
 800f314:	e7d8      	b.n	800f2c8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800f316:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f31a:	4648      	mov	r0, r9
 800f31c:	f7fd f930 	bl	800c580 <ucdr_serialize_uint32_t>
 800f320:	4028      	ands	r0, r5
 800f322:	b2c5      	uxtb	r5, r0
 800f324:	e7c7      	b.n	800f2b6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800f326:	bf00      	nop

0800f328 <uxr_serialize_OBJK_DataWriter_Binary>:
 800f328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f32a:	2202      	movs	r2, #2
 800f32c:	460d      	mov	r5, r1
 800f32e:	4606      	mov	r6, r0
 800f330:	f004 ffa6 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f334:	78a9      	ldrb	r1, [r5, #2]
 800f336:	4604      	mov	r4, r0
 800f338:	4630      	mov	r0, r6
 800f33a:	f7fc fedd 	bl	800c0f8 <ucdr_serialize_bool>
 800f33e:	78ab      	ldrb	r3, [r5, #2]
 800f340:	4004      	ands	r4, r0
 800f342:	b2e4      	uxtb	r4, r4
 800f344:	b90b      	cbnz	r3, 800f34a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800f346:	4620      	mov	r0, r4
 800f348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f34a:	f105 0108 	add.w	r1, r5, #8
 800f34e:	4630      	mov	r0, r6
 800f350:	f7ff ff96 	bl	800f280 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f354:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800f358:	4607      	mov	r7, r0
 800f35a:	4630      	mov	r0, r6
 800f35c:	f7fc fecc 	bl	800c0f8 <ucdr_serialize_bool>
 800f360:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800f364:	4038      	ands	r0, r7
 800f366:	b2c7      	uxtb	r7, r0
 800f368:	b913      	cbnz	r3, 800f370 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800f36a:	403c      	ands	r4, r7
 800f36c:	4620      	mov	r0, r4
 800f36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f370:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800f374:	4630      	mov	r0, r6
 800f376:	f7fd fb59 	bl	800ca2c <ucdr_serialize_uint64_t>
 800f37a:	4007      	ands	r7, r0
 800f37c:	e7f5      	b.n	800f36a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800f37e:	bf00      	nop

0800f380 <uxr_deserialize_ObjectVariant>:
 800f380:	b570      	push	{r4, r5, r6, lr}
 800f382:	4605      	mov	r5, r0
 800f384:	460e      	mov	r6, r1
 800f386:	f7fc fefb 	bl	800c180 <ucdr_deserialize_uint8_t>
 800f38a:	b168      	cbz	r0, 800f3a8 <uxr_deserialize_ObjectVariant+0x28>
 800f38c:	7833      	ldrb	r3, [r6, #0]
 800f38e:	3b01      	subs	r3, #1
 800f390:	4604      	mov	r4, r0
 800f392:	2b0d      	cmp	r3, #13
 800f394:	d809      	bhi.n	800f3aa <uxr_deserialize_ObjectVariant+0x2a>
 800f396:	e8df f003 	tbb	[pc, r3]
 800f39a:	0a41      	.short	0x0a41
 800f39c:	0a0a2323 	.word	0x0a0a2323
 800f3a0:	10080a0a 	.word	0x10080a0a
 800f3a4:	565c1010 	.word	0x565c1010
 800f3a8:	2400      	movs	r4, #0
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	bd70      	pop	{r4, r5, r6, pc}
 800f3ae:	1d31      	adds	r1, r6, #4
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3b6:	f7ff be41 	b.w	800f03c <uxr_deserialize_DATAWRITER_Representation>
 800f3ba:	1d31      	adds	r1, r6, #4
 800f3bc:	4628      	mov	r0, r5
 800f3be:	f7fc fedf 	bl	800c180 <ucdr_deserialize_uint8_t>
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	d0f0      	beq.n	800f3a8 <uxr_deserialize_ObjectVariant+0x28>
 800f3c6:	7933      	ldrb	r3, [r6, #4]
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d001      	beq.n	800f3d0 <uxr_deserialize_ObjectVariant+0x50>
 800f3cc:	2b02      	cmp	r3, #2
 800f3ce:	d1ec      	bne.n	800f3aa <uxr_deserialize_ObjectVariant+0x2a>
 800f3d0:	68b1      	ldr	r1, [r6, #8]
 800f3d2:	4628      	mov	r0, r5
 800f3d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3dc:	f005 b880 	b.w	80144e0 <ucdr_deserialize_string>
 800f3e0:	1d31      	adds	r1, r6, #4
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	f7fc fecc 	bl	800c180 <ucdr_deserialize_uint8_t>
 800f3e8:	4604      	mov	r4, r0
 800f3ea:	b170      	cbz	r0, 800f40a <uxr_deserialize_ObjectVariant+0x8a>
 800f3ec:	7933      	ldrb	r3, [r6, #4]
 800f3ee:	2b02      	cmp	r3, #2
 800f3f0:	d04c      	beq.n	800f48c <uxr_deserialize_ObjectVariant+0x10c>
 800f3f2:	2b03      	cmp	r3, #3
 800f3f4:	d109      	bne.n	800f40a <uxr_deserialize_ObjectVariant+0x8a>
 800f3f6:	f106 0308 	add.w	r3, r6, #8
 800f3fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3fe:	f106 010c 	add.w	r1, r6, #12
 800f402:	4628      	mov	r0, r5
 800f404:	f005 f842 	bl	801448c <ucdr_deserialize_sequence_uint8_t>
 800f408:	4604      	mov	r4, r0
 800f40a:	2202      	movs	r2, #2
 800f40c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f410:	4628      	mov	r0, r5
 800f412:	f004 ff99 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f416:	4020      	ands	r0, r4
 800f418:	b2c4      	uxtb	r4, r0
 800f41a:	e7c6      	b.n	800f3aa <uxr_deserialize_ObjectVariant+0x2a>
 800f41c:	1d31      	adds	r1, r6, #4
 800f41e:	4628      	mov	r0, r5
 800f420:	f7fc feae 	bl	800c180 <ucdr_deserialize_uint8_t>
 800f424:	4604      	mov	r4, r0
 800f426:	b130      	cbz	r0, 800f436 <uxr_deserialize_ObjectVariant+0xb6>
 800f428:	7933      	ldrb	r3, [r6, #4]
 800f42a:	2b02      	cmp	r3, #2
 800f42c:	d036      	beq.n	800f49c <uxr_deserialize_ObjectVariant+0x11c>
 800f42e:	2b03      	cmp	r3, #3
 800f430:	d03c      	beq.n	800f4ac <uxr_deserialize_ObjectVariant+0x12c>
 800f432:	2b01      	cmp	r3, #1
 800f434:	d032      	beq.n	800f49c <uxr_deserialize_ObjectVariant+0x11c>
 800f436:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f43a:	4628      	mov	r0, r5
 800f43c:	f7fd fc46 	bl	800cccc <ucdr_deserialize_int16_t>
 800f440:	4020      	ands	r0, r4
 800f442:	b2c4      	uxtb	r4, r0
 800f444:	e7b1      	b.n	800f3aa <uxr_deserialize_ObjectVariant+0x2a>
 800f446:	1d31      	adds	r1, r6, #4
 800f448:	4628      	mov	r0, r5
 800f44a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f44e:	f7ff bcab 	b.w	800eda8 <uxr_deserialize_CLIENT_Representation>
 800f452:	2204      	movs	r2, #4
 800f454:	18b1      	adds	r1, r6, r2
 800f456:	4628      	mov	r0, r5
 800f458:	f004 ff76 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f45c:	2202      	movs	r2, #2
 800f45e:	f106 0108 	add.w	r1, r6, #8
 800f462:	4604      	mov	r4, r0
 800f464:	4628      	mov	r0, r5
 800f466:	f004 ff6f 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f46a:	2202      	movs	r2, #2
 800f46c:	4004      	ands	r4, r0
 800f46e:	f106 010a 	add.w	r1, r6, #10
 800f472:	4628      	mov	r0, r5
 800f474:	f004 ff68 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f478:	b2e4      	uxtb	r4, r4
 800f47a:	4603      	mov	r3, r0
 800f47c:	f106 010c 	add.w	r1, r6, #12
 800f480:	4628      	mov	r0, r5
 800f482:	401c      	ands	r4, r3
 800f484:	f7fc fe4e 	bl	800c124 <ucdr_deserialize_bool>
 800f488:	4004      	ands	r4, r0
 800f48a:	e78e      	b.n	800f3aa <uxr_deserialize_ObjectVariant+0x2a>
 800f48c:	68b1      	ldr	r1, [r6, #8]
 800f48e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f492:	4628      	mov	r0, r5
 800f494:	f005 f824 	bl	80144e0 <ucdr_deserialize_string>
 800f498:	4604      	mov	r4, r0
 800f49a:	e7b6      	b.n	800f40a <uxr_deserialize_ObjectVariant+0x8a>
 800f49c:	68b1      	ldr	r1, [r6, #8]
 800f49e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	f005 f81c 	bl	80144e0 <ucdr_deserialize_string>
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	e7c4      	b.n	800f436 <uxr_deserialize_ObjectVariant+0xb6>
 800f4ac:	f106 0308 	add.w	r3, r6, #8
 800f4b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4b4:	f106 010c 	add.w	r1, r6, #12
 800f4b8:	4628      	mov	r0, r5
 800f4ba:	f004 ffe7 	bl	801448c <ucdr_deserialize_sequence_uint8_t>
 800f4be:	4604      	mov	r4, r0
 800f4c0:	e7b9      	b.n	800f436 <uxr_deserialize_ObjectVariant+0xb6>
 800f4c2:	bf00      	nop

0800f4c4 <uxr_deserialize_BaseObjectRequest>:
 800f4c4:	b570      	push	{r4, r5, r6, lr}
 800f4c6:	2202      	movs	r2, #2
 800f4c8:	4605      	mov	r5, r0
 800f4ca:	460e      	mov	r6, r1
 800f4cc:	f004 ff3c 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f4d0:	2202      	movs	r2, #2
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	18b1      	adds	r1, r6, r2
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	f004 ff36 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f4dc:	4020      	ands	r0, r4
 800f4de:	b2c0      	uxtb	r0, r0
 800f4e0:	bd70      	pop	{r4, r5, r6, pc}
 800f4e2:	bf00      	nop

0800f4e4 <uxr_serialize_ActivityInfoVariant>:
 800f4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4e8:	460d      	mov	r5, r1
 800f4ea:	7809      	ldrb	r1, [r1, #0]
 800f4ec:	4607      	mov	r7, r0
 800f4ee:	f7fc fe31 	bl	800c154 <ucdr_serialize_uint8_t>
 800f4f2:	4681      	mov	r9, r0
 800f4f4:	b138      	cbz	r0, 800f506 <uxr_serialize_ActivityInfoVariant+0x22>
 800f4f6:	782b      	ldrb	r3, [r5, #0]
 800f4f8:	2b06      	cmp	r3, #6
 800f4fa:	f000 8082 	beq.w	800f602 <uxr_serialize_ActivityInfoVariant+0x11e>
 800f4fe:	2b0d      	cmp	r3, #13
 800f500:	d016      	beq.n	800f530 <uxr_serialize_ActivityInfoVariant+0x4c>
 800f502:	2b05      	cmp	r3, #5
 800f504:	d002      	beq.n	800f50c <uxr_serialize_ActivityInfoVariant+0x28>
 800f506:	4648      	mov	r0, r9
 800f508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f50c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f510:	4638      	mov	r0, r7
 800f512:	f7fd fb5b 	bl	800cbcc <ucdr_serialize_int16_t>
 800f516:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f51a:	4681      	mov	r9, r0
 800f51c:	4638      	mov	r0, r7
 800f51e:	f7fd fa85 	bl	800ca2c <ucdr_serialize_uint64_t>
 800f522:	ea09 0000 	and.w	r0, r9, r0
 800f526:	fa5f f980 	uxtb.w	r9, r0
 800f52a:	4648      	mov	r0, r9
 800f52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f530:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f534:	4638      	mov	r0, r7
 800f536:	f7fd fb49 	bl	800cbcc <ucdr_serialize_int16_t>
 800f53a:	68e9      	ldr	r1, [r5, #12]
 800f53c:	4681      	mov	r9, r0
 800f53e:	4638      	mov	r0, r7
 800f540:	f7fd f81e 	bl	800c580 <ucdr_serialize_uint32_t>
 800f544:	68eb      	ldr	r3, [r5, #12]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d0eb      	beq.n	800f522 <uxr_serialize_ActivityInfoVariant+0x3e>
 800f54a:	b320      	cbz	r0, 800f596 <uxr_serialize_ActivityInfoVariant+0xb2>
 800f54c:	f105 080c 	add.w	r8, r5, #12
 800f550:	2600      	movs	r6, #0
 800f552:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800f556:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800f55a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800f55e:	4638      	mov	r0, r7
 800f560:	f7fc fdf8 	bl	800c154 <ucdr_serialize_uint8_t>
 800f564:	2800      	cmp	r0, #0
 800f566:	d053      	beq.n	800f610 <uxr_serialize_ActivityInfoVariant+0x12c>
 800f568:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800f56c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800f570:	0074      	lsls	r4, r6, #1
 800f572:	00c9      	lsls	r1, r1, #3
 800f574:	2b03      	cmp	r3, #3
 800f576:	d854      	bhi.n	800f622 <uxr_serialize_ActivityInfoVariant+0x13e>
 800f578:	e8df f003 	tbb	[pc, r3]
 800f57c:	02102132 	.word	0x02102132
 800f580:	4441      	add	r1, r8
 800f582:	4638      	mov	r0, r7
 800f584:	6889      	ldr	r1, [r1, #8]
 800f586:	f004 ff9b 	bl	80144c0 <ucdr_serialize_string>
 800f58a:	68ea      	ldr	r2, [r5, #12]
 800f58c:	3601      	adds	r6, #1
 800f58e:	4296      	cmp	r6, r2
 800f590:	d242      	bcs.n	800f618 <uxr_serialize_ActivityInfoVariant+0x134>
 800f592:	2800      	cmp	r0, #0
 800f594:	d1dd      	bne.n	800f552 <uxr_serialize_ActivityInfoVariant+0x6e>
 800f596:	f04f 0900 	mov.w	r9, #0
 800f59a:	e7b4      	b.n	800f506 <uxr_serialize_ActivityInfoVariant+0x22>
 800f59c:	3108      	adds	r1, #8
 800f59e:	4441      	add	r1, r8
 800f5a0:	2210      	movs	r2, #16
 800f5a2:	4638      	mov	r0, r7
 800f5a4:	f004 fe6c 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f5a8:	4434      	add	r4, r6
 800f5aa:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f5b2:	4638      	mov	r0, r7
 800f5b4:	f7fc ffe4 	bl	800c580 <ucdr_serialize_uint32_t>
 800f5b8:	4020      	ands	r0, r4
 800f5ba:	b2c0      	uxtb	r0, r0
 800f5bc:	e7e5      	b.n	800f58a <uxr_serialize_ActivityInfoVariant+0xa6>
 800f5be:	3108      	adds	r1, #8
 800f5c0:	4441      	add	r1, r8
 800f5c2:	2204      	movs	r2, #4
 800f5c4:	4638      	mov	r0, r7
 800f5c6:	f004 fe5b 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f5ca:	4434      	add	r4, r6
 800f5cc:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f5d0:	4604      	mov	r4, r0
 800f5d2:	8b19      	ldrh	r1, [r3, #24]
 800f5d4:	4638      	mov	r0, r7
 800f5d6:	f7fc fde9 	bl	800c1ac <ucdr_serialize_uint16_t>
 800f5da:	4020      	ands	r0, r4
 800f5dc:	b2c0      	uxtb	r0, r0
 800f5de:	e7d4      	b.n	800f58a <uxr_serialize_ActivityInfoVariant+0xa6>
 800f5e0:	3108      	adds	r1, #8
 800f5e2:	4441      	add	r1, r8
 800f5e4:	2202      	movs	r2, #2
 800f5e6:	4638      	mov	r0, r7
 800f5e8:	f004 fe4a 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f5ec:	4434      	add	r4, r6
 800f5ee:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	7d99      	ldrb	r1, [r3, #22]
 800f5f6:	4638      	mov	r0, r7
 800f5f8:	f7fc fdac 	bl	800c154 <ucdr_serialize_uint8_t>
 800f5fc:	4020      	ands	r0, r4
 800f5fe:	b2c0      	uxtb	r0, r0
 800f600:	e7c3      	b.n	800f58a <uxr_serialize_ActivityInfoVariant+0xa6>
 800f602:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f606:	4638      	mov	r0, r7
 800f608:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f60c:	f7fd bade 	b.w	800cbcc <ucdr_serialize_int16_t>
 800f610:	68ea      	ldr	r2, [r5, #12]
 800f612:	3601      	adds	r6, #1
 800f614:	42b2      	cmp	r2, r6
 800f616:	d8be      	bhi.n	800f596 <uxr_serialize_ActivityInfoVariant+0xb2>
 800f618:	ea09 0900 	and.w	r9, r9, r0
 800f61c:	fa5f f989 	uxtb.w	r9, r9
 800f620:	e771      	b.n	800f506 <uxr_serialize_ActivityInfoVariant+0x22>
 800f622:	68eb      	ldr	r3, [r5, #12]
 800f624:	3601      	adds	r6, #1
 800f626:	429e      	cmp	r6, r3
 800f628:	f10a 0a18 	add.w	sl, sl, #24
 800f62c:	d395      	bcc.n	800f55a <uxr_serialize_ActivityInfoVariant+0x76>
 800f62e:	e76a      	b.n	800f506 <uxr_serialize_ActivityInfoVariant+0x22>

0800f630 <uxr_deserialize_BaseObjectReply>:
 800f630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f634:	2202      	movs	r2, #2
 800f636:	4606      	mov	r6, r0
 800f638:	460f      	mov	r7, r1
 800f63a:	f004 fe85 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f63e:	2202      	movs	r2, #2
 800f640:	18b9      	adds	r1, r7, r2
 800f642:	4605      	mov	r5, r0
 800f644:	4630      	mov	r0, r6
 800f646:	f004 fe7f 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f64a:	1d39      	adds	r1, r7, #4
 800f64c:	4680      	mov	r8, r0
 800f64e:	4630      	mov	r0, r6
 800f650:	f7fc fd96 	bl	800c180 <ucdr_deserialize_uint8_t>
 800f654:	1d79      	adds	r1, r7, #5
 800f656:	4604      	mov	r4, r0
 800f658:	4630      	mov	r0, r6
 800f65a:	f7fc fd91 	bl	800c180 <ucdr_deserialize_uint8_t>
 800f65e:	ea05 0508 	and.w	r5, r5, r8
 800f662:	402c      	ands	r4, r5
 800f664:	4020      	ands	r0, r4
 800f666:	b2c0      	uxtb	r0, r0
 800f668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f66c <uxr_serialize_ReadSpecification>:
 800f66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f670:	460e      	mov	r6, r1
 800f672:	7809      	ldrb	r1, [r1, #0]
 800f674:	4607      	mov	r7, r0
 800f676:	f7fc fd6d 	bl	800c154 <ucdr_serialize_uint8_t>
 800f67a:	7871      	ldrb	r1, [r6, #1]
 800f67c:	4604      	mov	r4, r0
 800f67e:	4638      	mov	r0, r7
 800f680:	f7fc fd68 	bl	800c154 <ucdr_serialize_uint8_t>
 800f684:	78b1      	ldrb	r1, [r6, #2]
 800f686:	4004      	ands	r4, r0
 800f688:	4638      	mov	r0, r7
 800f68a:	f7fc fd35 	bl	800c0f8 <ucdr_serialize_bool>
 800f68e:	78b3      	ldrb	r3, [r6, #2]
 800f690:	b2e4      	uxtb	r4, r4
 800f692:	4004      	ands	r4, r0
 800f694:	b94b      	cbnz	r3, 800f6aa <uxr_serialize_ReadSpecification+0x3e>
 800f696:	7a31      	ldrb	r1, [r6, #8]
 800f698:	4638      	mov	r0, r7
 800f69a:	f7fc fd2d 	bl	800c0f8 <ucdr_serialize_bool>
 800f69e:	7a33      	ldrb	r3, [r6, #8]
 800f6a0:	4004      	ands	r4, r0
 800f6a2:	b943      	cbnz	r3, 800f6b6 <uxr_serialize_ReadSpecification+0x4a>
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6aa:	6871      	ldr	r1, [r6, #4]
 800f6ac:	4638      	mov	r0, r7
 800f6ae:	f004 ff07 	bl	80144c0 <ucdr_serialize_string>
 800f6b2:	4004      	ands	r4, r0
 800f6b4:	e7ef      	b.n	800f696 <uxr_serialize_ReadSpecification+0x2a>
 800f6b6:	8971      	ldrh	r1, [r6, #10]
 800f6b8:	4638      	mov	r0, r7
 800f6ba:	f7fc fd77 	bl	800c1ac <ucdr_serialize_uint16_t>
 800f6be:	89b1      	ldrh	r1, [r6, #12]
 800f6c0:	4605      	mov	r5, r0
 800f6c2:	4638      	mov	r0, r7
 800f6c4:	f7fc fd72 	bl	800c1ac <ucdr_serialize_uint16_t>
 800f6c8:	89f1      	ldrh	r1, [r6, #14]
 800f6ca:	4005      	ands	r5, r0
 800f6cc:	4638      	mov	r0, r7
 800f6ce:	f7fc fd6d 	bl	800c1ac <ucdr_serialize_uint16_t>
 800f6d2:	8a31      	ldrh	r1, [r6, #16]
 800f6d4:	4680      	mov	r8, r0
 800f6d6:	4638      	mov	r0, r7
 800f6d8:	f7fc fd68 	bl	800c1ac <ucdr_serialize_uint16_t>
 800f6dc:	b2ed      	uxtb	r5, r5
 800f6de:	4025      	ands	r5, r4
 800f6e0:	ea08 0505 	and.w	r5, r8, r5
 800f6e4:	ea00 0405 	and.w	r4, r0, r5
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ee:	bf00      	nop

0800f6f0 <uxr_serialize_CREATE_CLIENT_Payload>:
 800f6f0:	f7ff bb02 	b.w	800ecf8 <uxr_serialize_CLIENT_Representation>

0800f6f4 <uxr_serialize_CREATE_Payload>:
 800f6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6f6:	2202      	movs	r2, #2
 800f6f8:	4607      	mov	r7, r0
 800f6fa:	460e      	mov	r6, r1
 800f6fc:	f004 fdc0 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f700:	2202      	movs	r2, #2
 800f702:	18b1      	adds	r1, r6, r2
 800f704:	4605      	mov	r5, r0
 800f706:	4638      	mov	r0, r7
 800f708:	f004 fdba 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f70c:	7931      	ldrb	r1, [r6, #4]
 800f70e:	4604      	mov	r4, r0
 800f710:	4638      	mov	r0, r7
 800f712:	f7fc fd1f 	bl	800c154 <ucdr_serialize_uint8_t>
 800f716:	b170      	cbz	r0, 800f736 <uxr_serialize_CREATE_Payload+0x42>
 800f718:	7933      	ldrb	r3, [r6, #4]
 800f71a:	402c      	ands	r4, r5
 800f71c:	3b01      	subs	r3, #1
 800f71e:	b2e4      	uxtb	r4, r4
 800f720:	2b0d      	cmp	r3, #13
 800f722:	d809      	bhi.n	800f738 <uxr_serialize_CREATE_Payload+0x44>
 800f724:	e8df f003 	tbb	[pc, r3]
 800f728:	23230a4c 	.word	0x23230a4c
 800f72c:	0a0a0a0a 	.word	0x0a0a0a0a
 800f730:	12121208 	.word	0x12121208
 800f734:	3e45      	.short	0x3e45
 800f736:	2400      	movs	r4, #0
 800f738:	4620      	mov	r0, r4
 800f73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f73c:	f106 0108 	add.w	r1, r6, #8
 800f740:	4638      	mov	r0, r7
 800f742:	f7ff fbdf 	bl	800ef04 <uxr_serialize_DATAWRITER_Representation>
 800f746:	4004      	ands	r4, r0
 800f748:	4620      	mov	r0, r4
 800f74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f74c:	7a31      	ldrb	r1, [r6, #8]
 800f74e:	4638      	mov	r0, r7
 800f750:	f7fc fd00 	bl	800c154 <ucdr_serialize_uint8_t>
 800f754:	2800      	cmp	r0, #0
 800f756:	d0ee      	beq.n	800f736 <uxr_serialize_CREATE_Payload+0x42>
 800f758:	7a33      	ldrb	r3, [r6, #8]
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d001      	beq.n	800f762 <uxr_serialize_CREATE_Payload+0x6e>
 800f75e:	2b02      	cmp	r3, #2
 800f760:	d1ea      	bne.n	800f738 <uxr_serialize_CREATE_Payload+0x44>
 800f762:	68f1      	ldr	r1, [r6, #12]
 800f764:	4638      	mov	r0, r7
 800f766:	f004 feab 	bl	80144c0 <ucdr_serialize_string>
 800f76a:	4004      	ands	r4, r0
 800f76c:	e7e4      	b.n	800f738 <uxr_serialize_CREATE_Payload+0x44>
 800f76e:	7a31      	ldrb	r1, [r6, #8]
 800f770:	4638      	mov	r0, r7
 800f772:	f7fc fcef 	bl	800c154 <ucdr_serialize_uint8_t>
 800f776:	4605      	mov	r5, r0
 800f778:	b158      	cbz	r0, 800f792 <uxr_serialize_CREATE_Payload+0x9e>
 800f77a:	7a33      	ldrb	r3, [r6, #8]
 800f77c:	2b02      	cmp	r3, #2
 800f77e:	d034      	beq.n	800f7ea <uxr_serialize_CREATE_Payload+0xf6>
 800f780:	2b03      	cmp	r3, #3
 800f782:	d106      	bne.n	800f792 <uxr_serialize_CREATE_Payload+0x9e>
 800f784:	68f2      	ldr	r2, [r6, #12]
 800f786:	f106 0110 	add.w	r1, r6, #16
 800f78a:	4638      	mov	r0, r7
 800f78c:	f004 fe6c 	bl	8014468 <ucdr_serialize_sequence_uint8_t>
 800f790:	4605      	mov	r5, r0
 800f792:	2202      	movs	r2, #2
 800f794:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800f798:	4638      	mov	r0, r7
 800f79a:	f004 fd71 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f79e:	4028      	ands	r0, r5
 800f7a0:	4004      	ands	r4, r0
 800f7a2:	e7c9      	b.n	800f738 <uxr_serialize_CREATE_Payload+0x44>
 800f7a4:	f106 0108 	add.w	r1, r6, #8
 800f7a8:	4638      	mov	r0, r7
 800f7aa:	f7ff faa5 	bl	800ecf8 <uxr_serialize_CLIENT_Representation>
 800f7ae:	4004      	ands	r4, r0
 800f7b0:	e7c2      	b.n	800f738 <uxr_serialize_CREATE_Payload+0x44>
 800f7b2:	f106 0108 	add.w	r1, r6, #8
 800f7b6:	4638      	mov	r0, r7
 800f7b8:	f7ff fb5a 	bl	800ee70 <uxr_serialize_AGENT_Representation>
 800f7bc:	4004      	ands	r4, r0
 800f7be:	e7bb      	b.n	800f738 <uxr_serialize_CREATE_Payload+0x44>
 800f7c0:	7a31      	ldrb	r1, [r6, #8]
 800f7c2:	4638      	mov	r0, r7
 800f7c4:	f7fc fcc6 	bl	800c154 <ucdr_serialize_uint8_t>
 800f7c8:	4605      	mov	r5, r0
 800f7ca:	b130      	cbz	r0, 800f7da <uxr_serialize_CREATE_Payload+0xe6>
 800f7cc:	7a33      	ldrb	r3, [r6, #8]
 800f7ce:	2b02      	cmp	r3, #2
 800f7d0:	d011      	beq.n	800f7f6 <uxr_serialize_CREATE_Payload+0x102>
 800f7d2:	2b03      	cmp	r3, #3
 800f7d4:	d015      	beq.n	800f802 <uxr_serialize_CREATE_Payload+0x10e>
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	d00d      	beq.n	800f7f6 <uxr_serialize_CREATE_Payload+0x102>
 800f7da:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800f7de:	4638      	mov	r0, r7
 800f7e0:	f7fd f9f4 	bl	800cbcc <ucdr_serialize_int16_t>
 800f7e4:	4028      	ands	r0, r5
 800f7e6:	4004      	ands	r4, r0
 800f7e8:	e7a6      	b.n	800f738 <uxr_serialize_CREATE_Payload+0x44>
 800f7ea:	68f1      	ldr	r1, [r6, #12]
 800f7ec:	4638      	mov	r0, r7
 800f7ee:	f004 fe67 	bl	80144c0 <ucdr_serialize_string>
 800f7f2:	4605      	mov	r5, r0
 800f7f4:	e7cd      	b.n	800f792 <uxr_serialize_CREATE_Payload+0x9e>
 800f7f6:	68f1      	ldr	r1, [r6, #12]
 800f7f8:	4638      	mov	r0, r7
 800f7fa:	f004 fe61 	bl	80144c0 <ucdr_serialize_string>
 800f7fe:	4605      	mov	r5, r0
 800f800:	e7eb      	b.n	800f7da <uxr_serialize_CREATE_Payload+0xe6>
 800f802:	68f2      	ldr	r2, [r6, #12]
 800f804:	f106 0110 	add.w	r1, r6, #16
 800f808:	4638      	mov	r0, r7
 800f80a:	f004 fe2d 	bl	8014468 <ucdr_serialize_sequence_uint8_t>
 800f80e:	4605      	mov	r5, r0
 800f810:	e7e3      	b.n	800f7da <uxr_serialize_CREATE_Payload+0xe6>
 800f812:	bf00      	nop

0800f814 <uxr_deserialize_GET_INFO_Payload>:
 800f814:	b570      	push	{r4, r5, r6, lr}
 800f816:	2202      	movs	r2, #2
 800f818:	4605      	mov	r5, r0
 800f81a:	460e      	mov	r6, r1
 800f81c:	f004 fd94 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f820:	2202      	movs	r2, #2
 800f822:	18b1      	adds	r1, r6, r2
 800f824:	4604      	mov	r4, r0
 800f826:	4628      	mov	r0, r5
 800f828:	f004 fd8e 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f82c:	1d31      	adds	r1, r6, #4
 800f82e:	4004      	ands	r4, r0
 800f830:	4628      	mov	r0, r5
 800f832:	f7fc ffd5 	bl	800c7e0 <ucdr_deserialize_uint32_t>
 800f836:	b2e4      	uxtb	r4, r4
 800f838:	4020      	ands	r0, r4
 800f83a:	bd70      	pop	{r4, r5, r6, pc}

0800f83c <uxr_serialize_DELETE_Payload>:
 800f83c:	b570      	push	{r4, r5, r6, lr}
 800f83e:	2202      	movs	r2, #2
 800f840:	4605      	mov	r5, r0
 800f842:	460e      	mov	r6, r1
 800f844:	f004 fd1c 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f848:	2202      	movs	r2, #2
 800f84a:	4604      	mov	r4, r0
 800f84c:	18b1      	adds	r1, r6, r2
 800f84e:	4628      	mov	r0, r5
 800f850:	f004 fd16 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f854:	4020      	ands	r0, r4
 800f856:	b2c0      	uxtb	r0, r0
 800f858:	bd70      	pop	{r4, r5, r6, pc}
 800f85a:	bf00      	nop

0800f85c <uxr_deserialize_STATUS_AGENT_Payload>:
 800f85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f860:	4605      	mov	r5, r0
 800f862:	460e      	mov	r6, r1
 800f864:	f7fc fc8c 	bl	800c180 <ucdr_deserialize_uint8_t>
 800f868:	1c71      	adds	r1, r6, #1
 800f86a:	4604      	mov	r4, r0
 800f86c:	4628      	mov	r0, r5
 800f86e:	f7fc fc87 	bl	800c180 <ucdr_deserialize_uint8_t>
 800f872:	2204      	movs	r2, #4
 800f874:	18b1      	adds	r1, r6, r2
 800f876:	4680      	mov	r8, r0
 800f878:	4628      	mov	r0, r5
 800f87a:	f004 fd65 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f87e:	f106 0108 	add.w	r1, r6, #8
 800f882:	4607      	mov	r7, r0
 800f884:	2202      	movs	r2, #2
 800f886:	4628      	mov	r0, r5
 800f888:	f004 fd5e 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f88c:	ea04 0308 	and.w	r3, r4, r8
 800f890:	b2db      	uxtb	r3, r3
 800f892:	ea03 0407 	and.w	r4, r3, r7
 800f896:	2202      	movs	r2, #2
 800f898:	4607      	mov	r7, r0
 800f89a:	f106 010a 	add.w	r1, r6, #10
 800f89e:	4628      	mov	r0, r5
 800f8a0:	f004 fd52 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f8a4:	f106 010c 	add.w	r1, r6, #12
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	461d      	mov	r5, r3
 800f8ae:	f7fc fc39 	bl	800c124 <ucdr_deserialize_bool>
 800f8b2:	403c      	ands	r4, r7
 800f8b4:	4025      	ands	r5, r4
 800f8b6:	4028      	ands	r0, r5
 800f8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f8bc <uxr_deserialize_STATUS_Payload>:
 800f8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c0:	2202      	movs	r2, #2
 800f8c2:	4606      	mov	r6, r0
 800f8c4:	460f      	mov	r7, r1
 800f8c6:	f004 fd3f 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f8ca:	2202      	movs	r2, #2
 800f8cc:	18b9      	adds	r1, r7, r2
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f004 fd39 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800f8d6:	1d39      	adds	r1, r7, #4
 800f8d8:	4680      	mov	r8, r0
 800f8da:	4630      	mov	r0, r6
 800f8dc:	f7fc fc50 	bl	800c180 <ucdr_deserialize_uint8_t>
 800f8e0:	1d79      	adds	r1, r7, #5
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	f7fc fc4b 	bl	800c180 <ucdr_deserialize_uint8_t>
 800f8ea:	ea05 0508 	and.w	r5, r5, r8
 800f8ee:	402c      	ands	r4, r5
 800f8f0:	4020      	ands	r0, r4
 800f8f2:	b2c0      	uxtb	r0, r0
 800f8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f8f8 <uxr_serialize_INFO_Payload>:
 800f8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8fc:	2202      	movs	r2, #2
 800f8fe:	460c      	mov	r4, r1
 800f900:	4605      	mov	r5, r0
 800f902:	f004 fcbd 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f906:	2202      	movs	r2, #2
 800f908:	18a1      	adds	r1, r4, r2
 800f90a:	4680      	mov	r8, r0
 800f90c:	4628      	mov	r0, r5
 800f90e:	f004 fcb7 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f912:	7921      	ldrb	r1, [r4, #4]
 800f914:	4607      	mov	r7, r0
 800f916:	4628      	mov	r0, r5
 800f918:	f7fc fc1c 	bl	800c154 <ucdr_serialize_uint8_t>
 800f91c:	7961      	ldrb	r1, [r4, #5]
 800f91e:	4606      	mov	r6, r0
 800f920:	4628      	mov	r0, r5
 800f922:	f7fc fc17 	bl	800c154 <ucdr_serialize_uint8_t>
 800f926:	ea08 0807 	and.w	r8, r8, r7
 800f92a:	ea06 0608 	and.w	r6, r6, r8
 800f92e:	4006      	ands	r6, r0
 800f930:	7a21      	ldrb	r1, [r4, #8]
 800f932:	4628      	mov	r0, r5
 800f934:	f7fc fbe0 	bl	800c0f8 <ucdr_serialize_bool>
 800f938:	7a23      	ldrb	r3, [r4, #8]
 800f93a:	b2f7      	uxtb	r7, r6
 800f93c:	4606      	mov	r6, r0
 800f93e:	b96b      	cbnz	r3, 800f95c <uxr_serialize_INFO_Payload+0x64>
 800f940:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800f944:	4628      	mov	r0, r5
 800f946:	f7fc fbd7 	bl	800c0f8 <ucdr_serialize_bool>
 800f94a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800f94e:	4030      	ands	r0, r6
 800f950:	b2c6      	uxtb	r6, r0
 800f952:	b983      	cbnz	r3, 800f976 <uxr_serialize_INFO_Payload+0x7e>
 800f954:	ea06 0007 	and.w	r0, r6, r7
 800f958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f95c:	7b21      	ldrb	r1, [r4, #12]
 800f95e:	4628      	mov	r0, r5
 800f960:	f7fc fbf8 	bl	800c154 <ucdr_serialize_uint8_t>
 800f964:	b188      	cbz	r0, 800f98a <uxr_serialize_INFO_Payload+0x92>
 800f966:	f104 010c 	add.w	r1, r4, #12
 800f96a:	4628      	mov	r0, r5
 800f96c:	f7ff faf2 	bl	800ef54 <uxr_serialize_ObjectVariant.part.0>
 800f970:	4030      	ands	r0, r6
 800f972:	b2c6      	uxtb	r6, r0
 800f974:	e7e4      	b.n	800f940 <uxr_serialize_INFO_Payload+0x48>
 800f976:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800f97a:	4628      	mov	r0, r5
 800f97c:	f7ff fdb2 	bl	800f4e4 <uxr_serialize_ActivityInfoVariant>
 800f980:	4006      	ands	r6, r0
 800f982:	ea06 0007 	and.w	r0, r6, r7
 800f986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f98a:	4606      	mov	r6, r0
 800f98c:	e7d8      	b.n	800f940 <uxr_serialize_INFO_Payload+0x48>
 800f98e:	bf00      	nop

0800f990 <uxr_serialize_READ_DATA_Payload>:
 800f990:	b570      	push	{r4, r5, r6, lr}
 800f992:	2202      	movs	r2, #2
 800f994:	4605      	mov	r5, r0
 800f996:	460e      	mov	r6, r1
 800f998:	f004 fc72 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f99c:	2202      	movs	r2, #2
 800f99e:	18b1      	adds	r1, r6, r2
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	4628      	mov	r0, r5
 800f9a4:	f004 fc6c 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f9a8:	1d31      	adds	r1, r6, #4
 800f9aa:	4004      	ands	r4, r0
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	f7ff fe5d 	bl	800f66c <uxr_serialize_ReadSpecification>
 800f9b2:	b2e4      	uxtb	r4, r4
 800f9b4:	4020      	ands	r0, r4
 800f9b6:	bd70      	pop	{r4, r5, r6, pc}

0800f9b8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f9b8:	b570      	push	{r4, r5, r6, lr}
 800f9ba:	2202      	movs	r2, #2
 800f9bc:	4605      	mov	r5, r0
 800f9be:	460e      	mov	r6, r1
 800f9c0:	f004 fc5e 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f9c4:	2202      	movs	r2, #2
 800f9c6:	4604      	mov	r4, r0
 800f9c8:	18b1      	adds	r1, r6, r2
 800f9ca:	4628      	mov	r0, r5
 800f9cc:	f004 fc58 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f9d0:	4020      	ands	r0, r4
 800f9d2:	b2c0      	uxtb	r0, r0
 800f9d4:	bd70      	pop	{r4, r5, r6, pc}
 800f9d6:	bf00      	nop

0800f9d8 <uxr_serialize_ACKNACK_Payload>:
 800f9d8:	b570      	push	{r4, r5, r6, lr}
 800f9da:	460c      	mov	r4, r1
 800f9dc:	460e      	mov	r6, r1
 800f9de:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f9e2:	4605      	mov	r5, r0
 800f9e4:	f7fc fbe2 	bl	800c1ac <ucdr_serialize_uint16_t>
 800f9e8:	2202      	movs	r2, #2
 800f9ea:	4621      	mov	r1, r4
 800f9ec:	4604      	mov	r4, r0
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	f004 fc46 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800f9f4:	7931      	ldrb	r1, [r6, #4]
 800f9f6:	4004      	ands	r4, r0
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	f7fc fbab 	bl	800c154 <ucdr_serialize_uint8_t>
 800f9fe:	b2e4      	uxtb	r4, r4
 800fa00:	4020      	ands	r0, r4
 800fa02:	bd70      	pop	{r4, r5, r6, pc}

0800fa04 <uxr_deserialize_ACKNACK_Payload>:
 800fa04:	b570      	push	{r4, r5, r6, lr}
 800fa06:	4605      	mov	r5, r0
 800fa08:	460e      	mov	r6, r1
 800fa0a:	f7fc fccf 	bl	800c3ac <ucdr_deserialize_uint16_t>
 800fa0e:	2202      	movs	r2, #2
 800fa10:	18b1      	adds	r1, r6, r2
 800fa12:	4604      	mov	r4, r0
 800fa14:	4628      	mov	r0, r5
 800fa16:	f004 fc97 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800fa1a:	1d31      	adds	r1, r6, #4
 800fa1c:	4004      	ands	r4, r0
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f7fc fbae 	bl	800c180 <ucdr_deserialize_uint8_t>
 800fa24:	b2e4      	uxtb	r4, r4
 800fa26:	4020      	ands	r0, r4
 800fa28:	bd70      	pop	{r4, r5, r6, pc}
 800fa2a:	bf00      	nop

0800fa2c <uxr_serialize_HEARTBEAT_Payload>:
 800fa2c:	b570      	push	{r4, r5, r6, lr}
 800fa2e:	460d      	mov	r5, r1
 800fa30:	8809      	ldrh	r1, [r1, #0]
 800fa32:	4606      	mov	r6, r0
 800fa34:	f7fc fbba 	bl	800c1ac <ucdr_serialize_uint16_t>
 800fa38:	8869      	ldrh	r1, [r5, #2]
 800fa3a:	4604      	mov	r4, r0
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	f7fc fbb5 	bl	800c1ac <ucdr_serialize_uint16_t>
 800fa42:	7929      	ldrb	r1, [r5, #4]
 800fa44:	4004      	ands	r4, r0
 800fa46:	4630      	mov	r0, r6
 800fa48:	f7fc fb84 	bl	800c154 <ucdr_serialize_uint8_t>
 800fa4c:	b2e4      	uxtb	r4, r4
 800fa4e:	4020      	ands	r0, r4
 800fa50:	bd70      	pop	{r4, r5, r6, pc}
 800fa52:	bf00      	nop

0800fa54 <uxr_deserialize_HEARTBEAT_Payload>:
 800fa54:	b570      	push	{r4, r5, r6, lr}
 800fa56:	4605      	mov	r5, r0
 800fa58:	460e      	mov	r6, r1
 800fa5a:	f7fc fca7 	bl	800c3ac <ucdr_deserialize_uint16_t>
 800fa5e:	1cb1      	adds	r1, r6, #2
 800fa60:	4604      	mov	r4, r0
 800fa62:	4628      	mov	r0, r5
 800fa64:	f7fc fca2 	bl	800c3ac <ucdr_deserialize_uint16_t>
 800fa68:	1d31      	adds	r1, r6, #4
 800fa6a:	4004      	ands	r4, r0
 800fa6c:	4628      	mov	r0, r5
 800fa6e:	f7fc fb87 	bl	800c180 <ucdr_deserialize_uint8_t>
 800fa72:	b2e4      	uxtb	r4, r4
 800fa74:	4020      	ands	r0, r4
 800fa76:	bd70      	pop	{r4, r5, r6, pc}

0800fa78 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800fa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7c:	4605      	mov	r5, r0
 800fa7e:	460e      	mov	r6, r1
 800fa80:	f7fd fa30 	bl	800cee4 <ucdr_deserialize_int32_t>
 800fa84:	1d31      	adds	r1, r6, #4
 800fa86:	4607      	mov	r7, r0
 800fa88:	4628      	mov	r0, r5
 800fa8a:	f7fc fea9 	bl	800c7e0 <ucdr_deserialize_uint32_t>
 800fa8e:	f106 0108 	add.w	r1, r6, #8
 800fa92:	4680      	mov	r8, r0
 800fa94:	4628      	mov	r0, r5
 800fa96:	f7fd fa25 	bl	800cee4 <ucdr_deserialize_int32_t>
 800fa9a:	f106 010c 	add.w	r1, r6, #12
 800fa9e:	4604      	mov	r4, r0
 800faa0:	4628      	mov	r0, r5
 800faa2:	f7fc fe9d 	bl	800c7e0 <ucdr_deserialize_uint32_t>
 800faa6:	ea07 0708 	and.w	r7, r7, r8
 800faaa:	403c      	ands	r4, r7
 800faac:	f106 0110 	add.w	r1, r6, #16
 800fab0:	4004      	ands	r4, r0
 800fab2:	4628      	mov	r0, r5
 800fab4:	f7fd fa16 	bl	800cee4 <ucdr_deserialize_int32_t>
 800fab8:	f106 0114 	add.w	r1, r6, #20
 800fabc:	4607      	mov	r7, r0
 800fabe:	4628      	mov	r0, r5
 800fac0:	f7fc fe8e 	bl	800c7e0 <ucdr_deserialize_uint32_t>
 800fac4:	b2e4      	uxtb	r4, r4
 800fac6:	403c      	ands	r4, r7
 800fac8:	4020      	ands	r0, r4
 800faca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800face:	bf00      	nop

0800fad0 <uxr_serialize_SampleIdentity>:
 800fad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fad4:	220c      	movs	r2, #12
 800fad6:	4604      	mov	r4, r0
 800fad8:	460d      	mov	r5, r1
 800fada:	f004 fbd1 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800fade:	2203      	movs	r2, #3
 800fae0:	f105 010c 	add.w	r1, r5, #12
 800fae4:	4607      	mov	r7, r0
 800fae6:	4620      	mov	r0, r4
 800fae8:	f004 fbca 	bl	8014280 <ucdr_serialize_array_uint8_t>
 800faec:	7be9      	ldrb	r1, [r5, #15]
 800faee:	4680      	mov	r8, r0
 800faf0:	4620      	mov	r0, r4
 800faf2:	f7fc fb2f 	bl	800c154 <ucdr_serialize_uint8_t>
 800faf6:	6929      	ldr	r1, [r5, #16]
 800faf8:	4606      	mov	r6, r0
 800fafa:	4620      	mov	r0, r4
 800fafc:	f7fd f95a 	bl	800cdb4 <ucdr_serialize_int32_t>
 800fb00:	6969      	ldr	r1, [r5, #20]
 800fb02:	4603      	mov	r3, r0
 800fb04:	4620      	mov	r0, r4
 800fb06:	ea07 0708 	and.w	r7, r7, r8
 800fb0a:	461c      	mov	r4, r3
 800fb0c:	f7fc fd38 	bl	800c580 <ucdr_serialize_uint32_t>
 800fb10:	403e      	ands	r6, r7
 800fb12:	4034      	ands	r4, r6
 800fb14:	4020      	ands	r0, r4
 800fb16:	b2c0      	uxtb	r0, r0
 800fb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fb1c <uxr_deserialize_SampleIdentity>:
 800fb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb20:	220c      	movs	r2, #12
 800fb22:	4604      	mov	r4, r0
 800fb24:	460d      	mov	r5, r1
 800fb26:	f004 fc0f 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800fb2a:	2203      	movs	r2, #3
 800fb2c:	f105 010c 	add.w	r1, r5, #12
 800fb30:	4607      	mov	r7, r0
 800fb32:	4620      	mov	r0, r4
 800fb34:	f004 fc08 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 800fb38:	f105 010f 	add.w	r1, r5, #15
 800fb3c:	4680      	mov	r8, r0
 800fb3e:	4620      	mov	r0, r4
 800fb40:	f7fc fb1e 	bl	800c180 <ucdr_deserialize_uint8_t>
 800fb44:	f105 0110 	add.w	r1, r5, #16
 800fb48:	4606      	mov	r6, r0
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	f7fd f9ca 	bl	800cee4 <ucdr_deserialize_int32_t>
 800fb50:	f105 0114 	add.w	r1, r5, #20
 800fb54:	4603      	mov	r3, r0
 800fb56:	4620      	mov	r0, r4
 800fb58:	ea07 0708 	and.w	r7, r7, r8
 800fb5c:	461c      	mov	r4, r3
 800fb5e:	f7fc fe3f 	bl	800c7e0 <ucdr_deserialize_uint32_t>
 800fb62:	403e      	ands	r6, r7
 800fb64:	4034      	ands	r4, r6
 800fb66:	4020      	ands	r0, r4
 800fb68:	b2c0      	uxtb	r0, r0
 800fb6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb6e:	bf00      	nop

0800fb70 <rcl_client_get_rmw_handle>:
 800fb70:	b118      	cbz	r0, 800fb7a <rcl_client_get_rmw_handle+0xa>
 800fb72:	6800      	ldr	r0, [r0, #0]
 800fb74:	b108      	cbz	r0, 800fb7a <rcl_client_get_rmw_handle+0xa>
 800fb76:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fb7a:	4770      	bx	lr

0800fb7c <rcl_send_request>:
 800fb7c:	b570      	push	{r4, r5, r6, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	b1e8      	cbz	r0, 800fbbe <rcl_send_request+0x42>
 800fb82:	4604      	mov	r4, r0
 800fb84:	6800      	ldr	r0, [r0, #0]
 800fb86:	b1d0      	cbz	r0, 800fbbe <rcl_send_request+0x42>
 800fb88:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800fb8c:	b1bb      	cbz	r3, 800fbbe <rcl_send_request+0x42>
 800fb8e:	460e      	mov	r6, r1
 800fb90:	b1d1      	cbz	r1, 800fbc8 <rcl_send_request+0x4c>
 800fb92:	4615      	mov	r5, r2
 800fb94:	b1c2      	cbz	r2, 800fbc8 <rcl_send_request+0x4c>
 800fb96:	2105      	movs	r1, #5
 800fb98:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800fb9c:	f002 fd24 	bl	80125e8 <__atomic_load_8>
 800fba0:	6823      	ldr	r3, [r4, #0]
 800fba2:	e9c5 0100 	strd	r0, r1, [r5]
 800fba6:	462a      	mov	r2, r5
 800fba8:	4631      	mov	r1, r6
 800fbaa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800fbae:	f003 fec9 	bl	8013944 <rmw_send_request>
 800fbb2:	4606      	mov	r6, r0
 800fbb4:	b160      	cbz	r0, 800fbd0 <rcl_send_request+0x54>
 800fbb6:	2601      	movs	r6, #1
 800fbb8:	4630      	mov	r0, r6
 800fbba:	b002      	add	sp, #8
 800fbbc:	bd70      	pop	{r4, r5, r6, pc}
 800fbbe:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800fbc2:	4630      	mov	r0, r6
 800fbc4:	b002      	add	sp, #8
 800fbc6:	bd70      	pop	{r4, r5, r6, pc}
 800fbc8:	260b      	movs	r6, #11
 800fbca:	4630      	mov	r0, r6
 800fbcc:	b002      	add	sp, #8
 800fbce:	bd70      	pop	{r4, r5, r6, pc}
 800fbd0:	6820      	ldr	r0, [r4, #0]
 800fbd2:	2105      	movs	r1, #5
 800fbd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fbd8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800fbdc:	9100      	str	r1, [sp, #0]
 800fbde:	f002 fd6f 	bl	80126c0 <__atomic_exchange_8>
 800fbe2:	4630      	mov	r0, r6
 800fbe4:	b002      	add	sp, #8
 800fbe6:	bd70      	pop	{r4, r5, r6, pc}

0800fbe8 <rcl_take_response>:
 800fbe8:	b570      	push	{r4, r5, r6, lr}
 800fbea:	468e      	mov	lr, r1
 800fbec:	460c      	mov	r4, r1
 800fbee:	4616      	mov	r6, r2
 800fbf0:	4605      	mov	r5, r0
 800fbf2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fbf6:	b08c      	sub	sp, #48	@ 0x30
 800fbf8:	f10d 0c18 	add.w	ip, sp, #24
 800fbfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc00:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fc04:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fc08:	b35d      	cbz	r5, 800fc62 <rcl_take_response+0x7a>
 800fc0a:	682b      	ldr	r3, [r5, #0]
 800fc0c:	b34b      	cbz	r3, 800fc62 <rcl_take_response+0x7a>
 800fc0e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800fc12:	b330      	cbz	r0, 800fc62 <rcl_take_response+0x7a>
 800fc14:	b346      	cbz	r6, 800fc68 <rcl_take_response+0x80>
 800fc16:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fc70 <rcl_take_response+0x88>
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	f88d 3007 	strb.w	r3, [sp, #7]
 800fc20:	4632      	mov	r2, r6
 800fc22:	f10d 0307 	add.w	r3, sp, #7
 800fc26:	a902      	add	r1, sp, #8
 800fc28:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fc2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fc30:	f003 ff90 	bl	8013b54 <rmw_take_response>
 800fc34:	4605      	mov	r5, r0
 800fc36:	b9c8      	cbnz	r0, 800fc6c <rcl_take_response+0x84>
 800fc38:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fc3c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800fc40:	2a00      	cmp	r2, #0
 800fc42:	bf08      	it	eq
 800fc44:	461d      	moveq	r5, r3
 800fc46:	f10d 0e18 	add.w	lr, sp, #24
 800fc4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fc4e:	46a4      	mov	ip, r4
 800fc50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc54:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fc58:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fc5c:	4628      	mov	r0, r5
 800fc5e:	b00c      	add	sp, #48	@ 0x30
 800fc60:	bd70      	pop	{r4, r5, r6, pc}
 800fc62:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800fc66:	e7ee      	b.n	800fc46 <rcl_take_response+0x5e>
 800fc68:	250b      	movs	r5, #11
 800fc6a:	e7ec      	b.n	800fc46 <rcl_take_response+0x5e>
 800fc6c:	2501      	movs	r5, #1
 800fc6e:	e7ea      	b.n	800fc46 <rcl_take_response+0x5e>
	...

0800fc78 <rcl_client_is_valid>:
 800fc78:	b130      	cbz	r0, 800fc88 <rcl_client_is_valid+0x10>
 800fc7a:	6800      	ldr	r0, [r0, #0]
 800fc7c:	b120      	cbz	r0, 800fc88 <rcl_client_is_valid+0x10>
 800fc7e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fc82:	3800      	subs	r0, #0
 800fc84:	bf18      	it	ne
 800fc86:	2001      	movne	r0, #1
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop

0800fc8c <rcl_convert_rmw_ret_to_rcl_ret>:
 800fc8c:	280b      	cmp	r0, #11
 800fc8e:	dc0d      	bgt.n	800fcac <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800fc90:	2800      	cmp	r0, #0
 800fc92:	db09      	blt.n	800fca8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fc94:	280b      	cmp	r0, #11
 800fc96:	d807      	bhi.n	800fca8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fc98:	e8df f000 	tbb	[pc, r0]
 800fc9c:	07060607 	.word	0x07060607
 800fca0:	06060606 	.word	0x06060606
 800fca4:	07070606 	.word	0x07070606
 800fca8:	2001      	movs	r0, #1
 800fcaa:	4770      	bx	lr
 800fcac:	28cb      	cmp	r0, #203	@ 0xcb
 800fcae:	bf18      	it	ne
 800fcb0:	2001      	movne	r0, #1
 800fcb2:	4770      	bx	lr

0800fcb4 <rcl_get_zero_initialized_context>:
 800fcb4:	4a03      	ldr	r2, [pc, #12]	@ (800fcc4 <rcl_get_zero_initialized_context+0x10>)
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fcbc:	e883 0003 	stmia.w	r3, {r0, r1}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	4770      	bx	lr
 800fcc4:	08017ff0 	.word	0x08017ff0

0800fcc8 <rcl_context_is_valid>:
 800fcc8:	b118      	cbz	r0, 800fcd2 <rcl_context_is_valid+0xa>
 800fcca:	6840      	ldr	r0, [r0, #4]
 800fccc:	3800      	subs	r0, #0
 800fcce:	bf18      	it	ne
 800fcd0:	2001      	movne	r0, #1
 800fcd2:	4770      	bx	lr

0800fcd4 <__cleanup_context>:
 800fcd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcd8:	4606      	mov	r6, r0
 800fcda:	6800      	ldr	r0, [r0, #0]
 800fcdc:	2300      	movs	r3, #0
 800fcde:	6073      	str	r3, [r6, #4]
 800fce0:	2800      	cmp	r0, #0
 800fce2:	d049      	beq.n	800fd78 <__cleanup_context+0xa4>
 800fce4:	6947      	ldr	r7, [r0, #20]
 800fce6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800fcea:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800fcee:	b137      	cbz	r7, 800fcfe <__cleanup_context+0x2a>
 800fcf0:	3014      	adds	r0, #20
 800fcf2:	f000 f9a5 	bl	8010040 <rcl_init_options_fini>
 800fcf6:	4607      	mov	r7, r0
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	d144      	bne.n	800fd86 <__cleanup_context+0xb2>
 800fcfc:	6830      	ldr	r0, [r6, #0]
 800fcfe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fd00:	b143      	cbz	r3, 800fd14 <__cleanup_context+0x40>
 800fd02:	3028      	adds	r0, #40	@ 0x28
 800fd04:	f003 fc66 	bl	80135d4 <rmw_context_fini>
 800fd08:	b118      	cbz	r0, 800fd12 <__cleanup_context+0x3e>
 800fd0a:	2f00      	cmp	r7, #0
 800fd0c:	d03e      	beq.n	800fd8c <__cleanup_context+0xb8>
 800fd0e:	f7fb fbff 	bl	800b510 <rcutils_reset_error>
 800fd12:	6830      	ldr	r0, [r6, #0]
 800fd14:	6a03      	ldr	r3, [r0, #32]
 800fd16:	b1db      	cbz	r3, 800fd50 <__cleanup_context+0x7c>
 800fd18:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800fd1c:	2a01      	cmp	r2, #1
 800fd1e:	f17c 0100 	sbcs.w	r1, ip, #0
 800fd22:	db11      	blt.n	800fd48 <__cleanup_context+0x74>
 800fd24:	2400      	movs	r4, #0
 800fd26:	4625      	mov	r5, r4
 800fd28:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fd2c:	4649      	mov	r1, r9
 800fd2e:	b1b8      	cbz	r0, 800fd60 <__cleanup_context+0x8c>
 800fd30:	47c0      	blx	r8
 800fd32:	6833      	ldr	r3, [r6, #0]
 800fd34:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800fd38:	3401      	adds	r4, #1
 800fd3a:	f145 0500 	adc.w	r5, r5, #0
 800fd3e:	4294      	cmp	r4, r2
 800fd40:	eb75 010c 	sbcs.w	r1, r5, ip
 800fd44:	6a1b      	ldr	r3, [r3, #32]
 800fd46:	dbef      	blt.n	800fd28 <__cleanup_context+0x54>
 800fd48:	4618      	mov	r0, r3
 800fd4a:	4649      	mov	r1, r9
 800fd4c:	47c0      	blx	r8
 800fd4e:	6830      	ldr	r0, [r6, #0]
 800fd50:	4649      	mov	r1, r9
 800fd52:	47c0      	blx	r8
 800fd54:	2300      	movs	r3, #0
 800fd56:	e9c6 3300 	strd	r3, r3, [r6]
 800fd5a:	4638      	mov	r0, r7
 800fd5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd60:	3401      	adds	r4, #1
 800fd62:	f145 0500 	adc.w	r5, r5, #0
 800fd66:	4294      	cmp	r4, r2
 800fd68:	eb75 010c 	sbcs.w	r1, r5, ip
 800fd6c:	dbdc      	blt.n	800fd28 <__cleanup_context+0x54>
 800fd6e:	4618      	mov	r0, r3
 800fd70:	4649      	mov	r1, r9
 800fd72:	47c0      	blx	r8
 800fd74:	6830      	ldr	r0, [r6, #0]
 800fd76:	e7eb      	b.n	800fd50 <__cleanup_context+0x7c>
 800fd78:	4607      	mov	r7, r0
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	e9c6 3300 	strd	r3, r3, [r6]
 800fd80:	4638      	mov	r0, r7
 800fd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd86:	f7fb fbc3 	bl	800b510 <rcutils_reset_error>
 800fd8a:	e7b7      	b.n	800fcfc <__cleanup_context+0x28>
 800fd8c:	f7ff ff7e 	bl	800fc8c <rcl_convert_rmw_ret_to_rcl_ret>
 800fd90:	4607      	mov	r7, r0
 800fd92:	e7bc      	b.n	800fd0e <__cleanup_context+0x3a>

0800fd94 <rcl_init>:
 800fd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd98:	1e05      	subs	r5, r0, #0
 800fd9a:	b09c      	sub	sp, #112	@ 0x70
 800fd9c:	460e      	mov	r6, r1
 800fd9e:	4690      	mov	r8, r2
 800fda0:	461f      	mov	r7, r3
 800fda2:	f340 8099 	ble.w	800fed8 <rcl_init+0x144>
 800fda6:	2900      	cmp	r1, #0
 800fda8:	f000 8099 	beq.w	800fede <rcl_init+0x14a>
 800fdac:	f1a1 0e04 	sub.w	lr, r1, #4
 800fdb0:	f04f 0c00 	mov.w	ip, #0
 800fdb4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800fdb8:	f10c 0c01 	add.w	ip, ip, #1
 800fdbc:	2c00      	cmp	r4, #0
 800fdbe:	f000 808e 	beq.w	800fede <rcl_init+0x14a>
 800fdc2:	4565      	cmp	r5, ip
 800fdc4:	d1f6      	bne.n	800fdb4 <rcl_init+0x20>
 800fdc6:	f1b8 0f00 	cmp.w	r8, #0
 800fdca:	f000 8088 	beq.w	800fede <rcl_init+0x14a>
 800fdce:	f8d8 4000 	ldr.w	r4, [r8]
 800fdd2:	2c00      	cmp	r4, #0
 800fdd4:	f000 8083 	beq.w	800fede <rcl_init+0x14a>
 800fdd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fdda:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800fdde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fde2:	6823      	ldr	r3, [r4, #0]
 800fde4:	f8cc 3000 	str.w	r3, [ip]
 800fde8:	a817      	add	r0, sp, #92	@ 0x5c
 800fdea:	f7fb fb6d 	bl	800b4c8 <rcutils_allocator_is_valid>
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	d075      	beq.n	800fede <rcl_init+0x14a>
 800fdf2:	2f00      	cmp	r7, #0
 800fdf4:	d073      	beq.n	800fede <rcl_init+0x14a>
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d175      	bne.n	800fee8 <rcl_init+0x154>
 800fdfc:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800fe00:	2178      	movs	r1, #120	@ 0x78
 800fe02:	2001      	movs	r0, #1
 800fe04:	4798      	blx	r3
 800fe06:	4604      	mov	r4, r0
 800fe08:	6038      	str	r0, [r7, #0]
 800fe0a:	2800      	cmp	r0, #0
 800fe0c:	f000 80a0 	beq.w	800ff50 <rcl_init+0x1bc>
 800fe10:	a802      	add	r0, sp, #8
 800fe12:	f002 ff29 	bl	8012c68 <rmw_get_zero_initialized_context>
 800fe16:	a902      	add	r1, sp, #8
 800fe18:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800fe1c:	2250      	movs	r2, #80	@ 0x50
 800fe1e:	ac17      	add	r4, sp, #92	@ 0x5c
 800fe20:	f007 f851 	bl	8016ec6 <memcpy>
 800fe24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fe26:	f8d7 e000 	ldr.w	lr, [r7]
 800fe2a:	46f4      	mov	ip, lr
 800fe2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe30:	6823      	ldr	r3, [r4, #0]
 800fe32:	f8cc 3000 	str.w	r3, [ip]
 800fe36:	f10e 0114 	add.w	r1, lr, #20
 800fe3a:	4640      	mov	r0, r8
 800fe3c:	f000 f92a 	bl	8010094 <rcl_init_options_copy>
 800fe40:	4604      	mov	r4, r0
 800fe42:	2800      	cmp	r0, #0
 800fe44:	d144      	bne.n	800fed0 <rcl_init+0x13c>
 800fe46:	f8d7 9000 	ldr.w	r9, [r7]
 800fe4a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800fe4e:	f8c9 0020 	str.w	r0, [r9, #32]
 800fe52:	f8c9 5018 	str.w	r5, [r9, #24]
 800fe56:	f8c9 801c 	str.w	r8, [r9, #28]
 800fe5a:	2d00      	cmp	r5, #0
 800fe5c:	d04b      	beq.n	800fef6 <rcl_init+0x162>
 800fe5e:	2e00      	cmp	r6, #0
 800fe60:	d049      	beq.n	800fef6 <rcl_init+0x162>
 800fe62:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800fe66:	2104      	movs	r1, #4
 800fe68:	4628      	mov	r0, r5
 800fe6a:	4798      	blx	r3
 800fe6c:	f8c9 0020 	str.w	r0, [r9, #32]
 800fe70:	f8d7 9000 	ldr.w	r9, [r7]
 800fe74:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800fe78:	46ca      	mov	sl, r9
 800fe7a:	b343      	cbz	r3, 800fece <rcl_init+0x13a>
 800fe7c:	2d01      	cmp	r5, #1
 800fe7e:	f178 0300 	sbcs.w	r3, r8, #0
 800fe82:	db38      	blt.n	800fef6 <rcl_init+0x162>
 800fe84:	2400      	movs	r4, #0
 800fe86:	3e04      	subs	r6, #4
 800fe88:	46a1      	mov	r9, r4
 800fe8a:	e00b      	b.n	800fea4 <rcl_init+0x110>
 800fe8c:	6831      	ldr	r1, [r6, #0]
 800fe8e:	f007 f81a 	bl	8016ec6 <memcpy>
 800fe92:	3401      	adds	r4, #1
 800fe94:	f149 0900 	adc.w	r9, r9, #0
 800fe98:	45c8      	cmp	r8, r9
 800fe9a:	bf08      	it	eq
 800fe9c:	42a5      	cmpeq	r5, r4
 800fe9e:	d028      	beq.n	800fef2 <rcl_init+0x15e>
 800fea0:	f8d7 a000 	ldr.w	sl, [r7]
 800fea4:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800fea8:	f7f0 f99c 	bl	80001e4 <strlen>
 800feac:	1c42      	adds	r2, r0, #1
 800feae:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800feb0:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800feb2:	f8da a020 	ldr.w	sl, [sl, #32]
 800feb6:	9201      	str	r2, [sp, #4]
 800feb8:	4610      	mov	r0, r2
 800feba:	4798      	blx	r3
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800fec2:	6a1b      	ldr	r3, [r3, #32]
 800fec4:	9a01      	ldr	r2, [sp, #4]
 800fec6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800feca:	2800      	cmp	r0, #0
 800fecc:	d1de      	bne.n	800fe8c <rcl_init+0xf8>
 800fece:	240a      	movs	r4, #10
 800fed0:	4638      	mov	r0, r7
 800fed2:	f7ff feff 	bl	800fcd4 <__cleanup_context>
 800fed6:	e003      	b.n	800fee0 <rcl_init+0x14c>
 800fed8:	2900      	cmp	r1, #0
 800feda:	f43f af74 	beq.w	800fdc6 <rcl_init+0x32>
 800fede:	240b      	movs	r4, #11
 800fee0:	4620      	mov	r0, r4
 800fee2:	b01c      	add	sp, #112	@ 0x70
 800fee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fee8:	2464      	movs	r4, #100	@ 0x64
 800feea:	4620      	mov	r0, r4
 800feec:	b01c      	add	sp, #112	@ 0x70
 800feee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fef2:	f8d7 9000 	ldr.w	r9, [r7]
 800fef6:	491d      	ldr	r1, [pc, #116]	@ (800ff6c <rcl_init+0x1d8>)
 800fef8:	680b      	ldr	r3, [r1, #0]
 800fefa:	3301      	adds	r3, #1
 800fefc:	d023      	beq.n	800ff46 <rcl_init+0x1b2>
 800fefe:	600b      	str	r3, [r1, #0]
 800ff00:	461a      	mov	r2, r3
 800ff02:	2400      	movs	r4, #0
 800ff04:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ff08:	607b      	str	r3, [r7, #4]
 800ff0a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ff0c:	6182      	str	r2, [r0, #24]
 800ff0e:	3301      	adds	r3, #1
 800ff10:	61c4      	str	r4, [r0, #28]
 800ff12:	d01f      	beq.n	800ff54 <rcl_init+0x1c0>
 800ff14:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800ff18:	b94b      	cbnz	r3, 800ff2e <rcl_init+0x19a>
 800ff1a:	3030      	adds	r0, #48	@ 0x30
 800ff1c:	f000 f926 	bl	801016c <rcl_get_localhost_only>
 800ff20:	4604      	mov	r4, r0
 800ff22:	2800      	cmp	r0, #0
 800ff24:	d1d4      	bne.n	800fed0 <rcl_init+0x13c>
 800ff26:	f8d7 9000 	ldr.w	r9, [r7]
 800ff2a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ff2e:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 800ff32:	3018      	adds	r0, #24
 800ff34:	f003 fa18 	bl	8013368 <rmw_init>
 800ff38:	4604      	mov	r4, r0
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	d0d0      	beq.n	800fee0 <rcl_init+0x14c>
 800ff3e:	f7ff fea5 	bl	800fc8c <rcl_convert_rmw_ret_to_rcl_ret>
 800ff42:	4604      	mov	r4, r0
 800ff44:	e7c4      	b.n	800fed0 <rcl_init+0x13c>
 800ff46:	2201      	movs	r2, #1
 800ff48:	461c      	mov	r4, r3
 800ff4a:	600a      	str	r2, [r1, #0]
 800ff4c:	4613      	mov	r3, r2
 800ff4e:	e7d9      	b.n	800ff04 <rcl_init+0x170>
 800ff50:	240a      	movs	r4, #10
 800ff52:	e7c5      	b.n	800fee0 <rcl_init+0x14c>
 800ff54:	3024      	adds	r0, #36	@ 0x24
 800ff56:	f005 fe7d 	bl	8015c54 <rcl_get_default_domain_id>
 800ff5a:	4604      	mov	r4, r0
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	d1b7      	bne.n	800fed0 <rcl_init+0x13c>
 800ff60:	f8d7 9000 	ldr.w	r9, [r7]
 800ff64:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ff68:	e7d4      	b.n	800ff14 <rcl_init+0x180>
 800ff6a:	bf00      	nop
 800ff6c:	20015eb4 	.word	0x20015eb4

0800ff70 <rcl_get_zero_initialized_init_options>:
 800ff70:	2000      	movs	r0, #0
 800ff72:	4770      	bx	lr

0800ff74 <rcl_init_options_init>:
 800ff74:	b084      	sub	sp, #16
 800ff76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff78:	b097      	sub	sp, #92	@ 0x5c
 800ff7a:	ae1d      	add	r6, sp, #116	@ 0x74
 800ff7c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800ff80:	2800      	cmp	r0, #0
 800ff82:	d058      	beq.n	8010036 <rcl_init_options_init+0xc2>
 800ff84:	6803      	ldr	r3, [r0, #0]
 800ff86:	4605      	mov	r5, r0
 800ff88:	b133      	cbz	r3, 800ff98 <rcl_init_options_init+0x24>
 800ff8a:	2464      	movs	r4, #100	@ 0x64
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	b017      	add	sp, #92	@ 0x5c
 800ff90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ff94:	b004      	add	sp, #16
 800ff96:	4770      	bx	lr
 800ff98:	4630      	mov	r0, r6
 800ff9a:	f7fb fa95 	bl	800b4c8 <rcutils_allocator_is_valid>
 800ff9e:	2800      	cmp	r0, #0
 800ffa0:	d049      	beq.n	8010036 <rcl_init_options_init+0xc2>
 800ffa2:	46b4      	mov	ip, r6
 800ffa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ffa8:	ac11      	add	r4, sp, #68	@ 0x44
 800ffaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffac:	f8dc 3000 	ldr.w	r3, [ip]
 800ffb0:	6023      	str	r3, [r4, #0]
 800ffb2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800ffb4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ffb6:	2050      	movs	r0, #80	@ 0x50
 800ffb8:	4798      	blx	r3
 800ffba:	4604      	mov	r4, r0
 800ffbc:	6028      	str	r0, [r5, #0]
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	d03b      	beq.n	801003a <rcl_init_options_init+0xc6>
 800ffc2:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800ffc6:	4686      	mov	lr, r0
 800ffc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ffcc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ffd0:	f8dc 3000 	ldr.w	r3, [ip]
 800ffd4:	f8ce 3000 	str.w	r3, [lr]
 800ffd8:	a802      	add	r0, sp, #8
 800ffda:	f002 fe55 	bl	8012c88 <rmw_get_zero_initialized_init_options>
 800ffde:	f10d 0e08 	add.w	lr, sp, #8
 800ffe2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ffe6:	f104 0c18 	add.w	ip, r4, #24
 800ffea:	682f      	ldr	r7, [r5, #0]
 800ffec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fff0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fff4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fff8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fffc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010000:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010004:	ac20      	add	r4, sp, #128	@ 0x80
 8010006:	e88c 0003 	stmia.w	ip, {r0, r1}
 801000a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801000e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010012:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8010016:	f107 0018 	add.w	r0, r7, #24
 801001a:	f003 f883 	bl	8013124 <rmw_init_options_init>
 801001e:	4604      	mov	r4, r0
 8010020:	2800      	cmp	r0, #0
 8010022:	d0b3      	beq.n	800ff8c <rcl_init_options_init+0x18>
 8010024:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8010026:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010028:	6828      	ldr	r0, [r5, #0]
 801002a:	4798      	blx	r3
 801002c:	4620      	mov	r0, r4
 801002e:	f7ff fe2d 	bl	800fc8c <rcl_convert_rmw_ret_to_rcl_ret>
 8010032:	4604      	mov	r4, r0
 8010034:	e7aa      	b.n	800ff8c <rcl_init_options_init+0x18>
 8010036:	240b      	movs	r4, #11
 8010038:	e7a8      	b.n	800ff8c <rcl_init_options_init+0x18>
 801003a:	240a      	movs	r4, #10
 801003c:	e7a6      	b.n	800ff8c <rcl_init_options_init+0x18>
 801003e:	bf00      	nop

08010040 <rcl_init_options_fini>:
 8010040:	b530      	push	{r4, r5, lr}
 8010042:	b087      	sub	sp, #28
 8010044:	b1f0      	cbz	r0, 8010084 <rcl_init_options_fini+0x44>
 8010046:	6803      	ldr	r3, [r0, #0]
 8010048:	4604      	mov	r4, r0
 801004a:	b1db      	cbz	r3, 8010084 <rcl_init_options_fini+0x44>
 801004c:	469c      	mov	ip, r3
 801004e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010052:	f10d 0e04 	add.w	lr, sp, #4
 8010056:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801005a:	f8dc 3000 	ldr.w	r3, [ip]
 801005e:	f8ce 3000 	str.w	r3, [lr]
 8010062:	a801      	add	r0, sp, #4
 8010064:	f7fb fa30 	bl	800b4c8 <rcutils_allocator_is_valid>
 8010068:	b160      	cbz	r0, 8010084 <rcl_init_options_fini+0x44>
 801006a:	6820      	ldr	r0, [r4, #0]
 801006c:	3018      	adds	r0, #24
 801006e:	f003 f92f 	bl	80132d0 <rmw_init_options_fini>
 8010072:	4605      	mov	r5, r0
 8010074:	b950      	cbnz	r0, 801008c <rcl_init_options_fini+0x4c>
 8010076:	6820      	ldr	r0, [r4, #0]
 8010078:	9b02      	ldr	r3, [sp, #8]
 801007a:	9905      	ldr	r1, [sp, #20]
 801007c:	4798      	blx	r3
 801007e:	4628      	mov	r0, r5
 8010080:	b007      	add	sp, #28
 8010082:	bd30      	pop	{r4, r5, pc}
 8010084:	250b      	movs	r5, #11
 8010086:	4628      	mov	r0, r5
 8010088:	b007      	add	sp, #28
 801008a:	bd30      	pop	{r4, r5, pc}
 801008c:	f7ff fdfe 	bl	800fc8c <rcl_convert_rmw_ret_to_rcl_ret>
 8010090:	4605      	mov	r5, r0
 8010092:	e7f8      	b.n	8010086 <rcl_init_options_fini+0x46>

08010094 <rcl_init_options_copy>:
 8010094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010098:	b094      	sub	sp, #80	@ 0x50
 801009a:	2800      	cmp	r0, #0
 801009c:	d058      	beq.n	8010150 <rcl_init_options_copy+0xbc>
 801009e:	4604      	mov	r4, r0
 80100a0:	6800      	ldr	r0, [r0, #0]
 80100a2:	2800      	cmp	r0, #0
 80100a4:	d054      	beq.n	8010150 <rcl_init_options_copy+0xbc>
 80100a6:	460e      	mov	r6, r1
 80100a8:	f7fb fa0e 	bl	800b4c8 <rcutils_allocator_is_valid>
 80100ac:	2800      	cmp	r0, #0
 80100ae:	d04f      	beq.n	8010150 <rcl_init_options_copy+0xbc>
 80100b0:	2e00      	cmp	r6, #0
 80100b2:	d04d      	beq.n	8010150 <rcl_init_options_copy+0xbc>
 80100b4:	6833      	ldr	r3, [r6, #0]
 80100b6:	b123      	cbz	r3, 80100c2 <rcl_init_options_copy+0x2e>
 80100b8:	2464      	movs	r4, #100	@ 0x64
 80100ba:	4620      	mov	r0, r4
 80100bc:	b014      	add	sp, #80	@ 0x50
 80100be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100c2:	6827      	ldr	r7, [r4, #0]
 80100c4:	46bc      	mov	ip, r7
 80100c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100ca:	ad0f      	add	r5, sp, #60	@ 0x3c
 80100cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80100ce:	f8dc 3000 	ldr.w	r3, [ip]
 80100d2:	f8d7 8000 	ldr.w	r8, [r7]
 80100d6:	602b      	str	r3, [r5, #0]
 80100d8:	4619      	mov	r1, r3
 80100da:	2050      	movs	r0, #80	@ 0x50
 80100dc:	47c0      	blx	r8
 80100de:	4605      	mov	r5, r0
 80100e0:	6030      	str	r0, [r6, #0]
 80100e2:	b3d0      	cbz	r0, 801015a <rcl_init_options_copy+0xc6>
 80100e4:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80100e8:	4686      	mov	lr, r0
 80100ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100f2:	f8dc 3000 	ldr.w	r3, [ip]
 80100f6:	f8ce 3000 	str.w	r3, [lr]
 80100fa:	4668      	mov	r0, sp
 80100fc:	f002 fdc4 	bl	8012c88 <rmw_get_zero_initialized_init_options>
 8010100:	46ee      	mov	lr, sp
 8010102:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010106:	f105 0c18 	add.w	ip, r5, #24
 801010a:	6824      	ldr	r4, [r4, #0]
 801010c:	6835      	ldr	r5, [r6, #0]
 801010e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010112:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010116:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801011a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801011e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010122:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010126:	e88c 0003 	stmia.w	ip, {r0, r1}
 801012a:	f104 0018 	add.w	r0, r4, #24
 801012e:	f105 0118 	add.w	r1, r5, #24
 8010132:	f003 f859 	bl	80131e8 <rmw_init_options_copy>
 8010136:	4604      	mov	r4, r0
 8010138:	2800      	cmp	r0, #0
 801013a:	d0be      	beq.n	80100ba <rcl_init_options_copy+0x26>
 801013c:	f7fb f9d2 	bl	800b4e4 <rcutils_get_error_string>
 8010140:	f7fb f9e6 	bl	800b510 <rcutils_reset_error>
 8010144:	4630      	mov	r0, r6
 8010146:	f7ff ff7b 	bl	8010040 <rcl_init_options_fini>
 801014a:	b140      	cbz	r0, 801015e <rcl_init_options_copy+0xca>
 801014c:	4604      	mov	r4, r0
 801014e:	e7b4      	b.n	80100ba <rcl_init_options_copy+0x26>
 8010150:	240b      	movs	r4, #11
 8010152:	4620      	mov	r0, r4
 8010154:	b014      	add	sp, #80	@ 0x50
 8010156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801015a:	240a      	movs	r4, #10
 801015c:	e7ad      	b.n	80100ba <rcl_init_options_copy+0x26>
 801015e:	4620      	mov	r0, r4
 8010160:	b014      	add	sp, #80	@ 0x50
 8010162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010166:	f7ff bd91 	b.w	800fc8c <rcl_convert_rmw_ret_to_rcl_ret>
 801016a:	bf00      	nop

0801016c <rcl_get_localhost_only>:
 801016c:	b510      	push	{r4, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	2300      	movs	r3, #0
 8010172:	9301      	str	r3, [sp, #4]
 8010174:	b1b8      	cbz	r0, 80101a6 <rcl_get_localhost_only+0x3a>
 8010176:	4604      	mov	r4, r0
 8010178:	a901      	add	r1, sp, #4
 801017a:	480c      	ldr	r0, [pc, #48]	@ (80101ac <rcl_get_localhost_only+0x40>)
 801017c:	f002 fad8 	bl	8012730 <rcutils_get_env>
 8010180:	b110      	cbz	r0, 8010188 <rcl_get_localhost_only+0x1c>
 8010182:	2001      	movs	r0, #1
 8010184:	b002      	add	sp, #8
 8010186:	bd10      	pop	{r4, pc}
 8010188:	9b01      	ldr	r3, [sp, #4]
 801018a:	b113      	cbz	r3, 8010192 <rcl_get_localhost_only+0x26>
 801018c:	781a      	ldrb	r2, [r3, #0]
 801018e:	2a31      	cmp	r2, #49	@ 0x31
 8010190:	d004      	beq.n	801019c <rcl_get_localhost_only+0x30>
 8010192:	2302      	movs	r3, #2
 8010194:	2000      	movs	r0, #0
 8010196:	7023      	strb	r3, [r4, #0]
 8010198:	b002      	add	sp, #8
 801019a:	bd10      	pop	{r4, pc}
 801019c:	785b      	ldrb	r3, [r3, #1]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d1f7      	bne.n	8010192 <rcl_get_localhost_only+0x26>
 80101a2:	2301      	movs	r3, #1
 80101a4:	e7f6      	b.n	8010194 <rcl_get_localhost_only+0x28>
 80101a6:	200b      	movs	r0, #11
 80101a8:	b002      	add	sp, #8
 80101aa:	bd10      	pop	{r4, pc}
 80101ac:	08017ff8 	.word	0x08017ff8

080101b0 <rcl_get_zero_initialized_node>:
 80101b0:	4a03      	ldr	r2, [pc, #12]	@ (80101c0 <rcl_get_zero_initialized_node+0x10>)
 80101b2:	4603      	mov	r3, r0
 80101b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80101bc:	4618      	mov	r0, r3
 80101be:	4770      	bx	lr
 80101c0:	08018020 	.word	0x08018020

080101c4 <rcl_node_init>:
 80101c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c8:	b0a9      	sub	sp, #164	@ 0xa4
 80101ca:	4604      	mov	r4, r0
 80101cc:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80101d0:	a823      	add	r0, sp, #140	@ 0x8c
 80101d2:	460e      	mov	r6, r1
 80101d4:	4615      	mov	r5, r2
 80101d6:	461f      	mov	r7, r3
 80101d8:	f005 ffb0 	bl	801613c <rcl_guard_condition_get_default_options>
 80101dc:	f1b8 0f00 	cmp.w	r8, #0
 80101e0:	f000 80e6 	beq.w	80103b0 <rcl_node_init+0x1ec>
 80101e4:	4640      	mov	r0, r8
 80101e6:	f7fb f96f 	bl	800b4c8 <rcutils_allocator_is_valid>
 80101ea:	2800      	cmp	r0, #0
 80101ec:	f000 80e0 	beq.w	80103b0 <rcl_node_init+0x1ec>
 80101f0:	2e00      	cmp	r6, #0
 80101f2:	f000 80dd 	beq.w	80103b0 <rcl_node_init+0x1ec>
 80101f6:	2d00      	cmp	r5, #0
 80101f8:	f000 80da 	beq.w	80103b0 <rcl_node_init+0x1ec>
 80101fc:	2c00      	cmp	r4, #0
 80101fe:	f000 80d7 	beq.w	80103b0 <rcl_node_init+0x1ec>
 8010202:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010206:	f1b9 0f00 	cmp.w	r9, #0
 801020a:	f040 80fd 	bne.w	8010408 <rcl_node_init+0x244>
 801020e:	2f00      	cmp	r7, #0
 8010210:	f000 80ce 	beq.w	80103b0 <rcl_node_init+0x1ec>
 8010214:	4638      	mov	r0, r7
 8010216:	f7ff fd57 	bl	800fcc8 <rcl_context_is_valid>
 801021a:	4682      	mov	sl, r0
 801021c:	2800      	cmp	r0, #0
 801021e:	f000 80cd 	beq.w	80103bc <rcl_node_init+0x1f8>
 8010222:	464a      	mov	r2, r9
 8010224:	a922      	add	r1, sp, #136	@ 0x88
 8010226:	4630      	mov	r0, r6
 8010228:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 801022c:	f002 feae 	bl	8012f8c <rmw_validate_node_name>
 8010230:	4681      	mov	r9, r0
 8010232:	2800      	cmp	r0, #0
 8010234:	f040 80be 	bne.w	80103b4 <rcl_node_init+0x1f0>
 8010238:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801023a:	2800      	cmp	r0, #0
 801023c:	f040 80f0 	bne.w	8010420 <rcl_node_init+0x25c>
 8010240:	4628      	mov	r0, r5
 8010242:	f7ef ffcf 	bl	80001e4 <strlen>
 8010246:	2800      	cmp	r0, #0
 8010248:	f040 80bb 	bne.w	80103c2 <rcl_node_init+0x1fe>
 801024c:	4d7c      	ldr	r5, [pc, #496]	@ (8010440 <rcl_node_init+0x27c>)
 801024e:	a922      	add	r1, sp, #136	@ 0x88
 8010250:	2200      	movs	r2, #0
 8010252:	4628      	mov	r0, r5
 8010254:	f002 fe7c 	bl	8012f50 <rmw_validate_namespace>
 8010258:	4681      	mov	r9, r0
 801025a:	2800      	cmp	r0, #0
 801025c:	f040 80aa 	bne.w	80103b4 <rcl_node_init+0x1f0>
 8010260:	4682      	mov	sl, r0
 8010262:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8010264:	2800      	cmp	r0, #0
 8010266:	f040 80e0 	bne.w	801042a <rcl_node_init+0x266>
 801026a:	f8d8 3000 	ldr.w	r3, [r8]
 801026e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010272:	2078      	movs	r0, #120	@ 0x78
 8010274:	4798      	blx	r3
 8010276:	4681      	mov	r9, r0
 8010278:	6060      	str	r0, [r4, #4]
 801027a:	2800      	cmp	r0, #0
 801027c:	f000 80ca 	beq.w	8010414 <rcl_node_init+0x250>
 8010280:	2200      	movs	r2, #0
 8010282:	2300      	movs	r3, #0
 8010284:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8010288:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 801028c:	a808      	add	r0, sp, #32
 801028e:	f000 f907 	bl	80104a0 <rcl_node_get_default_options>
 8010292:	a908      	add	r1, sp, #32
 8010294:	4648      	mov	r0, r9
 8010296:	2268      	movs	r2, #104	@ 0x68
 8010298:	f006 fe15 	bl	8016ec6 <memcpy>
 801029c:	6861      	ldr	r1, [r4, #4]
 801029e:	6027      	str	r7, [r4, #0]
 80102a0:	4640      	mov	r0, r8
 80102a2:	f000 f90b 	bl	80104bc <rcl_node_options_copy>
 80102a6:	2800      	cmp	r0, #0
 80102a8:	d158      	bne.n	801035c <rcl_node_init+0x198>
 80102aa:	4628      	mov	r0, r5
 80102ac:	f7ef ff9a 	bl	80001e4 <strlen>
 80102b0:	4428      	add	r0, r5
 80102b2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80102b6:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80102ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80102bc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80102c0:	9300      	str	r3, [sp, #0]
 80102c2:	bf0c      	ite	eq
 80102c4:	4b5f      	ldreq	r3, [pc, #380]	@ (8010444 <rcl_node_init+0x280>)
 80102c6:	4b60      	ldrne	r3, [pc, #384]	@ (8010448 <rcl_node_init+0x284>)
 80102c8:	9302      	str	r3, [sp, #8]
 80102ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80102ce:	9301      	str	r3, [sp, #4]
 80102d0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80102d4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80102d8:	f002 fa42 	bl	8012760 <rcutils_format_string_limit>
 80102dc:	6823      	ldr	r3, [r4, #0]
 80102de:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80102e2:	6818      	ldr	r0, [r3, #0]
 80102e4:	4631      	mov	r1, r6
 80102e6:	3028      	adds	r0, #40	@ 0x28
 80102e8:	462a      	mov	r2, r5
 80102ea:	6866      	ldr	r6, [r4, #4]
 80102ec:	f003 fa90 	bl	8013810 <rmw_create_node>
 80102f0:	6863      	ldr	r3, [r4, #4]
 80102f2:	66b0      	str	r0, [r6, #104]	@ 0x68
 80102f4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d032      	beq.n	8010360 <rcl_node_init+0x19c>
 80102fa:	f003 fb1d 	bl	8013938 <rmw_node_get_graph_guard_condition>
 80102fe:	4681      	mov	r9, r0
 8010300:	b360      	cbz	r0, 801035c <rcl_node_init+0x198>
 8010302:	f8d8 3000 	ldr.w	r3, [r8]
 8010306:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801030a:	6866      	ldr	r6, [r4, #4]
 801030c:	2008      	movs	r0, #8
 801030e:	4798      	blx	r3
 8010310:	6863      	ldr	r3, [r4, #4]
 8010312:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8010314:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8010318:	f1bb 0f00 	cmp.w	fp, #0
 801031c:	d020      	beq.n	8010360 <rcl_node_init+0x19c>
 801031e:	a806      	add	r0, sp, #24
 8010320:	f005 fe30 	bl	8015f84 <rcl_get_zero_initialized_guard_condition>
 8010324:	a806      	add	r0, sp, #24
 8010326:	c803      	ldmia	r0, {r0, r1}
 8010328:	6863      	ldr	r3, [r4, #4]
 801032a:	46c4      	mov	ip, r8
 801032c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8010330:	e88b 0003 	stmia.w	fp, {r0, r1}
 8010334:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010338:	ae23      	add	r6, sp, #140	@ 0x8c
 801033a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801033c:	f8dc 3000 	ldr.w	r3, [ip]
 8010340:	6033      	str	r3, [r6, #0]
 8010342:	ab28      	add	r3, sp, #160	@ 0xa0
 8010344:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8010348:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801034c:	4649      	mov	r1, r9
 801034e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010350:	463a      	mov	r2, r7
 8010352:	4670      	mov	r0, lr
 8010354:	f005 fe6c 	bl	8016030 <rcl_guard_condition_init_from_rmw>
 8010358:	4681      	mov	r9, r0
 801035a:	b328      	cbz	r0, 80103a8 <rcl_node_init+0x1e4>
 801035c:	6863      	ldr	r3, [r4, #4]
 801035e:	b1f3      	cbz	r3, 801039e <rcl_node_init+0x1da>
 8010360:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010362:	b128      	cbz	r0, 8010370 <rcl_node_init+0x1ac>
 8010364:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010368:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801036c:	4798      	blx	r3
 801036e:	6863      	ldr	r3, [r4, #4]
 8010370:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010372:	b110      	cbz	r0, 801037a <rcl_node_init+0x1b6>
 8010374:	f003 fa64 	bl	8013840 <rmw_destroy_node>
 8010378:	6863      	ldr	r3, [r4, #4]
 801037a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801037c:	b148      	cbz	r0, 8010392 <rcl_node_init+0x1ce>
 801037e:	f005 feb7 	bl	80160f0 <rcl_guard_condition_fini>
 8010382:	6863      	ldr	r3, [r4, #4]
 8010384:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010388:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801038a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801038e:	4798      	blx	r3
 8010390:	6863      	ldr	r3, [r4, #4]
 8010392:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010396:	4618      	mov	r0, r3
 8010398:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801039c:	4798      	blx	r3
 801039e:	2300      	movs	r3, #0
 80103a0:	e9c4 3300 	strd	r3, r3, [r4]
 80103a4:	f04f 0901 	mov.w	r9, #1
 80103a8:	f1ba 0f00 	cmp.w	sl, #0
 80103ac:	d125      	bne.n	80103fa <rcl_node_init+0x236>
 80103ae:	e001      	b.n	80103b4 <rcl_node_init+0x1f0>
 80103b0:	f04f 090b 	mov.w	r9, #11
 80103b4:	4648      	mov	r0, r9
 80103b6:	b029      	add	sp, #164	@ 0xa4
 80103b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103bc:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80103c0:	e7f8      	b.n	80103b4 <rcl_node_init+0x1f0>
 80103c2:	782b      	ldrb	r3, [r5, #0]
 80103c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80103c6:	f43f af42 	beq.w	801024e <rcl_node_init+0x8a>
 80103ca:	9503      	str	r5, [sp, #12]
 80103cc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80103d0:	9300      	str	r3, [sp, #0]
 80103d2:	4b1e      	ldr	r3, [pc, #120]	@ (801044c <rcl_node_init+0x288>)
 80103d4:	9302      	str	r3, [sp, #8]
 80103d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80103da:	9301      	str	r3, [sp, #4]
 80103dc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80103e0:	f002 f9be 	bl	8012760 <rcutils_format_string_limit>
 80103e4:	4605      	mov	r5, r0
 80103e6:	b340      	cbz	r0, 801043a <rcl_node_init+0x276>
 80103e8:	2200      	movs	r2, #0
 80103ea:	a922      	add	r1, sp, #136	@ 0x88
 80103ec:	9222      	str	r2, [sp, #136]	@ 0x88
 80103ee:	f002 fdaf 	bl	8012f50 <rmw_validate_namespace>
 80103f2:	4681      	mov	r9, r0
 80103f4:	2800      	cmp	r0, #0
 80103f6:	f43f af34 	beq.w	8010262 <rcl_node_init+0x9e>
 80103fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80103fe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010402:	4628      	mov	r0, r5
 8010404:	4798      	blx	r3
 8010406:	e7d5      	b.n	80103b4 <rcl_node_init+0x1f0>
 8010408:	f04f 0964 	mov.w	r9, #100	@ 0x64
 801040c:	4648      	mov	r0, r9
 801040e:	b029      	add	sp, #164	@ 0xa4
 8010410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010414:	f04f 090a 	mov.w	r9, #10
 8010418:	f1ba 0f00 	cmp.w	sl, #0
 801041c:	d1ed      	bne.n	80103fa <rcl_node_init+0x236>
 801041e:	e7c9      	b.n	80103b4 <rcl_node_init+0x1f0>
 8010420:	f002 fe06 	bl	8013030 <rmw_node_name_validation_result_string>
 8010424:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8010428:	e7c4      	b.n	80103b4 <rcl_node_init+0x1f0>
 801042a:	f002 fda3 	bl	8012f74 <rmw_namespace_validation_result_string>
 801042e:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8010432:	f1ba 0f00 	cmp.w	sl, #0
 8010436:	d1e0      	bne.n	80103fa <rcl_node_init+0x236>
 8010438:	e7bc      	b.n	80103b4 <rcl_node_init+0x1f0>
 801043a:	f04f 090a 	mov.w	r9, #10
 801043e:	e7b9      	b.n	80103b4 <rcl_node_init+0x1f0>
 8010440:	08018010 	.word	0x08018010
 8010444:	08017e94 	.word	0x08017e94
 8010448:	08018018 	.word	0x08018018
 801044c:	08018014 	.word	0x08018014

08010450 <rcl_node_is_valid>:
 8010450:	b130      	cbz	r0, 8010460 <rcl_node_is_valid+0x10>
 8010452:	6843      	ldr	r3, [r0, #4]
 8010454:	b123      	cbz	r3, 8010460 <rcl_node_is_valid+0x10>
 8010456:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010458:	b113      	cbz	r3, 8010460 <rcl_node_is_valid+0x10>
 801045a:	6800      	ldr	r0, [r0, #0]
 801045c:	f7ff bc34 	b.w	800fcc8 <rcl_context_is_valid>
 8010460:	2000      	movs	r0, #0
 8010462:	4770      	bx	lr

08010464 <rcl_node_get_name>:
 8010464:	b120      	cbz	r0, 8010470 <rcl_node_get_name+0xc>
 8010466:	6840      	ldr	r0, [r0, #4]
 8010468:	b110      	cbz	r0, 8010470 <rcl_node_get_name+0xc>
 801046a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801046c:	b100      	cbz	r0, 8010470 <rcl_node_get_name+0xc>
 801046e:	6880      	ldr	r0, [r0, #8]
 8010470:	4770      	bx	lr
 8010472:	bf00      	nop

08010474 <rcl_node_get_namespace>:
 8010474:	b120      	cbz	r0, 8010480 <rcl_node_get_namespace+0xc>
 8010476:	6840      	ldr	r0, [r0, #4]
 8010478:	b110      	cbz	r0, 8010480 <rcl_node_get_namespace+0xc>
 801047a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801047c:	b100      	cbz	r0, 8010480 <rcl_node_get_namespace+0xc>
 801047e:	68c0      	ldr	r0, [r0, #12]
 8010480:	4770      	bx	lr
 8010482:	bf00      	nop

08010484 <rcl_node_get_options>:
 8010484:	b128      	cbz	r0, 8010492 <rcl_node_get_options+0xe>
 8010486:	6840      	ldr	r0, [r0, #4]
 8010488:	b118      	cbz	r0, 8010492 <rcl_node_get_options+0xe>
 801048a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801048c:	2b00      	cmp	r3, #0
 801048e:	bf08      	it	eq
 8010490:	2000      	moveq	r0, #0
 8010492:	4770      	bx	lr

08010494 <rcl_node_get_rmw_handle>:
 8010494:	b110      	cbz	r0, 801049c <rcl_node_get_rmw_handle+0x8>
 8010496:	6840      	ldr	r0, [r0, #4]
 8010498:	b100      	cbz	r0, 801049c <rcl_node_get_rmw_handle+0x8>
 801049a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801049c:	4770      	bx	lr
 801049e:	bf00      	nop

080104a0 <rcl_node_get_default_options>:
 80104a0:	b510      	push	{r4, lr}
 80104a2:	2268      	movs	r2, #104	@ 0x68
 80104a4:	4604      	mov	r4, r0
 80104a6:	2100      	movs	r1, #0
 80104a8:	f006 fc44 	bl	8016d34 <memset>
 80104ac:	4620      	mov	r0, r4
 80104ae:	f7fa fffd 	bl	800b4ac <rcutils_get_default_allocator>
 80104b2:	2301      	movs	r3, #1
 80104b4:	7523      	strb	r3, [r4, #20]
 80104b6:	4620      	mov	r0, r4
 80104b8:	bd10      	pop	{r4, pc}
 80104ba:	bf00      	nop

080104bc <rcl_node_options_copy>:
 80104bc:	b1d0      	cbz	r0, 80104f4 <rcl_node_options_copy+0x38>
 80104be:	b570      	push	{r4, r5, r6, lr}
 80104c0:	460c      	mov	r4, r1
 80104c2:	b1a9      	cbz	r1, 80104f0 <rcl_node_options_copy+0x34>
 80104c4:	4288      	cmp	r0, r1
 80104c6:	4684      	mov	ip, r0
 80104c8:	d012      	beq.n	80104f0 <rcl_node_options_copy+0x34>
 80104ca:	4605      	mov	r5, r0
 80104cc:	8a86      	ldrh	r6, [r0, #20]
 80104ce:	468e      	mov	lr, r1
 80104d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80104d6:	682b      	ldr	r3, [r5, #0]
 80104d8:	f8ce 3000 	str.w	r3, [lr]
 80104dc:	f10c 0118 	add.w	r1, ip, #24
 80104e0:	2250      	movs	r2, #80	@ 0x50
 80104e2:	82a6      	strh	r6, [r4, #20]
 80104e4:	f104 0018 	add.w	r0, r4, #24
 80104e8:	f006 fced 	bl	8016ec6 <memcpy>
 80104ec:	2000      	movs	r0, #0
 80104ee:	bd70      	pop	{r4, r5, r6, pc}
 80104f0:	200b      	movs	r0, #11
 80104f2:	bd70      	pop	{r4, r5, r6, pc}
 80104f4:	200b      	movs	r0, #11
 80104f6:	4770      	bx	lr

080104f8 <rcl_node_resolve_name>:
 80104f8:	b082      	sub	sp, #8
 80104fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104fe:	b091      	sub	sp, #68	@ 0x44
 8010500:	ac1a      	add	r4, sp, #104	@ 0x68
 8010502:	e884 000c 	stmia.w	r4, {r2, r3}
 8010506:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801050a:	2800      	cmp	r0, #0
 801050c:	d03b      	beq.n	8010586 <rcl_node_resolve_name+0x8e>
 801050e:	460c      	mov	r4, r1
 8010510:	4605      	mov	r5, r0
 8010512:	f7ff ffb7 	bl	8010484 <rcl_node_get_options>
 8010516:	2800      	cmp	r0, #0
 8010518:	d037      	beq.n	801058a <rcl_node_resolve_name+0x92>
 801051a:	4628      	mov	r0, r5
 801051c:	f7ff ffa2 	bl	8010464 <rcl_node_get_name>
 8010520:	4606      	mov	r6, r0
 8010522:	4628      	mov	r0, r5
 8010524:	f7ff ffa6 	bl	8010474 <rcl_node_get_namespace>
 8010528:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801052c:	4681      	mov	r9, r0
 801052e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010532:	ad0b      	add	r5, sp, #44	@ 0x2c
 8010534:	46ac      	mov	ip, r5
 8010536:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801053a:	f8de 3000 	ldr.w	r3, [lr]
 801053e:	f8cc 3000 	str.w	r3, [ip]
 8010542:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010544:	b1fb      	cbz	r3, 8010586 <rcl_node_resolve_name+0x8e>
 8010546:	468a      	mov	sl, r1
 8010548:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 801054c:	f002 fa60 	bl	8012a10 <rcutils_get_zero_initialized_string_map>
 8010550:	ab10      	add	r3, sp, #64	@ 0x40
 8010552:	9008      	str	r0, [sp, #32]
 8010554:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010558:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801055c:	2100      	movs	r1, #0
 801055e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010562:	a808      	add	r0, sp, #32
 8010564:	f002 facc 	bl	8012b00 <rcutils_string_map_init>
 8010568:	4607      	mov	r7, r0
 801056a:	b180      	cbz	r0, 801058e <rcl_node_resolve_name+0x96>
 801056c:	f7fa ffba 	bl	800b4e4 <rcutils_get_error_string>
 8010570:	f7fa ffce 	bl	800b510 <rcutils_reset_error>
 8010574:	2f0a      	cmp	r7, #10
 8010576:	bf18      	it	ne
 8010578:	2701      	movne	r7, #1
 801057a:	4638      	mov	r0, r7
 801057c:	b011      	add	sp, #68	@ 0x44
 801057e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010582:	b002      	add	sp, #8
 8010584:	4770      	bx	lr
 8010586:	270b      	movs	r7, #11
 8010588:	e7f7      	b.n	801057a <rcl_node_resolve_name+0x82>
 801058a:	2701      	movs	r7, #1
 801058c:	e7f5      	b.n	801057a <rcl_node_resolve_name+0x82>
 801058e:	9009      	str	r0, [sp, #36]	@ 0x24
 8010590:	9007      	str	r0, [sp, #28]
 8010592:	a808      	add	r0, sp, #32
 8010594:	f005 fcf0 	bl	8015f78 <rcl_get_default_topic_name_substitutions>
 8010598:	4607      	mov	r7, r0
 801059a:	b1a8      	cbz	r0, 80105c8 <rcl_node_resolve_name+0xd0>
 801059c:	280a      	cmp	r0, #10
 801059e:	9c07      	ldr	r4, [sp, #28]
 80105a0:	d000      	beq.n	80105a4 <rcl_node_resolve_name+0xac>
 80105a2:	2701      	movs	r7, #1
 80105a4:	a808      	add	r0, sp, #32
 80105a6:	f002 faeb 	bl	8012b80 <rcutils_string_map_fini>
 80105aa:	2800      	cmp	r0, #0
 80105ac:	d13d      	bne.n	801062a <rcl_node_resolve_name+0x132>
 80105ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80105b0:	4659      	mov	r1, fp
 80105b2:	47d0      	blx	sl
 80105b4:	4659      	mov	r1, fp
 80105b6:	4620      	mov	r0, r4
 80105b8:	47d0      	blx	sl
 80105ba:	f1b8 0f00 	cmp.w	r8, #0
 80105be:	d0dc      	beq.n	801057a <rcl_node_resolve_name+0x82>
 80105c0:	2f67      	cmp	r7, #103	@ 0x67
 80105c2:	bf08      	it	eq
 80105c4:	2768      	moveq	r7, #104	@ 0x68
 80105c6:	e7d8      	b.n	801057a <rcl_node_resolve_name+0x82>
 80105c8:	ab09      	add	r3, sp, #36	@ 0x24
 80105ca:	9305      	str	r3, [sp, #20]
 80105cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105ce:	46ec      	mov	ip, sp
 80105d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105d4:	682b      	ldr	r3, [r5, #0]
 80105d6:	f8cc 3000 	str.w	r3, [ip]
 80105da:	464a      	mov	r2, r9
 80105dc:	4631      	mov	r1, r6
 80105de:	4620      	mov	r0, r4
 80105e0:	ab08      	add	r3, sp, #32
 80105e2:	f005 fb6b 	bl	8015cbc <rcl_expand_topic_name>
 80105e6:	4607      	mov	r7, r0
 80105e8:	b9b8      	cbnz	r0, 801061a <rcl_node_resolve_name+0x122>
 80105ea:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80105ec:	9009      	str	r0, [sp, #36]	@ 0x24
 80105ee:	4602      	mov	r2, r0
 80105f0:	a90a      	add	r1, sp, #40	@ 0x28
 80105f2:	4620      	mov	r0, r4
 80105f4:	f002 fbe8 	bl	8012dc8 <rmw_validate_full_topic_name>
 80105f8:	b988      	cbnz	r0, 801061e <rcl_node_resolve_name+0x126>
 80105fa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80105fc:	b9d5      	cbnz	r5, 8010634 <rcl_node_resolve_name+0x13c>
 80105fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010600:	a808      	add	r0, sp, #32
 8010602:	601c      	str	r4, [r3, #0]
 8010604:	f002 fabc 	bl	8012b80 <rcutils_string_map_fini>
 8010608:	4607      	mov	r7, r0
 801060a:	b1a8      	cbz	r0, 8010638 <rcl_node_resolve_name+0x140>
 801060c:	f7fa ff6a 	bl	800b4e4 <rcutils_get_error_string>
 8010610:	462c      	mov	r4, r5
 8010612:	f7fa ff7d 	bl	800b510 <rcutils_reset_error>
 8010616:	2701      	movs	r7, #1
 8010618:	e7c9      	b.n	80105ae <rcl_node_resolve_name+0xb6>
 801061a:	9c07      	ldr	r4, [sp, #28]
 801061c:	e7c2      	b.n	80105a4 <rcl_node_resolve_name+0xac>
 801061e:	f7fa ff61 	bl	800b4e4 <rcutils_get_error_string>
 8010622:	2701      	movs	r7, #1
 8010624:	f7fa ff74 	bl	800b510 <rcutils_reset_error>
 8010628:	e7bc      	b.n	80105a4 <rcl_node_resolve_name+0xac>
 801062a:	f7fa ff5b 	bl	800b4e4 <rcutils_get_error_string>
 801062e:	f7fa ff6f 	bl	800b510 <rcutils_reset_error>
 8010632:	e7bc      	b.n	80105ae <rcl_node_resolve_name+0xb6>
 8010634:	2767      	movs	r7, #103	@ 0x67
 8010636:	e7b5      	b.n	80105a4 <rcl_node_resolve_name+0xac>
 8010638:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801063a:	4659      	mov	r1, fp
 801063c:	47d0      	blx	sl
 801063e:	4659      	mov	r1, fp
 8010640:	4638      	mov	r0, r7
 8010642:	47d0      	blx	sl
 8010644:	e799      	b.n	801057a <rcl_node_resolve_name+0x82>
 8010646:	bf00      	nop

08010648 <rcl_service_get_rmw_handle>:
 8010648:	b118      	cbz	r0, 8010652 <rcl_service_get_rmw_handle+0xa>
 801064a:	6800      	ldr	r0, [r0, #0]
 801064c:	b108      	cbz	r0, 8010652 <rcl_service_get_rmw_handle+0xa>
 801064e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010652:	4770      	bx	lr

08010654 <rcl_take_request>:
 8010654:	b570      	push	{r4, r5, r6, lr}
 8010656:	468e      	mov	lr, r1
 8010658:	460c      	mov	r4, r1
 801065a:	4616      	mov	r6, r2
 801065c:	4605      	mov	r5, r0
 801065e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010662:	b08c      	sub	sp, #48	@ 0x30
 8010664:	f10d 0c18 	add.w	ip, sp, #24
 8010668:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801066c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010670:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010674:	b30d      	cbz	r5, 80106ba <rcl_take_request+0x66>
 8010676:	682b      	ldr	r3, [r5, #0]
 8010678:	b1fb      	cbz	r3, 80106ba <rcl_take_request+0x66>
 801067a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801067e:	b1e0      	cbz	r0, 80106ba <rcl_take_request+0x66>
 8010680:	b336      	cbz	r6, 80106d0 <rcl_take_request+0x7c>
 8010682:	2300      	movs	r3, #0
 8010684:	f88d 3007 	strb.w	r3, [sp, #7]
 8010688:	4632      	mov	r2, r6
 801068a:	f10d 0307 	add.w	r3, sp, #7
 801068e:	a902      	add	r1, sp, #8
 8010690:	f003 f9a6 	bl	80139e0 <rmw_take_request>
 8010694:	4605      	mov	r5, r0
 8010696:	b198      	cbz	r0, 80106c0 <rcl_take_request+0x6c>
 8010698:	280a      	cmp	r0, #10
 801069a:	bf18      	it	ne
 801069c:	2501      	movne	r5, #1
 801069e:	f10d 0e18 	add.w	lr, sp, #24
 80106a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80106a6:	46a4      	mov	ip, r4
 80106a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80106ac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80106b0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80106b4:	4628      	mov	r0, r5
 80106b6:	b00c      	add	sp, #48	@ 0x30
 80106b8:	bd70      	pop	{r4, r5, r6, pc}
 80106ba:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80106be:	e7ee      	b.n	801069e <rcl_take_request+0x4a>
 80106c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80106c4:	f240 2359 	movw	r3, #601	@ 0x259
 80106c8:	2a00      	cmp	r2, #0
 80106ca:	bf08      	it	eq
 80106cc:	461d      	moveq	r5, r3
 80106ce:	e7e6      	b.n	801069e <rcl_take_request+0x4a>
 80106d0:	250b      	movs	r5, #11
 80106d2:	e7e4      	b.n	801069e <rcl_take_request+0x4a>

080106d4 <rcl_send_response>:
 80106d4:	b170      	cbz	r0, 80106f4 <rcl_send_response+0x20>
 80106d6:	6800      	ldr	r0, [r0, #0]
 80106d8:	b160      	cbz	r0, 80106f4 <rcl_send_response+0x20>
 80106da:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80106de:	b148      	cbz	r0, 80106f4 <rcl_send_response+0x20>
 80106e0:	b159      	cbz	r1, 80106fa <rcl_send_response+0x26>
 80106e2:	b510      	push	{r4, lr}
 80106e4:	b15a      	cbz	r2, 80106fe <rcl_send_response+0x2a>
 80106e6:	f003 f9d9 	bl	8013a9c <rmw_send_response>
 80106ea:	b110      	cbz	r0, 80106f2 <rcl_send_response+0x1e>
 80106ec:	2802      	cmp	r0, #2
 80106ee:	bf18      	it	ne
 80106f0:	2001      	movne	r0, #1
 80106f2:	bd10      	pop	{r4, pc}
 80106f4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80106f8:	4770      	bx	lr
 80106fa:	200b      	movs	r0, #11
 80106fc:	4770      	bx	lr
 80106fe:	200b      	movs	r0, #11
 8010700:	bd10      	pop	{r4, pc}
 8010702:	bf00      	nop

08010704 <rcl_service_is_valid>:
 8010704:	b130      	cbz	r0, 8010714 <rcl_service_is_valid+0x10>
 8010706:	6800      	ldr	r0, [r0, #0]
 8010708:	b120      	cbz	r0, 8010714 <rcl_service_is_valid+0x10>
 801070a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801070e:	3800      	subs	r0, #0
 8010710:	bf18      	it	ne
 8010712:	2001      	movne	r0, #1
 8010714:	4770      	bx	lr
 8010716:	bf00      	nop

08010718 <rcl_take>:
 8010718:	2800      	cmp	r0, #0
 801071a:	d04a      	beq.n	80107b2 <rcl_take+0x9a>
 801071c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010720:	4604      	mov	r4, r0
 8010722:	6800      	ldr	r0, [r0, #0]
 8010724:	b0a4      	sub	sp, #144	@ 0x90
 8010726:	2800      	cmp	r0, #0
 8010728:	d03b      	beq.n	80107a2 <rcl_take+0x8a>
 801072a:	461f      	mov	r7, r3
 801072c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8010730:	2b00      	cmp	r3, #0
 8010732:	d036      	beq.n	80107a2 <rcl_take+0x8a>
 8010734:	460e      	mov	r6, r1
 8010736:	2900      	cmp	r1, #0
 8010738:	d039      	beq.n	80107ae <rcl_take+0x96>
 801073a:	4615      	mov	r5, r2
 801073c:	2a00      	cmp	r2, #0
 801073e:	d03c      	beq.n	80107ba <rcl_take+0xa2>
 8010740:	a802      	add	r0, sp, #8
 8010742:	f002 fb39 	bl	8012db8 <rmw_get_zero_initialized_message_info>
 8010746:	f10d 0c08 	add.w	ip, sp, #8
 801074a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801074e:	46ae      	mov	lr, r5
 8010750:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010754:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010758:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801075c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010760:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010764:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010768:	f04f 0800 	mov.w	r8, #0
 801076c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8010770:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8010774:	6822      	ldr	r2, [r4, #0]
 8010776:	462b      	mov	r3, r5
 8010778:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 801077c:	9700      	str	r7, [sp, #0]
 801077e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8010782:	4631      	mov	r1, r6
 8010784:	f003 fad4 	bl	8013d30 <rmw_take_with_info>
 8010788:	4603      	mov	r3, r0
 801078a:	b9c0      	cbnz	r0, 80107be <rcl_take+0xa6>
 801078c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8010790:	f240 1291 	movw	r2, #401	@ 0x191
 8010794:	2900      	cmp	r1, #0
 8010796:	bf08      	it	eq
 8010798:	4613      	moveq	r3, r2
 801079a:	4618      	mov	r0, r3
 801079c:	b024      	add	sp, #144	@ 0x90
 801079e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80107a6:	4618      	mov	r0, r3
 80107a8:	b024      	add	sp, #144	@ 0x90
 80107aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107ae:	230b      	movs	r3, #11
 80107b0:	e7f3      	b.n	801079a <rcl_take+0x82>
 80107b2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80107b6:	4618      	mov	r0, r3
 80107b8:	4770      	bx	lr
 80107ba:	ad14      	add	r5, sp, #80	@ 0x50
 80107bc:	e7c0      	b.n	8010740 <rcl_take+0x28>
 80107be:	f7ff fa65 	bl	800fc8c <rcl_convert_rmw_ret_to_rcl_ret>
 80107c2:	4603      	mov	r3, r0
 80107c4:	e7e9      	b.n	801079a <rcl_take+0x82>
 80107c6:	bf00      	nop

080107c8 <rcl_subscription_get_rmw_handle>:
 80107c8:	b118      	cbz	r0, 80107d2 <rcl_subscription_get_rmw_handle+0xa>
 80107ca:	6800      	ldr	r0, [r0, #0]
 80107cc:	b108      	cbz	r0, 80107d2 <rcl_subscription_get_rmw_handle+0xa>
 80107ce:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80107d2:	4770      	bx	lr

080107d4 <rcl_subscription_is_valid>:
 80107d4:	b130      	cbz	r0, 80107e4 <rcl_subscription_is_valid+0x10>
 80107d6:	6800      	ldr	r0, [r0, #0]
 80107d8:	b120      	cbz	r0, 80107e4 <rcl_subscription_is_valid+0x10>
 80107da:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80107de:	3800      	subs	r0, #0
 80107e0:	bf18      	it	ne
 80107e2:	2001      	movne	r0, #1
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop

080107e8 <rcl_get_system_time>:
 80107e8:	4608      	mov	r0, r1
 80107ea:	f7fa bead 	b.w	800b548 <rcutils_system_time_now>
 80107ee:	bf00      	nop

080107f0 <rcl_get_steady_time>:
 80107f0:	4608      	mov	r0, r1
 80107f2:	f7fa bed1 	b.w	800b598 <rcutils_steady_time_now>
 80107f6:	bf00      	nop

080107f8 <rcl_get_ros_time>:
 80107f8:	7a03      	ldrb	r3, [r0, #8]
 80107fa:	b510      	push	{r4, lr}
 80107fc:	460c      	mov	r4, r1
 80107fe:	b133      	cbz	r3, 801080e <rcl_get_ros_time+0x16>
 8010800:	2105      	movs	r1, #5
 8010802:	f001 fef1 	bl	80125e8 <__atomic_load_8>
 8010806:	e9c4 0100 	strd	r0, r1, [r4]
 801080a:	2000      	movs	r0, #0
 801080c:	bd10      	pop	{r4, pc}
 801080e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010812:	4608      	mov	r0, r1
 8010814:	f7fa be98 	b.w	800b548 <rcutils_system_time_now>

08010818 <rcl_clock_init>:
 8010818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801081a:	4605      	mov	r5, r0
 801081c:	4610      	mov	r0, r2
 801081e:	4614      	mov	r4, r2
 8010820:	460e      	mov	r6, r1
 8010822:	f7fa fe51 	bl	800b4c8 <rcutils_allocator_is_valid>
 8010826:	b128      	cbz	r0, 8010834 <rcl_clock_init+0x1c>
 8010828:	2d03      	cmp	r5, #3
 801082a:	d803      	bhi.n	8010834 <rcl_clock_init+0x1c>
 801082c:	e8df f005 	tbb	[pc, r5]
 8010830:	06532e1d 	.word	0x06532e1d
 8010834:	f04f 0c0b 	mov.w	ip, #11
 8010838:	4660      	mov	r0, ip
 801083a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801083c:	2e00      	cmp	r6, #0
 801083e:	d0f9      	beq.n	8010834 <rcl_clock_init+0x1c>
 8010840:	2c00      	cmp	r4, #0
 8010842:	d0f7      	beq.n	8010834 <rcl_clock_init+0x1c>
 8010844:	2300      	movs	r3, #0
 8010846:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801084a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8010900 <rcl_clock_init+0xe8>
 801084e:	6133      	str	r3, [r6, #16]
 8010850:	f106 0514 	add.w	r5, r6, #20
 8010854:	469c      	mov	ip, r3
 8010856:	2703      	movs	r7, #3
 8010858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801085a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801085c:	6823      	ldr	r3, [r4, #0]
 801085e:	602b      	str	r3, [r5, #0]
 8010860:	7037      	strb	r7, [r6, #0]
 8010862:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010866:	4660      	mov	r0, ip
 8010868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801086a:	2e00      	cmp	r6, #0
 801086c:	d0e2      	beq.n	8010834 <rcl_clock_init+0x1c>
 801086e:	2300      	movs	r3, #0
 8010870:	7033      	strb	r3, [r6, #0]
 8010872:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010876:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801087a:	469c      	mov	ip, r3
 801087c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801087e:	f106 0514 	add.w	r5, r6, #20
 8010882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010884:	6823      	ldr	r3, [r4, #0]
 8010886:	602b      	str	r3, [r5, #0]
 8010888:	4660      	mov	r0, ip
 801088a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801088c:	2e00      	cmp	r6, #0
 801088e:	d0d1      	beq.n	8010834 <rcl_clock_init+0x1c>
 8010890:	2c00      	cmp	r4, #0
 8010892:	d0cf      	beq.n	8010834 <rcl_clock_init+0x1c>
 8010894:	2700      	movs	r7, #0
 8010896:	7037      	strb	r7, [r6, #0]
 8010898:	46a4      	mov	ip, r4
 801089a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801089e:	f106 0514 	add.w	r5, r6, #20
 80108a2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80108a6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80108aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80108ac:	f8dc 3000 	ldr.w	r3, [ip]
 80108b0:	602b      	str	r3, [r5, #0]
 80108b2:	6921      	ldr	r1, [r4, #16]
 80108b4:	6823      	ldr	r3, [r4, #0]
 80108b6:	2010      	movs	r0, #16
 80108b8:	4798      	blx	r3
 80108ba:	6130      	str	r0, [r6, #16]
 80108bc:	b1d0      	cbz	r0, 80108f4 <rcl_clock_init+0xdc>
 80108be:	2200      	movs	r2, #0
 80108c0:	2300      	movs	r3, #0
 80108c2:	e9c0 2300 	strd	r2, r3, [r0]
 80108c6:	2301      	movs	r3, #1
 80108c8:	7207      	strb	r7, [r0, #8]
 80108ca:	4a0c      	ldr	r2, [pc, #48]	@ (80108fc <rcl_clock_init+0xe4>)
 80108cc:	7033      	strb	r3, [r6, #0]
 80108ce:	46bc      	mov	ip, r7
 80108d0:	60f2      	str	r2, [r6, #12]
 80108d2:	4660      	mov	r0, ip
 80108d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108d6:	2e00      	cmp	r6, #0
 80108d8:	d0ac      	beq.n	8010834 <rcl_clock_init+0x1c>
 80108da:	2c00      	cmp	r4, #0
 80108dc:	d0aa      	beq.n	8010834 <rcl_clock_init+0x1c>
 80108de:	2300      	movs	r3, #0
 80108e0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80108e4:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8010904 <rcl_clock_init+0xec>
 80108e8:	6133      	str	r3, [r6, #16]
 80108ea:	f106 0514 	add.w	r5, r6, #20
 80108ee:	469c      	mov	ip, r3
 80108f0:	2702      	movs	r7, #2
 80108f2:	e7b1      	b.n	8010858 <rcl_clock_init+0x40>
 80108f4:	f04f 0c0a 	mov.w	ip, #10
 80108f8:	e79e      	b.n	8010838 <rcl_clock_init+0x20>
 80108fa:	bf00      	nop
 80108fc:	080107f9 	.word	0x080107f9
 8010900:	080107f1 	.word	0x080107f1
 8010904:	080107e9 	.word	0x080107e9

08010908 <rcl_clock_get_now>:
 8010908:	b140      	cbz	r0, 801091c <rcl_clock_get_now+0x14>
 801090a:	b139      	cbz	r1, 801091c <rcl_clock_get_now+0x14>
 801090c:	7803      	ldrb	r3, [r0, #0]
 801090e:	b11b      	cbz	r3, 8010918 <rcl_clock_get_now+0x10>
 8010910:	68c3      	ldr	r3, [r0, #12]
 8010912:	b10b      	cbz	r3, 8010918 <rcl_clock_get_now+0x10>
 8010914:	6900      	ldr	r0, [r0, #16]
 8010916:	4718      	bx	r3
 8010918:	2001      	movs	r0, #1
 801091a:	4770      	bx	lr
 801091c:	200b      	movs	r0, #11
 801091e:	4770      	bx	lr

08010920 <rcl_clock_add_jump_callback>:
 8010920:	b082      	sub	sp, #8
 8010922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010926:	a906      	add	r1, sp, #24
 8010928:	e881 000c 	stmia.w	r1, {r2, r3}
 801092c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8010930:	b320      	cbz	r0, 801097c <rcl_clock_add_jump_callback+0x5c>
 8010932:	4604      	mov	r4, r0
 8010934:	3014      	adds	r0, #20
 8010936:	f7fa fdc7 	bl	800b4c8 <rcutils_allocator_is_valid>
 801093a:	b1f8      	cbz	r0, 801097c <rcl_clock_add_jump_callback+0x5c>
 801093c:	b1f6      	cbz	r6, 801097c <rcl_clock_add_jump_callback+0x5c>
 801093e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010940:	2b00      	cmp	r3, #0
 8010942:	db1b      	blt.n	801097c <rcl_clock_add_jump_callback+0x5c>
 8010944:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8010948:	2a01      	cmp	r2, #1
 801094a:	f173 0300 	sbcs.w	r3, r3, #0
 801094e:	da15      	bge.n	801097c <rcl_clock_add_jump_callback+0x5c>
 8010950:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8010954:	2f00      	cmp	r7, #0
 8010956:	d042      	beq.n	80109de <rcl_clock_add_jump_callback+0xbe>
 8010958:	2300      	movs	r3, #0
 801095a:	4602      	mov	r2, r0
 801095c:	e003      	b.n	8010966 <rcl_clock_add_jump_callback+0x46>
 801095e:	42bb      	cmp	r3, r7
 8010960:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8010964:	d011      	beq.n	801098a <rcl_clock_add_jump_callback+0x6a>
 8010966:	6811      	ldr	r1, [r2, #0]
 8010968:	42b1      	cmp	r1, r6
 801096a:	f103 0301 	add.w	r3, r3, #1
 801096e:	d1f6      	bne.n	801095e <rcl_clock_add_jump_callback+0x3e>
 8010970:	6a11      	ldr	r1, [r2, #32]
 8010972:	42a9      	cmp	r1, r5
 8010974:	d1f3      	bne.n	801095e <rcl_clock_add_jump_callback+0x3e>
 8010976:	f04f 0e01 	mov.w	lr, #1
 801097a:	e001      	b.n	8010980 <rcl_clock_add_jump_callback+0x60>
 801097c:	f04f 0e0b 	mov.w	lr, #11
 8010980:	4670      	mov	r0, lr
 8010982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010986:	b002      	add	sp, #8
 8010988:	4770      	bx	lr
 801098a:	3301      	adds	r3, #1
 801098c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010990:	00d9      	lsls	r1, r3, #3
 8010992:	69e3      	ldr	r3, [r4, #28]
 8010994:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8010996:	4798      	blx	r3
 8010998:	b1f0      	cbz	r0, 80109d8 <rcl_clock_add_jump_callback+0xb8>
 801099a:	68a3      	ldr	r3, [r4, #8]
 801099c:	6060      	str	r0, [r4, #4]
 801099e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80109a2:	f10d 0c18 	add.w	ip, sp, #24
 80109a6:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 80109aa:	f103 0801 	add.w	r8, r3, #1
 80109ae:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80109b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80109b6:	f106 0708 	add.w	r7, r6, #8
 80109ba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80109bc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80109c0:	f04f 0e00 	mov.w	lr, #0
 80109c4:	e887 0003 	stmia.w	r7, {r0, r1}
 80109c8:	6235      	str	r5, [r6, #32]
 80109ca:	4670      	mov	r0, lr
 80109cc:	f8c4 8008 	str.w	r8, [r4, #8]
 80109d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109d4:	b002      	add	sp, #8
 80109d6:	4770      	bx	lr
 80109d8:	f04f 0e0a 	mov.w	lr, #10
 80109dc:	e7d0      	b.n	8010980 <rcl_clock_add_jump_callback+0x60>
 80109de:	2128      	movs	r1, #40	@ 0x28
 80109e0:	e7d7      	b.n	8010992 <rcl_clock_add_jump_callback+0x72>
 80109e2:	bf00      	nop

080109e4 <rcl_clock_remove_jump_callback>:
 80109e4:	2800      	cmp	r0, #0
 80109e6:	d057      	beq.n	8010a98 <rcl_clock_remove_jump_callback+0xb4>
 80109e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109ec:	4605      	mov	r5, r0
 80109ee:	3014      	adds	r0, #20
 80109f0:	4688      	mov	r8, r1
 80109f2:	4692      	mov	sl, r2
 80109f4:	f7fa fd68 	bl	800b4c8 <rcutils_allocator_is_valid>
 80109f8:	2800      	cmp	r0, #0
 80109fa:	d03b      	beq.n	8010a74 <rcl_clock_remove_jump_callback+0x90>
 80109fc:	f1b8 0f00 	cmp.w	r8, #0
 8010a00:	d038      	beq.n	8010a74 <rcl_clock_remove_jump_callback+0x90>
 8010a02:	68ae      	ldr	r6, [r5, #8]
 8010a04:	b166      	cbz	r6, 8010a20 <rcl_clock_remove_jump_callback+0x3c>
 8010a06:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8010a0a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8010a0e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8010a12:	464c      	mov	r4, r9
 8010a14:	6823      	ldr	r3, [r4, #0]
 8010a16:	4543      	cmp	r3, r8
 8010a18:	d005      	beq.n	8010a26 <rcl_clock_remove_jump_callback+0x42>
 8010a1a:	3428      	adds	r4, #40	@ 0x28
 8010a1c:	42a7      	cmp	r7, r4
 8010a1e:	d1f9      	bne.n	8010a14 <rcl_clock_remove_jump_callback+0x30>
 8010a20:	2001      	movs	r0, #1
 8010a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a26:	6a23      	ldr	r3, [r4, #32]
 8010a28:	3428      	adds	r4, #40	@ 0x28
 8010a2a:	42bc      	cmp	r4, r7
 8010a2c:	d02d      	beq.n	8010a8a <rcl_clock_remove_jump_callback+0xa6>
 8010a2e:	4553      	cmp	r3, sl
 8010a30:	d1f0      	bne.n	8010a14 <rcl_clock_remove_jump_callback+0x30>
 8010a32:	46a6      	mov	lr, r4
 8010a34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a38:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8010a3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a48:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010a4c:	3428      	adds	r4, #40	@ 0x28
 8010a4e:	42a7      	cmp	r7, r4
 8010a50:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010a54:	d1ed      	bne.n	8010a32 <rcl_clock_remove_jump_callback+0x4e>
 8010a56:	3e01      	subs	r6, #1
 8010a58:	60ae      	str	r6, [r5, #8]
 8010a5a:	b176      	cbz	r6, 8010a7a <rcl_clock_remove_jump_callback+0x96>
 8010a5c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8010a60:	69eb      	ldr	r3, [r5, #28]
 8010a62:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8010a64:	00f1      	lsls	r1, r6, #3
 8010a66:	4648      	mov	r0, r9
 8010a68:	4798      	blx	r3
 8010a6a:	b1b8      	cbz	r0, 8010a9c <rcl_clock_remove_jump_callback+0xb8>
 8010a6c:	6068      	str	r0, [r5, #4]
 8010a6e:	2000      	movs	r0, #0
 8010a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a74:	200b      	movs	r0, #11
 8010a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a7a:	4648      	mov	r0, r9
 8010a7c:	69ab      	ldr	r3, [r5, #24]
 8010a7e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8010a80:	4798      	blx	r3
 8010a82:	606e      	str	r6, [r5, #4]
 8010a84:	4630      	mov	r0, r6
 8010a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a8a:	4553      	cmp	r3, sl
 8010a8c:	d1c8      	bne.n	8010a20 <rcl_clock_remove_jump_callback+0x3c>
 8010a8e:	3e01      	subs	r6, #1
 8010a90:	60ae      	str	r6, [r5, #8]
 8010a92:	2e00      	cmp	r6, #0
 8010a94:	d1e2      	bne.n	8010a5c <rcl_clock_remove_jump_callback+0x78>
 8010a96:	e7f0      	b.n	8010a7a <rcl_clock_remove_jump_callback+0x96>
 8010a98:	200b      	movs	r0, #11
 8010a9a:	4770      	bx	lr
 8010a9c:	200a      	movs	r0, #10
 8010a9e:	e7ea      	b.n	8010a76 <rcl_clock_remove_jump_callback+0x92>

08010aa0 <_rcl_timer_time_jump>:
 8010aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aa4:	4605      	mov	r5, r0
 8010aa6:	b084      	sub	sp, #16
 8010aa8:	4614      	mov	r4, r2
 8010aaa:	b131      	cbz	r1, 8010aba <_rcl_timer_time_jump+0x1a>
 8010aac:	7803      	ldrb	r3, [r0, #0]
 8010aae:	3b02      	subs	r3, #2
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d93f      	bls.n	8010b34 <_rcl_timer_time_jump+0x94>
 8010ab4:	b004      	add	sp, #16
 8010ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aba:	6813      	ldr	r3, [r2, #0]
 8010abc:	a902      	add	r1, sp, #8
 8010abe:	6818      	ldr	r0, [r3, #0]
 8010ac0:	f7ff ff22 	bl	8010908 <rcl_clock_get_now>
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	d1f5      	bne.n	8010ab4 <_rcl_timer_time_jump+0x14>
 8010ac8:	6820      	ldr	r0, [r4, #0]
 8010aca:	2105      	movs	r1, #5
 8010acc:	3020      	adds	r0, #32
 8010ace:	f001 fd8b 	bl	80125e8 <__atomic_load_8>
 8010ad2:	6823      	ldr	r3, [r4, #0]
 8010ad4:	4681      	mov	r9, r0
 8010ad6:	4688      	mov	r8, r1
 8010ad8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8010adc:	2105      	movs	r1, #5
 8010ade:	f001 fd83 	bl	80125e8 <__atomic_load_8>
 8010ae2:	4607      	mov	r7, r0
 8010ae4:	6820      	ldr	r0, [r4, #0]
 8010ae6:	460e      	mov	r6, r1
 8010ae8:	3018      	adds	r0, #24
 8010aea:	2105      	movs	r1, #5
 8010aec:	f001 fd7c 	bl	80125e8 <__atomic_load_8>
 8010af0:	782b      	ldrb	r3, [r5, #0]
 8010af2:	9a02      	ldr	r2, [sp, #8]
 8010af4:	3b02      	subs	r3, #2
 8010af6:	2b01      	cmp	r3, #1
 8010af8:	460d      	mov	r5, r1
 8010afa:	9b03      	ldr	r3, [sp, #12]
 8010afc:	4682      	mov	sl, r0
 8010afe:	d937      	bls.n	8010b70 <_rcl_timer_time_jump+0xd0>
 8010b00:	42ba      	cmp	r2, r7
 8010b02:	eb73 0106 	sbcs.w	r1, r3, r6
 8010b06:	da5f      	bge.n	8010bc8 <_rcl_timer_time_jump+0x128>
 8010b08:	454a      	cmp	r2, r9
 8010b0a:	eb73 0108 	sbcs.w	r1, r3, r8
 8010b0e:	dad1      	bge.n	8010ab4 <_rcl_timer_time_jump+0x14>
 8010b10:	6820      	ldr	r0, [r4, #0]
 8010b12:	eb1a 0202 	adds.w	r2, sl, r2
 8010b16:	eb43 0305 	adc.w	r3, r3, r5
 8010b1a:	2505      	movs	r5, #5
 8010b1c:	3028      	adds	r0, #40	@ 0x28
 8010b1e:	9500      	str	r5, [sp, #0]
 8010b20:	f001 fd98 	bl	8012654 <__atomic_store_8>
 8010b24:	6820      	ldr	r0, [r4, #0]
 8010b26:	9500      	str	r5, [sp, #0]
 8010b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b2c:	3020      	adds	r0, #32
 8010b2e:	f001 fd91 	bl	8012654 <__atomic_store_8>
 8010b32:	e7bf      	b.n	8010ab4 <_rcl_timer_time_jump+0x14>
 8010b34:	6813      	ldr	r3, [r2, #0]
 8010b36:	a902      	add	r1, sp, #8
 8010b38:	6818      	ldr	r0, [r3, #0]
 8010b3a:	f7ff fee5 	bl	8010908 <rcl_clock_get_now>
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	d1b8      	bne.n	8010ab4 <_rcl_timer_time_jump+0x14>
 8010b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b46:	4313      	orrs	r3, r2
 8010b48:	d0b4      	beq.n	8010ab4 <_rcl_timer_time_jump+0x14>
 8010b4a:	6820      	ldr	r0, [r4, #0]
 8010b4c:	2105      	movs	r1, #5
 8010b4e:	3028      	adds	r0, #40	@ 0x28
 8010b50:	f001 fd4a 	bl	80125e8 <__atomic_load_8>
 8010b54:	9d02      	ldr	r5, [sp, #8]
 8010b56:	9b03      	ldr	r3, [sp, #12]
 8010b58:	4602      	mov	r2, r0
 8010b5a:	6820      	ldr	r0, [r4, #0]
 8010b5c:	1b52      	subs	r2, r2, r5
 8010b5e:	f04f 0405 	mov.w	r4, #5
 8010b62:	9400      	str	r4, [sp, #0]
 8010b64:	eb61 0303 	sbc.w	r3, r1, r3
 8010b68:	3030      	adds	r0, #48	@ 0x30
 8010b6a:	f001 fd73 	bl	8012654 <__atomic_store_8>
 8010b6e:	e7a1      	b.n	8010ab4 <_rcl_timer_time_jump+0x14>
 8010b70:	4313      	orrs	r3, r2
 8010b72:	d09f      	beq.n	8010ab4 <_rcl_timer_time_jump+0x14>
 8010b74:	6820      	ldr	r0, [r4, #0]
 8010b76:	f04f 0805 	mov.w	r8, #5
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	f8cd 8000 	str.w	r8, [sp]
 8010b80:	3030      	adds	r0, #48	@ 0x30
 8010b82:	2200      	movs	r2, #0
 8010b84:	f001 fd9c 	bl	80126c0 <__atomic_exchange_8>
 8010b88:	ea51 0300 	orrs.w	r3, r1, r0
 8010b8c:	4606      	mov	r6, r0
 8010b8e:	460f      	mov	r7, r1
 8010b90:	d090      	beq.n	8010ab4 <_rcl_timer_time_jump+0x14>
 8010b92:	9a02      	ldr	r2, [sp, #8]
 8010b94:	9b03      	ldr	r3, [sp, #12]
 8010b96:	f8cd 8000 	str.w	r8, [sp]
 8010b9a:	1a12      	subs	r2, r2, r0
 8010b9c:	6820      	ldr	r0, [r4, #0]
 8010b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8010ba2:	eb12 020a 	adds.w	r2, r2, sl
 8010ba6:	eb43 0305 	adc.w	r3, r3, r5
 8010baa:	3028      	adds	r0, #40	@ 0x28
 8010bac:	f001 fd52 	bl	8012654 <__atomic_store_8>
 8010bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010bb4:	f8cd 8000 	str.w	r8, [sp]
 8010bb8:	6820      	ldr	r0, [r4, #0]
 8010bba:	1b92      	subs	r2, r2, r6
 8010bbc:	eb63 0307 	sbc.w	r3, r3, r7
 8010bc0:	3020      	adds	r0, #32
 8010bc2:	f001 fd47 	bl	8012654 <__atomic_store_8>
 8010bc6:	e775      	b.n	8010ab4 <_rcl_timer_time_jump+0x14>
 8010bc8:	6820      	ldr	r0, [r4, #0]
 8010bca:	3008      	adds	r0, #8
 8010bcc:	f005 fad2 	bl	8016174 <rcl_trigger_guard_condition>
 8010bd0:	e770      	b.n	8010ab4 <_rcl_timer_time_jump+0x14>
 8010bd2:	bf00      	nop

08010bd4 <rcl_get_zero_initialized_timer>:
 8010bd4:	4b01      	ldr	r3, [pc, #4]	@ (8010bdc <rcl_get_zero_initialized_timer+0x8>)
 8010bd6:	6818      	ldr	r0, [r3, #0]
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	08018028 	.word	0x08018028

08010be0 <rcl_timer_init>:
 8010be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010be4:	b0aa      	sub	sp, #168	@ 0xa8
 8010be6:	4604      	mov	r4, r0
 8010be8:	a835      	add	r0, sp, #212	@ 0xd4
 8010bea:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8010bee:	460d      	mov	r5, r1
 8010bf0:	4692      	mov	sl, r2
 8010bf2:	f7fa fc69 	bl	800b4c8 <rcutils_allocator_is_valid>
 8010bf6:	2800      	cmp	r0, #0
 8010bf8:	d064      	beq.n	8010cc4 <rcl_timer_init+0xe4>
 8010bfa:	2c00      	cmp	r4, #0
 8010bfc:	d062      	beq.n	8010cc4 <rcl_timer_init+0xe4>
 8010bfe:	2d00      	cmp	r5, #0
 8010c00:	d060      	beq.n	8010cc4 <rcl_timer_init+0xe4>
 8010c02:	2f00      	cmp	r7, #0
 8010c04:	db5e      	blt.n	8010cc4 <rcl_timer_init+0xe4>
 8010c06:	6823      	ldr	r3, [r4, #0]
 8010c08:	b123      	cbz	r3, 8010c14 <rcl_timer_init+0x34>
 8010c0a:	2664      	movs	r6, #100	@ 0x64
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	b02a      	add	sp, #168	@ 0xa8
 8010c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c14:	a908      	add	r1, sp, #32
 8010c16:	4628      	mov	r0, r5
 8010c18:	f7ff fe76 	bl	8010908 <rcl_clock_get_now>
 8010c1c:	4606      	mov	r6, r0
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d1f4      	bne.n	8010c0c <rcl_timer_init+0x2c>
 8010c22:	ae06      	add	r6, sp, #24
 8010c24:	4630      	mov	r0, r6
 8010c26:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8010c2a:	f005 f9ab 	bl	8015f84 <rcl_get_zero_initialized_guard_condition>
 8010c2e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010c32:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8010c36:	ae0b      	add	r6, sp, #44	@ 0x2c
 8010c38:	e889 0003 	stmia.w	r9, {r0, r1}
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	f005 fa7d 	bl	801613c <rcl_guard_condition_get_default_options>
 8010c42:	ab0d      	add	r3, sp, #52	@ 0x34
 8010c44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010c48:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010c4c:	4651      	mov	r1, sl
 8010c4e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8010c52:	4648      	mov	r0, r9
 8010c54:	f005 f9a0 	bl	8015f98 <rcl_guard_condition_init>
 8010c58:	4606      	mov	r6, r0
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	d1d6      	bne.n	8010c0c <rcl_timer_init+0x2c>
 8010c5e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	2b01      	cmp	r3, #1
 8010c64:	d033      	beq.n	8010cce <rcl_timer_init+0xee>
 8010c66:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8010c68:	911a      	str	r1, [sp, #104]	@ 0x68
 8010c6a:	4642      	mov	r2, r8
 8010c6c:	463b      	mov	r3, r7
 8010c6e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8010c72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010c76:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010d28 <rcl_timer_init+0x148>
 8010c7a:	eb12 0008 	adds.w	r0, r2, r8
 8010c7e:	eb47 0103 	adc.w	r1, r7, r3
 8010c82:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8010c86:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8010c8a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8010c8e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8010c92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010c96:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8010c9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c9e:	f8de 3000 	ldr.w	r3, [lr]
 8010ca2:	f8cc 3000 	str.w	r3, [ip]
 8010ca6:	f04f 0a00 	mov.w	sl, #0
 8010caa:	4619      	mov	r1, r3
 8010cac:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8010cb0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8010cb2:	2050      	movs	r0, #80	@ 0x50
 8010cb4:	4798      	blx	r3
 8010cb6:	6020      	str	r0, [r4, #0]
 8010cb8:	b358      	cbz	r0, 8010d12 <rcl_timer_init+0x132>
 8010cba:	2250      	movs	r2, #80	@ 0x50
 8010cbc:	a916      	add	r1, sp, #88	@ 0x58
 8010cbe:	f006 f902 	bl	8016ec6 <memcpy>
 8010cc2:	e7a3      	b.n	8010c0c <rcl_timer_init+0x2c>
 8010cc4:	260b      	movs	r6, #11
 8010cc6:	4630      	mov	r0, r6
 8010cc8:	b02a      	add	sp, #168	@ 0xa8
 8010cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cce:	2001      	movs	r0, #1
 8010cd0:	2100      	movs	r1, #0
 8010cd2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8010cd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010cda:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8010cde:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8010ce2:	4a13      	ldr	r2, [pc, #76]	@ (8010d30 <rcl_timer_init+0x150>)
 8010ce4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8010ce8:	9405      	str	r4, [sp, #20]
 8010cea:	9204      	str	r2, [sp, #16]
 8010cec:	ab12      	add	r3, sp, #72	@ 0x48
 8010cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010cf0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010cf4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8010cf8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	f7ff fe0f 	bl	8010920 <rcl_clock_add_jump_callback>
 8010d02:	4682      	mov	sl, r0
 8010d04:	2800      	cmp	r0, #0
 8010d06:	d0ae      	beq.n	8010c66 <rcl_timer_init+0x86>
 8010d08:	4648      	mov	r0, r9
 8010d0a:	f005 f9f1 	bl	80160f0 <rcl_guard_condition_fini>
 8010d0e:	4656      	mov	r6, sl
 8010d10:	e77c      	b.n	8010c0c <rcl_timer_init+0x2c>
 8010d12:	4648      	mov	r0, r9
 8010d14:	f005 f9ec 	bl	80160f0 <rcl_guard_condition_fini>
 8010d18:	4905      	ldr	r1, [pc, #20]	@ (8010d30 <rcl_timer_init+0x150>)
 8010d1a:	4622      	mov	r2, r4
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	f7ff fe61 	bl	80109e4 <rcl_clock_remove_jump_callback>
 8010d22:	260a      	movs	r6, #10
 8010d24:	e772      	b.n	8010c0c <rcl_timer_init+0x2c>
 8010d26:	bf00      	nop
	...
 8010d30:	08010aa1 	.word	0x08010aa1

08010d34 <rcl_timer_call>:
 8010d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d38:	b087      	sub	sp, #28
 8010d3a:	2800      	cmp	r0, #0
 8010d3c:	d06d      	beq.n	8010e1a <rcl_timer_call+0xe6>
 8010d3e:	6803      	ldr	r3, [r0, #0]
 8010d40:	4604      	mov	r4, r0
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d063      	beq.n	8010e0e <rcl_timer_call+0xda>
 8010d46:	f3bf 8f5b 	dmb	ish
 8010d4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010d4e:	f3bf 8f5b 	dmb	ish
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d150      	bne.n	8010df8 <rcl_timer_call+0xc4>
 8010d56:	6803      	ldr	r3, [r0, #0]
 8010d58:	a904      	add	r1, sp, #16
 8010d5a:	6818      	ldr	r0, [r3, #0]
 8010d5c:	f7ff fdd4 	bl	8010908 <rcl_clock_get_now>
 8010d60:	4605      	mov	r5, r0
 8010d62:	2800      	cmp	r0, #0
 8010d64:	d14a      	bne.n	8010dfc <rcl_timer_call+0xc8>
 8010d66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	db4a      	blt.n	8010e04 <rcl_timer_call+0xd0>
 8010d6e:	6820      	ldr	r0, [r4, #0]
 8010d70:	f04f 0a05 	mov.w	sl, #5
 8010d74:	f8cd a000 	str.w	sl, [sp]
 8010d78:	3020      	adds	r0, #32
 8010d7a:	f001 fca1 	bl	80126c0 <__atomic_exchange_8>
 8010d7e:	6823      	ldr	r3, [r4, #0]
 8010d80:	f3bf 8f5b 	dmb	ish
 8010d84:	4680      	mov	r8, r0
 8010d86:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8010d8a:	f3bf 8f5b 	dmb	ish
 8010d8e:	6820      	ldr	r0, [r4, #0]
 8010d90:	4689      	mov	r9, r1
 8010d92:	3028      	adds	r0, #40	@ 0x28
 8010d94:	4651      	mov	r1, sl
 8010d96:	f001 fc27 	bl	80125e8 <__atomic_load_8>
 8010d9a:	4606      	mov	r6, r0
 8010d9c:	6820      	ldr	r0, [r4, #0]
 8010d9e:	460f      	mov	r7, r1
 8010da0:	3018      	adds	r0, #24
 8010da2:	4651      	mov	r1, sl
 8010da4:	f001 fc20 	bl	80125e8 <__atomic_load_8>
 8010da8:	1836      	adds	r6, r6, r0
 8010daa:	4602      	mov	r2, r0
 8010dac:	4682      	mov	sl, r0
 8010dae:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8010db2:	eb47 0701 	adc.w	r7, r7, r1
 8010db6:	4286      	cmp	r6, r0
 8010db8:	460b      	mov	r3, r1
 8010dba:	eb77 010c 	sbcs.w	r1, r7, ip
 8010dbe:	da04      	bge.n	8010dca <rcl_timer_call+0x96>
 8010dc0:	ea53 0102 	orrs.w	r1, r3, r2
 8010dc4:	d12e      	bne.n	8010e24 <rcl_timer_call+0xf0>
 8010dc6:	4606      	mov	r6, r0
 8010dc8:	4667      	mov	r7, ip
 8010dca:	6820      	ldr	r0, [r4, #0]
 8010dcc:	2105      	movs	r1, #5
 8010dce:	4632      	mov	r2, r6
 8010dd0:	463b      	mov	r3, r7
 8010dd2:	3028      	adds	r0, #40	@ 0x28
 8010dd4:	9100      	str	r1, [sp, #0]
 8010dd6:	f001 fc3d 	bl	8012654 <__atomic_store_8>
 8010dda:	f1bb 0f00 	cmp.w	fp, #0
 8010dde:	d00d      	beq.n	8010dfc <rcl_timer_call+0xc8>
 8010de0:	9a04      	ldr	r2, [sp, #16]
 8010de2:	9b05      	ldr	r3, [sp, #20]
 8010de4:	ebb2 0208 	subs.w	r2, r2, r8
 8010de8:	4620      	mov	r0, r4
 8010dea:	eb63 0309 	sbc.w	r3, r3, r9
 8010dee:	47d8      	blx	fp
 8010df0:	4628      	mov	r0, r5
 8010df2:	b007      	add	sp, #28
 8010df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df8:	f240 3521 	movw	r5, #801	@ 0x321
 8010dfc:	4628      	mov	r0, r5
 8010dfe:	b007      	add	sp, #28
 8010e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e04:	2501      	movs	r5, #1
 8010e06:	4628      	mov	r0, r5
 8010e08:	b007      	add	sp, #28
 8010e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e0e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8010e12:	4628      	mov	r0, r5
 8010e14:	b007      	add	sp, #28
 8010e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e1a:	250b      	movs	r5, #11
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	b007      	add	sp, #28
 8010e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e24:	1b80      	subs	r0, r0, r6
 8010e26:	eb6c 0107 	sbc.w	r1, ip, r7
 8010e2a:	3801      	subs	r0, #1
 8010e2c:	f161 0100 	sbc.w	r1, r1, #0
 8010e30:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010e34:	f7ef fa34 	bl	80002a0 <__aeabi_ldivmod>
 8010e38:	9b02      	ldr	r3, [sp, #8]
 8010e3a:	3001      	adds	r0, #1
 8010e3c:	f141 0100 	adc.w	r1, r1, #0
 8010e40:	fb00 f303 	mul.w	r3, r0, r3
 8010e44:	fb01 330a 	mla	r3, r1, sl, r3
 8010e48:	fba0 0a0a 	umull	r0, sl, r0, sl
 8010e4c:	1986      	adds	r6, r0, r6
 8010e4e:	4453      	add	r3, sl
 8010e50:	eb43 0707 	adc.w	r7, r3, r7
 8010e54:	e7b9      	b.n	8010dca <rcl_timer_call+0x96>
 8010e56:	bf00      	nop

08010e58 <rcl_timer_is_ready>:
 8010e58:	b570      	push	{r4, r5, r6, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	b378      	cbz	r0, 8010ebe <rcl_timer_is_ready+0x66>
 8010e5e:	6803      	ldr	r3, [r0, #0]
 8010e60:	4604      	mov	r4, r0
 8010e62:	b383      	cbz	r3, 8010ec6 <rcl_timer_is_ready+0x6e>
 8010e64:	460d      	mov	r5, r1
 8010e66:	b351      	cbz	r1, 8010ebe <rcl_timer_is_ready+0x66>
 8010e68:	f3bf 8f5b 	dmb	ish
 8010e6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010e70:	f3bf 8f5b 	dmb	ish
 8010e74:	b953      	cbnz	r3, 8010e8c <rcl_timer_is_ready+0x34>
 8010e76:	6803      	ldr	r3, [r0, #0]
 8010e78:	4669      	mov	r1, sp
 8010e7a:	6818      	ldr	r0, [r3, #0]
 8010e7c:	f7ff fd44 	bl	8010908 <rcl_clock_get_now>
 8010e80:	4606      	mov	r6, r0
 8010e82:	b140      	cbz	r0, 8010e96 <rcl_timer_is_ready+0x3e>
 8010e84:	f240 3321 	movw	r3, #801	@ 0x321
 8010e88:	4298      	cmp	r0, r3
 8010e8a:	d101      	bne.n	8010e90 <rcl_timer_is_ready+0x38>
 8010e8c:	2600      	movs	r6, #0
 8010e8e:	702e      	strb	r6, [r5, #0]
 8010e90:	4630      	mov	r0, r6
 8010e92:	b002      	add	sp, #8
 8010e94:	bd70      	pop	{r4, r5, r6, pc}
 8010e96:	6820      	ldr	r0, [r4, #0]
 8010e98:	2105      	movs	r1, #5
 8010e9a:	3028      	adds	r0, #40	@ 0x28
 8010e9c:	f001 fba4 	bl	80125e8 <__atomic_load_8>
 8010ea0:	9b00      	ldr	r3, [sp, #0]
 8010ea2:	1ac0      	subs	r0, r0, r3
 8010ea4:	9b01      	ldr	r3, [sp, #4]
 8010ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8010eaa:	2801      	cmp	r0, #1
 8010eac:	f171 0300 	sbcs.w	r3, r1, #0
 8010eb0:	bfb4      	ite	lt
 8010eb2:	2301      	movlt	r3, #1
 8010eb4:	2300      	movge	r3, #0
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	702b      	strb	r3, [r5, #0]
 8010eba:	b002      	add	sp, #8
 8010ebc:	bd70      	pop	{r4, r5, r6, pc}
 8010ebe:	260b      	movs	r6, #11
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	b002      	add	sp, #8
 8010ec4:	bd70      	pop	{r4, r5, r6, pc}
 8010ec6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010eca:	e7e1      	b.n	8010e90 <rcl_timer_is_ready+0x38>

08010ecc <rcl_timer_get_time_until_next_call>:
 8010ecc:	b570      	push	{r4, r5, r6, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	b330      	cbz	r0, 8010f20 <rcl_timer_get_time_until_next_call+0x54>
 8010ed2:	6803      	ldr	r3, [r0, #0]
 8010ed4:	4604      	mov	r4, r0
 8010ed6:	b33b      	cbz	r3, 8010f28 <rcl_timer_get_time_until_next_call+0x5c>
 8010ed8:	460d      	mov	r5, r1
 8010eda:	b309      	cbz	r1, 8010f20 <rcl_timer_get_time_until_next_call+0x54>
 8010edc:	f3bf 8f5b 	dmb	ish
 8010ee0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010ee4:	f3bf 8f5b 	dmb	ish
 8010ee8:	b9ab      	cbnz	r3, 8010f16 <rcl_timer_get_time_until_next_call+0x4a>
 8010eea:	6803      	ldr	r3, [r0, #0]
 8010eec:	4669      	mov	r1, sp
 8010eee:	6818      	ldr	r0, [r3, #0]
 8010ef0:	f7ff fd0a 	bl	8010908 <rcl_clock_get_now>
 8010ef4:	4606      	mov	r6, r0
 8010ef6:	b958      	cbnz	r0, 8010f10 <rcl_timer_get_time_until_next_call+0x44>
 8010ef8:	6820      	ldr	r0, [r4, #0]
 8010efa:	2105      	movs	r1, #5
 8010efc:	3028      	adds	r0, #40	@ 0x28
 8010efe:	f001 fb73 	bl	80125e8 <__atomic_load_8>
 8010f02:	9b00      	ldr	r3, [sp, #0]
 8010f04:	1ac0      	subs	r0, r0, r3
 8010f06:	9b01      	ldr	r3, [sp, #4]
 8010f08:	6028      	str	r0, [r5, #0]
 8010f0a:	eb61 0103 	sbc.w	r1, r1, r3
 8010f0e:	6069      	str	r1, [r5, #4]
 8010f10:	4630      	mov	r0, r6
 8010f12:	b002      	add	sp, #8
 8010f14:	bd70      	pop	{r4, r5, r6, pc}
 8010f16:	f240 3621 	movw	r6, #801	@ 0x321
 8010f1a:	4630      	mov	r0, r6
 8010f1c:	b002      	add	sp, #8
 8010f1e:	bd70      	pop	{r4, r5, r6, pc}
 8010f20:	260b      	movs	r6, #11
 8010f22:	4630      	mov	r0, r6
 8010f24:	b002      	add	sp, #8
 8010f26:	bd70      	pop	{r4, r5, r6, pc}
 8010f28:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010f2c:	e7f0      	b.n	8010f10 <rcl_timer_get_time_until_next_call+0x44>
 8010f2e:	bf00      	nop

08010f30 <rcl_timer_get_guard_condition>:
 8010f30:	b130      	cbz	r0, 8010f40 <rcl_timer_get_guard_condition+0x10>
 8010f32:	6800      	ldr	r0, [r0, #0]
 8010f34:	b120      	cbz	r0, 8010f40 <rcl_timer_get_guard_condition+0x10>
 8010f36:	68c3      	ldr	r3, [r0, #12]
 8010f38:	b10b      	cbz	r3, 8010f3e <rcl_timer_get_guard_condition+0xe>
 8010f3a:	3008      	adds	r0, #8
 8010f3c:	4770      	bx	lr
 8010f3e:	4618      	mov	r0, r3
 8010f40:	4770      	bx	lr
 8010f42:	bf00      	nop

08010f44 <rcl_get_zero_initialized_wait_set>:
 8010f44:	b510      	push	{r4, lr}
 8010f46:	4c08      	ldr	r4, [pc, #32]	@ (8010f68 <rcl_get_zero_initialized_wait_set+0x24>)
 8010f48:	4686      	mov	lr, r0
 8010f4a:	4684      	mov	ip, r0
 8010f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f5e:	6823      	ldr	r3, [r4, #0]
 8010f60:	f8cc 3000 	str.w	r3, [ip]
 8010f64:	4670      	mov	r0, lr
 8010f66:	bd10      	pop	{r4, pc}
 8010f68:	0801802c 	.word	0x0801802c

08010f6c <rcl_wait_set_is_valid>:
 8010f6c:	b118      	cbz	r0, 8010f76 <rcl_wait_set_is_valid+0xa>
 8010f6e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8010f70:	3800      	subs	r0, #0
 8010f72:	bf18      	it	ne
 8010f74:	2001      	movne	r0, #1
 8010f76:	4770      	bx	lr

08010f78 <rcl_wait_set_fini>:
 8010f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f7c:	b082      	sub	sp, #8
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	f000 8095 	beq.w	80110ae <rcl_wait_set_fini+0x136>
 8010f84:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8010f86:	4604      	mov	r4, r0
 8010f88:	2e00      	cmp	r6, #0
 8010f8a:	f000 808c 	beq.w	80110a6 <rcl_wait_set_fini+0x12e>
 8010f8e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8010f90:	f003 f8bc 	bl	801410c <rmw_destroy_wait_set>
 8010f94:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010f96:	1e06      	subs	r6, r0, #0
 8010f98:	bf18      	it	ne
 8010f9a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8010f9e:	2d00      	cmp	r5, #0
 8010fa0:	f000 8081 	beq.w	80110a6 <rcl_wait_set_fini+0x12e>
 8010fa4:	6820      	ldr	r0, [r4, #0]
 8010fa6:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010faa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010fac:	2700      	movs	r7, #0
 8010fae:	6067      	str	r7, [r4, #4]
 8010fb0:	602f      	str	r7, [r5, #0]
 8010fb2:	b120      	cbz	r0, 8010fbe <rcl_wait_set_fini+0x46>
 8010fb4:	9101      	str	r1, [sp, #4]
 8010fb6:	47c0      	blx	r8
 8010fb8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010fba:	9901      	ldr	r1, [sp, #4]
 8010fbc:	6027      	str	r7, [r4, #0]
 8010fbe:	68a8      	ldr	r0, [r5, #8]
 8010fc0:	b120      	cbz	r0, 8010fcc <rcl_wait_set_fini+0x54>
 8010fc2:	47c0      	blx	r8
 8010fc4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010fcc:	68a0      	ldr	r0, [r4, #8]
 8010fce:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010fd0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010fd2:	f04f 0800 	mov.w	r8, #0
 8010fd6:	f8c4 800c 	str.w	r8, [r4, #12]
 8010fda:	f8c5 800c 	str.w	r8, [r5, #12]
 8010fde:	b128      	cbz	r0, 8010fec <rcl_wait_set_fini+0x74>
 8010fe0:	47b8      	blx	r7
 8010fe2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010fe4:	f8c4 8008 	str.w	r8, [r4, #8]
 8010fe8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010fea:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010fec:	6968      	ldr	r0, [r5, #20]
 8010fee:	f04f 0800 	mov.w	r8, #0
 8010ff2:	f8c5 8010 	str.w	r8, [r5, #16]
 8010ff6:	b128      	cbz	r0, 8011004 <rcl_wait_set_fini+0x8c>
 8010ff8:	47b8      	blx	r7
 8010ffa:	f8c5 8014 	str.w	r8, [r5, #20]
 8010ffe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011000:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011002:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011004:	6920      	ldr	r0, [r4, #16]
 8011006:	f04f 0800 	mov.w	r8, #0
 801100a:	f8c4 8014 	str.w	r8, [r4, #20]
 801100e:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8011012:	b128      	cbz	r0, 8011020 <rcl_wait_set_fini+0xa8>
 8011014:	47b8      	blx	r7
 8011016:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011018:	f8c4 8010 	str.w	r8, [r4, #16]
 801101c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801101e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011020:	69a0      	ldr	r0, [r4, #24]
 8011022:	f04f 0800 	mov.w	r8, #0
 8011026:	f8c4 801c 	str.w	r8, [r4, #28]
 801102a:	f8c5 8018 	str.w	r8, [r5, #24]
 801102e:	b128      	cbz	r0, 801103c <rcl_wait_set_fini+0xc4>
 8011030:	9101      	str	r1, [sp, #4]
 8011032:	47b8      	blx	r7
 8011034:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011036:	9901      	ldr	r1, [sp, #4]
 8011038:	f8c4 8018 	str.w	r8, [r4, #24]
 801103c:	6a28      	ldr	r0, [r5, #32]
 801103e:	b120      	cbz	r0, 801104a <rcl_wait_set_fini+0xd2>
 8011040:	47b8      	blx	r7
 8011042:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011044:	2300      	movs	r3, #0
 8011046:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801104a:	6a20      	ldr	r0, [r4, #32]
 801104c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011050:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011052:	2700      	movs	r7, #0
 8011054:	6267      	str	r7, [r4, #36]	@ 0x24
 8011056:	626f      	str	r7, [r5, #36]	@ 0x24
 8011058:	b120      	cbz	r0, 8011064 <rcl_wait_set_fini+0xec>
 801105a:	9101      	str	r1, [sp, #4]
 801105c:	47c0      	blx	r8
 801105e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011060:	9901      	ldr	r1, [sp, #4]
 8011062:	6227      	str	r7, [r4, #32]
 8011064:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8011066:	b120      	cbz	r0, 8011072 <rcl_wait_set_fini+0xfa>
 8011068:	47c0      	blx	r8
 801106a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801106c:	2300      	movs	r3, #0
 801106e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011072:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011074:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011078:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801107a:	2700      	movs	r7, #0
 801107c:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801107e:	632f      	str	r7, [r5, #48]	@ 0x30
 8011080:	b120      	cbz	r0, 801108c <rcl_wait_set_fini+0x114>
 8011082:	9101      	str	r1, [sp, #4]
 8011084:	47c0      	blx	r8
 8011086:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011088:	9901      	ldr	r1, [sp, #4]
 801108a:	62a7      	str	r7, [r4, #40]	@ 0x28
 801108c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801108e:	b120      	cbz	r0, 801109a <rcl_wait_set_fini+0x122>
 8011090:	47c0      	blx	r8
 8011092:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011094:	2300      	movs	r3, #0
 8011096:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801109a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801109c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801109e:	4628      	mov	r0, r5
 80110a0:	4798      	blx	r3
 80110a2:	2300      	movs	r3, #0
 80110a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80110a6:	4630      	mov	r0, r6
 80110a8:	b002      	add	sp, #8
 80110aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110ae:	260b      	movs	r6, #11
 80110b0:	4630      	mov	r0, r6
 80110b2:	b002      	add	sp, #8
 80110b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080110b8 <rcl_wait_set_add_subscription>:
 80110b8:	b318      	cbz	r0, 8011102 <rcl_wait_set_add_subscription+0x4a>
 80110ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80110bc:	b570      	push	{r4, r5, r6, lr}
 80110be:	4604      	mov	r4, r0
 80110c0:	b30b      	cbz	r3, 8011106 <rcl_wait_set_add_subscription+0x4e>
 80110c2:	b319      	cbz	r1, 801110c <rcl_wait_set_add_subscription+0x54>
 80110c4:	681d      	ldr	r5, [r3, #0]
 80110c6:	6840      	ldr	r0, [r0, #4]
 80110c8:	4285      	cmp	r5, r0
 80110ca:	d217      	bcs.n	80110fc <rcl_wait_set_add_subscription+0x44>
 80110cc:	6820      	ldr	r0, [r4, #0]
 80110ce:	1c6e      	adds	r6, r5, #1
 80110d0:	601e      	str	r6, [r3, #0]
 80110d2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80110d6:	b102      	cbz	r2, 80110da <rcl_wait_set_add_subscription+0x22>
 80110d8:	6015      	str	r5, [r2, #0]
 80110da:	4608      	mov	r0, r1
 80110dc:	f7ff fb74 	bl	80107c8 <rcl_subscription_get_rmw_handle>
 80110e0:	b150      	cbz	r0, 80110f8 <rcl_wait_set_add_subscription+0x40>
 80110e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80110e4:	6842      	ldr	r2, [r0, #4]
 80110e6:	689b      	ldr	r3, [r3, #8]
 80110e8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80110ec:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80110ee:	6853      	ldr	r3, [r2, #4]
 80110f0:	3301      	adds	r3, #1
 80110f2:	2000      	movs	r0, #0
 80110f4:	6053      	str	r3, [r2, #4]
 80110f6:	bd70      	pop	{r4, r5, r6, pc}
 80110f8:	2001      	movs	r0, #1
 80110fa:	bd70      	pop	{r4, r5, r6, pc}
 80110fc:	f240 3086 	movw	r0, #902	@ 0x386
 8011100:	bd70      	pop	{r4, r5, r6, pc}
 8011102:	200b      	movs	r0, #11
 8011104:	4770      	bx	lr
 8011106:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801110a:	bd70      	pop	{r4, r5, r6, pc}
 801110c:	200b      	movs	r0, #11
 801110e:	bd70      	pop	{r4, r5, r6, pc}

08011110 <rcl_wait_set_clear>:
 8011110:	2800      	cmp	r0, #0
 8011112:	d073      	beq.n	80111fc <rcl_wait_set_clear+0xec>
 8011114:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011116:	b510      	push	{r4, lr}
 8011118:	4604      	mov	r4, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d070      	beq.n	8011200 <rcl_wait_set_clear+0xf0>
 801111e:	6800      	ldr	r0, [r0, #0]
 8011120:	b138      	cbz	r0, 8011132 <rcl_wait_set_clear+0x22>
 8011122:	6862      	ldr	r2, [r4, #4]
 8011124:	2100      	movs	r1, #0
 8011126:	0092      	lsls	r2, r2, #2
 8011128:	f005 fe04 	bl	8016d34 <memset>
 801112c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801112e:	2200      	movs	r2, #0
 8011130:	601a      	str	r2, [r3, #0]
 8011132:	68a0      	ldr	r0, [r4, #8]
 8011134:	b138      	cbz	r0, 8011146 <rcl_wait_set_clear+0x36>
 8011136:	68e2      	ldr	r2, [r4, #12]
 8011138:	2100      	movs	r1, #0
 801113a:	0092      	lsls	r2, r2, #2
 801113c:	f005 fdfa 	bl	8016d34 <memset>
 8011140:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011142:	2200      	movs	r2, #0
 8011144:	60da      	str	r2, [r3, #12]
 8011146:	69a0      	ldr	r0, [r4, #24]
 8011148:	b138      	cbz	r0, 801115a <rcl_wait_set_clear+0x4a>
 801114a:	69e2      	ldr	r2, [r4, #28]
 801114c:	2100      	movs	r1, #0
 801114e:	0092      	lsls	r2, r2, #2
 8011150:	f005 fdf0 	bl	8016d34 <memset>
 8011154:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011156:	2200      	movs	r2, #0
 8011158:	619a      	str	r2, [r3, #24]
 801115a:	6a20      	ldr	r0, [r4, #32]
 801115c:	b138      	cbz	r0, 801116e <rcl_wait_set_clear+0x5e>
 801115e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011160:	2100      	movs	r1, #0
 8011162:	0092      	lsls	r2, r2, #2
 8011164:	f005 fde6 	bl	8016d34 <memset>
 8011168:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801116a:	2200      	movs	r2, #0
 801116c:	625a      	str	r2, [r3, #36]	@ 0x24
 801116e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011170:	b138      	cbz	r0, 8011182 <rcl_wait_set_clear+0x72>
 8011172:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011174:	2100      	movs	r1, #0
 8011176:	0092      	lsls	r2, r2, #2
 8011178:	f005 fddc 	bl	8016d34 <memset>
 801117c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801117e:	2200      	movs	r2, #0
 8011180:	631a      	str	r2, [r3, #48]	@ 0x30
 8011182:	6920      	ldr	r0, [r4, #16]
 8011184:	b138      	cbz	r0, 8011196 <rcl_wait_set_clear+0x86>
 8011186:	6962      	ldr	r2, [r4, #20]
 8011188:	2100      	movs	r1, #0
 801118a:	0092      	lsls	r2, r2, #2
 801118c:	f005 fdd2 	bl	8016d34 <memset>
 8011190:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011192:	2200      	movs	r2, #0
 8011194:	641a      	str	r2, [r3, #64]	@ 0x40
 8011196:	6898      	ldr	r0, [r3, #8]
 8011198:	b138      	cbz	r0, 80111aa <rcl_wait_set_clear+0x9a>
 801119a:	685a      	ldr	r2, [r3, #4]
 801119c:	2100      	movs	r1, #0
 801119e:	0092      	lsls	r2, r2, #2
 80111a0:	f005 fdc8 	bl	8016d34 <memset>
 80111a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80111a6:	2200      	movs	r2, #0
 80111a8:	605a      	str	r2, [r3, #4]
 80111aa:	6958      	ldr	r0, [r3, #20]
 80111ac:	b138      	cbz	r0, 80111be <rcl_wait_set_clear+0xae>
 80111ae:	691a      	ldr	r2, [r3, #16]
 80111b0:	2100      	movs	r1, #0
 80111b2:	0092      	lsls	r2, r2, #2
 80111b4:	f005 fdbe 	bl	8016d34 <memset>
 80111b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80111ba:	2200      	movs	r2, #0
 80111bc:	611a      	str	r2, [r3, #16]
 80111be:	6a18      	ldr	r0, [r3, #32]
 80111c0:	b138      	cbz	r0, 80111d2 <rcl_wait_set_clear+0xc2>
 80111c2:	69da      	ldr	r2, [r3, #28]
 80111c4:	2100      	movs	r1, #0
 80111c6:	0092      	lsls	r2, r2, #2
 80111c8:	f005 fdb4 	bl	8016d34 <memset>
 80111cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80111ce:	2200      	movs	r2, #0
 80111d0:	61da      	str	r2, [r3, #28]
 80111d2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80111d4:	b138      	cbz	r0, 80111e6 <rcl_wait_set_clear+0xd6>
 80111d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80111d8:	2100      	movs	r1, #0
 80111da:	0092      	lsls	r2, r2, #2
 80111dc:	f005 fdaa 	bl	8016d34 <memset>
 80111e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80111e2:	2200      	movs	r2, #0
 80111e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80111e6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80111e8:	b138      	cbz	r0, 80111fa <rcl_wait_set_clear+0xea>
 80111ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80111ec:	2100      	movs	r1, #0
 80111ee:	0092      	lsls	r2, r2, #2
 80111f0:	f005 fda0 	bl	8016d34 <memset>
 80111f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80111f6:	2000      	movs	r0, #0
 80111f8:	6358      	str	r0, [r3, #52]	@ 0x34
 80111fa:	bd10      	pop	{r4, pc}
 80111fc:	200b      	movs	r0, #11
 80111fe:	4770      	bx	lr
 8011200:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011204:	bd10      	pop	{r4, pc}
 8011206:	bf00      	nop

08011208 <rcl_wait_set_resize>:
 8011208:	2800      	cmp	r0, #0
 801120a:	f000 8185 	beq.w	8011518 <rcl_wait_set_resize+0x310>
 801120e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011212:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8011214:	b083      	sub	sp, #12
 8011216:	4605      	mov	r5, r0
 8011218:	2c00      	cmp	r4, #0
 801121a:	f000 817f 	beq.w	801151c <rcl_wait_set_resize+0x314>
 801121e:	f04f 0900 	mov.w	r9, #0
 8011222:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8011226:	461f      	mov	r7, r3
 8011228:	4688      	mov	r8, r1
 801122a:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801122e:	4616      	mov	r6, r2
 8011230:	f8c0 9004 	str.w	r9, [r0, #4]
 8011234:	f8c4 9000 	str.w	r9, [r4]
 8011238:	2900      	cmp	r1, #0
 801123a:	f000 80bd 	beq.w	80113b8 <rcl_wait_set_resize+0x1b0>
 801123e:	008c      	lsls	r4, r1, #2
 8011240:	6800      	ldr	r0, [r0, #0]
 8011242:	9301      	str	r3, [sp, #4]
 8011244:	4652      	mov	r2, sl
 8011246:	4621      	mov	r1, r4
 8011248:	4798      	blx	r3
 801124a:	9b01      	ldr	r3, [sp, #4]
 801124c:	6028      	str	r0, [r5, #0]
 801124e:	2800      	cmp	r0, #0
 8011250:	f000 80cb 	beq.w	80113ea <rcl_wait_set_resize+0x1e2>
 8011254:	4622      	mov	r2, r4
 8011256:	4649      	mov	r1, r9
 8011258:	9301      	str	r3, [sp, #4]
 801125a:	f005 fd6b 	bl	8016d34 <memset>
 801125e:	f8c5 8004 	str.w	r8, [r5, #4]
 8011262:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8011266:	9b01      	ldr	r3, [sp, #4]
 8011268:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801126c:	f8c8 9004 	str.w	r9, [r8, #4]
 8011270:	4652      	mov	r2, sl
 8011272:	4621      	mov	r1, r4
 8011274:	4798      	blx	r3
 8011276:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011278:	f8c8 0008 	str.w	r0, [r8, #8]
 801127c:	689b      	ldr	r3, [r3, #8]
 801127e:	2b00      	cmp	r3, #0
 8011280:	f000 80ac 	beq.w	80113dc <rcl_wait_set_resize+0x1d4>
 8011284:	4622      	mov	r2, r4
 8011286:	4649      	mov	r1, r9
 8011288:	4618      	mov	r0, r3
 801128a:	f005 fd53 	bl	8016d34 <memset>
 801128e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011290:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011294:	f04f 0800 	mov.w	r8, #0
 8011298:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801129c:	f8c5 800c 	str.w	r8, [r5, #12]
 80112a0:	f8c4 800c 	str.w	r8, [r4, #12]
 80112a4:	2e00      	cmp	r6, #0
 80112a6:	f040 80a4 	bne.w	80113f2 <rcl_wait_set_resize+0x1ea>
 80112aa:	68a8      	ldr	r0, [r5, #8]
 80112ac:	b128      	cbz	r0, 80112ba <rcl_wait_set_resize+0xb2>
 80112ae:	4649      	mov	r1, r9
 80112b0:	4790      	blx	r2
 80112b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80112b4:	60ae      	str	r6, [r5, #8]
 80112b6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80112ba:	f04f 0800 	mov.w	r8, #0
 80112be:	19f6      	adds	r6, r6, r7
 80112c0:	f8c4 8010 	str.w	r8, [r4, #16]
 80112c4:	f040 80ac 	bne.w	8011420 <rcl_wait_set_resize+0x218>
 80112c8:	6960      	ldr	r0, [r4, #20]
 80112ca:	b130      	cbz	r0, 80112da <rcl_wait_set_resize+0xd2>
 80112cc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80112ce:	4649      	mov	r1, r9
 80112d0:	4798      	blx	r3
 80112d2:	6166      	str	r6, [r4, #20]
 80112d4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80112d6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80112da:	2600      	movs	r6, #0
 80112dc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80112e0:	616e      	str	r6, [r5, #20]
 80112e2:	6426      	str	r6, [r4, #64]	@ 0x40
 80112e4:	2f00      	cmp	r7, #0
 80112e6:	f040 80ad 	bne.w	8011444 <rcl_wait_set_resize+0x23c>
 80112ea:	6928      	ldr	r0, [r5, #16]
 80112ec:	b138      	cbz	r0, 80112fe <rcl_wait_set_resize+0xf6>
 80112ee:	4649      	mov	r1, r9
 80112f0:	47d0      	blx	sl
 80112f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80112f4:	612f      	str	r7, [r5, #16]
 80112f6:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80112fa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80112fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011300:	2600      	movs	r6, #0
 8011302:	61ee      	str	r6, [r5, #28]
 8011304:	61a6      	str	r6, [r4, #24]
 8011306:	2b00      	cmp	r3, #0
 8011308:	f040 80af 	bne.w	801146a <rcl_wait_set_resize+0x262>
 801130c:	69a8      	ldr	r0, [r5, #24]
 801130e:	b120      	cbz	r0, 801131a <rcl_wait_set_resize+0x112>
 8011310:	4649      	mov	r1, r9
 8011312:	47d0      	blx	sl
 8011314:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011316:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011318:	61ab      	str	r3, [r5, #24]
 801131a:	6a20      	ldr	r0, [r4, #32]
 801131c:	b128      	cbz	r0, 801132a <rcl_wait_set_resize+0x122>
 801131e:	4649      	mov	r1, r9
 8011320:	47d0      	blx	sl
 8011322:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011324:	2300      	movs	r3, #0
 8011326:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801132a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801132c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801132e:	2600      	movs	r6, #0
 8011330:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011334:	626e      	str	r6, [r5, #36]	@ 0x24
 8011336:	6266      	str	r6, [r4, #36]	@ 0x24
 8011338:	2b00      	cmp	r3, #0
 801133a:	f000 80b6 	beq.w	80114aa <rcl_wait_set_resize+0x2a2>
 801133e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8011342:	6a28      	ldr	r0, [r5, #32]
 8011344:	463a      	mov	r2, r7
 8011346:	4651      	mov	r1, sl
 8011348:	47c8      	blx	r9
 801134a:	6228      	str	r0, [r5, #32]
 801134c:	2800      	cmp	r0, #0
 801134e:	d04c      	beq.n	80113ea <rcl_wait_set_resize+0x1e2>
 8011350:	4652      	mov	r2, sl
 8011352:	4631      	mov	r1, r6
 8011354:	f005 fcee 	bl	8016d34 <memset>
 8011358:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801135a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801135c:	626b      	str	r3, [r5, #36]	@ 0x24
 801135e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011360:	62a6      	str	r6, [r4, #40]	@ 0x28
 8011362:	463a      	mov	r2, r7
 8011364:	4651      	mov	r1, sl
 8011366:	47c8      	blx	r9
 8011368:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801136a:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801136c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801136e:	2c00      	cmp	r4, #0
 8011370:	f000 80f0 	beq.w	8011554 <rcl_wait_set_resize+0x34c>
 8011374:	4620      	mov	r0, r4
 8011376:	4652      	mov	r2, sl
 8011378:	4631      	mov	r1, r6
 801137a:	f005 fcdb 	bl	8016d34 <memset>
 801137e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011380:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011382:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011384:	2600      	movs	r6, #0
 8011386:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801138a:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801138c:	6326      	str	r6, [r4, #48]	@ 0x30
 801138e:	2b00      	cmp	r3, #0
 8011390:	f040 809d 	bne.w	80114ce <rcl_wait_set_resize+0x2c6>
 8011394:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011396:	b120      	cbz	r0, 80113a2 <rcl_wait_set_resize+0x19a>
 8011398:	4639      	mov	r1, r7
 801139a:	47c0      	blx	r8
 801139c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801139e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80113a0:	62ab      	str	r3, [r5, #40]	@ 0x28
 80113a2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80113a4:	b310      	cbz	r0, 80113ec <rcl_wait_set_resize+0x1e4>
 80113a6:	4639      	mov	r1, r7
 80113a8:	47c0      	blx	r8
 80113aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80113ac:	2000      	movs	r0, #0
 80113ae:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80113b2:	b003      	add	sp, #12
 80113b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b8:	6800      	ldr	r0, [r0, #0]
 80113ba:	b120      	cbz	r0, 80113c6 <rcl_wait_set_resize+0x1be>
 80113bc:	4651      	mov	r1, sl
 80113be:	47d8      	blx	fp
 80113c0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80113c2:	f8c5 8000 	str.w	r8, [r5]
 80113c6:	68a0      	ldr	r0, [r4, #8]
 80113c8:	2800      	cmp	r0, #0
 80113ca:	f43f af61 	beq.w	8011290 <rcl_wait_set_resize+0x88>
 80113ce:	4651      	mov	r1, sl
 80113d0:	47d8      	blx	fp
 80113d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80113d4:	2300      	movs	r3, #0
 80113d6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80113da:	e759      	b.n	8011290 <rcl_wait_set_resize+0x88>
 80113dc:	6828      	ldr	r0, [r5, #0]
 80113de:	9301      	str	r3, [sp, #4]
 80113e0:	4651      	mov	r1, sl
 80113e2:	47d8      	blx	fp
 80113e4:	9b01      	ldr	r3, [sp, #4]
 80113e6:	e9c5 3300 	strd	r3, r3, [r5]
 80113ea:	200a      	movs	r0, #10
 80113ec:	b003      	add	sp, #12
 80113ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113f2:	00b4      	lsls	r4, r6, #2
 80113f4:	68a8      	ldr	r0, [r5, #8]
 80113f6:	464a      	mov	r2, r9
 80113f8:	4621      	mov	r1, r4
 80113fa:	4798      	blx	r3
 80113fc:	60a8      	str	r0, [r5, #8]
 80113fe:	2800      	cmp	r0, #0
 8011400:	d0f3      	beq.n	80113ea <rcl_wait_set_resize+0x1e2>
 8011402:	4622      	mov	r2, r4
 8011404:	4641      	mov	r1, r8
 8011406:	f005 fc95 	bl	8016d34 <memset>
 801140a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801140c:	60ee      	str	r6, [r5, #12]
 801140e:	f04f 0800 	mov.w	r8, #0
 8011412:	19f6      	adds	r6, r6, r7
 8011414:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011418:	f8c4 8010 	str.w	r8, [r4, #16]
 801141c:	f43f af54 	beq.w	80112c8 <rcl_wait_set_resize+0xc0>
 8011420:	00b6      	lsls	r6, r6, #2
 8011422:	464a      	mov	r2, r9
 8011424:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8011426:	6960      	ldr	r0, [r4, #20]
 8011428:	4631      	mov	r1, r6
 801142a:	4798      	blx	r3
 801142c:	4681      	mov	r9, r0
 801142e:	6160      	str	r0, [r4, #20]
 8011430:	2800      	cmp	r0, #0
 8011432:	d076      	beq.n	8011522 <rcl_wait_set_resize+0x31a>
 8011434:	4632      	mov	r2, r6
 8011436:	4641      	mov	r1, r8
 8011438:	f005 fc7c 	bl	8016d34 <memset>
 801143c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801143e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011442:	e74a      	b.n	80112da <rcl_wait_set_resize+0xd2>
 8011444:	00bc      	lsls	r4, r7, #2
 8011446:	6928      	ldr	r0, [r5, #16]
 8011448:	464a      	mov	r2, r9
 801144a:	4621      	mov	r1, r4
 801144c:	47c0      	blx	r8
 801144e:	6128      	str	r0, [r5, #16]
 8011450:	2800      	cmp	r0, #0
 8011452:	d0ca      	beq.n	80113ea <rcl_wait_set_resize+0x1e2>
 8011454:	4622      	mov	r2, r4
 8011456:	4631      	mov	r1, r6
 8011458:	f005 fc6c 	bl	8016d34 <memset>
 801145c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801145e:	616f      	str	r7, [r5, #20]
 8011460:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011464:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011468:	e749      	b.n	80112fe <rcl_wait_set_resize+0xf6>
 801146a:	009c      	lsls	r4, r3, #2
 801146c:	69a8      	ldr	r0, [r5, #24]
 801146e:	464a      	mov	r2, r9
 8011470:	4621      	mov	r1, r4
 8011472:	47c0      	blx	r8
 8011474:	61a8      	str	r0, [r5, #24]
 8011476:	2800      	cmp	r0, #0
 8011478:	d0b7      	beq.n	80113ea <rcl_wait_set_resize+0x1e2>
 801147a:	4622      	mov	r2, r4
 801147c:	4631      	mov	r1, r6
 801147e:	f005 fc59 	bl	8016d34 <memset>
 8011482:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8011484:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011486:	61eb      	str	r3, [r5, #28]
 8011488:	6a38      	ldr	r0, [r7, #32]
 801148a:	61fe      	str	r6, [r7, #28]
 801148c:	464a      	mov	r2, r9
 801148e:	4621      	mov	r1, r4
 8011490:	47c0      	blx	r8
 8011492:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011494:	6238      	str	r0, [r7, #32]
 8011496:	6a1f      	ldr	r7, [r3, #32]
 8011498:	2f00      	cmp	r7, #0
 801149a:	d054      	beq.n	8011546 <rcl_wait_set_resize+0x33e>
 801149c:	4622      	mov	r2, r4
 801149e:	4631      	mov	r1, r6
 80114a0:	4638      	mov	r0, r7
 80114a2:	f005 fc47 	bl	8016d34 <memset>
 80114a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80114a8:	e73f      	b.n	801132a <rcl_wait_set_resize+0x122>
 80114aa:	6a28      	ldr	r0, [r5, #32]
 80114ac:	b120      	cbz	r0, 80114b8 <rcl_wait_set_resize+0x2b0>
 80114ae:	4639      	mov	r1, r7
 80114b0:	47c0      	blx	r8
 80114b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114b4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80114b6:	622b      	str	r3, [r5, #32]
 80114b8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80114ba:	2800      	cmp	r0, #0
 80114bc:	f43f af60 	beq.w	8011380 <rcl_wait_set_resize+0x178>
 80114c0:	4639      	mov	r1, r7
 80114c2:	47c0      	blx	r8
 80114c4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80114c6:	2300      	movs	r3, #0
 80114c8:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80114cc:	e758      	b.n	8011380 <rcl_wait_set_resize+0x178>
 80114ce:	009c      	lsls	r4, r3, #2
 80114d0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80114d2:	463a      	mov	r2, r7
 80114d4:	4621      	mov	r1, r4
 80114d6:	47c8      	blx	r9
 80114d8:	62a8      	str	r0, [r5, #40]	@ 0x28
 80114da:	2800      	cmp	r0, #0
 80114dc:	d085      	beq.n	80113ea <rcl_wait_set_resize+0x1e2>
 80114de:	4622      	mov	r2, r4
 80114e0:	4631      	mov	r1, r6
 80114e2:	f005 fc27 	bl	8016d34 <memset>
 80114e6:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80114ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114ec:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80114ee:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80114f2:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80114f6:	463a      	mov	r2, r7
 80114f8:	4621      	mov	r1, r4
 80114fa:	47c8      	blx	r9
 80114fc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80114fe:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8011502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011504:	b36b      	cbz	r3, 8011562 <rcl_wait_set_resize+0x35a>
 8011506:	4622      	mov	r2, r4
 8011508:	4631      	mov	r1, r6
 801150a:	4618      	mov	r0, r3
 801150c:	f005 fc12 	bl	8016d34 <memset>
 8011510:	4630      	mov	r0, r6
 8011512:	b003      	add	sp, #12
 8011514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011518:	200b      	movs	r0, #11
 801151a:	4770      	bx	lr
 801151c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011520:	e764      	b.n	80113ec <rcl_wait_set_resize+0x1e4>
 8011522:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011524:	68a8      	ldr	r0, [r5, #8]
 8011526:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801152a:	4798      	blx	r3
 801152c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801152e:	6928      	ldr	r0, [r5, #16]
 8011530:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011532:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011534:	f8c5 900c 	str.w	r9, [r5, #12]
 8011538:	f8c5 9008 	str.w	r9, [r5, #8]
 801153c:	4790      	blx	r2
 801153e:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8011542:	200a      	movs	r0, #10
 8011544:	e752      	b.n	80113ec <rcl_wait_set_resize+0x1e4>
 8011546:	69a8      	ldr	r0, [r5, #24]
 8011548:	4649      	mov	r1, r9
 801154a:	47d0      	blx	sl
 801154c:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8011550:	200a      	movs	r0, #10
 8011552:	e74b      	b.n	80113ec <rcl_wait_set_resize+0x1e4>
 8011554:	6a28      	ldr	r0, [r5, #32]
 8011556:	4639      	mov	r1, r7
 8011558:	47c0      	blx	r8
 801155a:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801155e:	200a      	movs	r0, #10
 8011560:	e744      	b.n	80113ec <rcl_wait_set_resize+0x1e4>
 8011562:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011564:	9301      	str	r3, [sp, #4]
 8011566:	4639      	mov	r1, r7
 8011568:	47c0      	blx	r8
 801156a:	9b01      	ldr	r3, [sp, #4]
 801156c:	200a      	movs	r0, #10
 801156e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011572:	e73b      	b.n	80113ec <rcl_wait_set_resize+0x1e4>

08011574 <rcl_wait_set_init>:
 8011574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011578:	b084      	sub	sp, #16
 801157a:	4604      	mov	r4, r0
 801157c:	a810      	add	r0, sp, #64	@ 0x40
 801157e:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8011582:	460f      	mov	r7, r1
 8011584:	4690      	mov	r8, r2
 8011586:	4699      	mov	r9, r3
 8011588:	f7f9 ff9e 	bl	800b4c8 <rcutils_allocator_is_valid>
 801158c:	2800      	cmp	r0, #0
 801158e:	d06b      	beq.n	8011668 <rcl_wait_set_init+0xf4>
 8011590:	2c00      	cmp	r4, #0
 8011592:	d069      	beq.n	8011668 <rcl_wait_set_init+0xf4>
 8011594:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011596:	b125      	cbz	r5, 80115a2 <rcl_wait_set_init+0x2e>
 8011598:	2564      	movs	r5, #100	@ 0x64
 801159a:	4628      	mov	r0, r5
 801159c:	b004      	add	sp, #16
 801159e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115a2:	f1ba 0f00 	cmp.w	sl, #0
 80115a6:	d05f      	beq.n	8011668 <rcl_wait_set_init+0xf4>
 80115a8:	4650      	mov	r0, sl
 80115aa:	f7fe fb8d 	bl	800fcc8 <rcl_context_is_valid>
 80115ae:	2800      	cmp	r0, #0
 80115b0:	d067      	beq.n	8011682 <rcl_wait_set_init+0x10e>
 80115b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80115b4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80115b6:	205c      	movs	r0, #92	@ 0x5c
 80115b8:	4798      	blx	r3
 80115ba:	6320      	str	r0, [r4, #48]	@ 0x30
 80115bc:	2800      	cmp	r0, #0
 80115be:	d062      	beq.n	8011686 <rcl_wait_set_init+0x112>
 80115c0:	4629      	mov	r1, r5
 80115c2:	225c      	movs	r2, #92	@ 0x5c
 80115c4:	f005 fbb6 	bl	8016d34 <memset>
 80115c8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80115cc:	eb03 0e02 	add.w	lr, r3, r2
 80115d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115d2:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80115d4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80115d8:	449e      	add	lr, r3
 80115da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80115de:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80115e2:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80115e6:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80115ea:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80115ee:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80115f2:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80115f6:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80115fa:	f8da a000 	ldr.w	sl, [sl]
 80115fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011600:	44c6      	add	lr, r8
 8011602:	f8dc 3000 	ldr.w	r3, [ip]
 8011606:	602b      	str	r3, [r5, #0]
 8011608:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 801160c:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8011610:	f002 fd72 	bl	80140f8 <rmw_create_wait_set>
 8011614:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011616:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8011618:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801161a:	b350      	cbz	r0, 8011672 <rcl_wait_set_init+0xfe>
 801161c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801161e:	9302      	str	r3, [sp, #8]
 8011620:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011622:	9301      	str	r3, [sp, #4]
 8011624:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011626:	9300      	str	r3, [sp, #0]
 8011628:	4642      	mov	r2, r8
 801162a:	464b      	mov	r3, r9
 801162c:	4639      	mov	r1, r7
 801162e:	4620      	mov	r0, r4
 8011630:	f7ff fdea 	bl	8011208 <rcl_wait_set_resize>
 8011634:	4605      	mov	r5, r0
 8011636:	2800      	cmp	r0, #0
 8011638:	d0af      	beq.n	801159a <rcl_wait_set_init+0x26>
 801163a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801163c:	bb2b      	cbnz	r3, 801168a <rcl_wait_set_init+0x116>
 801163e:	2600      	movs	r6, #0
 8011640:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8011644:	9600      	str	r6, [sp, #0]
 8011646:	4633      	mov	r3, r6
 8011648:	4632      	mov	r2, r6
 801164a:	4631      	mov	r1, r6
 801164c:	4620      	mov	r0, r4
 801164e:	f7ff fddb 	bl	8011208 <rcl_wait_set_resize>
 8011652:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011654:	2800      	cmp	r0, #0
 8011656:	d0a0      	beq.n	801159a <rcl_wait_set_init+0x26>
 8011658:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801165a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801165c:	4798      	blx	r3
 801165e:	4628      	mov	r0, r5
 8011660:	6326      	str	r6, [r4, #48]	@ 0x30
 8011662:	b004      	add	sp, #16
 8011664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011668:	250b      	movs	r5, #11
 801166a:	4628      	mov	r0, r5
 801166c:	b004      	add	sp, #16
 801166e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011672:	2501      	movs	r5, #1
 8011674:	f002 fd4a 	bl	801410c <rmw_destroy_wait_set>
 8011678:	2800      	cmp	r0, #0
 801167a:	bf18      	it	ne
 801167c:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8011680:	e7dd      	b.n	801163e <rcl_wait_set_init+0xca>
 8011682:	2565      	movs	r5, #101	@ 0x65
 8011684:	e789      	b.n	801159a <rcl_wait_set_init+0x26>
 8011686:	250a      	movs	r5, #10
 8011688:	e787      	b.n	801159a <rcl_wait_set_init+0x26>
 801168a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801168c:	e7f2      	b.n	8011674 <rcl_wait_set_init+0x100>
 801168e:	bf00      	nop

08011690 <rcl_wait_set_add_guard_condition>:
 8011690:	b318      	cbz	r0, 80116da <rcl_wait_set_add_guard_condition+0x4a>
 8011692:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011694:	b570      	push	{r4, r5, r6, lr}
 8011696:	4604      	mov	r4, r0
 8011698:	b30b      	cbz	r3, 80116de <rcl_wait_set_add_guard_condition+0x4e>
 801169a:	b319      	cbz	r1, 80116e4 <rcl_wait_set_add_guard_condition+0x54>
 801169c:	68dd      	ldr	r5, [r3, #12]
 801169e:	68c0      	ldr	r0, [r0, #12]
 80116a0:	4285      	cmp	r5, r0
 80116a2:	d217      	bcs.n	80116d4 <rcl_wait_set_add_guard_condition+0x44>
 80116a4:	68a0      	ldr	r0, [r4, #8]
 80116a6:	1c6e      	adds	r6, r5, #1
 80116a8:	60de      	str	r6, [r3, #12]
 80116aa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80116ae:	b102      	cbz	r2, 80116b2 <rcl_wait_set_add_guard_condition+0x22>
 80116b0:	6015      	str	r5, [r2, #0]
 80116b2:	4608      	mov	r0, r1
 80116b4:	f004 fd6e 	bl	8016194 <rcl_guard_condition_get_rmw_handle>
 80116b8:	b150      	cbz	r0, 80116d0 <rcl_wait_set_add_guard_condition+0x40>
 80116ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80116bc:	6842      	ldr	r2, [r0, #4]
 80116be:	695b      	ldr	r3, [r3, #20]
 80116c0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80116c4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80116c6:	6913      	ldr	r3, [r2, #16]
 80116c8:	3301      	adds	r3, #1
 80116ca:	2000      	movs	r0, #0
 80116cc:	6113      	str	r3, [r2, #16]
 80116ce:	bd70      	pop	{r4, r5, r6, pc}
 80116d0:	2001      	movs	r0, #1
 80116d2:	bd70      	pop	{r4, r5, r6, pc}
 80116d4:	f240 3086 	movw	r0, #902	@ 0x386
 80116d8:	bd70      	pop	{r4, r5, r6, pc}
 80116da:	200b      	movs	r0, #11
 80116dc:	4770      	bx	lr
 80116de:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80116e2:	bd70      	pop	{r4, r5, r6, pc}
 80116e4:	200b      	movs	r0, #11
 80116e6:	bd70      	pop	{r4, r5, r6, pc}

080116e8 <rcl_wait_set_add_timer>:
 80116e8:	b328      	cbz	r0, 8011736 <rcl_wait_set_add_timer+0x4e>
 80116ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80116ec:	b570      	push	{r4, r5, r6, lr}
 80116ee:	4604      	mov	r4, r0
 80116f0:	b31b      	cbz	r3, 801173a <rcl_wait_set_add_timer+0x52>
 80116f2:	b329      	cbz	r1, 8011740 <rcl_wait_set_add_timer+0x58>
 80116f4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80116f6:	6965      	ldr	r5, [r4, #20]
 80116f8:	42a8      	cmp	r0, r5
 80116fa:	d219      	bcs.n	8011730 <rcl_wait_set_add_timer+0x48>
 80116fc:	6925      	ldr	r5, [r4, #16]
 80116fe:	1c46      	adds	r6, r0, #1
 8011700:	641e      	str	r6, [r3, #64]	@ 0x40
 8011702:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011706:	b102      	cbz	r2, 801170a <rcl_wait_set_add_timer+0x22>
 8011708:	6010      	str	r0, [r2, #0]
 801170a:	4608      	mov	r0, r1
 801170c:	f7ff fc10 	bl	8010f30 <rcl_timer_get_guard_condition>
 8011710:	b168      	cbz	r0, 801172e <rcl_wait_set_add_timer+0x46>
 8011712:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011714:	68e3      	ldr	r3, [r4, #12]
 8011716:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8011718:	3b01      	subs	r3, #1
 801171a:	441d      	add	r5, r3
 801171c:	f004 fd3a 	bl	8016194 <rcl_guard_condition_get_rmw_handle>
 8011720:	b180      	cbz	r0, 8011744 <rcl_wait_set_add_timer+0x5c>
 8011722:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011724:	6842      	ldr	r2, [r0, #4]
 8011726:	695b      	ldr	r3, [r3, #20]
 8011728:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801172c:	2000      	movs	r0, #0
 801172e:	bd70      	pop	{r4, r5, r6, pc}
 8011730:	f240 3086 	movw	r0, #902	@ 0x386
 8011734:	bd70      	pop	{r4, r5, r6, pc}
 8011736:	200b      	movs	r0, #11
 8011738:	4770      	bx	lr
 801173a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801173e:	bd70      	pop	{r4, r5, r6, pc}
 8011740:	200b      	movs	r0, #11
 8011742:	bd70      	pop	{r4, r5, r6, pc}
 8011744:	2001      	movs	r0, #1
 8011746:	bd70      	pop	{r4, r5, r6, pc}

08011748 <rcl_wait_set_add_client>:
 8011748:	b318      	cbz	r0, 8011792 <rcl_wait_set_add_client+0x4a>
 801174a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801174c:	b570      	push	{r4, r5, r6, lr}
 801174e:	4604      	mov	r4, r0
 8011750:	b30b      	cbz	r3, 8011796 <rcl_wait_set_add_client+0x4e>
 8011752:	b319      	cbz	r1, 801179c <rcl_wait_set_add_client+0x54>
 8011754:	699d      	ldr	r5, [r3, #24]
 8011756:	69c0      	ldr	r0, [r0, #28]
 8011758:	4285      	cmp	r5, r0
 801175a:	d217      	bcs.n	801178c <rcl_wait_set_add_client+0x44>
 801175c:	69a0      	ldr	r0, [r4, #24]
 801175e:	1c6e      	adds	r6, r5, #1
 8011760:	619e      	str	r6, [r3, #24]
 8011762:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011766:	b102      	cbz	r2, 801176a <rcl_wait_set_add_client+0x22>
 8011768:	6015      	str	r5, [r2, #0]
 801176a:	4608      	mov	r0, r1
 801176c:	f7fe fa00 	bl	800fb70 <rcl_client_get_rmw_handle>
 8011770:	b150      	cbz	r0, 8011788 <rcl_wait_set_add_client+0x40>
 8011772:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011774:	6842      	ldr	r2, [r0, #4]
 8011776:	6a1b      	ldr	r3, [r3, #32]
 8011778:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801177c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801177e:	69d3      	ldr	r3, [r2, #28]
 8011780:	3301      	adds	r3, #1
 8011782:	2000      	movs	r0, #0
 8011784:	61d3      	str	r3, [r2, #28]
 8011786:	bd70      	pop	{r4, r5, r6, pc}
 8011788:	2001      	movs	r0, #1
 801178a:	bd70      	pop	{r4, r5, r6, pc}
 801178c:	f240 3086 	movw	r0, #902	@ 0x386
 8011790:	bd70      	pop	{r4, r5, r6, pc}
 8011792:	200b      	movs	r0, #11
 8011794:	4770      	bx	lr
 8011796:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801179a:	bd70      	pop	{r4, r5, r6, pc}
 801179c:	200b      	movs	r0, #11
 801179e:	bd70      	pop	{r4, r5, r6, pc}

080117a0 <rcl_wait_set_add_service>:
 80117a0:	b318      	cbz	r0, 80117ea <rcl_wait_set_add_service+0x4a>
 80117a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80117a4:	b570      	push	{r4, r5, r6, lr}
 80117a6:	4604      	mov	r4, r0
 80117a8:	b30b      	cbz	r3, 80117ee <rcl_wait_set_add_service+0x4e>
 80117aa:	b319      	cbz	r1, 80117f4 <rcl_wait_set_add_service+0x54>
 80117ac:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80117ae:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80117b0:	4285      	cmp	r5, r0
 80117b2:	d217      	bcs.n	80117e4 <rcl_wait_set_add_service+0x44>
 80117b4:	6a20      	ldr	r0, [r4, #32]
 80117b6:	1c6e      	adds	r6, r5, #1
 80117b8:	625e      	str	r6, [r3, #36]	@ 0x24
 80117ba:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80117be:	b102      	cbz	r2, 80117c2 <rcl_wait_set_add_service+0x22>
 80117c0:	6015      	str	r5, [r2, #0]
 80117c2:	4608      	mov	r0, r1
 80117c4:	f7fe ff40 	bl	8010648 <rcl_service_get_rmw_handle>
 80117c8:	b150      	cbz	r0, 80117e0 <rcl_wait_set_add_service+0x40>
 80117ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80117cc:	6842      	ldr	r2, [r0, #4]
 80117ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117d0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80117d4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80117d6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80117d8:	3301      	adds	r3, #1
 80117da:	2000      	movs	r0, #0
 80117dc:	6293      	str	r3, [r2, #40]	@ 0x28
 80117de:	bd70      	pop	{r4, r5, r6, pc}
 80117e0:	2001      	movs	r0, #1
 80117e2:	bd70      	pop	{r4, r5, r6, pc}
 80117e4:	f240 3086 	movw	r0, #902	@ 0x386
 80117e8:	bd70      	pop	{r4, r5, r6, pc}
 80117ea:	200b      	movs	r0, #11
 80117ec:	4770      	bx	lr
 80117ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80117f2:	bd70      	pop	{r4, r5, r6, pc}
 80117f4:	200b      	movs	r0, #11
 80117f6:	bd70      	pop	{r4, r5, r6, pc}

080117f8 <rcl_wait>:
 80117f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117fc:	ed2d 8b02 	vpush	{d8}
 8011800:	b08d      	sub	sp, #52	@ 0x34
 8011802:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011806:	2800      	cmp	r0, #0
 8011808:	f000 8143 	beq.w	8011a92 <rcl_wait+0x29a>
 801180c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801180e:	4605      	mov	r5, r0
 8011810:	2e00      	cmp	r6, #0
 8011812:	f000 8112 	beq.w	8011a3a <rcl_wait+0x242>
 8011816:	6843      	ldr	r3, [r0, #4]
 8011818:	b983      	cbnz	r3, 801183c <rcl_wait+0x44>
 801181a:	68eb      	ldr	r3, [r5, #12]
 801181c:	b973      	cbnz	r3, 801183c <rcl_wait+0x44>
 801181e:	696b      	ldr	r3, [r5, #20]
 8011820:	b963      	cbnz	r3, 801183c <rcl_wait+0x44>
 8011822:	69eb      	ldr	r3, [r5, #28]
 8011824:	b953      	cbnz	r3, 801183c <rcl_wait+0x44>
 8011826:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8011828:	b943      	cbnz	r3, 801183c <rcl_wait+0x44>
 801182a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801182c:	b933      	cbnz	r3, 801183c <rcl_wait+0x44>
 801182e:	f240 3085 	movw	r0, #901	@ 0x385
 8011832:	b00d      	add	sp, #52	@ 0x34
 8011834:	ecbd 8b02 	vpop	{d8}
 8011838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801183c:	9b04      	ldr	r3, [sp, #16]
 801183e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8011840:	2b01      	cmp	r3, #1
 8011842:	9b05      	ldr	r3, [sp, #20]
 8011844:	f173 0300 	sbcs.w	r3, r3, #0
 8011848:	f2c0 80f0 	blt.w	8011a2c <rcl_wait+0x234>
 801184c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8011850:	4643      	mov	r3, r8
 8011852:	2a00      	cmp	r2, #0
 8011854:	f000 8133 	beq.w	8011abe <rcl_wait+0x2c6>
 8011858:	2400      	movs	r4, #0
 801185a:	4613      	mov	r3, r2
 801185c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8011ad0 <rcl_wait+0x2d8>
 8011860:	46a2      	mov	sl, r4
 8011862:	46a3      	mov	fp, r4
 8011864:	f240 3921 	movw	r9, #801	@ 0x321
 8011868:	4632      	mov	r2, r6
 801186a:	e014      	b.n	8011896 <rcl_wait+0x9e>
 801186c:	2800      	cmp	r0, #0
 801186e:	d1e0      	bne.n	8011832 <rcl_wait+0x3a>
 8011870:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011874:	4542      	cmp	r2, r8
 8011876:	eb73 0107 	sbcs.w	r1, r3, r7
 801187a:	da03      	bge.n	8011884 <rcl_wait+0x8c>
 801187c:	4690      	mov	r8, r2
 801187e:	461f      	mov	r7, r3
 8011880:	f04f 0b01 	mov.w	fp, #1
 8011884:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011886:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011888:	3401      	adds	r4, #1
 801188a:	f14a 0a00 	adc.w	sl, sl, #0
 801188e:	429c      	cmp	r4, r3
 8011890:	f17a 0100 	sbcs.w	r1, sl, #0
 8011894:	d228      	bcs.n	80118e8 <rcl_wait+0xf0>
 8011896:	6928      	ldr	r0, [r5, #16]
 8011898:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801189c:	a908      	add	r1, sp, #32
 801189e:	00a6      	lsls	r6, r4, #2
 80118a0:	2800      	cmp	r0, #0
 80118a2:	d0f1      	beq.n	8011888 <rcl_wait+0x90>
 80118a4:	68eb      	ldr	r3, [r5, #12]
 80118a6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80118aa:	4423      	add	r3, r4
 80118ac:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80118b0:	f1be 0f00 	cmp.w	lr, #0
 80118b4:	d006      	beq.n	80118c4 <rcl_wait+0xcc>
 80118b6:	6913      	ldr	r3, [r2, #16]
 80118b8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80118bc:	3301      	adds	r3, #1
 80118be:	6113      	str	r3, [r2, #16]
 80118c0:	692b      	ldr	r3, [r5, #16]
 80118c2:	5998      	ldr	r0, [r3, r6]
 80118c4:	ed8d 8b08 	vstr	d8, [sp, #32]
 80118c8:	f7ff fb00 	bl	8010ecc <rcl_timer_get_time_until_next_call>
 80118cc:	4548      	cmp	r0, r9
 80118ce:	d1cd      	bne.n	801186c <rcl_wait+0x74>
 80118d0:	692b      	ldr	r3, [r5, #16]
 80118d2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80118d4:	2100      	movs	r1, #0
 80118d6:	5199      	str	r1, [r3, r6]
 80118d8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80118da:	3401      	adds	r4, #1
 80118dc:	f14a 0a00 	adc.w	sl, sl, #0
 80118e0:	429c      	cmp	r4, r3
 80118e2:	f17a 0100 	sbcs.w	r1, sl, #0
 80118e6:	d3d6      	bcc.n	8011896 <rcl_wait+0x9e>
 80118e8:	4616      	mov	r6, r2
 80118ea:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80118ee:	4313      	orrs	r3, r2
 80118f0:	46d9      	mov	r9, fp
 80118f2:	f040 80a9 	bne.w	8011a48 <rcl_wait+0x250>
 80118f6:	2300      	movs	r3, #0
 80118f8:	2200      	movs	r2, #0
 80118fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80118fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011902:	ab08      	add	r3, sp, #32
 8011904:	9302      	str	r3, [sp, #8]
 8011906:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8011908:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801190c:	e9cd 3200 	strd	r3, r2, [sp]
 8011910:	f106 0110 	add.w	r1, r6, #16
 8011914:	f106 031c 	add.w	r3, r6, #28
 8011918:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801191c:	1d30      	adds	r0, r6, #4
 801191e:	f002 fa73 	bl	8013e08 <rmw_wait>
 8011922:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011924:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011926:	4680      	mov	r8, r0
 8011928:	b1ca      	cbz	r2, 801195e <rcl_wait+0x166>
 801192a:	2400      	movs	r4, #0
 801192c:	4627      	mov	r7, r4
 801192e:	692a      	ldr	r2, [r5, #16]
 8011930:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8011934:	f10d 011f 	add.w	r1, sp, #31
 8011938:	00a6      	lsls	r6, r4, #2
 801193a:	b160      	cbz	r0, 8011956 <rcl_wait+0x15e>
 801193c:	f88d 701f 	strb.w	r7, [sp, #31]
 8011940:	f7ff fa8a 	bl	8010e58 <rcl_timer_is_ready>
 8011944:	2800      	cmp	r0, #0
 8011946:	f47f af74 	bne.w	8011832 <rcl_wait+0x3a>
 801194a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801194e:	b90b      	cbnz	r3, 8011954 <rcl_wait+0x15c>
 8011950:	692a      	ldr	r2, [r5, #16]
 8011952:	5193      	str	r3, [r2, r6]
 8011954:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011956:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011958:	3401      	adds	r4, #1
 801195a:	42a2      	cmp	r2, r4
 801195c:	d8e7      	bhi.n	801192e <rcl_wait+0x136>
 801195e:	f038 0002 	bics.w	r0, r8, #2
 8011962:	f040 8090 	bne.w	8011a86 <rcl_wait+0x28e>
 8011966:	686e      	ldr	r6, [r5, #4]
 8011968:	4602      	mov	r2, r0
 801196a:	b91e      	cbnz	r6, 8011974 <rcl_wait+0x17c>
 801196c:	e00d      	b.n	801198a <rcl_wait+0x192>
 801196e:	3201      	adds	r2, #1
 8011970:	42b2      	cmp	r2, r6
 8011972:	d00a      	beq.n	801198a <rcl_wait+0x192>
 8011974:	6899      	ldr	r1, [r3, #8]
 8011976:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801197a:	2900      	cmp	r1, #0
 801197c:	d1f7      	bne.n	801196e <rcl_wait+0x176>
 801197e:	682c      	ldr	r4, [r5, #0]
 8011980:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011984:	3201      	adds	r2, #1
 8011986:	42b2      	cmp	r2, r6
 8011988:	d1f4      	bne.n	8011974 <rcl_wait+0x17c>
 801198a:	68ee      	ldr	r6, [r5, #12]
 801198c:	2200      	movs	r2, #0
 801198e:	b91e      	cbnz	r6, 8011998 <rcl_wait+0x1a0>
 8011990:	e00d      	b.n	80119ae <rcl_wait+0x1b6>
 8011992:	3201      	adds	r2, #1
 8011994:	42b2      	cmp	r2, r6
 8011996:	d00a      	beq.n	80119ae <rcl_wait+0x1b6>
 8011998:	6959      	ldr	r1, [r3, #20]
 801199a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801199e:	2900      	cmp	r1, #0
 80119a0:	d1f7      	bne.n	8011992 <rcl_wait+0x19a>
 80119a2:	68ac      	ldr	r4, [r5, #8]
 80119a4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80119a8:	3201      	adds	r2, #1
 80119aa:	42b2      	cmp	r2, r6
 80119ac:	d1f4      	bne.n	8011998 <rcl_wait+0x1a0>
 80119ae:	69ee      	ldr	r6, [r5, #28]
 80119b0:	2200      	movs	r2, #0
 80119b2:	b91e      	cbnz	r6, 80119bc <rcl_wait+0x1c4>
 80119b4:	e00d      	b.n	80119d2 <rcl_wait+0x1da>
 80119b6:	3201      	adds	r2, #1
 80119b8:	42b2      	cmp	r2, r6
 80119ba:	d00a      	beq.n	80119d2 <rcl_wait+0x1da>
 80119bc:	6a19      	ldr	r1, [r3, #32]
 80119be:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80119c2:	2900      	cmp	r1, #0
 80119c4:	d1f7      	bne.n	80119b6 <rcl_wait+0x1be>
 80119c6:	69ac      	ldr	r4, [r5, #24]
 80119c8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80119cc:	3201      	adds	r2, #1
 80119ce:	42b2      	cmp	r2, r6
 80119d0:	d1f4      	bne.n	80119bc <rcl_wait+0x1c4>
 80119d2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80119d4:	2200      	movs	r2, #0
 80119d6:	b91e      	cbnz	r6, 80119e0 <rcl_wait+0x1e8>
 80119d8:	e00d      	b.n	80119f6 <rcl_wait+0x1fe>
 80119da:	3201      	adds	r2, #1
 80119dc:	4296      	cmp	r6, r2
 80119de:	d00a      	beq.n	80119f6 <rcl_wait+0x1fe>
 80119e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80119e2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80119e6:	2900      	cmp	r1, #0
 80119e8:	d1f7      	bne.n	80119da <rcl_wait+0x1e2>
 80119ea:	6a2c      	ldr	r4, [r5, #32]
 80119ec:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80119f0:	3201      	adds	r2, #1
 80119f2:	4296      	cmp	r6, r2
 80119f4:	d1f4      	bne.n	80119e0 <rcl_wait+0x1e8>
 80119f6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80119f8:	2200      	movs	r2, #0
 80119fa:	b91e      	cbnz	r6, 8011a04 <rcl_wait+0x20c>
 80119fc:	e00d      	b.n	8011a1a <rcl_wait+0x222>
 80119fe:	3201      	adds	r2, #1
 8011a00:	42b2      	cmp	r2, r6
 8011a02:	d00a      	beq.n	8011a1a <rcl_wait+0x222>
 8011a04:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8011a06:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011a0a:	2900      	cmp	r1, #0
 8011a0c:	d1f7      	bne.n	80119fe <rcl_wait+0x206>
 8011a0e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8011a10:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011a14:	3201      	adds	r2, #1
 8011a16:	42b2      	cmp	r2, r6
 8011a18:	d1f4      	bne.n	8011a04 <rcl_wait+0x20c>
 8011a1a:	f1b8 0f02 	cmp.w	r8, #2
 8011a1e:	f47f af08 	bne.w	8011832 <rcl_wait+0x3a>
 8011a22:	464b      	mov	r3, r9
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	bf08      	it	eq
 8011a28:	2002      	moveq	r0, #2
 8011a2a:	e702      	b.n	8011832 <rcl_wait+0x3a>
 8011a2c:	2a00      	cmp	r2, #0
 8011a2e:	d03a      	beq.n	8011aa6 <rcl_wait+0x2ae>
 8011a30:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011a34:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011a38:	e70e      	b.n	8011858 <rcl_wait+0x60>
 8011a3a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a3e:	b00d      	add	sp, #52	@ 0x34
 8011a40:	ecbd 8b02 	vpop	{d8}
 8011a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a48:	9b04      	ldr	r3, [sp, #16]
 8011a4a:	2b01      	cmp	r3, #1
 8011a4c:	9b05      	ldr	r3, [sp, #20]
 8011a4e:	f173 0300 	sbcs.w	r3, r3, #0
 8011a52:	db24      	blt.n	8011a9e <rcl_wait+0x2a6>
 8011a54:	2f00      	cmp	r7, #0
 8011a56:	bfbc      	itt	lt
 8011a58:	f04f 0800 	movlt.w	r8, #0
 8011a5c:	4647      	movlt	r7, r8
 8011a5e:	a31e      	add	r3, pc, #120	@ (adr r3, 8011ad8 <rcl_wait+0x2e0>)
 8011a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a64:	4640      	mov	r0, r8
 8011a66:	4639      	mov	r1, r7
 8011a68:	f7ee fc1a 	bl	80002a0 <__aeabi_ldivmod>
 8011a6c:	a31a      	add	r3, pc, #104	@ (adr r3, 8011ad8 <rcl_wait+0x2e0>)
 8011a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a72:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011a76:	4640      	mov	r0, r8
 8011a78:	4639      	mov	r1, r7
 8011a7a:	f7ee fc11 	bl	80002a0 <__aeabi_ldivmod>
 8011a7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011a82:	ab08      	add	r3, sp, #32
 8011a84:	e73e      	b.n	8011904 <rcl_wait+0x10c>
 8011a86:	2001      	movs	r0, #1
 8011a88:	b00d      	add	sp, #52	@ 0x34
 8011a8a:	ecbd 8b02 	vpop	{d8}
 8011a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a92:	200b      	movs	r0, #11
 8011a94:	b00d      	add	sp, #52	@ 0x34
 8011a96:	ecbd 8b02 	vpop	{d8}
 8011a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a9e:	465b      	mov	r3, fp
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d1d7      	bne.n	8011a54 <rcl_wait+0x25c>
 8011aa4:	e72e      	b.n	8011904 <rcl_wait+0x10c>
 8011aa6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011aaa:	430b      	orrs	r3, r1
 8011aac:	bf08      	it	eq
 8011aae:	4691      	moveq	r9, r2
 8011ab0:	f43f af21 	beq.w	80118f6 <rcl_wait+0xfe>
 8011ab4:	9b04      	ldr	r3, [sp, #16]
 8011ab6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011aba:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011abe:	2b01      	cmp	r3, #1
 8011ac0:	9b05      	ldr	r3, [sp, #20]
 8011ac2:	f173 0300 	sbcs.w	r3, r3, #0
 8011ac6:	f04f 0300 	mov.w	r3, #0
 8011aca:	4699      	mov	r9, r3
 8011acc:	dac2      	bge.n	8011a54 <rcl_wait+0x25c>
 8011ace:	e719      	b.n	8011904 <rcl_wait+0x10c>
 8011ad0:	ffffffff 	.word	0xffffffff
 8011ad4:	7fffffff 	.word	0x7fffffff
 8011ad8:	3b9aca00 	.word	0x3b9aca00
 8011adc:	00000000 	.word	0x00000000

08011ae0 <rcl_action_take_goal_response>:
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	d039      	beq.n	8011b58 <rcl_action_take_goal_response+0x78>
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	4604      	mov	r4, r0
 8011ae8:	6800      	ldr	r0, [r0, #0]
 8011aea:	b380      	cbz	r0, 8011b4e <rcl_action_take_goal_response+0x6e>
 8011aec:	460d      	mov	r5, r1
 8011aee:	4616      	mov	r6, r2
 8011af0:	f7fe f8c2 	bl	800fc78 <rcl_client_is_valid>
 8011af4:	b330      	cbz	r0, 8011b44 <rcl_action_take_goal_response+0x64>
 8011af6:	6820      	ldr	r0, [r4, #0]
 8011af8:	3004      	adds	r0, #4
 8011afa:	f7fe f8bd 	bl	800fc78 <rcl_client_is_valid>
 8011afe:	b308      	cbz	r0, 8011b44 <rcl_action_take_goal_response+0x64>
 8011b00:	6820      	ldr	r0, [r4, #0]
 8011b02:	3008      	adds	r0, #8
 8011b04:	f7fe f8b8 	bl	800fc78 <rcl_client_is_valid>
 8011b08:	b1e0      	cbz	r0, 8011b44 <rcl_action_take_goal_response+0x64>
 8011b0a:	6820      	ldr	r0, [r4, #0]
 8011b0c:	300c      	adds	r0, #12
 8011b0e:	f7fe fe61 	bl	80107d4 <rcl_subscription_is_valid>
 8011b12:	b1b8      	cbz	r0, 8011b44 <rcl_action_take_goal_response+0x64>
 8011b14:	6820      	ldr	r0, [r4, #0]
 8011b16:	3010      	adds	r0, #16
 8011b18:	f7fe fe5c 	bl	80107d4 <rcl_subscription_is_valid>
 8011b1c:	b190      	cbz	r0, 8011b44 <rcl_action_take_goal_response+0x64>
 8011b1e:	b1cd      	cbz	r5, 8011b54 <rcl_action_take_goal_response+0x74>
 8011b20:	b1c6      	cbz	r6, 8011b54 <rcl_action_take_goal_response+0x74>
 8011b22:	6820      	ldr	r0, [r4, #0]
 8011b24:	4632      	mov	r2, r6
 8011b26:	4629      	mov	r1, r5
 8011b28:	f7fe f85e 	bl	800fbe8 <rcl_take_response>
 8011b2c:	b148      	cbz	r0, 8011b42 <rcl_action_take_goal_response+0x62>
 8011b2e:	280a      	cmp	r0, #10
 8011b30:	d007      	beq.n	8011b42 <rcl_action_take_goal_response+0x62>
 8011b32:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011b36:	f640 0337 	movw	r3, #2103	@ 0x837
 8011b3a:	4290      	cmp	r0, r2
 8011b3c:	bf0c      	ite	eq
 8011b3e:	4618      	moveq	r0, r3
 8011b40:	2001      	movne	r0, #1
 8011b42:	bd70      	pop	{r4, r5, r6, pc}
 8011b44:	f7f9 fce4 	bl	800b510 <rcutils_reset_error>
 8011b48:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b4c:	bd70      	pop	{r4, r5, r6, pc}
 8011b4e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b52:	bd70      	pop	{r4, r5, r6, pc}
 8011b54:	200b      	movs	r0, #11
 8011b56:	bd70      	pop	{r4, r5, r6, pc}
 8011b58:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b5c:	4770      	bx	lr
 8011b5e:	bf00      	nop

08011b60 <rcl_action_send_result_request>:
 8011b60:	b390      	cbz	r0, 8011bc8 <rcl_action_send_result_request+0x68>
 8011b62:	b570      	push	{r4, r5, r6, lr}
 8011b64:	4604      	mov	r4, r0
 8011b66:	6800      	ldr	r0, [r0, #0]
 8011b68:	b348      	cbz	r0, 8011bbe <rcl_action_send_result_request+0x5e>
 8011b6a:	460d      	mov	r5, r1
 8011b6c:	4616      	mov	r6, r2
 8011b6e:	f7fe f883 	bl	800fc78 <rcl_client_is_valid>
 8011b72:	b1f8      	cbz	r0, 8011bb4 <rcl_action_send_result_request+0x54>
 8011b74:	6820      	ldr	r0, [r4, #0]
 8011b76:	3004      	adds	r0, #4
 8011b78:	f7fe f87e 	bl	800fc78 <rcl_client_is_valid>
 8011b7c:	b1d0      	cbz	r0, 8011bb4 <rcl_action_send_result_request+0x54>
 8011b7e:	6820      	ldr	r0, [r4, #0]
 8011b80:	3008      	adds	r0, #8
 8011b82:	f7fe f879 	bl	800fc78 <rcl_client_is_valid>
 8011b86:	b1a8      	cbz	r0, 8011bb4 <rcl_action_send_result_request+0x54>
 8011b88:	6820      	ldr	r0, [r4, #0]
 8011b8a:	300c      	adds	r0, #12
 8011b8c:	f7fe fe22 	bl	80107d4 <rcl_subscription_is_valid>
 8011b90:	b180      	cbz	r0, 8011bb4 <rcl_action_send_result_request+0x54>
 8011b92:	6820      	ldr	r0, [r4, #0]
 8011b94:	3010      	adds	r0, #16
 8011b96:	f7fe fe1d 	bl	80107d4 <rcl_subscription_is_valid>
 8011b9a:	b158      	cbz	r0, 8011bb4 <rcl_action_send_result_request+0x54>
 8011b9c:	b195      	cbz	r5, 8011bc4 <rcl_action_send_result_request+0x64>
 8011b9e:	b18e      	cbz	r6, 8011bc4 <rcl_action_send_result_request+0x64>
 8011ba0:	6820      	ldr	r0, [r4, #0]
 8011ba2:	4632      	mov	r2, r6
 8011ba4:	4629      	mov	r1, r5
 8011ba6:	3008      	adds	r0, #8
 8011ba8:	f7fd ffe8 	bl	800fb7c <rcl_send_request>
 8011bac:	3800      	subs	r0, #0
 8011bae:	bf18      	it	ne
 8011bb0:	2001      	movne	r0, #1
 8011bb2:	bd70      	pop	{r4, r5, r6, pc}
 8011bb4:	f7f9 fcac 	bl	800b510 <rcutils_reset_error>
 8011bb8:	f640 0036 	movw	r0, #2102	@ 0x836
 8011bbc:	bd70      	pop	{r4, r5, r6, pc}
 8011bbe:	f640 0036 	movw	r0, #2102	@ 0x836
 8011bc2:	bd70      	pop	{r4, r5, r6, pc}
 8011bc4:	200b      	movs	r0, #11
 8011bc6:	bd70      	pop	{r4, r5, r6, pc}
 8011bc8:	f640 0036 	movw	r0, #2102	@ 0x836
 8011bcc:	4770      	bx	lr
 8011bce:	bf00      	nop

08011bd0 <rcl_action_take_result_response>:
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	d03a      	beq.n	8011c4a <rcl_action_take_result_response+0x7a>
 8011bd4:	b570      	push	{r4, r5, r6, lr}
 8011bd6:	4604      	mov	r4, r0
 8011bd8:	6800      	ldr	r0, [r0, #0]
 8011bda:	b388      	cbz	r0, 8011c40 <rcl_action_take_result_response+0x70>
 8011bdc:	460d      	mov	r5, r1
 8011bde:	4616      	mov	r6, r2
 8011be0:	f7fe f84a 	bl	800fc78 <rcl_client_is_valid>
 8011be4:	b338      	cbz	r0, 8011c36 <rcl_action_take_result_response+0x66>
 8011be6:	6820      	ldr	r0, [r4, #0]
 8011be8:	3004      	adds	r0, #4
 8011bea:	f7fe f845 	bl	800fc78 <rcl_client_is_valid>
 8011bee:	b310      	cbz	r0, 8011c36 <rcl_action_take_result_response+0x66>
 8011bf0:	6820      	ldr	r0, [r4, #0]
 8011bf2:	3008      	adds	r0, #8
 8011bf4:	f7fe f840 	bl	800fc78 <rcl_client_is_valid>
 8011bf8:	b1e8      	cbz	r0, 8011c36 <rcl_action_take_result_response+0x66>
 8011bfa:	6820      	ldr	r0, [r4, #0]
 8011bfc:	300c      	adds	r0, #12
 8011bfe:	f7fe fde9 	bl	80107d4 <rcl_subscription_is_valid>
 8011c02:	b1c0      	cbz	r0, 8011c36 <rcl_action_take_result_response+0x66>
 8011c04:	6820      	ldr	r0, [r4, #0]
 8011c06:	3010      	adds	r0, #16
 8011c08:	f7fe fde4 	bl	80107d4 <rcl_subscription_is_valid>
 8011c0c:	b198      	cbz	r0, 8011c36 <rcl_action_take_result_response+0x66>
 8011c0e:	b1d5      	cbz	r5, 8011c46 <rcl_action_take_result_response+0x76>
 8011c10:	b1ce      	cbz	r6, 8011c46 <rcl_action_take_result_response+0x76>
 8011c12:	6820      	ldr	r0, [r4, #0]
 8011c14:	4632      	mov	r2, r6
 8011c16:	4629      	mov	r1, r5
 8011c18:	3008      	adds	r0, #8
 8011c1a:	f7fd ffe5 	bl	800fbe8 <rcl_take_response>
 8011c1e:	b148      	cbz	r0, 8011c34 <rcl_action_take_result_response+0x64>
 8011c20:	280a      	cmp	r0, #10
 8011c22:	d007      	beq.n	8011c34 <rcl_action_take_result_response+0x64>
 8011c24:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011c28:	f640 0337 	movw	r3, #2103	@ 0x837
 8011c2c:	4290      	cmp	r0, r2
 8011c2e:	bf0c      	ite	eq
 8011c30:	4618      	moveq	r0, r3
 8011c32:	2001      	movne	r0, #1
 8011c34:	bd70      	pop	{r4, r5, r6, pc}
 8011c36:	f7f9 fc6b 	bl	800b510 <rcutils_reset_error>
 8011c3a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011c3e:	bd70      	pop	{r4, r5, r6, pc}
 8011c40:	f640 0036 	movw	r0, #2102	@ 0x836
 8011c44:	bd70      	pop	{r4, r5, r6, pc}
 8011c46:	200b      	movs	r0, #11
 8011c48:	bd70      	pop	{r4, r5, r6, pc}
 8011c4a:	f640 0036 	movw	r0, #2102	@ 0x836
 8011c4e:	4770      	bx	lr

08011c50 <rcl_action_take_cancel_response>:
 8011c50:	2800      	cmp	r0, #0
 8011c52:	d03a      	beq.n	8011cca <rcl_action_take_cancel_response+0x7a>
 8011c54:	b570      	push	{r4, r5, r6, lr}
 8011c56:	4604      	mov	r4, r0
 8011c58:	6800      	ldr	r0, [r0, #0]
 8011c5a:	b388      	cbz	r0, 8011cc0 <rcl_action_take_cancel_response+0x70>
 8011c5c:	460d      	mov	r5, r1
 8011c5e:	4616      	mov	r6, r2
 8011c60:	f7fe f80a 	bl	800fc78 <rcl_client_is_valid>
 8011c64:	b338      	cbz	r0, 8011cb6 <rcl_action_take_cancel_response+0x66>
 8011c66:	6820      	ldr	r0, [r4, #0]
 8011c68:	3004      	adds	r0, #4
 8011c6a:	f7fe f805 	bl	800fc78 <rcl_client_is_valid>
 8011c6e:	b310      	cbz	r0, 8011cb6 <rcl_action_take_cancel_response+0x66>
 8011c70:	6820      	ldr	r0, [r4, #0]
 8011c72:	3008      	adds	r0, #8
 8011c74:	f7fe f800 	bl	800fc78 <rcl_client_is_valid>
 8011c78:	b1e8      	cbz	r0, 8011cb6 <rcl_action_take_cancel_response+0x66>
 8011c7a:	6820      	ldr	r0, [r4, #0]
 8011c7c:	300c      	adds	r0, #12
 8011c7e:	f7fe fda9 	bl	80107d4 <rcl_subscription_is_valid>
 8011c82:	b1c0      	cbz	r0, 8011cb6 <rcl_action_take_cancel_response+0x66>
 8011c84:	6820      	ldr	r0, [r4, #0]
 8011c86:	3010      	adds	r0, #16
 8011c88:	f7fe fda4 	bl	80107d4 <rcl_subscription_is_valid>
 8011c8c:	b198      	cbz	r0, 8011cb6 <rcl_action_take_cancel_response+0x66>
 8011c8e:	b1d5      	cbz	r5, 8011cc6 <rcl_action_take_cancel_response+0x76>
 8011c90:	b1ce      	cbz	r6, 8011cc6 <rcl_action_take_cancel_response+0x76>
 8011c92:	6820      	ldr	r0, [r4, #0]
 8011c94:	4632      	mov	r2, r6
 8011c96:	4629      	mov	r1, r5
 8011c98:	3004      	adds	r0, #4
 8011c9a:	f7fd ffa5 	bl	800fbe8 <rcl_take_response>
 8011c9e:	b148      	cbz	r0, 8011cb4 <rcl_action_take_cancel_response+0x64>
 8011ca0:	280a      	cmp	r0, #10
 8011ca2:	d007      	beq.n	8011cb4 <rcl_action_take_cancel_response+0x64>
 8011ca4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011ca8:	f640 0337 	movw	r3, #2103	@ 0x837
 8011cac:	4290      	cmp	r0, r2
 8011cae:	bf0c      	ite	eq
 8011cb0:	4618      	moveq	r0, r3
 8011cb2:	2001      	movne	r0, #1
 8011cb4:	bd70      	pop	{r4, r5, r6, pc}
 8011cb6:	f7f9 fc2b 	bl	800b510 <rcutils_reset_error>
 8011cba:	f640 0036 	movw	r0, #2102	@ 0x836
 8011cbe:	bd70      	pop	{r4, r5, r6, pc}
 8011cc0:	f640 0036 	movw	r0, #2102	@ 0x836
 8011cc4:	bd70      	pop	{r4, r5, r6, pc}
 8011cc6:	200b      	movs	r0, #11
 8011cc8:	bd70      	pop	{r4, r5, r6, pc}
 8011cca:	f640 0036 	movw	r0, #2102	@ 0x836
 8011cce:	4770      	bx	lr

08011cd0 <rcl_action_take_feedback>:
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	d038      	beq.n	8011d46 <rcl_action_take_feedback+0x76>
 8011cd4:	b530      	push	{r4, r5, lr}
 8011cd6:	4604      	mov	r4, r0
 8011cd8:	6800      	ldr	r0, [r0, #0]
 8011cda:	b091      	sub	sp, #68	@ 0x44
 8011cdc:	b378      	cbz	r0, 8011d3e <rcl_action_take_feedback+0x6e>
 8011cde:	460d      	mov	r5, r1
 8011ce0:	f7fd ffca 	bl	800fc78 <rcl_client_is_valid>
 8011ce4:	b328      	cbz	r0, 8011d32 <rcl_action_take_feedback+0x62>
 8011ce6:	6820      	ldr	r0, [r4, #0]
 8011ce8:	3004      	adds	r0, #4
 8011cea:	f7fd ffc5 	bl	800fc78 <rcl_client_is_valid>
 8011cee:	b300      	cbz	r0, 8011d32 <rcl_action_take_feedback+0x62>
 8011cf0:	6820      	ldr	r0, [r4, #0]
 8011cf2:	3008      	adds	r0, #8
 8011cf4:	f7fd ffc0 	bl	800fc78 <rcl_client_is_valid>
 8011cf8:	b1d8      	cbz	r0, 8011d32 <rcl_action_take_feedback+0x62>
 8011cfa:	6820      	ldr	r0, [r4, #0]
 8011cfc:	300c      	adds	r0, #12
 8011cfe:	f7fe fd69 	bl	80107d4 <rcl_subscription_is_valid>
 8011d02:	b1b0      	cbz	r0, 8011d32 <rcl_action_take_feedback+0x62>
 8011d04:	6820      	ldr	r0, [r4, #0]
 8011d06:	3010      	adds	r0, #16
 8011d08:	f7fe fd64 	bl	80107d4 <rcl_subscription_is_valid>
 8011d0c:	b188      	cbz	r0, 8011d32 <rcl_action_take_feedback+0x62>
 8011d0e:	b1ed      	cbz	r5, 8011d4c <rcl_action_take_feedback+0x7c>
 8011d10:	6820      	ldr	r0, [r4, #0]
 8011d12:	2300      	movs	r3, #0
 8011d14:	466a      	mov	r2, sp
 8011d16:	4629      	mov	r1, r5
 8011d18:	300c      	adds	r0, #12
 8011d1a:	f7fe fcfd 	bl	8010718 <rcl_take>
 8011d1e:	b160      	cbz	r0, 8011d3a <rcl_action_take_feedback+0x6a>
 8011d20:	f240 1391 	movw	r3, #401	@ 0x191
 8011d24:	4298      	cmp	r0, r3
 8011d26:	d014      	beq.n	8011d52 <rcl_action_take_feedback+0x82>
 8011d28:	280a      	cmp	r0, #10
 8011d2a:	bf18      	it	ne
 8011d2c:	2001      	movne	r0, #1
 8011d2e:	b011      	add	sp, #68	@ 0x44
 8011d30:	bd30      	pop	{r4, r5, pc}
 8011d32:	f7f9 fbed 	bl	800b510 <rcutils_reset_error>
 8011d36:	f640 0036 	movw	r0, #2102	@ 0x836
 8011d3a:	b011      	add	sp, #68	@ 0x44
 8011d3c:	bd30      	pop	{r4, r5, pc}
 8011d3e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011d42:	b011      	add	sp, #68	@ 0x44
 8011d44:	bd30      	pop	{r4, r5, pc}
 8011d46:	f640 0036 	movw	r0, #2102	@ 0x836
 8011d4a:	4770      	bx	lr
 8011d4c:	200b      	movs	r0, #11
 8011d4e:	b011      	add	sp, #68	@ 0x44
 8011d50:	bd30      	pop	{r4, r5, pc}
 8011d52:	f640 0037 	movw	r0, #2103	@ 0x837
 8011d56:	e7f0      	b.n	8011d3a <rcl_action_take_feedback+0x6a>

08011d58 <rcl_action_wait_set_add_action_client>:
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	d048      	beq.n	8011dee <rcl_action_wait_set_add_action_client+0x96>
 8011d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d5e:	460c      	mov	r4, r1
 8011d60:	2900      	cmp	r1, #0
 8011d62:	d03c      	beq.n	8011dde <rcl_action_wait_set_add_action_client+0x86>
 8011d64:	4605      	mov	r5, r0
 8011d66:	6808      	ldr	r0, [r1, #0]
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	d038      	beq.n	8011dde <rcl_action_wait_set_add_action_client+0x86>
 8011d6c:	4617      	mov	r7, r2
 8011d6e:	461e      	mov	r6, r3
 8011d70:	f7fd ff82 	bl	800fc78 <rcl_client_is_valid>
 8011d74:	b3b0      	cbz	r0, 8011de4 <rcl_action_wait_set_add_action_client+0x8c>
 8011d76:	6820      	ldr	r0, [r4, #0]
 8011d78:	3004      	adds	r0, #4
 8011d7a:	f7fd ff7d 	bl	800fc78 <rcl_client_is_valid>
 8011d7e:	b388      	cbz	r0, 8011de4 <rcl_action_wait_set_add_action_client+0x8c>
 8011d80:	6820      	ldr	r0, [r4, #0]
 8011d82:	3008      	adds	r0, #8
 8011d84:	f7fd ff78 	bl	800fc78 <rcl_client_is_valid>
 8011d88:	b360      	cbz	r0, 8011de4 <rcl_action_wait_set_add_action_client+0x8c>
 8011d8a:	6820      	ldr	r0, [r4, #0]
 8011d8c:	300c      	adds	r0, #12
 8011d8e:	f7fe fd21 	bl	80107d4 <rcl_subscription_is_valid>
 8011d92:	b338      	cbz	r0, 8011de4 <rcl_action_wait_set_add_action_client+0x8c>
 8011d94:	6820      	ldr	r0, [r4, #0]
 8011d96:	3010      	adds	r0, #16
 8011d98:	f7fe fd1c 	bl	80107d4 <rcl_subscription_is_valid>
 8011d9c:	b310      	cbz	r0, 8011de4 <rcl_action_wait_set_add_action_client+0x8c>
 8011d9e:	6821      	ldr	r1, [r4, #0]
 8011da0:	4628      	mov	r0, r5
 8011da2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8011da6:	f7ff fccf 	bl	8011748 <rcl_wait_set_add_client>
 8011daa:	b9b8      	cbnz	r0, 8011ddc <rcl_action_wait_set_add_action_client+0x84>
 8011dac:	6821      	ldr	r1, [r4, #0]
 8011dae:	4628      	mov	r0, r5
 8011db0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8011db4:	3104      	adds	r1, #4
 8011db6:	f7ff fcc7 	bl	8011748 <rcl_wait_set_add_client>
 8011dba:	b978      	cbnz	r0, 8011ddc <rcl_action_wait_set_add_action_client+0x84>
 8011dbc:	6821      	ldr	r1, [r4, #0]
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8011dc4:	3108      	adds	r1, #8
 8011dc6:	f7ff fcbf 	bl	8011748 <rcl_wait_set_add_client>
 8011dca:	b938      	cbnz	r0, 8011ddc <rcl_action_wait_set_add_action_client+0x84>
 8011dcc:	6821      	ldr	r1, [r4, #0]
 8011dce:	4628      	mov	r0, r5
 8011dd0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8011dd4:	310c      	adds	r1, #12
 8011dd6:	f7ff f96f 	bl	80110b8 <rcl_wait_set_add_subscription>
 8011dda:	b158      	cbz	r0, 8011df4 <rcl_action_wait_set_add_action_client+0x9c>
 8011ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dde:	f640 0036 	movw	r0, #2102	@ 0x836
 8011de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011de4:	f7f9 fb94 	bl	800b510 <rcutils_reset_error>
 8011de8:	f640 0036 	movw	r0, #2102	@ 0x836
 8011dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011df2:	4770      	bx	lr
 8011df4:	6821      	ldr	r1, [r4, #0]
 8011df6:	4628      	mov	r0, r5
 8011df8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8011dfc:	3110      	adds	r1, #16
 8011dfe:	f7ff f95b 	bl	80110b8 <rcl_wait_set_add_subscription>
 8011e02:	2800      	cmp	r0, #0
 8011e04:	d1ea      	bne.n	8011ddc <rcl_action_wait_set_add_action_client+0x84>
 8011e06:	b11f      	cbz	r7, 8011e10 <rcl_action_wait_set_add_action_client+0xb8>
 8011e08:	6823      	ldr	r3, [r4, #0]
 8011e0a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8011e0e:	603b      	str	r3, [r7, #0]
 8011e10:	2e00      	cmp	r6, #0
 8011e12:	d0e3      	beq.n	8011ddc <rcl_action_wait_set_add_action_client+0x84>
 8011e14:	6823      	ldr	r3, [r4, #0]
 8011e16:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8011e1a:	6033      	str	r3, [r6, #0]
 8011e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e1e:	bf00      	nop

08011e20 <rcl_action_client_wait_set_get_entities_ready>:
 8011e20:	2800      	cmp	r0, #0
 8011e22:	f000 808d 	beq.w	8011f40 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8011e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e2a:	460c      	mov	r4, r1
 8011e2c:	2900      	cmp	r1, #0
 8011e2e:	d077      	beq.n	8011f20 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011e30:	4605      	mov	r5, r0
 8011e32:	6808      	ldr	r0, [r1, #0]
 8011e34:	2800      	cmp	r0, #0
 8011e36:	d073      	beq.n	8011f20 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011e38:	4616      	mov	r6, r2
 8011e3a:	461f      	mov	r7, r3
 8011e3c:	f7fd ff1c 	bl	800fc78 <rcl_client_is_valid>
 8011e40:	2800      	cmp	r0, #0
 8011e42:	d071      	beq.n	8011f28 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011e44:	6820      	ldr	r0, [r4, #0]
 8011e46:	3004      	adds	r0, #4
 8011e48:	f7fd ff16 	bl	800fc78 <rcl_client_is_valid>
 8011e4c:	2800      	cmp	r0, #0
 8011e4e:	d06b      	beq.n	8011f28 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011e50:	6820      	ldr	r0, [r4, #0]
 8011e52:	3008      	adds	r0, #8
 8011e54:	f7fd ff10 	bl	800fc78 <rcl_client_is_valid>
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	d065      	beq.n	8011f28 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011e5c:	6820      	ldr	r0, [r4, #0]
 8011e5e:	300c      	adds	r0, #12
 8011e60:	f7fe fcb8 	bl	80107d4 <rcl_subscription_is_valid>
 8011e64:	2800      	cmp	r0, #0
 8011e66:	d05f      	beq.n	8011f28 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011e68:	6820      	ldr	r0, [r4, #0]
 8011e6a:	3010      	adds	r0, #16
 8011e6c:	f7fe fcb2 	bl	80107d4 <rcl_subscription_is_valid>
 8011e70:	2800      	cmp	r0, #0
 8011e72:	d059      	beq.n	8011f28 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011e74:	2e00      	cmp	r6, #0
 8011e76:	d060      	beq.n	8011f3a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011e78:	2f00      	cmp	r7, #0
 8011e7a:	d05e      	beq.n	8011f3a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011e7c:	9b06      	ldr	r3, [sp, #24]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d05b      	beq.n	8011f3a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011e82:	9b07      	ldr	r3, [sp, #28]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d058      	beq.n	8011f3a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011e88:	9b08      	ldr	r3, [sp, #32]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d055      	beq.n	8011f3a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011e8e:	6823      	ldr	r3, [r4, #0]
 8011e90:	686a      	ldr	r2, [r5, #4]
 8011e92:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8011e96:	428a      	cmp	r2, r1
 8011e98:	d94c      	bls.n	8011f34 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011e9a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8011e9e:	4282      	cmp	r2, r0
 8011ea0:	d948      	bls.n	8011f34 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011ea2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8011ea6:	69ea      	ldr	r2, [r5, #28]
 8011ea8:	42a2      	cmp	r2, r4
 8011eaa:	d943      	bls.n	8011f34 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011eac:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8011eb0:	4562      	cmp	r2, ip
 8011eb2:	d93f      	bls.n	8011f34 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011eb4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8011eb8:	4572      	cmp	r2, lr
 8011eba:	d93b      	bls.n	8011f34 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011ebc:	69aa      	ldr	r2, [r5, #24]
 8011ebe:	682d      	ldr	r5, [r5, #0]
 8011ec0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8011ec4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8011ec8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8011ecc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8011ed0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8011ed4:	f103 0c0c 	add.w	ip, r3, #12
 8011ed8:	eba5 050c 	sub.w	r5, r5, ip
 8011edc:	fab5 f585 	clz	r5, r5
 8011ee0:	096d      	lsrs	r5, r5, #5
 8011ee2:	7035      	strb	r5, [r6, #0]
 8011ee4:	f103 0510 	add.w	r5, r3, #16
 8011ee8:	1b64      	subs	r4, r4, r5
 8011eea:	fab4 f484 	clz	r4, r4
 8011eee:	0964      	lsrs	r4, r4, #5
 8011ef0:	703c      	strb	r4, [r7, #0]
 8011ef2:	eba3 0008 	sub.w	r0, r3, r8
 8011ef6:	1d1c      	adds	r4, r3, #4
 8011ef8:	3308      	adds	r3, #8
 8011efa:	1ad3      	subs	r3, r2, r3
 8011efc:	fab0 f080 	clz	r0, r0
 8011f00:	9a06      	ldr	r2, [sp, #24]
 8011f02:	0940      	lsrs	r0, r0, #5
 8011f04:	1b09      	subs	r1, r1, r4
 8011f06:	7010      	strb	r0, [r2, #0]
 8011f08:	fab1 f181 	clz	r1, r1
 8011f0c:	9a07      	ldr	r2, [sp, #28]
 8011f0e:	0949      	lsrs	r1, r1, #5
 8011f10:	7011      	strb	r1, [r2, #0]
 8011f12:	fab3 f383 	clz	r3, r3
 8011f16:	9a08      	ldr	r2, [sp, #32]
 8011f18:	095b      	lsrs	r3, r3, #5
 8011f1a:	2000      	movs	r0, #0
 8011f1c:	7013      	strb	r3, [r2, #0]
 8011f1e:	e001      	b.n	8011f24 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8011f20:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f28:	f7f9 faf2 	bl	800b510 <rcutils_reset_error>
 8011f2c:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f34:	2001      	movs	r0, #1
 8011f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f3a:	200b      	movs	r0, #11
 8011f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f40:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop

08011f48 <rcl_action_take_goal_request>:
 8011f48:	2800      	cmp	r0, #0
 8011f4a:	d039      	beq.n	8011fc0 <rcl_action_take_goal_request+0x78>
 8011f4c:	b570      	push	{r4, r5, r6, lr}
 8011f4e:	4604      	mov	r4, r0
 8011f50:	6800      	ldr	r0, [r0, #0]
 8011f52:	b380      	cbz	r0, 8011fb6 <rcl_action_take_goal_request+0x6e>
 8011f54:	460d      	mov	r5, r1
 8011f56:	4616      	mov	r6, r2
 8011f58:	f7fe fbd4 	bl	8010704 <rcl_service_is_valid>
 8011f5c:	b330      	cbz	r0, 8011fac <rcl_action_take_goal_request+0x64>
 8011f5e:	6820      	ldr	r0, [r4, #0]
 8011f60:	3004      	adds	r0, #4
 8011f62:	f7fe fbcf 	bl	8010704 <rcl_service_is_valid>
 8011f66:	b308      	cbz	r0, 8011fac <rcl_action_take_goal_request+0x64>
 8011f68:	6820      	ldr	r0, [r4, #0]
 8011f6a:	3008      	adds	r0, #8
 8011f6c:	f7fe fbca 	bl	8010704 <rcl_service_is_valid>
 8011f70:	b1e0      	cbz	r0, 8011fac <rcl_action_take_goal_request+0x64>
 8011f72:	6820      	ldr	r0, [r4, #0]
 8011f74:	300c      	adds	r0, #12
 8011f76:	f7f8 fb7d 	bl	800a674 <rcl_publisher_is_valid>
 8011f7a:	b1b8      	cbz	r0, 8011fac <rcl_action_take_goal_request+0x64>
 8011f7c:	6820      	ldr	r0, [r4, #0]
 8011f7e:	3010      	adds	r0, #16
 8011f80:	f7f8 fb78 	bl	800a674 <rcl_publisher_is_valid>
 8011f84:	b190      	cbz	r0, 8011fac <rcl_action_take_goal_request+0x64>
 8011f86:	b1cd      	cbz	r5, 8011fbc <rcl_action_take_goal_request+0x74>
 8011f88:	b1c6      	cbz	r6, 8011fbc <rcl_action_take_goal_request+0x74>
 8011f8a:	6820      	ldr	r0, [r4, #0]
 8011f8c:	4632      	mov	r2, r6
 8011f8e:	4629      	mov	r1, r5
 8011f90:	f7fe fb60 	bl	8010654 <rcl_take_request>
 8011f94:	b148      	cbz	r0, 8011faa <rcl_action_take_goal_request+0x62>
 8011f96:	280a      	cmp	r0, #10
 8011f98:	d007      	beq.n	8011faa <rcl_action_take_goal_request+0x62>
 8011f9a:	f240 2259 	movw	r2, #601	@ 0x259
 8011f9e:	f640 0399 	movw	r3, #2201	@ 0x899
 8011fa2:	4290      	cmp	r0, r2
 8011fa4:	bf0c      	ite	eq
 8011fa6:	4618      	moveq	r0, r3
 8011fa8:	2001      	movne	r0, #1
 8011faa:	bd70      	pop	{r4, r5, r6, pc}
 8011fac:	f7f9 fab0 	bl	800b510 <rcutils_reset_error>
 8011fb0:	f640 0098 	movw	r0, #2200	@ 0x898
 8011fb4:	bd70      	pop	{r4, r5, r6, pc}
 8011fb6:	f640 0098 	movw	r0, #2200	@ 0x898
 8011fba:	bd70      	pop	{r4, r5, r6, pc}
 8011fbc:	200b      	movs	r0, #11
 8011fbe:	bd70      	pop	{r4, r5, r6, pc}
 8011fc0:	f640 0098 	movw	r0, #2200	@ 0x898
 8011fc4:	4770      	bx	lr
 8011fc6:	bf00      	nop

08011fc8 <rcl_action_send_goal_response>:
 8011fc8:	b390      	cbz	r0, 8012030 <rcl_action_send_goal_response+0x68>
 8011fca:	b570      	push	{r4, r5, r6, lr}
 8011fcc:	4604      	mov	r4, r0
 8011fce:	6800      	ldr	r0, [r0, #0]
 8011fd0:	b348      	cbz	r0, 8012026 <rcl_action_send_goal_response+0x5e>
 8011fd2:	460d      	mov	r5, r1
 8011fd4:	4616      	mov	r6, r2
 8011fd6:	f7fe fb95 	bl	8010704 <rcl_service_is_valid>
 8011fda:	b1f8      	cbz	r0, 801201c <rcl_action_send_goal_response+0x54>
 8011fdc:	6820      	ldr	r0, [r4, #0]
 8011fde:	3004      	adds	r0, #4
 8011fe0:	f7fe fb90 	bl	8010704 <rcl_service_is_valid>
 8011fe4:	b1d0      	cbz	r0, 801201c <rcl_action_send_goal_response+0x54>
 8011fe6:	6820      	ldr	r0, [r4, #0]
 8011fe8:	3008      	adds	r0, #8
 8011fea:	f7fe fb8b 	bl	8010704 <rcl_service_is_valid>
 8011fee:	b1a8      	cbz	r0, 801201c <rcl_action_send_goal_response+0x54>
 8011ff0:	6820      	ldr	r0, [r4, #0]
 8011ff2:	300c      	adds	r0, #12
 8011ff4:	f7f8 fb3e 	bl	800a674 <rcl_publisher_is_valid>
 8011ff8:	b180      	cbz	r0, 801201c <rcl_action_send_goal_response+0x54>
 8011ffa:	6820      	ldr	r0, [r4, #0]
 8011ffc:	3010      	adds	r0, #16
 8011ffe:	f7f8 fb39 	bl	800a674 <rcl_publisher_is_valid>
 8012002:	b158      	cbz	r0, 801201c <rcl_action_send_goal_response+0x54>
 8012004:	b195      	cbz	r5, 801202c <rcl_action_send_goal_response+0x64>
 8012006:	b18e      	cbz	r6, 801202c <rcl_action_send_goal_response+0x64>
 8012008:	6820      	ldr	r0, [r4, #0]
 801200a:	4632      	mov	r2, r6
 801200c:	4629      	mov	r1, r5
 801200e:	f7fe fb61 	bl	80106d4 <rcl_send_response>
 8012012:	b110      	cbz	r0, 801201a <rcl_action_send_goal_response+0x52>
 8012014:	2802      	cmp	r0, #2
 8012016:	bf18      	it	ne
 8012018:	2001      	movne	r0, #1
 801201a:	bd70      	pop	{r4, r5, r6, pc}
 801201c:	f7f9 fa78 	bl	800b510 <rcutils_reset_error>
 8012020:	f640 0098 	movw	r0, #2200	@ 0x898
 8012024:	bd70      	pop	{r4, r5, r6, pc}
 8012026:	f640 0098 	movw	r0, #2200	@ 0x898
 801202a:	bd70      	pop	{r4, r5, r6, pc}
 801202c:	200b      	movs	r0, #11
 801202e:	bd70      	pop	{r4, r5, r6, pc}
 8012030:	f640 0098 	movw	r0, #2200	@ 0x898
 8012034:	4770      	bx	lr
 8012036:	bf00      	nop

08012038 <rcl_action_take_result_request>:
 8012038:	2800      	cmp	r0, #0
 801203a:	d03a      	beq.n	80120b2 <rcl_action_take_result_request+0x7a>
 801203c:	b570      	push	{r4, r5, r6, lr}
 801203e:	4604      	mov	r4, r0
 8012040:	6800      	ldr	r0, [r0, #0]
 8012042:	b388      	cbz	r0, 80120a8 <rcl_action_take_result_request+0x70>
 8012044:	460d      	mov	r5, r1
 8012046:	4616      	mov	r6, r2
 8012048:	f7fe fb5c 	bl	8010704 <rcl_service_is_valid>
 801204c:	b338      	cbz	r0, 801209e <rcl_action_take_result_request+0x66>
 801204e:	6820      	ldr	r0, [r4, #0]
 8012050:	3004      	adds	r0, #4
 8012052:	f7fe fb57 	bl	8010704 <rcl_service_is_valid>
 8012056:	b310      	cbz	r0, 801209e <rcl_action_take_result_request+0x66>
 8012058:	6820      	ldr	r0, [r4, #0]
 801205a:	3008      	adds	r0, #8
 801205c:	f7fe fb52 	bl	8010704 <rcl_service_is_valid>
 8012060:	b1e8      	cbz	r0, 801209e <rcl_action_take_result_request+0x66>
 8012062:	6820      	ldr	r0, [r4, #0]
 8012064:	300c      	adds	r0, #12
 8012066:	f7f8 fb05 	bl	800a674 <rcl_publisher_is_valid>
 801206a:	b1c0      	cbz	r0, 801209e <rcl_action_take_result_request+0x66>
 801206c:	6820      	ldr	r0, [r4, #0]
 801206e:	3010      	adds	r0, #16
 8012070:	f7f8 fb00 	bl	800a674 <rcl_publisher_is_valid>
 8012074:	b198      	cbz	r0, 801209e <rcl_action_take_result_request+0x66>
 8012076:	b1d5      	cbz	r5, 80120ae <rcl_action_take_result_request+0x76>
 8012078:	b1ce      	cbz	r6, 80120ae <rcl_action_take_result_request+0x76>
 801207a:	6820      	ldr	r0, [r4, #0]
 801207c:	4632      	mov	r2, r6
 801207e:	4629      	mov	r1, r5
 8012080:	3008      	adds	r0, #8
 8012082:	f7fe fae7 	bl	8010654 <rcl_take_request>
 8012086:	b148      	cbz	r0, 801209c <rcl_action_take_result_request+0x64>
 8012088:	280a      	cmp	r0, #10
 801208a:	d007      	beq.n	801209c <rcl_action_take_result_request+0x64>
 801208c:	f240 2259 	movw	r2, #601	@ 0x259
 8012090:	f640 0399 	movw	r3, #2201	@ 0x899
 8012094:	4290      	cmp	r0, r2
 8012096:	bf0c      	ite	eq
 8012098:	4618      	moveq	r0, r3
 801209a:	2001      	movne	r0, #1
 801209c:	bd70      	pop	{r4, r5, r6, pc}
 801209e:	f7f9 fa37 	bl	800b510 <rcutils_reset_error>
 80120a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80120a6:	bd70      	pop	{r4, r5, r6, pc}
 80120a8:	f640 0098 	movw	r0, #2200	@ 0x898
 80120ac:	bd70      	pop	{r4, r5, r6, pc}
 80120ae:	200b      	movs	r0, #11
 80120b0:	bd70      	pop	{r4, r5, r6, pc}
 80120b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80120b6:	4770      	bx	lr

080120b8 <rcl_action_take_cancel_request>:
 80120b8:	2800      	cmp	r0, #0
 80120ba:	d03a      	beq.n	8012132 <rcl_action_take_cancel_request+0x7a>
 80120bc:	b570      	push	{r4, r5, r6, lr}
 80120be:	4604      	mov	r4, r0
 80120c0:	6800      	ldr	r0, [r0, #0]
 80120c2:	b388      	cbz	r0, 8012128 <rcl_action_take_cancel_request+0x70>
 80120c4:	460d      	mov	r5, r1
 80120c6:	4616      	mov	r6, r2
 80120c8:	f7fe fb1c 	bl	8010704 <rcl_service_is_valid>
 80120cc:	b338      	cbz	r0, 801211e <rcl_action_take_cancel_request+0x66>
 80120ce:	6820      	ldr	r0, [r4, #0]
 80120d0:	3004      	adds	r0, #4
 80120d2:	f7fe fb17 	bl	8010704 <rcl_service_is_valid>
 80120d6:	b310      	cbz	r0, 801211e <rcl_action_take_cancel_request+0x66>
 80120d8:	6820      	ldr	r0, [r4, #0]
 80120da:	3008      	adds	r0, #8
 80120dc:	f7fe fb12 	bl	8010704 <rcl_service_is_valid>
 80120e0:	b1e8      	cbz	r0, 801211e <rcl_action_take_cancel_request+0x66>
 80120e2:	6820      	ldr	r0, [r4, #0]
 80120e4:	300c      	adds	r0, #12
 80120e6:	f7f8 fac5 	bl	800a674 <rcl_publisher_is_valid>
 80120ea:	b1c0      	cbz	r0, 801211e <rcl_action_take_cancel_request+0x66>
 80120ec:	6820      	ldr	r0, [r4, #0]
 80120ee:	3010      	adds	r0, #16
 80120f0:	f7f8 fac0 	bl	800a674 <rcl_publisher_is_valid>
 80120f4:	b198      	cbz	r0, 801211e <rcl_action_take_cancel_request+0x66>
 80120f6:	b1d5      	cbz	r5, 801212e <rcl_action_take_cancel_request+0x76>
 80120f8:	b1ce      	cbz	r6, 801212e <rcl_action_take_cancel_request+0x76>
 80120fa:	6820      	ldr	r0, [r4, #0]
 80120fc:	4632      	mov	r2, r6
 80120fe:	4629      	mov	r1, r5
 8012100:	3004      	adds	r0, #4
 8012102:	f7fe faa7 	bl	8010654 <rcl_take_request>
 8012106:	b148      	cbz	r0, 801211c <rcl_action_take_cancel_request+0x64>
 8012108:	280a      	cmp	r0, #10
 801210a:	d007      	beq.n	801211c <rcl_action_take_cancel_request+0x64>
 801210c:	f240 2259 	movw	r2, #601	@ 0x259
 8012110:	f640 0399 	movw	r3, #2201	@ 0x899
 8012114:	4290      	cmp	r0, r2
 8012116:	bf0c      	ite	eq
 8012118:	4618      	moveq	r0, r3
 801211a:	2001      	movne	r0, #1
 801211c:	bd70      	pop	{r4, r5, r6, pc}
 801211e:	f7f9 f9f7 	bl	800b510 <rcutils_reset_error>
 8012122:	f640 0098 	movw	r0, #2200	@ 0x898
 8012126:	bd70      	pop	{r4, r5, r6, pc}
 8012128:	f640 0098 	movw	r0, #2200	@ 0x898
 801212c:	bd70      	pop	{r4, r5, r6, pc}
 801212e:	200b      	movs	r0, #11
 8012130:	bd70      	pop	{r4, r5, r6, pc}
 8012132:	f640 0098 	movw	r0, #2200	@ 0x898
 8012136:	4770      	bx	lr

08012138 <rcl_action_send_cancel_response>:
 8012138:	b398      	cbz	r0, 80121a2 <rcl_action_send_cancel_response+0x6a>
 801213a:	b570      	push	{r4, r5, r6, lr}
 801213c:	4604      	mov	r4, r0
 801213e:	6800      	ldr	r0, [r0, #0]
 8012140:	b350      	cbz	r0, 8012198 <rcl_action_send_cancel_response+0x60>
 8012142:	460d      	mov	r5, r1
 8012144:	4616      	mov	r6, r2
 8012146:	f7fe fadd 	bl	8010704 <rcl_service_is_valid>
 801214a:	b300      	cbz	r0, 801218e <rcl_action_send_cancel_response+0x56>
 801214c:	6820      	ldr	r0, [r4, #0]
 801214e:	3004      	adds	r0, #4
 8012150:	f7fe fad8 	bl	8010704 <rcl_service_is_valid>
 8012154:	b1d8      	cbz	r0, 801218e <rcl_action_send_cancel_response+0x56>
 8012156:	6820      	ldr	r0, [r4, #0]
 8012158:	3008      	adds	r0, #8
 801215a:	f7fe fad3 	bl	8010704 <rcl_service_is_valid>
 801215e:	b1b0      	cbz	r0, 801218e <rcl_action_send_cancel_response+0x56>
 8012160:	6820      	ldr	r0, [r4, #0]
 8012162:	300c      	adds	r0, #12
 8012164:	f7f8 fa86 	bl	800a674 <rcl_publisher_is_valid>
 8012168:	b188      	cbz	r0, 801218e <rcl_action_send_cancel_response+0x56>
 801216a:	6820      	ldr	r0, [r4, #0]
 801216c:	3010      	adds	r0, #16
 801216e:	f7f8 fa81 	bl	800a674 <rcl_publisher_is_valid>
 8012172:	b160      	cbz	r0, 801218e <rcl_action_send_cancel_response+0x56>
 8012174:	b19d      	cbz	r5, 801219e <rcl_action_send_cancel_response+0x66>
 8012176:	b196      	cbz	r6, 801219e <rcl_action_send_cancel_response+0x66>
 8012178:	6820      	ldr	r0, [r4, #0]
 801217a:	4632      	mov	r2, r6
 801217c:	4629      	mov	r1, r5
 801217e:	3004      	adds	r0, #4
 8012180:	f7fe faa8 	bl	80106d4 <rcl_send_response>
 8012184:	b110      	cbz	r0, 801218c <rcl_action_send_cancel_response+0x54>
 8012186:	2802      	cmp	r0, #2
 8012188:	bf18      	it	ne
 801218a:	2001      	movne	r0, #1
 801218c:	bd70      	pop	{r4, r5, r6, pc}
 801218e:	f7f9 f9bf 	bl	800b510 <rcutils_reset_error>
 8012192:	f640 0098 	movw	r0, #2200	@ 0x898
 8012196:	bd70      	pop	{r4, r5, r6, pc}
 8012198:	f640 0098 	movw	r0, #2200	@ 0x898
 801219c:	bd70      	pop	{r4, r5, r6, pc}
 801219e:	200b      	movs	r0, #11
 80121a0:	bd70      	pop	{r4, r5, r6, pc}
 80121a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80121a6:	4770      	bx	lr

080121a8 <rcl_action_wait_set_add_action_server>:
 80121a8:	2800      	cmp	r0, #0
 80121aa:	d04d      	beq.n	8012248 <rcl_action_wait_set_add_action_server+0xa0>
 80121ac:	b570      	push	{r4, r5, r6, lr}
 80121ae:	460c      	mov	r4, r1
 80121b0:	b159      	cbz	r1, 80121ca <rcl_action_wait_set_add_action_server+0x22>
 80121b2:	4605      	mov	r5, r0
 80121b4:	6808      	ldr	r0, [r1, #0]
 80121b6:	b140      	cbz	r0, 80121ca <rcl_action_wait_set_add_action_server+0x22>
 80121b8:	4616      	mov	r6, r2
 80121ba:	f7fe faa3 	bl	8010704 <rcl_service_is_valid>
 80121be:	b120      	cbz	r0, 80121ca <rcl_action_wait_set_add_action_server+0x22>
 80121c0:	6820      	ldr	r0, [r4, #0]
 80121c2:	3004      	adds	r0, #4
 80121c4:	f7fe fa9e 	bl	8010704 <rcl_service_is_valid>
 80121c8:	b910      	cbnz	r0, 80121d0 <rcl_action_wait_set_add_action_server+0x28>
 80121ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80121ce:	bd70      	pop	{r4, r5, r6, pc}
 80121d0:	6820      	ldr	r0, [r4, #0]
 80121d2:	3008      	adds	r0, #8
 80121d4:	f7fe fa96 	bl	8010704 <rcl_service_is_valid>
 80121d8:	2800      	cmp	r0, #0
 80121da:	d0f6      	beq.n	80121ca <rcl_action_wait_set_add_action_server+0x22>
 80121dc:	6820      	ldr	r0, [r4, #0]
 80121de:	300c      	adds	r0, #12
 80121e0:	f7f8 fa60 	bl	800a6a4 <rcl_publisher_is_valid_except_context>
 80121e4:	2800      	cmp	r0, #0
 80121e6:	d0f0      	beq.n	80121ca <rcl_action_wait_set_add_action_server+0x22>
 80121e8:	6820      	ldr	r0, [r4, #0]
 80121ea:	3010      	adds	r0, #16
 80121ec:	f7f8 fa5a 	bl	800a6a4 <rcl_publisher_is_valid_except_context>
 80121f0:	2800      	cmp	r0, #0
 80121f2:	d0ea      	beq.n	80121ca <rcl_action_wait_set_add_action_server+0x22>
 80121f4:	6821      	ldr	r1, [r4, #0]
 80121f6:	4628      	mov	r0, r5
 80121f8:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80121fc:	f7ff fad0 	bl	80117a0 <rcl_wait_set_add_service>
 8012200:	2800      	cmp	r0, #0
 8012202:	d1e4      	bne.n	80121ce <rcl_action_wait_set_add_action_server+0x26>
 8012204:	6821      	ldr	r1, [r4, #0]
 8012206:	4628      	mov	r0, r5
 8012208:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801220c:	3104      	adds	r1, #4
 801220e:	f7ff fac7 	bl	80117a0 <rcl_wait_set_add_service>
 8012212:	2800      	cmp	r0, #0
 8012214:	d1db      	bne.n	80121ce <rcl_action_wait_set_add_action_server+0x26>
 8012216:	6821      	ldr	r1, [r4, #0]
 8012218:	4628      	mov	r0, r5
 801221a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801221e:	3108      	adds	r1, #8
 8012220:	f7ff fabe 	bl	80117a0 <rcl_wait_set_add_service>
 8012224:	2800      	cmp	r0, #0
 8012226:	d1d2      	bne.n	80121ce <rcl_action_wait_set_add_action_server+0x26>
 8012228:	6821      	ldr	r1, [r4, #0]
 801222a:	4628      	mov	r0, r5
 801222c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8012230:	3114      	adds	r1, #20
 8012232:	f7ff fa59 	bl	80116e8 <rcl_wait_set_add_timer>
 8012236:	2800      	cmp	r0, #0
 8012238:	d1c9      	bne.n	80121ce <rcl_action_wait_set_add_action_server+0x26>
 801223a:	2e00      	cmp	r6, #0
 801223c:	d0c7      	beq.n	80121ce <rcl_action_wait_set_add_action_server+0x26>
 801223e:	6823      	ldr	r3, [r4, #0]
 8012240:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8012244:	6033      	str	r3, [r6, #0]
 8012246:	bd70      	pop	{r4, r5, r6, pc}
 8012248:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop

08012250 <rcl_action_server_wait_set_get_entities_ready>:
 8012250:	2800      	cmp	r0, #0
 8012252:	d05a      	beq.n	801230a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8012254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012256:	460c      	mov	r4, r1
 8012258:	b161      	cbz	r1, 8012274 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801225a:	4605      	mov	r5, r0
 801225c:	6808      	ldr	r0, [r1, #0]
 801225e:	b148      	cbz	r0, 8012274 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012260:	4616      	mov	r6, r2
 8012262:	461f      	mov	r7, r3
 8012264:	f7fe fa4e 	bl	8010704 <rcl_service_is_valid>
 8012268:	b120      	cbz	r0, 8012274 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801226a:	6820      	ldr	r0, [r4, #0]
 801226c:	3004      	adds	r0, #4
 801226e:	f7fe fa49 	bl	8010704 <rcl_service_is_valid>
 8012272:	b910      	cbnz	r0, 801227a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8012274:	f640 0098 	movw	r0, #2200	@ 0x898
 8012278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801227a:	6820      	ldr	r0, [r4, #0]
 801227c:	3008      	adds	r0, #8
 801227e:	f7fe fa41 	bl	8010704 <rcl_service_is_valid>
 8012282:	2800      	cmp	r0, #0
 8012284:	d0f6      	beq.n	8012274 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012286:	6820      	ldr	r0, [r4, #0]
 8012288:	300c      	adds	r0, #12
 801228a:	f7f8 fa0b 	bl	800a6a4 <rcl_publisher_is_valid_except_context>
 801228e:	2800      	cmp	r0, #0
 8012290:	d0f0      	beq.n	8012274 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012292:	6820      	ldr	r0, [r4, #0]
 8012294:	3010      	adds	r0, #16
 8012296:	f7f8 fa05 	bl	800a6a4 <rcl_publisher_is_valid_except_context>
 801229a:	2800      	cmp	r0, #0
 801229c:	d0ea      	beq.n	8012274 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801229e:	b3be      	cbz	r6, 8012310 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80122a0:	b3b7      	cbz	r7, 8012310 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80122a2:	9b06      	ldr	r3, [sp, #24]
 80122a4:	b3a3      	cbz	r3, 8012310 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80122a6:	9b07      	ldr	r3, [sp, #28]
 80122a8:	b393      	cbz	r3, 8012310 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80122aa:	6821      	ldr	r1, [r4, #0]
 80122ac:	692a      	ldr	r2, [r5, #16]
 80122ae:	6a2c      	ldr	r4, [r5, #32]
 80122b0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80122b4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80122b8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80122bc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80122c0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80122c4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80122c8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80122cc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80122d0:	1a64      	subs	r4, r4, r1
 80122d2:	fab4 f484 	clz	r4, r4
 80122d6:	0964      	lsrs	r4, r4, #5
 80122d8:	7034      	strb	r4, [r6, #0]
 80122da:	1d0c      	adds	r4, r1, #4
 80122dc:	1b1b      	subs	r3, r3, r4
 80122de:	fab3 f383 	clz	r3, r3
 80122e2:	095b      	lsrs	r3, r3, #5
 80122e4:	f101 0408 	add.w	r4, r1, #8
 80122e8:	703b      	strb	r3, [r7, #0]
 80122ea:	f101 0314 	add.w	r3, r1, #20
 80122ee:	1b01      	subs	r1, r0, r4
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	fab1 f181 	clz	r1, r1
 80122f6:	9a06      	ldr	r2, [sp, #24]
 80122f8:	0949      	lsrs	r1, r1, #5
 80122fa:	7011      	strb	r1, [r2, #0]
 80122fc:	fab3 f383 	clz	r3, r3
 8012300:	9a07      	ldr	r2, [sp, #28]
 8012302:	095b      	lsrs	r3, r3, #5
 8012304:	2000      	movs	r0, #0
 8012306:	7013      	strb	r3, [r2, #0]
 8012308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801230a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801230e:	4770      	bx	lr
 8012310:	200b      	movs	r0, #11
 8012312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012314 <_execute_event_handler>:
 8012314:	2002      	movs	r0, #2
 8012316:	4770      	bx	lr

08012318 <_cancel_goal_event_handler>:
 8012318:	2003      	movs	r0, #3
 801231a:	4770      	bx	lr

0801231c <_succeed_event_handler>:
 801231c:	2004      	movs	r0, #4
 801231e:	4770      	bx	lr

08012320 <_abort_event_handler>:
 8012320:	2006      	movs	r0, #6
 8012322:	4770      	bx	lr

08012324 <_canceled_event_handler>:
 8012324:	2005      	movs	r0, #5
 8012326:	4770      	bx	lr

08012328 <rcl_action_transition_goal_state>:
 8012328:	b2c2      	uxtb	r2, r0
 801232a:	2a06      	cmp	r2, #6
 801232c:	d80c      	bhi.n	8012348 <rcl_action_transition_goal_state+0x20>
 801232e:	2904      	cmp	r1, #4
 8012330:	d80a      	bhi.n	8012348 <rcl_action_transition_goal_state+0x20>
 8012332:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012336:	b410      	push	{r4}
 8012338:	1853      	adds	r3, r2, r1
 801233a:	4c06      	ldr	r4, [pc, #24]	@ (8012354 <rcl_action_transition_goal_state+0x2c>)
 801233c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012340:	b123      	cbz	r3, 801234c <rcl_action_transition_goal_state+0x24>
 8012342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012346:	4718      	bx	r3
 8012348:	2000      	movs	r0, #0
 801234a:	4770      	bx	lr
 801234c:	2000      	movs	r0, #0
 801234e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012352:	4770      	bx	lr
 8012354:	08018060 	.word	0x08018060

08012358 <rcl_action_get_zero_initialized_cancel_response>:
 8012358:	b510      	push	{r4, lr}
 801235a:	4c07      	ldr	r4, [pc, #28]	@ (8012378 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801235c:	4686      	mov	lr, r0
 801235e:	4684      	mov	ip, r0
 8012360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012362:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012368:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801236c:	6823      	ldr	r3, [r4, #0]
 801236e:	f8cc 3000 	str.w	r3, [ip]
 8012372:	4670      	mov	r0, lr
 8012374:	bd10      	pop	{r4, pc}
 8012376:	bf00      	nop
 8012378:	080180ec 	.word	0x080180ec

0801237c <rclc_action_send_result_request>:
 801237c:	b1d0      	cbz	r0, 80123b4 <rclc_action_send_result_request+0x38>
 801237e:	b500      	push	{lr}
 8012380:	4684      	mov	ip, r0
 8012382:	b087      	sub	sp, #28
 8012384:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012388:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801238c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012390:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8012394:	f10d 0e08 	add.w	lr, sp, #8
 8012398:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801239c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80123a0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80123a4:	a902      	add	r1, sp, #8
 80123a6:	3010      	adds	r0, #16
 80123a8:	f7ff fbda 	bl	8011b60 <rcl_action_send_result_request>
 80123ac:	b920      	cbnz	r0, 80123b8 <rclc_action_send_result_request+0x3c>
 80123ae:	b007      	add	sp, #28
 80123b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80123b4:	200b      	movs	r0, #11
 80123b6:	4770      	bx	lr
 80123b8:	9001      	str	r0, [sp, #4]
 80123ba:	f7f9 f8a9 	bl	800b510 <rcutils_reset_error>
 80123be:	9801      	ldr	r0, [sp, #4]
 80123c0:	b007      	add	sp, #28
 80123c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80123c6:	bf00      	nop

080123c8 <rclc_action_take_goal_handle>:
 80123c8:	b160      	cbz	r0, 80123e4 <rclc_action_take_goal_handle+0x1c>
 80123ca:	6883      	ldr	r3, [r0, #8]
 80123cc:	b143      	cbz	r3, 80123e0 <rclc_action_take_goal_handle+0x18>
 80123ce:	6819      	ldr	r1, [r3, #0]
 80123d0:	6081      	str	r1, [r0, #8]
 80123d2:	2200      	movs	r2, #0
 80123d4:	721a      	strb	r2, [r3, #8]
 80123d6:	68c1      	ldr	r1, [r0, #12]
 80123d8:	6019      	str	r1, [r3, #0]
 80123da:	621a      	str	r2, [r3, #32]
 80123dc:	849a      	strh	r2, [r3, #36]	@ 0x24
 80123de:	60c3      	str	r3, [r0, #12]
 80123e0:	4618      	mov	r0, r3
 80123e2:	4770      	bx	lr
 80123e4:	4603      	mov	r3, r0
 80123e6:	e7fb      	b.n	80123e0 <rclc_action_take_goal_handle+0x18>

080123e8 <rclc_action_remove_used_goal_handle>:
 80123e8:	b180      	cbz	r0, 801240c <rclc_action_remove_used_goal_handle+0x24>
 80123ea:	b179      	cbz	r1, 801240c <rclc_action_remove_used_goal_handle+0x24>
 80123ec:	68c3      	ldr	r3, [r0, #12]
 80123ee:	4299      	cmp	r1, r3
 80123f0:	d00d      	beq.n	801240e <rclc_action_remove_used_goal_handle+0x26>
 80123f2:	b12b      	cbz	r3, 8012400 <rclc_action_remove_used_goal_handle+0x18>
 80123f4:	681a      	ldr	r2, [r3, #0]
 80123f6:	4291      	cmp	r1, r2
 80123f8:	d003      	beq.n	8012402 <rclc_action_remove_used_goal_handle+0x1a>
 80123fa:	4613      	mov	r3, r2
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d1f9      	bne.n	80123f4 <rclc_action_remove_used_goal_handle+0xc>
 8012400:	4770      	bx	lr
 8012402:	680a      	ldr	r2, [r1, #0]
 8012404:	601a      	str	r2, [r3, #0]
 8012406:	6883      	ldr	r3, [r0, #8]
 8012408:	600b      	str	r3, [r1, #0]
 801240a:	6081      	str	r1, [r0, #8]
 801240c:	4770      	bx	lr
 801240e:	680b      	ldr	r3, [r1, #0]
 8012410:	60c3      	str	r3, [r0, #12]
 8012412:	e7f8      	b.n	8012406 <rclc_action_remove_used_goal_handle+0x1e>

08012414 <rclc_action_find_goal_handle_by_uuid>:
 8012414:	b538      	push	{r3, r4, r5, lr}
 8012416:	b180      	cbz	r0, 801243a <rclc_action_find_goal_handle_by_uuid+0x26>
 8012418:	460d      	mov	r5, r1
 801241a:	b181      	cbz	r1, 801243e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801241c:	68c4      	ldr	r4, [r0, #12]
 801241e:	b914      	cbnz	r4, 8012426 <rclc_action_find_goal_handle_by_uuid+0x12>
 8012420:	e009      	b.n	8012436 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012422:	6824      	ldr	r4, [r4, #0]
 8012424:	b13c      	cbz	r4, 8012436 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012426:	f104 0009 	add.w	r0, r4, #9
 801242a:	2210      	movs	r2, #16
 801242c:	4629      	mov	r1, r5
 801242e:	f004 fc57 	bl	8016ce0 <memcmp>
 8012432:	2800      	cmp	r0, #0
 8012434:	d1f5      	bne.n	8012422 <rclc_action_find_goal_handle_by_uuid+0xe>
 8012436:	4620      	mov	r0, r4
 8012438:	bd38      	pop	{r3, r4, r5, pc}
 801243a:	4604      	mov	r4, r0
 801243c:	e7fb      	b.n	8012436 <rclc_action_find_goal_handle_by_uuid+0x22>
 801243e:	460c      	mov	r4, r1
 8012440:	e7f9      	b.n	8012436 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012442:	bf00      	nop

08012444 <rclc_action_find_first_handle_by_status>:
 8012444:	b140      	cbz	r0, 8012458 <rclc_action_find_first_handle_by_status+0x14>
 8012446:	68c0      	ldr	r0, [r0, #12]
 8012448:	b910      	cbnz	r0, 8012450 <rclc_action_find_first_handle_by_status+0xc>
 801244a:	e005      	b.n	8012458 <rclc_action_find_first_handle_by_status+0x14>
 801244c:	6800      	ldr	r0, [r0, #0]
 801244e:	b118      	cbz	r0, 8012458 <rclc_action_find_first_handle_by_status+0x14>
 8012450:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012454:	428b      	cmp	r3, r1
 8012456:	d1f9      	bne.n	801244c <rclc_action_find_first_handle_by_status+0x8>
 8012458:	4770      	bx	lr
 801245a:	bf00      	nop

0801245c <rclc_action_find_first_terminated_handle>:
 801245c:	b140      	cbz	r0, 8012470 <rclc_action_find_first_terminated_handle+0x14>
 801245e:	68c0      	ldr	r0, [r0, #12]
 8012460:	b910      	cbnz	r0, 8012468 <rclc_action_find_first_terminated_handle+0xc>
 8012462:	e005      	b.n	8012470 <rclc_action_find_first_terminated_handle+0x14>
 8012464:	6800      	ldr	r0, [r0, #0]
 8012466:	b118      	cbz	r0, 8012470 <rclc_action_find_first_terminated_handle+0x14>
 8012468:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801246c:	2b03      	cmp	r3, #3
 801246e:	ddf9      	ble.n	8012464 <rclc_action_find_first_terminated_handle+0x8>
 8012470:	4770      	bx	lr
 8012472:	bf00      	nop

08012474 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012474:	b170      	cbz	r0, 8012494 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012476:	68c0      	ldr	r0, [r0, #12]
 8012478:	b160      	cbz	r0, 8012494 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801247a:	b410      	push	{r4}
 801247c:	e001      	b.n	8012482 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801247e:	6800      	ldr	r0, [r0, #0]
 8012480:	b128      	cbz	r0, 801248e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8012482:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8012486:	4299      	cmp	r1, r3
 8012488:	bf08      	it	eq
 801248a:	4294      	cmpeq	r4, r2
 801248c:	d1f7      	bne.n	801247e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801248e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012492:	4770      	bx	lr
 8012494:	4770      	bx	lr
 8012496:	bf00      	nop

08012498 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012498:	b170      	cbz	r0, 80124b8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801249a:	68c0      	ldr	r0, [r0, #12]
 801249c:	b160      	cbz	r0, 80124b8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801249e:	b410      	push	{r4}
 80124a0:	e001      	b.n	80124a6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80124a2:	6800      	ldr	r0, [r0, #0]
 80124a4:	b128      	cbz	r0, 80124b2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80124a6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80124aa:	4299      	cmp	r1, r3
 80124ac:	bf08      	it	eq
 80124ae:	4294      	cmpeq	r4, r2
 80124b0:	d1f7      	bne.n	80124a2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80124b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124b6:	4770      	bx	lr
 80124b8:	4770      	bx	lr
 80124ba:	bf00      	nop

080124bc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80124bc:	b170      	cbz	r0, 80124dc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80124be:	68c0      	ldr	r0, [r0, #12]
 80124c0:	b160      	cbz	r0, 80124dc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80124c2:	b410      	push	{r4}
 80124c4:	e001      	b.n	80124ca <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80124c6:	6800      	ldr	r0, [r0, #0]
 80124c8:	b128      	cbz	r0, 80124d6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80124ca:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80124ce:	4299      	cmp	r1, r3
 80124d0:	bf08      	it	eq
 80124d2:	4294      	cmpeq	r4, r2
 80124d4:	d1f7      	bne.n	80124c6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80124d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124da:	4770      	bx	lr
 80124dc:	4770      	bx	lr
 80124de:	bf00      	nop

080124e0 <rclc_action_find_first_handle_with_goal_response>:
 80124e0:	b140      	cbz	r0, 80124f4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80124e2:	68c0      	ldr	r0, [r0, #12]
 80124e4:	b910      	cbnz	r0, 80124ec <rclc_action_find_first_handle_with_goal_response+0xc>
 80124e6:	e005      	b.n	80124f4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80124e8:	6800      	ldr	r0, [r0, #0]
 80124ea:	b118      	cbz	r0, 80124f4 <rclc_action_find_first_handle_with_goal_response+0x14>
 80124ec:	f890 3020 	ldrb.w	r3, [r0, #32]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d0f9      	beq.n	80124e8 <rclc_action_find_first_handle_with_goal_response+0x8>
 80124f4:	4770      	bx	lr
 80124f6:	bf00      	nop

080124f8 <rclc_action_find_first_handle_with_result_response>:
 80124f8:	b140      	cbz	r0, 801250c <rclc_action_find_first_handle_with_result_response+0x14>
 80124fa:	68c0      	ldr	r0, [r0, #12]
 80124fc:	b910      	cbnz	r0, 8012504 <rclc_action_find_first_handle_with_result_response+0xc>
 80124fe:	e005      	b.n	801250c <rclc_action_find_first_handle_with_result_response+0x14>
 8012500:	6800      	ldr	r0, [r0, #0]
 8012502:	b118      	cbz	r0, 801250c <rclc_action_find_first_handle_with_result_response+0x14>
 8012504:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8012508:	2b00      	cmp	r3, #0
 801250a:	d0f9      	beq.n	8012500 <rclc_action_find_first_handle_with_result_response+0x8>
 801250c:	4770      	bx	lr
 801250e:	bf00      	nop

08012510 <rclc_action_server_response_goal_request>:
 8012510:	b198      	cbz	r0, 801253a <rclc_action_server_response_goal_request+0x2a>
 8012512:	b510      	push	{r4, lr}
 8012514:	6844      	ldr	r4, [r0, #4]
 8012516:	b086      	sub	sp, #24
 8012518:	2200      	movs	r2, #0
 801251a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801251e:	460b      	mov	r3, r1
 8012520:	9205      	str	r2, [sp, #20]
 8012522:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8012526:	aa03      	add	r2, sp, #12
 8012528:	f104 0010 	add.w	r0, r4, #16
 801252c:	f88d 300c 	strb.w	r3, [sp, #12]
 8012530:	f7ff fd4a 	bl	8011fc8 <rcl_action_send_goal_response>
 8012534:	b918      	cbnz	r0, 801253e <rclc_action_server_response_goal_request+0x2e>
 8012536:	b006      	add	sp, #24
 8012538:	bd10      	pop	{r4, pc}
 801253a:	200b      	movs	r0, #11
 801253c:	4770      	bx	lr
 801253e:	9001      	str	r0, [sp, #4]
 8012540:	f7f8 ffe6 	bl	800b510 <rcutils_reset_error>
 8012544:	9801      	ldr	r0, [sp, #4]
 8012546:	b006      	add	sp, #24
 8012548:	bd10      	pop	{r4, pc}
 801254a:	bf00      	nop
 801254c:	0000      	movs	r0, r0
	...

08012550 <rclc_action_server_goal_cancel_accept>:
 8012550:	b310      	cbz	r0, 8012598 <rclc_action_server_goal_cancel_accept+0x48>
 8012552:	b510      	push	{r4, lr}
 8012554:	b090      	sub	sp, #64	@ 0x40
 8012556:	4604      	mov	r4, r0
 8012558:	a806      	add	r0, sp, #24
 801255a:	f7ff fefd 	bl	8012358 <rcl_action_get_zero_initialized_cancel_response>
 801255e:	2300      	movs	r3, #0
 8012560:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8012564:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012568:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801256c:	f88d 3018 	strb.w	r3, [sp, #24]
 8012570:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8012574:	f8cd d01c 	str.w	sp, [sp, #28]
 8012578:	46ec      	mov	ip, sp
 801257a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801257e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80125a0 <rclc_action_server_goal_cancel_accept+0x50>
 8012582:	6860      	ldr	r0, [r4, #4]
 8012584:	aa06      	add	r2, sp, #24
 8012586:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801258a:	3010      	adds	r0, #16
 801258c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012590:	f7ff fdd2 	bl	8012138 <rcl_action_send_cancel_response>
 8012594:	b010      	add	sp, #64	@ 0x40
 8012596:	bd10      	pop	{r4, pc}
 8012598:	200b      	movs	r0, #11
 801259a:	4770      	bx	lr
 801259c:	f3af 8000 	nop.w
 80125a0:	00000001 	.word	0x00000001
 80125a4:	00000001 	.word	0x00000001

080125a8 <rclc_action_server_goal_cancel_reject>:
 80125a8:	b082      	sub	sp, #8
 80125aa:	b530      	push	{r4, r5, lr}
 80125ac:	b08b      	sub	sp, #44	@ 0x2c
 80125ae:	ac0e      	add	r4, sp, #56	@ 0x38
 80125b0:	e884 000c 	stmia.w	r4, {r2, r3}
 80125b4:	b188      	cbz	r0, 80125da <rclc_action_server_goal_cancel_reject+0x32>
 80125b6:	4604      	mov	r4, r0
 80125b8:	a801      	add	r0, sp, #4
 80125ba:	460d      	mov	r5, r1
 80125bc:	f7ff fecc 	bl	8012358 <rcl_action_get_zero_initialized_cancel_response>
 80125c0:	aa01      	add	r2, sp, #4
 80125c2:	a90e      	add	r1, sp, #56	@ 0x38
 80125c4:	f104 0010 	add.w	r0, r4, #16
 80125c8:	f88d 5004 	strb.w	r5, [sp, #4]
 80125cc:	f7ff fdb4 	bl	8012138 <rcl_action_send_cancel_response>
 80125d0:	b00b      	add	sp, #44	@ 0x2c
 80125d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125d6:	b002      	add	sp, #8
 80125d8:	4770      	bx	lr
 80125da:	200b      	movs	r0, #11
 80125dc:	b00b      	add	sp, #44	@ 0x2c
 80125de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125e2:	b002      	add	sp, #8
 80125e4:	4770      	bx	lr
 80125e6:	bf00      	nop

080125e8 <__atomic_load_8>:
 80125e8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80125ec:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80125f0:	4a15      	ldr	r2, [pc, #84]	@ (8012648 <__atomic_load_8+0x60>)
 80125f2:	4b16      	ldr	r3, [pc, #88]	@ (801264c <__atomic_load_8+0x64>)
 80125f4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80125f8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80125fc:	fb02 f101 	mul.w	r1, r2, r1
 8012600:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012604:	fba3 2301 	umull	r2, r3, r3, r1
 8012608:	091b      	lsrs	r3, r3, #4
 801260a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801260e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012612:	b4d0      	push	{r4, r6, r7}
 8012614:	4c0e      	ldr	r4, [pc, #56]	@ (8012650 <__atomic_load_8+0x68>)
 8012616:	1ac9      	subs	r1, r1, r3
 8012618:	1862      	adds	r2, r4, r1
 801261a:	f04f 0c01 	mov.w	ip, #1
 801261e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012622:	e8c2 cf46 	strexb	r6, ip, [r2]
 8012626:	2e00      	cmp	r6, #0
 8012628:	d1f9      	bne.n	801261e <__atomic_load_8+0x36>
 801262a:	f3bf 8f5b 	dmb	ish
 801262e:	b2db      	uxtb	r3, r3
 8012630:	2b00      	cmp	r3, #0
 8012632:	d1f4      	bne.n	801261e <__atomic_load_8+0x36>
 8012634:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012638:	f3bf 8f5b 	dmb	ish
 801263c:	5463      	strb	r3, [r4, r1]
 801263e:	4630      	mov	r0, r6
 8012640:	4639      	mov	r1, r7
 8012642:	bcd0      	pop	{r4, r6, r7}
 8012644:	4770      	bx	lr
 8012646:	bf00      	nop
 8012648:	27d4eb2d 	.word	0x27d4eb2d
 801264c:	b21642c9 	.word	0xb21642c9
 8012650:	20015eb8 	.word	0x20015eb8

08012654 <__atomic_store_8>:
 8012654:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012658:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801265c:	b570      	push	{r4, r5, r6, lr}
 801265e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012662:	4c14      	ldr	r4, [pc, #80]	@ (80126b4 <__atomic_store_8+0x60>)
 8012664:	4d14      	ldr	r5, [pc, #80]	@ (80126b8 <__atomic_store_8+0x64>)
 8012666:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801266a:	fb04 f101 	mul.w	r1, r4, r1
 801266e:	4c13      	ldr	r4, [pc, #76]	@ (80126bc <__atomic_store_8+0x68>)
 8012670:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012674:	fba4 4e01 	umull	r4, lr, r4, r1
 8012678:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801267c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012680:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8012684:	eba1 0e0e 	sub.w	lr, r1, lr
 8012688:	eb05 0c0e 	add.w	ip, r5, lr
 801268c:	f04f 0401 	mov.w	r4, #1
 8012690:	e8dc 1f4f 	ldrexb	r1, [ip]
 8012694:	e8cc 4f46 	strexb	r6, r4, [ip]
 8012698:	2e00      	cmp	r6, #0
 801269a:	d1f9      	bne.n	8012690 <__atomic_store_8+0x3c>
 801269c:	f3bf 8f5b 	dmb	ish
 80126a0:	b2c9      	uxtb	r1, r1
 80126a2:	2900      	cmp	r1, #0
 80126a4:	d1f4      	bne.n	8012690 <__atomic_store_8+0x3c>
 80126a6:	e9c0 2300 	strd	r2, r3, [r0]
 80126aa:	f3bf 8f5b 	dmb	ish
 80126ae:	f805 100e 	strb.w	r1, [r5, lr]
 80126b2:	bd70      	pop	{r4, r5, r6, pc}
 80126b4:	27d4eb2d 	.word	0x27d4eb2d
 80126b8:	20015eb8 	.word	0x20015eb8
 80126bc:	b21642c9 	.word	0xb21642c9

080126c0 <__atomic_exchange_8>:
 80126c0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80126c4:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 80126c8:	4916      	ldr	r1, [pc, #88]	@ (8012724 <__atomic_exchange_8+0x64>)
 80126ca:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80126ce:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80126d2:	fb01 fc0c 	mul.w	ip, r1, ip
 80126d6:	4914      	ldr	r1, [pc, #80]	@ (8012728 <__atomic_exchange_8+0x68>)
 80126d8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80126dc:	b570      	push	{r4, r5, r6, lr}
 80126de:	4605      	mov	r5, r0
 80126e0:	fba1 010c 	umull	r0, r1, r1, ip
 80126e4:	0909      	lsrs	r1, r1, #4
 80126e6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80126ea:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80126ee:	4e0f      	ldr	r6, [pc, #60]	@ (801272c <__atomic_exchange_8+0x6c>)
 80126f0:	ebac 0c01 	sub.w	ip, ip, r1
 80126f4:	eb06 010c 	add.w	r1, r6, ip
 80126f8:	f04f 0e01 	mov.w	lr, #1
 80126fc:	e8d1 4f4f 	ldrexb	r4, [r1]
 8012700:	e8c1 ef40 	strexb	r0, lr, [r1]
 8012704:	2800      	cmp	r0, #0
 8012706:	d1f9      	bne.n	80126fc <__atomic_exchange_8+0x3c>
 8012708:	f3bf 8f5b 	dmb	ish
 801270c:	b2e4      	uxtb	r4, r4
 801270e:	2c00      	cmp	r4, #0
 8012710:	d1f4      	bne.n	80126fc <__atomic_exchange_8+0x3c>
 8012712:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012716:	e9c5 2300 	strd	r2, r3, [r5]
 801271a:	f3bf 8f5b 	dmb	ish
 801271e:	f806 400c 	strb.w	r4, [r6, ip]
 8012722:	bd70      	pop	{r4, r5, r6, pc}
 8012724:	27d4eb2d 	.word	0x27d4eb2d
 8012728:	b21642c9 	.word	0xb21642c9
 801272c:	20015eb8 	.word	0x20015eb8

08012730 <rcutils_get_env>:
 8012730:	b168      	cbz	r0, 801274e <rcutils_get_env+0x1e>
 8012732:	b510      	push	{r4, lr}
 8012734:	460c      	mov	r4, r1
 8012736:	b129      	cbz	r1, 8012744 <rcutils_get_env+0x14>
 8012738:	f003 ff40 	bl	80165bc <getenv>
 801273c:	b120      	cbz	r0, 8012748 <rcutils_get_env+0x18>
 801273e:	6020      	str	r0, [r4, #0]
 8012740:	2000      	movs	r0, #0
 8012742:	bd10      	pop	{r4, pc}
 8012744:	4803      	ldr	r0, [pc, #12]	@ (8012754 <rcutils_get_env+0x24>)
 8012746:	bd10      	pop	{r4, pc}
 8012748:	4b03      	ldr	r3, [pc, #12]	@ (8012758 <rcutils_get_env+0x28>)
 801274a:	6023      	str	r3, [r4, #0]
 801274c:	bd10      	pop	{r4, pc}
 801274e:	4803      	ldr	r0, [pc, #12]	@ (801275c <rcutils_get_env+0x2c>)
 8012750:	4770      	bx	lr
 8012752:	bf00      	nop
 8012754:	0801812c 	.word	0x0801812c
 8012758:	08018250 	.word	0x08018250
 801275c:	08018110 	.word	0x08018110

08012760 <rcutils_format_string_limit>:
 8012760:	b40f      	push	{r0, r1, r2, r3}
 8012762:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012764:	b083      	sub	sp, #12
 8012766:	ac08      	add	r4, sp, #32
 8012768:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801276a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801276e:	b34e      	cbz	r6, 80127c4 <rcutils_format_string_limit+0x64>
 8012770:	a808      	add	r0, sp, #32
 8012772:	f7f8 fea9 	bl	800b4c8 <rcutils_allocator_is_valid>
 8012776:	b328      	cbz	r0, 80127c4 <rcutils_format_string_limit+0x64>
 8012778:	2100      	movs	r1, #0
 801277a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801277c:	4632      	mov	r2, r6
 801277e:	4608      	mov	r0, r1
 8012780:	e9cd 3300 	strd	r3, r3, [sp]
 8012784:	f000 f8f4 	bl	8012970 <rcutils_vsnprintf>
 8012788:	1c43      	adds	r3, r0, #1
 801278a:	4605      	mov	r5, r0
 801278c:	d01a      	beq.n	80127c4 <rcutils_format_string_limit+0x64>
 801278e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012790:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012792:	1c47      	adds	r7, r0, #1
 8012794:	429f      	cmp	r7, r3
 8012796:	bf84      	itt	hi
 8012798:	461f      	movhi	r7, r3
 801279a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801279e:	4638      	mov	r0, r7
 80127a0:	9b08      	ldr	r3, [sp, #32]
 80127a2:	4798      	blx	r3
 80127a4:	4604      	mov	r4, r0
 80127a6:	b168      	cbz	r0, 80127c4 <rcutils_format_string_limit+0x64>
 80127a8:	9b01      	ldr	r3, [sp, #4]
 80127aa:	4632      	mov	r2, r6
 80127ac:	4639      	mov	r1, r7
 80127ae:	f000 f8df 	bl	8012970 <rcutils_vsnprintf>
 80127b2:	2800      	cmp	r0, #0
 80127b4:	db02      	blt.n	80127bc <rcutils_format_string_limit+0x5c>
 80127b6:	2300      	movs	r3, #0
 80127b8:	5563      	strb	r3, [r4, r5]
 80127ba:	e004      	b.n	80127c6 <rcutils_format_string_limit+0x66>
 80127bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127be:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80127c0:	4620      	mov	r0, r4
 80127c2:	4798      	blx	r3
 80127c4:	2400      	movs	r4, #0
 80127c6:	4620      	mov	r0, r4
 80127c8:	b003      	add	sp, #12
 80127ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80127ce:	b004      	add	sp, #16
 80127d0:	4770      	bx	lr
 80127d2:	bf00      	nop

080127d4 <rcutils_repl_str>:
 80127d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d8:	ed2d 8b02 	vpush	{d8}
 80127dc:	b087      	sub	sp, #28
 80127de:	4680      	mov	r8, r0
 80127e0:	4608      	mov	r0, r1
 80127e2:	f8cd 8004 	str.w	r8, [sp, #4]
 80127e6:	ee08 2a10 	vmov	s16, r2
 80127ea:	468a      	mov	sl, r1
 80127ec:	4699      	mov	r9, r3
 80127ee:	f7ed fcf9 	bl	80001e4 <strlen>
 80127f2:	2600      	movs	r6, #0
 80127f4:	4647      	mov	r7, r8
 80127f6:	9002      	str	r0, [sp, #8]
 80127f8:	46b3      	mov	fp, r6
 80127fa:	2510      	movs	r5, #16
 80127fc:	46b0      	mov	r8, r6
 80127fe:	e01d      	b.n	801283c <rcutils_repl_str+0x68>
 8012800:	f10b 0b01 	add.w	fp, fp, #1
 8012804:	455e      	cmp	r6, fp
 8012806:	d211      	bcs.n	801282c <rcutils_repl_str+0x58>
 8012808:	442e      	add	r6, r5
 801280a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801280e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012812:	00b1      	lsls	r1, r6, #2
 8012814:	4798      	blx	r3
 8012816:	2800      	cmp	r0, #0
 8012818:	f000 8088 	beq.w	801292c <rcutils_repl_str+0x158>
 801281c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012820:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8012824:	4680      	mov	r8, r0
 8012826:	bf28      	it	cs
 8012828:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801282c:	9a01      	ldr	r2, [sp, #4]
 801282e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8012832:	1aa2      	subs	r2, r4, r2
 8012834:	f843 2c04 	str.w	r2, [r3, #-4]
 8012838:	9b02      	ldr	r3, [sp, #8]
 801283a:	18e7      	adds	r7, r4, r3
 801283c:	4651      	mov	r1, sl
 801283e:	4638      	mov	r0, r7
 8012840:	f004 fa9f 	bl	8016d82 <strstr>
 8012844:	4604      	mov	r4, r0
 8012846:	4640      	mov	r0, r8
 8012848:	2c00      	cmp	r4, #0
 801284a:	d1d9      	bne.n	8012800 <rcutils_repl_str+0x2c>
 801284c:	46b8      	mov	r8, r7
 801284e:	4607      	mov	r7, r0
 8012850:	4640      	mov	r0, r8
 8012852:	f7ed fcc7 	bl	80001e4 <strlen>
 8012856:	9b01      	ldr	r3, [sp, #4]
 8012858:	eba8 0303 	sub.w	r3, r8, r3
 801285c:	181c      	adds	r4, r3, r0
 801285e:	9404      	str	r4, [sp, #16]
 8012860:	f1bb 0f00 	cmp.w	fp, #0
 8012864:	d04a      	beq.n	80128fc <rcutils_repl_str+0x128>
 8012866:	ee18 0a10 	vmov	r0, s16
 801286a:	f7ed fcbb 	bl	80001e4 <strlen>
 801286e:	9b02      	ldr	r3, [sp, #8]
 8012870:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012874:	1ac3      	subs	r3, r0, r3
 8012876:	fb0b 4303 	mla	r3, fp, r3, r4
 801287a:	461a      	mov	r2, r3
 801287c:	9305      	str	r3, [sp, #20]
 801287e:	4606      	mov	r6, r0
 8012880:	f8d9 3000 	ldr.w	r3, [r9]
 8012884:	1c50      	adds	r0, r2, #1
 8012886:	4798      	blx	r3
 8012888:	9003      	str	r0, [sp, #12]
 801288a:	2800      	cmp	r0, #0
 801288c:	d04f      	beq.n	801292e <rcutils_repl_str+0x15a>
 801288e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012892:	683a      	ldr	r2, [r7, #0]
 8012894:	4641      	mov	r1, r8
 8012896:	f004 fb16 	bl	8016ec6 <memcpy>
 801289a:	683d      	ldr	r5, [r7, #0]
 801289c:	9b03      	ldr	r3, [sp, #12]
 801289e:	9701      	str	r7, [sp, #4]
 80128a0:	46ba      	mov	sl, r7
 80128a2:	441d      	add	r5, r3
 80128a4:	9f02      	ldr	r7, [sp, #8]
 80128a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80128aa:	2401      	movs	r4, #1
 80128ac:	46d1      	mov	r9, sl
 80128ae:	ee18 aa10 	vmov	sl, s16
 80128b2:	e00a      	b.n	80128ca <rcutils_repl_str+0xf6>
 80128b4:	f8d9 5000 	ldr.w	r5, [r9]
 80128b8:	1aaa      	subs	r2, r5, r2
 80128ba:	1885      	adds	r5, r0, r2
 80128bc:	f004 fb03 	bl	8016ec6 <memcpy>
 80128c0:	45a3      	cmp	fp, r4
 80128c2:	f104 0201 	add.w	r2, r4, #1
 80128c6:	d935      	bls.n	8012934 <rcutils_repl_str+0x160>
 80128c8:	4614      	mov	r4, r2
 80128ca:	4632      	mov	r2, r6
 80128cc:	4651      	mov	r1, sl
 80128ce:	4628      	mov	r0, r5
 80128d0:	f004 faf9 	bl	8016ec6 <memcpy>
 80128d4:	f859 2b04 	ldr.w	r2, [r9], #4
 80128d8:	45a3      	cmp	fp, r4
 80128da:	443a      	add	r2, r7
 80128dc:	eb05 0006 	add.w	r0, r5, r6
 80128e0:	eb08 0102 	add.w	r1, r8, r2
 80128e4:	d1e6      	bne.n	80128b4 <rcutils_repl_str+0xe0>
 80128e6:	9b04      	ldr	r3, [sp, #16]
 80128e8:	1a9a      	subs	r2, r3, r2
 80128ea:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80128ee:	f004 faea 	bl	8016ec6 <memcpy>
 80128f2:	9a03      	ldr	r2, [sp, #12]
 80128f4:	9905      	ldr	r1, [sp, #20]
 80128f6:	2300      	movs	r3, #0
 80128f8:	5453      	strb	r3, [r2, r1]
 80128fa:	e00b      	b.n	8012914 <rcutils_repl_str+0x140>
 80128fc:	4620      	mov	r0, r4
 80128fe:	f8d9 3000 	ldr.w	r3, [r9]
 8012902:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012906:	3001      	adds	r0, #1
 8012908:	4798      	blx	r3
 801290a:	9003      	str	r0, [sp, #12]
 801290c:	b110      	cbz	r0, 8012914 <rcutils_repl_str+0x140>
 801290e:	9901      	ldr	r1, [sp, #4]
 8012910:	f004 fad1 	bl	8016eb6 <strcpy>
 8012914:	4638      	mov	r0, r7
 8012916:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801291a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801291e:	4798      	blx	r3
 8012920:	9803      	ldr	r0, [sp, #12]
 8012922:	b007      	add	sp, #28
 8012924:	ecbd 8b02 	vpop	{d8}
 8012928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801292c:	4647      	mov	r7, r8
 801292e:	2300      	movs	r3, #0
 8012930:	9303      	str	r3, [sp, #12]
 8012932:	e7ef      	b.n	8012914 <rcutils_repl_str+0x140>
 8012934:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012938:	e7db      	b.n	80128f2 <rcutils_repl_str+0x11e>
 801293a:	bf00      	nop

0801293c <rcutils_snprintf>:
 801293c:	b40c      	push	{r2, r3}
 801293e:	b530      	push	{r4, r5, lr}
 8012940:	b083      	sub	sp, #12
 8012942:	ab06      	add	r3, sp, #24
 8012944:	f853 2b04 	ldr.w	r2, [r3], #4
 8012948:	9301      	str	r3, [sp, #4]
 801294a:	b152      	cbz	r2, 8012962 <rcutils_snprintf+0x26>
 801294c:	b138      	cbz	r0, 801295e <rcutils_snprintf+0x22>
 801294e:	b141      	cbz	r1, 8012962 <rcutils_snprintf+0x26>
 8012950:	f004 f9b8 	bl	8016cc4 <vsniprintf>
 8012954:	b003      	add	sp, #12
 8012956:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801295a:	b002      	add	sp, #8
 801295c:	4770      	bx	lr
 801295e:	2900      	cmp	r1, #0
 8012960:	d0f6      	beq.n	8012950 <rcutils_snprintf+0x14>
 8012962:	f004 fa7b 	bl	8016e5c <__errno>
 8012966:	2316      	movs	r3, #22
 8012968:	6003      	str	r3, [r0, #0]
 801296a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801296e:	e7f1      	b.n	8012954 <rcutils_snprintf+0x18>

08012970 <rcutils_vsnprintf>:
 8012970:	b570      	push	{r4, r5, r6, lr}
 8012972:	b13a      	cbz	r2, 8012984 <rcutils_vsnprintf+0x14>
 8012974:	b120      	cbz	r0, 8012980 <rcutils_vsnprintf+0x10>
 8012976:	b129      	cbz	r1, 8012984 <rcutils_vsnprintf+0x14>
 8012978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801297c:	f004 b9a2 	b.w	8016cc4 <vsniprintf>
 8012980:	2900      	cmp	r1, #0
 8012982:	d0f9      	beq.n	8012978 <rcutils_vsnprintf+0x8>
 8012984:	f004 fa6a 	bl	8016e5c <__errno>
 8012988:	2316      	movs	r3, #22
 801298a:	6003      	str	r3, [r0, #0]
 801298c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012990:	bd70      	pop	{r4, r5, r6, pc}
 8012992:	bf00      	nop

08012994 <rcutils_strdup>:
 8012994:	b084      	sub	sp, #16
 8012996:	b570      	push	{r4, r5, r6, lr}
 8012998:	b082      	sub	sp, #8
 801299a:	ac07      	add	r4, sp, #28
 801299c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80129a0:	4605      	mov	r5, r0
 80129a2:	b1b0      	cbz	r0, 80129d2 <rcutils_strdup+0x3e>
 80129a4:	f7ed fc1e 	bl	80001e4 <strlen>
 80129a8:	1c42      	adds	r2, r0, #1
 80129aa:	9b07      	ldr	r3, [sp, #28]
 80129ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80129ae:	9201      	str	r2, [sp, #4]
 80129b0:	4606      	mov	r6, r0
 80129b2:	4610      	mov	r0, r2
 80129b4:	4798      	blx	r3
 80129b6:	4604      	mov	r4, r0
 80129b8:	b128      	cbz	r0, 80129c6 <rcutils_strdup+0x32>
 80129ba:	9a01      	ldr	r2, [sp, #4]
 80129bc:	4629      	mov	r1, r5
 80129be:	f004 fa82 	bl	8016ec6 <memcpy>
 80129c2:	2300      	movs	r3, #0
 80129c4:	55a3      	strb	r3, [r4, r6]
 80129c6:	4620      	mov	r0, r4
 80129c8:	b002      	add	sp, #8
 80129ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129ce:	b004      	add	sp, #16
 80129d0:	4770      	bx	lr
 80129d2:	4604      	mov	r4, r0
 80129d4:	e7f7      	b.n	80129c6 <rcutils_strdup+0x32>
 80129d6:	bf00      	nop

080129d8 <rcutils_strndup>:
 80129d8:	b082      	sub	sp, #8
 80129da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129dc:	ac06      	add	r4, sp, #24
 80129de:	e884 000c 	stmia.w	r4, {r2, r3}
 80129e2:	4605      	mov	r5, r0
 80129e4:	b188      	cbz	r0, 8012a0a <rcutils_strndup+0x32>
 80129e6:	1c4f      	adds	r7, r1, #1
 80129e8:	460e      	mov	r6, r1
 80129ea:	4638      	mov	r0, r7
 80129ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80129ee:	4790      	blx	r2
 80129f0:	4604      	mov	r4, r0
 80129f2:	b128      	cbz	r0, 8012a00 <rcutils_strndup+0x28>
 80129f4:	463a      	mov	r2, r7
 80129f6:	4629      	mov	r1, r5
 80129f8:	f004 fa65 	bl	8016ec6 <memcpy>
 80129fc:	2300      	movs	r3, #0
 80129fe:	55a3      	strb	r3, [r4, r6]
 8012a00:	4620      	mov	r0, r4
 8012a02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012a06:	b002      	add	sp, #8
 8012a08:	4770      	bx	lr
 8012a0a:	4604      	mov	r4, r0
 8012a0c:	e7f8      	b.n	8012a00 <rcutils_strndup+0x28>
 8012a0e:	bf00      	nop

08012a10 <rcutils_get_zero_initialized_string_map>:
 8012a10:	4b01      	ldr	r3, [pc, #4]	@ (8012a18 <rcutils_get_zero_initialized_string_map+0x8>)
 8012a12:	2000      	movs	r0, #0
 8012a14:	6018      	str	r0, [r3, #0]
 8012a16:	4770      	bx	lr
 8012a18:	20015ed0 	.word	0x20015ed0

08012a1c <rcutils_string_map_reserve>:
 8012a1c:	2800      	cmp	r0, #0
 8012a1e:	d05f      	beq.n	8012ae0 <rcutils_string_map_reserve+0xc4>
 8012a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a24:	460c      	mov	r4, r1
 8012a26:	6801      	ldr	r1, [r0, #0]
 8012a28:	b082      	sub	sp, #8
 8012a2a:	4605      	mov	r5, r0
 8012a2c:	b129      	cbz	r1, 8012a3a <rcutils_string_map_reserve+0x1e>
 8012a2e:	68cb      	ldr	r3, [r1, #12]
 8012a30:	42a3      	cmp	r3, r4
 8012a32:	d906      	bls.n	8012a42 <rcutils_string_map_reserve+0x26>
 8012a34:	461c      	mov	r4, r3
 8012a36:	2900      	cmp	r1, #0
 8012a38:	d1f9      	bne.n	8012a2e <rcutils_string_map_reserve+0x12>
 8012a3a:	201f      	movs	r0, #31
 8012a3c:	b002      	add	sp, #8
 8012a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a42:	688b      	ldr	r3, [r1, #8]
 8012a44:	42a3      	cmp	r3, r4
 8012a46:	d047      	beq.n	8012ad8 <rcutils_string_map_reserve+0xbc>
 8012a48:	6a0e      	ldr	r6, [r1, #32]
 8012a4a:	2c00      	cmp	r4, #0
 8012a4c:	d034      	beq.n	8012ab8 <rcutils_string_map_reserve+0x9c>
 8012a4e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8012a52:	d243      	bcs.n	8012adc <rcutils_string_map_reserve+0xc0>
 8012a54:	00a7      	lsls	r7, r4, #2
 8012a56:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8012a5a:	6808      	ldr	r0, [r1, #0]
 8012a5c:	4632      	mov	r2, r6
 8012a5e:	4639      	mov	r1, r7
 8012a60:	47c0      	blx	r8
 8012a62:	2800      	cmp	r0, #0
 8012a64:	d03a      	beq.n	8012adc <rcutils_string_map_reserve+0xc0>
 8012a66:	682b      	ldr	r3, [r5, #0]
 8012a68:	4632      	mov	r2, r6
 8012a6a:	6018      	str	r0, [r3, #0]
 8012a6c:	4639      	mov	r1, r7
 8012a6e:	6858      	ldr	r0, [r3, #4]
 8012a70:	47c0      	blx	r8
 8012a72:	2800      	cmp	r0, #0
 8012a74:	d032      	beq.n	8012adc <rcutils_string_map_reserve+0xc0>
 8012a76:	682d      	ldr	r5, [r5, #0]
 8012a78:	68ab      	ldr	r3, [r5, #8]
 8012a7a:	6068      	str	r0, [r5, #4]
 8012a7c:	42a3      	cmp	r3, r4
 8012a7e:	d226      	bcs.n	8012ace <rcutils_string_map_reserve+0xb2>
 8012a80:	682a      	ldr	r2, [r5, #0]
 8012a82:	eb00 0c07 	add.w	ip, r0, r7
 8012a86:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8012a8a:	45e6      	cmp	lr, ip
 8012a8c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8012a90:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8012a94:	d203      	bcs.n	8012a9e <rcutils_string_map_reserve+0x82>
 8012a96:	eb02 0c07 	add.w	ip, r2, r7
 8012a9a:	4566      	cmp	r6, ip
 8012a9c:	d322      	bcc.n	8012ae4 <rcutils_string_map_reserve+0xc8>
 8012a9e:	1ae3      	subs	r3, r4, r3
 8012aa0:	009a      	lsls	r2, r3, #2
 8012aa2:	4670      	mov	r0, lr
 8012aa4:	2100      	movs	r1, #0
 8012aa6:	9201      	str	r2, [sp, #4]
 8012aa8:	f004 f944 	bl	8016d34 <memset>
 8012aac:	9a01      	ldr	r2, [sp, #4]
 8012aae:	2100      	movs	r1, #0
 8012ab0:	4630      	mov	r0, r6
 8012ab2:	f004 f93f 	bl	8016d34 <memset>
 8012ab6:	e00a      	b.n	8012ace <rcutils_string_map_reserve+0xb2>
 8012ab8:	694f      	ldr	r7, [r1, #20]
 8012aba:	6808      	ldr	r0, [r1, #0]
 8012abc:	4631      	mov	r1, r6
 8012abe:	47b8      	blx	r7
 8012ac0:	682b      	ldr	r3, [r5, #0]
 8012ac2:	4631      	mov	r1, r6
 8012ac4:	6858      	ldr	r0, [r3, #4]
 8012ac6:	601c      	str	r4, [r3, #0]
 8012ac8:	47b8      	blx	r7
 8012aca:	682d      	ldr	r5, [r5, #0]
 8012acc:	606c      	str	r4, [r5, #4]
 8012ace:	2000      	movs	r0, #0
 8012ad0:	60ac      	str	r4, [r5, #8]
 8012ad2:	b002      	add	sp, #8
 8012ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad8:	2000      	movs	r0, #0
 8012ada:	e7af      	b.n	8012a3c <rcutils_string_map_reserve+0x20>
 8012adc:	200a      	movs	r0, #10
 8012ade:	e7ad      	b.n	8012a3c <rcutils_string_map_reserve+0x20>
 8012ae0:	200b      	movs	r0, #11
 8012ae2:	4770      	bx	lr
 8012ae4:	1f0b      	subs	r3, r1, #4
 8012ae6:	4418      	add	r0, r3
 8012ae8:	4413      	add	r3, r2
 8012aea:	3a04      	subs	r2, #4
 8012aec:	4417      	add	r7, r2
 8012aee:	2200      	movs	r2, #0
 8012af0:	f843 2f04 	str.w	r2, [r3, #4]!
 8012af4:	42bb      	cmp	r3, r7
 8012af6:	f840 2f04 	str.w	r2, [r0, #4]!
 8012afa:	d1f9      	bne.n	8012af0 <rcutils_string_map_reserve+0xd4>
 8012afc:	e7e7      	b.n	8012ace <rcutils_string_map_reserve+0xb2>
 8012afe:	bf00      	nop

08012b00 <rcutils_string_map_init>:
 8012b00:	b082      	sub	sp, #8
 8012b02:	b570      	push	{r4, r5, r6, lr}
 8012b04:	ac04      	add	r4, sp, #16
 8012b06:	e884 000c 	stmia.w	r4, {r2, r3}
 8012b0a:	b380      	cbz	r0, 8012b6e <rcutils_string_map_init+0x6e>
 8012b0c:	6806      	ldr	r6, [r0, #0]
 8012b0e:	4604      	mov	r4, r0
 8012b10:	b12e      	cbz	r6, 8012b1e <rcutils_string_map_init+0x1e>
 8012b12:	251e      	movs	r5, #30
 8012b14:	4628      	mov	r0, r5
 8012b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b1a:	b002      	add	sp, #8
 8012b1c:	4770      	bx	lr
 8012b1e:	a804      	add	r0, sp, #16
 8012b20:	460d      	mov	r5, r1
 8012b22:	f7f8 fcd1 	bl	800b4c8 <rcutils_allocator_is_valid>
 8012b26:	b310      	cbz	r0, 8012b6e <rcutils_string_map_init+0x6e>
 8012b28:	9b04      	ldr	r3, [sp, #16]
 8012b2a:	9908      	ldr	r1, [sp, #32]
 8012b2c:	2024      	movs	r0, #36	@ 0x24
 8012b2e:	4798      	blx	r3
 8012b30:	6020      	str	r0, [r4, #0]
 8012b32:	b310      	cbz	r0, 8012b7a <rcutils_string_map_init+0x7a>
 8012b34:	f10d 0e10 	add.w	lr, sp, #16
 8012b38:	e9c0 6600 	strd	r6, r6, [r0]
 8012b3c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012b40:	f100 0c10 	add.w	ip, r0, #16
 8012b44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b4c:	f8de 3000 	ldr.w	r3, [lr]
 8012b50:	f8cc 3000 	str.w	r3, [ip]
 8012b54:	4629      	mov	r1, r5
 8012b56:	4620      	mov	r0, r4
 8012b58:	f7ff ff60 	bl	8012a1c <rcutils_string_map_reserve>
 8012b5c:	4605      	mov	r5, r0
 8012b5e:	2800      	cmp	r0, #0
 8012b60:	d0d8      	beq.n	8012b14 <rcutils_string_map_init+0x14>
 8012b62:	9b05      	ldr	r3, [sp, #20]
 8012b64:	9908      	ldr	r1, [sp, #32]
 8012b66:	6820      	ldr	r0, [r4, #0]
 8012b68:	4798      	blx	r3
 8012b6a:	6026      	str	r6, [r4, #0]
 8012b6c:	e7d2      	b.n	8012b14 <rcutils_string_map_init+0x14>
 8012b6e:	250b      	movs	r5, #11
 8012b70:	4628      	mov	r0, r5
 8012b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b76:	b002      	add	sp, #8
 8012b78:	4770      	bx	lr
 8012b7a:	250a      	movs	r5, #10
 8012b7c:	e7ca      	b.n	8012b14 <rcutils_string_map_init+0x14>
 8012b7e:	bf00      	nop

08012b80 <rcutils_string_map_fini>:
 8012b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b84:	b082      	sub	sp, #8
 8012b86:	2800      	cmp	r0, #0
 8012b88:	d03a      	beq.n	8012c00 <rcutils_string_map_fini+0x80>
 8012b8a:	6804      	ldr	r4, [r0, #0]
 8012b8c:	4606      	mov	r6, r0
 8012b8e:	2c00      	cmp	r4, #0
 8012b90:	d032      	beq.n	8012bf8 <rcutils_string_map_fini+0x78>
 8012b92:	68a3      	ldr	r3, [r4, #8]
 8012b94:	b32b      	cbz	r3, 8012be2 <rcutils_string_map_fini+0x62>
 8012b96:	2500      	movs	r5, #0
 8012b98:	6822      	ldr	r2, [r4, #0]
 8012b9a:	462f      	mov	r7, r5
 8012b9c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012ba0:	b1e0      	cbz	r0, 8012bdc <rcutils_string_map_fini+0x5c>
 8012ba2:	6a21      	ldr	r1, [r4, #32]
 8012ba4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012ba8:	9101      	str	r1, [sp, #4]
 8012baa:	47c0      	blx	r8
 8012bac:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012bb0:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012bb4:	9901      	ldr	r1, [sp, #4]
 8012bb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012bba:	47c0      	blx	r8
 8012bbc:	68e3      	ldr	r3, [r4, #12]
 8012bbe:	6862      	ldr	r2, [r4, #4]
 8012bc0:	3b01      	subs	r3, #1
 8012bc2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012bc6:	60e3      	str	r3, [r4, #12]
 8012bc8:	6834      	ldr	r4, [r6, #0]
 8012bca:	68a3      	ldr	r3, [r4, #8]
 8012bcc:	3501      	adds	r5, #1
 8012bce:	429d      	cmp	r5, r3
 8012bd0:	d207      	bcs.n	8012be2 <rcutils_string_map_fini+0x62>
 8012bd2:	6822      	ldr	r2, [r4, #0]
 8012bd4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	d1e2      	bne.n	8012ba2 <rcutils_string_map_fini+0x22>
 8012bdc:	3501      	adds	r5, #1
 8012bde:	429d      	cmp	r5, r3
 8012be0:	d3dc      	bcc.n	8012b9c <rcutils_string_map_fini+0x1c>
 8012be2:	2100      	movs	r1, #0
 8012be4:	4630      	mov	r0, r6
 8012be6:	f7ff ff19 	bl	8012a1c <rcutils_string_map_reserve>
 8012bea:	4604      	mov	r4, r0
 8012bec:	b920      	cbnz	r0, 8012bf8 <rcutils_string_map_fini+0x78>
 8012bee:	6830      	ldr	r0, [r6, #0]
 8012bf0:	6943      	ldr	r3, [r0, #20]
 8012bf2:	6a01      	ldr	r1, [r0, #32]
 8012bf4:	4798      	blx	r3
 8012bf6:	6034      	str	r4, [r6, #0]
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	b002      	add	sp, #8
 8012bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c00:	240b      	movs	r4, #11
 8012c02:	4620      	mov	r0, r4
 8012c04:	b002      	add	sp, #8
 8012c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c0a:	bf00      	nop

08012c0c <rcutils_string_map_getn>:
 8012c0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c10:	b300      	cbz	r0, 8012c54 <rcutils_string_map_getn+0x48>
 8012c12:	6807      	ldr	r7, [r0, #0]
 8012c14:	b1ff      	cbz	r7, 8012c56 <rcutils_string_map_getn+0x4a>
 8012c16:	4688      	mov	r8, r1
 8012c18:	b1e1      	cbz	r1, 8012c54 <rcutils_string_map_getn+0x48>
 8012c1a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012c1e:	683e      	ldr	r6, [r7, #0]
 8012c20:	f1ba 0f00 	cmp.w	sl, #0
 8012c24:	d016      	beq.n	8012c54 <rcutils_string_map_getn+0x48>
 8012c26:	4691      	mov	r9, r2
 8012c28:	3e04      	subs	r6, #4
 8012c2a:	2400      	movs	r4, #0
 8012c2c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012c30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012c34:	4628      	mov	r0, r5
 8012c36:	3401      	adds	r4, #1
 8012c38:	b155      	cbz	r5, 8012c50 <rcutils_string_map_getn+0x44>
 8012c3a:	f7ed fad3 	bl	80001e4 <strlen>
 8012c3e:	4548      	cmp	r0, r9
 8012c40:	4602      	mov	r2, r0
 8012c42:	4629      	mov	r1, r5
 8012c44:	bf38      	it	cc
 8012c46:	464a      	movcc	r2, r9
 8012c48:	4640      	mov	r0, r8
 8012c4a:	f004 f888 	bl	8016d5e <strncmp>
 8012c4e:	b128      	cbz	r0, 8012c5c <rcutils_string_map_getn+0x50>
 8012c50:	45a2      	cmp	sl, r4
 8012c52:	d1eb      	bne.n	8012c2c <rcutils_string_map_getn+0x20>
 8012c54:	2700      	movs	r7, #0
 8012c56:	4638      	mov	r0, r7
 8012c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	f853 700b 	ldr.w	r7, [r3, fp]
 8012c62:	4638      	mov	r0, r7
 8012c64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012c68 <rmw_get_zero_initialized_context>:
 8012c68:	b510      	push	{r4, lr}
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	3010      	adds	r0, #16
 8012c6e:	f000 f80b 	bl	8012c88 <rmw_get_zero_initialized_init_options>
 8012c72:	2300      	movs	r3, #0
 8012c74:	2000      	movs	r0, #0
 8012c76:	2100      	movs	r1, #0
 8012c78:	e9c4 0100 	strd	r0, r1, [r4]
 8012c7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8012c80:	60a3      	str	r3, [r4, #8]
 8012c82:	4620      	mov	r0, r4
 8012c84:	bd10      	pop	{r4, pc}
 8012c86:	bf00      	nop

08012c88 <rmw_get_zero_initialized_init_options>:
 8012c88:	b510      	push	{r4, lr}
 8012c8a:	2238      	movs	r2, #56	@ 0x38
 8012c8c:	4604      	mov	r4, r0
 8012c8e:	2100      	movs	r1, #0
 8012c90:	f004 f850 	bl	8016d34 <memset>
 8012c94:	f104 0010 	add.w	r0, r4, #16
 8012c98:	f000 f806 	bl	8012ca8 <rmw_get_default_security_options>
 8012c9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012ca0:	60e3      	str	r3, [r4, #12]
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	bd10      	pop	{r4, pc}
 8012ca6:	bf00      	nop

08012ca8 <rmw_get_default_security_options>:
 8012ca8:	2200      	movs	r2, #0
 8012caa:	7002      	strb	r2, [r0, #0]
 8012cac:	6042      	str	r2, [r0, #4]
 8012cae:	4770      	bx	lr

08012cb0 <rmw_time_equal>:
 8012cb0:	b4f0      	push	{r4, r5, r6, r7}
 8012cb2:	b084      	sub	sp, #16
 8012cb4:	ac04      	add	r4, sp, #16
 8012cb6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012cba:	4603      	mov	r3, r0
 8012cbc:	4924      	ldr	r1, [pc, #144]	@ (8012d50 <rmw_time_equal+0xa0>)
 8012cbe:	9e03      	ldr	r6, [sp, #12]
 8012cc0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012cc4:	2202      	movs	r2, #2
 8012cc6:	4299      	cmp	r1, r3
 8012cc8:	41aa      	sbcs	r2, r5
 8012cca:	d330      	bcc.n	8012d2e <rmw_time_equal+0x7e>
 8012ccc:	4c21      	ldr	r4, [pc, #132]	@ (8012d54 <rmw_time_equal+0xa4>)
 8012cce:	fba3 3204 	umull	r3, r2, r3, r4
 8012cd2:	fb04 2205 	mla	r2, r4, r5, r2
 8012cd6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012cda:	43dd      	mvns	r5, r3
 8012cdc:	1a8c      	subs	r4, r1, r2
 8012cde:	4285      	cmp	r5, r0
 8012ce0:	41b4      	sbcs	r4, r6
 8012ce2:	d332      	bcc.n	8012d4a <rmw_time_equal+0x9a>
 8012ce4:	eb10 0c03 	adds.w	ip, r0, r3
 8012ce8:	eb42 0106 	adc.w	r1, r2, r6
 8012cec:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8012cf0:	4817      	ldr	r0, [pc, #92]	@ (8012d50 <rmw_time_equal+0xa0>)
 8012cf2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012cf4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012cf6:	2202      	movs	r2, #2
 8012cf8:	4298      	cmp	r0, r3
 8012cfa:	41b2      	sbcs	r2, r6
 8012cfc:	d31c      	bcc.n	8012d38 <rmw_time_equal+0x88>
 8012cfe:	4c15      	ldr	r4, [pc, #84]	@ (8012d54 <rmw_time_equal+0xa4>)
 8012d00:	fba3 3204 	umull	r3, r2, r3, r4
 8012d04:	fb04 2206 	mla	r2, r4, r6, r2
 8012d08:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012d0c:	43de      	mvns	r6, r3
 8012d0e:	1a84      	subs	r4, r0, r2
 8012d10:	42ae      	cmp	r6, r5
 8012d12:	41bc      	sbcs	r4, r7
 8012d14:	d315      	bcc.n	8012d42 <rmw_time_equal+0x92>
 8012d16:	195b      	adds	r3, r3, r5
 8012d18:	eb42 0207 	adc.w	r2, r2, r7
 8012d1c:	428a      	cmp	r2, r1
 8012d1e:	bf08      	it	eq
 8012d20:	4563      	cmpeq	r3, ip
 8012d22:	bf0c      	ite	eq
 8012d24:	2001      	moveq	r0, #1
 8012d26:	2000      	movne	r0, #0
 8012d28:	b004      	add	sp, #16
 8012d2a:	bcf0      	pop	{r4, r5, r6, r7}
 8012d2c:	4770      	bx	lr
 8012d2e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012d32:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012d36:	e7d9      	b.n	8012cec <rmw_time_equal+0x3c>
 8012d38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d3c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8012d40:	e7ec      	b.n	8012d1c <rmw_time_equal+0x6c>
 8012d42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d46:	4602      	mov	r2, r0
 8012d48:	e7e8      	b.n	8012d1c <rmw_time_equal+0x6c>
 8012d4a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012d4e:	e7cd      	b.n	8012cec <rmw_time_equal+0x3c>
 8012d50:	25c17d04 	.word	0x25c17d04
 8012d54:	3b9aca00 	.word	0x3b9aca00

08012d58 <rmw_time_total_nsec>:
 8012d58:	b470      	push	{r4, r5, r6}
 8012d5a:	b085      	sub	sp, #20
 8012d5c:	ac04      	add	r4, sp, #16
 8012d5e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012d62:	4603      	mov	r3, r0
 8012d64:	4912      	ldr	r1, [pc, #72]	@ (8012db0 <rmw_time_total_nsec+0x58>)
 8012d66:	9e03      	ldr	r6, [sp, #12]
 8012d68:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012d6c:	2202      	movs	r2, #2
 8012d6e:	4299      	cmp	r1, r3
 8012d70:	41aa      	sbcs	r2, r5
 8012d72:	d311      	bcc.n	8012d98 <rmw_time_total_nsec+0x40>
 8012d74:	4c0f      	ldr	r4, [pc, #60]	@ (8012db4 <rmw_time_total_nsec+0x5c>)
 8012d76:	fba3 3204 	umull	r3, r2, r3, r4
 8012d7a:	fb04 2205 	mla	r2, r4, r5, r2
 8012d7e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012d82:	43dd      	mvns	r5, r3
 8012d84:	1a8c      	subs	r4, r1, r2
 8012d86:	4285      	cmp	r5, r0
 8012d88:	41b4      	sbcs	r4, r6
 8012d8a:	d30c      	bcc.n	8012da6 <rmw_time_total_nsec+0x4e>
 8012d8c:	1818      	adds	r0, r3, r0
 8012d8e:	eb42 0106 	adc.w	r1, r2, r6
 8012d92:	b005      	add	sp, #20
 8012d94:	bc70      	pop	{r4, r5, r6}
 8012d96:	4770      	bx	lr
 8012d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012da0:	b005      	add	sp, #20
 8012da2:	bc70      	pop	{r4, r5, r6}
 8012da4:	4770      	bx	lr
 8012da6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012daa:	b005      	add	sp, #20
 8012dac:	bc70      	pop	{r4, r5, r6}
 8012dae:	4770      	bx	lr
 8012db0:	25c17d04 	.word	0x25c17d04
 8012db4:	3b9aca00 	.word	0x3b9aca00

08012db8 <rmw_get_zero_initialized_message_info>:
 8012db8:	b510      	push	{r4, lr}
 8012dba:	2240      	movs	r2, #64	@ 0x40
 8012dbc:	4604      	mov	r4, r0
 8012dbe:	2100      	movs	r1, #0
 8012dc0:	f003 ffb8 	bl	8016d34 <memset>
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	bd10      	pop	{r4, pc}

08012dc8 <rmw_validate_full_topic_name>:
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	d057      	beq.n	8012e7c <rmw_validate_full_topic_name+0xb4>
 8012dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dd0:	460d      	mov	r5, r1
 8012dd2:	2900      	cmp	r1, #0
 8012dd4:	d054      	beq.n	8012e80 <rmw_validate_full_topic_name+0xb8>
 8012dd6:	4616      	mov	r6, r2
 8012dd8:	4604      	mov	r4, r0
 8012dda:	f7ed fa03 	bl	80001e4 <strlen>
 8012dde:	b148      	cbz	r0, 8012df4 <rmw_validate_full_topic_name+0x2c>
 8012de0:	7823      	ldrb	r3, [r4, #0]
 8012de2:	2b2f      	cmp	r3, #47	@ 0x2f
 8012de4:	d00d      	beq.n	8012e02 <rmw_validate_full_topic_name+0x3a>
 8012de6:	2302      	movs	r3, #2
 8012de8:	602b      	str	r3, [r5, #0]
 8012dea:	b13e      	cbz	r6, 8012dfc <rmw_validate_full_topic_name+0x34>
 8012dec:	2000      	movs	r0, #0
 8012dee:	6030      	str	r0, [r6, #0]
 8012df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df4:	2301      	movs	r3, #1
 8012df6:	602b      	str	r3, [r5, #0]
 8012df8:	2e00      	cmp	r6, #0
 8012dfa:	d1f7      	bne.n	8012dec <rmw_validate_full_topic_name+0x24>
 8012dfc:	2000      	movs	r0, #0
 8012dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e02:	1e43      	subs	r3, r0, #1
 8012e04:	5ce2      	ldrb	r2, [r4, r3]
 8012e06:	2a2f      	cmp	r2, #47	@ 0x2f
 8012e08:	d03c      	beq.n	8012e84 <rmw_validate_full_topic_name+0xbc>
 8012e0a:	1e63      	subs	r3, r4, #1
 8012e0c:	eb03 0800 	add.w	r8, r3, r0
 8012e10:	f1c4 0e01 	rsb	lr, r4, #1
 8012e14:	eb0e 0703 	add.w	r7, lr, r3
 8012e18:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012e1c:	f021 0220 	bic.w	r2, r1, #32
 8012e20:	3a41      	subs	r2, #65	@ 0x41
 8012e22:	2a19      	cmp	r2, #25
 8012e24:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8012e28:	d90b      	bls.n	8012e42 <rmw_validate_full_topic_name+0x7a>
 8012e2a:	295f      	cmp	r1, #95	@ 0x5f
 8012e2c:	d009      	beq.n	8012e42 <rmw_validate_full_topic_name+0x7a>
 8012e2e:	f1bc 0f0a 	cmp.w	ip, #10
 8012e32:	d906      	bls.n	8012e42 <rmw_validate_full_topic_name+0x7a>
 8012e34:	2304      	movs	r3, #4
 8012e36:	602b      	str	r3, [r5, #0]
 8012e38:	2e00      	cmp	r6, #0
 8012e3a:	d0df      	beq.n	8012dfc <rmw_validate_full_topic_name+0x34>
 8012e3c:	6037      	str	r7, [r6, #0]
 8012e3e:	2000      	movs	r0, #0
 8012e40:	e7d6      	b.n	8012df0 <rmw_validate_full_topic_name+0x28>
 8012e42:	4543      	cmp	r3, r8
 8012e44:	d1e6      	bne.n	8012e14 <rmw_validate_full_topic_name+0x4c>
 8012e46:	4f1a      	ldr	r7, [pc, #104]	@ (8012eb0 <rmw_validate_full_topic_name+0xe8>)
 8012e48:	2301      	movs	r3, #1
 8012e4a:	e004      	b.n	8012e56 <rmw_validate_full_topic_name+0x8e>
 8012e4c:	4298      	cmp	r0, r3
 8012e4e:	f104 0401 	add.w	r4, r4, #1
 8012e52:	d91c      	bls.n	8012e8e <rmw_validate_full_topic_name+0xc6>
 8012e54:	4613      	mov	r3, r2
 8012e56:	4298      	cmp	r0, r3
 8012e58:	f103 0201 	add.w	r2, r3, #1
 8012e5c:	d0f6      	beq.n	8012e4c <rmw_validate_full_topic_name+0x84>
 8012e5e:	7821      	ldrb	r1, [r4, #0]
 8012e60:	292f      	cmp	r1, #47	@ 0x2f
 8012e62:	d1f3      	bne.n	8012e4c <rmw_validate_full_topic_name+0x84>
 8012e64:	7861      	ldrb	r1, [r4, #1]
 8012e66:	292f      	cmp	r1, #47	@ 0x2f
 8012e68:	d01c      	beq.n	8012ea4 <rmw_validate_full_topic_name+0xdc>
 8012e6a:	5dc9      	ldrb	r1, [r1, r7]
 8012e6c:	0749      	lsls	r1, r1, #29
 8012e6e:	d5ed      	bpl.n	8012e4c <rmw_validate_full_topic_name+0x84>
 8012e70:	2206      	movs	r2, #6
 8012e72:	602a      	str	r2, [r5, #0]
 8012e74:	2e00      	cmp	r6, #0
 8012e76:	d0c1      	beq.n	8012dfc <rmw_validate_full_topic_name+0x34>
 8012e78:	6033      	str	r3, [r6, #0]
 8012e7a:	e7bf      	b.n	8012dfc <rmw_validate_full_topic_name+0x34>
 8012e7c:	200b      	movs	r0, #11
 8012e7e:	4770      	bx	lr
 8012e80:	200b      	movs	r0, #11
 8012e82:	e7b5      	b.n	8012df0 <rmw_validate_full_topic_name+0x28>
 8012e84:	2203      	movs	r2, #3
 8012e86:	602a      	str	r2, [r5, #0]
 8012e88:	2e00      	cmp	r6, #0
 8012e8a:	d1f5      	bne.n	8012e78 <rmw_validate_full_topic_name+0xb0>
 8012e8c:	e7b6      	b.n	8012dfc <rmw_validate_full_topic_name+0x34>
 8012e8e:	28f7      	cmp	r0, #247	@ 0xf7
 8012e90:	d802      	bhi.n	8012e98 <rmw_validate_full_topic_name+0xd0>
 8012e92:	2000      	movs	r0, #0
 8012e94:	6028      	str	r0, [r5, #0]
 8012e96:	e7ab      	b.n	8012df0 <rmw_validate_full_topic_name+0x28>
 8012e98:	2307      	movs	r3, #7
 8012e9a:	602b      	str	r3, [r5, #0]
 8012e9c:	2e00      	cmp	r6, #0
 8012e9e:	d0ad      	beq.n	8012dfc <rmw_validate_full_topic_name+0x34>
 8012ea0:	23f6      	movs	r3, #246	@ 0xf6
 8012ea2:	e7e9      	b.n	8012e78 <rmw_validate_full_topic_name+0xb0>
 8012ea4:	2205      	movs	r2, #5
 8012ea6:	602a      	str	r2, [r5, #0]
 8012ea8:	2e00      	cmp	r6, #0
 8012eaa:	d1e5      	bne.n	8012e78 <rmw_validate_full_topic_name+0xb0>
 8012eac:	e7a6      	b.n	8012dfc <rmw_validate_full_topic_name+0x34>
 8012eae:	bf00      	nop
 8012eb0:	08018740 	.word	0x08018740

08012eb4 <rmw_validate_namespace_with_size>:
 8012eb4:	b340      	cbz	r0, 8012f08 <rmw_validate_namespace_with_size+0x54>
 8012eb6:	b570      	push	{r4, r5, r6, lr}
 8012eb8:	4614      	mov	r4, r2
 8012eba:	b0c2      	sub	sp, #264	@ 0x108
 8012ebc:	b332      	cbz	r2, 8012f0c <rmw_validate_namespace_with_size+0x58>
 8012ebe:	2901      	cmp	r1, #1
 8012ec0:	460d      	mov	r5, r1
 8012ec2:	461e      	mov	r6, r3
 8012ec4:	d102      	bne.n	8012ecc <rmw_validate_namespace_with_size+0x18>
 8012ec6:	7803      	ldrb	r3, [r0, #0]
 8012ec8:	2b2f      	cmp	r3, #47	@ 0x2f
 8012eca:	d012      	beq.n	8012ef2 <rmw_validate_namespace_with_size+0x3e>
 8012ecc:	aa01      	add	r2, sp, #4
 8012ece:	4669      	mov	r1, sp
 8012ed0:	f7ff ff7a 	bl	8012dc8 <rmw_validate_full_topic_name>
 8012ed4:	b978      	cbnz	r0, 8012ef6 <rmw_validate_namespace_with_size+0x42>
 8012ed6:	9b00      	ldr	r3, [sp, #0]
 8012ed8:	b14b      	cbz	r3, 8012eee <rmw_validate_namespace_with_size+0x3a>
 8012eda:	2b07      	cmp	r3, #7
 8012edc:	d007      	beq.n	8012eee <rmw_validate_namespace_with_size+0x3a>
 8012ede:	1e5a      	subs	r2, r3, #1
 8012ee0:	2a05      	cmp	r2, #5
 8012ee2:	d82b      	bhi.n	8012f3c <rmw_validate_namespace_with_size+0x88>
 8012ee4:	e8df f002 	tbb	[pc, r2]
 8012ee8:	1e212427 	.word	0x1e212427
 8012eec:	141b      	.short	0x141b
 8012eee:	2df5      	cmp	r5, #245	@ 0xf5
 8012ef0:	d803      	bhi.n	8012efa <rmw_validate_namespace_with_size+0x46>
 8012ef2:	2000      	movs	r0, #0
 8012ef4:	6020      	str	r0, [r4, #0]
 8012ef6:	b042      	add	sp, #264	@ 0x108
 8012ef8:	bd70      	pop	{r4, r5, r6, pc}
 8012efa:	2307      	movs	r3, #7
 8012efc:	6023      	str	r3, [r4, #0]
 8012efe:	2e00      	cmp	r6, #0
 8012f00:	d0f9      	beq.n	8012ef6 <rmw_validate_namespace_with_size+0x42>
 8012f02:	23f4      	movs	r3, #244	@ 0xf4
 8012f04:	6033      	str	r3, [r6, #0]
 8012f06:	e7f6      	b.n	8012ef6 <rmw_validate_namespace_with_size+0x42>
 8012f08:	200b      	movs	r0, #11
 8012f0a:	4770      	bx	lr
 8012f0c:	200b      	movs	r0, #11
 8012f0e:	e7f2      	b.n	8012ef6 <rmw_validate_namespace_with_size+0x42>
 8012f10:	2306      	movs	r3, #6
 8012f12:	6023      	str	r3, [r4, #0]
 8012f14:	2e00      	cmp	r6, #0
 8012f16:	d0ee      	beq.n	8012ef6 <rmw_validate_namespace_with_size+0x42>
 8012f18:	9b01      	ldr	r3, [sp, #4]
 8012f1a:	6033      	str	r3, [r6, #0]
 8012f1c:	e7eb      	b.n	8012ef6 <rmw_validate_namespace_with_size+0x42>
 8012f1e:	2305      	movs	r3, #5
 8012f20:	6023      	str	r3, [r4, #0]
 8012f22:	e7f7      	b.n	8012f14 <rmw_validate_namespace_with_size+0x60>
 8012f24:	2304      	movs	r3, #4
 8012f26:	6023      	str	r3, [r4, #0]
 8012f28:	e7f4      	b.n	8012f14 <rmw_validate_namespace_with_size+0x60>
 8012f2a:	2303      	movs	r3, #3
 8012f2c:	6023      	str	r3, [r4, #0]
 8012f2e:	e7f1      	b.n	8012f14 <rmw_validate_namespace_with_size+0x60>
 8012f30:	2302      	movs	r3, #2
 8012f32:	6023      	str	r3, [r4, #0]
 8012f34:	e7ee      	b.n	8012f14 <rmw_validate_namespace_with_size+0x60>
 8012f36:	2301      	movs	r3, #1
 8012f38:	6023      	str	r3, [r4, #0]
 8012f3a:	e7eb      	b.n	8012f14 <rmw_validate_namespace_with_size+0x60>
 8012f3c:	4a03      	ldr	r2, [pc, #12]	@ (8012f4c <rmw_validate_namespace_with_size+0x98>)
 8012f3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012f42:	a802      	add	r0, sp, #8
 8012f44:	f7ff fcfa 	bl	801293c <rcutils_snprintf>
 8012f48:	2001      	movs	r0, #1
 8012f4a:	e7d4      	b.n	8012ef6 <rmw_validate_namespace_with_size+0x42>
 8012f4c:	08018148 	.word	0x08018148

08012f50 <rmw_validate_namespace>:
 8012f50:	b168      	cbz	r0, 8012f6e <rmw_validate_namespace+0x1e>
 8012f52:	b570      	push	{r4, r5, r6, lr}
 8012f54:	460d      	mov	r5, r1
 8012f56:	4616      	mov	r6, r2
 8012f58:	4604      	mov	r4, r0
 8012f5a:	f7ed f943 	bl	80001e4 <strlen>
 8012f5e:	4633      	mov	r3, r6
 8012f60:	4601      	mov	r1, r0
 8012f62:	462a      	mov	r2, r5
 8012f64:	4620      	mov	r0, r4
 8012f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f6a:	f7ff bfa3 	b.w	8012eb4 <rmw_validate_namespace_with_size>
 8012f6e:	200b      	movs	r0, #11
 8012f70:	4770      	bx	lr
 8012f72:	bf00      	nop

08012f74 <rmw_namespace_validation_result_string>:
 8012f74:	2807      	cmp	r0, #7
 8012f76:	bf9a      	itte	ls
 8012f78:	4b02      	ldrls	r3, [pc, #8]	@ (8012f84 <rmw_namespace_validation_result_string+0x10>)
 8012f7a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012f7e:	4802      	ldrhi	r0, [pc, #8]	@ (8012f88 <rmw_namespace_validation_result_string+0x14>)
 8012f80:	4770      	bx	lr
 8012f82:	bf00      	nop
 8012f84:	08018340 	.word	0x08018340
 8012f88:	08018198 	.word	0x08018198

08012f8c <rmw_validate_node_name>:
 8012f8c:	2800      	cmp	r0, #0
 8012f8e:	d03b      	beq.n	8013008 <rmw_validate_node_name+0x7c>
 8012f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f94:	460d      	mov	r5, r1
 8012f96:	2900      	cmp	r1, #0
 8012f98:	d038      	beq.n	801300c <rmw_validate_node_name+0x80>
 8012f9a:	4616      	mov	r6, r2
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	f7ed f921 	bl	80001e4 <strlen>
 8012fa2:	b1e0      	cbz	r0, 8012fde <rmw_validate_node_name+0x52>
 8012fa4:	1e63      	subs	r3, r4, #1
 8012fa6:	eb03 0800 	add.w	r8, r3, r0
 8012faa:	f1c4 0101 	rsb	r1, r4, #1
 8012fae:	18cf      	adds	r7, r1, r3
 8012fb0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012fb4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8012fb8:	f02e 0c20 	bic.w	ip, lr, #32
 8012fbc:	2a09      	cmp	r2, #9
 8012fbe:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8012fc2:	d914      	bls.n	8012fee <rmw_validate_node_name+0x62>
 8012fc4:	f1bc 0f19 	cmp.w	ip, #25
 8012fc8:	d911      	bls.n	8012fee <rmw_validate_node_name+0x62>
 8012fca:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8012fce:	d00e      	beq.n	8012fee <rmw_validate_node_name+0x62>
 8012fd0:	2302      	movs	r3, #2
 8012fd2:	602b      	str	r3, [r5, #0]
 8012fd4:	b106      	cbz	r6, 8012fd8 <rmw_validate_node_name+0x4c>
 8012fd6:	6037      	str	r7, [r6, #0]
 8012fd8:	2000      	movs	r0, #0
 8012fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fde:	2301      	movs	r3, #1
 8012fe0:	602b      	str	r3, [r5, #0]
 8012fe2:	2e00      	cmp	r6, #0
 8012fe4:	d0f8      	beq.n	8012fd8 <rmw_validate_node_name+0x4c>
 8012fe6:	2000      	movs	r0, #0
 8012fe8:	6030      	str	r0, [r6, #0]
 8012fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fee:	4543      	cmp	r3, r8
 8012ff0:	d1dd      	bne.n	8012fae <rmw_validate_node_name+0x22>
 8012ff2:	7822      	ldrb	r2, [r4, #0]
 8012ff4:	4b0d      	ldr	r3, [pc, #52]	@ (801302c <rmw_validate_node_name+0xa0>)
 8012ff6:	5cd3      	ldrb	r3, [r2, r3]
 8012ff8:	f013 0304 	ands.w	r3, r3, #4
 8012ffc:	d110      	bne.n	8013020 <rmw_validate_node_name+0x94>
 8012ffe:	28ff      	cmp	r0, #255	@ 0xff
 8013000:	d806      	bhi.n	8013010 <rmw_validate_node_name+0x84>
 8013002:	602b      	str	r3, [r5, #0]
 8013004:	4618      	mov	r0, r3
 8013006:	e7e8      	b.n	8012fda <rmw_validate_node_name+0x4e>
 8013008:	200b      	movs	r0, #11
 801300a:	4770      	bx	lr
 801300c:	200b      	movs	r0, #11
 801300e:	e7e4      	b.n	8012fda <rmw_validate_node_name+0x4e>
 8013010:	2204      	movs	r2, #4
 8013012:	602a      	str	r2, [r5, #0]
 8013014:	2e00      	cmp	r6, #0
 8013016:	d0df      	beq.n	8012fd8 <rmw_validate_node_name+0x4c>
 8013018:	22fe      	movs	r2, #254	@ 0xfe
 801301a:	6032      	str	r2, [r6, #0]
 801301c:	4618      	mov	r0, r3
 801301e:	e7dc      	b.n	8012fda <rmw_validate_node_name+0x4e>
 8013020:	2303      	movs	r3, #3
 8013022:	602b      	str	r3, [r5, #0]
 8013024:	2e00      	cmp	r6, #0
 8013026:	d1de      	bne.n	8012fe6 <rmw_validate_node_name+0x5a>
 8013028:	e7d6      	b.n	8012fd8 <rmw_validate_node_name+0x4c>
 801302a:	bf00      	nop
 801302c:	08018740 	.word	0x08018740

08013030 <rmw_node_name_validation_result_string>:
 8013030:	2804      	cmp	r0, #4
 8013032:	bf9a      	itte	ls
 8013034:	4b02      	ldrls	r3, [pc, #8]	@ (8013040 <rmw_node_name_validation_result_string+0x10>)
 8013036:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801303a:	4802      	ldrhi	r0, [pc, #8]	@ (8013044 <rmw_node_name_validation_result_string+0x14>)
 801303c:	4770      	bx	lr
 801303e:	bf00      	nop
 8013040:	0801844c 	.word	0x0801844c
 8013044:	08018360 	.word	0x08018360

08013048 <get_memory>:
 8013048:	4603      	mov	r3, r0
 801304a:	6840      	ldr	r0, [r0, #4]
 801304c:	b158      	cbz	r0, 8013066 <get_memory+0x1e>
 801304e:	6842      	ldr	r2, [r0, #4]
 8013050:	605a      	str	r2, [r3, #4]
 8013052:	b10a      	cbz	r2, 8013058 <get_memory+0x10>
 8013054:	2100      	movs	r1, #0
 8013056:	6011      	str	r1, [r2, #0]
 8013058:	681a      	ldr	r2, [r3, #0]
 801305a:	6042      	str	r2, [r0, #4]
 801305c:	b102      	cbz	r2, 8013060 <get_memory+0x18>
 801305e:	6010      	str	r0, [r2, #0]
 8013060:	2200      	movs	r2, #0
 8013062:	6002      	str	r2, [r0, #0]
 8013064:	6018      	str	r0, [r3, #0]
 8013066:	4770      	bx	lr

08013068 <put_memory>:
 8013068:	680b      	ldr	r3, [r1, #0]
 801306a:	b10b      	cbz	r3, 8013070 <put_memory+0x8>
 801306c:	684a      	ldr	r2, [r1, #4]
 801306e:	605a      	str	r2, [r3, #4]
 8013070:	684a      	ldr	r2, [r1, #4]
 8013072:	b102      	cbz	r2, 8013076 <put_memory+0xe>
 8013074:	6013      	str	r3, [r2, #0]
 8013076:	6803      	ldr	r3, [r0, #0]
 8013078:	428b      	cmp	r3, r1
 801307a:	6843      	ldr	r3, [r0, #4]
 801307c:	bf08      	it	eq
 801307e:	6002      	streq	r2, [r0, #0]
 8013080:	604b      	str	r3, [r1, #4]
 8013082:	b103      	cbz	r3, 8013086 <put_memory+0x1e>
 8013084:	6019      	str	r1, [r3, #0]
 8013086:	2300      	movs	r3, #0
 8013088:	600b      	str	r3, [r1, #0]
 801308a:	6041      	str	r1, [r0, #4]
 801308c:	4770      	bx	lr
 801308e:	bf00      	nop

08013090 <rmw_destroy_client>:
 8013090:	b570      	push	{r4, r5, r6, lr}
 8013092:	b128      	cbz	r0, 80130a0 <rmw_destroy_client+0x10>
 8013094:	4604      	mov	r4, r0
 8013096:	6800      	ldr	r0, [r0, #0]
 8013098:	460d      	mov	r5, r1
 801309a:	f7f8 ffbb 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 801309e:	b910      	cbnz	r0, 80130a6 <rmw_destroy_client+0x16>
 80130a0:	2401      	movs	r4, #1
 80130a2:	4620      	mov	r0, r4
 80130a4:	bd70      	pop	{r4, r5, r6, pc}
 80130a6:	6863      	ldr	r3, [r4, #4]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d0f9      	beq.n	80130a0 <rmw_destroy_client+0x10>
 80130ac:	2d00      	cmp	r5, #0
 80130ae:	d0f7      	beq.n	80130a0 <rmw_destroy_client+0x10>
 80130b0:	6828      	ldr	r0, [r5, #0]
 80130b2:	f7f8 ffaf 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 80130b6:	2800      	cmp	r0, #0
 80130b8:	d0f2      	beq.n	80130a0 <rmw_destroy_client+0x10>
 80130ba:	686e      	ldr	r6, [r5, #4]
 80130bc:	2e00      	cmp	r6, #0
 80130be:	d0ef      	beq.n	80130a0 <rmw_destroy_client+0x10>
 80130c0:	6864      	ldr	r4, [r4, #4]
 80130c2:	6932      	ldr	r2, [r6, #16]
 80130c4:	6920      	ldr	r0, [r4, #16]
 80130c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80130ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80130ce:	6819      	ldr	r1, [r3, #0]
 80130d0:	f002 f818 	bl	8015104 <uxr_buffer_cancel_data>
 80130d4:	4602      	mov	r2, r0
 80130d6:	6920      	ldr	r0, [r4, #16]
 80130d8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80130dc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80130e0:	f7f8 ff18 	bl	800bf14 <run_xrce_session>
 80130e4:	6920      	ldr	r0, [r4, #16]
 80130e6:	6932      	ldr	r2, [r6, #16]
 80130e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80130ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80130f0:	6819      	ldr	r1, [r3, #0]
 80130f2:	f7fa f84b 	bl	800d18c <uxr_buffer_delete_entity>
 80130f6:	4602      	mov	r2, r0
 80130f8:	6920      	ldr	r0, [r4, #16]
 80130fa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80130fe:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013102:	f7f8 ff07 	bl	800bf14 <run_xrce_session>
 8013106:	2800      	cmp	r0, #0
 8013108:	4628      	mov	r0, r5
 801310a:	bf14      	ite	ne
 801310c:	2400      	movne	r4, #0
 801310e:	2402      	moveq	r4, #2
 8013110:	f7f8 fde8 	bl	800bce4 <rmw_uxrce_fini_client_memory>
 8013114:	e7c5      	b.n	80130a2 <rmw_destroy_client+0x12>
 8013116:	bf00      	nop

08013118 <rmw_get_implementation_identifier>:
 8013118:	4b01      	ldr	r3, [pc, #4]	@ (8013120 <rmw_get_implementation_identifier+0x8>)
 801311a:	6818      	ldr	r0, [r3, #0]
 801311c:	4770      	bx	lr
 801311e:	bf00      	nop
 8013120:	08018478 	.word	0x08018478

08013124 <rmw_init_options_init>:
 8013124:	b084      	sub	sp, #16
 8013126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013128:	b083      	sub	sp, #12
 801312a:	ad09      	add	r5, sp, #36	@ 0x24
 801312c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013130:	b130      	cbz	r0, 8013140 <rmw_init_options_init+0x1c>
 8013132:	4604      	mov	r4, r0
 8013134:	4628      	mov	r0, r5
 8013136:	f7f8 f9c7 	bl	800b4c8 <rcutils_allocator_is_valid>
 801313a:	b108      	cbz	r0, 8013140 <rmw_init_options_init+0x1c>
 801313c:	68a6      	ldr	r6, [r4, #8]
 801313e:	b12e      	cbz	r6, 801314c <rmw_init_options_init+0x28>
 8013140:	200b      	movs	r0, #11
 8013142:	b003      	add	sp, #12
 8013144:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013148:	b004      	add	sp, #16
 801314a:	4770      	bx	lr
 801314c:	2200      	movs	r2, #0
 801314e:	2300      	movs	r3, #0
 8013150:	e9c4 2300 	strd	r2, r3, [r4]
 8013154:	4b20      	ldr	r3, [pc, #128]	@ (80131d8 <rmw_init_options_init+0xb4>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	60a3      	str	r3, [r4, #8]
 801315a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801315c:	f104 0c20 	add.w	ip, r4, #32
 8013160:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013164:	466f      	mov	r7, sp
 8013166:	682b      	ldr	r3, [r5, #0]
 8013168:	f8cc 3000 	str.w	r3, [ip]
 801316c:	4638      	mov	r0, r7
 801316e:	61e6      	str	r6, [r4, #28]
 8013170:	60e6      	str	r6, [r4, #12]
 8013172:	f7ff fd99 	bl	8012ca8 <rmw_get_default_security_options>
 8013176:	e897 0003 	ldmia.w	r7, {r0, r1}
 801317a:	f104 0310 	add.w	r3, r4, #16
 801317e:	e883 0003 	stmia.w	r3, {r0, r1}
 8013182:	2203      	movs	r2, #3
 8013184:	4815      	ldr	r0, [pc, #84]	@ (80131dc <rmw_init_options_init+0xb8>)
 8013186:	4916      	ldr	r1, [pc, #88]	@ (80131e0 <rmw_init_options_init+0xbc>)
 8013188:	7626      	strb	r6, [r4, #24]
 801318a:	f7f8 fceb 	bl	800bb64 <rmw_uxrce_init_init_options_impl_memory>
 801318e:	4813      	ldr	r0, [pc, #76]	@ (80131dc <rmw_init_options_init+0xb8>)
 8013190:	f7ff ff5a 	bl	8013048 <get_memory>
 8013194:	b1f0      	cbz	r0, 80131d4 <rmw_init_options_init+0xb0>
 8013196:	4a13      	ldr	r2, [pc, #76]	@ (80131e4 <rmw_init_options_init+0xc0>)
 8013198:	6883      	ldr	r3, [r0, #8]
 801319a:	6851      	ldr	r1, [r2, #4]
 801319c:	7810      	ldrb	r0, [r2, #0]
 801319e:	6363      	str	r3, [r4, #52]	@ 0x34
 80131a0:	7418      	strb	r0, [r3, #16]
 80131a2:	6159      	str	r1, [r3, #20]
 80131a4:	68d1      	ldr	r1, [r2, #12]
 80131a6:	61d9      	str	r1, [r3, #28]
 80131a8:	6911      	ldr	r1, [r2, #16]
 80131aa:	6219      	str	r1, [r3, #32]
 80131ac:	6951      	ldr	r1, [r2, #20]
 80131ae:	6892      	ldr	r2, [r2, #8]
 80131b0:	619a      	str	r2, [r3, #24]
 80131b2:	6259      	str	r1, [r3, #36]	@ 0x24
 80131b4:	f7fb fba0 	bl	800e8f8 <uxr_nanos>
 80131b8:	f003 fb06 	bl	80167c8 <srand>
 80131bc:	f003 fb32 	bl	8016824 <rand>
 80131c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80131c2:	6298      	str	r0, [r3, #40]	@ 0x28
 80131c4:	2800      	cmp	r0, #0
 80131c6:	d0f9      	beq.n	80131bc <rmw_init_options_init+0x98>
 80131c8:	2000      	movs	r0, #0
 80131ca:	b003      	add	sp, #12
 80131cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80131d0:	b004      	add	sp, #16
 80131d2:	4770      	bx	lr
 80131d4:	2001      	movs	r0, #1
 80131d6:	e7b4      	b.n	8013142 <rmw_init_options_init+0x1e>
 80131d8:	08018478 	.word	0x08018478
 80131dc:	20015e24 	.word	0x20015e24
 80131e0:	200116c0 	.word	0x200116c0
 80131e4:	2001154c 	.word	0x2001154c

080131e8 <rmw_init_options_copy>:
 80131e8:	b570      	push	{r4, r5, r6, lr}
 80131ea:	b088      	sub	sp, #32
 80131ec:	b160      	cbz	r0, 8013208 <rmw_init_options_copy+0x20>
 80131ee:	460d      	mov	r5, r1
 80131f0:	b151      	cbz	r1, 8013208 <rmw_init_options_copy+0x20>
 80131f2:	4604      	mov	r4, r0
 80131f4:	6880      	ldr	r0, [r0, #8]
 80131f6:	b128      	cbz	r0, 8013204 <rmw_init_options_copy+0x1c>
 80131f8:	4b33      	ldr	r3, [pc, #204]	@ (80132c8 <rmw_init_options_copy+0xe0>)
 80131fa:	6819      	ldr	r1, [r3, #0]
 80131fc:	f7ec ffe8 	bl	80001d0 <strcmp>
 8013200:	2800      	cmp	r0, #0
 8013202:	d154      	bne.n	80132ae <rmw_init_options_copy+0xc6>
 8013204:	68ab      	ldr	r3, [r5, #8]
 8013206:	b11b      	cbz	r3, 8013210 <rmw_init_options_copy+0x28>
 8013208:	240b      	movs	r4, #11
 801320a:	4620      	mov	r0, r4
 801320c:	b008      	add	sp, #32
 801320e:	bd70      	pop	{r4, r5, r6, pc}
 8013210:	4623      	mov	r3, r4
 8013212:	462a      	mov	r2, r5
 8013214:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8013218:	f8d3 c000 	ldr.w	ip, [r3]
 801321c:	6858      	ldr	r0, [r3, #4]
 801321e:	6899      	ldr	r1, [r3, #8]
 8013220:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8013224:	f8c2 e00c 	str.w	lr, [r2, #12]
 8013228:	3310      	adds	r3, #16
 801322a:	42b3      	cmp	r3, r6
 801322c:	f8c2 c000 	str.w	ip, [r2]
 8013230:	6050      	str	r0, [r2, #4]
 8013232:	6091      	str	r1, [r2, #8]
 8013234:	f102 0210 	add.w	r2, r2, #16
 8013238:	d1ee      	bne.n	8013218 <rmw_init_options_copy+0x30>
 801323a:	6819      	ldr	r1, [r3, #0]
 801323c:	685b      	ldr	r3, [r3, #4]
 801323e:	6053      	str	r3, [r2, #4]
 8013240:	6011      	str	r1, [r2, #0]
 8013242:	f104 0e20 	add.w	lr, r4, #32
 8013246:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801324a:	f10d 0c0c 	add.w	ip, sp, #12
 801324e:	4666      	mov	r6, ip
 8013250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013254:	f8de 3000 	ldr.w	r3, [lr]
 8013258:	f8cc 3000 	str.w	r3, [ip]
 801325c:	4630      	mov	r0, r6
 801325e:	f7f8 f933 	bl	800b4c8 <rcutils_allocator_is_valid>
 8013262:	2800      	cmp	r0, #0
 8013264:	d0d0      	beq.n	8013208 <rmw_init_options_copy+0x20>
 8013266:	ab08      	add	r3, sp, #32
 8013268:	e913 0003 	ldmdb	r3, {r0, r1}
 801326c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013270:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8013274:	69e0      	ldr	r0, [r4, #28]
 8013276:	f7ff fb8d 	bl	8012994 <rcutils_strdup>
 801327a:	61e8      	str	r0, [r5, #28]
 801327c:	69e3      	ldr	r3, [r4, #28]
 801327e:	b103      	cbz	r3, 8013282 <rmw_init_options_copy+0x9a>
 8013280:	b1f8      	cbz	r0, 80132c2 <rmw_init_options_copy+0xda>
 8013282:	4812      	ldr	r0, [pc, #72]	@ (80132cc <rmw_init_options_copy+0xe4>)
 8013284:	f7ff fee0 	bl	8013048 <get_memory>
 8013288:	b1a8      	cbz	r0, 80132b6 <rmw_init_options_copy+0xce>
 801328a:	6883      	ldr	r3, [r0, #8]
 801328c:	636b      	str	r3, [r5, #52]	@ 0x34
 801328e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013290:	f102 0c10 	add.w	ip, r2, #16
 8013294:	f103 0510 	add.w	r5, r3, #16
 8013298:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801329c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801329e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80132a2:	2400      	movs	r4, #0
 80132a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80132a8:	4620      	mov	r0, r4
 80132aa:	b008      	add	sp, #32
 80132ac:	bd70      	pop	{r4, r5, r6, pc}
 80132ae:	240c      	movs	r4, #12
 80132b0:	4620      	mov	r0, r4
 80132b2:	b008      	add	sp, #32
 80132b4:	bd70      	pop	{r4, r5, r6, pc}
 80132b6:	9b04      	ldr	r3, [sp, #16]
 80132b8:	9907      	ldr	r1, [sp, #28]
 80132ba:	69e8      	ldr	r0, [r5, #28]
 80132bc:	4798      	blx	r3
 80132be:	2401      	movs	r4, #1
 80132c0:	e7a3      	b.n	801320a <rmw_init_options_copy+0x22>
 80132c2:	240a      	movs	r4, #10
 80132c4:	e7a1      	b.n	801320a <rmw_init_options_copy+0x22>
 80132c6:	bf00      	nop
 80132c8:	08018478 	.word	0x08018478
 80132cc:	20015e24 	.word	0x20015e24

080132d0 <rmw_init_options_fini>:
 80132d0:	2800      	cmp	r0, #0
 80132d2:	d041      	beq.n	8013358 <rmw_init_options_fini+0x88>
 80132d4:	b510      	push	{r4, lr}
 80132d6:	4604      	mov	r4, r0
 80132d8:	b08e      	sub	sp, #56	@ 0x38
 80132da:	3020      	adds	r0, #32
 80132dc:	f7f8 f8f4 	bl	800b4c8 <rcutils_allocator_is_valid>
 80132e0:	b380      	cbz	r0, 8013344 <rmw_init_options_fini+0x74>
 80132e2:	68a0      	ldr	r0, [r4, #8]
 80132e4:	b120      	cbz	r0, 80132f0 <rmw_init_options_fini+0x20>
 80132e6:	4b1e      	ldr	r3, [pc, #120]	@ (8013360 <rmw_init_options_fini+0x90>)
 80132e8:	6819      	ldr	r1, [r3, #0]
 80132ea:	f7ec ff71 	bl	80001d0 <strcmp>
 80132ee:	bb88      	cbnz	r0, 8013354 <rmw_init_options_fini+0x84>
 80132f0:	4b1c      	ldr	r3, [pc, #112]	@ (8013364 <rmw_init_options_fini+0x94>)
 80132f2:	6819      	ldr	r1, [r3, #0]
 80132f4:	b351      	cbz	r1, 801334c <rmw_init_options_fini+0x7c>
 80132f6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80132f8:	e001      	b.n	80132fe <rmw_init_options_fini+0x2e>
 80132fa:	6849      	ldr	r1, [r1, #4]
 80132fc:	b331      	cbz	r1, 801334c <rmw_init_options_fini+0x7c>
 80132fe:	688b      	ldr	r3, [r1, #8]
 8013300:	429a      	cmp	r2, r3
 8013302:	d1fa      	bne.n	80132fa <rmw_init_options_fini+0x2a>
 8013304:	4817      	ldr	r0, [pc, #92]	@ (8013364 <rmw_init_options_fini+0x94>)
 8013306:	f7ff feaf 	bl	8013068 <put_memory>
 801330a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801330c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801330e:	69e0      	ldr	r0, [r4, #28]
 8013310:	4798      	blx	r3
 8013312:	4668      	mov	r0, sp
 8013314:	f7ff fcb8 	bl	8012c88 <rmw_get_zero_initialized_init_options>
 8013318:	46ee      	mov	lr, sp
 801331a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801331e:	46a4      	mov	ip, r4
 8013320:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013324:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013328:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801332c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013330:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013334:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013338:	e88c 0003 	stmia.w	ip, {r0, r1}
 801333c:	2300      	movs	r3, #0
 801333e:	4618      	mov	r0, r3
 8013340:	b00e      	add	sp, #56	@ 0x38
 8013342:	bd10      	pop	{r4, pc}
 8013344:	230b      	movs	r3, #11
 8013346:	4618      	mov	r0, r3
 8013348:	b00e      	add	sp, #56	@ 0x38
 801334a:	bd10      	pop	{r4, pc}
 801334c:	2301      	movs	r3, #1
 801334e:	4618      	mov	r0, r3
 8013350:	b00e      	add	sp, #56	@ 0x38
 8013352:	bd10      	pop	{r4, pc}
 8013354:	230c      	movs	r3, #12
 8013356:	e7f2      	b.n	801333e <rmw_init_options_fini+0x6e>
 8013358:	230b      	movs	r3, #11
 801335a:	4618      	mov	r0, r3
 801335c:	4770      	bx	lr
 801335e:	bf00      	nop
 8013360:	08018478 	.word	0x08018478
 8013364:	20015e24 	.word	0x20015e24

08013368 <rmw_init>:
 8013368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801336c:	b083      	sub	sp, #12
 801336e:	2800      	cmp	r0, #0
 8013370:	f000 80d3 	beq.w	801351a <rmw_init+0x1b2>
 8013374:	460e      	mov	r6, r1
 8013376:	2900      	cmp	r1, #0
 8013378:	f000 80cf 	beq.w	801351a <rmw_init+0x1b2>
 801337c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801337e:	4605      	mov	r5, r0
 8013380:	2b00      	cmp	r3, #0
 8013382:	f000 80ca 	beq.w	801351a <rmw_init+0x1b2>
 8013386:	4b78      	ldr	r3, [pc, #480]	@ (8013568 <rmw_init+0x200>)
 8013388:	6880      	ldr	r0, [r0, #8]
 801338a:	681f      	ldr	r7, [r3, #0]
 801338c:	b128      	cbz	r0, 801339a <rmw_init+0x32>
 801338e:	4639      	mov	r1, r7
 8013390:	f7ec ff1e 	bl	80001d0 <strcmp>
 8013394:	2800      	cmp	r0, #0
 8013396:	f040 80ca 	bne.w	801352e <rmw_init+0x1c6>
 801339a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801339e:	4c73      	ldr	r4, [pc, #460]	@ (801356c <rmw_init+0x204>)
 80133a0:	4973      	ldr	r1, [pc, #460]	@ (8013570 <rmw_init+0x208>)
 80133a2:	4874      	ldr	r0, [pc, #464]	@ (8013574 <rmw_init+0x20c>)
 80133a4:	60b7      	str	r7, [r6, #8]
 80133a6:	e9c6 2300 	strd	r2, r3, [r6]
 80133aa:	68eb      	ldr	r3, [r5, #12]
 80133ac:	64b3      	str	r3, [r6, #72]	@ 0x48
 80133ae:	2201      	movs	r2, #1
 80133b0:	f7f8 fb78 	bl	800baa4 <rmw_uxrce_init_session_memory>
 80133b4:	4620      	mov	r0, r4
 80133b6:	4970      	ldr	r1, [pc, #448]	@ (8013578 <rmw_init+0x210>)
 80133b8:	2204      	movs	r2, #4
 80133ba:	f7f8 fbb3 	bl	800bb24 <rmw_uxrce_init_static_input_buffer_memory>
 80133be:	f04f 0800 	mov.w	r8, #0
 80133c2:	486c      	ldr	r0, [pc, #432]	@ (8013574 <rmw_init+0x20c>)
 80133c4:	f884 800d 	strb.w	r8, [r4, #13]
 80133c8:	f7ff fe3e 	bl	8013048 <get_memory>
 80133cc:	2800      	cmp	r0, #0
 80133ce:	f000 80a9 	beq.w	8013524 <rmw_init+0x1bc>
 80133d2:	6884      	ldr	r4, [r0, #8]
 80133d4:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80133d6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80133d8:	f890 c010 	ldrb.w	ip, [r0, #16]
 80133dc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80133e0:	9101      	str	r1, [sp, #4]
 80133e2:	6a00      	ldr	r0, [r0, #32]
 80133e4:	9000      	str	r0, [sp, #0]
 80133e6:	f104 0910 	add.w	r9, r4, #16
 80133ea:	4661      	mov	r1, ip
 80133ec:	4648      	mov	r0, r9
 80133ee:	f001 f8fb 	bl	80145e8 <uxr_set_custom_transport_callbacks>
 80133f2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80133f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80133fa:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80133fe:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8013402:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8013406:	495d      	ldr	r1, [pc, #372]	@ (801357c <rmw_init+0x214>)
 8013408:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801340c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8013410:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8013414:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8013418:	4859      	ldr	r0, [pc, #356]	@ (8013580 <rmw_init+0x218>)
 801341a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801341e:	2201      	movs	r2, #1
 8013420:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8013422:	f7f8 fb1f 	bl	800ba64 <rmw_uxrce_init_node_memory>
 8013426:	4957      	ldr	r1, [pc, #348]	@ (8013584 <rmw_init+0x21c>)
 8013428:	4857      	ldr	r0, [pc, #348]	@ (8013588 <rmw_init+0x220>)
 801342a:	2205      	movs	r2, #5
 801342c:	f7f8 fafa 	bl	800ba24 <rmw_uxrce_init_subscription_memory>
 8013430:	4956      	ldr	r1, [pc, #344]	@ (801358c <rmw_init+0x224>)
 8013432:	4857      	ldr	r0, [pc, #348]	@ (8013590 <rmw_init+0x228>)
 8013434:	220a      	movs	r2, #10
 8013436:	f7f8 fad5 	bl	800b9e4 <rmw_uxrce_init_publisher_memory>
 801343a:	4956      	ldr	r1, [pc, #344]	@ (8013594 <rmw_init+0x22c>)
 801343c:	4856      	ldr	r0, [pc, #344]	@ (8013598 <rmw_init+0x230>)
 801343e:	2201      	movs	r2, #1
 8013440:	f7f8 fa90 	bl	800b964 <rmw_uxrce_init_service_memory>
 8013444:	4955      	ldr	r1, [pc, #340]	@ (801359c <rmw_init+0x234>)
 8013446:	4856      	ldr	r0, [pc, #344]	@ (80135a0 <rmw_init+0x238>)
 8013448:	2201      	movs	r2, #1
 801344a:	f7f8 faab 	bl	800b9a4 <rmw_uxrce_init_client_memory>
 801344e:	4955      	ldr	r1, [pc, #340]	@ (80135a4 <rmw_init+0x23c>)
 8013450:	4855      	ldr	r0, [pc, #340]	@ (80135a8 <rmw_init+0x240>)
 8013452:	220f      	movs	r2, #15
 8013454:	f7f8 fb46 	bl	800bae4 <rmw_uxrce_init_topic_memory>
 8013458:	4954      	ldr	r1, [pc, #336]	@ (80135ac <rmw_init+0x244>)
 801345a:	4855      	ldr	r0, [pc, #340]	@ (80135b0 <rmw_init+0x248>)
 801345c:	2203      	movs	r2, #3
 801345e:	f7f8 fb81 	bl	800bb64 <rmw_uxrce_init_init_options_impl_memory>
 8013462:	4954      	ldr	r1, [pc, #336]	@ (80135b4 <rmw_init+0x24c>)
 8013464:	4854      	ldr	r0, [pc, #336]	@ (80135b8 <rmw_init+0x250>)
 8013466:	2204      	movs	r2, #4
 8013468:	f7f8 fb9c 	bl	800bba4 <rmw_uxrce_init_wait_set_memory>
 801346c:	4953      	ldr	r1, [pc, #332]	@ (80135bc <rmw_init+0x254>)
 801346e:	4854      	ldr	r0, [pc, #336]	@ (80135c0 <rmw_init+0x258>)
 8013470:	2204      	movs	r2, #4
 8013472:	f7f8 fbb7 	bl	800bbe4 <rmw_uxrce_init_guard_condition_memory>
 8013476:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8013478:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801347a:	4642      	mov	r2, r8
 801347c:	f000 fcac 	bl	8013dd8 <rmw_uxrce_transport_init>
 8013480:	4607      	mov	r7, r0
 8013482:	2800      	cmp	r0, #0
 8013484:	d158      	bne.n	8013538 <rmw_init+0x1d0>
 8013486:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8013488:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801348c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801348e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8013492:	4628      	mov	r0, r5
 8013494:	f7fa f894 	bl	800d5c0 <uxr_init_session>
 8013498:	494a      	ldr	r1, [pc, #296]	@ (80135c4 <rmw_init+0x25c>)
 801349a:	4622      	mov	r2, r4
 801349c:	4628      	mov	r0, r5
 801349e:	f7fa f8b3 	bl	800d608 <uxr_set_topic_callback>
 80134a2:	4949      	ldr	r1, [pc, #292]	@ (80135c8 <rmw_init+0x260>)
 80134a4:	463a      	mov	r2, r7
 80134a6:	4628      	mov	r0, r5
 80134a8:	f7fa f8aa 	bl	800d600 <uxr_set_status_callback>
 80134ac:	4947      	ldr	r1, [pc, #284]	@ (80135cc <rmw_init+0x264>)
 80134ae:	463a      	mov	r2, r7
 80134b0:	4628      	mov	r0, r5
 80134b2:	f7fa f8ad 	bl	800d610 <uxr_set_request_callback>
 80134b6:	4946      	ldr	r1, [pc, #280]	@ (80135d0 <rmw_init+0x268>)
 80134b8:	463a      	mov	r2, r7
 80134ba:	4628      	mov	r0, r5
 80134bc:	f7fa f8ac 	bl	800d618 <uxr_set_reply_callback>
 80134c0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80134c4:	2304      	movs	r3, #4
 80134c6:	0092      	lsls	r2, r2, #2
 80134c8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80134cc:	4628      	mov	r0, r5
 80134ce:	f7fa f8e1 	bl	800d694 <uxr_create_input_reliable_stream>
 80134d2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80134d6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80134da:	0092      	lsls	r2, r2, #2
 80134dc:	2304      	movs	r3, #4
 80134de:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80134e2:	4628      	mov	r0, r5
 80134e4:	f7fa f8ae 	bl	800d644 <uxr_create_output_reliable_stream>
 80134e8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80134ec:	4628      	mov	r0, r5
 80134ee:	f7fa f8cb 	bl	800d688 <uxr_create_input_best_effort_stream>
 80134f2:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80134f6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80134fa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80134fe:	3114      	adds	r1, #20
 8013500:	4628      	mov	r0, r5
 8013502:	f7fa f88d 	bl	800d620 <uxr_create_output_best_effort_stream>
 8013506:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801350a:	4628      	mov	r0, r5
 801350c:	f7fa fe18 	bl	800e140 <uxr_create_session>
 8013510:	b1f8      	cbz	r0, 8013552 <rmw_init+0x1ea>
 8013512:	4638      	mov	r0, r7
 8013514:	b003      	add	sp, #12
 8013516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801351a:	270b      	movs	r7, #11
 801351c:	4638      	mov	r0, r7
 801351e:	b003      	add	sp, #12
 8013520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013524:	2701      	movs	r7, #1
 8013526:	4638      	mov	r0, r7
 8013528:	b003      	add	sp, #12
 801352a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801352e:	270c      	movs	r7, #12
 8013530:	4638      	mov	r0, r7
 8013532:	b003      	add	sp, #12
 8013534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013538:	4648      	mov	r0, r9
 801353a:	f001 f897 	bl	801466c <uxr_close_custom_transport>
 801353e:	480d      	ldr	r0, [pc, #52]	@ (8013574 <rmw_init+0x20c>)
 8013540:	4621      	mov	r1, r4
 8013542:	f7ff fd91 	bl	8013068 <put_memory>
 8013546:	4638      	mov	r0, r7
 8013548:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801354c:	b003      	add	sp, #12
 801354e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013552:	4648      	mov	r0, r9
 8013554:	f001 f88a 	bl	801466c <uxr_close_custom_transport>
 8013558:	4806      	ldr	r0, [pc, #24]	@ (8013574 <rmw_init+0x20c>)
 801355a:	4621      	mov	r1, r4
 801355c:	f7ff fd84 	bl	8013068 <put_memory>
 8013560:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8013562:	2701      	movs	r7, #1
 8013564:	e7d5      	b.n	8013512 <rmw_init+0x1aa>
 8013566:	bf00      	nop
 8013568:	08018478 	.word	0x08018478
 801356c:	20015e74 	.word	0x20015e74
 8013570:	20012120 	.word	0x20012120
 8013574:	20015e64 	.word	0x20015e64
 8013578:	200136c8 	.word	0x200136c8
 801357c:	20011744 	.word	0x20011744
 8013580:	20015e34 	.word	0x20015e34
 8013584:	200157c8 	.word	0x200157c8
 8013588:	20015e84 	.word	0x20015e84
 801358c:	200117e8 	.word	0x200117e8
 8013590:	20015e44 	.word	0x20015e44
 8013594:	20012058 	.word	0x20012058
 8013598:	20015e54 	.word	0x20015e54
 801359c:	20011578 	.word	0x20011578
 80135a0:	20011568 	.word	0x20011568
 80135a4:	20015c00 	.word	0x20015c00
 80135a8:	20015e94 	.word	0x20015e94
 80135ac:	200116c0 	.word	0x200116c0
 80135b0:	20015e24 	.word	0x20015e24
 80135b4:	20015da4 	.word	0x20015da4
 80135b8:	20015ea4 	.word	0x20015ea4
 80135bc:	20011640 	.word	0x20011640
 80135c0:	20015e14 	.word	0x20015e14
 80135c4:	0801634d 	.word	0x0801634d
 80135c8:	08016345 	.word	0x08016345
 80135cc:	080163e5 	.word	0x080163e5
 80135d0:	08016481 	.word	0x08016481

080135d4 <rmw_context_fini>:
 80135d4:	4b17      	ldr	r3, [pc, #92]	@ (8013634 <rmw_context_fini+0x60>)
 80135d6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80135d8:	b570      	push	{r4, r5, r6, lr}
 80135da:	681c      	ldr	r4, [r3, #0]
 80135dc:	4605      	mov	r5, r0
 80135de:	b334      	cbz	r4, 801362e <rmw_context_fini+0x5a>
 80135e0:	2600      	movs	r6, #0
 80135e2:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80135e6:	6902      	ldr	r2, [r0, #16]
 80135e8:	428a      	cmp	r2, r1
 80135ea:	d018      	beq.n	801361e <rmw_context_fini+0x4a>
 80135ec:	2c00      	cmp	r4, #0
 80135ee:	d1f8      	bne.n	80135e2 <rmw_context_fini+0xe>
 80135f0:	b189      	cbz	r1, 8013616 <rmw_context_fini+0x42>
 80135f2:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80135f6:	789b      	ldrb	r3, [r3, #2]
 80135f8:	2b01      	cmp	r3, #1
 80135fa:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80135fe:	bf14      	ite	ne
 8013600:	210a      	movne	r1, #10
 8013602:	2100      	moveq	r1, #0
 8013604:	f7fa fd74 	bl	800e0f0 <uxr_delete_session_retries>
 8013608:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801360a:	f7f8 fb0b 	bl	800bc24 <rmw_uxrce_fini_session_memory>
 801360e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013610:	3010      	adds	r0, #16
 8013612:	f001 f82b 	bl	801466c <uxr_close_custom_transport>
 8013616:	2300      	movs	r3, #0
 8013618:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801361a:	4630      	mov	r0, r6
 801361c:	bd70      	pop	{r4, r5, r6, pc}
 801361e:	3018      	adds	r0, #24
 8013620:	f000 f90e 	bl	8013840 <rmw_destroy_node>
 8013624:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8013626:	4606      	mov	r6, r0
 8013628:	2c00      	cmp	r4, #0
 801362a:	d1da      	bne.n	80135e2 <rmw_context_fini+0xe>
 801362c:	e7e0      	b.n	80135f0 <rmw_context_fini+0x1c>
 801362e:	4626      	mov	r6, r4
 8013630:	e7de      	b.n	80135f0 <rmw_context_fini+0x1c>
 8013632:	bf00      	nop
 8013634:	20015e34 	.word	0x20015e34

08013638 <create_topic>:
 8013638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801363c:	4605      	mov	r5, r0
 801363e:	b084      	sub	sp, #16
 8013640:	4822      	ldr	r0, [pc, #136]	@ (80136cc <create_topic+0x94>)
 8013642:	460f      	mov	r7, r1
 8013644:	4616      	mov	r6, r2
 8013646:	f7ff fcff 	bl	8013048 <get_memory>
 801364a:	4604      	mov	r4, r0
 801364c:	2800      	cmp	r0, #0
 801364e:	d039      	beq.n	80136c4 <create_topic+0x8c>
 8013650:	692b      	ldr	r3, [r5, #16]
 8013652:	6884      	ldr	r4, [r0, #8]
 8013654:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80136d4 <create_topic+0x9c>
 8013658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801365c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8013660:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8013664:	1c42      	adds	r2, r0, #1
 8013666:	2102      	movs	r1, #2
 8013668:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801366c:	f7f9 fee8 	bl	800d440 <uxr_object_id>
 8013670:	223c      	movs	r2, #60	@ 0x3c
 8013672:	6120      	str	r0, [r4, #16]
 8013674:	4641      	mov	r1, r8
 8013676:	4638      	mov	r0, r7
 8013678:	f7f8 fcb2 	bl	800bfe0 <generate_topic_name>
 801367c:	b1f0      	cbz	r0, 80136bc <create_topic+0x84>
 801367e:	4f14      	ldr	r7, [pc, #80]	@ (80136d0 <create_topic+0x98>)
 8013680:	4630      	mov	r0, r6
 8013682:	2264      	movs	r2, #100	@ 0x64
 8013684:	4639      	mov	r1, r7
 8013686:	f7f8 fc7b 	bl	800bf80 <generate_type_name>
 801368a:	b1b8      	cbz	r0, 80136bc <create_topic+0x84>
 801368c:	6928      	ldr	r0, [r5, #16]
 801368e:	2306      	movs	r3, #6
 8013690:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013694:	f8cd 8000 	str.w	r8, [sp]
 8013698:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801369c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80136a0:	6811      	ldr	r1, [r2, #0]
 80136a2:	696b      	ldr	r3, [r5, #20]
 80136a4:	6922      	ldr	r2, [r4, #16]
 80136a6:	f7f9 fdef 	bl	800d288 <uxr_buffer_create_topic_bin>
 80136aa:	4602      	mov	r2, r0
 80136ac:	6928      	ldr	r0, [r5, #16]
 80136ae:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80136b2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80136b6:	f7f8 fc2d 	bl	800bf14 <run_xrce_session>
 80136ba:	b918      	cbnz	r0, 80136c4 <create_topic+0x8c>
 80136bc:	4620      	mov	r0, r4
 80136be:	f7f8 fb27 	bl	800bd10 <rmw_uxrce_fini_topic_memory>
 80136c2:	2400      	movs	r4, #0
 80136c4:	4620      	mov	r0, r4
 80136c6:	b004      	add	sp, #16
 80136c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136cc:	20015e94 	.word	0x20015e94
 80136d0:	20015f10 	.word	0x20015f10
 80136d4:	20015ed4 	.word	0x20015ed4

080136d8 <destroy_topic>:
 80136d8:	b538      	push	{r3, r4, r5, lr}
 80136da:	6985      	ldr	r5, [r0, #24]
 80136dc:	b1d5      	cbz	r5, 8013714 <destroy_topic+0x3c>
 80136de:	4604      	mov	r4, r0
 80136e0:	6928      	ldr	r0, [r5, #16]
 80136e2:	6922      	ldr	r2, [r4, #16]
 80136e4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80136e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80136ec:	6819      	ldr	r1, [r3, #0]
 80136ee:	f7f9 fd4d 	bl	800d18c <uxr_buffer_delete_entity>
 80136f2:	4602      	mov	r2, r0
 80136f4:	6928      	ldr	r0, [r5, #16]
 80136f6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80136fa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80136fe:	f7f8 fc09 	bl	800bf14 <run_xrce_session>
 8013702:	2800      	cmp	r0, #0
 8013704:	4620      	mov	r0, r4
 8013706:	bf14      	ite	ne
 8013708:	2400      	movne	r4, #0
 801370a:	2402      	moveq	r4, #2
 801370c:	f7f8 fb00 	bl	800bd10 <rmw_uxrce_fini_topic_memory>
 8013710:	4620      	mov	r0, r4
 8013712:	bd38      	pop	{r3, r4, r5, pc}
 8013714:	2401      	movs	r4, #1
 8013716:	4620      	mov	r0, r4
 8013718:	bd38      	pop	{r3, r4, r5, pc}
 801371a:	bf00      	nop

0801371c <create_node>:
 801371c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013720:	b083      	sub	sp, #12
 8013722:	2b00      	cmp	r3, #0
 8013724:	d05f      	beq.n	80137e6 <create_node+0xca>
 8013726:	4606      	mov	r6, r0
 8013728:	4835      	ldr	r0, [pc, #212]	@ (8013800 <create_node+0xe4>)
 801372a:	460f      	mov	r7, r1
 801372c:	4690      	mov	r8, r2
 801372e:	461d      	mov	r5, r3
 8013730:	f7ff fc8a 	bl	8013048 <get_memory>
 8013734:	2800      	cmp	r0, #0
 8013736:	d056      	beq.n	80137e6 <create_node+0xca>
 8013738:	6884      	ldr	r4, [r0, #8]
 801373a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801373c:	6123      	str	r3, [r4, #16]
 801373e:	f7ff fceb 	bl	8013118 <rmw_get_implementation_identifier>
 8013742:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8013746:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801374a:	f8c4 9020 	str.w	r9, [r4, #32]
 801374e:	4630      	mov	r0, r6
 8013750:	f7ec fd48 	bl	80001e4 <strlen>
 8013754:	1c42      	adds	r2, r0, #1
 8013756:	2a3c      	cmp	r2, #60	@ 0x3c
 8013758:	f104 0518 	add.w	r5, r4, #24
 801375c:	d840      	bhi.n	80137e0 <create_node+0xc4>
 801375e:	4648      	mov	r0, r9
 8013760:	4631      	mov	r1, r6
 8013762:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8013766:	f003 fbae 	bl	8016ec6 <memcpy>
 801376a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801376e:	4638      	mov	r0, r7
 8013770:	f7ec fd38 	bl	80001e4 <strlen>
 8013774:	1c42      	adds	r2, r0, #1
 8013776:	2a3c      	cmp	r2, #60	@ 0x3c
 8013778:	d832      	bhi.n	80137e0 <create_node+0xc4>
 801377a:	4639      	mov	r1, r7
 801377c:	4648      	mov	r0, r9
 801377e:	f003 fba2 	bl	8016ec6 <memcpy>
 8013782:	6923      	ldr	r3, [r4, #16]
 8013784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013788:	2101      	movs	r1, #1
 801378a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801378e:	1842      	adds	r2, r0, r1
 8013790:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8013794:	f7f9 fe54 	bl	800d440 <uxr_object_id>
 8013798:	6160      	str	r0, [r4, #20]
 801379a:	783b      	ldrb	r3, [r7, #0]
 801379c:	2b2f      	cmp	r3, #47	@ 0x2f
 801379e:	d127      	bne.n	80137f0 <create_node+0xd4>
 80137a0:	787b      	ldrb	r3, [r7, #1]
 80137a2:	bb2b      	cbnz	r3, 80137f0 <create_node+0xd4>
 80137a4:	4a17      	ldr	r2, [pc, #92]	@ (8013804 <create_node+0xe8>)
 80137a6:	4818      	ldr	r0, [pc, #96]	@ (8013808 <create_node+0xec>)
 80137a8:	4633      	mov	r3, r6
 80137aa:	213c      	movs	r1, #60	@ 0x3c
 80137ac:	f003 f9e8 	bl	8016b80 <sniprintf>
 80137b0:	6920      	ldr	r0, [r4, #16]
 80137b2:	4915      	ldr	r1, [pc, #84]	@ (8013808 <create_node+0xec>)
 80137b4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80137b8:	9100      	str	r1, [sp, #0]
 80137ba:	2106      	movs	r1, #6
 80137bc:	9101      	str	r1, [sp, #4]
 80137be:	6811      	ldr	r1, [r2, #0]
 80137c0:	6962      	ldr	r2, [r4, #20]
 80137c2:	fa1f f388 	uxth.w	r3, r8
 80137c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80137ca:	f7f9 fd2b 	bl	800d224 <uxr_buffer_create_participant_bin>
 80137ce:	4602      	mov	r2, r0
 80137d0:	6920      	ldr	r0, [r4, #16]
 80137d2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80137d6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80137da:	f7f8 fb9b 	bl	800bf14 <run_xrce_session>
 80137de:	b918      	cbnz	r0, 80137e8 <create_node+0xcc>
 80137e0:	4628      	mov	r0, r5
 80137e2:	f7f8 fa25 	bl	800bc30 <rmw_uxrce_fini_node_memory>
 80137e6:	2500      	movs	r5, #0
 80137e8:	4628      	mov	r0, r5
 80137ea:	b003      	add	sp, #12
 80137ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137f0:	4a06      	ldr	r2, [pc, #24]	@ (801380c <create_node+0xf0>)
 80137f2:	9600      	str	r6, [sp, #0]
 80137f4:	463b      	mov	r3, r7
 80137f6:	213c      	movs	r1, #60	@ 0x3c
 80137f8:	4803      	ldr	r0, [pc, #12]	@ (8013808 <create_node+0xec>)
 80137fa:	f003 f9c1 	bl	8016b80 <sniprintf>
 80137fe:	e7d7      	b.n	80137b0 <create_node+0x94>
 8013800:	20015e34 	.word	0x20015e34
 8013804:	08017e88 	.word	0x08017e88
 8013808:	20015f74 	.word	0x20015f74
 801380c:	08018018 	.word	0x08018018

08013810 <rmw_create_node>:
 8013810:	b199      	cbz	r1, 801383a <rmw_create_node+0x2a>
 8013812:	780b      	ldrb	r3, [r1, #0]
 8013814:	468c      	mov	ip, r1
 8013816:	b183      	cbz	r3, 801383a <rmw_create_node+0x2a>
 8013818:	b410      	push	{r4}
 801381a:	4614      	mov	r4, r2
 801381c:	b14a      	cbz	r2, 8013832 <rmw_create_node+0x22>
 801381e:	7813      	ldrb	r3, [r2, #0]
 8013820:	b13b      	cbz	r3, 8013832 <rmw_create_node+0x22>
 8013822:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8013824:	4603      	mov	r3, r0
 8013826:	4621      	mov	r1, r4
 8013828:	4660      	mov	r0, ip
 801382a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801382e:	f7ff bf75 	b.w	801371c <create_node>
 8013832:	2000      	movs	r0, #0
 8013834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013838:	4770      	bx	lr
 801383a:	2000      	movs	r0, #0
 801383c:	4770      	bx	lr
 801383e:	bf00      	nop

08013840 <rmw_destroy_node>:
 8013840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013842:	b328      	cbz	r0, 8013890 <rmw_destroy_node+0x50>
 8013844:	4607      	mov	r7, r0
 8013846:	6800      	ldr	r0, [r0, #0]
 8013848:	b120      	cbz	r0, 8013854 <rmw_destroy_node+0x14>
 801384a:	4b36      	ldr	r3, [pc, #216]	@ (8013924 <rmw_destroy_node+0xe4>)
 801384c:	6819      	ldr	r1, [r3, #0]
 801384e:	f7ec fcbf 	bl	80001d0 <strcmp>
 8013852:	b9e8      	cbnz	r0, 8013890 <rmw_destroy_node+0x50>
 8013854:	687d      	ldr	r5, [r7, #4]
 8013856:	b1dd      	cbz	r5, 8013890 <rmw_destroy_node+0x50>
 8013858:	4b33      	ldr	r3, [pc, #204]	@ (8013928 <rmw_destroy_node+0xe8>)
 801385a:	681c      	ldr	r4, [r3, #0]
 801385c:	2c00      	cmp	r4, #0
 801385e:	d05f      	beq.n	8013920 <rmw_destroy_node+0xe0>
 8013860:	2600      	movs	r6, #0
 8013862:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013866:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801386a:	429d      	cmp	r5, r3
 801386c:	d013      	beq.n	8013896 <rmw_destroy_node+0x56>
 801386e:	2c00      	cmp	r4, #0
 8013870:	d1f7      	bne.n	8013862 <rmw_destroy_node+0x22>
 8013872:	4b2e      	ldr	r3, [pc, #184]	@ (801392c <rmw_destroy_node+0xec>)
 8013874:	681c      	ldr	r4, [r3, #0]
 8013876:	b1c4      	cbz	r4, 80138aa <rmw_destroy_node+0x6a>
 8013878:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801387c:	6a0b      	ldr	r3, [r1, #32]
 801387e:	429d      	cmp	r5, r3
 8013880:	d1f9      	bne.n	8013876 <rmw_destroy_node+0x36>
 8013882:	317c      	adds	r1, #124	@ 0x7c
 8013884:	4638      	mov	r0, r7
 8013886:	f000 f9f3 	bl	8013c70 <rmw_destroy_subscription>
 801388a:	2801      	cmp	r0, #1
 801388c:	4606      	mov	r6, r0
 801388e:	d1f2      	bne.n	8013876 <rmw_destroy_node+0x36>
 8013890:	2601      	movs	r6, #1
 8013892:	4630      	mov	r0, r6
 8013894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013896:	3184      	adds	r1, #132	@ 0x84
 8013898:	4638      	mov	r0, r7
 801389a:	f7f8 f811 	bl	800b8c0 <rmw_destroy_publisher>
 801389e:	2801      	cmp	r0, #1
 80138a0:	4606      	mov	r6, r0
 80138a2:	d0f5      	beq.n	8013890 <rmw_destroy_node+0x50>
 80138a4:	2c00      	cmp	r4, #0
 80138a6:	d1dc      	bne.n	8013862 <rmw_destroy_node+0x22>
 80138a8:	e7e3      	b.n	8013872 <rmw_destroy_node+0x32>
 80138aa:	4b21      	ldr	r3, [pc, #132]	@ (8013930 <rmw_destroy_node+0xf0>)
 80138ac:	681c      	ldr	r4, [r3, #0]
 80138ae:	b16c      	cbz	r4, 80138cc <rmw_destroy_node+0x8c>
 80138b0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80138b4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80138b6:	429d      	cmp	r5, r3
 80138b8:	d1f9      	bne.n	80138ae <rmw_destroy_node+0x6e>
 80138ba:	317c      	adds	r1, #124	@ 0x7c
 80138bc:	4638      	mov	r0, r7
 80138be:	f000 f993 	bl	8013be8 <rmw_destroy_service>
 80138c2:	2801      	cmp	r0, #1
 80138c4:	4606      	mov	r6, r0
 80138c6:	d0e3      	beq.n	8013890 <rmw_destroy_node+0x50>
 80138c8:	2c00      	cmp	r4, #0
 80138ca:	d1f1      	bne.n	80138b0 <rmw_destroy_node+0x70>
 80138cc:	4b19      	ldr	r3, [pc, #100]	@ (8013934 <rmw_destroy_node+0xf4>)
 80138ce:	681c      	ldr	r4, [r3, #0]
 80138d0:	b16c      	cbz	r4, 80138ee <rmw_destroy_node+0xae>
 80138d2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80138d6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80138d8:	429d      	cmp	r5, r3
 80138da:	d1f9      	bne.n	80138d0 <rmw_destroy_node+0x90>
 80138dc:	317c      	adds	r1, #124	@ 0x7c
 80138de:	4638      	mov	r0, r7
 80138e0:	f7ff fbd6 	bl	8013090 <rmw_destroy_client>
 80138e4:	2801      	cmp	r0, #1
 80138e6:	4606      	mov	r6, r0
 80138e8:	d0d2      	beq.n	8013890 <rmw_destroy_node+0x50>
 80138ea:	2c00      	cmp	r4, #0
 80138ec:	d1f1      	bne.n	80138d2 <rmw_destroy_node+0x92>
 80138ee:	6928      	ldr	r0, [r5, #16]
 80138f0:	696a      	ldr	r2, [r5, #20]
 80138f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80138f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80138fa:	6819      	ldr	r1, [r3, #0]
 80138fc:	f7f9 fc46 	bl	800d18c <uxr_buffer_delete_entity>
 8013900:	4602      	mov	r2, r0
 8013902:	6928      	ldr	r0, [r5, #16]
 8013904:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013908:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801390c:	f7f8 fb02 	bl	800bf14 <run_xrce_session>
 8013910:	2800      	cmp	r0, #0
 8013912:	bf08      	it	eq
 8013914:	2602      	moveq	r6, #2
 8013916:	4638      	mov	r0, r7
 8013918:	f7f8 f98a 	bl	800bc30 <rmw_uxrce_fini_node_memory>
 801391c:	4630      	mov	r0, r6
 801391e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013920:	4626      	mov	r6, r4
 8013922:	e7a6      	b.n	8013872 <rmw_destroy_node+0x32>
 8013924:	08018478 	.word	0x08018478
 8013928:	20015e44 	.word	0x20015e44
 801392c:	20015e84 	.word	0x20015e84
 8013930:	20015e54 	.word	0x20015e54
 8013934:	20011568 	.word	0x20011568

08013938 <rmw_node_get_graph_guard_condition>:
 8013938:	6843      	ldr	r3, [r0, #4]
 801393a:	6918      	ldr	r0, [r3, #16]
 801393c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8013940:	4770      	bx	lr
 8013942:	bf00      	nop

08013944 <rmw_send_request>:
 8013944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013948:	4604      	mov	r4, r0
 801394a:	6800      	ldr	r0, [r0, #0]
 801394c:	b08b      	sub	sp, #44	@ 0x2c
 801394e:	460e      	mov	r6, r1
 8013950:	4615      	mov	r5, r2
 8013952:	b128      	cbz	r0, 8013960 <rmw_send_request+0x1c>
 8013954:	4b21      	ldr	r3, [pc, #132]	@ (80139dc <rmw_send_request+0x98>)
 8013956:	6819      	ldr	r1, [r3, #0]
 8013958:	f7ec fc3a 	bl	80001d0 <strcmp>
 801395c:	2800      	cmp	r0, #0
 801395e:	d139      	bne.n	80139d4 <rmw_send_request+0x90>
 8013960:	6864      	ldr	r4, [r4, #4]
 8013962:	6963      	ldr	r3, [r4, #20]
 8013964:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8013968:	689b      	ldr	r3, [r3, #8]
 801396a:	4798      	blx	r3
 801396c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013970:	4630      	mov	r0, r6
 8013972:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013976:	4798      	blx	r3
 8013978:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801397c:	9000      	str	r0, [sp, #0]
 801397e:	6922      	ldr	r2, [r4, #16]
 8013980:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8013982:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013986:	ab02      	add	r3, sp, #8
 8013988:	f7fb f856 	bl	800ea38 <uxr_prepare_output_stream>
 801398c:	2700      	movs	r7, #0
 801398e:	6028      	str	r0, [r5, #0]
 8013990:	606f      	str	r7, [r5, #4]
 8013992:	b198      	cbz	r0, 80139bc <rmw_send_request+0x78>
 8013994:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013998:	a902      	add	r1, sp, #8
 801399a:	4630      	mov	r0, r6
 801399c:	4798      	blx	r3
 801399e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80139a2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80139a6:	2b01      	cmp	r3, #1
 80139a8:	d00c      	beq.n	80139c4 <rmw_send_request+0x80>
 80139aa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80139ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80139b0:	f7fa fa56 	bl	800de60 <uxr_run_session_until_confirm_delivery>
 80139b4:	4638      	mov	r0, r7
 80139b6:	b00b      	add	sp, #44	@ 0x2c
 80139b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139bc:	2001      	movs	r0, #1
 80139be:	b00b      	add	sp, #44	@ 0x2c
 80139c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80139c8:	f7f9 fe8a 	bl	800d6e0 <uxr_flash_output_streams>
 80139cc:	4638      	mov	r0, r7
 80139ce:	b00b      	add	sp, #44	@ 0x2c
 80139d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139d4:	200c      	movs	r0, #12
 80139d6:	b00b      	add	sp, #44	@ 0x2c
 80139d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139dc:	08018478 	.word	0x08018478

080139e0 <rmw_take_request>:
 80139e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80139e4:	4605      	mov	r5, r0
 80139e6:	6800      	ldr	r0, [r0, #0]
 80139e8:	b089      	sub	sp, #36	@ 0x24
 80139ea:	460c      	mov	r4, r1
 80139ec:	4690      	mov	r8, r2
 80139ee:	461e      	mov	r6, r3
 80139f0:	b128      	cbz	r0, 80139fe <rmw_take_request+0x1e>
 80139f2:	4b28      	ldr	r3, [pc, #160]	@ (8013a94 <rmw_take_request+0xb4>)
 80139f4:	6819      	ldr	r1, [r3, #0]
 80139f6:	f7ec fbeb 	bl	80001d0 <strcmp>
 80139fa:	2800      	cmp	r0, #0
 80139fc:	d146      	bne.n	8013a8c <rmw_take_request+0xac>
 80139fe:	b10e      	cbz	r6, 8013a04 <rmw_take_request+0x24>
 8013a00:	2300      	movs	r3, #0
 8013a02:	7033      	strb	r3, [r6, #0]
 8013a04:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013a08:	f7f8 fa06 	bl	800be18 <rmw_uxrce_clean_expired_static_input_buffer>
 8013a0c:	4648      	mov	r0, r9
 8013a0e:	f7f8 f9db 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013a12:	4607      	mov	r7, r0
 8013a14:	b3b0      	cbz	r0, 8013a84 <rmw_take_request+0xa4>
 8013a16:	6885      	ldr	r5, [r0, #8]
 8013a18:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8013a1c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8013a20:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013a24:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8013a28:	7423      	strb	r3, [r4, #16]
 8013a2a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8013a2e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8013a32:	74e2      	strb	r2, [r4, #19]
 8013a34:	f8a4 3011 	strh.w	r3, [r4, #17]
 8013a38:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8013a3c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8013a40:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8013a44:	61e1      	str	r1, [r4, #28]
 8013a46:	6162      	str	r2, [r4, #20]
 8013a48:	61a3      	str	r3, [r4, #24]
 8013a4a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013a4e:	689b      	ldr	r3, [r3, #8]
 8013a50:	4798      	blx	r3
 8013a52:	6844      	ldr	r4, [r0, #4]
 8013a54:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8013a58:	f105 0110 	add.w	r1, r5, #16
 8013a5c:	4668      	mov	r0, sp
 8013a5e:	f7f9 fb25 	bl	800d0ac <ucdr_init_buffer>
 8013a62:	68e3      	ldr	r3, [r4, #12]
 8013a64:	4641      	mov	r1, r8
 8013a66:	4668      	mov	r0, sp
 8013a68:	4798      	blx	r3
 8013a6a:	4639      	mov	r1, r7
 8013a6c:	4604      	mov	r4, r0
 8013a6e:	480a      	ldr	r0, [pc, #40]	@ (8013a98 <rmw_take_request+0xb8>)
 8013a70:	f7ff fafa 	bl	8013068 <put_memory>
 8013a74:	b106      	cbz	r6, 8013a78 <rmw_take_request+0x98>
 8013a76:	7034      	strb	r4, [r6, #0]
 8013a78:	f084 0001 	eor.w	r0, r4, #1
 8013a7c:	b2c0      	uxtb	r0, r0
 8013a7e:	b009      	add	sp, #36	@ 0x24
 8013a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a84:	2001      	movs	r0, #1
 8013a86:	b009      	add	sp, #36	@ 0x24
 8013a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a8c:	200c      	movs	r0, #12
 8013a8e:	b009      	add	sp, #36	@ 0x24
 8013a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a94:	08018478 	.word	0x08018478
 8013a98:	20015e74 	.word	0x20015e74

08013a9c <rmw_send_response>:
 8013a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a9e:	4605      	mov	r5, r0
 8013aa0:	6800      	ldr	r0, [r0, #0]
 8013aa2:	b091      	sub	sp, #68	@ 0x44
 8013aa4:	460c      	mov	r4, r1
 8013aa6:	4616      	mov	r6, r2
 8013aa8:	b128      	cbz	r0, 8013ab6 <rmw_send_response+0x1a>
 8013aaa:	4b29      	ldr	r3, [pc, #164]	@ (8013b50 <rmw_send_response+0xb4>)
 8013aac:	6819      	ldr	r1, [r3, #0]
 8013aae:	f7ec fb8f 	bl	80001d0 <strcmp>
 8013ab2:	2800      	cmp	r0, #0
 8013ab4:	d141      	bne.n	8013b3a <rmw_send_response+0x9e>
 8013ab6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8013aba:	9306      	str	r3, [sp, #24]
 8013abc:	4623      	mov	r3, r4
 8013abe:	9207      	str	r2, [sp, #28]
 8013ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ac4:	686d      	ldr	r5, [r5, #4]
 8013ac6:	789b      	ldrb	r3, [r3, #2]
 8013ac8:	68a1      	ldr	r1, [r4, #8]
 8013aca:	f88d 2017 	strb.w	r2, [sp, #23]
 8013ace:	f88d 3016 	strb.w	r3, [sp, #22]
 8013ad2:	68e2      	ldr	r2, [r4, #12]
 8013ad4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8013ad8:	6860      	ldr	r0, [r4, #4]
 8013ada:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013ade:	ab02      	add	r3, sp, #8
 8013ae0:	c307      	stmia	r3!, {r0, r1, r2}
 8013ae2:	696b      	ldr	r3, [r5, #20]
 8013ae4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	4798      	blx	r3
 8013aea:	6844      	ldr	r4, [r0, #4]
 8013aec:	4630      	mov	r0, r6
 8013aee:	6923      	ldr	r3, [r4, #16]
 8013af0:	4798      	blx	r3
 8013af2:	f100 0318 	add.w	r3, r0, #24
 8013af6:	6938      	ldr	r0, [r7, #16]
 8013af8:	9300      	str	r3, [sp, #0]
 8013afa:	692a      	ldr	r2, [r5, #16]
 8013afc:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8013afe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b02:	ab08      	add	r3, sp, #32
 8013b04:	f7fa ff98 	bl	800ea38 <uxr_prepare_output_stream>
 8013b08:	b910      	cbnz	r0, 8013b10 <rmw_send_response+0x74>
 8013b0a:	2001      	movs	r0, #1
 8013b0c:	b011      	add	sp, #68	@ 0x44
 8013b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b10:	a902      	add	r1, sp, #8
 8013b12:	a808      	add	r0, sp, #32
 8013b14:	f7fb ffdc 	bl	800fad0 <uxr_serialize_SampleIdentity>
 8013b18:	68a3      	ldr	r3, [r4, #8]
 8013b1a:	a908      	add	r1, sp, #32
 8013b1c:	4630      	mov	r0, r6
 8013b1e:	4798      	blx	r3
 8013b20:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8013b24:	6938      	ldr	r0, [r7, #16]
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	d00a      	beq.n	8013b40 <rmw_send_response+0xa4>
 8013b2a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8013b2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b30:	f7fa f996 	bl	800de60 <uxr_run_session_until_confirm_delivery>
 8013b34:	2000      	movs	r0, #0
 8013b36:	b011      	add	sp, #68	@ 0x44
 8013b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b3a:	200c      	movs	r0, #12
 8013b3c:	b011      	add	sp, #68	@ 0x44
 8013b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b44:	f7f9 fdcc 	bl	800d6e0 <uxr_flash_output_streams>
 8013b48:	2000      	movs	r0, #0
 8013b4a:	b011      	add	sp, #68	@ 0x44
 8013b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b4e:	bf00      	nop
 8013b50:	08018478 	.word	0x08018478

08013b54 <rmw_take_response>:
 8013b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b58:	4604      	mov	r4, r0
 8013b5a:	6800      	ldr	r0, [r0, #0]
 8013b5c:	b088      	sub	sp, #32
 8013b5e:	4688      	mov	r8, r1
 8013b60:	4617      	mov	r7, r2
 8013b62:	461d      	mov	r5, r3
 8013b64:	b120      	cbz	r0, 8013b70 <rmw_take_response+0x1c>
 8013b66:	4b1e      	ldr	r3, [pc, #120]	@ (8013be0 <rmw_take_response+0x8c>)
 8013b68:	6819      	ldr	r1, [r3, #0]
 8013b6a:	f7ec fb31 	bl	80001d0 <strcmp>
 8013b6e:	bb78      	cbnz	r0, 8013bd0 <rmw_take_response+0x7c>
 8013b70:	b10d      	cbz	r5, 8013b76 <rmw_take_response+0x22>
 8013b72:	2300      	movs	r3, #0
 8013b74:	702b      	strb	r3, [r5, #0]
 8013b76:	6864      	ldr	r4, [r4, #4]
 8013b78:	f7f8 f94e 	bl	800be18 <rmw_uxrce_clean_expired_static_input_buffer>
 8013b7c:	4620      	mov	r0, r4
 8013b7e:	f7f8 f923 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013b82:	4606      	mov	r6, r0
 8013b84:	b340      	cbz	r0, 8013bd8 <rmw_take_response+0x84>
 8013b86:	6963      	ldr	r3, [r4, #20]
 8013b88:	6884      	ldr	r4, [r0, #8]
 8013b8a:	68db      	ldr	r3, [r3, #12]
 8013b8c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8013b90:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8013b94:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8013b98:	4798      	blx	r3
 8013b9a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013b9e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8013ba2:	f104 0110 	add.w	r1, r4, #16
 8013ba6:	4668      	mov	r0, sp
 8013ba8:	f7f9 fa80 	bl	800d0ac <ucdr_init_buffer>
 8013bac:	4639      	mov	r1, r7
 8013bae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013bb2:	4668      	mov	r0, sp
 8013bb4:	4798      	blx	r3
 8013bb6:	4631      	mov	r1, r6
 8013bb8:	4604      	mov	r4, r0
 8013bba:	480a      	ldr	r0, [pc, #40]	@ (8013be4 <rmw_take_response+0x90>)
 8013bbc:	f7ff fa54 	bl	8013068 <put_memory>
 8013bc0:	b105      	cbz	r5, 8013bc4 <rmw_take_response+0x70>
 8013bc2:	702c      	strb	r4, [r5, #0]
 8013bc4:	f084 0001 	eor.w	r0, r4, #1
 8013bc8:	b2c0      	uxtb	r0, r0
 8013bca:	b008      	add	sp, #32
 8013bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd0:	200c      	movs	r0, #12
 8013bd2:	b008      	add	sp, #32
 8013bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd8:	2001      	movs	r0, #1
 8013bda:	b008      	add	sp, #32
 8013bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013be0:	08018478 	.word	0x08018478
 8013be4:	20015e74 	.word	0x20015e74

08013be8 <rmw_destroy_service>:
 8013be8:	b570      	push	{r4, r5, r6, lr}
 8013bea:	b128      	cbz	r0, 8013bf8 <rmw_destroy_service+0x10>
 8013bec:	4604      	mov	r4, r0
 8013bee:	6800      	ldr	r0, [r0, #0]
 8013bf0:	460d      	mov	r5, r1
 8013bf2:	f7f8 fa0f 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 8013bf6:	b910      	cbnz	r0, 8013bfe <rmw_destroy_service+0x16>
 8013bf8:	2401      	movs	r4, #1
 8013bfa:	4620      	mov	r0, r4
 8013bfc:	bd70      	pop	{r4, r5, r6, pc}
 8013bfe:	6863      	ldr	r3, [r4, #4]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d0f9      	beq.n	8013bf8 <rmw_destroy_service+0x10>
 8013c04:	2d00      	cmp	r5, #0
 8013c06:	d0f7      	beq.n	8013bf8 <rmw_destroy_service+0x10>
 8013c08:	6828      	ldr	r0, [r5, #0]
 8013c0a:	f7f8 fa03 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 8013c0e:	2800      	cmp	r0, #0
 8013c10:	d0f2      	beq.n	8013bf8 <rmw_destroy_service+0x10>
 8013c12:	686e      	ldr	r6, [r5, #4]
 8013c14:	2e00      	cmp	r6, #0
 8013c16:	d0ef      	beq.n	8013bf8 <rmw_destroy_service+0x10>
 8013c18:	6864      	ldr	r4, [r4, #4]
 8013c1a:	6932      	ldr	r2, [r6, #16]
 8013c1c:	6920      	ldr	r0, [r4, #16]
 8013c1e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013c22:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013c26:	6819      	ldr	r1, [r3, #0]
 8013c28:	f001 fa6c 	bl	8015104 <uxr_buffer_cancel_data>
 8013c2c:	4602      	mov	r2, r0
 8013c2e:	6920      	ldr	r0, [r4, #16]
 8013c30:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013c34:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013c38:	f7f8 f96c 	bl	800bf14 <run_xrce_session>
 8013c3c:	6920      	ldr	r0, [r4, #16]
 8013c3e:	6932      	ldr	r2, [r6, #16]
 8013c40:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013c44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013c48:	6819      	ldr	r1, [r3, #0]
 8013c4a:	f7f9 fa9f 	bl	800d18c <uxr_buffer_delete_entity>
 8013c4e:	4602      	mov	r2, r0
 8013c50:	6920      	ldr	r0, [r4, #16]
 8013c52:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013c56:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013c5a:	f7f8 f95b 	bl	800bf14 <run_xrce_session>
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	4628      	mov	r0, r5
 8013c62:	bf14      	ite	ne
 8013c64:	2400      	movne	r4, #0
 8013c66:	2402      	moveq	r4, #2
 8013c68:	f7f8 f826 	bl	800bcb8 <rmw_uxrce_fini_service_memory>
 8013c6c:	e7c5      	b.n	8013bfa <rmw_destroy_service+0x12>
 8013c6e:	bf00      	nop

08013c70 <rmw_destroy_subscription>:
 8013c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c72:	b128      	cbz	r0, 8013c80 <rmw_destroy_subscription+0x10>
 8013c74:	4604      	mov	r4, r0
 8013c76:	6800      	ldr	r0, [r0, #0]
 8013c78:	460d      	mov	r5, r1
 8013c7a:	f7f8 f9cb 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 8013c7e:	b910      	cbnz	r0, 8013c86 <rmw_destroy_subscription+0x16>
 8013c80:	2401      	movs	r4, #1
 8013c82:	4620      	mov	r0, r4
 8013c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c86:	6863      	ldr	r3, [r4, #4]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d0f9      	beq.n	8013c80 <rmw_destroy_subscription+0x10>
 8013c8c:	2d00      	cmp	r5, #0
 8013c8e:	d0f7      	beq.n	8013c80 <rmw_destroy_subscription+0x10>
 8013c90:	6828      	ldr	r0, [r5, #0]
 8013c92:	f7f8 f9bf 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 8013c96:	2800      	cmp	r0, #0
 8013c98:	d0f2      	beq.n	8013c80 <rmw_destroy_subscription+0x10>
 8013c9a:	686c      	ldr	r4, [r5, #4]
 8013c9c:	2c00      	cmp	r4, #0
 8013c9e:	d0ef      	beq.n	8013c80 <rmw_destroy_subscription+0x10>
 8013ca0:	6a26      	ldr	r6, [r4, #32]
 8013ca2:	6962      	ldr	r2, [r4, #20]
 8013ca4:	6930      	ldr	r0, [r6, #16]
 8013ca6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013caa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013cae:	6819      	ldr	r1, [r3, #0]
 8013cb0:	f001 fa28 	bl	8015104 <uxr_buffer_cancel_data>
 8013cb4:	4602      	mov	r2, r0
 8013cb6:	6930      	ldr	r0, [r6, #16]
 8013cb8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013cbc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013cc0:	f7f8 f928 	bl	800bf14 <run_xrce_session>
 8013cc4:	69e0      	ldr	r0, [r4, #28]
 8013cc6:	f7ff fd07 	bl	80136d8 <destroy_topic>
 8013cca:	6a23      	ldr	r3, [r4, #32]
 8013ccc:	6962      	ldr	r2, [r4, #20]
 8013cce:	6918      	ldr	r0, [r3, #16]
 8013cd0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013cd4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013cd8:	6819      	ldr	r1, [r3, #0]
 8013cda:	f7f9 fa57 	bl	800d18c <uxr_buffer_delete_entity>
 8013cde:	6a23      	ldr	r3, [r4, #32]
 8013ce0:	6922      	ldr	r2, [r4, #16]
 8013ce2:	691b      	ldr	r3, [r3, #16]
 8013ce4:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8013ce8:	4604      	mov	r4, r0
 8013cea:	6809      	ldr	r1, [r1, #0]
 8013cec:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013cf0:	f7f9 fa4c 	bl	800d18c <uxr_buffer_delete_entity>
 8013cf4:	6937      	ldr	r7, [r6, #16]
 8013cf6:	4622      	mov	r2, r4
 8013cf8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8013cfc:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8013d00:	4604      	mov	r4, r0
 8013d02:	4638      	mov	r0, r7
 8013d04:	f7f8 f906 	bl	800bf14 <run_xrce_session>
 8013d08:	6936      	ldr	r6, [r6, #16]
 8013d0a:	4622      	mov	r2, r4
 8013d0c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8013d10:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8013d14:	4604      	mov	r4, r0
 8013d16:	4630      	mov	r0, r6
 8013d18:	f7f8 f8fc 	bl	800bf14 <run_xrce_session>
 8013d1c:	b12c      	cbz	r4, 8013d2a <rmw_destroy_subscription+0xba>
 8013d1e:	b120      	cbz	r0, 8013d2a <rmw_destroy_subscription+0xba>
 8013d20:	2400      	movs	r4, #0
 8013d22:	4628      	mov	r0, r5
 8013d24:	f7f7 ffb2 	bl	800bc8c <rmw_uxrce_fini_subscription_memory>
 8013d28:	e7ab      	b.n	8013c82 <rmw_destroy_subscription+0x12>
 8013d2a:	2402      	movs	r4, #2
 8013d2c:	e7f9      	b.n	8013d22 <rmw_destroy_subscription+0xb2>
 8013d2e:	bf00      	nop

08013d30 <rmw_take_with_info>:
 8013d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d32:	4604      	mov	r4, r0
 8013d34:	6800      	ldr	r0, [r0, #0]
 8013d36:	b089      	sub	sp, #36	@ 0x24
 8013d38:	460f      	mov	r7, r1
 8013d3a:	4615      	mov	r5, r2
 8013d3c:	b128      	cbz	r0, 8013d4a <rmw_take_with_info+0x1a>
 8013d3e:	4b24      	ldr	r3, [pc, #144]	@ (8013dd0 <rmw_take_with_info+0xa0>)
 8013d40:	6819      	ldr	r1, [r3, #0]
 8013d42:	f7ec fa45 	bl	80001d0 <strcmp>
 8013d46:	2800      	cmp	r0, #0
 8013d48:	d13e      	bne.n	8013dc8 <rmw_take_with_info+0x98>
 8013d4a:	b305      	cbz	r5, 8013d8e <rmw_take_with_info+0x5e>
 8013d4c:	6864      	ldr	r4, [r4, #4]
 8013d4e:	2300      	movs	r3, #0
 8013d50:	702b      	strb	r3, [r5, #0]
 8013d52:	f7f8 f861 	bl	800be18 <rmw_uxrce_clean_expired_static_input_buffer>
 8013d56:	4620      	mov	r0, r4
 8013d58:	f7f8 f836 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013d5c:	4606      	mov	r6, r0
 8013d5e:	b1f0      	cbz	r0, 8013d9e <rmw_take_with_info+0x6e>
 8013d60:	6881      	ldr	r1, [r0, #8]
 8013d62:	4668      	mov	r0, sp
 8013d64:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013d68:	3110      	adds	r1, #16
 8013d6a:	f7f9 f99f 	bl	800d0ac <ucdr_init_buffer>
 8013d6e:	69a3      	ldr	r3, [r4, #24]
 8013d70:	4639      	mov	r1, r7
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	4668      	mov	r0, sp
 8013d76:	4798      	blx	r3
 8013d78:	4631      	mov	r1, r6
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	4815      	ldr	r0, [pc, #84]	@ (8013dd4 <rmw_take_with_info+0xa4>)
 8013d7e:	f7ff f973 	bl	8013068 <put_memory>
 8013d82:	702c      	strb	r4, [r5, #0]
 8013d84:	f084 0001 	eor.w	r0, r4, #1
 8013d88:	b2c0      	uxtb	r0, r0
 8013d8a:	b009      	add	sp, #36	@ 0x24
 8013d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d8e:	6864      	ldr	r4, [r4, #4]
 8013d90:	f7f8 f842 	bl	800be18 <rmw_uxrce_clean_expired_static_input_buffer>
 8013d94:	4620      	mov	r0, r4
 8013d96:	f7f8 f817 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013d9a:	4605      	mov	r5, r0
 8013d9c:	b910      	cbnz	r0, 8013da4 <rmw_take_with_info+0x74>
 8013d9e:	2001      	movs	r0, #1
 8013da0:	b009      	add	sp, #36	@ 0x24
 8013da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013da4:	68a9      	ldr	r1, [r5, #8]
 8013da6:	4668      	mov	r0, sp
 8013da8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013dac:	3110      	adds	r1, #16
 8013dae:	f7f9 f97d 	bl	800d0ac <ucdr_init_buffer>
 8013db2:	69a3      	ldr	r3, [r4, #24]
 8013db4:	4639      	mov	r1, r7
 8013db6:	68db      	ldr	r3, [r3, #12]
 8013db8:	4668      	mov	r0, sp
 8013dba:	4798      	blx	r3
 8013dbc:	4629      	mov	r1, r5
 8013dbe:	4604      	mov	r4, r0
 8013dc0:	4804      	ldr	r0, [pc, #16]	@ (8013dd4 <rmw_take_with_info+0xa4>)
 8013dc2:	f7ff f951 	bl	8013068 <put_memory>
 8013dc6:	e7dd      	b.n	8013d84 <rmw_take_with_info+0x54>
 8013dc8:	200c      	movs	r0, #12
 8013dca:	b009      	add	sp, #36	@ 0x24
 8013dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dce:	bf00      	nop
 8013dd0:	08018478 	.word	0x08018478
 8013dd4:	20015e74 	.word	0x20015e74

08013dd8 <rmw_uxrce_transport_init>:
 8013dd8:	b508      	push	{r3, lr}
 8013dda:	b108      	cbz	r0, 8013de0 <rmw_uxrce_transport_init+0x8>
 8013ddc:	f100 0210 	add.w	r2, r0, #16
 8013de0:	b139      	cbz	r1, 8013df2 <rmw_uxrce_transport_init+0x1a>
 8013de2:	6949      	ldr	r1, [r1, #20]
 8013de4:	4610      	mov	r0, r2
 8013de6:	f000 fc0d 	bl	8014604 <uxr_init_custom_transport>
 8013dea:	f080 0001 	eor.w	r0, r0, #1
 8013dee:	b2c0      	uxtb	r0, r0
 8013df0:	bd08      	pop	{r3, pc}
 8013df2:	4b04      	ldr	r3, [pc, #16]	@ (8013e04 <rmw_uxrce_transport_init+0x2c>)
 8013df4:	4610      	mov	r0, r2
 8013df6:	6859      	ldr	r1, [r3, #4]
 8013df8:	f000 fc04 	bl	8014604 <uxr_init_custom_transport>
 8013dfc:	f080 0001 	eor.w	r0, r0, #1
 8013e00:	b2c0      	uxtb	r0, r0
 8013e02:	bd08      	pop	{r3, pc}
 8013e04:	2001154c 	.word	0x2001154c

08013e08 <rmw_wait>:
 8013e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e0c:	b089      	sub	sp, #36	@ 0x24
 8013e0e:	4605      	mov	r5, r0
 8013e10:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8013e12:	460e      	mov	r6, r1
 8013e14:	4698      	mov	r8, r3
 8013e16:	4691      	mov	r9, r2
 8013e18:	2a00      	cmp	r2, #0
 8013e1a:	f000 810a 	beq.w	8014032 <rmw_wait+0x22a>
 8013e1e:	b16c      	cbz	r4, 8013e3c <rmw_wait+0x34>
 8013e20:	4bae      	ldr	r3, [pc, #696]	@ (80140dc <rmw_wait+0x2d4>)
 8013e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013e24:	af04      	add	r7, sp, #16
 8013e26:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013e2a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013e2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013e32:	f7fe ff3d 	bl	8012cb0 <rmw_time_equal>
 8013e36:	2800      	cmp	r0, #0
 8013e38:	f000 8127 	beq.w	801408a <rmw_wait+0x282>
 8013e3c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013e40:	f7f7 ffea 	bl	800be18 <rmw_uxrce_clean_expired_static_input_buffer>
 8013e44:	4ba6      	ldr	r3, [pc, #664]	@ (80140e0 <rmw_wait+0x2d8>)
 8013e46:	681c      	ldr	r4, [r3, #0]
 8013e48:	b14c      	cbz	r4, 8013e5e <rmw_wait+0x56>
 8013e4a:	4623      	mov	r3, r4
 8013e4c:	2100      	movs	r1, #0
 8013e4e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8013e52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013e56:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d1f7      	bne.n	8013e4e <rmw_wait+0x46>
 8013e5e:	f1b9 0f00 	cmp.w	r9, #0
 8013e62:	d011      	beq.n	8013e88 <rmw_wait+0x80>
 8013e64:	f8d9 1000 	ldr.w	r1, [r9]
 8013e68:	b171      	cbz	r1, 8013e88 <rmw_wait+0x80>
 8013e6a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013e6e:	2300      	movs	r3, #0
 8013e70:	2001      	movs	r0, #1
 8013e72:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013e76:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013e78:	6912      	ldr	r2, [r2, #16]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013e80:	4299      	cmp	r1, r3
 8013e82:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013e86:	d1f4      	bne.n	8013e72 <rmw_wait+0x6a>
 8013e88:	f1b8 0f00 	cmp.w	r8, #0
 8013e8c:	d011      	beq.n	8013eb2 <rmw_wait+0xaa>
 8013e8e:	f8d8 1000 	ldr.w	r1, [r8]
 8013e92:	b171      	cbz	r1, 8013eb2 <rmw_wait+0xaa>
 8013e94:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8013e98:	2300      	movs	r3, #0
 8013e9a:	2001      	movs	r0, #1
 8013e9c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013ea0:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013ea2:	6912      	ldr	r2, [r2, #16]
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013eaa:	4299      	cmp	r1, r3
 8013eac:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013eb0:	d1f4      	bne.n	8013e9c <rmw_wait+0x94>
 8013eb2:	b185      	cbz	r5, 8013ed6 <rmw_wait+0xce>
 8013eb4:	6829      	ldr	r1, [r5, #0]
 8013eb6:	b171      	cbz	r1, 8013ed6 <rmw_wait+0xce>
 8013eb8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	2001      	movs	r0, #1
 8013ec0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013ec4:	6a12      	ldr	r2, [r2, #32]
 8013ec6:	6912      	ldr	r2, [r2, #16]
 8013ec8:	3301      	adds	r3, #1
 8013eca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013ece:	4299      	cmp	r1, r3
 8013ed0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013ed4:	d1f4      	bne.n	8013ec0 <rmw_wait+0xb8>
 8013ed6:	b34c      	cbz	r4, 8013f2c <rmw_wait+0x124>
 8013ed8:	4622      	mov	r2, r4
 8013eda:	2300      	movs	r3, #0
 8013edc:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8013ee0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8013ee4:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8013ee8:	440b      	add	r3, r1
 8013eea:	b2db      	uxtb	r3, r3
 8013eec:	2a00      	cmp	r2, #0
 8013eee:	d1f5      	bne.n	8013edc <rmw_wait+0xd4>
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	f000 8084 	beq.w	8013ffe <rmw_wait+0x1f6>
 8013ef6:	1c7a      	adds	r2, r7, #1
 8013ef8:	d00d      	beq.n	8013f16 <rmw_wait+0x10e>
 8013efa:	ee07 7a90 	vmov	s15, r7
 8013efe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013f02:	ee07 3a90 	vmov	s15, r3
 8013f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f0e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013f12:	ee17 7a90 	vmov	r7, s15
 8013f16:	68a0      	ldr	r0, [r4, #8]
 8013f18:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8013f1c:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	f040 8090 	bne.w	8014046 <rmw_wait+0x23e>
 8013f26:	6864      	ldr	r4, [r4, #4]
 8013f28:	2c00      	cmp	r4, #0
 8013f2a:	d1f4      	bne.n	8013f16 <rmw_wait+0x10e>
 8013f2c:	f1b9 0f00 	cmp.w	r9, #0
 8013f30:	f000 80bc 	beq.w	80140ac <rmw_wait+0x2a4>
 8013f34:	f8d9 7000 	ldr.w	r7, [r9]
 8013f38:	2f00      	cmp	r7, #0
 8013f3a:	f000 808e 	beq.w	801405a <rmw_wait+0x252>
 8013f3e:	2400      	movs	r4, #0
 8013f40:	4627      	mov	r7, r4
 8013f42:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013f46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013f4a:	f7f7 ff3d 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013f4e:	2800      	cmp	r0, #0
 8013f50:	d05f      	beq.n	8014012 <rmw_wait+0x20a>
 8013f52:	f8d9 3000 	ldr.w	r3, [r9]
 8013f56:	3401      	adds	r4, #1
 8013f58:	42a3      	cmp	r3, r4
 8013f5a:	f04f 0701 	mov.w	r7, #1
 8013f5e:	d8f0      	bhi.n	8013f42 <rmw_wait+0x13a>
 8013f60:	f1b8 0f00 	cmp.w	r8, #0
 8013f64:	d012      	beq.n	8013f8c <rmw_wait+0x184>
 8013f66:	f8d8 3000 	ldr.w	r3, [r8]
 8013f6a:	b17b      	cbz	r3, 8013f8c <rmw_wait+0x184>
 8013f6c:	2400      	movs	r4, #0
 8013f6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013f72:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013f76:	f7f7 ff27 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013f7a:	2800      	cmp	r0, #0
 8013f7c:	d051      	beq.n	8014022 <rmw_wait+0x21a>
 8013f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8013f82:	3401      	adds	r4, #1
 8013f84:	42a3      	cmp	r3, r4
 8013f86:	f04f 0701 	mov.w	r7, #1
 8013f8a:	d8f0      	bhi.n	8013f6e <rmw_wait+0x166>
 8013f8c:	b1dd      	cbz	r5, 8013fc6 <rmw_wait+0x1be>
 8013f8e:	682b      	ldr	r3, [r5, #0]
 8013f90:	b1cb      	cbz	r3, 8013fc6 <rmw_wait+0x1be>
 8013f92:	2400      	movs	r4, #0
 8013f94:	686b      	ldr	r3, [r5, #4]
 8013f96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013f9a:	f7f7 ff15 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013f9e:	b158      	cbz	r0, 8013fb8 <rmw_wait+0x1b0>
 8013fa0:	682b      	ldr	r3, [r5, #0]
 8013fa2:	3401      	adds	r4, #1
 8013fa4:	42a3      	cmp	r3, r4
 8013fa6:	d969      	bls.n	801407c <rmw_wait+0x274>
 8013fa8:	686b      	ldr	r3, [r5, #4]
 8013faa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013fae:	2701      	movs	r7, #1
 8013fb0:	f7f7 ff0a 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	d1f3      	bne.n	8013fa0 <rmw_wait+0x198>
 8013fb8:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013fbc:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013fc0:	3401      	adds	r4, #1
 8013fc2:	42a3      	cmp	r3, r4
 8013fc4:	d8e6      	bhi.n	8013f94 <rmw_wait+0x18c>
 8013fc6:	b1a6      	cbz	r6, 8013ff2 <rmw_wait+0x1ea>
 8013fc8:	6834      	ldr	r4, [r6, #0]
 8013fca:	b194      	cbz	r4, 8013ff2 <rmw_wait+0x1ea>
 8013fcc:	2300      	movs	r3, #0
 8013fce:	461d      	mov	r5, r3
 8013fd0:	e004      	b.n	8013fdc <rmw_wait+0x1d4>
 8013fd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013fd6:	3301      	adds	r3, #1
 8013fd8:	42a3      	cmp	r3, r4
 8013fda:	d00a      	beq.n	8013ff2 <rmw_wait+0x1ea>
 8013fdc:	6870      	ldr	r0, [r6, #4]
 8013fde:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8013fe2:	7c0a      	ldrb	r2, [r1, #16]
 8013fe4:	2a00      	cmp	r2, #0
 8013fe6:	d0f4      	beq.n	8013fd2 <rmw_wait+0x1ca>
 8013fe8:	3301      	adds	r3, #1
 8013fea:	42a3      	cmp	r3, r4
 8013fec:	740d      	strb	r5, [r1, #16]
 8013fee:	4617      	mov	r7, r2
 8013ff0:	d1f4      	bne.n	8013fdc <rmw_wait+0x1d4>
 8013ff2:	2f00      	cmp	r7, #0
 8013ff4:	d03e      	beq.n	8014074 <rmw_wait+0x26c>
 8013ff6:	2000      	movs	r0, #0
 8013ff8:	b009      	add	sp, #36	@ 0x24
 8013ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ffe:	68a0      	ldr	r0, [r4, #8]
 8014000:	2100      	movs	r1, #0
 8014002:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014006:	f7f9 fef1 	bl	800ddec <uxr_run_session_timeout>
 801400a:	6864      	ldr	r4, [r4, #4]
 801400c:	2c00      	cmp	r4, #0
 801400e:	d1f6      	bne.n	8013ffe <rmw_wait+0x1f6>
 8014010:	e78c      	b.n	8013f2c <rmw_wait+0x124>
 8014012:	e9d9 3200 	ldrd	r3, r2, [r9]
 8014016:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801401a:	3401      	adds	r4, #1
 801401c:	42a3      	cmp	r3, r4
 801401e:	d890      	bhi.n	8013f42 <rmw_wait+0x13a>
 8014020:	e79e      	b.n	8013f60 <rmw_wait+0x158>
 8014022:	e9d8 3200 	ldrd	r3, r2, [r8]
 8014026:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801402a:	3401      	adds	r4, #1
 801402c:	429c      	cmp	r4, r3
 801402e:	d39e      	bcc.n	8013f6e <rmw_wait+0x166>
 8014030:	e7ac      	b.n	8013f8c <rmw_wait+0x184>
 8014032:	2b00      	cmp	r3, #0
 8014034:	f47f aef3 	bne.w	8013e1e <rmw_wait+0x16>
 8014038:	2800      	cmp	r0, #0
 801403a:	f47f aef0 	bne.w	8013e1e <rmw_wait+0x16>
 801403e:	2900      	cmp	r1, #0
 8014040:	f47f aeed 	bne.w	8013e1e <rmw_wait+0x16>
 8014044:	e7d7      	b.n	8013ff6 <rmw_wait+0x1ee>
 8014046:	4639      	mov	r1, r7
 8014048:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801404c:	f7f9 fee8 	bl	800de20 <uxr_run_session_until_data>
 8014050:	6864      	ldr	r4, [r4, #4]
 8014052:	2c00      	cmp	r4, #0
 8014054:	f47f af5f 	bne.w	8013f16 <rmw_wait+0x10e>
 8014058:	e768      	b.n	8013f2c <rmw_wait+0x124>
 801405a:	f1b8 0f00 	cmp.w	r8, #0
 801405e:	d032      	beq.n	80140c6 <rmw_wait+0x2be>
 8014060:	f8d8 3000 	ldr.w	r3, [r8]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d181      	bne.n	8013f6c <rmw_wait+0x164>
 8014068:	461f      	mov	r7, r3
 801406a:	2d00      	cmp	r5, #0
 801406c:	d18f      	bne.n	8013f8e <rmw_wait+0x186>
 801406e:	462f      	mov	r7, r5
 8014070:	2e00      	cmp	r6, #0
 8014072:	d1a9      	bne.n	8013fc8 <rmw_wait+0x1c0>
 8014074:	2002      	movs	r0, #2
 8014076:	b009      	add	sp, #36	@ 0x24
 8014078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801407c:	2e00      	cmp	r6, #0
 801407e:	d0ba      	beq.n	8013ff6 <rmw_wait+0x1ee>
 8014080:	6834      	ldr	r4, [r6, #0]
 8014082:	2701      	movs	r7, #1
 8014084:	2c00      	cmp	r4, #0
 8014086:	d1a1      	bne.n	8013fcc <rmw_wait+0x1c4>
 8014088:	e7b5      	b.n	8013ff6 <rmw_wait+0x1ee>
 801408a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801408e:	f7fe fe63 	bl	8012d58 <rmw_time_total_nsec>
 8014092:	2300      	movs	r3, #0
 8014094:	4a13      	ldr	r2, [pc, #76]	@ (80140e4 <rmw_wait+0x2dc>)
 8014096:	f7ec f953 	bl	8000340 <__aeabi_uldivmod>
 801409a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801409e:	f171 0300 	sbcs.w	r3, r1, #0
 80140a2:	4607      	mov	r7, r0
 80140a4:	bfa8      	it	ge
 80140a6:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80140aa:	e6c9      	b.n	8013e40 <rmw_wait+0x38>
 80140ac:	f1b8 0f00 	cmp.w	r8, #0
 80140b0:	d009      	beq.n	80140c6 <rmw_wait+0x2be>
 80140b2:	f8d8 3000 	ldr.w	r3, [r8]
 80140b6:	464f      	mov	r7, r9
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	f47f af57 	bne.w	8013f6c <rmw_wait+0x164>
 80140be:	2d00      	cmp	r5, #0
 80140c0:	f47f af65 	bne.w	8013f8e <rmw_wait+0x186>
 80140c4:	e7d3      	b.n	801406e <rmw_wait+0x266>
 80140c6:	b17d      	cbz	r5, 80140e8 <rmw_wait+0x2e0>
 80140c8:	682b      	ldr	r3, [r5, #0]
 80140ca:	4647      	mov	r7, r8
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	f47f af60 	bne.w	8013f92 <rmw_wait+0x18a>
 80140d2:	2e00      	cmp	r6, #0
 80140d4:	f47f af78 	bne.w	8013fc8 <rmw_wait+0x1c0>
 80140d8:	e7cc      	b.n	8014074 <rmw_wait+0x26c>
 80140da:	bf00      	nop
 80140dc:	08017cd0 	.word	0x08017cd0
 80140e0:	20015e64 	.word	0x20015e64
 80140e4:	000f4240 	.word	0x000f4240
 80140e8:	2e00      	cmp	r6, #0
 80140ea:	d0c3      	beq.n	8014074 <rmw_wait+0x26c>
 80140ec:	6834      	ldr	r4, [r6, #0]
 80140ee:	462f      	mov	r7, r5
 80140f0:	2c00      	cmp	r4, #0
 80140f2:	f47f af6b 	bne.w	8013fcc <rmw_wait+0x1c4>
 80140f6:	e7bd      	b.n	8014074 <rmw_wait+0x26c>

080140f8 <rmw_create_wait_set>:
 80140f8:	b508      	push	{r3, lr}
 80140fa:	4803      	ldr	r0, [pc, #12]	@ (8014108 <rmw_create_wait_set+0x10>)
 80140fc:	f7fe ffa4 	bl	8013048 <get_memory>
 8014100:	b108      	cbz	r0, 8014106 <rmw_create_wait_set+0xe>
 8014102:	6880      	ldr	r0, [r0, #8]
 8014104:	3010      	adds	r0, #16
 8014106:	bd08      	pop	{r3, pc}
 8014108:	20015ea4 	.word	0x20015ea4

0801410c <rmw_destroy_wait_set>:
 801410c:	b508      	push	{r3, lr}
 801410e:	4b08      	ldr	r3, [pc, #32]	@ (8014130 <rmw_destroy_wait_set+0x24>)
 8014110:	6819      	ldr	r1, [r3, #0]
 8014112:	b911      	cbnz	r1, 801411a <rmw_destroy_wait_set+0xe>
 8014114:	e00a      	b.n	801412c <rmw_destroy_wait_set+0x20>
 8014116:	6849      	ldr	r1, [r1, #4]
 8014118:	b141      	cbz	r1, 801412c <rmw_destroy_wait_set+0x20>
 801411a:	688b      	ldr	r3, [r1, #8]
 801411c:	3310      	adds	r3, #16
 801411e:	4298      	cmp	r0, r3
 8014120:	d1f9      	bne.n	8014116 <rmw_destroy_wait_set+0xa>
 8014122:	4803      	ldr	r0, [pc, #12]	@ (8014130 <rmw_destroy_wait_set+0x24>)
 8014124:	f7fe ffa0 	bl	8013068 <put_memory>
 8014128:	2000      	movs	r0, #0
 801412a:	bd08      	pop	{r3, pc}
 801412c:	2001      	movs	r0, #1
 801412e:	bd08      	pop	{r3, pc}
 8014130:	20015ea4 	.word	0x20015ea4

08014134 <rmw_uros_epoch_nanos>:
 8014134:	4b05      	ldr	r3, [pc, #20]	@ (801414c <rmw_uros_epoch_nanos+0x18>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	b123      	cbz	r3, 8014144 <rmw_uros_epoch_nanos+0x10>
 801413a:	6898      	ldr	r0, [r3, #8]
 801413c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014140:	f7f9 bac4 	b.w	800d6cc <uxr_epoch_nanos>
 8014144:	2000      	movs	r0, #0
 8014146:	2100      	movs	r1, #0
 8014148:	4770      	bx	lr
 801414a:	bf00      	nop
 801414c:	20015e64 	.word	0x20015e64

08014150 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8014150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014154:	6805      	ldr	r5, [r0, #0]
 8014156:	4604      	mov	r4, r0
 8014158:	4628      	mov	r0, r5
 801415a:	460e      	mov	r6, r1
 801415c:	f7ec f838 	bl	80001d0 <strcmp>
 8014160:	b1c8      	cbz	r0, 8014196 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8014162:	4b11      	ldr	r3, [pc, #68]	@ (80141a8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	429d      	cmp	r5, r3
 8014168:	d112      	bne.n	8014190 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801416a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801416e:	f8d8 4000 	ldr.w	r4, [r8]
 8014172:	b16c      	cbz	r4, 8014190 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014174:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014178:	2700      	movs	r7, #0
 801417a:	3d04      	subs	r5, #4
 801417c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014180:	4631      	mov	r1, r6
 8014182:	f7ec f825 	bl	80001d0 <strcmp>
 8014186:	00bb      	lsls	r3, r7, #2
 8014188:	b140      	cbz	r0, 801419c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801418a:	3701      	adds	r7, #1
 801418c:	42bc      	cmp	r4, r7
 801418e:	d1f5      	bne.n	801417c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8014190:	2000      	movs	r0, #0
 8014192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014196:	4620      	mov	r0, r4
 8014198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801419c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80141a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141a4:	58d3      	ldr	r3, [r2, r3]
 80141a6:	4718      	bx	r3
 80141a8:	200000ac 	.word	0x200000ac

080141ac <std_msgs__msg__Int32__init>:
 80141ac:	3800      	subs	r0, #0
 80141ae:	bf18      	it	ne
 80141b0:	2001      	movne	r0, #1
 80141b2:	4770      	bx	lr

080141b4 <std_msgs__msg__Int32__fini>:
 80141b4:	4770      	bx	lr
 80141b6:	bf00      	nop

080141b8 <ucdr_serialize_endian_array_char>:
 80141b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141bc:	4619      	mov	r1, r3
 80141be:	461f      	mov	r7, r3
 80141c0:	4605      	mov	r5, r0
 80141c2:	4690      	mov	r8, r2
 80141c4:	f7f8 ff1e 	bl	800d004 <ucdr_check_buffer_available_for>
 80141c8:	b9e0      	cbnz	r0, 8014204 <ucdr_serialize_endian_array_char+0x4c>
 80141ca:	463e      	mov	r6, r7
 80141cc:	e009      	b.n	80141e2 <ucdr_serialize_endian_array_char+0x2a>
 80141ce:	68a8      	ldr	r0, [r5, #8]
 80141d0:	f002 fe79 	bl	8016ec6 <memcpy>
 80141d4:	68ab      	ldr	r3, [r5, #8]
 80141d6:	6928      	ldr	r0, [r5, #16]
 80141d8:	4423      	add	r3, r4
 80141da:	4420      	add	r0, r4
 80141dc:	1b36      	subs	r6, r6, r4
 80141de:	60ab      	str	r3, [r5, #8]
 80141e0:	6128      	str	r0, [r5, #16]
 80141e2:	4631      	mov	r1, r6
 80141e4:	2201      	movs	r2, #1
 80141e6:	4628      	mov	r0, r5
 80141e8:	f7f8 ff94 	bl	800d114 <ucdr_check_final_buffer_behavior_array>
 80141ec:	1bb9      	subs	r1, r7, r6
 80141ee:	4441      	add	r1, r8
 80141f0:	4604      	mov	r4, r0
 80141f2:	4602      	mov	r2, r0
 80141f4:	2800      	cmp	r0, #0
 80141f6:	d1ea      	bne.n	80141ce <ucdr_serialize_endian_array_char+0x16>
 80141f8:	2301      	movs	r3, #1
 80141fa:	7da8      	ldrb	r0, [r5, #22]
 80141fc:	756b      	strb	r3, [r5, #21]
 80141fe:	4058      	eors	r0, r3
 8014200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014204:	463a      	mov	r2, r7
 8014206:	68a8      	ldr	r0, [r5, #8]
 8014208:	4641      	mov	r1, r8
 801420a:	f002 fe5c 	bl	8016ec6 <memcpy>
 801420e:	68aa      	ldr	r2, [r5, #8]
 8014210:	692b      	ldr	r3, [r5, #16]
 8014212:	443a      	add	r2, r7
 8014214:	443b      	add	r3, r7
 8014216:	60aa      	str	r2, [r5, #8]
 8014218:	612b      	str	r3, [r5, #16]
 801421a:	e7ed      	b.n	80141f8 <ucdr_serialize_endian_array_char+0x40>

0801421c <ucdr_deserialize_endian_array_char>:
 801421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014220:	4619      	mov	r1, r3
 8014222:	461f      	mov	r7, r3
 8014224:	4605      	mov	r5, r0
 8014226:	4690      	mov	r8, r2
 8014228:	f7f8 feec 	bl	800d004 <ucdr_check_buffer_available_for>
 801422c:	b9e0      	cbnz	r0, 8014268 <ucdr_deserialize_endian_array_char+0x4c>
 801422e:	463e      	mov	r6, r7
 8014230:	e009      	b.n	8014246 <ucdr_deserialize_endian_array_char+0x2a>
 8014232:	68a9      	ldr	r1, [r5, #8]
 8014234:	f002 fe47 	bl	8016ec6 <memcpy>
 8014238:	68ab      	ldr	r3, [r5, #8]
 801423a:	6928      	ldr	r0, [r5, #16]
 801423c:	4423      	add	r3, r4
 801423e:	4420      	add	r0, r4
 8014240:	1b36      	subs	r6, r6, r4
 8014242:	60ab      	str	r3, [r5, #8]
 8014244:	6128      	str	r0, [r5, #16]
 8014246:	2201      	movs	r2, #1
 8014248:	4631      	mov	r1, r6
 801424a:	4628      	mov	r0, r5
 801424c:	f7f8 ff62 	bl	800d114 <ucdr_check_final_buffer_behavior_array>
 8014250:	4604      	mov	r4, r0
 8014252:	1bb8      	subs	r0, r7, r6
 8014254:	4440      	add	r0, r8
 8014256:	4622      	mov	r2, r4
 8014258:	2c00      	cmp	r4, #0
 801425a:	d1ea      	bne.n	8014232 <ucdr_deserialize_endian_array_char+0x16>
 801425c:	2301      	movs	r3, #1
 801425e:	7da8      	ldrb	r0, [r5, #22]
 8014260:	756b      	strb	r3, [r5, #21]
 8014262:	4058      	eors	r0, r3
 8014264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014268:	463a      	mov	r2, r7
 801426a:	68a9      	ldr	r1, [r5, #8]
 801426c:	4640      	mov	r0, r8
 801426e:	f002 fe2a 	bl	8016ec6 <memcpy>
 8014272:	68aa      	ldr	r2, [r5, #8]
 8014274:	692b      	ldr	r3, [r5, #16]
 8014276:	443a      	add	r2, r7
 8014278:	443b      	add	r3, r7
 801427a:	60aa      	str	r2, [r5, #8]
 801427c:	612b      	str	r3, [r5, #16]
 801427e:	e7ed      	b.n	801425c <ucdr_deserialize_endian_array_char+0x40>

08014280 <ucdr_serialize_array_uint8_t>:
 8014280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014284:	4688      	mov	r8, r1
 8014286:	4611      	mov	r1, r2
 8014288:	4617      	mov	r7, r2
 801428a:	4605      	mov	r5, r0
 801428c:	f7f8 feba 	bl	800d004 <ucdr_check_buffer_available_for>
 8014290:	b9e0      	cbnz	r0, 80142cc <ucdr_serialize_array_uint8_t+0x4c>
 8014292:	463e      	mov	r6, r7
 8014294:	e009      	b.n	80142aa <ucdr_serialize_array_uint8_t+0x2a>
 8014296:	68a8      	ldr	r0, [r5, #8]
 8014298:	f002 fe15 	bl	8016ec6 <memcpy>
 801429c:	68aa      	ldr	r2, [r5, #8]
 801429e:	692b      	ldr	r3, [r5, #16]
 80142a0:	4422      	add	r2, r4
 80142a2:	4423      	add	r3, r4
 80142a4:	1b36      	subs	r6, r6, r4
 80142a6:	60aa      	str	r2, [r5, #8]
 80142a8:	612b      	str	r3, [r5, #16]
 80142aa:	4631      	mov	r1, r6
 80142ac:	2201      	movs	r2, #1
 80142ae:	4628      	mov	r0, r5
 80142b0:	f7f8 ff30 	bl	800d114 <ucdr_check_final_buffer_behavior_array>
 80142b4:	1bb9      	subs	r1, r7, r6
 80142b6:	4441      	add	r1, r8
 80142b8:	4604      	mov	r4, r0
 80142ba:	4602      	mov	r2, r0
 80142bc:	2800      	cmp	r0, #0
 80142be:	d1ea      	bne.n	8014296 <ucdr_serialize_array_uint8_t+0x16>
 80142c0:	2301      	movs	r3, #1
 80142c2:	7da8      	ldrb	r0, [r5, #22]
 80142c4:	756b      	strb	r3, [r5, #21]
 80142c6:	4058      	eors	r0, r3
 80142c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142cc:	463a      	mov	r2, r7
 80142ce:	68a8      	ldr	r0, [r5, #8]
 80142d0:	4641      	mov	r1, r8
 80142d2:	f002 fdf8 	bl	8016ec6 <memcpy>
 80142d6:	68aa      	ldr	r2, [r5, #8]
 80142d8:	692b      	ldr	r3, [r5, #16]
 80142da:	443a      	add	r2, r7
 80142dc:	443b      	add	r3, r7
 80142de:	60aa      	str	r2, [r5, #8]
 80142e0:	612b      	str	r3, [r5, #16]
 80142e2:	e7ed      	b.n	80142c0 <ucdr_serialize_array_uint8_t+0x40>

080142e4 <ucdr_serialize_endian_array_uint8_t>:
 80142e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142e8:	4619      	mov	r1, r3
 80142ea:	461f      	mov	r7, r3
 80142ec:	4605      	mov	r5, r0
 80142ee:	4690      	mov	r8, r2
 80142f0:	f7f8 fe88 	bl	800d004 <ucdr_check_buffer_available_for>
 80142f4:	b9e0      	cbnz	r0, 8014330 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80142f6:	463e      	mov	r6, r7
 80142f8:	e009      	b.n	801430e <ucdr_serialize_endian_array_uint8_t+0x2a>
 80142fa:	68a8      	ldr	r0, [r5, #8]
 80142fc:	f002 fde3 	bl	8016ec6 <memcpy>
 8014300:	68ab      	ldr	r3, [r5, #8]
 8014302:	6928      	ldr	r0, [r5, #16]
 8014304:	4423      	add	r3, r4
 8014306:	4420      	add	r0, r4
 8014308:	1b36      	subs	r6, r6, r4
 801430a:	60ab      	str	r3, [r5, #8]
 801430c:	6128      	str	r0, [r5, #16]
 801430e:	4631      	mov	r1, r6
 8014310:	2201      	movs	r2, #1
 8014312:	4628      	mov	r0, r5
 8014314:	f7f8 fefe 	bl	800d114 <ucdr_check_final_buffer_behavior_array>
 8014318:	1bb9      	subs	r1, r7, r6
 801431a:	4441      	add	r1, r8
 801431c:	4604      	mov	r4, r0
 801431e:	4602      	mov	r2, r0
 8014320:	2800      	cmp	r0, #0
 8014322:	d1ea      	bne.n	80142fa <ucdr_serialize_endian_array_uint8_t+0x16>
 8014324:	2301      	movs	r3, #1
 8014326:	7da8      	ldrb	r0, [r5, #22]
 8014328:	756b      	strb	r3, [r5, #21]
 801432a:	4058      	eors	r0, r3
 801432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014330:	463a      	mov	r2, r7
 8014332:	68a8      	ldr	r0, [r5, #8]
 8014334:	4641      	mov	r1, r8
 8014336:	f002 fdc6 	bl	8016ec6 <memcpy>
 801433a:	68aa      	ldr	r2, [r5, #8]
 801433c:	692b      	ldr	r3, [r5, #16]
 801433e:	443a      	add	r2, r7
 8014340:	443b      	add	r3, r7
 8014342:	60aa      	str	r2, [r5, #8]
 8014344:	612b      	str	r3, [r5, #16]
 8014346:	e7ed      	b.n	8014324 <ucdr_serialize_endian_array_uint8_t+0x40>

08014348 <ucdr_deserialize_array_uint8_t>:
 8014348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801434c:	4688      	mov	r8, r1
 801434e:	4611      	mov	r1, r2
 8014350:	4617      	mov	r7, r2
 8014352:	4605      	mov	r5, r0
 8014354:	f7f8 fe56 	bl	800d004 <ucdr_check_buffer_available_for>
 8014358:	b9e0      	cbnz	r0, 8014394 <ucdr_deserialize_array_uint8_t+0x4c>
 801435a:	463e      	mov	r6, r7
 801435c:	e009      	b.n	8014372 <ucdr_deserialize_array_uint8_t+0x2a>
 801435e:	68a9      	ldr	r1, [r5, #8]
 8014360:	f002 fdb1 	bl	8016ec6 <memcpy>
 8014364:	68aa      	ldr	r2, [r5, #8]
 8014366:	692b      	ldr	r3, [r5, #16]
 8014368:	4422      	add	r2, r4
 801436a:	4423      	add	r3, r4
 801436c:	1b36      	subs	r6, r6, r4
 801436e:	60aa      	str	r2, [r5, #8]
 8014370:	612b      	str	r3, [r5, #16]
 8014372:	2201      	movs	r2, #1
 8014374:	4631      	mov	r1, r6
 8014376:	4628      	mov	r0, r5
 8014378:	f7f8 fecc 	bl	800d114 <ucdr_check_final_buffer_behavior_array>
 801437c:	4604      	mov	r4, r0
 801437e:	1bb8      	subs	r0, r7, r6
 8014380:	4440      	add	r0, r8
 8014382:	4622      	mov	r2, r4
 8014384:	2c00      	cmp	r4, #0
 8014386:	d1ea      	bne.n	801435e <ucdr_deserialize_array_uint8_t+0x16>
 8014388:	2301      	movs	r3, #1
 801438a:	7da8      	ldrb	r0, [r5, #22]
 801438c:	756b      	strb	r3, [r5, #21]
 801438e:	4058      	eors	r0, r3
 8014390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014394:	463a      	mov	r2, r7
 8014396:	68a9      	ldr	r1, [r5, #8]
 8014398:	4640      	mov	r0, r8
 801439a:	f002 fd94 	bl	8016ec6 <memcpy>
 801439e:	68aa      	ldr	r2, [r5, #8]
 80143a0:	692b      	ldr	r3, [r5, #16]
 80143a2:	443a      	add	r2, r7
 80143a4:	443b      	add	r3, r7
 80143a6:	60aa      	str	r2, [r5, #8]
 80143a8:	612b      	str	r3, [r5, #16]
 80143aa:	e7ed      	b.n	8014388 <ucdr_deserialize_array_uint8_t+0x40>

080143ac <ucdr_deserialize_endian_array_uint8_t>:
 80143ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143b0:	4619      	mov	r1, r3
 80143b2:	461f      	mov	r7, r3
 80143b4:	4605      	mov	r5, r0
 80143b6:	4690      	mov	r8, r2
 80143b8:	f7f8 fe24 	bl	800d004 <ucdr_check_buffer_available_for>
 80143bc:	b9e0      	cbnz	r0, 80143f8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80143be:	463e      	mov	r6, r7
 80143c0:	e009      	b.n	80143d6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80143c2:	68a9      	ldr	r1, [r5, #8]
 80143c4:	f002 fd7f 	bl	8016ec6 <memcpy>
 80143c8:	68ab      	ldr	r3, [r5, #8]
 80143ca:	6928      	ldr	r0, [r5, #16]
 80143cc:	4423      	add	r3, r4
 80143ce:	4420      	add	r0, r4
 80143d0:	1b36      	subs	r6, r6, r4
 80143d2:	60ab      	str	r3, [r5, #8]
 80143d4:	6128      	str	r0, [r5, #16]
 80143d6:	2201      	movs	r2, #1
 80143d8:	4631      	mov	r1, r6
 80143da:	4628      	mov	r0, r5
 80143dc:	f7f8 fe9a 	bl	800d114 <ucdr_check_final_buffer_behavior_array>
 80143e0:	4604      	mov	r4, r0
 80143e2:	1bb8      	subs	r0, r7, r6
 80143e4:	4440      	add	r0, r8
 80143e6:	4622      	mov	r2, r4
 80143e8:	2c00      	cmp	r4, #0
 80143ea:	d1ea      	bne.n	80143c2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80143ec:	2301      	movs	r3, #1
 80143ee:	7da8      	ldrb	r0, [r5, #22]
 80143f0:	756b      	strb	r3, [r5, #21]
 80143f2:	4058      	eors	r0, r3
 80143f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143f8:	463a      	mov	r2, r7
 80143fa:	68a9      	ldr	r1, [r5, #8]
 80143fc:	4640      	mov	r0, r8
 80143fe:	f002 fd62 	bl	8016ec6 <memcpy>
 8014402:	68aa      	ldr	r2, [r5, #8]
 8014404:	692b      	ldr	r3, [r5, #16]
 8014406:	443a      	add	r2, r7
 8014408:	443b      	add	r3, r7
 801440a:	60aa      	str	r2, [r5, #8]
 801440c:	612b      	str	r3, [r5, #16]
 801440e:	e7ed      	b.n	80143ec <ucdr_deserialize_endian_array_uint8_t+0x40>

08014410 <ucdr_serialize_sequence_char>:
 8014410:	b570      	push	{r4, r5, r6, lr}
 8014412:	4615      	mov	r5, r2
 8014414:	460e      	mov	r6, r1
 8014416:	7d01      	ldrb	r1, [r0, #20]
 8014418:	4604      	mov	r4, r0
 801441a:	f7f8 f949 	bl	800c6b0 <ucdr_serialize_endian_uint32_t>
 801441e:	b90d      	cbnz	r5, 8014424 <ucdr_serialize_sequence_char+0x14>
 8014420:	2001      	movs	r0, #1
 8014422:	bd70      	pop	{r4, r5, r6, pc}
 8014424:	7d21      	ldrb	r1, [r4, #20]
 8014426:	462b      	mov	r3, r5
 8014428:	4632      	mov	r2, r6
 801442a:	4620      	mov	r0, r4
 801442c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014430:	f7ff bec2 	b.w	80141b8 <ucdr_serialize_endian_array_char>

08014434 <ucdr_deserialize_sequence_char>:
 8014434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014438:	461d      	mov	r5, r3
 801443a:	4616      	mov	r6, r2
 801443c:	460f      	mov	r7, r1
 801443e:	461a      	mov	r2, r3
 8014440:	7d01      	ldrb	r1, [r0, #20]
 8014442:	4604      	mov	r4, r0
 8014444:	f7f8 fa5c 	bl	800c900 <ucdr_deserialize_endian_uint32_t>
 8014448:	682b      	ldr	r3, [r5, #0]
 801444a:	429e      	cmp	r6, r3
 801444c:	bf3c      	itt	cc
 801444e:	2201      	movcc	r2, #1
 8014450:	75a2      	strbcc	r2, [r4, #22]
 8014452:	b913      	cbnz	r3, 801445a <ucdr_deserialize_sequence_char+0x26>
 8014454:	2001      	movs	r0, #1
 8014456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801445a:	7d21      	ldrb	r1, [r4, #20]
 801445c:	463a      	mov	r2, r7
 801445e:	4620      	mov	r0, r4
 8014460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014464:	f7ff beda 	b.w	801421c <ucdr_deserialize_endian_array_char>

08014468 <ucdr_serialize_sequence_uint8_t>:
 8014468:	b570      	push	{r4, r5, r6, lr}
 801446a:	4615      	mov	r5, r2
 801446c:	460e      	mov	r6, r1
 801446e:	7d01      	ldrb	r1, [r0, #20]
 8014470:	4604      	mov	r4, r0
 8014472:	f7f8 f91d 	bl	800c6b0 <ucdr_serialize_endian_uint32_t>
 8014476:	b90d      	cbnz	r5, 801447c <ucdr_serialize_sequence_uint8_t+0x14>
 8014478:	2001      	movs	r0, #1
 801447a:	bd70      	pop	{r4, r5, r6, pc}
 801447c:	7d21      	ldrb	r1, [r4, #20]
 801447e:	462b      	mov	r3, r5
 8014480:	4632      	mov	r2, r6
 8014482:	4620      	mov	r0, r4
 8014484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014488:	f7ff bf2c 	b.w	80142e4 <ucdr_serialize_endian_array_uint8_t>

0801448c <ucdr_deserialize_sequence_uint8_t>:
 801448c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014490:	461d      	mov	r5, r3
 8014492:	4616      	mov	r6, r2
 8014494:	460f      	mov	r7, r1
 8014496:	461a      	mov	r2, r3
 8014498:	7d01      	ldrb	r1, [r0, #20]
 801449a:	4604      	mov	r4, r0
 801449c:	f7f8 fa30 	bl	800c900 <ucdr_deserialize_endian_uint32_t>
 80144a0:	682b      	ldr	r3, [r5, #0]
 80144a2:	429e      	cmp	r6, r3
 80144a4:	bf3c      	itt	cc
 80144a6:	2201      	movcc	r2, #1
 80144a8:	75a2      	strbcc	r2, [r4, #22]
 80144aa:	b913      	cbnz	r3, 80144b2 <ucdr_deserialize_sequence_uint8_t+0x26>
 80144ac:	2001      	movs	r0, #1
 80144ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144b2:	7d21      	ldrb	r1, [r4, #20]
 80144b4:	463a      	mov	r2, r7
 80144b6:	4620      	mov	r0, r4
 80144b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80144bc:	f7ff bf76 	b.w	80143ac <ucdr_deserialize_endian_array_uint8_t>

080144c0 <ucdr_serialize_string>:
 80144c0:	b510      	push	{r4, lr}
 80144c2:	b082      	sub	sp, #8
 80144c4:	4604      	mov	r4, r0
 80144c6:	4608      	mov	r0, r1
 80144c8:	9101      	str	r1, [sp, #4]
 80144ca:	f7eb fe8b 	bl	80001e4 <strlen>
 80144ce:	9901      	ldr	r1, [sp, #4]
 80144d0:	1c42      	adds	r2, r0, #1
 80144d2:	4620      	mov	r0, r4
 80144d4:	b002      	add	sp, #8
 80144d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144da:	f7ff bf99 	b.w	8014410 <ucdr_serialize_sequence_char>
 80144de:	bf00      	nop

080144e0 <ucdr_deserialize_string>:
 80144e0:	b500      	push	{lr}
 80144e2:	b083      	sub	sp, #12
 80144e4:	ab01      	add	r3, sp, #4
 80144e6:	f7ff ffa5 	bl	8014434 <ucdr_deserialize_sequence_char>
 80144ea:	b003      	add	sp, #12
 80144ec:	f85d fb04 	ldr.w	pc, [sp], #4

080144f0 <get_custom_error>:
 80144f0:	4b01      	ldr	r3, [pc, #4]	@ (80144f8 <get_custom_error+0x8>)
 80144f2:	7818      	ldrb	r0, [r3, #0]
 80144f4:	4770      	bx	lr
 80144f6:	bf00      	nop
 80144f8:	20015fb0 	.word	0x20015fb0

080144fc <recv_custom_msg>:
 80144fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014500:	4693      	mov	fp, r2
 8014502:	b089      	sub	sp, #36	@ 0x24
 8014504:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014508:	9305      	str	r3, [sp, #20]
 801450a:	468a      	mov	sl, r1
 801450c:	2100      	movs	r1, #0
 801450e:	4604      	mov	r4, r0
 8014510:	f88d 101e 	strb.w	r1, [sp, #30]
 8014514:	b322      	cbz	r2, 8014560 <recv_custom_msg+0x64>
 8014516:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801451a:	f10d 081f 	add.w	r8, sp, #31
 801451e:	af05      	add	r7, sp, #20
 8014520:	f10d 061e 	add.w	r6, sp, #30
 8014524:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8014528:	e002      	b.n	8014530 <recv_custom_msg+0x34>
 801452a:	9b05      	ldr	r3, [sp, #20]
 801452c:	2b00      	cmp	r3, #0
 801452e:	dd0f      	ble.n	8014550 <recv_custom_msg+0x54>
 8014530:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8014534:	4623      	mov	r3, r4
 8014536:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801453a:	e9cd 5600 	strd	r5, r6, [sp]
 801453e:	4622      	mov	r2, r4
 8014540:	4648      	mov	r0, r9
 8014542:	f001 f8f3 	bl	801572c <uxr_read_framed_msg>
 8014546:	2800      	cmp	r0, #0
 8014548:	d0ef      	beq.n	801452a <recv_custom_msg+0x2e>
 801454a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801454e:	b1b3      	cbz	r3, 801457e <recv_custom_msg+0x82>
 8014550:	4b0f      	ldr	r3, [pc, #60]	@ (8014590 <recv_custom_msg+0x94>)
 8014552:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014556:	701a      	strb	r2, [r3, #0]
 8014558:	2000      	movs	r0, #0
 801455a:	b009      	add	sp, #36	@ 0x24
 801455c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014560:	f10d 021f 	add.w	r2, sp, #31
 8014564:	9200      	str	r2, [sp, #0]
 8014566:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801456a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801456e:	4601      	mov	r1, r0
 8014570:	47a8      	blx	r5
 8014572:	2800      	cmp	r0, #0
 8014574:	d0ec      	beq.n	8014550 <recv_custom_msg+0x54>
 8014576:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d1e8      	bne.n	8014550 <recv_custom_msg+0x54>
 801457e:	f8cb 0000 	str.w	r0, [fp]
 8014582:	2001      	movs	r0, #1
 8014584:	f8ca 4000 	str.w	r4, [sl]
 8014588:	b009      	add	sp, #36	@ 0x24
 801458a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801458e:	bf00      	nop
 8014590:	20015fb0 	.word	0x20015fb0

08014594 <send_custom_msg>:
 8014594:	b530      	push	{r4, r5, lr}
 8014596:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801459a:	b087      	sub	sp, #28
 801459c:	4615      	mov	r5, r2
 801459e:	b974      	cbnz	r4, 80145be <send_custom_msg+0x2a>
 80145a0:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80145a4:	f10d 0317 	add.w	r3, sp, #23
 80145a8:	47a0      	blx	r4
 80145aa:	b108      	cbz	r0, 80145b0 <send_custom_msg+0x1c>
 80145ac:	42a8      	cmp	r0, r5
 80145ae:	d015      	beq.n	80145dc <send_custom_msg+0x48>
 80145b0:	4b0c      	ldr	r3, [pc, #48]	@ (80145e4 <send_custom_msg+0x50>)
 80145b2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80145b6:	701a      	strb	r2, [r3, #0]
 80145b8:	2000      	movs	r0, #0
 80145ba:	b007      	add	sp, #28
 80145bc:	bd30      	pop	{r4, r5, pc}
 80145be:	460b      	mov	r3, r1
 80145c0:	2200      	movs	r2, #0
 80145c2:	f10d 0117 	add.w	r1, sp, #23
 80145c6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80145ca:	4602      	mov	r2, r0
 80145cc:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80145d0:	9500      	str	r5, [sp, #0]
 80145d2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80145d6:	f000 feb1 	bl	801533c <uxr_write_framed_msg>
 80145da:	e7e6      	b.n	80145aa <send_custom_msg+0x16>
 80145dc:	2001      	movs	r0, #1
 80145de:	b007      	add	sp, #28
 80145e0:	bd30      	pop	{r4, r5, pc}
 80145e2:	bf00      	nop
 80145e4:	20015fb0 	.word	0x20015fb0

080145e8 <uxr_set_custom_transport_callbacks>:
 80145e8:	b410      	push	{r4}
 80145ea:	9c01      	ldr	r4, [sp, #4]
 80145ec:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80145f0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80145f4:	9b02      	ldr	r3, [sp, #8]
 80145f6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80145fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145fe:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8014602:	4770      	bx	lr

08014604 <uxr_init_custom_transport>:
 8014604:	b538      	push	{r3, r4, r5, lr}
 8014606:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801460a:	b303      	cbz	r3, 801464e <uxr_init_custom_transport+0x4a>
 801460c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014610:	4604      	mov	r4, r0
 8014612:	b1e2      	cbz	r2, 801464e <uxr_init_custom_transport+0x4a>
 8014614:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8014618:	b1ca      	cbz	r2, 801464e <uxr_init_custom_transport+0x4a>
 801461a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801461e:	b1b2      	cbz	r2, 801464e <uxr_init_custom_transport+0x4a>
 8014620:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014624:	4798      	blx	r3
 8014626:	4605      	mov	r5, r0
 8014628:	b188      	cbz	r0, 801464e <uxr_init_custom_transport+0x4a>
 801462a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801462e:	b98b      	cbnz	r3, 8014654 <uxr_init_custom_transport+0x50>
 8014630:	490b      	ldr	r1, [pc, #44]	@ (8014660 <uxr_init_custom_transport+0x5c>)
 8014632:	4b0c      	ldr	r3, [pc, #48]	@ (8014664 <uxr_init_custom_transport+0x60>)
 8014634:	4a0c      	ldr	r2, [pc, #48]	@ (8014668 <uxr_init_custom_transport+0x64>)
 8014636:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801463a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801463e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8014642:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8014646:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801464a:	4628      	mov	r0, r5
 801464c:	bd38      	pop	{r3, r4, r5, pc}
 801464e:	2500      	movs	r5, #0
 8014650:	4628      	mov	r0, r5
 8014652:	bd38      	pop	{r3, r4, r5, pc}
 8014654:	2100      	movs	r1, #0
 8014656:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801465a:	f000 fe69 	bl	8015330 <uxr_init_framing_io>
 801465e:	e7e7      	b.n	8014630 <uxr_init_custom_transport+0x2c>
 8014660:	08014595 	.word	0x08014595
 8014664:	080144fd 	.word	0x080144fd
 8014668:	080144f1 	.word	0x080144f1

0801466c <uxr_close_custom_transport>:
 801466c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8014670:	4718      	bx	r3
 8014672:	bf00      	nop

08014674 <uxr_init_input_best_effort_stream>:
 8014674:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014678:	8003      	strh	r3, [r0, #0]
 801467a:	4770      	bx	lr

0801467c <uxr_reset_input_best_effort_stream>:
 801467c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014680:	8003      	strh	r3, [r0, #0]
 8014682:	4770      	bx	lr

08014684 <uxr_receive_best_effort_message>:
 8014684:	b538      	push	{r3, r4, r5, lr}
 8014686:	4604      	mov	r4, r0
 8014688:	8800      	ldrh	r0, [r0, #0]
 801468a:	460d      	mov	r5, r1
 801468c:	f000 fe38 	bl	8015300 <uxr_seq_num_cmp>
 8014690:	4603      	mov	r3, r0
 8014692:	2b00      	cmp	r3, #0
 8014694:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8014698:	bfb8      	it	lt
 801469a:	8025      	strhlt	r5, [r4, #0]
 801469c:	bd38      	pop	{r3, r4, r5, pc}
 801469e:	bf00      	nop

080146a0 <on_full_input_buffer>:
 80146a0:	b570      	push	{r4, r5, r6, lr}
 80146a2:	4605      	mov	r5, r0
 80146a4:	460c      	mov	r4, r1
 80146a6:	682b      	ldr	r3, [r5, #0]
 80146a8:	6809      	ldr	r1, [r1, #0]
 80146aa:	8920      	ldrh	r0, [r4, #8]
 80146ac:	6862      	ldr	r2, [r4, #4]
 80146ae:	fbb2 f2f0 	udiv	r2, r2, r0
 80146b2:	eba3 0c01 	sub.w	ip, r3, r1
 80146b6:	fbbc fcf2 	udiv	ip, ip, r2
 80146ba:	f10c 0c01 	add.w	ip, ip, #1
 80146be:	fa1f f38c 	uxth.w	r3, ip
 80146c2:	fbb3 f6f0 	udiv	r6, r3, r0
 80146c6:	fb00 3316 	mls	r3, r0, r6, r3
 80146ca:	b29b      	uxth	r3, r3
 80146cc:	fb02 f303 	mul.w	r3, r2, r3
 80146d0:	1d18      	adds	r0, r3, #4
 80146d2:	4408      	add	r0, r1
 80146d4:	7d26      	ldrb	r6, [r4, #20]
 80146d6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80146da:	b116      	cbz	r6, 80146e2 <on_full_input_buffer+0x42>
 80146dc:	2600      	movs	r6, #0
 80146de:	f840 6c04 	str.w	r6, [r0, #-4]
 80146e2:	2a03      	cmp	r2, #3
 80146e4:	d801      	bhi.n	80146ea <on_full_input_buffer+0x4a>
 80146e6:	2001      	movs	r0, #1
 80146e8:	bd70      	pop	{r4, r5, r6, pc}
 80146ea:	3308      	adds	r3, #8
 80146ec:	4419      	add	r1, r3
 80146ee:	4628      	mov	r0, r5
 80146f0:	692b      	ldr	r3, [r5, #16]
 80146f2:	3a04      	subs	r2, #4
 80146f4:	f7f8 fcd2 	bl	800d09c <ucdr_init_buffer_origin>
 80146f8:	4628      	mov	r0, r5
 80146fa:	4903      	ldr	r1, [pc, #12]	@ (8014708 <on_full_input_buffer+0x68>)
 80146fc:	4622      	mov	r2, r4
 80146fe:	f7f8 fca9 	bl	800d054 <ucdr_set_on_full_buffer_callback>
 8014702:	2000      	movs	r0, #0
 8014704:	bd70      	pop	{r4, r5, r6, pc}
 8014706:	bf00      	nop
 8014708:	080146a1 	.word	0x080146a1

0801470c <uxr_init_input_reliable_stream>:
 801470c:	b500      	push	{lr}
 801470e:	e9c0 1200 	strd	r1, r2, [r0]
 8014712:	f04f 0e00 	mov.w	lr, #0
 8014716:	9a01      	ldr	r2, [sp, #4]
 8014718:	8103      	strh	r3, [r0, #8]
 801471a:	6102      	str	r2, [r0, #16]
 801471c:	f880 e014 	strb.w	lr, [r0, #20]
 8014720:	b1d3      	cbz	r3, 8014758 <uxr_init_input_reliable_stream+0x4c>
 8014722:	f8c1 e000 	str.w	lr, [r1]
 8014726:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801472a:	f1bc 0f01 	cmp.w	ip, #1
 801472e:	d913      	bls.n	8014758 <uxr_init_input_reliable_stream+0x4c>
 8014730:	2301      	movs	r3, #1
 8014732:	fbb3 f1fc 	udiv	r1, r3, ip
 8014736:	fb0c 3111 	mls	r1, ip, r1, r3
 801473a:	b289      	uxth	r1, r1
 801473c:	6842      	ldr	r2, [r0, #4]
 801473e:	fbb2 f2fc 	udiv	r2, r2, ip
 8014742:	fb01 f202 	mul.w	r2, r1, r2
 8014746:	6801      	ldr	r1, [r0, #0]
 8014748:	f841 e002 	str.w	lr, [r1, r2]
 801474c:	3301      	adds	r3, #1
 801474e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014752:	b29b      	uxth	r3, r3
 8014754:	459c      	cmp	ip, r3
 8014756:	d8ec      	bhi.n	8014732 <uxr_init_input_reliable_stream+0x26>
 8014758:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801475c:	60c3      	str	r3, [r0, #12]
 801475e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014762:	bf00      	nop

08014764 <uxr_reset_input_reliable_stream>:
 8014764:	8901      	ldrh	r1, [r0, #8]
 8014766:	b1e9      	cbz	r1, 80147a4 <uxr_reset_input_reliable_stream+0x40>
 8014768:	f04f 0c00 	mov.w	ip, #0
 801476c:	b500      	push	{lr}
 801476e:	4663      	mov	r3, ip
 8014770:	46e6      	mov	lr, ip
 8014772:	fbb3 f2f1 	udiv	r2, r3, r1
 8014776:	fb01 3312 	mls	r3, r1, r2, r3
 801477a:	b29b      	uxth	r3, r3
 801477c:	6842      	ldr	r2, [r0, #4]
 801477e:	fbb2 f2f1 	udiv	r2, r2, r1
 8014782:	fb02 f303 	mul.w	r3, r2, r3
 8014786:	6802      	ldr	r2, [r0, #0]
 8014788:	f842 e003 	str.w	lr, [r2, r3]
 801478c:	f10c 0c01 	add.w	ip, ip, #1
 8014790:	8901      	ldrh	r1, [r0, #8]
 8014792:	fa1f f38c 	uxth.w	r3, ip
 8014796:	4299      	cmp	r1, r3
 8014798:	d8eb      	bhi.n	8014772 <uxr_reset_input_reliable_stream+0xe>
 801479a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801479e:	60c3      	str	r3, [r0, #12]
 80147a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80147a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80147a8:	60c3      	str	r3, [r0, #12]
 80147aa:	4770      	bx	lr

080147ac <uxr_receive_reliable_message>:
 80147ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147b0:	4604      	mov	r4, r0
 80147b2:	460d      	mov	r5, r1
 80147b4:	8901      	ldrh	r1, [r0, #8]
 80147b6:	8980      	ldrh	r0, [r0, #12]
 80147b8:	4690      	mov	r8, r2
 80147ba:	461f      	mov	r7, r3
 80147bc:	f000 fd98 	bl	80152f0 <uxr_seq_num_add>
 80147c0:	4629      	mov	r1, r5
 80147c2:	4606      	mov	r6, r0
 80147c4:	89a0      	ldrh	r0, [r4, #12]
 80147c6:	f000 fd9b 	bl	8015300 <uxr_seq_num_cmp>
 80147ca:	2800      	cmp	r0, #0
 80147cc:	db0a      	blt.n	80147e4 <uxr_receive_reliable_message+0x38>
 80147ce:	2600      	movs	r6, #0
 80147d0:	89e0      	ldrh	r0, [r4, #14]
 80147d2:	4629      	mov	r1, r5
 80147d4:	f000 fd94 	bl	8015300 <uxr_seq_num_cmp>
 80147d8:	2800      	cmp	r0, #0
 80147da:	da00      	bge.n	80147de <uxr_receive_reliable_message+0x32>
 80147dc:	81e5      	strh	r5, [r4, #14]
 80147de:	4630      	mov	r0, r6
 80147e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147e4:	4630      	mov	r0, r6
 80147e6:	4629      	mov	r1, r5
 80147e8:	f000 fd8a 	bl	8015300 <uxr_seq_num_cmp>
 80147ec:	2800      	cmp	r0, #0
 80147ee:	dbee      	blt.n	80147ce <uxr_receive_reliable_message+0x22>
 80147f0:	6923      	ldr	r3, [r4, #16]
 80147f2:	4640      	mov	r0, r8
 80147f4:	4798      	blx	r3
 80147f6:	2101      	movs	r1, #1
 80147f8:	4681      	mov	r9, r0
 80147fa:	89a0      	ldrh	r0, [r4, #12]
 80147fc:	f000 fd78 	bl	80152f0 <uxr_seq_num_add>
 8014800:	f1b9 0f00 	cmp.w	r9, #0
 8014804:	d101      	bne.n	801480a <uxr_receive_reliable_message+0x5e>
 8014806:	4285      	cmp	r5, r0
 8014808:	d047      	beq.n	801489a <uxr_receive_reliable_message+0xee>
 801480a:	8922      	ldrh	r2, [r4, #8]
 801480c:	fbb5 f0f2 	udiv	r0, r5, r2
 8014810:	fb02 5010 	mls	r0, r2, r0, r5
 8014814:	b280      	uxth	r0, r0
 8014816:	6863      	ldr	r3, [r4, #4]
 8014818:	fbb3 f3f2 	udiv	r3, r3, r2
 801481c:	fb00 f303 	mul.w	r3, r0, r3
 8014820:	6820      	ldr	r0, [r4, #0]
 8014822:	3304      	adds	r3, #4
 8014824:	4418      	add	r0, r3
 8014826:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d1cf      	bne.n	80147ce <uxr_receive_reliable_message+0x22>
 801482e:	4641      	mov	r1, r8
 8014830:	463a      	mov	r2, r7
 8014832:	f002 fb48 	bl	8016ec6 <memcpy>
 8014836:	8921      	ldrh	r1, [r4, #8]
 8014838:	fbb5 f2f1 	udiv	r2, r5, r1
 801483c:	fb01 5212 	mls	r2, r1, r2, r5
 8014840:	b292      	uxth	r2, r2
 8014842:	6863      	ldr	r3, [r4, #4]
 8014844:	fbb3 f3f1 	udiv	r3, r3, r1
 8014848:	fb02 f303 	mul.w	r3, r2, r3
 801484c:	6822      	ldr	r2, [r4, #0]
 801484e:	50d7      	str	r7, [r2, r3]
 8014850:	9a08      	ldr	r2, [sp, #32]
 8014852:	2301      	movs	r3, #1
 8014854:	7013      	strb	r3, [r2, #0]
 8014856:	f1b9 0f00 	cmp.w	r9, #0
 801485a:	d0b8      	beq.n	80147ce <uxr_receive_reliable_message+0x22>
 801485c:	89a6      	ldrh	r6, [r4, #12]
 801485e:	4630      	mov	r0, r6
 8014860:	2101      	movs	r1, #1
 8014862:	f000 fd45 	bl	80152f0 <uxr_seq_num_add>
 8014866:	8922      	ldrh	r2, [r4, #8]
 8014868:	6863      	ldr	r3, [r4, #4]
 801486a:	fbb3 f3f2 	udiv	r3, r3, r2
 801486e:	4606      	mov	r6, r0
 8014870:	fbb0 f0f2 	udiv	r0, r0, r2
 8014874:	fb02 6010 	mls	r0, r2, r0, r6
 8014878:	b280      	uxth	r0, r0
 801487a:	fb00 f303 	mul.w	r3, r0, r3
 801487e:	6820      	ldr	r0, [r4, #0]
 8014880:	3304      	adds	r3, #4
 8014882:	4418      	add	r0, r3
 8014884:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d0a0      	beq.n	80147ce <uxr_receive_reliable_message+0x22>
 801488c:	6923      	ldr	r3, [r4, #16]
 801488e:	4798      	blx	r3
 8014890:	2802      	cmp	r0, #2
 8014892:	d008      	beq.n	80148a6 <uxr_receive_reliable_message+0xfa>
 8014894:	2801      	cmp	r0, #1
 8014896:	d0e2      	beq.n	801485e <uxr_receive_reliable_message+0xb2>
 8014898:	e799      	b.n	80147ce <uxr_receive_reliable_message+0x22>
 801489a:	9b08      	ldr	r3, [sp, #32]
 801489c:	81a5      	strh	r5, [r4, #12]
 801489e:	2601      	movs	r6, #1
 80148a0:	f883 9000 	strb.w	r9, [r3]
 80148a4:	e794      	b.n	80147d0 <uxr_receive_reliable_message+0x24>
 80148a6:	2601      	movs	r6, #1
 80148a8:	e792      	b.n	80147d0 <uxr_receive_reliable_message+0x24>
 80148aa:	bf00      	nop

080148ac <uxr_next_input_reliable_buffer_available>:
 80148ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148b0:	4604      	mov	r4, r0
 80148b2:	460f      	mov	r7, r1
 80148b4:	8980      	ldrh	r0, [r0, #12]
 80148b6:	2101      	movs	r1, #1
 80148b8:	4690      	mov	r8, r2
 80148ba:	f000 fd19 	bl	80152f0 <uxr_seq_num_add>
 80148be:	8922      	ldrh	r2, [r4, #8]
 80148c0:	fbb0 f6f2 	udiv	r6, r0, r2
 80148c4:	fb02 0616 	mls	r6, r2, r6, r0
 80148c8:	b2b6      	uxth	r6, r6
 80148ca:	6863      	ldr	r3, [r4, #4]
 80148cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80148d0:	fb06 f303 	mul.w	r3, r6, r3
 80148d4:	6826      	ldr	r6, [r4, #0]
 80148d6:	3304      	adds	r3, #4
 80148d8:	441e      	add	r6, r3
 80148da:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80148de:	f1b9 0f00 	cmp.w	r9, #0
 80148e2:	d023      	beq.n	801492c <uxr_next_input_reliable_buffer_available+0x80>
 80148e4:	6923      	ldr	r3, [r4, #16]
 80148e6:	4605      	mov	r5, r0
 80148e8:	4630      	mov	r0, r6
 80148ea:	4798      	blx	r3
 80148ec:	4682      	mov	sl, r0
 80148ee:	b300      	cbz	r0, 8014932 <uxr_next_input_reliable_buffer_available+0x86>
 80148f0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80148f4:	2101      	movs	r1, #1
 80148f6:	4650      	mov	r0, sl
 80148f8:	f000 fcfa 	bl	80152f0 <uxr_seq_num_add>
 80148fc:	8921      	ldrh	r1, [r4, #8]
 80148fe:	fbb0 f2f1 	udiv	r2, r0, r1
 8014902:	4682      	mov	sl, r0
 8014904:	fb01 0212 	mls	r2, r1, r2, r0
 8014908:	e9d4 0300 	ldrd	r0, r3, [r4]
 801490c:	b292      	uxth	r2, r2
 801490e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014912:	fb02 f303 	mul.w	r3, r2, r3
 8014916:	3304      	adds	r3, #4
 8014918:	4418      	add	r0, r3
 801491a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801491e:	b12b      	cbz	r3, 801492c <uxr_next_input_reliable_buffer_available+0x80>
 8014920:	6923      	ldr	r3, [r4, #16]
 8014922:	4798      	blx	r3
 8014924:	2802      	cmp	r0, #2
 8014926:	d01b      	beq.n	8014960 <uxr_next_input_reliable_buffer_available+0xb4>
 8014928:	2801      	cmp	r0, #1
 801492a:	d0e3      	beq.n	80148f4 <uxr_next_input_reliable_buffer_available+0x48>
 801492c:	2000      	movs	r0, #0
 801492e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014932:	464a      	mov	r2, r9
 8014934:	4631      	mov	r1, r6
 8014936:	4638      	mov	r0, r7
 8014938:	f7f8 fbb8 	bl	800d0ac <ucdr_init_buffer>
 801493c:	8921      	ldrh	r1, [r4, #8]
 801493e:	fbb5 f2f1 	udiv	r2, r5, r1
 8014942:	fb01 5212 	mls	r2, r1, r2, r5
 8014946:	b292      	uxth	r2, r2
 8014948:	6863      	ldr	r3, [r4, #4]
 801494a:	fbb3 f3f1 	udiv	r3, r3, r1
 801494e:	fb02 f303 	mul.w	r3, r2, r3
 8014952:	6822      	ldr	r2, [r4, #0]
 8014954:	f842 a003 	str.w	sl, [r2, r3]
 8014958:	2001      	movs	r0, #1
 801495a:	81a5      	strh	r5, [r4, #12]
 801495c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014960:	8920      	ldrh	r0, [r4, #8]
 8014962:	fbb5 f3f0 	udiv	r3, r5, r0
 8014966:	fb00 5513 	mls	r5, r0, r3, r5
 801496a:	b2ad      	uxth	r5, r5
 801496c:	6863      	ldr	r3, [r4, #4]
 801496e:	fbb3 f3f0 	udiv	r3, r3, r0
 8014972:	fb03 f505 	mul.w	r5, r3, r5
 8014976:	6823      	ldr	r3, [r4, #0]
 8014978:	2000      	movs	r0, #0
 801497a:	5158      	str	r0, [r3, r5]
 801497c:	eb06 0108 	add.w	r1, r6, r8
 8014980:	eba9 0208 	sub.w	r2, r9, r8
 8014984:	4638      	mov	r0, r7
 8014986:	f7f8 fb91 	bl	800d0ac <ucdr_init_buffer>
 801498a:	4638      	mov	r0, r7
 801498c:	4903      	ldr	r1, [pc, #12]	@ (801499c <uxr_next_input_reliable_buffer_available+0xf0>)
 801498e:	4622      	mov	r2, r4
 8014990:	f7f8 fb60 	bl	800d054 <ucdr_set_on_full_buffer_callback>
 8014994:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8014998:	2001      	movs	r0, #1
 801499a:	e7c8      	b.n	801492e <uxr_next_input_reliable_buffer_available+0x82>
 801499c:	080146a1 	.word	0x080146a1

080149a0 <uxr_process_heartbeat>:
 80149a0:	b538      	push	{r3, r4, r5, lr}
 80149a2:	4611      	mov	r1, r2
 80149a4:	4604      	mov	r4, r0
 80149a6:	89c0      	ldrh	r0, [r0, #14]
 80149a8:	4615      	mov	r5, r2
 80149aa:	f000 fca9 	bl	8015300 <uxr_seq_num_cmp>
 80149ae:	2800      	cmp	r0, #0
 80149b0:	bfb8      	it	lt
 80149b2:	81e5      	strhlt	r5, [r4, #14]
 80149b4:	bd38      	pop	{r3, r4, r5, pc}
 80149b6:	bf00      	nop

080149b8 <uxr_compute_acknack>:
 80149b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149bc:	8903      	ldrh	r3, [r0, #8]
 80149be:	8985      	ldrh	r5, [r0, #12]
 80149c0:	4604      	mov	r4, r0
 80149c2:	460e      	mov	r6, r1
 80149c4:	b1d3      	cbz	r3, 80149fc <uxr_compute_acknack+0x44>
 80149c6:	4628      	mov	r0, r5
 80149c8:	2701      	movs	r7, #1
 80149ca:	e003      	b.n	80149d4 <uxr_compute_acknack+0x1c>
 80149cc:	4567      	cmp	r7, ip
 80149ce:	d215      	bcs.n	80149fc <uxr_compute_acknack+0x44>
 80149d0:	89a0      	ldrh	r0, [r4, #12]
 80149d2:	3701      	adds	r7, #1
 80149d4:	b2b9      	uxth	r1, r7
 80149d6:	f000 fc8b 	bl	80152f0 <uxr_seq_num_add>
 80149da:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80149de:	fbb0 f3fc 	udiv	r3, r0, ip
 80149e2:	fb0c 0313 	mls	r3, ip, r3, r0
 80149e6:	b29a      	uxth	r2, r3
 80149e8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80149ec:	fbb3 f3fc 	udiv	r3, r3, ip
 80149f0:	fb02 f303 	mul.w	r3, r2, r3
 80149f4:	58cb      	ldr	r3, [r1, r3]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d1e8      	bne.n	80149cc <uxr_compute_acknack+0x14>
 80149fa:	4605      	mov	r5, r0
 80149fc:	8035      	strh	r5, [r6, #0]
 80149fe:	2101      	movs	r1, #1
 8014a00:	4628      	mov	r0, r5
 8014a02:	89e7      	ldrh	r7, [r4, #14]
 8014a04:	f000 fc78 	bl	80152f8 <uxr_seq_num_sub>
 8014a08:	4601      	mov	r1, r0
 8014a0a:	4638      	mov	r0, r7
 8014a0c:	f000 fc74 	bl	80152f8 <uxr_seq_num_sub>
 8014a10:	4605      	mov	r5, r0
 8014a12:	b318      	cbz	r0, 8014a5c <uxr_compute_acknack+0xa4>
 8014a14:	f04f 0900 	mov.w	r9, #0
 8014a18:	464f      	mov	r7, r9
 8014a1a:	f04f 0801 	mov.w	r8, #1
 8014a1e:	fa1f f189 	uxth.w	r1, r9
 8014a22:	8830      	ldrh	r0, [r6, #0]
 8014a24:	f000 fc64 	bl	80152f0 <uxr_seq_num_add>
 8014a28:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014a2c:	fbb0 f3fc 	udiv	r3, r0, ip
 8014a30:	e9d4 1200 	ldrd	r1, r2, [r4]
 8014a34:	fb03 001c 	mls	r0, r3, ip, r0
 8014a38:	b283      	uxth	r3, r0
 8014a3a:	fbb2 f2fc 	udiv	r2, r2, ip
 8014a3e:	fb02 f303 	mul.w	r3, r2, r3
 8014a42:	fa08 f209 	lsl.w	r2, r8, r9
 8014a46:	58cb      	ldr	r3, [r1, r3]
 8014a48:	f109 0901 	add.w	r9, r9, #1
 8014a4c:	b90b      	cbnz	r3, 8014a52 <uxr_compute_acknack+0x9a>
 8014a4e:	4317      	orrs	r7, r2
 8014a50:	b2bf      	uxth	r7, r7
 8014a52:	454d      	cmp	r5, r9
 8014a54:	d1e3      	bne.n	8014a1e <uxr_compute_acknack+0x66>
 8014a56:	4638      	mov	r0, r7
 8014a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a5c:	4607      	mov	r7, r0
 8014a5e:	4638      	mov	r0, r7
 8014a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014a64 <uxr_init_output_best_effort_stream>:
 8014a64:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8014a68:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8014a6c:	6001      	str	r1, [r0, #0]
 8014a6e:	7303      	strb	r3, [r0, #12]
 8014a70:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014a74:	4770      	bx	lr
 8014a76:	bf00      	nop

08014a78 <uxr_reset_output_best_effort_stream>:
 8014a78:	7b02      	ldrb	r2, [r0, #12]
 8014a7a:	6042      	str	r2, [r0, #4]
 8014a7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014a80:	81c3      	strh	r3, [r0, #14]
 8014a82:	4770      	bx	lr

08014a84 <uxr_prepare_best_effort_buffer_to_write>:
 8014a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a86:	4604      	mov	r4, r0
 8014a88:	b083      	sub	sp, #12
 8014a8a:	6840      	ldr	r0, [r0, #4]
 8014a8c:	460d      	mov	r5, r1
 8014a8e:	4616      	mov	r6, r2
 8014a90:	f7f9 ff12 	bl	800e8b8 <uxr_submessage_padding>
 8014a94:	6863      	ldr	r3, [r4, #4]
 8014a96:	4418      	add	r0, r3
 8014a98:	68a3      	ldr	r3, [r4, #8]
 8014a9a:	1942      	adds	r2, r0, r5
 8014a9c:	4293      	cmp	r3, r2
 8014a9e:	bf2c      	ite	cs
 8014aa0:	2701      	movcs	r7, #1
 8014aa2:	2700      	movcc	r7, #0
 8014aa4:	d202      	bcs.n	8014aac <uxr_prepare_best_effort_buffer_to_write+0x28>
 8014aa6:	4638      	mov	r0, r7
 8014aa8:	b003      	add	sp, #12
 8014aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014aac:	9000      	str	r0, [sp, #0]
 8014aae:	6821      	ldr	r1, [r4, #0]
 8014ab0:	4630      	mov	r0, r6
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	f7f8 fae8 	bl	800d088 <ucdr_init_buffer_origin_offset>
 8014ab8:	6861      	ldr	r1, [r4, #4]
 8014aba:	4638      	mov	r0, r7
 8014abc:	4429      	add	r1, r5
 8014abe:	6061      	str	r1, [r4, #4]
 8014ac0:	b003      	add	sp, #12
 8014ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014ac4 <uxr_prepare_best_effort_buffer_to_send>:
 8014ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ac8:	4604      	mov	r4, r0
 8014aca:	461d      	mov	r5, r3
 8014acc:	6840      	ldr	r0, [r0, #4]
 8014ace:	7b23      	ldrb	r3, [r4, #12]
 8014ad0:	4298      	cmp	r0, r3
 8014ad2:	bf8c      	ite	hi
 8014ad4:	2601      	movhi	r6, #1
 8014ad6:	2600      	movls	r6, #0
 8014ad8:	d802      	bhi.n	8014ae0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8014ada:	4630      	mov	r0, r6
 8014adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ae0:	4688      	mov	r8, r1
 8014ae2:	89e0      	ldrh	r0, [r4, #14]
 8014ae4:	2101      	movs	r1, #1
 8014ae6:	4617      	mov	r7, r2
 8014ae8:	f000 fc02 	bl	80152f0 <uxr_seq_num_add>
 8014aec:	6823      	ldr	r3, [r4, #0]
 8014aee:	81e0      	strh	r0, [r4, #14]
 8014af0:	8028      	strh	r0, [r5, #0]
 8014af2:	f8c8 3000 	str.w	r3, [r8]
 8014af6:	6863      	ldr	r3, [r4, #4]
 8014af8:	603b      	str	r3, [r7, #0]
 8014afa:	7b23      	ldrb	r3, [r4, #12]
 8014afc:	6063      	str	r3, [r4, #4]
 8014afe:	4630      	mov	r0, r6
 8014b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014b04 <on_full_output_buffer>:
 8014b04:	b538      	push	{r3, r4, r5, lr}
 8014b06:	6802      	ldr	r2, [r0, #0]
 8014b08:	460c      	mov	r4, r1
 8014b0a:	6809      	ldr	r1, [r1, #0]
 8014b0c:	8923      	ldrh	r3, [r4, #8]
 8014b0e:	eba2 0c01 	sub.w	ip, r2, r1
 8014b12:	6862      	ldr	r2, [r4, #4]
 8014b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8014b18:	fbbc fcf2 	udiv	ip, ip, r2
 8014b1c:	f10c 0c01 	add.w	ip, ip, #1
 8014b20:	fa1f fc8c 	uxth.w	ip, ip
 8014b24:	fbbc fef3 	udiv	lr, ip, r3
 8014b28:	fb03 c31e 	mls	r3, r3, lr, ip
 8014b2c:	b29b      	uxth	r3, r3
 8014b2e:	fb02 f303 	mul.w	r3, r2, r3
 8014b32:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8014b36:	58ca      	ldr	r2, [r1, r3]
 8014b38:	4463      	add	r3, ip
 8014b3a:	eba2 020c 	sub.w	r2, r2, ip
 8014b3e:	3308      	adds	r3, #8
 8014b40:	4605      	mov	r5, r0
 8014b42:	4419      	add	r1, r3
 8014b44:	3a04      	subs	r2, #4
 8014b46:	6903      	ldr	r3, [r0, #16]
 8014b48:	f7f8 faa8 	bl	800d09c <ucdr_init_buffer_origin>
 8014b4c:	4628      	mov	r0, r5
 8014b4e:	4903      	ldr	r1, [pc, #12]	@ (8014b5c <on_full_output_buffer+0x58>)
 8014b50:	4622      	mov	r2, r4
 8014b52:	f7f8 fa7f 	bl	800d054 <ucdr_set_on_full_buffer_callback>
 8014b56:	2000      	movs	r0, #0
 8014b58:	bd38      	pop	{r3, r4, r5, pc}
 8014b5a:	bf00      	nop
 8014b5c:	08014b05 	.word	0x08014b05

08014b60 <uxr_init_output_reliable_stream>:
 8014b60:	b410      	push	{r4}
 8014b62:	f89d c004 	ldrb.w	ip, [sp, #4]
 8014b66:	8103      	strh	r3, [r0, #8]
 8014b68:	e9c0 1200 	strd	r1, r2, [r0]
 8014b6c:	f880 c00c 	strb.w	ip, [r0, #12]
 8014b70:	b1d3      	cbz	r3, 8014ba8 <uxr_init_output_reliable_stream+0x48>
 8014b72:	f8c1 c000 	str.w	ip, [r1]
 8014b76:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014b7a:	f1bc 0f01 	cmp.w	ip, #1
 8014b7e:	d913      	bls.n	8014ba8 <uxr_init_output_reliable_stream+0x48>
 8014b80:	2301      	movs	r3, #1
 8014b82:	fbb3 f1fc 	udiv	r1, r3, ip
 8014b86:	fb0c 3111 	mls	r1, ip, r1, r3
 8014b8a:	b289      	uxth	r1, r1
 8014b8c:	6842      	ldr	r2, [r0, #4]
 8014b8e:	6804      	ldr	r4, [r0, #0]
 8014b90:	fbb2 f2fc 	udiv	r2, r2, ip
 8014b94:	fb01 f202 	mul.w	r2, r1, r2
 8014b98:	7b01      	ldrb	r1, [r0, #12]
 8014b9a:	50a1      	str	r1, [r4, r2]
 8014b9c:	3301      	adds	r3, #1
 8014b9e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	459c      	cmp	ip, r3
 8014ba6:	d8ec      	bhi.n	8014b82 <uxr_init_output_reliable_stream+0x22>
 8014ba8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014bac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014bb0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014bb4:	4905      	ldr	r1, [pc, #20]	@ (8014bcc <uxr_init_output_reliable_stream+0x6c>)
 8014bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bba:	f8c0 100e 	str.w	r1, [r0, #14]
 8014bbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	8242      	strh	r2, [r0, #18]
 8014bc6:	8403      	strh	r3, [r0, #32]
 8014bc8:	4770      	bx	lr
 8014bca:	bf00      	nop
 8014bcc:	ffff0000 	.word	0xffff0000

08014bd0 <uxr_reset_output_reliable_stream>:
 8014bd0:	8901      	ldrh	r1, [r0, #8]
 8014bd2:	b1b1      	cbz	r1, 8014c02 <uxr_reset_output_reliable_stream+0x32>
 8014bd4:	f04f 0c00 	mov.w	ip, #0
 8014bd8:	4663      	mov	r3, ip
 8014bda:	fbb3 f2f1 	udiv	r2, r3, r1
 8014bde:	fb01 3312 	mls	r3, r1, r2, r3
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	6842      	ldr	r2, [r0, #4]
 8014be6:	fbb2 f2f1 	udiv	r2, r2, r1
 8014bea:	6801      	ldr	r1, [r0, #0]
 8014bec:	fb02 f303 	mul.w	r3, r2, r3
 8014bf0:	7b02      	ldrb	r2, [r0, #12]
 8014bf2:	50ca      	str	r2, [r1, r3]
 8014bf4:	f10c 0c01 	add.w	ip, ip, #1
 8014bf8:	8901      	ldrh	r1, [r0, #8]
 8014bfa:	fa1f f38c 	uxth.w	r3, ip
 8014bfe:	4299      	cmp	r1, r3
 8014c00:	d8eb      	bhi.n	8014bda <uxr_reset_output_reliable_stream+0xa>
 8014c02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014c06:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014c0a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014c0e:	4904      	ldr	r1, [pc, #16]	@ (8014c20 <uxr_reset_output_reliable_stream+0x50>)
 8014c10:	f8c0 100e 	str.w	r1, [r0, #14]
 8014c14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014c18:	2300      	movs	r3, #0
 8014c1a:	8242      	strh	r2, [r0, #18]
 8014c1c:	8403      	strh	r3, [r0, #32]
 8014c1e:	4770      	bx	lr
 8014c20:	ffff0000 	.word	0xffff0000

08014c24 <uxr_prepare_reliable_buffer_to_write>:
 8014c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c28:	4604      	mov	r4, r0
 8014c2a:	b091      	sub	sp, #68	@ 0x44
 8014c2c:	8900      	ldrh	r0, [r0, #8]
 8014c2e:	89e6      	ldrh	r6, [r4, #14]
 8014c30:	6823      	ldr	r3, [r4, #0]
 8014c32:	9204      	str	r2, [sp, #16]
 8014c34:	fbb6 f2f0 	udiv	r2, r6, r0
 8014c38:	fb00 6212 	mls	r2, r0, r2, r6
 8014c3c:	b292      	uxth	r2, r2
 8014c3e:	6865      	ldr	r5, [r4, #4]
 8014c40:	fbb5 f5f0 	udiv	r5, r5, r0
 8014c44:	fb05 3202 	mla	r2, r5, r2, r3
 8014c48:	3204      	adds	r2, #4
 8014c4a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8014c4e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8014c52:	9203      	str	r2, [sp, #12]
 8014c54:	468b      	mov	fp, r1
 8014c56:	1f2f      	subs	r7, r5, #4
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	f000 814c 	beq.w	8014ef6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8014c5e:	f04f 0c00 	mov.w	ip, #0
 8014c62:	46e2      	mov	sl, ip
 8014c64:	4661      	mov	r1, ip
 8014c66:	fbb1 f2f0 	udiv	r2, r1, r0
 8014c6a:	fb00 1212 	mls	r2, r0, r2, r1
 8014c6e:	b292      	uxth	r2, r2
 8014c70:	fb05 f202 	mul.w	r2, r5, r2
 8014c74:	f10c 0c01 	add.w	ip, ip, #1
 8014c78:	589a      	ldr	r2, [r3, r2]
 8014c7a:	454a      	cmp	r2, r9
 8014c7c:	bf08      	it	eq
 8014c7e:	f10a 0a01 	addeq.w	sl, sl, #1
 8014c82:	fa1f f18c 	uxth.w	r1, ip
 8014c86:	bf08      	it	eq
 8014c88:	fa1f fa8a 	uxtheq.w	sl, sl
 8014c8c:	4281      	cmp	r1, r0
 8014c8e:	d3ea      	bcc.n	8014c66 <uxr_prepare_reliable_buffer_to_write+0x42>
 8014c90:	4640      	mov	r0, r8
 8014c92:	2104      	movs	r1, #4
 8014c94:	f8cd a014 	str.w	sl, [sp, #20]
 8014c98:	f7f8 fa0c 	bl	800d0b4 <ucdr_alignment>
 8014c9c:	4480      	add	r8, r0
 8014c9e:	eb08 020b 	add.w	r2, r8, fp
 8014ca2:	42ba      	cmp	r2, r7
 8014ca4:	f240 80cd 	bls.w	8014e42 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8014ca8:	7b22      	ldrb	r2, [r4, #12]
 8014caa:	445a      	add	r2, fp
 8014cac:	42ba      	cmp	r2, r7
 8014cae:	f240 80b5 	bls.w	8014e1c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8014cb2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8014cb6:	33fc      	adds	r3, #252	@ 0xfc
 8014cb8:	b2ba      	uxth	r2, r7
 8014cba:	4413      	add	r3, r2
 8014cbc:	b29b      	uxth	r3, r3
 8014cbe:	fb0a f903 	mul.w	r9, sl, r3
 8014cc2:	45d9      	cmp	r9, fp
 8014cc4:	9305      	str	r3, [sp, #20]
 8014cc6:	9306      	str	r3, [sp, #24]
 8014cc8:	f0c0 80b7 	bcc.w	8014e3a <uxr_prepare_reliable_buffer_to_write+0x216>
 8014ccc:	f108 0304 	add.w	r3, r8, #4
 8014cd0:	42bb      	cmp	r3, r7
 8014cd2:	f080 80db 	bcs.w	8014e8c <uxr_prepare_reliable_buffer_to_write+0x268>
 8014cd6:	f1a2 0904 	sub.w	r9, r2, #4
 8014cda:	eba9 0908 	sub.w	r9, r9, r8
 8014cde:	9b05      	ldr	r3, [sp, #20]
 8014ce0:	fa1f f989 	uxth.w	r9, r9
 8014ce4:	ebab 0b09 	sub.w	fp, fp, r9
 8014ce8:	fbbb f2f3 	udiv	r2, fp, r3
 8014cec:	fb03 b312 	mls	r3, r3, r2, fp
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	f000 80c8 	beq.w	8014e86 <uxr_prepare_reliable_buffer_to_write+0x262>
 8014cf6:	3201      	adds	r2, #1
 8014cf8:	b292      	uxth	r2, r2
 8014cfa:	9306      	str	r3, [sp, #24]
 8014cfc:	4552      	cmp	r2, sl
 8014cfe:	f200 809c 	bhi.w	8014e3a <uxr_prepare_reliable_buffer_to_write+0x216>
 8014d02:	f10d 0b20 	add.w	fp, sp, #32
 8014d06:	2a00      	cmp	r2, #0
 8014d08:	d042      	beq.n	8014d90 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8014d0a:	f8cd 801c 	str.w	r8, [sp, #28]
 8014d0e:	f04f 0a00 	mov.w	sl, #0
 8014d12:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014d16:	9505      	str	r5, [sp, #20]
 8014d18:	f10d 0b20 	add.w	fp, sp, #32
 8014d1c:	4615      	mov	r5, r2
 8014d1e:	e000      	b.n	8014d22 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8014d20:	46c1      	mov	r9, r8
 8014d22:	8920      	ldrh	r0, [r4, #8]
 8014d24:	fbb6 f2f0 	udiv	r2, r6, r0
 8014d28:	fb00 6112 	mls	r1, r0, r2, r6
 8014d2c:	b28a      	uxth	r2, r1
 8014d2e:	6863      	ldr	r3, [r4, #4]
 8014d30:	fbb3 f1f0 	udiv	r1, r3, r0
 8014d34:	6823      	ldr	r3, [r4, #0]
 8014d36:	fb02 f101 	mul.w	r1, r2, r1
 8014d3a:	3104      	adds	r1, #4
 8014d3c:	4419      	add	r1, r3
 8014d3e:	4658      	mov	r0, fp
 8014d40:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8014d44:	9200      	str	r2, [sp, #0]
 8014d46:	2300      	movs	r3, #0
 8014d48:	463a      	mov	r2, r7
 8014d4a:	f7f8 f99d 	bl	800d088 <ucdr_init_buffer_origin_offset>
 8014d4e:	464a      	mov	r2, r9
 8014d50:	2300      	movs	r3, #0
 8014d52:	210d      	movs	r1, #13
 8014d54:	4658      	mov	r0, fp
 8014d56:	f7f9 fd6f 	bl	800e838 <uxr_buffer_submessage_header>
 8014d5a:	8921      	ldrh	r1, [r4, #8]
 8014d5c:	fbb6 f2f1 	udiv	r2, r6, r1
 8014d60:	fb01 6212 	mls	r2, r1, r2, r6
 8014d64:	b292      	uxth	r2, r2
 8014d66:	6863      	ldr	r3, [r4, #4]
 8014d68:	fbb3 f3f1 	udiv	r3, r3, r1
 8014d6c:	fb02 f303 	mul.w	r3, r2, r3
 8014d70:	6822      	ldr	r2, [r4, #0]
 8014d72:	4630      	mov	r0, r6
 8014d74:	50d7      	str	r7, [r2, r3]
 8014d76:	2101      	movs	r1, #1
 8014d78:	f000 faba 	bl	80152f0 <uxr_seq_num_add>
 8014d7c:	f10a 0a01 	add.w	sl, sl, #1
 8014d80:	fa1f f38a 	uxth.w	r3, sl
 8014d84:	429d      	cmp	r5, r3
 8014d86:	4606      	mov	r6, r0
 8014d88:	d8ca      	bhi.n	8014d20 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8014d8a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014d8e:	9d05      	ldr	r5, [sp, #20]
 8014d90:	8920      	ldrh	r0, [r4, #8]
 8014d92:	fbb6 f3f0 	udiv	r3, r6, r0
 8014d96:	fb00 6313 	mls	r3, r0, r3, r6
 8014d9a:	b299      	uxth	r1, r3
 8014d9c:	6863      	ldr	r3, [r4, #4]
 8014d9e:	fbb3 f3f0 	udiv	r3, r3, r0
 8014da2:	fb01 f303 	mul.w	r3, r1, r3
 8014da6:	6821      	ldr	r1, [r4, #0]
 8014da8:	3304      	adds	r3, #4
 8014daa:	4419      	add	r1, r3
 8014dac:	463a      	mov	r2, r7
 8014dae:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8014db2:	9000      	str	r0, [sp, #0]
 8014db4:	2300      	movs	r3, #0
 8014db6:	4658      	mov	r0, fp
 8014db8:	f7f8 f966 	bl	800d088 <ucdr_init_buffer_origin_offset>
 8014dbc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8014dc0:	4658      	mov	r0, fp
 8014dc2:	fa1f f289 	uxth.w	r2, r9
 8014dc6:	2302      	movs	r3, #2
 8014dc8:	210d      	movs	r1, #13
 8014dca:	f7f9 fd35 	bl	800e838 <uxr_buffer_submessage_header>
 8014dce:	9b03      	ldr	r3, [sp, #12]
 8014dd0:	8927      	ldrh	r7, [r4, #8]
 8014dd2:	7b20      	ldrb	r0, [r4, #12]
 8014dd4:	f108 0104 	add.w	r1, r8, #4
 8014dd8:	440b      	add	r3, r1
 8014dda:	4619      	mov	r1, r3
 8014ddc:	fbb6 f3f7 	udiv	r3, r6, r7
 8014de0:	fb07 6313 	mls	r3, r7, r3, r6
 8014de4:	f1a5 0208 	sub.w	r2, r5, #8
 8014de8:	b29d      	uxth	r5, r3
 8014dea:	3004      	adds	r0, #4
 8014dec:	6863      	ldr	r3, [r4, #4]
 8014dee:	fbb3 f3f7 	udiv	r3, r3, r7
 8014df2:	fb05 f303 	mul.w	r3, r5, r3
 8014df6:	6825      	ldr	r5, [r4, #0]
 8014df8:	4448      	add	r0, r9
 8014dfa:	50e8      	str	r0, [r5, r3]
 8014dfc:	9d04      	ldr	r5, [sp, #16]
 8014dfe:	eba2 0208 	sub.w	r2, r2, r8
 8014e02:	4628      	mov	r0, r5
 8014e04:	f7f8 f952 	bl	800d0ac <ucdr_init_buffer>
 8014e08:	4628      	mov	r0, r5
 8014e0a:	493c      	ldr	r1, [pc, #240]	@ (8014efc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8014e0c:	4622      	mov	r2, r4
 8014e0e:	f7f8 f921 	bl	800d054 <ucdr_set_on_full_buffer_callback>
 8014e12:	2001      	movs	r0, #1
 8014e14:	81e6      	strh	r6, [r4, #14]
 8014e16:	b011      	add	sp, #68	@ 0x44
 8014e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e1c:	2101      	movs	r1, #1
 8014e1e:	89e0      	ldrh	r0, [r4, #14]
 8014e20:	f000 fa66 	bl	80152f0 <uxr_seq_num_add>
 8014e24:	8921      	ldrh	r1, [r4, #8]
 8014e26:	4605      	mov	r5, r0
 8014e28:	8a60      	ldrh	r0, [r4, #18]
 8014e2a:	f000 fa61 	bl	80152f0 <uxr_seq_num_add>
 8014e2e:	4601      	mov	r1, r0
 8014e30:	4628      	mov	r0, r5
 8014e32:	f000 fa65 	bl	8015300 <uxr_seq_num_cmp>
 8014e36:	2800      	cmp	r0, #0
 8014e38:	dd42      	ble.n	8014ec0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8014e3a:	2000      	movs	r0, #0
 8014e3c:	b011      	add	sp, #68	@ 0x44
 8014e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e42:	8921      	ldrh	r1, [r4, #8]
 8014e44:	8a60      	ldrh	r0, [r4, #18]
 8014e46:	9205      	str	r2, [sp, #20]
 8014e48:	f000 fa52 	bl	80152f0 <uxr_seq_num_add>
 8014e4c:	4601      	mov	r1, r0
 8014e4e:	4630      	mov	r0, r6
 8014e50:	f000 fa56 	bl	8015300 <uxr_seq_num_cmp>
 8014e54:	2800      	cmp	r0, #0
 8014e56:	9a05      	ldr	r2, [sp, #20]
 8014e58:	dcef      	bgt.n	8014e3a <uxr_prepare_reliable_buffer_to_write+0x216>
 8014e5a:	8927      	ldrh	r7, [r4, #8]
 8014e5c:	fbb6 f3f7 	udiv	r3, r6, r7
 8014e60:	fb07 6313 	mls	r3, r7, r3, r6
 8014e64:	b29d      	uxth	r5, r3
 8014e66:	6863      	ldr	r3, [r4, #4]
 8014e68:	6824      	ldr	r4, [r4, #0]
 8014e6a:	fbb3 f3f7 	udiv	r3, r3, r7
 8014e6e:	fb05 f303 	mul.w	r3, r5, r3
 8014e72:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8014e76:	50e2      	str	r2, [r4, r3]
 8014e78:	2300      	movs	r3, #0
 8014e7a:	f8cd 8000 	str.w	r8, [sp]
 8014e7e:	f7f8 f903 	bl	800d088 <ucdr_init_buffer_origin_offset>
 8014e82:	2001      	movs	r0, #1
 8014e84:	e7da      	b.n	8014e3c <uxr_prepare_reliable_buffer_to_write+0x218>
 8014e86:	b293      	uxth	r3, r2
 8014e88:	461a      	mov	r2, r3
 8014e8a:	e737      	b.n	8014cfc <uxr_prepare_reliable_buffer_to_write+0xd8>
 8014e8c:	4630      	mov	r0, r6
 8014e8e:	2101      	movs	r1, #1
 8014e90:	9207      	str	r2, [sp, #28]
 8014e92:	f000 fa2d 	bl	80152f0 <uxr_seq_num_add>
 8014e96:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014e9a:	fbb0 f1fc 	udiv	r1, r0, ip
 8014e9e:	fb0c 0111 	mls	r1, ip, r1, r0
 8014ea2:	4606      	mov	r6, r0
 8014ea4:	b288      	uxth	r0, r1
 8014ea6:	6863      	ldr	r3, [r4, #4]
 8014ea8:	fbb3 f1fc 	udiv	r1, r3, ip
 8014eac:	6823      	ldr	r3, [r4, #0]
 8014eae:	9a07      	ldr	r2, [sp, #28]
 8014eb0:	fb00 f101 	mul.w	r1, r0, r1
 8014eb4:	3104      	adds	r1, #4
 8014eb6:	440b      	add	r3, r1
 8014eb8:	9303      	str	r3, [sp, #12]
 8014eba:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8014ebe:	e70a      	b.n	8014cd6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8014ec0:	8921      	ldrh	r1, [r4, #8]
 8014ec2:	fbb5 f3f1 	udiv	r3, r5, r1
 8014ec6:	fb01 5313 	mls	r3, r1, r3, r5
 8014eca:	b29a      	uxth	r2, r3
 8014ecc:	6863      	ldr	r3, [r4, #4]
 8014ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8014ed2:	6821      	ldr	r1, [r4, #0]
 8014ed4:	9804      	ldr	r0, [sp, #16]
 8014ed6:	fb02 f303 	mul.w	r3, r2, r3
 8014eda:	3304      	adds	r3, #4
 8014edc:	7b22      	ldrb	r2, [r4, #12]
 8014ede:	4419      	add	r1, r3
 8014ee0:	445a      	add	r2, fp
 8014ee2:	f841 2c04 	str.w	r2, [r1, #-4]
 8014ee6:	7b23      	ldrb	r3, [r4, #12]
 8014ee8:	9300      	str	r3, [sp, #0]
 8014eea:	2300      	movs	r3, #0
 8014eec:	f7f8 f8cc 	bl	800d088 <ucdr_init_buffer_origin_offset>
 8014ef0:	81e5      	strh	r5, [r4, #14]
 8014ef2:	2001      	movs	r0, #1
 8014ef4:	e7a2      	b.n	8014e3c <uxr_prepare_reliable_buffer_to_write+0x218>
 8014ef6:	4682      	mov	sl, r0
 8014ef8:	e6ca      	b.n	8014c90 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8014efa:	bf00      	nop
 8014efc:	08014b05 	.word	0x08014b05

08014f00 <uxr_prepare_next_reliable_buffer_to_send>:
 8014f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f02:	4604      	mov	r4, r0
 8014f04:	460f      	mov	r7, r1
 8014f06:	8a00      	ldrh	r0, [r0, #16]
 8014f08:	2101      	movs	r1, #1
 8014f0a:	4616      	mov	r6, r2
 8014f0c:	461d      	mov	r5, r3
 8014f0e:	f000 f9ef 	bl	80152f0 <uxr_seq_num_add>
 8014f12:	8028      	strh	r0, [r5, #0]
 8014f14:	8922      	ldrh	r2, [r4, #8]
 8014f16:	fbb0 f3f2 	udiv	r3, r0, r2
 8014f1a:	fb02 0c13 	mls	ip, r2, r3, r0
 8014f1e:	fa1f fc8c 	uxth.w	ip, ip
 8014f22:	6863      	ldr	r3, [r4, #4]
 8014f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f28:	fb0c fc03 	mul.w	ip, ip, r3
 8014f2c:	6823      	ldr	r3, [r4, #0]
 8014f2e:	89e1      	ldrh	r1, [r4, #14]
 8014f30:	f10c 0c04 	add.w	ip, ip, #4
 8014f34:	4463      	add	r3, ip
 8014f36:	603b      	str	r3, [r7, #0]
 8014f38:	6823      	ldr	r3, [r4, #0]
 8014f3a:	449c      	add	ip, r3
 8014f3c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8014f40:	6033      	str	r3, [r6, #0]
 8014f42:	f000 f9dd 	bl	8015300 <uxr_seq_num_cmp>
 8014f46:	2800      	cmp	r0, #0
 8014f48:	dd01      	ble.n	8014f4e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8014f4a:	2000      	movs	r0, #0
 8014f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f4e:	7b23      	ldrb	r3, [r4, #12]
 8014f50:	6832      	ldr	r2, [r6, #0]
 8014f52:	429a      	cmp	r2, r3
 8014f54:	d9f9      	bls.n	8014f4a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014f56:	8a61      	ldrh	r1, [r4, #18]
 8014f58:	8a20      	ldrh	r0, [r4, #16]
 8014f5a:	f000 f9cd 	bl	80152f8 <uxr_seq_num_sub>
 8014f5e:	8923      	ldrh	r3, [r4, #8]
 8014f60:	4283      	cmp	r3, r0
 8014f62:	d0f2      	beq.n	8014f4a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014f64:	8828      	ldrh	r0, [r5, #0]
 8014f66:	89e3      	ldrh	r3, [r4, #14]
 8014f68:	8220      	strh	r0, [r4, #16]
 8014f6a:	4298      	cmp	r0, r3
 8014f6c:	d001      	beq.n	8014f72 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8014f6e:	2001      	movs	r0, #1
 8014f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f72:	2101      	movs	r1, #1
 8014f74:	f000 f9bc 	bl	80152f0 <uxr_seq_num_add>
 8014f78:	81e0      	strh	r0, [r4, #14]
 8014f7a:	2001      	movs	r0, #1
 8014f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f7e:	bf00      	nop

08014f80 <uxr_update_output_stream_heartbeat_timestamp>:
 8014f80:	b570      	push	{r4, r5, r6, lr}
 8014f82:	8a01      	ldrh	r1, [r0, #16]
 8014f84:	4604      	mov	r4, r0
 8014f86:	8a40      	ldrh	r0, [r0, #18]
 8014f88:	4615      	mov	r5, r2
 8014f8a:	461e      	mov	r6, r3
 8014f8c:	f000 f9b8 	bl	8015300 <uxr_seq_num_cmp>
 8014f90:	2800      	cmp	r0, #0
 8014f92:	db07      	blt.n	8014fa4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014f94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014f98:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014f9c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014fa0:	2000      	movs	r0, #0
 8014fa2:	bd70      	pop	{r4, r5, r6, pc}
 8014fa4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014fa8:	b940      	cbnz	r0, 8014fbc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8014faa:	2301      	movs	r3, #1
 8014fac:	f884 3020 	strb.w	r3, [r4, #32]
 8014fb0:	3564      	adds	r5, #100	@ 0x64
 8014fb2:	f146 0600 	adc.w	r6, r6, #0
 8014fb6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014fba:	bd70      	pop	{r4, r5, r6, pc}
 8014fbc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014fc0:	4295      	cmp	r5, r2
 8014fc2:	eb76 0303 	sbcs.w	r3, r6, r3
 8014fc6:	bfa5      	ittet	ge
 8014fc8:	3001      	addge	r0, #1
 8014fca:	f884 0020 	strbge.w	r0, [r4, #32]
 8014fce:	2000      	movlt	r0, #0
 8014fd0:	2001      	movge	r0, #1
 8014fd2:	e7ed      	b.n	8014fb0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08014fd4 <uxr_begin_output_nack_buffer_it>:
 8014fd4:	8a40      	ldrh	r0, [r0, #18]
 8014fd6:	4770      	bx	lr

08014fd8 <uxr_next_reliable_nack_buffer_to_send>:
 8014fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fdc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8014fe0:	b082      	sub	sp, #8
 8014fe2:	f1b8 0f00 	cmp.w	r8, #0
 8014fe6:	d011      	beq.n	801500c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8014fe8:	4604      	mov	r4, r0
 8014fea:	8818      	ldrh	r0, [r3, #0]
 8014fec:	460e      	mov	r6, r1
 8014fee:	4617      	mov	r7, r2
 8014ff0:	461d      	mov	r5, r3
 8014ff2:	2101      	movs	r1, #1
 8014ff4:	f000 f97c 	bl	80152f0 <uxr_seq_num_add>
 8014ff8:	8028      	strh	r0, [r5, #0]
 8014ffa:	8a21      	ldrh	r1, [r4, #16]
 8014ffc:	f000 f980 	bl	8015300 <uxr_seq_num_cmp>
 8015000:	2800      	cmp	r0, #0
 8015002:	dd07      	ble.n	8015014 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8015004:	f04f 0800 	mov.w	r8, #0
 8015008:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801500c:	4640      	mov	r0, r8
 801500e:	b002      	add	sp, #8
 8015010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015014:	8921      	ldrh	r1, [r4, #8]
 8015016:	8828      	ldrh	r0, [r5, #0]
 8015018:	6823      	ldr	r3, [r4, #0]
 801501a:	fbb0 f2f1 	udiv	r2, r0, r1
 801501e:	fb01 0c12 	mls	ip, r1, r2, r0
 8015022:	fa1f f28c 	uxth.w	r2, ip
 8015026:	9301      	str	r3, [sp, #4]
 8015028:	6863      	ldr	r3, [r4, #4]
 801502a:	fbb3 fcf1 	udiv	ip, r3, r1
 801502e:	9b01      	ldr	r3, [sp, #4]
 8015030:	fb02 fc0c 	mul.w	ip, r2, ip
 8015034:	f10c 0c04 	add.w	ip, ip, #4
 8015038:	4463      	add	r3, ip
 801503a:	6033      	str	r3, [r6, #0]
 801503c:	6823      	ldr	r3, [r4, #0]
 801503e:	4463      	add	r3, ip
 8015040:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015044:	603b      	str	r3, [r7, #0]
 8015046:	7b22      	ldrb	r2, [r4, #12]
 8015048:	429a      	cmp	r2, r3
 801504a:	d0d2      	beq.n	8014ff2 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801504c:	4640      	mov	r0, r8
 801504e:	b002      	add	sp, #8
 8015050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015054 <uxr_process_acknack>:
 8015054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015056:	4604      	mov	r4, r0
 8015058:	460e      	mov	r6, r1
 801505a:	4610      	mov	r0, r2
 801505c:	2101      	movs	r1, #1
 801505e:	f000 f94b 	bl	80152f8 <uxr_seq_num_sub>
 8015062:	8a61      	ldrh	r1, [r4, #18]
 8015064:	f000 f948 	bl	80152f8 <uxr_seq_num_sub>
 8015068:	b1c0      	cbz	r0, 801509c <uxr_process_acknack+0x48>
 801506a:	4605      	mov	r5, r0
 801506c:	2700      	movs	r7, #0
 801506e:	2101      	movs	r1, #1
 8015070:	8a60      	ldrh	r0, [r4, #18]
 8015072:	f000 f93d 	bl	80152f0 <uxr_seq_num_add>
 8015076:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801507a:	fbb0 f1fc 	udiv	r1, r0, ip
 801507e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015082:	fb0c 0111 	mls	r1, ip, r1, r0
 8015086:	b289      	uxth	r1, r1
 8015088:	3701      	adds	r7, #1
 801508a:	fbb3 f3fc 	udiv	r3, r3, ip
 801508e:	fb01 f303 	mul.w	r3, r1, r3
 8015092:	42bd      	cmp	r5, r7
 8015094:	7b21      	ldrb	r1, [r4, #12]
 8015096:	8260      	strh	r0, [r4, #18]
 8015098:	50d1      	str	r1, [r2, r3]
 801509a:	d1e8      	bne.n	801506e <uxr_process_acknack+0x1a>
 801509c:	3e00      	subs	r6, #0
 801509e:	f04f 0300 	mov.w	r3, #0
 80150a2:	bf18      	it	ne
 80150a4:	2601      	movne	r6, #1
 80150a6:	f884 3020 	strb.w	r3, [r4, #32]
 80150aa:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80150ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080150b0 <uxr_is_output_up_to_date>:
 80150b0:	8a01      	ldrh	r1, [r0, #16]
 80150b2:	8a40      	ldrh	r0, [r0, #18]
 80150b4:	b508      	push	{r3, lr}
 80150b6:	f000 f923 	bl	8015300 <uxr_seq_num_cmp>
 80150ba:	fab0 f080 	clz	r0, r0
 80150be:	0940      	lsrs	r0, r0, #5
 80150c0:	bd08      	pop	{r3, pc}
 80150c2:	bf00      	nop

080150c4 <get_available_free_slots>:
 80150c4:	8902      	ldrh	r2, [r0, #8]
 80150c6:	b1da      	cbz	r2, 8015100 <get_available_free_slots+0x3c>
 80150c8:	b530      	push	{r4, r5, lr}
 80150ca:	2100      	movs	r1, #0
 80150cc:	6843      	ldr	r3, [r0, #4]
 80150ce:	6805      	ldr	r5, [r0, #0]
 80150d0:	7b04      	ldrb	r4, [r0, #12]
 80150d2:	fbb3 fef2 	udiv	lr, r3, r2
 80150d6:	4608      	mov	r0, r1
 80150d8:	460b      	mov	r3, r1
 80150da:	fbb3 fcf2 	udiv	ip, r3, r2
 80150de:	fb02 331c 	mls	r3, r2, ip, r3
 80150e2:	b29b      	uxth	r3, r3
 80150e4:	fb0e f303 	mul.w	r3, lr, r3
 80150e8:	3101      	adds	r1, #1
 80150ea:	f855 c003 	ldr.w	ip, [r5, r3]
 80150ee:	4564      	cmp	r4, ip
 80150f0:	bf08      	it	eq
 80150f2:	3001      	addeq	r0, #1
 80150f4:	b28b      	uxth	r3, r1
 80150f6:	bf08      	it	eq
 80150f8:	b280      	uxtheq	r0, r0
 80150fa:	4293      	cmp	r3, r2
 80150fc:	d3ed      	bcc.n	80150da <get_available_free_slots+0x16>
 80150fe:	bd30      	pop	{r4, r5, pc}
 8015100:	4610      	mov	r0, r2
 8015102:	4770      	bx	lr

08015104 <uxr_buffer_cancel_data>:
 8015104:	b510      	push	{r4, lr}
 8015106:	b094      	sub	sp, #80	@ 0x50
 8015108:	2300      	movs	r3, #0
 801510a:	9202      	str	r2, [sp, #8]
 801510c:	9205      	str	r2, [sp, #20]
 801510e:	9301      	str	r3, [sp, #4]
 8015110:	2201      	movs	r2, #1
 8015112:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015116:	f88d 301e 	strb.w	r3, [sp, #30]
 801511a:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801511e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015122:	2308      	movs	r3, #8
 8015124:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8015128:	9300      	str	r3, [sp, #0]
 801512a:	2210      	movs	r2, #16
 801512c:	ab0c      	add	r3, sp, #48	@ 0x30
 801512e:	4604      	mov	r4, r0
 8015130:	9103      	str	r1, [sp, #12]
 8015132:	f7f9 f8e3 	bl	800e2fc <uxr_prepare_stream_to_write_submessage>
 8015136:	b918      	cbnz	r0, 8015140 <uxr_buffer_cancel_data+0x3c>
 8015138:	4604      	mov	r4, r0
 801513a:	4620      	mov	r0, r4
 801513c:	b014      	add	sp, #80	@ 0x50
 801513e:	bd10      	pop	{r4, pc}
 8015140:	9905      	ldr	r1, [sp, #20]
 8015142:	aa06      	add	r2, sp, #24
 8015144:	4620      	mov	r0, r4
 8015146:	f7f9 fa0f 	bl	800e568 <uxr_init_base_object_request>
 801514a:	a906      	add	r1, sp, #24
 801514c:	4604      	mov	r4, r0
 801514e:	a80c      	add	r0, sp, #48	@ 0x30
 8015150:	f7fa fc1e 	bl	800f990 <uxr_serialize_READ_DATA_Payload>
 8015154:	4620      	mov	r0, r4
 8015156:	b014      	add	sp, #80	@ 0x50
 8015158:	bd10      	pop	{r4, pc}
 801515a:	bf00      	nop

0801515c <read_submessage_format>:
 801515c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015160:	b095      	sub	sp, #84	@ 0x54
 8015162:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8015166:	b113      	cbz	r3, 801516e <read_submessage_format+0x12>
 8015168:	b015      	add	sp, #84	@ 0x54
 801516a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801516e:	460c      	mov	r4, r1
 8015170:	4615      	mov	r5, r2
 8015172:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8015176:	4607      	mov	r7, r0
 8015178:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801517a:	9004      	str	r0, [sp, #16]
 801517c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801517e:	9005      	str	r0, [sp, #20]
 8015180:	1a52      	subs	r2, r2, r1
 8015182:	a80c      	add	r0, sp, #48	@ 0x30
 8015184:	4699      	mov	r9, r3
 8015186:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801518a:	f7f7 ff8f 	bl	800d0ac <ucdr_init_buffer>
 801518e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015192:	a80c      	add	r0, sp, #48	@ 0x30
 8015194:	f7f7 ff5e 	bl	800d054 <ucdr_set_on_full_buffer_callback>
 8015198:	69e2      	ldr	r2, [r4, #28]
 801519a:	b19a      	cbz	r2, 80151c4 <read_submessage_format+0x68>
 801519c:	f1b8 0f07 	cmp.w	r8, #7
 80151a0:	f882 9014 	strb.w	r9, [r2, #20]
 80151a4:	d040      	beq.n	8015228 <read_submessage_format+0xcc>
 80151a6:	f1b8 0f08 	cmp.w	r8, #8
 80151aa:	d02e      	beq.n	801520a <read_submessage_format+0xae>
 80151ac:	f1b8 0f06 	cmp.w	r8, #6
 80151b0:	d011      	beq.n	80151d6 <read_submessage_format+0x7a>
 80151b2:	2301      	movs	r3, #1
 80151b4:	7513      	strb	r3, [r2, #20]
 80151b6:	4629      	mov	r1, r5
 80151b8:	4620      	mov	r0, r4
 80151ba:	f7f7 ffc7 	bl	800d14c <ucdr_advance_buffer>
 80151be:	b015      	add	sp, #84	@ 0x54
 80151c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151c4:	f1b8 0f07 	cmp.w	r8, #7
 80151c8:	d02e      	beq.n	8015228 <read_submessage_format+0xcc>
 80151ca:	f1b8 0f08 	cmp.w	r8, #8
 80151ce:	d01c      	beq.n	801520a <read_submessage_format+0xae>
 80151d0:	f1b8 0f06 	cmp.w	r8, #6
 80151d4:	d1ef      	bne.n	80151b6 <read_submessage_format+0x5a>
 80151d6:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80151da:	f1b8 0f00 	cmp.w	r8, #0
 80151de:	d011      	beq.n	8015204 <read_submessage_format+0xa8>
 80151e0:	ab0c      	add	r3, sp, #48	@ 0x30
 80151e2:	e9cd 3500 	strd	r3, r5, [sp]
 80151e6:	2306      	movs	r3, #6
 80151e8:	f88d 3016 	strb.w	r3, [sp, #22]
 80151ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80151f0:	9302      	str	r3, [sp, #8]
 80151f2:	4632      	mov	r2, r6
 80151f4:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80151f8:	4638      	mov	r0, r7
 80151fa:	47c0      	blx	r8
 80151fc:	2301      	movs	r3, #1
 80151fe:	69e2      	ldr	r2, [r4, #28]
 8015200:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015204:	2a00      	cmp	r2, #0
 8015206:	d1d4      	bne.n	80151b2 <read_submessage_format+0x56>
 8015208:	e7d5      	b.n	80151b6 <read_submessage_format+0x5a>
 801520a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801520e:	2b00      	cmp	r3, #0
 8015210:	d0f8      	beq.n	8015204 <read_submessage_format+0xa8>
 8015212:	a906      	add	r1, sp, #24
 8015214:	a80c      	add	r0, sp, #48	@ 0x30
 8015216:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801521a:	f7fa fc7f 	bl	800fb1c <uxr_deserialize_SampleIdentity>
 801521e:	b9a0      	cbnz	r0, 801524a <read_submessage_format+0xee>
 8015220:	69e2      	ldr	r2, [r4, #28]
 8015222:	2a00      	cmp	r2, #0
 8015224:	d1c5      	bne.n	80151b2 <read_submessage_format+0x56>
 8015226:	e7c6      	b.n	80151b6 <read_submessage_format+0x5a>
 8015228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801522c:	b13b      	cbz	r3, 801523e <read_submessage_format+0xe2>
 801522e:	a906      	add	r1, sp, #24
 8015230:	a80c      	add	r0, sp, #48	@ 0x30
 8015232:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8015236:	f7fa f945 	bl	800f4c4 <uxr_deserialize_BaseObjectRequest>
 801523a:	bb60      	cbnz	r0, 8015296 <read_submessage_format+0x13a>
 801523c:	69e2      	ldr	r2, [r4, #28]
 801523e:	68a3      	ldr	r3, [r4, #8]
 8015240:	442b      	add	r3, r5
 8015242:	60a3      	str	r3, [r4, #8]
 8015244:	2a00      	cmp	r2, #0
 8015246:	d1b4      	bne.n	80151b2 <read_submessage_format+0x56>
 8015248:	e7b5      	b.n	80151b6 <read_submessage_format+0x5a>
 801524a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801524e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015250:	1a52      	subs	r2, r2, r1
 8015252:	eba8 0803 	sub.w	r8, r8, r3
 8015256:	a80c      	add	r0, sp, #48	@ 0x30
 8015258:	f7f7 ff28 	bl	800d0ac <ucdr_init_buffer>
 801525c:	44a8      	add	r8, r5
 801525e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015262:	a80c      	add	r0, sp, #48	@ 0x30
 8015264:	f7f7 fef6 	bl	800d054 <ucdr_set_on_full_buffer_callback>
 8015268:	fa1f f888 	uxth.w	r8, r8
 801526c:	ab0c      	add	r3, sp, #48	@ 0x30
 801526e:	9300      	str	r3, [sp, #0]
 8015270:	f8cd 8004 	str.w	r8, [sp, #4]
 8015274:	2108      	movs	r1, #8
 8015276:	f88d 1016 	strb.w	r1, [sp, #22]
 801527a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801527e:	9102      	str	r1, [sp, #8]
 8015280:	ab06      	add	r3, sp, #24
 8015282:	4632      	mov	r2, r6
 8015284:	9905      	ldr	r1, [sp, #20]
 8015286:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801528a:	4638      	mov	r0, r7
 801528c:	47b0      	blx	r6
 801528e:	2301      	movs	r3, #1
 8015290:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015294:	e7c4      	b.n	8015220 <read_submessage_format+0xc4>
 8015296:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801529a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801529c:	1a52      	subs	r2, r2, r1
 801529e:	a80c      	add	r0, sp, #48	@ 0x30
 80152a0:	eba8 0803 	sub.w	r8, r8, r3
 80152a4:	f7f7 ff02 	bl	800d0ac <ucdr_init_buffer>
 80152a8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80152ac:	a80c      	add	r0, sp, #48	@ 0x30
 80152ae:	f7f7 fed1 	bl	800d054 <ucdr_set_on_full_buffer_callback>
 80152b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80152b4:	9300      	str	r3, [sp, #0]
 80152b6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80152ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80152be:	44a8      	add	r8, r5
 80152c0:	fa1f f888 	uxth.w	r8, r8
 80152c4:	f8cd 8004 	str.w	r8, [sp, #4]
 80152c8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80152cc:	2107      	movs	r1, #7
 80152ce:	f88d 1016 	strb.w	r1, [sp, #22]
 80152d2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80152d6:	9102      	str	r1, [sp, #8]
 80152d8:	4632      	mov	r2, r6
 80152da:	b29b      	uxth	r3, r3
 80152dc:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80152e0:	9905      	ldr	r1, [sp, #20]
 80152e2:	4638      	mov	r0, r7
 80152e4:	47b0      	blx	r6
 80152e6:	2301      	movs	r3, #1
 80152e8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80152ec:	e7a6      	b.n	801523c <read_submessage_format+0xe0>
 80152ee:	bf00      	nop

080152f0 <uxr_seq_num_add>:
 80152f0:	4408      	add	r0, r1
 80152f2:	b280      	uxth	r0, r0
 80152f4:	4770      	bx	lr
 80152f6:	bf00      	nop

080152f8 <uxr_seq_num_sub>:
 80152f8:	1a40      	subs	r0, r0, r1
 80152fa:	b280      	uxth	r0, r0
 80152fc:	4770      	bx	lr
 80152fe:	bf00      	nop

08015300 <uxr_seq_num_cmp>:
 8015300:	4288      	cmp	r0, r1
 8015302:	d011      	beq.n	8015328 <uxr_seq_num_cmp+0x28>
 8015304:	d309      	bcc.n	801531a <uxr_seq_num_cmp+0x1a>
 8015306:	4288      	cmp	r0, r1
 8015308:	d910      	bls.n	801532c <uxr_seq_num_cmp+0x2c>
 801530a:	1a40      	subs	r0, r0, r1
 801530c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8015310:	bfd4      	ite	le
 8015312:	2001      	movle	r0, #1
 8015314:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015318:	4770      	bx	lr
 801531a:	1a0b      	subs	r3, r1, r0
 801531c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015320:	daf1      	bge.n	8015306 <uxr_seq_num_cmp+0x6>
 8015322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015326:	4770      	bx	lr
 8015328:	2000      	movs	r0, #0
 801532a:	4770      	bx	lr
 801532c:	2001      	movs	r0, #1
 801532e:	4770      	bx	lr

08015330 <uxr_init_framing_io>:
 8015330:	2300      	movs	r3, #0
 8015332:	7041      	strb	r1, [r0, #1]
 8015334:	7003      	strb	r3, [r0, #0]
 8015336:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8015338:	4770      	bx	lr
 801533a:	bf00      	nop

0801533c <uxr_write_framed_msg>:
 801533c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015340:	4617      	mov	r7, r2
 8015342:	7842      	ldrb	r2, [r0, #1]
 8015344:	b083      	sub	sp, #12
 8015346:	460e      	mov	r6, r1
 8015348:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801534c:	469a      	mov	sl, r3
 801534e:	2901      	cmp	r1, #1
 8015350:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8015354:	4604      	mov	r4, r0
 8015356:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801535a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801535e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8015362:	f240 8137 	bls.w	80155d4 <uxr_write_framed_msg+0x298>
 8015366:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801536a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801536e:	2901      	cmp	r1, #1
 8015370:	f04f 0202 	mov.w	r2, #2
 8015374:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015378:	f240 808f 	bls.w	801549a <uxr_write_framed_msg+0x15e>
 801537c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801537e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8015382:	b2dd      	uxtb	r5, r3
 8015384:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015388:	2203      	movs	r2, #3
 801538a:	2901      	cmp	r1, #1
 801538c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015390:	f240 809a 	bls.w	80154c8 <uxr_write_framed_msg+0x18c>
 8015394:	18a1      	adds	r1, r4, r2
 8015396:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015398:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801539c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80153a0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80153a4:	3201      	adds	r2, #1
 80153a6:	2801      	cmp	r0, #1
 80153a8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80153ac:	f240 80a0 	bls.w	80154f0 <uxr_write_framed_msg+0x1b4>
 80153b0:	18a0      	adds	r0, r4, r2
 80153b2:	3201      	adds	r2, #1
 80153b4:	b2d2      	uxtb	r2, r2
 80153b6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80153ba:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80153be:	2b00      	cmp	r3, #0
 80153c0:	f000 80a9 	beq.w	8015516 <uxr_write_framed_msg+0x1da>
 80153c4:	f04f 0900 	mov.w	r9, #0
 80153c8:	46c8      	mov	r8, r9
 80153ca:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80153ce:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80153d2:	2901      	cmp	r1, #1
 80153d4:	f240 80c3 	bls.w	801555e <uxr_write_framed_msg+0x222>
 80153d8:	2a29      	cmp	r2, #41	@ 0x29
 80153da:	f200 809f 	bhi.w	801551c <uxr_write_framed_msg+0x1e0>
 80153de:	18a1      	adds	r1, r4, r2
 80153e0:	3201      	adds	r2, #1
 80153e2:	b2d2      	uxtb	r2, r2
 80153e4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80153e8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80153ec:	ea89 0303 	eor.w	r3, r9, r3
 80153f0:	498c      	ldr	r1, [pc, #560]	@ (8015624 <uxr_write_framed_msg+0x2e8>)
 80153f2:	b2db      	uxtb	r3, r3
 80153f4:	f108 0801 	add.w	r8, r8, #1
 80153f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80153fc:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8015400:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015402:	4543      	cmp	r3, r8
 8015404:	d8e1      	bhi.n	80153ca <uxr_write_framed_msg+0x8e>
 8015406:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801540a:	fa5f f889 	uxtb.w	r8, r9
 801540e:	9301      	str	r3, [sp, #4]
 8015410:	f04f 0900 	mov.w	r9, #0
 8015414:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8015418:	fa5f f18a 	uxtb.w	r1, sl
 801541c:	2901      	cmp	r1, #1
 801541e:	d921      	bls.n	8015464 <uxr_write_framed_msg+0x128>
 8015420:	2a29      	cmp	r2, #41	@ 0x29
 8015422:	f240 80af 	bls.w	8015584 <uxr_write_framed_msg+0x248>
 8015426:	2500      	movs	r5, #0
 8015428:	e000      	b.n	801542c <uxr_write_framed_msg+0xf0>
 801542a:	b160      	cbz	r0, 8015446 <uxr_write_framed_msg+0x10a>
 801542c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015430:	1b52      	subs	r2, r2, r5
 8015432:	465b      	mov	r3, fp
 8015434:	4421      	add	r1, r4
 8015436:	4638      	mov	r0, r7
 8015438:	47b0      	blx	r6
 801543a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801543e:	4405      	add	r5, r0
 8015440:	4295      	cmp	r5, r2
 8015442:	d3f2      	bcc.n	801542a <uxr_write_framed_msg+0xee>
 8015444:	d003      	beq.n	801544e <uxr_write_framed_msg+0x112>
 8015446:	2000      	movs	r0, #0
 8015448:	b003      	add	sp, #12
 801544a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801544e:	fa5f f18a 	uxtb.w	r1, sl
 8015452:	f04f 0300 	mov.w	r3, #0
 8015456:	2901      	cmp	r1, #1
 8015458:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801545c:	f04f 0200 	mov.w	r2, #0
 8015460:	f200 8090 	bhi.w	8015584 <uxr_write_framed_msg+0x248>
 8015464:	1c51      	adds	r1, r2, #1
 8015466:	b2c9      	uxtb	r1, r1
 8015468:	2929      	cmp	r1, #41	@ 0x29
 801546a:	d8dc      	bhi.n	8015426 <uxr_write_framed_msg+0xea>
 801546c:	18a5      	adds	r5, r4, r2
 801546e:	4421      	add	r1, r4
 8015470:	3202      	adds	r2, #2
 8015472:	f088 0820 	eor.w	r8, r8, #32
 8015476:	4648      	mov	r0, r9
 8015478:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801547c:	b2d2      	uxtb	r2, r2
 801547e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8015482:	f04f 0901 	mov.w	r9, #1
 8015486:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801548a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801548e:	2800      	cmp	r0, #0
 8015490:	f040 8085 	bne.w	801559e <uxr_write_framed_msg+0x262>
 8015494:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015498:	e7bc      	b.n	8015414 <uxr_write_framed_msg+0xd8>
 801549a:	4611      	mov	r1, r2
 801549c:	f04f 0c03 	mov.w	ip, #3
 80154a0:	2204      	movs	r2, #4
 80154a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80154a4:	4421      	add	r1, r4
 80154a6:	b2dd      	uxtb	r5, r3
 80154a8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80154ac:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80154b0:	44a4      	add	ip, r4
 80154b2:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80154b6:	f080 0020 	eor.w	r0, r0, #32
 80154ba:	2901      	cmp	r1, #1
 80154bc:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80154c0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80154c4:	f63f af66 	bhi.w	8015394 <uxr_write_framed_msg+0x58>
 80154c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80154ca:	18a0      	adds	r0, r4, r2
 80154cc:	f085 0520 	eor.w	r5, r5, #32
 80154d0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80154d4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80154d8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80154dc:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80154e0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80154e4:	3202      	adds	r2, #2
 80154e6:	2801      	cmp	r0, #1
 80154e8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80154ec:	f63f af60 	bhi.w	80153b0 <uxr_write_framed_msg+0x74>
 80154f0:	1c50      	adds	r0, r2, #1
 80154f2:	18a5      	adds	r5, r4, r2
 80154f4:	fa54 f080 	uxtab	r0, r4, r0
 80154f8:	3202      	adds	r2, #2
 80154fa:	f081 0120 	eor.w	r1, r1, #32
 80154fe:	b2d2      	uxtb	r2, r2
 8015500:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015504:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8015508:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801550c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015510:	2b00      	cmp	r3, #0
 8015512:	f47f af57 	bne.w	80153c4 <uxr_write_framed_msg+0x88>
 8015516:	9301      	str	r3, [sp, #4]
 8015518:	4698      	mov	r8, r3
 801551a:	e779      	b.n	8015410 <uxr_write_framed_msg+0xd4>
 801551c:	2500      	movs	r5, #0
 801551e:	e001      	b.n	8015524 <uxr_write_framed_msg+0x1e8>
 8015520:	2800      	cmp	r0, #0
 8015522:	d090      	beq.n	8015446 <uxr_write_framed_msg+0x10a>
 8015524:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015528:	1b52      	subs	r2, r2, r5
 801552a:	465b      	mov	r3, fp
 801552c:	4421      	add	r1, r4
 801552e:	4638      	mov	r0, r7
 8015530:	47b0      	blx	r6
 8015532:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015536:	4405      	add	r5, r0
 8015538:	4295      	cmp	r5, r2
 801553a:	d3f1      	bcc.n	8015520 <uxr_write_framed_msg+0x1e4>
 801553c:	d183      	bne.n	8015446 <uxr_write_framed_msg+0x10a>
 801553e:	f04f 0300 	mov.w	r3, #0
 8015542:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015546:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015548:	4543      	cmp	r3, r8
 801554a:	d964      	bls.n	8015616 <uxr_write_framed_msg+0x2da>
 801554c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015550:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015554:	2901      	cmp	r1, #1
 8015556:	f04f 0200 	mov.w	r2, #0
 801555a:	f63f af3d 	bhi.w	80153d8 <uxr_write_framed_msg+0x9c>
 801555e:	1c51      	adds	r1, r2, #1
 8015560:	b2c9      	uxtb	r1, r1
 8015562:	2929      	cmp	r1, #41	@ 0x29
 8015564:	d8da      	bhi.n	801551c <uxr_write_framed_msg+0x1e0>
 8015566:	18a0      	adds	r0, r4, r2
 8015568:	4421      	add	r1, r4
 801556a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 801556e:	3202      	adds	r2, #2
 8015570:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8015574:	b2d2      	uxtb	r2, r2
 8015576:	f083 0020 	eor.w	r0, r3, #32
 801557a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801557e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015582:	e733      	b.n	80153ec <uxr_write_framed_msg+0xb0>
 8015584:	18a1      	adds	r1, r4, r2
 8015586:	3201      	adds	r2, #1
 8015588:	4648      	mov	r0, r9
 801558a:	b2d2      	uxtb	r2, r2
 801558c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015590:	f04f 0901 	mov.w	r9, #1
 8015594:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015598:	2800      	cmp	r0, #0
 801559a:	f43f af7b 	beq.w	8015494 <uxr_write_framed_msg+0x158>
 801559e:	2500      	movs	r5, #0
 80155a0:	e002      	b.n	80155a8 <uxr_write_framed_msg+0x26c>
 80155a2:	2800      	cmp	r0, #0
 80155a4:	f43f af4f 	beq.w	8015446 <uxr_write_framed_msg+0x10a>
 80155a8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80155ac:	1b52      	subs	r2, r2, r5
 80155ae:	465b      	mov	r3, fp
 80155b0:	4421      	add	r1, r4
 80155b2:	4638      	mov	r0, r7
 80155b4:	47b0      	blx	r6
 80155b6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80155ba:	4405      	add	r5, r0
 80155bc:	4295      	cmp	r5, r2
 80155be:	d3f0      	bcc.n	80155a2 <uxr_write_framed_msg+0x266>
 80155c0:	f47f af41 	bne.w	8015446 <uxr_write_framed_msg+0x10a>
 80155c4:	2300      	movs	r3, #0
 80155c6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80155ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80155cc:	b298      	uxth	r0, r3
 80155ce:	b003      	add	sp, #12
 80155d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155d4:	217d      	movs	r1, #125	@ 0x7d
 80155d6:	f082 0220 	eor.w	r2, r2, #32
 80155da:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80155de:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80155e2:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80155e6:	2901      	cmp	r1, #1
 80155e8:	f04f 0203 	mov.w	r2, #3
 80155ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80155f0:	d804      	bhi.n	80155fc <uxr_write_framed_msg+0x2c0>
 80155f2:	4611      	mov	r1, r2
 80155f4:	f04f 0c04 	mov.w	ip, #4
 80155f8:	2205      	movs	r2, #5
 80155fa:	e752      	b.n	80154a2 <uxr_write_framed_msg+0x166>
 80155fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80155fe:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8015602:	b2dd      	uxtb	r5, r3
 8015604:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015608:	2204      	movs	r2, #4
 801560a:	2901      	cmp	r1, #1
 801560c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015610:	f63f aec0 	bhi.w	8015394 <uxr_write_framed_msg+0x58>
 8015614:	e758      	b.n	80154c8 <uxr_write_framed_msg+0x18c>
 8015616:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801561a:	fa5f f889 	uxtb.w	r8, r9
 801561e:	9301      	str	r3, [sp, #4]
 8015620:	2200      	movs	r2, #0
 8015622:	e6f5      	b.n	8015410 <uxr_write_framed_msg+0xd4>
 8015624:	08018494 	.word	0x08018494

08015628 <uxr_framing_read_transport>:
 8015628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801562c:	4604      	mov	r4, r0
 801562e:	b083      	sub	sp, #12
 8015630:	461f      	mov	r7, r3
 8015632:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8015636:	4689      	mov	r9, r1
 8015638:	4692      	mov	sl, r2
 801563a:	f7f9 f943 	bl	800e8c4 <uxr_millis>
 801563e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015642:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8015646:	42b3      	cmp	r3, r6
 8015648:	4680      	mov	r8, r0
 801564a:	d061      	beq.n	8015710 <uxr_framing_read_transport+0xe8>
 801564c:	d81c      	bhi.n	8015688 <uxr_framing_read_transport+0x60>
 801564e:	1e75      	subs	r5, r6, #1
 8015650:	1aed      	subs	r5, r5, r3
 8015652:	b2ed      	uxtb	r5, r5
 8015654:	2600      	movs	r6, #0
 8015656:	455d      	cmp	r5, fp
 8015658:	d81f      	bhi.n	801569a <uxr_framing_read_transport+0x72>
 801565a:	19ab      	adds	r3, r5, r6
 801565c:	455b      	cmp	r3, fp
 801565e:	bf84      	itt	hi
 8015660:	ebab 0605 	subhi.w	r6, fp, r5
 8015664:	b2f6      	uxtbhi	r6, r6
 8015666:	b9ed      	cbnz	r5, 80156a4 <uxr_framing_read_transport+0x7c>
 8015668:	f04f 0b00 	mov.w	fp, #0
 801566c:	f7f9 f92a 	bl	800e8c4 <uxr_millis>
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	eba0 0808 	sub.w	r8, r0, r8
 8015676:	eba3 0308 	sub.w	r3, r3, r8
 801567a:	4658      	mov	r0, fp
 801567c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015680:	603b      	str	r3, [r7, #0]
 8015682:	b003      	add	sp, #12
 8015684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015688:	2e00      	cmp	r6, #0
 801568a:	d049      	beq.n	8015720 <uxr_framing_read_transport+0xf8>
 801568c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8015690:	b2ed      	uxtb	r5, r5
 8015692:	3e01      	subs	r6, #1
 8015694:	455d      	cmp	r5, fp
 8015696:	b2f6      	uxtb	r6, r6
 8015698:	d9df      	bls.n	801565a <uxr_framing_read_transport+0x32>
 801569a:	fa5f f58b 	uxtb.w	r5, fp
 801569e:	2600      	movs	r6, #0
 80156a0:	2d00      	cmp	r5, #0
 80156a2:	d0e1      	beq.n	8015668 <uxr_framing_read_transport+0x40>
 80156a4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80156a8:	3102      	adds	r1, #2
 80156aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80156ac:	9300      	str	r3, [sp, #0]
 80156ae:	683b      	ldr	r3, [r7, #0]
 80156b0:	4421      	add	r1, r4
 80156b2:	462a      	mov	r2, r5
 80156b4:	4650      	mov	r0, sl
 80156b6:	47c8      	blx	r9
 80156b8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80156bc:	4a1a      	ldr	r2, [pc, #104]	@ (8015728 <uxr_framing_read_transport+0x100>)
 80156be:	4403      	add	r3, r0
 80156c0:	0859      	lsrs	r1, r3, #1
 80156c2:	fba2 2101 	umull	r2, r1, r2, r1
 80156c6:	0889      	lsrs	r1, r1, #2
 80156c8:	222a      	movs	r2, #42	@ 0x2a
 80156ca:	fb02 3111 	mls	r1, r2, r1, r3
 80156ce:	4683      	mov	fp, r0
 80156d0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80156d4:	2800      	cmp	r0, #0
 80156d6:	d0c7      	beq.n	8015668 <uxr_framing_read_transport+0x40>
 80156d8:	42a8      	cmp	r0, r5
 80156da:	d1c7      	bne.n	801566c <uxr_framing_read_transport+0x44>
 80156dc:	2e00      	cmp	r6, #0
 80156de:	d0c5      	beq.n	801566c <uxr_framing_read_transport+0x44>
 80156e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80156e2:	9300      	str	r3, [sp, #0]
 80156e4:	3102      	adds	r1, #2
 80156e6:	4632      	mov	r2, r6
 80156e8:	4421      	add	r1, r4
 80156ea:	2300      	movs	r3, #0
 80156ec:	4650      	mov	r0, sl
 80156ee:	47c8      	blx	r9
 80156f0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80156f4:	4a0c      	ldr	r2, [pc, #48]	@ (8015728 <uxr_framing_read_transport+0x100>)
 80156f6:	180b      	adds	r3, r1, r0
 80156f8:	0859      	lsrs	r1, r3, #1
 80156fa:	fba2 1201 	umull	r1, r2, r2, r1
 80156fe:	0892      	lsrs	r2, r2, #2
 8015700:	212a      	movs	r1, #42	@ 0x2a
 8015702:	fb01 3312 	mls	r3, r1, r2, r3
 8015706:	eb00 0b05 	add.w	fp, r0, r5
 801570a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801570e:	e7ad      	b.n	801566c <uxr_framing_read_transport+0x44>
 8015710:	2600      	movs	r6, #0
 8015712:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8015716:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8015718:	d9bf      	bls.n	801569a <uxr_framing_read_transport+0x72>
 801571a:	2102      	movs	r1, #2
 801571c:	2529      	movs	r5, #41	@ 0x29
 801571e:	e7c4      	b.n	80156aa <uxr_framing_read_transport+0x82>
 8015720:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8015724:	b2ed      	uxtb	r5, r5
 8015726:	e796      	b.n	8015656 <uxr_framing_read_transport+0x2e>
 8015728:	30c30c31 	.word	0x30c30c31

0801572c <uxr_read_framed_msg>:
 801572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015730:	461e      	mov	r6, r3
 8015732:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8015736:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801573a:	429d      	cmp	r5, r3
 801573c:	b083      	sub	sp, #12
 801573e:	4604      	mov	r4, r0
 8015740:	4688      	mov	r8, r1
 8015742:	4691      	mov	r9, r2
 8015744:	f000 8188 	beq.w	8015a58 <uxr_read_framed_msg+0x32c>
 8015748:	7823      	ldrb	r3, [r4, #0]
 801574a:	4dc1      	ldr	r5, [pc, #772]	@ (8015a50 <uxr_read_framed_msg+0x324>)
 801574c:	4fc1      	ldr	r7, [pc, #772]	@ (8015a54 <uxr_read_framed_msg+0x328>)
 801574e:	2b07      	cmp	r3, #7
 8015750:	d8fd      	bhi.n	801574e <uxr_read_framed_msg+0x22>
 8015752:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015756:	0115      	.short	0x0115
 8015758:	00d600f6 	.word	0x00d600f6
 801575c:	009000b9 	.word	0x009000b9
 8015760:	0030004d 	.word	0x0030004d
 8015764:	0008      	.short	0x0008
 8015766:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801576a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801576e:	4299      	cmp	r1, r3
 8015770:	f000 814a 	beq.w	8015a08 <uxr_read_framed_msg+0x2dc>
 8015774:	18e2      	adds	r2, r4, r3
 8015776:	7892      	ldrb	r2, [r2, #2]
 8015778:	2a7d      	cmp	r2, #125	@ 0x7d
 801577a:	f000 8199 	beq.w	8015ab0 <uxr_read_framed_msg+0x384>
 801577e:	3301      	adds	r3, #1
 8015780:	0858      	lsrs	r0, r3, #1
 8015782:	fba5 1000 	umull	r1, r0, r5, r0
 8015786:	0880      	lsrs	r0, r0, #2
 8015788:	212a      	movs	r1, #42	@ 0x2a
 801578a:	fb01 3310 	mls	r3, r1, r0, r3
 801578e:	2a7e      	cmp	r2, #126	@ 0x7e
 8015790:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015794:	f000 8252 	beq.w	8015c3c <uxr_read_framed_msg+0x510>
 8015798:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801579a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801579c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80157a0:	b29b      	uxth	r3, r3
 80157a2:	2200      	movs	r2, #0
 80157a4:	4299      	cmp	r1, r3
 80157a6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80157a8:	7022      	strb	r2, [r4, #0]
 80157aa:	f000 8179 	beq.w	8015aa0 <uxr_read_framed_msg+0x374>
 80157ae:	2000      	movs	r0, #0
 80157b0:	b003      	add	sp, #12
 80157b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157b6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80157ba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80157be:	4299      	cmp	r1, r3
 80157c0:	f000 8131 	beq.w	8015a26 <uxr_read_framed_msg+0x2fa>
 80157c4:	18e2      	adds	r2, r4, r3
 80157c6:	7890      	ldrb	r0, [r2, #2]
 80157c8:	287d      	cmp	r0, #125	@ 0x7d
 80157ca:	f000 8190 	beq.w	8015aee <uxr_read_framed_msg+0x3c2>
 80157ce:	3301      	adds	r3, #1
 80157d0:	085a      	lsrs	r2, r3, #1
 80157d2:	fba5 1202 	umull	r1, r2, r5, r2
 80157d6:	0892      	lsrs	r2, r2, #2
 80157d8:	212a      	movs	r1, #42	@ 0x2a
 80157da:	fb01 3312 	mls	r3, r1, r2, r3
 80157de:	287e      	cmp	r0, #126	@ 0x7e
 80157e0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80157e4:	f000 821a 	beq.w	8015c1c <uxr_read_framed_msg+0x4f0>
 80157e8:	2307      	movs	r3, #7
 80157ea:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80157ec:	7023      	strb	r3, [r4, #0]
 80157ee:	e7ae      	b.n	801574e <uxr_read_framed_msg+0x22>
 80157f0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80157f2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80157f6:	459e      	cmp	lr, r3
 80157f8:	d938      	bls.n	801586c <uxr_read_framed_msg+0x140>
 80157fa:	ee07 8a90 	vmov	s15, r8
 80157fe:	212a      	movs	r1, #42	@ 0x2a
 8015800:	e020      	b.n	8015844 <uxr_read_framed_msg+0x118>
 8015802:	f89b c002 	ldrb.w	ip, [fp, #2]
 8015806:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801580a:	f000 80d4 	beq.w	80159b6 <uxr_read_framed_msg+0x28a>
 801580e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015812:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015816:	f000 8219 	beq.w	8015c4c <uxr_read_framed_msg+0x520>
 801581a:	f806 c003 	strb.w	ip, [r6, r3]
 801581e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8015822:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015824:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015828:	ea8a 000c 	eor.w	r0, sl, ip
 801582c:	b2c0      	uxtb	r0, r0
 801582e:	3301      	adds	r3, #1
 8015830:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8015834:	b29b      	uxth	r3, r3
 8015836:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801583a:	4573      	cmp	r3, lr
 801583c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801583e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8015840:	f080 8120 	bcs.w	8015a84 <uxr_read_framed_msg+0x358>
 8015844:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8015848:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801584c:	f100 0c01 	add.w	ip, r0, #1
 8015850:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015854:	fba5 8202 	umull	r8, r2, r5, r2
 8015858:	0892      	lsrs	r2, r2, #2
 801585a:	4582      	cmp	sl, r0
 801585c:	eb04 0b00 	add.w	fp, r4, r0
 8015860:	fb01 c212 	mls	r2, r1, r2, ip
 8015864:	d1cd      	bne.n	8015802 <uxr_read_framed_msg+0xd6>
 8015866:	ee17 8a90 	vmov	r8, s15
 801586a:	459e      	cmp	lr, r3
 801586c:	f040 8111 	bne.w	8015a92 <uxr_read_framed_msg+0x366>
 8015870:	2306      	movs	r3, #6
 8015872:	7023      	strb	r3, [r4, #0]
 8015874:	e76b      	b.n	801574e <uxr_read_framed_msg+0x22>
 8015876:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801587a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801587e:	4298      	cmp	r0, r3
 8015880:	f000 80c2 	beq.w	8015a08 <uxr_read_framed_msg+0x2dc>
 8015884:	18e2      	adds	r2, r4, r3
 8015886:	7891      	ldrb	r1, [r2, #2]
 8015888:	297d      	cmp	r1, #125	@ 0x7d
 801588a:	f000 814c 	beq.w	8015b26 <uxr_read_framed_msg+0x3fa>
 801588e:	3301      	adds	r3, #1
 8015890:	085a      	lsrs	r2, r3, #1
 8015892:	fba5 0202 	umull	r0, r2, r5, r2
 8015896:	0892      	lsrs	r2, r2, #2
 8015898:	202a      	movs	r0, #42	@ 0x2a
 801589a:	fb00 3312 	mls	r3, r0, r2, r3
 801589e:	297e      	cmp	r1, #126	@ 0x7e
 80158a0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80158a4:	f000 81ca 	beq.w	8015c3c <uxr_read_framed_msg+0x510>
 80158a8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80158aa:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80158ae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80158b0:	b29b      	uxth	r3, r3
 80158b2:	2000      	movs	r0, #0
 80158b4:	428b      	cmp	r3, r1
 80158b6:	8623      	strh	r3, [r4, #48]	@ 0x30
 80158b8:	8660      	strh	r0, [r4, #50]	@ 0x32
 80158ba:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80158bc:	f240 80df 	bls.w	8015a7e <uxr_read_framed_msg+0x352>
 80158c0:	7020      	strb	r0, [r4, #0]
 80158c2:	b003      	add	sp, #12
 80158c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158c8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80158cc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80158d0:	4299      	cmp	r1, r3
 80158d2:	f000 80a8 	beq.w	8015a26 <uxr_read_framed_msg+0x2fa>
 80158d6:	18e2      	adds	r2, r4, r3
 80158d8:	7890      	ldrb	r0, [r2, #2]
 80158da:	287d      	cmp	r0, #125	@ 0x7d
 80158dc:	f000 8164 	beq.w	8015ba8 <uxr_read_framed_msg+0x47c>
 80158e0:	3301      	adds	r3, #1
 80158e2:	085a      	lsrs	r2, r3, #1
 80158e4:	fba5 1202 	umull	r1, r2, r5, r2
 80158e8:	0892      	lsrs	r2, r2, #2
 80158ea:	212a      	movs	r1, #42	@ 0x2a
 80158ec:	fb01 3312 	mls	r3, r1, r2, r3
 80158f0:	287e      	cmp	r0, #126	@ 0x7e
 80158f2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80158f6:	f000 8191 	beq.w	8015c1c <uxr_read_framed_msg+0x4f0>
 80158fa:	2304      	movs	r3, #4
 80158fc:	8620      	strh	r0, [r4, #48]	@ 0x30
 80158fe:	7023      	strb	r3, [r4, #0]
 8015900:	e725      	b.n	801574e <uxr_read_framed_msg+0x22>
 8015902:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015906:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801590a:	4290      	cmp	r0, r2
 801590c:	f000 80b3 	beq.w	8015a76 <uxr_read_framed_msg+0x34a>
 8015910:	18a3      	adds	r3, r4, r2
 8015912:	7899      	ldrb	r1, [r3, #2]
 8015914:	297d      	cmp	r1, #125	@ 0x7d
 8015916:	f000 8164 	beq.w	8015be2 <uxr_read_framed_msg+0x4b6>
 801591a:	3201      	adds	r2, #1
 801591c:	0850      	lsrs	r0, r2, #1
 801591e:	fba5 3000 	umull	r3, r0, r5, r0
 8015922:	0880      	lsrs	r0, r0, #2
 8015924:	232a      	movs	r3, #42	@ 0x2a
 8015926:	fb03 2210 	mls	r2, r3, r0, r2
 801592a:	297e      	cmp	r1, #126	@ 0x7e
 801592c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015930:	f000 8188 	beq.w	8015c44 <uxr_read_framed_msg+0x518>
 8015934:	7863      	ldrb	r3, [r4, #1]
 8015936:	428b      	cmp	r3, r1
 8015938:	bf0c      	ite	eq
 801593a:	2303      	moveq	r3, #3
 801593c:	2300      	movne	r3, #0
 801593e:	7023      	strb	r3, [r4, #0]
 8015940:	e705      	b.n	801574e <uxr_read_framed_msg+0x22>
 8015942:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015946:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801594a:	2200      	movs	r2, #0
 801594c:	4299      	cmp	r1, r3
 801594e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8015952:	d06c      	beq.n	8015a2e <uxr_read_framed_msg+0x302>
 8015954:	18e2      	adds	r2, r4, r3
 8015956:	7890      	ldrb	r0, [r2, #2]
 8015958:	287d      	cmp	r0, #125	@ 0x7d
 801595a:	f000 8101 	beq.w	8015b60 <uxr_read_framed_msg+0x434>
 801595e:	3301      	adds	r3, #1
 8015960:	085a      	lsrs	r2, r3, #1
 8015962:	fba5 1202 	umull	r1, r2, r5, r2
 8015966:	0892      	lsrs	r2, r2, #2
 8015968:	212a      	movs	r1, #42	@ 0x2a
 801596a:	fb01 3312 	mls	r3, r1, r2, r3
 801596e:	287e      	cmp	r0, #126	@ 0x7e
 8015970:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8015974:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015978:	d059      	beq.n	8015a2e <uxr_read_framed_msg+0x302>
 801597a:	2302      	movs	r3, #2
 801597c:	7023      	strb	r3, [r4, #0]
 801597e:	e6e6      	b.n	801574e <uxr_read_framed_msg+0x22>
 8015980:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8015984:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015988:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801598c:	1c51      	adds	r1, r2, #1
 801598e:	084b      	lsrs	r3, r1, #1
 8015990:	fba5 c303 	umull	ip, r3, r5, r3
 8015994:	089b      	lsrs	r3, r3, #2
 8015996:	fb0e 1313 	mls	r3, lr, r3, r1
 801599a:	4592      	cmp	sl, r2
 801599c:	eb04 0002 	add.w	r0, r4, r2
 80159a0:	b2da      	uxtb	r2, r3
 80159a2:	f43f af04 	beq.w	80157ae <uxr_read_framed_msg+0x82>
 80159a6:	7883      	ldrb	r3, [r0, #2]
 80159a8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80159ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80159ae:	d1ed      	bne.n	801598c <uxr_read_framed_msg+0x260>
 80159b0:	2301      	movs	r3, #1
 80159b2:	7023      	strb	r3, [r4, #0]
 80159b4:	e6cb      	b.n	801574e <uxr_read_framed_msg+0x22>
 80159b6:	f100 0c01 	add.w	ip, r0, #1
 80159ba:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80159be:	fba5 8202 	umull	r8, r2, r5, r2
 80159c2:	0892      	lsrs	r2, r2, #2
 80159c4:	fb01 c212 	mls	r2, r1, r2, ip
 80159c8:	eb04 0c02 	add.w	ip, r4, r2
 80159cc:	b2d2      	uxtb	r2, r2
 80159ce:	4592      	cmp	sl, r2
 80159d0:	f100 0002 	add.w	r0, r0, #2
 80159d4:	f43f af47 	beq.w	8015866 <uxr_read_framed_msg+0x13a>
 80159d8:	0842      	lsrs	r2, r0, #1
 80159da:	f89c a002 	ldrb.w	sl, [ip, #2]
 80159de:	fba5 8202 	umull	r8, r2, r5, r2
 80159e2:	0892      	lsrs	r2, r2, #2
 80159e4:	fb01 0012 	mls	r0, r1, r2, r0
 80159e8:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 80159ec:	f08a 0c20 	eor.w	ip, sl, #32
 80159f0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80159f4:	f47f af11 	bne.w	801581a <uxr_read_framed_msg+0xee>
 80159f8:	459e      	cmp	lr, r3
 80159fa:	ee17 8a90 	vmov	r8, s15
 80159fe:	f43f af37 	beq.w	8015870 <uxr_read_framed_msg+0x144>
 8015a02:	2301      	movs	r3, #1
 8015a04:	7023      	strb	r3, [r4, #0]
 8015a06:	e6a2      	b.n	801574e <uxr_read_framed_msg+0x22>
 8015a08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a0a:	9300      	str	r3, [sp, #0]
 8015a0c:	2301      	movs	r3, #1
 8015a0e:	9301      	str	r3, [sp, #4]
 8015a10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a12:	464a      	mov	r2, r9
 8015a14:	4641      	mov	r1, r8
 8015a16:	4620      	mov	r0, r4
 8015a18:	f7ff fe06 	bl	8015628 <uxr_framing_read_transport>
 8015a1c:	2800      	cmp	r0, #0
 8015a1e:	f43f aec6 	beq.w	80157ae <uxr_read_framed_msg+0x82>
 8015a22:	7823      	ldrb	r3, [r4, #0]
 8015a24:	e693      	b.n	801574e <uxr_read_framed_msg+0x22>
 8015a26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a28:	9300      	str	r3, [sp, #0]
 8015a2a:	2302      	movs	r3, #2
 8015a2c:	e7ef      	b.n	8015a0e <uxr_read_framed_msg+0x2e2>
 8015a2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a30:	9300      	str	r3, [sp, #0]
 8015a32:	2304      	movs	r3, #4
 8015a34:	9301      	str	r3, [sp, #4]
 8015a36:	464a      	mov	r2, r9
 8015a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a3a:	4641      	mov	r1, r8
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	f7ff fdf3 	bl	8015628 <uxr_framing_read_transport>
 8015a42:	2800      	cmp	r0, #0
 8015a44:	d1ed      	bne.n	8015a22 <uxr_read_framed_msg+0x2f6>
 8015a46:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015a4a:	2b7e      	cmp	r3, #126	@ 0x7e
 8015a4c:	d0e9      	beq.n	8015a22 <uxr_read_framed_msg+0x2f6>
 8015a4e:	e6ae      	b.n	80157ae <uxr_read_framed_msg+0x82>
 8015a50:	30c30c31 	.word	0x30c30c31
 8015a54:	08018494 	.word	0x08018494
 8015a58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a5a:	9300      	str	r3, [sp, #0]
 8015a5c:	2305      	movs	r3, #5
 8015a5e:	9301      	str	r3, [sp, #4]
 8015a60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a62:	f7ff fde1 	bl	8015628 <uxr_framing_read_transport>
 8015a66:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015a6a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	f43f ae9d 	beq.w	80157ae <uxr_read_framed_msg+0x82>
 8015a74:	e668      	b.n	8015748 <uxr_read_framed_msg+0x1c>
 8015a76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a78:	9300      	str	r3, [sp, #0]
 8015a7a:	2303      	movs	r3, #3
 8015a7c:	e7c7      	b.n	8015a0e <uxr_read_framed_msg+0x2e2>
 8015a7e:	2305      	movs	r3, #5
 8015a80:	7023      	strb	r3, [r4, #0]
 8015a82:	e664      	b.n	801574e <uxr_read_framed_msg+0x22>
 8015a84:	ee17 8a90 	vmov	r8, s15
 8015a88:	f43f aef2 	beq.w	8015870 <uxr_read_framed_msg+0x144>
 8015a8c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015a90:	d08e      	beq.n	80159b0 <uxr_read_framed_msg+0x284>
 8015a92:	ebae 0303 	sub.w	r3, lr, r3
 8015a96:	3302      	adds	r3, #2
 8015a98:	9301      	str	r3, [sp, #4]
 8015a9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a9c:	9300      	str	r3, [sp, #0]
 8015a9e:	e7b7      	b.n	8015a10 <uxr_read_framed_msg+0x2e4>
 8015aa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015aa2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015aa6:	7013      	strb	r3, [r2, #0]
 8015aa8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8015aaa:	b003      	add	sp, #12
 8015aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ab0:	f103 0c01 	add.w	ip, r3, #1
 8015ab4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015ab8:	fba5 0202 	umull	r0, r2, r5, r2
 8015abc:	0892      	lsrs	r2, r2, #2
 8015abe:	202a      	movs	r0, #42	@ 0x2a
 8015ac0:	fb00 c212 	mls	r2, r0, r2, ip
 8015ac4:	fa5f fc82 	uxtb.w	ip, r2
 8015ac8:	4561      	cmp	r1, ip
 8015aca:	d09d      	beq.n	8015a08 <uxr_read_framed_msg+0x2dc>
 8015acc:	3302      	adds	r3, #2
 8015ace:	4422      	add	r2, r4
 8015ad0:	0859      	lsrs	r1, r3, #1
 8015ad2:	7892      	ldrb	r2, [r2, #2]
 8015ad4:	fba5 c101 	umull	ip, r1, r5, r1
 8015ad8:	0889      	lsrs	r1, r1, #2
 8015ada:	fb00 3311 	mls	r3, r0, r1, r3
 8015ade:	2a7e      	cmp	r2, #126	@ 0x7e
 8015ae0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015ae4:	f000 80aa 	beq.w	8015c3c <uxr_read_framed_msg+0x510>
 8015ae8:	f082 0220 	eor.w	r2, r2, #32
 8015aec:	e654      	b.n	8015798 <uxr_read_framed_msg+0x6c>
 8015aee:	1c58      	adds	r0, r3, #1
 8015af0:	0842      	lsrs	r2, r0, #1
 8015af2:	fba5 c202 	umull	ip, r2, r5, r2
 8015af6:	0892      	lsrs	r2, r2, #2
 8015af8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015afc:	fb0c 0212 	mls	r2, ip, r2, r0
 8015b00:	b2d0      	uxtb	r0, r2
 8015b02:	4281      	cmp	r1, r0
 8015b04:	d08f      	beq.n	8015a26 <uxr_read_framed_msg+0x2fa>
 8015b06:	4422      	add	r2, r4
 8015b08:	3302      	adds	r3, #2
 8015b0a:	7890      	ldrb	r0, [r2, #2]
 8015b0c:	085a      	lsrs	r2, r3, #1
 8015b0e:	fba5 1202 	umull	r1, r2, r5, r2
 8015b12:	0892      	lsrs	r2, r2, #2
 8015b14:	fb0c 3312 	mls	r3, ip, r2, r3
 8015b18:	287e      	cmp	r0, #126	@ 0x7e
 8015b1a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015b1e:	d07d      	beq.n	8015c1c <uxr_read_framed_msg+0x4f0>
 8015b20:	f080 0020 	eor.w	r0, r0, #32
 8015b24:	e660      	b.n	80157e8 <uxr_read_framed_msg+0xbc>
 8015b26:	1c59      	adds	r1, r3, #1
 8015b28:	084a      	lsrs	r2, r1, #1
 8015b2a:	fba5 c202 	umull	ip, r2, r5, r2
 8015b2e:	0892      	lsrs	r2, r2, #2
 8015b30:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015b34:	fb0c 1212 	mls	r2, ip, r2, r1
 8015b38:	b2d1      	uxtb	r1, r2
 8015b3a:	4288      	cmp	r0, r1
 8015b3c:	f43f af64 	beq.w	8015a08 <uxr_read_framed_msg+0x2dc>
 8015b40:	4422      	add	r2, r4
 8015b42:	3302      	adds	r3, #2
 8015b44:	7891      	ldrb	r1, [r2, #2]
 8015b46:	085a      	lsrs	r2, r3, #1
 8015b48:	fba5 0202 	umull	r0, r2, r5, r2
 8015b4c:	0892      	lsrs	r2, r2, #2
 8015b4e:	fb0c 3312 	mls	r3, ip, r2, r3
 8015b52:	297e      	cmp	r1, #126	@ 0x7e
 8015b54:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015b58:	d070      	beq.n	8015c3c <uxr_read_framed_msg+0x510>
 8015b5a:	f081 0120 	eor.w	r1, r1, #32
 8015b5e:	e6a3      	b.n	80158a8 <uxr_read_framed_msg+0x17c>
 8015b60:	f103 0c01 	add.w	ip, r3, #1
 8015b64:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015b68:	fba5 0202 	umull	r0, r2, r5, r2
 8015b6c:	0892      	lsrs	r2, r2, #2
 8015b6e:	202a      	movs	r0, #42	@ 0x2a
 8015b70:	fb00 c212 	mls	r2, r0, r2, ip
 8015b74:	fa5f fc82 	uxtb.w	ip, r2
 8015b78:	4561      	cmp	r1, ip
 8015b7a:	f43f af58 	beq.w	8015a2e <uxr_read_framed_msg+0x302>
 8015b7e:	4422      	add	r2, r4
 8015b80:	3302      	adds	r3, #2
 8015b82:	7891      	ldrb	r1, [r2, #2]
 8015b84:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8015b88:	085a      	lsrs	r2, r3, #1
 8015b8a:	fba5 c202 	umull	ip, r2, r5, r2
 8015b8e:	0892      	lsrs	r2, r2, #2
 8015b90:	fb00 3312 	mls	r3, r0, r2, r3
 8015b94:	297e      	cmp	r1, #126	@ 0x7e
 8015b96:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015b9a:	f43f af48 	beq.w	8015a2e <uxr_read_framed_msg+0x302>
 8015b9e:	f081 0120 	eor.w	r1, r1, #32
 8015ba2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8015ba6:	e6e8      	b.n	801597a <uxr_read_framed_msg+0x24e>
 8015ba8:	1c58      	adds	r0, r3, #1
 8015baa:	0842      	lsrs	r2, r0, #1
 8015bac:	fba5 c202 	umull	ip, r2, r5, r2
 8015bb0:	0892      	lsrs	r2, r2, #2
 8015bb2:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015bb6:	fb0c 0212 	mls	r2, ip, r2, r0
 8015bba:	b2d0      	uxtb	r0, r2
 8015bbc:	4281      	cmp	r1, r0
 8015bbe:	f43f af32 	beq.w	8015a26 <uxr_read_framed_msg+0x2fa>
 8015bc2:	4422      	add	r2, r4
 8015bc4:	3302      	adds	r3, #2
 8015bc6:	7890      	ldrb	r0, [r2, #2]
 8015bc8:	085a      	lsrs	r2, r3, #1
 8015bca:	fba5 1202 	umull	r1, r2, r5, r2
 8015bce:	0892      	lsrs	r2, r2, #2
 8015bd0:	fb0c 3312 	mls	r3, ip, r2, r3
 8015bd4:	287e      	cmp	r0, #126	@ 0x7e
 8015bd6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015bda:	d01f      	beq.n	8015c1c <uxr_read_framed_msg+0x4f0>
 8015bdc:	f080 0020 	eor.w	r0, r0, #32
 8015be0:	e68b      	b.n	80158fa <uxr_read_framed_msg+0x1ce>
 8015be2:	1c51      	adds	r1, r2, #1
 8015be4:	084b      	lsrs	r3, r1, #1
 8015be6:	fba5 c303 	umull	ip, r3, r5, r3
 8015bea:	089b      	lsrs	r3, r3, #2
 8015bec:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015bf0:	fb0c 1313 	mls	r3, ip, r3, r1
 8015bf4:	b2d9      	uxtb	r1, r3
 8015bf6:	4288      	cmp	r0, r1
 8015bf8:	f43f af3d 	beq.w	8015a76 <uxr_read_framed_msg+0x34a>
 8015bfc:	3202      	adds	r2, #2
 8015bfe:	4423      	add	r3, r4
 8015c00:	0850      	lsrs	r0, r2, #1
 8015c02:	789b      	ldrb	r3, [r3, #2]
 8015c04:	fba5 1000 	umull	r1, r0, r5, r0
 8015c08:	0880      	lsrs	r0, r0, #2
 8015c0a:	fb0c 2210 	mls	r2, ip, r0, r2
 8015c0e:	2b7e      	cmp	r3, #126	@ 0x7e
 8015c10:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015c14:	d016      	beq.n	8015c44 <uxr_read_framed_msg+0x518>
 8015c16:	f083 0120 	eor.w	r1, r3, #32
 8015c1a:	e68b      	b.n	8015934 <uxr_read_framed_msg+0x208>
 8015c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c1e:	9300      	str	r3, [sp, #0]
 8015c20:	2302      	movs	r3, #2
 8015c22:	9301      	str	r3, [sp, #4]
 8015c24:	464a      	mov	r2, r9
 8015c26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c28:	4641      	mov	r1, r8
 8015c2a:	4620      	mov	r0, r4
 8015c2c:	f7ff fcfc 	bl	8015628 <uxr_framing_read_transport>
 8015c30:	2800      	cmp	r0, #0
 8015c32:	f47f aef6 	bne.w	8015a22 <uxr_read_framed_msg+0x2f6>
 8015c36:	2301      	movs	r3, #1
 8015c38:	7023      	strb	r3, [r4, #0]
 8015c3a:	e588      	b.n	801574e <uxr_read_framed_msg+0x22>
 8015c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c3e:	9300      	str	r3, [sp, #0]
 8015c40:	2301      	movs	r3, #1
 8015c42:	e7ee      	b.n	8015c22 <uxr_read_framed_msg+0x4f6>
 8015c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c46:	9300      	str	r3, [sp, #0]
 8015c48:	2303      	movs	r3, #3
 8015c4a:	e7ea      	b.n	8015c22 <uxr_read_framed_msg+0x4f6>
 8015c4c:	ee17 8a90 	vmov	r8, s15
 8015c50:	e6ae      	b.n	80159b0 <uxr_read_framed_msg+0x284>
 8015c52:	bf00      	nop

08015c54 <rcl_get_default_domain_id>:
 8015c54:	b530      	push	{r4, r5, lr}
 8015c56:	b083      	sub	sp, #12
 8015c58:	2300      	movs	r3, #0
 8015c5a:	9300      	str	r3, [sp, #0]
 8015c5c:	b1d0      	cbz	r0, 8015c94 <rcl_get_default_domain_id+0x40>
 8015c5e:	4604      	mov	r4, r0
 8015c60:	4669      	mov	r1, sp
 8015c62:	4815      	ldr	r0, [pc, #84]	@ (8015cb8 <rcl_get_default_domain_id+0x64>)
 8015c64:	f7fc fd64 	bl	8012730 <rcutils_get_env>
 8015c68:	4602      	mov	r2, r0
 8015c6a:	b110      	cbz	r0, 8015c72 <rcl_get_default_domain_id+0x1e>
 8015c6c:	2001      	movs	r0, #1
 8015c6e:	b003      	add	sp, #12
 8015c70:	bd30      	pop	{r4, r5, pc}
 8015c72:	9b00      	ldr	r3, [sp, #0]
 8015c74:	b18b      	cbz	r3, 8015c9a <rcl_get_default_domain_id+0x46>
 8015c76:	7818      	ldrb	r0, [r3, #0]
 8015c78:	2800      	cmp	r0, #0
 8015c7a:	d0f8      	beq.n	8015c6e <rcl_get_default_domain_id+0x1a>
 8015c7c:	a901      	add	r1, sp, #4
 8015c7e:	4618      	mov	r0, r3
 8015c80:	9201      	str	r2, [sp, #4]
 8015c82:	f000 feb1 	bl	80169e8 <strtoul>
 8015c86:	4605      	mov	r5, r0
 8015c88:	b150      	cbz	r0, 8015ca0 <rcl_get_default_domain_id+0x4c>
 8015c8a:	1c43      	adds	r3, r0, #1
 8015c8c:	d00d      	beq.n	8015caa <rcl_get_default_domain_id+0x56>
 8015c8e:	6025      	str	r5, [r4, #0]
 8015c90:	2000      	movs	r0, #0
 8015c92:	e7ec      	b.n	8015c6e <rcl_get_default_domain_id+0x1a>
 8015c94:	200b      	movs	r0, #11
 8015c96:	b003      	add	sp, #12
 8015c98:	bd30      	pop	{r4, r5, pc}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	b003      	add	sp, #12
 8015c9e:	bd30      	pop	{r4, r5, pc}
 8015ca0:	9b01      	ldr	r3, [sp, #4]
 8015ca2:	781b      	ldrb	r3, [r3, #0]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d0f2      	beq.n	8015c8e <rcl_get_default_domain_id+0x3a>
 8015ca8:	e7e0      	b.n	8015c6c <rcl_get_default_domain_id+0x18>
 8015caa:	f001 f8d7 	bl	8016e5c <__errno>
 8015cae:	6803      	ldr	r3, [r0, #0]
 8015cb0:	2b22      	cmp	r3, #34	@ 0x22
 8015cb2:	d1ec      	bne.n	8015c8e <rcl_get_default_domain_id+0x3a>
 8015cb4:	e7da      	b.n	8015c6c <rcl_get_default_domain_id+0x18>
 8015cb6:	bf00      	nop
 8015cb8:	08018694 	.word	0x08018694

08015cbc <rcl_expand_topic_name>:
 8015cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc0:	b08b      	sub	sp, #44	@ 0x2c
 8015cc2:	9306      	str	r3, [sp, #24]
 8015cc4:	2800      	cmp	r0, #0
 8015cc6:	f000 80ad 	beq.w	8015e24 <rcl_expand_topic_name+0x168>
 8015cca:	460e      	mov	r6, r1
 8015ccc:	2900      	cmp	r1, #0
 8015cce:	f000 80a9 	beq.w	8015e24 <rcl_expand_topic_name+0x168>
 8015cd2:	4617      	mov	r7, r2
 8015cd4:	2a00      	cmp	r2, #0
 8015cd6:	f000 80a5 	beq.w	8015e24 <rcl_expand_topic_name+0x168>
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	f000 80a2 	beq.w	8015e24 <rcl_expand_topic_name+0x168>
 8015ce0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	f000 809e 	beq.w	8015e24 <rcl_expand_topic_name+0x168>
 8015ce8:	2200      	movs	r2, #0
 8015cea:	a909      	add	r1, sp, #36	@ 0x24
 8015cec:	4680      	mov	r8, r0
 8015cee:	f000 fa57 	bl	80161a0 <rcl_validate_topic_name>
 8015cf2:	4604      	mov	r4, r0
 8015cf4:	2800      	cmp	r0, #0
 8015cf6:	f040 8096 	bne.w	8015e26 <rcl_expand_topic_name+0x16a>
 8015cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	f040 809a 	bne.w	8015e36 <rcl_expand_topic_name+0x17a>
 8015d02:	4602      	mov	r2, r0
 8015d04:	a909      	add	r1, sp, #36	@ 0x24
 8015d06:	4630      	mov	r0, r6
 8015d08:	f7fd f940 	bl	8012f8c <rmw_validate_node_name>
 8015d0c:	2800      	cmp	r0, #0
 8015d0e:	f040 808e 	bne.w	8015e2e <rcl_expand_topic_name+0x172>
 8015d12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015d14:	2a00      	cmp	r2, #0
 8015d16:	f040 8093 	bne.w	8015e40 <rcl_expand_topic_name+0x184>
 8015d1a:	a909      	add	r1, sp, #36	@ 0x24
 8015d1c:	4638      	mov	r0, r7
 8015d1e:	f7fd f917 	bl	8012f50 <rmw_validate_namespace>
 8015d22:	2800      	cmp	r0, #0
 8015d24:	f040 8083 	bne.w	8015e2e <rcl_expand_topic_name+0x172>
 8015d28:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015d2a:	2c00      	cmp	r4, #0
 8015d2c:	f040 80ed 	bne.w	8015f0a <rcl_expand_topic_name+0x24e>
 8015d30:	217b      	movs	r1, #123	@ 0x7b
 8015d32:	4640      	mov	r0, r8
 8015d34:	f001 f806 	bl	8016d44 <strchr>
 8015d38:	f898 3000 	ldrb.w	r3, [r8]
 8015d3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8015d3e:	4605      	mov	r5, r0
 8015d40:	f000 809e 	beq.w	8015e80 <rcl_expand_topic_name+0x1c4>
 8015d44:	2b7e      	cmp	r3, #126	@ 0x7e
 8015d46:	f040 80a2 	bne.w	8015e8e <rcl_expand_topic_name+0x1d2>
 8015d4a:	4638      	mov	r0, r7
 8015d4c:	f7ea fa4a 	bl	80001e4 <strlen>
 8015d50:	4a82      	ldr	r2, [pc, #520]	@ (8015f5c <rcl_expand_topic_name+0x2a0>)
 8015d52:	4b83      	ldr	r3, [pc, #524]	@ (8015f60 <rcl_expand_topic_name+0x2a4>)
 8015d54:	2801      	cmp	r0, #1
 8015d56:	bf18      	it	ne
 8015d58:	4613      	movne	r3, r2
 8015d5a:	9302      	str	r3, [sp, #8]
 8015d5c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8015d5e:	9300      	str	r3, [sp, #0]
 8015d60:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8015d64:	f108 0301 	add.w	r3, r8, #1
 8015d68:	9305      	str	r3, [sp, #20]
 8015d6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015d6e:	9301      	str	r3, [sp, #4]
 8015d70:	ab14      	add	r3, sp, #80	@ 0x50
 8015d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d74:	f7fc fcf4 	bl	8012760 <rcutils_format_string_limit>
 8015d78:	4682      	mov	sl, r0
 8015d7a:	2800      	cmp	r0, #0
 8015d7c:	f000 80c7 	beq.w	8015f0e <rcl_expand_topic_name+0x252>
 8015d80:	2d00      	cmp	r5, #0
 8015d82:	f000 80a2 	beq.w	8015eca <rcl_expand_topic_name+0x20e>
 8015d86:	217b      	movs	r1, #123	@ 0x7b
 8015d88:	f000 ffdc 	bl	8016d44 <strchr>
 8015d8c:	46d1      	mov	r9, sl
 8015d8e:	4605      	mov	r5, r0
 8015d90:	9407      	str	r4, [sp, #28]
 8015d92:	46d3      	mov	fp, sl
 8015d94:	464c      	mov	r4, r9
 8015d96:	2d00      	cmp	r5, #0
 8015d98:	f000 80be 	beq.w	8015f18 <rcl_expand_topic_name+0x25c>
 8015d9c:	217d      	movs	r1, #125	@ 0x7d
 8015d9e:	4620      	mov	r0, r4
 8015da0:	f000 ffd0 	bl	8016d44 <strchr>
 8015da4:	eba0 0905 	sub.w	r9, r0, r5
 8015da8:	f109 0a01 	add.w	sl, r9, #1
 8015dac:	486d      	ldr	r0, [pc, #436]	@ (8015f64 <rcl_expand_topic_name+0x2a8>)
 8015dae:	4652      	mov	r2, sl
 8015db0:	4629      	mov	r1, r5
 8015db2:	f000 ffd4 	bl	8016d5e <strncmp>
 8015db6:	2800      	cmp	r0, #0
 8015db8:	d067      	beq.n	8015e8a <rcl_expand_topic_name+0x1ce>
 8015dba:	486b      	ldr	r0, [pc, #428]	@ (8015f68 <rcl_expand_topic_name+0x2ac>)
 8015dbc:	4652      	mov	r2, sl
 8015dbe:	4629      	mov	r1, r5
 8015dc0:	f000 ffcd 	bl	8016d5e <strncmp>
 8015dc4:	b130      	cbz	r0, 8015dd4 <rcl_expand_topic_name+0x118>
 8015dc6:	4869      	ldr	r0, [pc, #420]	@ (8015f6c <rcl_expand_topic_name+0x2b0>)
 8015dc8:	4652      	mov	r2, sl
 8015dca:	4629      	mov	r1, r5
 8015dcc:	f000 ffc7 	bl	8016d5e <strncmp>
 8015dd0:	2800      	cmp	r0, #0
 8015dd2:	d137      	bne.n	8015e44 <rcl_expand_topic_name+0x188>
 8015dd4:	46b9      	mov	r9, r7
 8015dd6:	ab16      	add	r3, sp, #88	@ 0x58
 8015dd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015ddc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015de0:	ab14      	add	r3, sp, #80	@ 0x50
 8015de2:	4628      	mov	r0, r5
 8015de4:	cb0c      	ldmia	r3, {r2, r3}
 8015de6:	4651      	mov	r1, sl
 8015de8:	f7fc fdf6 	bl	80129d8 <rcutils_strndup>
 8015dec:	4605      	mov	r5, r0
 8015dee:	2800      	cmp	r0, #0
 8015df0:	f000 809c 	beq.w	8015f2c <rcl_expand_topic_name+0x270>
 8015df4:	464a      	mov	r2, r9
 8015df6:	4620      	mov	r0, r4
 8015df8:	ab14      	add	r3, sp, #80	@ 0x50
 8015dfa:	4629      	mov	r1, r5
 8015dfc:	f7fc fcea 	bl	80127d4 <rcutils_repl_str>
 8015e00:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015e02:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015e04:	4604      	mov	r4, r0
 8015e06:	4628      	mov	r0, r5
 8015e08:	4798      	blx	r3
 8015e0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015e0c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015e0e:	4658      	mov	r0, fp
 8015e10:	4798      	blx	r3
 8015e12:	2c00      	cmp	r4, #0
 8015e14:	d07b      	beq.n	8015f0e <rcl_expand_topic_name+0x252>
 8015e16:	217b      	movs	r1, #123	@ 0x7b
 8015e18:	4620      	mov	r0, r4
 8015e1a:	f000 ff93 	bl	8016d44 <strchr>
 8015e1e:	46a3      	mov	fp, r4
 8015e20:	4605      	mov	r5, r0
 8015e22:	e7b8      	b.n	8015d96 <rcl_expand_topic_name+0xda>
 8015e24:	240b      	movs	r4, #11
 8015e26:	4620      	mov	r0, r4
 8015e28:	b00b      	add	sp, #44	@ 0x2c
 8015e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e2e:	f7f9 ff2d 	bl	800fc8c <rcl_convert_rmw_ret_to_rcl_ret>
 8015e32:	4604      	mov	r4, r0
 8015e34:	e7f7      	b.n	8015e26 <rcl_expand_topic_name+0x16a>
 8015e36:	2467      	movs	r4, #103	@ 0x67
 8015e38:	4620      	mov	r0, r4
 8015e3a:	b00b      	add	sp, #44	@ 0x2c
 8015e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e40:	24c9      	movs	r4, #201	@ 0xc9
 8015e42:	e7f0      	b.n	8015e26 <rcl_expand_topic_name+0x16a>
 8015e44:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8015e48:	9806      	ldr	r0, [sp, #24]
 8015e4a:	1c69      	adds	r1, r5, #1
 8015e4c:	f7fc fede 	bl	8012c0c <rcutils_string_map_getn>
 8015e50:	4681      	mov	r9, r0
 8015e52:	2800      	cmp	r0, #0
 8015e54:	d1bf      	bne.n	8015dd6 <rcl_expand_topic_name+0x11a>
 8015e56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015e58:	aa16      	add	r2, sp, #88	@ 0x58
 8015e5a:	6018      	str	r0, [r3, #0]
 8015e5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8015e5e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015e62:	ab14      	add	r3, sp, #80	@ 0x50
 8015e64:	cb0c      	ldmia	r3, {r2, r3}
 8015e66:	4651      	mov	r1, sl
 8015e68:	4628      	mov	r0, r5
 8015e6a:	f7fc fdb5 	bl	80129d8 <rcutils_strndup>
 8015e6e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015e70:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015e72:	4798      	blx	r3
 8015e74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015e76:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015e78:	4658      	mov	r0, fp
 8015e7a:	2469      	movs	r4, #105	@ 0x69
 8015e7c:	4798      	blx	r3
 8015e7e:	e7d2      	b.n	8015e26 <rcl_expand_topic_name+0x16a>
 8015e80:	2800      	cmp	r0, #0
 8015e82:	d05b      	beq.n	8015f3c <rcl_expand_topic_name+0x280>
 8015e84:	46c1      	mov	r9, r8
 8015e86:	46a2      	mov	sl, r4
 8015e88:	e782      	b.n	8015d90 <rcl_expand_topic_name+0xd4>
 8015e8a:	46b1      	mov	r9, r6
 8015e8c:	e7a3      	b.n	8015dd6 <rcl_expand_topic_name+0x11a>
 8015e8e:	2800      	cmp	r0, #0
 8015e90:	d1f8      	bne.n	8015e84 <rcl_expand_topic_name+0x1c8>
 8015e92:	4638      	mov	r0, r7
 8015e94:	f7ea f9a6 	bl	80001e4 <strlen>
 8015e98:	4a35      	ldr	r2, [pc, #212]	@ (8015f70 <rcl_expand_topic_name+0x2b4>)
 8015e9a:	4b36      	ldr	r3, [pc, #216]	@ (8015f74 <rcl_expand_topic_name+0x2b8>)
 8015e9c:	f8cd 8010 	str.w	r8, [sp, #16]
 8015ea0:	2801      	cmp	r0, #1
 8015ea2:	bf18      	it	ne
 8015ea4:	4613      	movne	r3, r2
 8015ea6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8015eaa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8015eae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8015eb0:	9703      	str	r7, [sp, #12]
 8015eb2:	9200      	str	r2, [sp, #0]
 8015eb4:	ab14      	add	r3, sp, #80	@ 0x50
 8015eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015eb8:	f7fc fc52 	bl	8012760 <rcutils_format_string_limit>
 8015ebc:	4682      	mov	sl, r0
 8015ebe:	4653      	mov	r3, sl
 8015ec0:	b32b      	cbz	r3, 8015f0e <rcl_expand_topic_name+0x252>
 8015ec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015ec4:	f8c3 a000 	str.w	sl, [r3]
 8015ec8:	e7ad      	b.n	8015e26 <rcl_expand_topic_name+0x16a>
 8015eca:	f89a 3000 	ldrb.w	r3, [sl]
 8015ece:	2b2f      	cmp	r3, #47	@ 0x2f
 8015ed0:	d0f7      	beq.n	8015ec2 <rcl_expand_topic_name+0x206>
 8015ed2:	4638      	mov	r0, r7
 8015ed4:	f7ea f986 	bl	80001e4 <strlen>
 8015ed8:	4a25      	ldr	r2, [pc, #148]	@ (8015f70 <rcl_expand_topic_name+0x2b4>)
 8015eda:	4b26      	ldr	r3, [pc, #152]	@ (8015f74 <rcl_expand_topic_name+0x2b8>)
 8015edc:	f8cd a010 	str.w	sl, [sp, #16]
 8015ee0:	2801      	cmp	r0, #1
 8015ee2:	bf18      	it	ne
 8015ee4:	4613      	movne	r3, r2
 8015ee6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8015eea:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8015eee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8015ef0:	9703      	str	r7, [sp, #12]
 8015ef2:	9200      	str	r2, [sp, #0]
 8015ef4:	ab14      	add	r3, sp, #80	@ 0x50
 8015ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015ef8:	f7fc fc32 	bl	8012760 <rcutils_format_string_limit>
 8015efc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015efe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015f00:	4605      	mov	r5, r0
 8015f02:	4650      	mov	r0, sl
 8015f04:	4798      	blx	r3
 8015f06:	46aa      	mov	sl, r5
 8015f08:	e7d9      	b.n	8015ebe <rcl_expand_topic_name+0x202>
 8015f0a:	24ca      	movs	r4, #202	@ 0xca
 8015f0c:	e78b      	b.n	8015e26 <rcl_expand_topic_name+0x16a>
 8015f0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015f10:	2300      	movs	r3, #0
 8015f12:	6013      	str	r3, [r2, #0]
 8015f14:	240a      	movs	r4, #10
 8015f16:	e786      	b.n	8015e26 <rcl_expand_topic_name+0x16a>
 8015f18:	465b      	mov	r3, fp
 8015f1a:	9c07      	ldr	r4, [sp, #28]
 8015f1c:	46da      	mov	sl, fp
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d1d3      	bne.n	8015eca <rcl_expand_topic_name+0x20e>
 8015f22:	f898 3000 	ldrb.w	r3, [r8]
 8015f26:	2b2f      	cmp	r3, #47	@ 0x2f
 8015f28:	d0cb      	beq.n	8015ec2 <rcl_expand_topic_name+0x206>
 8015f2a:	e7b2      	b.n	8015e92 <rcl_expand_topic_name+0x1d6>
 8015f2c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8015f30:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015f32:	6015      	str	r5, [r2, #0]
 8015f34:	4658      	mov	r0, fp
 8015f36:	4798      	blx	r3
 8015f38:	240a      	movs	r4, #10
 8015f3a:	e774      	b.n	8015e26 <rcl_expand_topic_name+0x16a>
 8015f3c:	ab17      	add	r3, sp, #92	@ 0x5c
 8015f3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015f42:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015f46:	ab14      	add	r3, sp, #80	@ 0x50
 8015f48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015f4a:	4640      	mov	r0, r8
 8015f4c:	f7fc fd22 	bl	8012994 <rcutils_strdup>
 8015f50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015f52:	2800      	cmp	r0, #0
 8015f54:	6018      	str	r0, [r3, #0]
 8015f56:	bf08      	it	eq
 8015f58:	240a      	moveq	r4, #10
 8015f5a:	e764      	b.n	8015e26 <rcl_expand_topic_name+0x16a>
 8015f5c:	080186a4 	.word	0x080186a4
 8015f60:	08017e84 	.word	0x08017e84
 8015f64:	080186ac 	.word	0x080186ac
 8015f68:	080186b4 	.word	0x080186b4
 8015f6c:	080186bc 	.word	0x080186bc
 8015f70:	08018018 	.word	0x08018018
 8015f74:	08017e94 	.word	0x08017e94

08015f78 <rcl_get_default_topic_name_substitutions>:
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	bf0c      	ite	eq
 8015f7c:	200b      	moveq	r0, #11
 8015f7e:	2000      	movne	r0, #0
 8015f80:	4770      	bx	lr
 8015f82:	bf00      	nop

08015f84 <rcl_get_zero_initialized_guard_condition>:
 8015f84:	4a03      	ldr	r2, [pc, #12]	@ (8015f94 <rcl_get_zero_initialized_guard_condition+0x10>)
 8015f86:	4603      	mov	r3, r0
 8015f88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015f90:	4618      	mov	r0, r3
 8015f92:	4770      	bx	lr
 8015f94:	080186c8 	.word	0x080186c8

08015f98 <rcl_guard_condition_init>:
 8015f98:	b082      	sub	sp, #8
 8015f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f9c:	b087      	sub	sp, #28
 8015f9e:	ac0c      	add	r4, sp, #48	@ 0x30
 8015fa0:	e884 000c 	stmia.w	r4, {r2, r3}
 8015fa4:	46a6      	mov	lr, r4
 8015fa6:	460d      	mov	r5, r1
 8015fa8:	4604      	mov	r4, r0
 8015faa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015fae:	f10d 0c04 	add.w	ip, sp, #4
 8015fb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015fb6:	f8de 3000 	ldr.w	r3, [lr]
 8015fba:	f8cc 3000 	str.w	r3, [ip]
 8015fbe:	a801      	add	r0, sp, #4
 8015fc0:	f7f5 fa82 	bl	800b4c8 <rcutils_allocator_is_valid>
 8015fc4:	b338      	cbz	r0, 8016016 <rcl_guard_condition_init+0x7e>
 8015fc6:	b334      	cbz	r4, 8016016 <rcl_guard_condition_init+0x7e>
 8015fc8:	6866      	ldr	r6, [r4, #4]
 8015fca:	b9ee      	cbnz	r6, 8016008 <rcl_guard_condition_init+0x70>
 8015fcc:	b31d      	cbz	r5, 8016016 <rcl_guard_condition_init+0x7e>
 8015fce:	4628      	mov	r0, r5
 8015fd0:	f7f9 fe7a 	bl	800fcc8 <rcl_context_is_valid>
 8015fd4:	b308      	cbz	r0, 801601a <rcl_guard_condition_init+0x82>
 8015fd6:	9b01      	ldr	r3, [sp, #4]
 8015fd8:	9905      	ldr	r1, [sp, #20]
 8015fda:	201c      	movs	r0, #28
 8015fdc:	4798      	blx	r3
 8015fde:	4607      	mov	r7, r0
 8015fe0:	6060      	str	r0, [r4, #4]
 8015fe2:	b310      	cbz	r0, 801602a <rcl_guard_condition_init+0x92>
 8015fe4:	6828      	ldr	r0, [r5, #0]
 8015fe6:	3028      	adds	r0, #40	@ 0x28
 8015fe8:	f000 fa94 	bl	8016514 <rmw_create_guard_condition>
 8015fec:	6038      	str	r0, [r7, #0]
 8015fee:	6860      	ldr	r0, [r4, #4]
 8015ff0:	6805      	ldr	r5, [r0, #0]
 8015ff2:	b1a5      	cbz	r5, 801601e <rcl_guard_condition_init+0x86>
 8015ff4:	2301      	movs	r3, #1
 8015ff6:	ac01      	add	r4, sp, #4
 8015ff8:	7103      	strb	r3, [r0, #4]
 8015ffa:	f100 0708 	add.w	r7, r0, #8
 8015ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016000:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016002:	6823      	ldr	r3, [r4, #0]
 8016004:	603b      	str	r3, [r7, #0]
 8016006:	e000      	b.n	801600a <rcl_guard_condition_init+0x72>
 8016008:	2664      	movs	r6, #100	@ 0x64
 801600a:	4630      	mov	r0, r6
 801600c:	b007      	add	sp, #28
 801600e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016012:	b002      	add	sp, #8
 8016014:	4770      	bx	lr
 8016016:	260b      	movs	r6, #11
 8016018:	e7f7      	b.n	801600a <rcl_guard_condition_init+0x72>
 801601a:	2665      	movs	r6, #101	@ 0x65
 801601c:	e7f5      	b.n	801600a <rcl_guard_condition_init+0x72>
 801601e:	9b02      	ldr	r3, [sp, #8]
 8016020:	9905      	ldr	r1, [sp, #20]
 8016022:	4798      	blx	r3
 8016024:	2601      	movs	r6, #1
 8016026:	6065      	str	r5, [r4, #4]
 8016028:	e7ef      	b.n	801600a <rcl_guard_condition_init+0x72>
 801602a:	260a      	movs	r6, #10
 801602c:	e7ed      	b.n	801600a <rcl_guard_condition_init+0x72>
 801602e:	bf00      	nop

08016030 <rcl_guard_condition_init_from_rmw>:
 8016030:	b082      	sub	sp, #8
 8016032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016036:	b086      	sub	sp, #24
 8016038:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801603c:	4604      	mov	r4, r0
 801603e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016042:	460e      	mov	r6, r1
 8016044:	4617      	mov	r7, r2
 8016046:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801604a:	f10d 0e04 	add.w	lr, sp, #4
 801604e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016052:	f8dc 3000 	ldr.w	r3, [ip]
 8016056:	f8ce 3000 	str.w	r3, [lr]
 801605a:	a801      	add	r0, sp, #4
 801605c:	f7f5 fa34 	bl	800b4c8 <rcutils_allocator_is_valid>
 8016060:	b350      	cbz	r0, 80160b8 <rcl_guard_condition_init_from_rmw+0x88>
 8016062:	b34c      	cbz	r4, 80160b8 <rcl_guard_condition_init_from_rmw+0x88>
 8016064:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016068:	f1b8 0f00 	cmp.w	r8, #0
 801606c:	d11e      	bne.n	80160ac <rcl_guard_condition_init_from_rmw+0x7c>
 801606e:	b31f      	cbz	r7, 80160b8 <rcl_guard_condition_init_from_rmw+0x88>
 8016070:	4638      	mov	r0, r7
 8016072:	f7f9 fe29 	bl	800fcc8 <rcl_context_is_valid>
 8016076:	b328      	cbz	r0, 80160c4 <rcl_guard_condition_init_from_rmw+0x94>
 8016078:	9b01      	ldr	r3, [sp, #4]
 801607a:	9905      	ldr	r1, [sp, #20]
 801607c:	201c      	movs	r0, #28
 801607e:	4798      	blx	r3
 8016080:	4605      	mov	r5, r0
 8016082:	6060      	str	r0, [r4, #4]
 8016084:	b358      	cbz	r0, 80160de <rcl_guard_condition_init_from_rmw+0xae>
 8016086:	b1fe      	cbz	r6, 80160c8 <rcl_guard_condition_init_from_rmw+0x98>
 8016088:	6006      	str	r6, [r0, #0]
 801608a:	f880 8004 	strb.w	r8, [r0, #4]
 801608e:	ac01      	add	r4, sp, #4
 8016090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016092:	f105 0c08 	add.w	ip, r5, #8
 8016096:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801609a:	6823      	ldr	r3, [r4, #0]
 801609c:	f8cc 3000 	str.w	r3, [ip]
 80160a0:	2000      	movs	r0, #0
 80160a2:	b006      	add	sp, #24
 80160a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160a8:	b002      	add	sp, #8
 80160aa:	4770      	bx	lr
 80160ac:	2064      	movs	r0, #100	@ 0x64
 80160ae:	b006      	add	sp, #24
 80160b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160b4:	b002      	add	sp, #8
 80160b6:	4770      	bx	lr
 80160b8:	200b      	movs	r0, #11
 80160ba:	b006      	add	sp, #24
 80160bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160c0:	b002      	add	sp, #8
 80160c2:	4770      	bx	lr
 80160c4:	2065      	movs	r0, #101	@ 0x65
 80160c6:	e7f2      	b.n	80160ae <rcl_guard_condition_init_from_rmw+0x7e>
 80160c8:	6838      	ldr	r0, [r7, #0]
 80160ca:	3028      	adds	r0, #40	@ 0x28
 80160cc:	f000 fa22 	bl	8016514 <rmw_create_guard_condition>
 80160d0:	6028      	str	r0, [r5, #0]
 80160d2:	6865      	ldr	r5, [r4, #4]
 80160d4:	682e      	ldr	r6, [r5, #0]
 80160d6:	b126      	cbz	r6, 80160e2 <rcl_guard_condition_init_from_rmw+0xb2>
 80160d8:	2301      	movs	r3, #1
 80160da:	712b      	strb	r3, [r5, #4]
 80160dc:	e7d7      	b.n	801608e <rcl_guard_condition_init_from_rmw+0x5e>
 80160de:	200a      	movs	r0, #10
 80160e0:	e7e5      	b.n	80160ae <rcl_guard_condition_init_from_rmw+0x7e>
 80160e2:	4628      	mov	r0, r5
 80160e4:	9b02      	ldr	r3, [sp, #8]
 80160e6:	9905      	ldr	r1, [sp, #20]
 80160e8:	4798      	blx	r3
 80160ea:	6066      	str	r6, [r4, #4]
 80160ec:	2001      	movs	r0, #1
 80160ee:	e7de      	b.n	80160ae <rcl_guard_condition_init_from_rmw+0x7e>

080160f0 <rcl_guard_condition_fini>:
 80160f0:	b570      	push	{r4, r5, r6, lr}
 80160f2:	b082      	sub	sp, #8
 80160f4:	b1f0      	cbz	r0, 8016134 <rcl_guard_condition_fini+0x44>
 80160f6:	6843      	ldr	r3, [r0, #4]
 80160f8:	4604      	mov	r4, r0
 80160fa:	b163      	cbz	r3, 8016116 <rcl_guard_condition_fini+0x26>
 80160fc:	6818      	ldr	r0, [r3, #0]
 80160fe:	68de      	ldr	r6, [r3, #12]
 8016100:	6999      	ldr	r1, [r3, #24]
 8016102:	b160      	cbz	r0, 801611e <rcl_guard_condition_fini+0x2e>
 8016104:	791d      	ldrb	r5, [r3, #4]
 8016106:	b965      	cbnz	r5, 8016122 <rcl_guard_condition_fini+0x32>
 8016108:	4618      	mov	r0, r3
 801610a:	47b0      	blx	r6
 801610c:	2300      	movs	r3, #0
 801610e:	4628      	mov	r0, r5
 8016110:	6063      	str	r3, [r4, #4]
 8016112:	b002      	add	sp, #8
 8016114:	bd70      	pop	{r4, r5, r6, pc}
 8016116:	461d      	mov	r5, r3
 8016118:	4628      	mov	r0, r5
 801611a:	b002      	add	sp, #8
 801611c:	bd70      	pop	{r4, r5, r6, pc}
 801611e:	4605      	mov	r5, r0
 8016120:	e7f2      	b.n	8016108 <rcl_guard_condition_fini+0x18>
 8016122:	9101      	str	r1, [sp, #4]
 8016124:	f000 fa0a 	bl	801653c <rmw_destroy_guard_condition>
 8016128:	1e05      	subs	r5, r0, #0
 801612a:	6863      	ldr	r3, [r4, #4]
 801612c:	9901      	ldr	r1, [sp, #4]
 801612e:	bf18      	it	ne
 8016130:	2501      	movne	r5, #1
 8016132:	e7e9      	b.n	8016108 <rcl_guard_condition_fini+0x18>
 8016134:	250b      	movs	r5, #11
 8016136:	4628      	mov	r0, r5
 8016138:	b002      	add	sp, #8
 801613a:	bd70      	pop	{r4, r5, r6, pc}

0801613c <rcl_guard_condition_get_default_options>:
 801613c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801613e:	b087      	sub	sp, #28
 8016140:	4606      	mov	r6, r0
 8016142:	4668      	mov	r0, sp
 8016144:	f7f5 f9b2 	bl	800b4ac <rcutils_get_default_allocator>
 8016148:	4b09      	ldr	r3, [pc, #36]	@ (8016170 <rcl_guard_condition_get_default_options+0x34>)
 801614a:	46ee      	mov	lr, sp
 801614c:	469c      	mov	ip, r3
 801614e:	461d      	mov	r5, r3
 8016150:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016154:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801615a:	4634      	mov	r4, r6
 801615c:	f8de 7000 	ldr.w	r7, [lr]
 8016160:	f8cc 7000 	str.w	r7, [ip]
 8016164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016166:	4630      	mov	r0, r6
 8016168:	6027      	str	r7, [r4, #0]
 801616a:	b007      	add	sp, #28
 801616c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801616e:	bf00      	nop
 8016170:	20015fb4 	.word	0x20015fb4

08016174 <rcl_trigger_guard_condition>:
 8016174:	b148      	cbz	r0, 801618a <rcl_trigger_guard_condition+0x16>
 8016176:	b508      	push	{r3, lr}
 8016178:	6843      	ldr	r3, [r0, #4]
 801617a:	b143      	cbz	r3, 801618e <rcl_trigger_guard_condition+0x1a>
 801617c:	6818      	ldr	r0, [r3, #0]
 801617e:	f000 f9f1 	bl	8016564 <rmw_trigger_guard_condition>
 8016182:	3800      	subs	r0, #0
 8016184:	bf18      	it	ne
 8016186:	2001      	movne	r0, #1
 8016188:	bd08      	pop	{r3, pc}
 801618a:	200b      	movs	r0, #11
 801618c:	4770      	bx	lr
 801618e:	200b      	movs	r0, #11
 8016190:	bd08      	pop	{r3, pc}
 8016192:	bf00      	nop

08016194 <rcl_guard_condition_get_rmw_handle>:
 8016194:	b110      	cbz	r0, 801619c <rcl_guard_condition_get_rmw_handle+0x8>
 8016196:	6840      	ldr	r0, [r0, #4]
 8016198:	b100      	cbz	r0, 801619c <rcl_guard_condition_get_rmw_handle+0x8>
 801619a:	6800      	ldr	r0, [r0, #0]
 801619c:	4770      	bx	lr
 801619e:	bf00      	nop

080161a0 <rcl_validate_topic_name>:
 80161a0:	2800      	cmp	r0, #0
 80161a2:	d07a      	beq.n	801629a <rcl_validate_topic_name+0xfa>
 80161a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161a8:	460e      	mov	r6, r1
 80161aa:	2900      	cmp	r1, #0
 80161ac:	d07c      	beq.n	80162a8 <rcl_validate_topic_name+0x108>
 80161ae:	4617      	mov	r7, r2
 80161b0:	4605      	mov	r5, r0
 80161b2:	f7ea f817 	bl	80001e4 <strlen>
 80161b6:	b1b0      	cbz	r0, 80161e6 <rcl_validate_topic_name+0x46>
 80161b8:	f895 9000 	ldrb.w	r9, [r5]
 80161bc:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8016340 <rcl_validate_topic_name+0x1a0>
 80161c0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80161c4:	f013 0304 	ands.w	r3, r3, #4
 80161c8:	d169      	bne.n	801629e <rcl_validate_topic_name+0xfe>
 80161ca:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80161ce:	f815 2008 	ldrb.w	r2, [r5, r8]
 80161d2:	2a2f      	cmp	r2, #47	@ 0x2f
 80161d4:	d10e      	bne.n	80161f4 <rcl_validate_topic_name+0x54>
 80161d6:	2202      	movs	r2, #2
 80161d8:	6032      	str	r2, [r6, #0]
 80161da:	b36f      	cbz	r7, 8016238 <rcl_validate_topic_name+0x98>
 80161dc:	f8c7 8000 	str.w	r8, [r7]
 80161e0:	4618      	mov	r0, r3
 80161e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161e6:	2301      	movs	r3, #1
 80161e8:	6033      	str	r3, [r6, #0]
 80161ea:	b32f      	cbz	r7, 8016238 <rcl_validate_topic_name+0x98>
 80161ec:	2000      	movs	r0, #0
 80161ee:	6038      	str	r0, [r7, #0]
 80161f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161f4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80161f8:	461c      	mov	r4, r3
 80161fa:	4619      	mov	r1, r3
 80161fc:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016200:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016204:	f1be 0f09 	cmp.w	lr, #9
 8016208:	d919      	bls.n	801623e <rcl_validate_topic_name+0x9e>
 801620a:	f022 0e20 	bic.w	lr, r2, #32
 801620e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8016212:	f1be 0f19 	cmp.w	lr, #25
 8016216:	d912      	bls.n	801623e <rcl_validate_topic_name+0x9e>
 8016218:	2a5f      	cmp	r2, #95	@ 0x5f
 801621a:	d019      	beq.n	8016250 <rcl_validate_topic_name+0xb0>
 801621c:	2a2f      	cmp	r2, #47	@ 0x2f
 801621e:	d051      	beq.n	80162c4 <rcl_validate_topic_name+0x124>
 8016220:	2a7e      	cmp	r2, #126	@ 0x7e
 8016222:	d048      	beq.n	80162b6 <rcl_validate_topic_name+0x116>
 8016224:	2a7b      	cmp	r2, #123	@ 0x7b
 8016226:	d054      	beq.n	80162d2 <rcl_validate_topic_name+0x132>
 8016228:	2a7d      	cmp	r2, #125	@ 0x7d
 801622a:	d161      	bne.n	80162f0 <rcl_validate_topic_name+0x150>
 801622c:	2c00      	cmp	r4, #0
 801622e:	d155      	bne.n	80162dc <rcl_validate_topic_name+0x13c>
 8016230:	2305      	movs	r3, #5
 8016232:	6033      	str	r3, [r6, #0]
 8016234:	b107      	cbz	r7, 8016238 <rcl_validate_topic_name+0x98>
 8016236:	6039      	str	r1, [r7, #0]
 8016238:	2000      	movs	r0, #0
 801623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801623e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016242:	0752      	lsls	r2, r2, #29
 8016244:	d504      	bpl.n	8016250 <rcl_validate_topic_name+0xb0>
 8016246:	b11c      	cbz	r4, 8016250 <rcl_validate_topic_name+0xb0>
 8016248:	b111      	cbz	r1, 8016250 <rcl_validate_topic_name+0xb0>
 801624a:	1e4a      	subs	r2, r1, #1
 801624c:	429a      	cmp	r2, r3
 801624e:	d02d      	beq.n	80162ac <rcl_validate_topic_name+0x10c>
 8016250:	3101      	adds	r1, #1
 8016252:	4288      	cmp	r0, r1
 8016254:	d1d2      	bne.n	80161fc <rcl_validate_topic_name+0x5c>
 8016256:	2c00      	cmp	r4, #0
 8016258:	d145      	bne.n	80162e6 <rcl_validate_topic_name+0x146>
 801625a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801625e:	d04f      	beq.n	8016300 <rcl_validate_topic_name+0x160>
 8016260:	4620      	mov	r0, r4
 8016262:	2301      	movs	r3, #1
 8016264:	e006      	b.n	8016274 <rcl_validate_topic_name+0xd4>
 8016266:	428b      	cmp	r3, r1
 8016268:	f105 0501 	add.w	r5, r5, #1
 801626c:	f103 0201 	add.w	r2, r3, #1
 8016270:	d236      	bcs.n	80162e0 <rcl_validate_topic_name+0x140>
 8016272:	4613      	mov	r3, r2
 8016274:	4580      	cmp	r8, r0
 8016276:	f100 0001 	add.w	r0, r0, #1
 801627a:	d0f4      	beq.n	8016266 <rcl_validate_topic_name+0xc6>
 801627c:	782a      	ldrb	r2, [r5, #0]
 801627e:	2a2f      	cmp	r2, #47	@ 0x2f
 8016280:	d1f1      	bne.n	8016266 <rcl_validate_topic_name+0xc6>
 8016282:	786a      	ldrb	r2, [r5, #1]
 8016284:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016288:	0754      	lsls	r4, r2, #29
 801628a:	d5ec      	bpl.n	8016266 <rcl_validate_topic_name+0xc6>
 801628c:	2204      	movs	r2, #4
 801628e:	6032      	str	r2, [r6, #0]
 8016290:	2f00      	cmp	r7, #0
 8016292:	d0d1      	beq.n	8016238 <rcl_validate_topic_name+0x98>
 8016294:	603b      	str	r3, [r7, #0]
 8016296:	2000      	movs	r0, #0
 8016298:	e7aa      	b.n	80161f0 <rcl_validate_topic_name+0x50>
 801629a:	200b      	movs	r0, #11
 801629c:	4770      	bx	lr
 801629e:	2304      	movs	r3, #4
 80162a0:	6033      	str	r3, [r6, #0]
 80162a2:	2f00      	cmp	r7, #0
 80162a4:	d1a2      	bne.n	80161ec <rcl_validate_topic_name+0x4c>
 80162a6:	e7c7      	b.n	8016238 <rcl_validate_topic_name+0x98>
 80162a8:	200b      	movs	r0, #11
 80162aa:	e7a1      	b.n	80161f0 <rcl_validate_topic_name+0x50>
 80162ac:	2309      	movs	r3, #9
 80162ae:	6033      	str	r3, [r6, #0]
 80162b0:	2f00      	cmp	r7, #0
 80162b2:	d1c0      	bne.n	8016236 <rcl_validate_topic_name+0x96>
 80162b4:	e7c0      	b.n	8016238 <rcl_validate_topic_name+0x98>
 80162b6:	2900      	cmp	r1, #0
 80162b8:	d0ca      	beq.n	8016250 <rcl_validate_topic_name+0xb0>
 80162ba:	2306      	movs	r3, #6
 80162bc:	6033      	str	r3, [r6, #0]
 80162be:	2f00      	cmp	r7, #0
 80162c0:	d1b9      	bne.n	8016236 <rcl_validate_topic_name+0x96>
 80162c2:	e7b9      	b.n	8016238 <rcl_validate_topic_name+0x98>
 80162c4:	2c00      	cmp	r4, #0
 80162c6:	d0c3      	beq.n	8016250 <rcl_validate_topic_name+0xb0>
 80162c8:	2308      	movs	r3, #8
 80162ca:	6033      	str	r3, [r6, #0]
 80162cc:	2f00      	cmp	r7, #0
 80162ce:	d1b2      	bne.n	8016236 <rcl_validate_topic_name+0x96>
 80162d0:	e7b2      	b.n	8016238 <rcl_validate_topic_name+0x98>
 80162d2:	2c00      	cmp	r4, #0
 80162d4:	d1f8      	bne.n	80162c8 <rcl_validate_topic_name+0x128>
 80162d6:	460b      	mov	r3, r1
 80162d8:	2401      	movs	r4, #1
 80162da:	e7b9      	b.n	8016250 <rcl_validate_topic_name+0xb0>
 80162dc:	2400      	movs	r4, #0
 80162de:	e7b7      	b.n	8016250 <rcl_validate_topic_name+0xb0>
 80162e0:	2000      	movs	r0, #0
 80162e2:	6030      	str	r0, [r6, #0]
 80162e4:	e784      	b.n	80161f0 <rcl_validate_topic_name+0x50>
 80162e6:	2205      	movs	r2, #5
 80162e8:	6032      	str	r2, [r6, #0]
 80162ea:	2f00      	cmp	r7, #0
 80162ec:	d1d2      	bne.n	8016294 <rcl_validate_topic_name+0xf4>
 80162ee:	e7a3      	b.n	8016238 <rcl_validate_topic_name+0x98>
 80162f0:	2c00      	cmp	r4, #0
 80162f2:	bf14      	ite	ne
 80162f4:	2308      	movne	r3, #8
 80162f6:	2303      	moveq	r3, #3
 80162f8:	6033      	str	r3, [r6, #0]
 80162fa:	2f00      	cmp	r7, #0
 80162fc:	d19b      	bne.n	8016236 <rcl_validate_topic_name+0x96>
 80162fe:	e79b      	b.n	8016238 <rcl_validate_topic_name+0x98>
 8016300:	2301      	movs	r3, #1
 8016302:	e00a      	b.n	801631a <rcl_validate_topic_name+0x17a>
 8016304:	2c01      	cmp	r4, #1
 8016306:	d013      	beq.n	8016330 <rcl_validate_topic_name+0x190>
 8016308:	4299      	cmp	r1, r3
 801630a:	f104 0401 	add.w	r4, r4, #1
 801630e:	f105 0501 	add.w	r5, r5, #1
 8016312:	f103 0201 	add.w	r2, r3, #1
 8016316:	d9e3      	bls.n	80162e0 <rcl_validate_topic_name+0x140>
 8016318:	4613      	mov	r3, r2
 801631a:	45a0      	cmp	r8, r4
 801631c:	d0f4      	beq.n	8016308 <rcl_validate_topic_name+0x168>
 801631e:	782a      	ldrb	r2, [r5, #0]
 8016320:	2a2f      	cmp	r2, #47	@ 0x2f
 8016322:	d1ef      	bne.n	8016304 <rcl_validate_topic_name+0x164>
 8016324:	786a      	ldrb	r2, [r5, #1]
 8016326:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801632a:	0752      	lsls	r2, r2, #29
 801632c:	d5ec      	bpl.n	8016308 <rcl_validate_topic_name+0x168>
 801632e:	e7ad      	b.n	801628c <rcl_validate_topic_name+0xec>
 8016330:	2307      	movs	r3, #7
 8016332:	6033      	str	r3, [r6, #0]
 8016334:	2f00      	cmp	r7, #0
 8016336:	f43f af7f 	beq.w	8016238 <rcl_validate_topic_name+0x98>
 801633a:	603c      	str	r4, [r7, #0]
 801633c:	2000      	movs	r0, #0
 801633e:	e757      	b.n	80161f0 <rcl_validate_topic_name+0x50>
 8016340:	08018740 	.word	0x08018740

08016344 <on_status>:
 8016344:	b082      	sub	sp, #8
 8016346:	b002      	add	sp, #8
 8016348:	4770      	bx	lr
 801634a:	bf00      	nop

0801634c <on_topic>:
 801634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016350:	4a22      	ldr	r2, [pc, #136]	@ (80163dc <on_topic+0x90>)
 8016352:	b094      	sub	sp, #80	@ 0x50
 8016354:	6812      	ldr	r2, [r2, #0]
 8016356:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016358:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801635c:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016360:	b3c2      	cbz	r2, 80163d4 <on_topic+0x88>
 8016362:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016366:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801636a:	e001      	b.n	8016370 <on_topic+0x24>
 801636c:	6852      	ldr	r2, [r2, #4]
 801636e:	b38a      	cbz	r2, 80163d4 <on_topic+0x88>
 8016370:	6894      	ldr	r4, [r2, #8]
 8016372:	8aa3      	ldrh	r3, [r4, #20]
 8016374:	428b      	cmp	r3, r1
 8016376:	d1f9      	bne.n	801636c <on_topic+0x20>
 8016378:	7da3      	ldrb	r3, [r4, #22]
 801637a:	4283      	cmp	r3, r0
 801637c:	d1f6      	bne.n	801636c <on_topic+0x20>
 801637e:	2248      	movs	r2, #72	@ 0x48
 8016380:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016384:	4668      	mov	r0, sp
 8016386:	f000 fd9e 	bl	8016ec6 <memcpy>
 801638a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801638e:	cb0c      	ldmia	r3, {r2, r3}
 8016390:	4620      	mov	r0, r4
 8016392:	f7f5 fcc9 	bl	800bd28 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016396:	4607      	mov	r7, r0
 8016398:	b1e0      	cbz	r0, 80163d4 <on_topic+0x88>
 801639a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801639e:	4632      	mov	r2, r6
 80163a0:	4628      	mov	r0, r5
 80163a2:	f108 0110 	add.w	r1, r8, #16
 80163a6:	f7fd ffcf 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 80163aa:	b930      	cbnz	r0, 80163ba <on_topic+0x6e>
 80163ac:	480c      	ldr	r0, [pc, #48]	@ (80163e0 <on_topic+0x94>)
 80163ae:	4639      	mov	r1, r7
 80163b0:	b014      	add	sp, #80	@ 0x50
 80163b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163b6:	f7fc be57 	b.w	8013068 <put_memory>
 80163ba:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80163be:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80163c2:	f7fd feb7 	bl	8014134 <rmw_uros_epoch_nanos>
 80163c6:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80163ca:	2305      	movs	r3, #5
 80163cc:	e942 0102 	strd	r0, r1, [r2, #-8]
 80163d0:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80163d4:	b014      	add	sp, #80	@ 0x50
 80163d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163da:	bf00      	nop
 80163dc:	20015e84 	.word	0x20015e84
 80163e0:	20015e74 	.word	0x20015e74

080163e4 <on_request>:
 80163e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163e8:	4823      	ldr	r0, [pc, #140]	@ (8016478 <on_request+0x94>)
 80163ea:	b094      	sub	sp, #80	@ 0x50
 80163ec:	6800      	ldr	r0, [r0, #0]
 80163ee:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80163f0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80163f4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80163f6:	2800      	cmp	r0, #0
 80163f8:	d03b      	beq.n	8016472 <on_request+0x8e>
 80163fa:	461d      	mov	r5, r3
 80163fc:	e001      	b.n	8016402 <on_request+0x1e>
 80163fe:	6840      	ldr	r0, [r0, #4]
 8016400:	b3b8      	cbz	r0, 8016472 <on_request+0x8e>
 8016402:	6884      	ldr	r4, [r0, #8]
 8016404:	8b21      	ldrh	r1, [r4, #24]
 8016406:	4291      	cmp	r1, r2
 8016408:	d1f9      	bne.n	80163fe <on_request+0x1a>
 801640a:	2248      	movs	r2, #72	@ 0x48
 801640c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016410:	4668      	mov	r0, sp
 8016412:	f000 fd58 	bl	8016ec6 <memcpy>
 8016416:	f104 0320 	add.w	r3, r4, #32
 801641a:	cb0c      	ldmia	r3, {r2, r3}
 801641c:	4620      	mov	r0, r4
 801641e:	f7f5 fc83 	bl	800bd28 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016422:	4680      	mov	r8, r0
 8016424:	b328      	cbz	r0, 8016472 <on_request+0x8e>
 8016426:	4638      	mov	r0, r7
 8016428:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801642c:	4632      	mov	r2, r6
 801642e:	f107 0110 	add.w	r1, r7, #16
 8016432:	f7fd ff89 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 8016436:	b930      	cbnz	r0, 8016446 <on_request+0x62>
 8016438:	4810      	ldr	r0, [pc, #64]	@ (801647c <on_request+0x98>)
 801643a:	4641      	mov	r1, r8
 801643c:	b014      	add	sp, #80	@ 0x50
 801643e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016442:	f7fc be11 	b.w	8013068 <put_memory>
 8016446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016448:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801644c:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016450:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016454:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016458:	e895 0003 	ldmia.w	r5, {r0, r1}
 801645c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016460:	f7fd fe68 	bl	8014134 <rmw_uros_epoch_nanos>
 8016464:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016468:	2303      	movs	r3, #3
 801646a:	e942 0102 	strd	r0, r1, [r2, #-8]
 801646e:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016472:	b014      	add	sp, #80	@ 0x50
 8016474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016478:	20015e54 	.word	0x20015e54
 801647c:	20015e74 	.word	0x20015e74

08016480 <on_reply>:
 8016480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016484:	4821      	ldr	r0, [pc, #132]	@ (801650c <on_reply+0x8c>)
 8016486:	b094      	sub	sp, #80	@ 0x50
 8016488:	6800      	ldr	r0, [r0, #0]
 801648a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801648c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016490:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016492:	b3b8      	cbz	r0, 8016504 <on_reply+0x84>
 8016494:	461d      	mov	r5, r3
 8016496:	e001      	b.n	801649c <on_reply+0x1c>
 8016498:	6840      	ldr	r0, [r0, #4]
 801649a:	b398      	cbz	r0, 8016504 <on_reply+0x84>
 801649c:	6884      	ldr	r4, [r0, #8]
 801649e:	8b21      	ldrh	r1, [r4, #24]
 80164a0:	4291      	cmp	r1, r2
 80164a2:	d1f9      	bne.n	8016498 <on_reply+0x18>
 80164a4:	2248      	movs	r2, #72	@ 0x48
 80164a6:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80164aa:	4668      	mov	r0, sp
 80164ac:	f000 fd0b 	bl	8016ec6 <memcpy>
 80164b0:	f104 0320 	add.w	r3, r4, #32
 80164b4:	cb0c      	ldmia	r3, {r2, r3}
 80164b6:	4620      	mov	r0, r4
 80164b8:	f7f5 fc36 	bl	800bd28 <rmw_uxrce_get_static_input_buffer_for_entity>
 80164bc:	4680      	mov	r8, r0
 80164be:	b308      	cbz	r0, 8016504 <on_reply+0x84>
 80164c0:	4638      	mov	r0, r7
 80164c2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80164c6:	4632      	mov	r2, r6
 80164c8:	f107 0110 	add.w	r1, r7, #16
 80164cc:	f7fd ff3c 	bl	8014348 <ucdr_deserialize_array_uint8_t>
 80164d0:	b930      	cbnz	r0, 80164e0 <on_reply+0x60>
 80164d2:	480f      	ldr	r0, [pc, #60]	@ (8016510 <on_reply+0x90>)
 80164d4:	4641      	mov	r1, r8
 80164d6:	b014      	add	sp, #80	@ 0x50
 80164d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164dc:	f7fc bdc4 	b.w	8013068 <put_memory>
 80164e0:	2200      	movs	r2, #0
 80164e2:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80164e6:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80164ea:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80164ee:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80164f2:	f7fd fe1f 	bl	8014134 <rmw_uros_epoch_nanos>
 80164f6:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80164fa:	2304      	movs	r3, #4
 80164fc:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016500:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016504:	b014      	add	sp, #80	@ 0x50
 8016506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801650a:	bf00      	nop
 801650c:	20011568 	.word	0x20011568
 8016510:	20015e74 	.word	0x20015e74

08016514 <rmw_create_guard_condition>:
 8016514:	b538      	push	{r3, r4, r5, lr}
 8016516:	4605      	mov	r5, r0
 8016518:	4807      	ldr	r0, [pc, #28]	@ (8016538 <rmw_create_guard_condition+0x24>)
 801651a:	f7fc fd95 	bl	8013048 <get_memory>
 801651e:	b148      	cbz	r0, 8016534 <rmw_create_guard_condition+0x20>
 8016520:	6884      	ldr	r4, [r0, #8]
 8016522:	2300      	movs	r3, #0
 8016524:	7423      	strb	r3, [r4, #16]
 8016526:	61e5      	str	r5, [r4, #28]
 8016528:	f7fc fdf6 	bl	8013118 <rmw_get_implementation_identifier>
 801652c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016530:	f104 0014 	add.w	r0, r4, #20
 8016534:	bd38      	pop	{r3, r4, r5, pc}
 8016536:	bf00      	nop
 8016538:	20015e14 	.word	0x20015e14

0801653c <rmw_destroy_guard_condition>:
 801653c:	b508      	push	{r3, lr}
 801653e:	4b08      	ldr	r3, [pc, #32]	@ (8016560 <rmw_destroy_guard_condition+0x24>)
 8016540:	6819      	ldr	r1, [r3, #0]
 8016542:	b911      	cbnz	r1, 801654a <rmw_destroy_guard_condition+0xe>
 8016544:	e00a      	b.n	801655c <rmw_destroy_guard_condition+0x20>
 8016546:	6849      	ldr	r1, [r1, #4]
 8016548:	b141      	cbz	r1, 801655c <rmw_destroy_guard_condition+0x20>
 801654a:	688b      	ldr	r3, [r1, #8]
 801654c:	3314      	adds	r3, #20
 801654e:	4298      	cmp	r0, r3
 8016550:	d1f9      	bne.n	8016546 <rmw_destroy_guard_condition+0xa>
 8016552:	4803      	ldr	r0, [pc, #12]	@ (8016560 <rmw_destroy_guard_condition+0x24>)
 8016554:	f7fc fd88 	bl	8013068 <put_memory>
 8016558:	2000      	movs	r0, #0
 801655a:	bd08      	pop	{r3, pc}
 801655c:	2001      	movs	r0, #1
 801655e:	bd08      	pop	{r3, pc}
 8016560:	20015e14 	.word	0x20015e14

08016564 <rmw_trigger_guard_condition>:
 8016564:	b160      	cbz	r0, 8016580 <rmw_trigger_guard_condition+0x1c>
 8016566:	b510      	push	{r4, lr}
 8016568:	4604      	mov	r4, r0
 801656a:	6800      	ldr	r0, [r0, #0]
 801656c:	f7f5 fd52 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 8016570:	b908      	cbnz	r0, 8016576 <rmw_trigger_guard_condition+0x12>
 8016572:	2001      	movs	r0, #1
 8016574:	bd10      	pop	{r4, pc}
 8016576:	6863      	ldr	r3, [r4, #4]
 8016578:	2201      	movs	r2, #1
 801657a:	741a      	strb	r2, [r3, #16]
 801657c:	2000      	movs	r0, #0
 801657e:	bd10      	pop	{r4, pc}
 8016580:	2001      	movs	r0, #1
 8016582:	4770      	bx	lr

08016584 <calloc>:
 8016584:	4b02      	ldr	r3, [pc, #8]	@ (8016590 <calloc+0xc>)
 8016586:	460a      	mov	r2, r1
 8016588:	4601      	mov	r1, r0
 801658a:	6818      	ldr	r0, [r3, #0]
 801658c:	f000 b802 	b.w	8016594 <_calloc_r>
 8016590:	200000c0 	.word	0x200000c0

08016594 <_calloc_r>:
 8016594:	b570      	push	{r4, r5, r6, lr}
 8016596:	fba1 5402 	umull	r5, r4, r1, r2
 801659a:	b93c      	cbnz	r4, 80165ac <_calloc_r+0x18>
 801659c:	4629      	mov	r1, r5
 801659e:	f000 f887 	bl	80166b0 <_malloc_r>
 80165a2:	4606      	mov	r6, r0
 80165a4:	b928      	cbnz	r0, 80165b2 <_calloc_r+0x1e>
 80165a6:	2600      	movs	r6, #0
 80165a8:	4630      	mov	r0, r6
 80165aa:	bd70      	pop	{r4, r5, r6, pc}
 80165ac:	220c      	movs	r2, #12
 80165ae:	6002      	str	r2, [r0, #0]
 80165b0:	e7f9      	b.n	80165a6 <_calloc_r+0x12>
 80165b2:	462a      	mov	r2, r5
 80165b4:	4621      	mov	r1, r4
 80165b6:	f000 fbbd 	bl	8016d34 <memset>
 80165ba:	e7f5      	b.n	80165a8 <_calloc_r+0x14>

080165bc <getenv>:
 80165bc:	b507      	push	{r0, r1, r2, lr}
 80165be:	4b04      	ldr	r3, [pc, #16]	@ (80165d0 <getenv+0x14>)
 80165c0:	4601      	mov	r1, r0
 80165c2:	aa01      	add	r2, sp, #4
 80165c4:	6818      	ldr	r0, [r3, #0]
 80165c6:	f000 f805 	bl	80165d4 <_findenv_r>
 80165ca:	b003      	add	sp, #12
 80165cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80165d0:	200000c0 	.word	0x200000c0

080165d4 <_findenv_r>:
 80165d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165d8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016648 <_findenv_r+0x74>
 80165dc:	4606      	mov	r6, r0
 80165de:	4689      	mov	r9, r1
 80165e0:	4617      	mov	r7, r2
 80165e2:	f000 fc9d 	bl	8016f20 <__env_lock>
 80165e6:	f8da 4000 	ldr.w	r4, [sl]
 80165ea:	b134      	cbz	r4, 80165fa <_findenv_r+0x26>
 80165ec:	464b      	mov	r3, r9
 80165ee:	4698      	mov	r8, r3
 80165f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165f4:	b13a      	cbz	r2, 8016606 <_findenv_r+0x32>
 80165f6:	2a3d      	cmp	r2, #61	@ 0x3d
 80165f8:	d1f9      	bne.n	80165ee <_findenv_r+0x1a>
 80165fa:	4630      	mov	r0, r6
 80165fc:	f000 fc96 	bl	8016f2c <__env_unlock>
 8016600:	2000      	movs	r0, #0
 8016602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016606:	eba8 0809 	sub.w	r8, r8, r9
 801660a:	46a3      	mov	fp, r4
 801660c:	f854 0b04 	ldr.w	r0, [r4], #4
 8016610:	2800      	cmp	r0, #0
 8016612:	d0f2      	beq.n	80165fa <_findenv_r+0x26>
 8016614:	4642      	mov	r2, r8
 8016616:	4649      	mov	r1, r9
 8016618:	f000 fba1 	bl	8016d5e <strncmp>
 801661c:	2800      	cmp	r0, #0
 801661e:	d1f4      	bne.n	801660a <_findenv_r+0x36>
 8016620:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016624:	eb03 0508 	add.w	r5, r3, r8
 8016628:	f813 3008 	ldrb.w	r3, [r3, r8]
 801662c:	2b3d      	cmp	r3, #61	@ 0x3d
 801662e:	d1ec      	bne.n	801660a <_findenv_r+0x36>
 8016630:	f8da 3000 	ldr.w	r3, [sl]
 8016634:	ebab 0303 	sub.w	r3, fp, r3
 8016638:	109b      	asrs	r3, r3, #2
 801663a:	4630      	mov	r0, r6
 801663c:	603b      	str	r3, [r7, #0]
 801663e:	f000 fc75 	bl	8016f2c <__env_unlock>
 8016642:	1c68      	adds	r0, r5, #1
 8016644:	e7dd      	b.n	8016602 <_findenv_r+0x2e>
 8016646:	bf00      	nop
 8016648:	20000000 	.word	0x20000000

0801664c <malloc>:
 801664c:	4b02      	ldr	r3, [pc, #8]	@ (8016658 <malloc+0xc>)
 801664e:	4601      	mov	r1, r0
 8016650:	6818      	ldr	r0, [r3, #0]
 8016652:	f000 b82d 	b.w	80166b0 <_malloc_r>
 8016656:	bf00      	nop
 8016658:	200000c0 	.word	0x200000c0

0801665c <free>:
 801665c:	4b02      	ldr	r3, [pc, #8]	@ (8016668 <free+0xc>)
 801665e:	4601      	mov	r1, r0
 8016660:	6818      	ldr	r0, [r3, #0]
 8016662:	f000 bc69 	b.w	8016f38 <_free_r>
 8016666:	bf00      	nop
 8016668:	200000c0 	.word	0x200000c0

0801666c <sbrk_aligned>:
 801666c:	b570      	push	{r4, r5, r6, lr}
 801666e:	4e0f      	ldr	r6, [pc, #60]	@ (80166ac <sbrk_aligned+0x40>)
 8016670:	460c      	mov	r4, r1
 8016672:	6831      	ldr	r1, [r6, #0]
 8016674:	4605      	mov	r5, r0
 8016676:	b911      	cbnz	r1, 801667e <sbrk_aligned+0x12>
 8016678:	f000 fbce 	bl	8016e18 <_sbrk_r>
 801667c:	6030      	str	r0, [r6, #0]
 801667e:	4621      	mov	r1, r4
 8016680:	4628      	mov	r0, r5
 8016682:	f000 fbc9 	bl	8016e18 <_sbrk_r>
 8016686:	1c43      	adds	r3, r0, #1
 8016688:	d103      	bne.n	8016692 <sbrk_aligned+0x26>
 801668a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801668e:	4620      	mov	r0, r4
 8016690:	bd70      	pop	{r4, r5, r6, pc}
 8016692:	1cc4      	adds	r4, r0, #3
 8016694:	f024 0403 	bic.w	r4, r4, #3
 8016698:	42a0      	cmp	r0, r4
 801669a:	d0f8      	beq.n	801668e <sbrk_aligned+0x22>
 801669c:	1a21      	subs	r1, r4, r0
 801669e:	4628      	mov	r0, r5
 80166a0:	f000 fbba 	bl	8016e18 <_sbrk_r>
 80166a4:	3001      	adds	r0, #1
 80166a6:	d1f2      	bne.n	801668e <sbrk_aligned+0x22>
 80166a8:	e7ef      	b.n	801668a <sbrk_aligned+0x1e>
 80166aa:	bf00      	nop
 80166ac:	20015fc8 	.word	0x20015fc8

080166b0 <_malloc_r>:
 80166b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166b4:	1ccd      	adds	r5, r1, #3
 80166b6:	f025 0503 	bic.w	r5, r5, #3
 80166ba:	3508      	adds	r5, #8
 80166bc:	2d0c      	cmp	r5, #12
 80166be:	bf38      	it	cc
 80166c0:	250c      	movcc	r5, #12
 80166c2:	2d00      	cmp	r5, #0
 80166c4:	4606      	mov	r6, r0
 80166c6:	db01      	blt.n	80166cc <_malloc_r+0x1c>
 80166c8:	42a9      	cmp	r1, r5
 80166ca:	d904      	bls.n	80166d6 <_malloc_r+0x26>
 80166cc:	230c      	movs	r3, #12
 80166ce:	6033      	str	r3, [r6, #0]
 80166d0:	2000      	movs	r0, #0
 80166d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80167ac <_malloc_r+0xfc>
 80166da:	f000 f869 	bl	80167b0 <__malloc_lock>
 80166de:	f8d8 3000 	ldr.w	r3, [r8]
 80166e2:	461c      	mov	r4, r3
 80166e4:	bb44      	cbnz	r4, 8016738 <_malloc_r+0x88>
 80166e6:	4629      	mov	r1, r5
 80166e8:	4630      	mov	r0, r6
 80166ea:	f7ff ffbf 	bl	801666c <sbrk_aligned>
 80166ee:	1c43      	adds	r3, r0, #1
 80166f0:	4604      	mov	r4, r0
 80166f2:	d158      	bne.n	80167a6 <_malloc_r+0xf6>
 80166f4:	f8d8 4000 	ldr.w	r4, [r8]
 80166f8:	4627      	mov	r7, r4
 80166fa:	2f00      	cmp	r7, #0
 80166fc:	d143      	bne.n	8016786 <_malloc_r+0xd6>
 80166fe:	2c00      	cmp	r4, #0
 8016700:	d04b      	beq.n	801679a <_malloc_r+0xea>
 8016702:	6823      	ldr	r3, [r4, #0]
 8016704:	4639      	mov	r1, r7
 8016706:	4630      	mov	r0, r6
 8016708:	eb04 0903 	add.w	r9, r4, r3
 801670c:	f000 fb84 	bl	8016e18 <_sbrk_r>
 8016710:	4581      	cmp	r9, r0
 8016712:	d142      	bne.n	801679a <_malloc_r+0xea>
 8016714:	6821      	ldr	r1, [r4, #0]
 8016716:	1a6d      	subs	r5, r5, r1
 8016718:	4629      	mov	r1, r5
 801671a:	4630      	mov	r0, r6
 801671c:	f7ff ffa6 	bl	801666c <sbrk_aligned>
 8016720:	3001      	adds	r0, #1
 8016722:	d03a      	beq.n	801679a <_malloc_r+0xea>
 8016724:	6823      	ldr	r3, [r4, #0]
 8016726:	442b      	add	r3, r5
 8016728:	6023      	str	r3, [r4, #0]
 801672a:	f8d8 3000 	ldr.w	r3, [r8]
 801672e:	685a      	ldr	r2, [r3, #4]
 8016730:	bb62      	cbnz	r2, 801678c <_malloc_r+0xdc>
 8016732:	f8c8 7000 	str.w	r7, [r8]
 8016736:	e00f      	b.n	8016758 <_malloc_r+0xa8>
 8016738:	6822      	ldr	r2, [r4, #0]
 801673a:	1b52      	subs	r2, r2, r5
 801673c:	d420      	bmi.n	8016780 <_malloc_r+0xd0>
 801673e:	2a0b      	cmp	r2, #11
 8016740:	d917      	bls.n	8016772 <_malloc_r+0xc2>
 8016742:	1961      	adds	r1, r4, r5
 8016744:	42a3      	cmp	r3, r4
 8016746:	6025      	str	r5, [r4, #0]
 8016748:	bf18      	it	ne
 801674a:	6059      	strne	r1, [r3, #4]
 801674c:	6863      	ldr	r3, [r4, #4]
 801674e:	bf08      	it	eq
 8016750:	f8c8 1000 	streq.w	r1, [r8]
 8016754:	5162      	str	r2, [r4, r5]
 8016756:	604b      	str	r3, [r1, #4]
 8016758:	4630      	mov	r0, r6
 801675a:	f000 f82f 	bl	80167bc <__malloc_unlock>
 801675e:	f104 000b 	add.w	r0, r4, #11
 8016762:	1d23      	adds	r3, r4, #4
 8016764:	f020 0007 	bic.w	r0, r0, #7
 8016768:	1ac2      	subs	r2, r0, r3
 801676a:	bf1c      	itt	ne
 801676c:	1a1b      	subne	r3, r3, r0
 801676e:	50a3      	strne	r3, [r4, r2]
 8016770:	e7af      	b.n	80166d2 <_malloc_r+0x22>
 8016772:	6862      	ldr	r2, [r4, #4]
 8016774:	42a3      	cmp	r3, r4
 8016776:	bf0c      	ite	eq
 8016778:	f8c8 2000 	streq.w	r2, [r8]
 801677c:	605a      	strne	r2, [r3, #4]
 801677e:	e7eb      	b.n	8016758 <_malloc_r+0xa8>
 8016780:	4623      	mov	r3, r4
 8016782:	6864      	ldr	r4, [r4, #4]
 8016784:	e7ae      	b.n	80166e4 <_malloc_r+0x34>
 8016786:	463c      	mov	r4, r7
 8016788:	687f      	ldr	r7, [r7, #4]
 801678a:	e7b6      	b.n	80166fa <_malloc_r+0x4a>
 801678c:	461a      	mov	r2, r3
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	42a3      	cmp	r3, r4
 8016792:	d1fb      	bne.n	801678c <_malloc_r+0xdc>
 8016794:	2300      	movs	r3, #0
 8016796:	6053      	str	r3, [r2, #4]
 8016798:	e7de      	b.n	8016758 <_malloc_r+0xa8>
 801679a:	230c      	movs	r3, #12
 801679c:	6033      	str	r3, [r6, #0]
 801679e:	4630      	mov	r0, r6
 80167a0:	f000 f80c 	bl	80167bc <__malloc_unlock>
 80167a4:	e794      	b.n	80166d0 <_malloc_r+0x20>
 80167a6:	6005      	str	r5, [r0, #0]
 80167a8:	e7d6      	b.n	8016758 <_malloc_r+0xa8>
 80167aa:	bf00      	nop
 80167ac:	20015fcc 	.word	0x20015fcc

080167b0 <__malloc_lock>:
 80167b0:	4801      	ldr	r0, [pc, #4]	@ (80167b8 <__malloc_lock+0x8>)
 80167b2:	f000 bb7e 	b.w	8016eb2 <__retarget_lock_acquire_recursive>
 80167b6:	bf00      	nop
 80167b8:	20016111 	.word	0x20016111

080167bc <__malloc_unlock>:
 80167bc:	4801      	ldr	r0, [pc, #4]	@ (80167c4 <__malloc_unlock+0x8>)
 80167be:	f000 bb79 	b.w	8016eb4 <__retarget_lock_release_recursive>
 80167c2:	bf00      	nop
 80167c4:	20016111 	.word	0x20016111

080167c8 <srand>:
 80167c8:	b538      	push	{r3, r4, r5, lr}
 80167ca:	4b10      	ldr	r3, [pc, #64]	@ (801680c <srand+0x44>)
 80167cc:	681d      	ldr	r5, [r3, #0]
 80167ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80167d0:	4604      	mov	r4, r0
 80167d2:	b9b3      	cbnz	r3, 8016802 <srand+0x3a>
 80167d4:	2018      	movs	r0, #24
 80167d6:	f7ff ff39 	bl	801664c <malloc>
 80167da:	4602      	mov	r2, r0
 80167dc:	6328      	str	r0, [r5, #48]	@ 0x30
 80167de:	b920      	cbnz	r0, 80167ea <srand+0x22>
 80167e0:	4b0b      	ldr	r3, [pc, #44]	@ (8016810 <srand+0x48>)
 80167e2:	480c      	ldr	r0, [pc, #48]	@ (8016814 <srand+0x4c>)
 80167e4:	2146      	movs	r1, #70	@ 0x46
 80167e6:	f000 fb7d 	bl	8016ee4 <__assert_func>
 80167ea:	490b      	ldr	r1, [pc, #44]	@ (8016818 <srand+0x50>)
 80167ec:	4b0b      	ldr	r3, [pc, #44]	@ (801681c <srand+0x54>)
 80167ee:	e9c0 1300 	strd	r1, r3, [r0]
 80167f2:	4b0b      	ldr	r3, [pc, #44]	@ (8016820 <srand+0x58>)
 80167f4:	6083      	str	r3, [r0, #8]
 80167f6:	230b      	movs	r3, #11
 80167f8:	8183      	strh	r3, [r0, #12]
 80167fa:	2100      	movs	r1, #0
 80167fc:	2001      	movs	r0, #1
 80167fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016802:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016804:	2200      	movs	r2, #0
 8016806:	611c      	str	r4, [r3, #16]
 8016808:	615a      	str	r2, [r3, #20]
 801680a:	bd38      	pop	{r3, r4, r5, pc}
 801680c:	200000c0 	.word	0x200000c0
 8016810:	080186d0 	.word	0x080186d0
 8016814:	080186e7 	.word	0x080186e7
 8016818:	abcd330e 	.word	0xabcd330e
 801681c:	e66d1234 	.word	0xe66d1234
 8016820:	0005deec 	.word	0x0005deec

08016824 <rand>:
 8016824:	4b16      	ldr	r3, [pc, #88]	@ (8016880 <rand+0x5c>)
 8016826:	b510      	push	{r4, lr}
 8016828:	681c      	ldr	r4, [r3, #0]
 801682a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801682c:	b9b3      	cbnz	r3, 801685c <rand+0x38>
 801682e:	2018      	movs	r0, #24
 8016830:	f7ff ff0c 	bl	801664c <malloc>
 8016834:	4602      	mov	r2, r0
 8016836:	6320      	str	r0, [r4, #48]	@ 0x30
 8016838:	b920      	cbnz	r0, 8016844 <rand+0x20>
 801683a:	4b12      	ldr	r3, [pc, #72]	@ (8016884 <rand+0x60>)
 801683c:	4812      	ldr	r0, [pc, #72]	@ (8016888 <rand+0x64>)
 801683e:	2152      	movs	r1, #82	@ 0x52
 8016840:	f000 fb50 	bl	8016ee4 <__assert_func>
 8016844:	4911      	ldr	r1, [pc, #68]	@ (801688c <rand+0x68>)
 8016846:	4b12      	ldr	r3, [pc, #72]	@ (8016890 <rand+0x6c>)
 8016848:	e9c0 1300 	strd	r1, r3, [r0]
 801684c:	4b11      	ldr	r3, [pc, #68]	@ (8016894 <rand+0x70>)
 801684e:	6083      	str	r3, [r0, #8]
 8016850:	230b      	movs	r3, #11
 8016852:	8183      	strh	r3, [r0, #12]
 8016854:	2100      	movs	r1, #0
 8016856:	2001      	movs	r0, #1
 8016858:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801685c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801685e:	480e      	ldr	r0, [pc, #56]	@ (8016898 <rand+0x74>)
 8016860:	690b      	ldr	r3, [r1, #16]
 8016862:	694c      	ldr	r4, [r1, #20]
 8016864:	4a0d      	ldr	r2, [pc, #52]	@ (801689c <rand+0x78>)
 8016866:	4358      	muls	r0, r3
 8016868:	fb02 0004 	mla	r0, r2, r4, r0
 801686c:	fba3 3202 	umull	r3, r2, r3, r2
 8016870:	3301      	adds	r3, #1
 8016872:	eb40 0002 	adc.w	r0, r0, r2
 8016876:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801687a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801687e:	bd10      	pop	{r4, pc}
 8016880:	200000c0 	.word	0x200000c0
 8016884:	080186d0 	.word	0x080186d0
 8016888:	080186e7 	.word	0x080186e7
 801688c:	abcd330e 	.word	0xabcd330e
 8016890:	e66d1234 	.word	0xe66d1234
 8016894:	0005deec 	.word	0x0005deec
 8016898:	5851f42d 	.word	0x5851f42d
 801689c:	4c957f2d 	.word	0x4c957f2d

080168a0 <realloc>:
 80168a0:	4b02      	ldr	r3, [pc, #8]	@ (80168ac <realloc+0xc>)
 80168a2:	460a      	mov	r2, r1
 80168a4:	4601      	mov	r1, r0
 80168a6:	6818      	ldr	r0, [r3, #0]
 80168a8:	f000 b802 	b.w	80168b0 <_realloc_r>
 80168ac:	200000c0 	.word	0x200000c0

080168b0 <_realloc_r>:
 80168b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168b4:	4680      	mov	r8, r0
 80168b6:	4615      	mov	r5, r2
 80168b8:	460c      	mov	r4, r1
 80168ba:	b921      	cbnz	r1, 80168c6 <_realloc_r+0x16>
 80168bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80168c0:	4611      	mov	r1, r2
 80168c2:	f7ff bef5 	b.w	80166b0 <_malloc_r>
 80168c6:	b92a      	cbnz	r2, 80168d4 <_realloc_r+0x24>
 80168c8:	f000 fb36 	bl	8016f38 <_free_r>
 80168cc:	2400      	movs	r4, #0
 80168ce:	4620      	mov	r0, r4
 80168d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168d4:	f000 fb7a 	bl	8016fcc <_malloc_usable_size_r>
 80168d8:	4285      	cmp	r5, r0
 80168da:	4606      	mov	r6, r0
 80168dc:	d802      	bhi.n	80168e4 <_realloc_r+0x34>
 80168de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80168e2:	d8f4      	bhi.n	80168ce <_realloc_r+0x1e>
 80168e4:	4629      	mov	r1, r5
 80168e6:	4640      	mov	r0, r8
 80168e8:	f7ff fee2 	bl	80166b0 <_malloc_r>
 80168ec:	4607      	mov	r7, r0
 80168ee:	2800      	cmp	r0, #0
 80168f0:	d0ec      	beq.n	80168cc <_realloc_r+0x1c>
 80168f2:	42b5      	cmp	r5, r6
 80168f4:	462a      	mov	r2, r5
 80168f6:	4621      	mov	r1, r4
 80168f8:	bf28      	it	cs
 80168fa:	4632      	movcs	r2, r6
 80168fc:	f000 fae3 	bl	8016ec6 <memcpy>
 8016900:	4621      	mov	r1, r4
 8016902:	4640      	mov	r0, r8
 8016904:	f000 fb18 	bl	8016f38 <_free_r>
 8016908:	463c      	mov	r4, r7
 801690a:	e7e0      	b.n	80168ce <_realloc_r+0x1e>

0801690c <_strtoul_l.constprop.0>:
 801690c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016910:	4e34      	ldr	r6, [pc, #208]	@ (80169e4 <_strtoul_l.constprop.0+0xd8>)
 8016912:	4686      	mov	lr, r0
 8016914:	460d      	mov	r5, r1
 8016916:	4628      	mov	r0, r5
 8016918:	f815 4b01 	ldrb.w	r4, [r5], #1
 801691c:	5d37      	ldrb	r7, [r6, r4]
 801691e:	f017 0708 	ands.w	r7, r7, #8
 8016922:	d1f8      	bne.n	8016916 <_strtoul_l.constprop.0+0xa>
 8016924:	2c2d      	cmp	r4, #45	@ 0x2d
 8016926:	d12f      	bne.n	8016988 <_strtoul_l.constprop.0+0x7c>
 8016928:	782c      	ldrb	r4, [r5, #0]
 801692a:	2701      	movs	r7, #1
 801692c:	1c85      	adds	r5, r0, #2
 801692e:	f033 0010 	bics.w	r0, r3, #16
 8016932:	d109      	bne.n	8016948 <_strtoul_l.constprop.0+0x3c>
 8016934:	2c30      	cmp	r4, #48	@ 0x30
 8016936:	d12c      	bne.n	8016992 <_strtoul_l.constprop.0+0x86>
 8016938:	7828      	ldrb	r0, [r5, #0]
 801693a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801693e:	2858      	cmp	r0, #88	@ 0x58
 8016940:	d127      	bne.n	8016992 <_strtoul_l.constprop.0+0x86>
 8016942:	786c      	ldrb	r4, [r5, #1]
 8016944:	2310      	movs	r3, #16
 8016946:	3502      	adds	r5, #2
 8016948:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801694c:	2600      	movs	r6, #0
 801694e:	fbb8 f8f3 	udiv	r8, r8, r3
 8016952:	fb03 f908 	mul.w	r9, r3, r8
 8016956:	ea6f 0909 	mvn.w	r9, r9
 801695a:	4630      	mov	r0, r6
 801695c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016960:	f1bc 0f09 	cmp.w	ip, #9
 8016964:	d81c      	bhi.n	80169a0 <_strtoul_l.constprop.0+0x94>
 8016966:	4664      	mov	r4, ip
 8016968:	42a3      	cmp	r3, r4
 801696a:	dd2a      	ble.n	80169c2 <_strtoul_l.constprop.0+0xb6>
 801696c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016970:	d007      	beq.n	8016982 <_strtoul_l.constprop.0+0x76>
 8016972:	4580      	cmp	r8, r0
 8016974:	d322      	bcc.n	80169bc <_strtoul_l.constprop.0+0xb0>
 8016976:	d101      	bne.n	801697c <_strtoul_l.constprop.0+0x70>
 8016978:	45a1      	cmp	r9, r4
 801697a:	db1f      	blt.n	80169bc <_strtoul_l.constprop.0+0xb0>
 801697c:	fb00 4003 	mla	r0, r0, r3, r4
 8016980:	2601      	movs	r6, #1
 8016982:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016986:	e7e9      	b.n	801695c <_strtoul_l.constprop.0+0x50>
 8016988:	2c2b      	cmp	r4, #43	@ 0x2b
 801698a:	bf04      	itt	eq
 801698c:	782c      	ldrbeq	r4, [r5, #0]
 801698e:	1c85      	addeq	r5, r0, #2
 8016990:	e7cd      	b.n	801692e <_strtoul_l.constprop.0+0x22>
 8016992:	2b00      	cmp	r3, #0
 8016994:	d1d8      	bne.n	8016948 <_strtoul_l.constprop.0+0x3c>
 8016996:	2c30      	cmp	r4, #48	@ 0x30
 8016998:	bf0c      	ite	eq
 801699a:	2308      	moveq	r3, #8
 801699c:	230a      	movne	r3, #10
 801699e:	e7d3      	b.n	8016948 <_strtoul_l.constprop.0+0x3c>
 80169a0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80169a4:	f1bc 0f19 	cmp.w	ip, #25
 80169a8:	d801      	bhi.n	80169ae <_strtoul_l.constprop.0+0xa2>
 80169aa:	3c37      	subs	r4, #55	@ 0x37
 80169ac:	e7dc      	b.n	8016968 <_strtoul_l.constprop.0+0x5c>
 80169ae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80169b2:	f1bc 0f19 	cmp.w	ip, #25
 80169b6:	d804      	bhi.n	80169c2 <_strtoul_l.constprop.0+0xb6>
 80169b8:	3c57      	subs	r4, #87	@ 0x57
 80169ba:	e7d5      	b.n	8016968 <_strtoul_l.constprop.0+0x5c>
 80169bc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80169c0:	e7df      	b.n	8016982 <_strtoul_l.constprop.0+0x76>
 80169c2:	1c73      	adds	r3, r6, #1
 80169c4:	d106      	bne.n	80169d4 <_strtoul_l.constprop.0+0xc8>
 80169c6:	2322      	movs	r3, #34	@ 0x22
 80169c8:	f8ce 3000 	str.w	r3, [lr]
 80169cc:	4630      	mov	r0, r6
 80169ce:	b932      	cbnz	r2, 80169de <_strtoul_l.constprop.0+0xd2>
 80169d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169d4:	b107      	cbz	r7, 80169d8 <_strtoul_l.constprop.0+0xcc>
 80169d6:	4240      	negs	r0, r0
 80169d8:	2a00      	cmp	r2, #0
 80169da:	d0f9      	beq.n	80169d0 <_strtoul_l.constprop.0+0xc4>
 80169dc:	b106      	cbz	r6, 80169e0 <_strtoul_l.constprop.0+0xd4>
 80169de:	1e69      	subs	r1, r5, #1
 80169e0:	6011      	str	r1, [r2, #0]
 80169e2:	e7f5      	b.n	80169d0 <_strtoul_l.constprop.0+0xc4>
 80169e4:	08018740 	.word	0x08018740

080169e8 <strtoul>:
 80169e8:	4613      	mov	r3, r2
 80169ea:	460a      	mov	r2, r1
 80169ec:	4601      	mov	r1, r0
 80169ee:	4802      	ldr	r0, [pc, #8]	@ (80169f8 <strtoul+0x10>)
 80169f0:	6800      	ldr	r0, [r0, #0]
 80169f2:	f7ff bf8b 	b.w	801690c <_strtoul_l.constprop.0>
 80169f6:	bf00      	nop
 80169f8:	200000c0 	.word	0x200000c0

080169fc <std>:
 80169fc:	2300      	movs	r3, #0
 80169fe:	b510      	push	{r4, lr}
 8016a00:	4604      	mov	r4, r0
 8016a02:	e9c0 3300 	strd	r3, r3, [r0]
 8016a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016a0a:	6083      	str	r3, [r0, #8]
 8016a0c:	8181      	strh	r1, [r0, #12]
 8016a0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016a10:	81c2      	strh	r2, [r0, #14]
 8016a12:	6183      	str	r3, [r0, #24]
 8016a14:	4619      	mov	r1, r3
 8016a16:	2208      	movs	r2, #8
 8016a18:	305c      	adds	r0, #92	@ 0x5c
 8016a1a:	f000 f98b 	bl	8016d34 <memset>
 8016a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8016a54 <std+0x58>)
 8016a20:	6263      	str	r3, [r4, #36]	@ 0x24
 8016a22:	4b0d      	ldr	r3, [pc, #52]	@ (8016a58 <std+0x5c>)
 8016a24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016a26:	4b0d      	ldr	r3, [pc, #52]	@ (8016a5c <std+0x60>)
 8016a28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8016a60 <std+0x64>)
 8016a2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8016a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8016a64 <std+0x68>)
 8016a30:	6224      	str	r4, [r4, #32]
 8016a32:	429c      	cmp	r4, r3
 8016a34:	d006      	beq.n	8016a44 <std+0x48>
 8016a36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016a3a:	4294      	cmp	r4, r2
 8016a3c:	d002      	beq.n	8016a44 <std+0x48>
 8016a3e:	33d0      	adds	r3, #208	@ 0xd0
 8016a40:	429c      	cmp	r4, r3
 8016a42:	d105      	bne.n	8016a50 <std+0x54>
 8016a44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a4c:	f000 ba30 	b.w	8016eb0 <__retarget_lock_init_recursive>
 8016a50:	bd10      	pop	{r4, pc}
 8016a52:	bf00      	nop
 8016a54:	08016be9 	.word	0x08016be9
 8016a58:	08016c0b 	.word	0x08016c0b
 8016a5c:	08016c43 	.word	0x08016c43
 8016a60:	08016c67 	.word	0x08016c67
 8016a64:	20015fd0 	.word	0x20015fd0

08016a68 <stdio_exit_handler>:
 8016a68:	4a02      	ldr	r2, [pc, #8]	@ (8016a74 <stdio_exit_handler+0xc>)
 8016a6a:	4903      	ldr	r1, [pc, #12]	@ (8016a78 <stdio_exit_handler+0x10>)
 8016a6c:	4803      	ldr	r0, [pc, #12]	@ (8016a7c <stdio_exit_handler+0x14>)
 8016a6e:	f000 b869 	b.w	8016b44 <_fwalk_sglue>
 8016a72:	bf00      	nop
 8016a74:	200000b4 	.word	0x200000b4
 8016a78:	080176b1 	.word	0x080176b1
 8016a7c:	200000c4 	.word	0x200000c4

08016a80 <cleanup_stdio>:
 8016a80:	6841      	ldr	r1, [r0, #4]
 8016a82:	4b0c      	ldr	r3, [pc, #48]	@ (8016ab4 <cleanup_stdio+0x34>)
 8016a84:	4299      	cmp	r1, r3
 8016a86:	b510      	push	{r4, lr}
 8016a88:	4604      	mov	r4, r0
 8016a8a:	d001      	beq.n	8016a90 <cleanup_stdio+0x10>
 8016a8c:	f000 fe10 	bl	80176b0 <_fflush_r>
 8016a90:	68a1      	ldr	r1, [r4, #8]
 8016a92:	4b09      	ldr	r3, [pc, #36]	@ (8016ab8 <cleanup_stdio+0x38>)
 8016a94:	4299      	cmp	r1, r3
 8016a96:	d002      	beq.n	8016a9e <cleanup_stdio+0x1e>
 8016a98:	4620      	mov	r0, r4
 8016a9a:	f000 fe09 	bl	80176b0 <_fflush_r>
 8016a9e:	68e1      	ldr	r1, [r4, #12]
 8016aa0:	4b06      	ldr	r3, [pc, #24]	@ (8016abc <cleanup_stdio+0x3c>)
 8016aa2:	4299      	cmp	r1, r3
 8016aa4:	d004      	beq.n	8016ab0 <cleanup_stdio+0x30>
 8016aa6:	4620      	mov	r0, r4
 8016aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016aac:	f000 be00 	b.w	80176b0 <_fflush_r>
 8016ab0:	bd10      	pop	{r4, pc}
 8016ab2:	bf00      	nop
 8016ab4:	20015fd0 	.word	0x20015fd0
 8016ab8:	20016038 	.word	0x20016038
 8016abc:	200160a0 	.word	0x200160a0

08016ac0 <global_stdio_init.part.0>:
 8016ac0:	b510      	push	{r4, lr}
 8016ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8016af0 <global_stdio_init.part.0+0x30>)
 8016ac4:	4c0b      	ldr	r4, [pc, #44]	@ (8016af4 <global_stdio_init.part.0+0x34>)
 8016ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8016af8 <global_stdio_init.part.0+0x38>)
 8016ac8:	601a      	str	r2, [r3, #0]
 8016aca:	4620      	mov	r0, r4
 8016acc:	2200      	movs	r2, #0
 8016ace:	2104      	movs	r1, #4
 8016ad0:	f7ff ff94 	bl	80169fc <std>
 8016ad4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016ad8:	2201      	movs	r2, #1
 8016ada:	2109      	movs	r1, #9
 8016adc:	f7ff ff8e 	bl	80169fc <std>
 8016ae0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016ae4:	2202      	movs	r2, #2
 8016ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016aea:	2112      	movs	r1, #18
 8016aec:	f7ff bf86 	b.w	80169fc <std>
 8016af0:	20016108 	.word	0x20016108
 8016af4:	20015fd0 	.word	0x20015fd0
 8016af8:	08016a69 	.word	0x08016a69

08016afc <__sfp_lock_acquire>:
 8016afc:	4801      	ldr	r0, [pc, #4]	@ (8016b04 <__sfp_lock_acquire+0x8>)
 8016afe:	f000 b9d8 	b.w	8016eb2 <__retarget_lock_acquire_recursive>
 8016b02:	bf00      	nop
 8016b04:	20016112 	.word	0x20016112

08016b08 <__sfp_lock_release>:
 8016b08:	4801      	ldr	r0, [pc, #4]	@ (8016b10 <__sfp_lock_release+0x8>)
 8016b0a:	f000 b9d3 	b.w	8016eb4 <__retarget_lock_release_recursive>
 8016b0e:	bf00      	nop
 8016b10:	20016112 	.word	0x20016112

08016b14 <__sinit>:
 8016b14:	b510      	push	{r4, lr}
 8016b16:	4604      	mov	r4, r0
 8016b18:	f7ff fff0 	bl	8016afc <__sfp_lock_acquire>
 8016b1c:	6a23      	ldr	r3, [r4, #32]
 8016b1e:	b11b      	cbz	r3, 8016b28 <__sinit+0x14>
 8016b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b24:	f7ff bff0 	b.w	8016b08 <__sfp_lock_release>
 8016b28:	4b04      	ldr	r3, [pc, #16]	@ (8016b3c <__sinit+0x28>)
 8016b2a:	6223      	str	r3, [r4, #32]
 8016b2c:	4b04      	ldr	r3, [pc, #16]	@ (8016b40 <__sinit+0x2c>)
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d1f5      	bne.n	8016b20 <__sinit+0xc>
 8016b34:	f7ff ffc4 	bl	8016ac0 <global_stdio_init.part.0>
 8016b38:	e7f2      	b.n	8016b20 <__sinit+0xc>
 8016b3a:	bf00      	nop
 8016b3c:	08016a81 	.word	0x08016a81
 8016b40:	20016108 	.word	0x20016108

08016b44 <_fwalk_sglue>:
 8016b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b48:	4607      	mov	r7, r0
 8016b4a:	4688      	mov	r8, r1
 8016b4c:	4614      	mov	r4, r2
 8016b4e:	2600      	movs	r6, #0
 8016b50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016b54:	f1b9 0901 	subs.w	r9, r9, #1
 8016b58:	d505      	bpl.n	8016b66 <_fwalk_sglue+0x22>
 8016b5a:	6824      	ldr	r4, [r4, #0]
 8016b5c:	2c00      	cmp	r4, #0
 8016b5e:	d1f7      	bne.n	8016b50 <_fwalk_sglue+0xc>
 8016b60:	4630      	mov	r0, r6
 8016b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b66:	89ab      	ldrh	r3, [r5, #12]
 8016b68:	2b01      	cmp	r3, #1
 8016b6a:	d907      	bls.n	8016b7c <_fwalk_sglue+0x38>
 8016b6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016b70:	3301      	adds	r3, #1
 8016b72:	d003      	beq.n	8016b7c <_fwalk_sglue+0x38>
 8016b74:	4629      	mov	r1, r5
 8016b76:	4638      	mov	r0, r7
 8016b78:	47c0      	blx	r8
 8016b7a:	4306      	orrs	r6, r0
 8016b7c:	3568      	adds	r5, #104	@ 0x68
 8016b7e:	e7e9      	b.n	8016b54 <_fwalk_sglue+0x10>

08016b80 <sniprintf>:
 8016b80:	b40c      	push	{r2, r3}
 8016b82:	b530      	push	{r4, r5, lr}
 8016b84:	4b17      	ldr	r3, [pc, #92]	@ (8016be4 <sniprintf+0x64>)
 8016b86:	1e0c      	subs	r4, r1, #0
 8016b88:	681d      	ldr	r5, [r3, #0]
 8016b8a:	b09d      	sub	sp, #116	@ 0x74
 8016b8c:	da08      	bge.n	8016ba0 <sniprintf+0x20>
 8016b8e:	238b      	movs	r3, #139	@ 0x8b
 8016b90:	602b      	str	r3, [r5, #0]
 8016b92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016b96:	b01d      	add	sp, #116	@ 0x74
 8016b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016b9c:	b002      	add	sp, #8
 8016b9e:	4770      	bx	lr
 8016ba0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016ba4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016ba8:	bf14      	ite	ne
 8016baa:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016bae:	4623      	moveq	r3, r4
 8016bb0:	9304      	str	r3, [sp, #16]
 8016bb2:	9307      	str	r3, [sp, #28]
 8016bb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016bb8:	9002      	str	r0, [sp, #8]
 8016bba:	9006      	str	r0, [sp, #24]
 8016bbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016bc0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016bc2:	ab21      	add	r3, sp, #132	@ 0x84
 8016bc4:	a902      	add	r1, sp, #8
 8016bc6:	4628      	mov	r0, r5
 8016bc8:	9301      	str	r3, [sp, #4]
 8016bca:	f000 fa63 	bl	8017094 <_svfiprintf_r>
 8016bce:	1c43      	adds	r3, r0, #1
 8016bd0:	bfbc      	itt	lt
 8016bd2:	238b      	movlt	r3, #139	@ 0x8b
 8016bd4:	602b      	strlt	r3, [r5, #0]
 8016bd6:	2c00      	cmp	r4, #0
 8016bd8:	d0dd      	beq.n	8016b96 <sniprintf+0x16>
 8016bda:	9b02      	ldr	r3, [sp, #8]
 8016bdc:	2200      	movs	r2, #0
 8016bde:	701a      	strb	r2, [r3, #0]
 8016be0:	e7d9      	b.n	8016b96 <sniprintf+0x16>
 8016be2:	bf00      	nop
 8016be4:	200000c0 	.word	0x200000c0

08016be8 <__sread>:
 8016be8:	b510      	push	{r4, lr}
 8016bea:	460c      	mov	r4, r1
 8016bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bf0:	f000 f900 	bl	8016df4 <_read_r>
 8016bf4:	2800      	cmp	r0, #0
 8016bf6:	bfab      	itete	ge
 8016bf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8016bfc:	181b      	addge	r3, r3, r0
 8016bfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016c02:	bfac      	ite	ge
 8016c04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016c06:	81a3      	strhlt	r3, [r4, #12]
 8016c08:	bd10      	pop	{r4, pc}

08016c0a <__swrite>:
 8016c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c0e:	461f      	mov	r7, r3
 8016c10:	898b      	ldrh	r3, [r1, #12]
 8016c12:	05db      	lsls	r3, r3, #23
 8016c14:	4605      	mov	r5, r0
 8016c16:	460c      	mov	r4, r1
 8016c18:	4616      	mov	r6, r2
 8016c1a:	d505      	bpl.n	8016c28 <__swrite+0x1e>
 8016c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c20:	2302      	movs	r3, #2
 8016c22:	2200      	movs	r2, #0
 8016c24:	f000 f8d4 	bl	8016dd0 <_lseek_r>
 8016c28:	89a3      	ldrh	r3, [r4, #12]
 8016c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016c32:	81a3      	strh	r3, [r4, #12]
 8016c34:	4632      	mov	r2, r6
 8016c36:	463b      	mov	r3, r7
 8016c38:	4628      	mov	r0, r5
 8016c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c3e:	f000 b8fb 	b.w	8016e38 <_write_r>

08016c42 <__sseek>:
 8016c42:	b510      	push	{r4, lr}
 8016c44:	460c      	mov	r4, r1
 8016c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c4a:	f000 f8c1 	bl	8016dd0 <_lseek_r>
 8016c4e:	1c43      	adds	r3, r0, #1
 8016c50:	89a3      	ldrh	r3, [r4, #12]
 8016c52:	bf15      	itete	ne
 8016c54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016c56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016c5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016c5e:	81a3      	strheq	r3, [r4, #12]
 8016c60:	bf18      	it	ne
 8016c62:	81a3      	strhne	r3, [r4, #12]
 8016c64:	bd10      	pop	{r4, pc}

08016c66 <__sclose>:
 8016c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c6a:	f000 b8a1 	b.w	8016db0 <_close_r>

08016c6e <_vsniprintf_r>:
 8016c6e:	b530      	push	{r4, r5, lr}
 8016c70:	4614      	mov	r4, r2
 8016c72:	2c00      	cmp	r4, #0
 8016c74:	b09b      	sub	sp, #108	@ 0x6c
 8016c76:	4605      	mov	r5, r0
 8016c78:	461a      	mov	r2, r3
 8016c7a:	da05      	bge.n	8016c88 <_vsniprintf_r+0x1a>
 8016c7c:	238b      	movs	r3, #139	@ 0x8b
 8016c7e:	6003      	str	r3, [r0, #0]
 8016c80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016c84:	b01b      	add	sp, #108	@ 0x6c
 8016c86:	bd30      	pop	{r4, r5, pc}
 8016c88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016c8c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016c90:	bf14      	ite	ne
 8016c92:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016c96:	4623      	moveq	r3, r4
 8016c98:	9302      	str	r3, [sp, #8]
 8016c9a:	9305      	str	r3, [sp, #20]
 8016c9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016ca0:	9100      	str	r1, [sp, #0]
 8016ca2:	9104      	str	r1, [sp, #16]
 8016ca4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016ca8:	4669      	mov	r1, sp
 8016caa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016cac:	f000 f9f2 	bl	8017094 <_svfiprintf_r>
 8016cb0:	1c43      	adds	r3, r0, #1
 8016cb2:	bfbc      	itt	lt
 8016cb4:	238b      	movlt	r3, #139	@ 0x8b
 8016cb6:	602b      	strlt	r3, [r5, #0]
 8016cb8:	2c00      	cmp	r4, #0
 8016cba:	d0e3      	beq.n	8016c84 <_vsniprintf_r+0x16>
 8016cbc:	9b00      	ldr	r3, [sp, #0]
 8016cbe:	2200      	movs	r2, #0
 8016cc0:	701a      	strb	r2, [r3, #0]
 8016cc2:	e7df      	b.n	8016c84 <_vsniprintf_r+0x16>

08016cc4 <vsniprintf>:
 8016cc4:	b507      	push	{r0, r1, r2, lr}
 8016cc6:	9300      	str	r3, [sp, #0]
 8016cc8:	4613      	mov	r3, r2
 8016cca:	460a      	mov	r2, r1
 8016ccc:	4601      	mov	r1, r0
 8016cce:	4803      	ldr	r0, [pc, #12]	@ (8016cdc <vsniprintf+0x18>)
 8016cd0:	6800      	ldr	r0, [r0, #0]
 8016cd2:	f7ff ffcc 	bl	8016c6e <_vsniprintf_r>
 8016cd6:	b003      	add	sp, #12
 8016cd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8016cdc:	200000c0 	.word	0x200000c0

08016ce0 <memcmp>:
 8016ce0:	b510      	push	{r4, lr}
 8016ce2:	3901      	subs	r1, #1
 8016ce4:	4402      	add	r2, r0
 8016ce6:	4290      	cmp	r0, r2
 8016ce8:	d101      	bne.n	8016cee <memcmp+0xe>
 8016cea:	2000      	movs	r0, #0
 8016cec:	e005      	b.n	8016cfa <memcmp+0x1a>
 8016cee:	7803      	ldrb	r3, [r0, #0]
 8016cf0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016cf4:	42a3      	cmp	r3, r4
 8016cf6:	d001      	beq.n	8016cfc <memcmp+0x1c>
 8016cf8:	1b18      	subs	r0, r3, r4
 8016cfa:	bd10      	pop	{r4, pc}
 8016cfc:	3001      	adds	r0, #1
 8016cfe:	e7f2      	b.n	8016ce6 <memcmp+0x6>

08016d00 <memmove>:
 8016d00:	4288      	cmp	r0, r1
 8016d02:	b510      	push	{r4, lr}
 8016d04:	eb01 0402 	add.w	r4, r1, r2
 8016d08:	d902      	bls.n	8016d10 <memmove+0x10>
 8016d0a:	4284      	cmp	r4, r0
 8016d0c:	4623      	mov	r3, r4
 8016d0e:	d807      	bhi.n	8016d20 <memmove+0x20>
 8016d10:	1e43      	subs	r3, r0, #1
 8016d12:	42a1      	cmp	r1, r4
 8016d14:	d008      	beq.n	8016d28 <memmove+0x28>
 8016d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016d1e:	e7f8      	b.n	8016d12 <memmove+0x12>
 8016d20:	4402      	add	r2, r0
 8016d22:	4601      	mov	r1, r0
 8016d24:	428a      	cmp	r2, r1
 8016d26:	d100      	bne.n	8016d2a <memmove+0x2a>
 8016d28:	bd10      	pop	{r4, pc}
 8016d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016d32:	e7f7      	b.n	8016d24 <memmove+0x24>

08016d34 <memset>:
 8016d34:	4402      	add	r2, r0
 8016d36:	4603      	mov	r3, r0
 8016d38:	4293      	cmp	r3, r2
 8016d3a:	d100      	bne.n	8016d3e <memset+0xa>
 8016d3c:	4770      	bx	lr
 8016d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8016d42:	e7f9      	b.n	8016d38 <memset+0x4>

08016d44 <strchr>:
 8016d44:	b2c9      	uxtb	r1, r1
 8016d46:	4603      	mov	r3, r0
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d4e:	b112      	cbz	r2, 8016d56 <strchr+0x12>
 8016d50:	428a      	cmp	r2, r1
 8016d52:	d1f9      	bne.n	8016d48 <strchr+0x4>
 8016d54:	4770      	bx	lr
 8016d56:	2900      	cmp	r1, #0
 8016d58:	bf18      	it	ne
 8016d5a:	2000      	movne	r0, #0
 8016d5c:	4770      	bx	lr

08016d5e <strncmp>:
 8016d5e:	b510      	push	{r4, lr}
 8016d60:	b16a      	cbz	r2, 8016d7e <strncmp+0x20>
 8016d62:	3901      	subs	r1, #1
 8016d64:	1884      	adds	r4, r0, r2
 8016d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d6a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	d103      	bne.n	8016d7a <strncmp+0x1c>
 8016d72:	42a0      	cmp	r0, r4
 8016d74:	d001      	beq.n	8016d7a <strncmp+0x1c>
 8016d76:	2a00      	cmp	r2, #0
 8016d78:	d1f5      	bne.n	8016d66 <strncmp+0x8>
 8016d7a:	1ad0      	subs	r0, r2, r3
 8016d7c:	bd10      	pop	{r4, pc}
 8016d7e:	4610      	mov	r0, r2
 8016d80:	e7fc      	b.n	8016d7c <strncmp+0x1e>

08016d82 <strstr>:
 8016d82:	780a      	ldrb	r2, [r1, #0]
 8016d84:	b570      	push	{r4, r5, r6, lr}
 8016d86:	b96a      	cbnz	r2, 8016da4 <strstr+0x22>
 8016d88:	bd70      	pop	{r4, r5, r6, pc}
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	d109      	bne.n	8016da2 <strstr+0x20>
 8016d8e:	460c      	mov	r4, r1
 8016d90:	4605      	mov	r5, r0
 8016d92:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d0f6      	beq.n	8016d88 <strstr+0x6>
 8016d9a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016d9e:	429e      	cmp	r6, r3
 8016da0:	d0f7      	beq.n	8016d92 <strstr+0x10>
 8016da2:	3001      	adds	r0, #1
 8016da4:	7803      	ldrb	r3, [r0, #0]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d1ef      	bne.n	8016d8a <strstr+0x8>
 8016daa:	4618      	mov	r0, r3
 8016dac:	e7ec      	b.n	8016d88 <strstr+0x6>
	...

08016db0 <_close_r>:
 8016db0:	b538      	push	{r3, r4, r5, lr}
 8016db2:	4d06      	ldr	r5, [pc, #24]	@ (8016dcc <_close_r+0x1c>)
 8016db4:	2300      	movs	r3, #0
 8016db6:	4604      	mov	r4, r0
 8016db8:	4608      	mov	r0, r1
 8016dba:	602b      	str	r3, [r5, #0]
 8016dbc:	f7ea fbc2 	bl	8001544 <_close>
 8016dc0:	1c43      	adds	r3, r0, #1
 8016dc2:	d102      	bne.n	8016dca <_close_r+0x1a>
 8016dc4:	682b      	ldr	r3, [r5, #0]
 8016dc6:	b103      	cbz	r3, 8016dca <_close_r+0x1a>
 8016dc8:	6023      	str	r3, [r4, #0]
 8016dca:	bd38      	pop	{r3, r4, r5, pc}
 8016dcc:	2001610c 	.word	0x2001610c

08016dd0 <_lseek_r>:
 8016dd0:	b538      	push	{r3, r4, r5, lr}
 8016dd2:	4d07      	ldr	r5, [pc, #28]	@ (8016df0 <_lseek_r+0x20>)
 8016dd4:	4604      	mov	r4, r0
 8016dd6:	4608      	mov	r0, r1
 8016dd8:	4611      	mov	r1, r2
 8016dda:	2200      	movs	r2, #0
 8016ddc:	602a      	str	r2, [r5, #0]
 8016dde:	461a      	mov	r2, r3
 8016de0:	f7ea fbd7 	bl	8001592 <_lseek>
 8016de4:	1c43      	adds	r3, r0, #1
 8016de6:	d102      	bne.n	8016dee <_lseek_r+0x1e>
 8016de8:	682b      	ldr	r3, [r5, #0]
 8016dea:	b103      	cbz	r3, 8016dee <_lseek_r+0x1e>
 8016dec:	6023      	str	r3, [r4, #0]
 8016dee:	bd38      	pop	{r3, r4, r5, pc}
 8016df0:	2001610c 	.word	0x2001610c

08016df4 <_read_r>:
 8016df4:	b538      	push	{r3, r4, r5, lr}
 8016df6:	4d07      	ldr	r5, [pc, #28]	@ (8016e14 <_read_r+0x20>)
 8016df8:	4604      	mov	r4, r0
 8016dfa:	4608      	mov	r0, r1
 8016dfc:	4611      	mov	r1, r2
 8016dfe:	2200      	movs	r2, #0
 8016e00:	602a      	str	r2, [r5, #0]
 8016e02:	461a      	mov	r2, r3
 8016e04:	f7ea fb65 	bl	80014d2 <_read>
 8016e08:	1c43      	adds	r3, r0, #1
 8016e0a:	d102      	bne.n	8016e12 <_read_r+0x1e>
 8016e0c:	682b      	ldr	r3, [r5, #0]
 8016e0e:	b103      	cbz	r3, 8016e12 <_read_r+0x1e>
 8016e10:	6023      	str	r3, [r4, #0]
 8016e12:	bd38      	pop	{r3, r4, r5, pc}
 8016e14:	2001610c 	.word	0x2001610c

08016e18 <_sbrk_r>:
 8016e18:	b538      	push	{r3, r4, r5, lr}
 8016e1a:	4d06      	ldr	r5, [pc, #24]	@ (8016e34 <_sbrk_r+0x1c>)
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	4604      	mov	r4, r0
 8016e20:	4608      	mov	r0, r1
 8016e22:	602b      	str	r3, [r5, #0]
 8016e24:	f7ea fbc2 	bl	80015ac <_sbrk>
 8016e28:	1c43      	adds	r3, r0, #1
 8016e2a:	d102      	bne.n	8016e32 <_sbrk_r+0x1a>
 8016e2c:	682b      	ldr	r3, [r5, #0]
 8016e2e:	b103      	cbz	r3, 8016e32 <_sbrk_r+0x1a>
 8016e30:	6023      	str	r3, [r4, #0]
 8016e32:	bd38      	pop	{r3, r4, r5, pc}
 8016e34:	2001610c 	.word	0x2001610c

08016e38 <_write_r>:
 8016e38:	b538      	push	{r3, r4, r5, lr}
 8016e3a:	4d07      	ldr	r5, [pc, #28]	@ (8016e58 <_write_r+0x20>)
 8016e3c:	4604      	mov	r4, r0
 8016e3e:	4608      	mov	r0, r1
 8016e40:	4611      	mov	r1, r2
 8016e42:	2200      	movs	r2, #0
 8016e44:	602a      	str	r2, [r5, #0]
 8016e46:	461a      	mov	r2, r3
 8016e48:	f7ea fb60 	bl	800150c <_write>
 8016e4c:	1c43      	adds	r3, r0, #1
 8016e4e:	d102      	bne.n	8016e56 <_write_r+0x1e>
 8016e50:	682b      	ldr	r3, [r5, #0]
 8016e52:	b103      	cbz	r3, 8016e56 <_write_r+0x1e>
 8016e54:	6023      	str	r3, [r4, #0]
 8016e56:	bd38      	pop	{r3, r4, r5, pc}
 8016e58:	2001610c 	.word	0x2001610c

08016e5c <__errno>:
 8016e5c:	4b01      	ldr	r3, [pc, #4]	@ (8016e64 <__errno+0x8>)
 8016e5e:	6818      	ldr	r0, [r3, #0]
 8016e60:	4770      	bx	lr
 8016e62:	bf00      	nop
 8016e64:	200000c0 	.word	0x200000c0

08016e68 <__libc_init_array>:
 8016e68:	b570      	push	{r4, r5, r6, lr}
 8016e6a:	4d0d      	ldr	r5, [pc, #52]	@ (8016ea0 <__libc_init_array+0x38>)
 8016e6c:	4c0d      	ldr	r4, [pc, #52]	@ (8016ea4 <__libc_init_array+0x3c>)
 8016e6e:	1b64      	subs	r4, r4, r5
 8016e70:	10a4      	asrs	r4, r4, #2
 8016e72:	2600      	movs	r6, #0
 8016e74:	42a6      	cmp	r6, r4
 8016e76:	d109      	bne.n	8016e8c <__libc_init_array+0x24>
 8016e78:	4d0b      	ldr	r5, [pc, #44]	@ (8016ea8 <__libc_init_array+0x40>)
 8016e7a:	4c0c      	ldr	r4, [pc, #48]	@ (8016eac <__libc_init_array+0x44>)
 8016e7c:	f000 fef6 	bl	8017c6c <_init>
 8016e80:	1b64      	subs	r4, r4, r5
 8016e82:	10a4      	asrs	r4, r4, #2
 8016e84:	2600      	movs	r6, #0
 8016e86:	42a6      	cmp	r6, r4
 8016e88:	d105      	bne.n	8016e96 <__libc_init_array+0x2e>
 8016e8a:	bd70      	pop	{r4, r5, r6, pc}
 8016e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e90:	4798      	blx	r3
 8016e92:	3601      	adds	r6, #1
 8016e94:	e7ee      	b.n	8016e74 <__libc_init_array+0xc>
 8016e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e9a:	4798      	blx	r3
 8016e9c:	3601      	adds	r6, #1
 8016e9e:	e7f2      	b.n	8016e86 <__libc_init_array+0x1e>
 8016ea0:	080188b8 	.word	0x080188b8
 8016ea4:	080188b8 	.word	0x080188b8
 8016ea8:	080188b8 	.word	0x080188b8
 8016eac:	080188c0 	.word	0x080188c0

08016eb0 <__retarget_lock_init_recursive>:
 8016eb0:	4770      	bx	lr

08016eb2 <__retarget_lock_acquire_recursive>:
 8016eb2:	4770      	bx	lr

08016eb4 <__retarget_lock_release_recursive>:
 8016eb4:	4770      	bx	lr

08016eb6 <strcpy>:
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016ebc:	f803 2b01 	strb.w	r2, [r3], #1
 8016ec0:	2a00      	cmp	r2, #0
 8016ec2:	d1f9      	bne.n	8016eb8 <strcpy+0x2>
 8016ec4:	4770      	bx	lr

08016ec6 <memcpy>:
 8016ec6:	440a      	add	r2, r1
 8016ec8:	4291      	cmp	r1, r2
 8016eca:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8016ece:	d100      	bne.n	8016ed2 <memcpy+0xc>
 8016ed0:	4770      	bx	lr
 8016ed2:	b510      	push	{r4, lr}
 8016ed4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ed8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016edc:	4291      	cmp	r1, r2
 8016ede:	d1f9      	bne.n	8016ed4 <memcpy+0xe>
 8016ee0:	bd10      	pop	{r4, pc}
	...

08016ee4 <__assert_func>:
 8016ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016ee6:	4614      	mov	r4, r2
 8016ee8:	461a      	mov	r2, r3
 8016eea:	4b09      	ldr	r3, [pc, #36]	@ (8016f10 <__assert_func+0x2c>)
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	4605      	mov	r5, r0
 8016ef0:	68d8      	ldr	r0, [r3, #12]
 8016ef2:	b954      	cbnz	r4, 8016f0a <__assert_func+0x26>
 8016ef4:	4b07      	ldr	r3, [pc, #28]	@ (8016f14 <__assert_func+0x30>)
 8016ef6:	461c      	mov	r4, r3
 8016ef8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016efc:	9100      	str	r1, [sp, #0]
 8016efe:	462b      	mov	r3, r5
 8016f00:	4905      	ldr	r1, [pc, #20]	@ (8016f18 <__assert_func+0x34>)
 8016f02:	f000 fbfd 	bl	8017700 <fiprintf>
 8016f06:	f000 fc0d 	bl	8017724 <abort>
 8016f0a:	4b04      	ldr	r3, [pc, #16]	@ (8016f1c <__assert_func+0x38>)
 8016f0c:	e7f4      	b.n	8016ef8 <__assert_func+0x14>
 8016f0e:	bf00      	nop
 8016f10:	200000c0 	.word	0x200000c0
 8016f14:	0801887b 	.word	0x0801887b
 8016f18:	0801884d 	.word	0x0801884d
 8016f1c:	08018840 	.word	0x08018840

08016f20 <__env_lock>:
 8016f20:	4801      	ldr	r0, [pc, #4]	@ (8016f28 <__env_lock+0x8>)
 8016f22:	f7ff bfc6 	b.w	8016eb2 <__retarget_lock_acquire_recursive>
 8016f26:	bf00      	nop
 8016f28:	20016110 	.word	0x20016110

08016f2c <__env_unlock>:
 8016f2c:	4801      	ldr	r0, [pc, #4]	@ (8016f34 <__env_unlock+0x8>)
 8016f2e:	f7ff bfc1 	b.w	8016eb4 <__retarget_lock_release_recursive>
 8016f32:	bf00      	nop
 8016f34:	20016110 	.word	0x20016110

08016f38 <_free_r>:
 8016f38:	b538      	push	{r3, r4, r5, lr}
 8016f3a:	4605      	mov	r5, r0
 8016f3c:	2900      	cmp	r1, #0
 8016f3e:	d041      	beq.n	8016fc4 <_free_r+0x8c>
 8016f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f44:	1f0c      	subs	r4, r1, #4
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	bfb8      	it	lt
 8016f4a:	18e4      	addlt	r4, r4, r3
 8016f4c:	f7ff fc30 	bl	80167b0 <__malloc_lock>
 8016f50:	4a1d      	ldr	r2, [pc, #116]	@ (8016fc8 <_free_r+0x90>)
 8016f52:	6813      	ldr	r3, [r2, #0]
 8016f54:	b933      	cbnz	r3, 8016f64 <_free_r+0x2c>
 8016f56:	6063      	str	r3, [r4, #4]
 8016f58:	6014      	str	r4, [r2, #0]
 8016f5a:	4628      	mov	r0, r5
 8016f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f60:	f7ff bc2c 	b.w	80167bc <__malloc_unlock>
 8016f64:	42a3      	cmp	r3, r4
 8016f66:	d908      	bls.n	8016f7a <_free_r+0x42>
 8016f68:	6820      	ldr	r0, [r4, #0]
 8016f6a:	1821      	adds	r1, r4, r0
 8016f6c:	428b      	cmp	r3, r1
 8016f6e:	bf01      	itttt	eq
 8016f70:	6819      	ldreq	r1, [r3, #0]
 8016f72:	685b      	ldreq	r3, [r3, #4]
 8016f74:	1809      	addeq	r1, r1, r0
 8016f76:	6021      	streq	r1, [r4, #0]
 8016f78:	e7ed      	b.n	8016f56 <_free_r+0x1e>
 8016f7a:	461a      	mov	r2, r3
 8016f7c:	685b      	ldr	r3, [r3, #4]
 8016f7e:	b10b      	cbz	r3, 8016f84 <_free_r+0x4c>
 8016f80:	42a3      	cmp	r3, r4
 8016f82:	d9fa      	bls.n	8016f7a <_free_r+0x42>
 8016f84:	6811      	ldr	r1, [r2, #0]
 8016f86:	1850      	adds	r0, r2, r1
 8016f88:	42a0      	cmp	r0, r4
 8016f8a:	d10b      	bne.n	8016fa4 <_free_r+0x6c>
 8016f8c:	6820      	ldr	r0, [r4, #0]
 8016f8e:	4401      	add	r1, r0
 8016f90:	1850      	adds	r0, r2, r1
 8016f92:	4283      	cmp	r3, r0
 8016f94:	6011      	str	r1, [r2, #0]
 8016f96:	d1e0      	bne.n	8016f5a <_free_r+0x22>
 8016f98:	6818      	ldr	r0, [r3, #0]
 8016f9a:	685b      	ldr	r3, [r3, #4]
 8016f9c:	6053      	str	r3, [r2, #4]
 8016f9e:	4408      	add	r0, r1
 8016fa0:	6010      	str	r0, [r2, #0]
 8016fa2:	e7da      	b.n	8016f5a <_free_r+0x22>
 8016fa4:	d902      	bls.n	8016fac <_free_r+0x74>
 8016fa6:	230c      	movs	r3, #12
 8016fa8:	602b      	str	r3, [r5, #0]
 8016faa:	e7d6      	b.n	8016f5a <_free_r+0x22>
 8016fac:	6820      	ldr	r0, [r4, #0]
 8016fae:	1821      	adds	r1, r4, r0
 8016fb0:	428b      	cmp	r3, r1
 8016fb2:	bf04      	itt	eq
 8016fb4:	6819      	ldreq	r1, [r3, #0]
 8016fb6:	685b      	ldreq	r3, [r3, #4]
 8016fb8:	6063      	str	r3, [r4, #4]
 8016fba:	bf04      	itt	eq
 8016fbc:	1809      	addeq	r1, r1, r0
 8016fbe:	6021      	streq	r1, [r4, #0]
 8016fc0:	6054      	str	r4, [r2, #4]
 8016fc2:	e7ca      	b.n	8016f5a <_free_r+0x22>
 8016fc4:	bd38      	pop	{r3, r4, r5, pc}
 8016fc6:	bf00      	nop
 8016fc8:	20015fcc 	.word	0x20015fcc

08016fcc <_malloc_usable_size_r>:
 8016fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fd0:	1f18      	subs	r0, r3, #4
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	bfbc      	itt	lt
 8016fd6:	580b      	ldrlt	r3, [r1, r0]
 8016fd8:	18c0      	addlt	r0, r0, r3
 8016fda:	4770      	bx	lr

08016fdc <__ssputs_r>:
 8016fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fe0:	688e      	ldr	r6, [r1, #8]
 8016fe2:	461f      	mov	r7, r3
 8016fe4:	42be      	cmp	r6, r7
 8016fe6:	680b      	ldr	r3, [r1, #0]
 8016fe8:	4682      	mov	sl, r0
 8016fea:	460c      	mov	r4, r1
 8016fec:	4690      	mov	r8, r2
 8016fee:	d82d      	bhi.n	801704c <__ssputs_r+0x70>
 8016ff0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016ff4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016ff8:	d026      	beq.n	8017048 <__ssputs_r+0x6c>
 8016ffa:	6965      	ldr	r5, [r4, #20]
 8016ffc:	6909      	ldr	r1, [r1, #16]
 8016ffe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017002:	eba3 0901 	sub.w	r9, r3, r1
 8017006:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801700a:	1c7b      	adds	r3, r7, #1
 801700c:	444b      	add	r3, r9
 801700e:	106d      	asrs	r5, r5, #1
 8017010:	429d      	cmp	r5, r3
 8017012:	bf38      	it	cc
 8017014:	461d      	movcc	r5, r3
 8017016:	0553      	lsls	r3, r2, #21
 8017018:	d527      	bpl.n	801706a <__ssputs_r+0x8e>
 801701a:	4629      	mov	r1, r5
 801701c:	f7ff fb48 	bl	80166b0 <_malloc_r>
 8017020:	4606      	mov	r6, r0
 8017022:	b360      	cbz	r0, 801707e <__ssputs_r+0xa2>
 8017024:	6921      	ldr	r1, [r4, #16]
 8017026:	464a      	mov	r2, r9
 8017028:	f7ff ff4d 	bl	8016ec6 <memcpy>
 801702c:	89a3      	ldrh	r3, [r4, #12]
 801702e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017036:	81a3      	strh	r3, [r4, #12]
 8017038:	6126      	str	r6, [r4, #16]
 801703a:	6165      	str	r5, [r4, #20]
 801703c:	444e      	add	r6, r9
 801703e:	eba5 0509 	sub.w	r5, r5, r9
 8017042:	6026      	str	r6, [r4, #0]
 8017044:	60a5      	str	r5, [r4, #8]
 8017046:	463e      	mov	r6, r7
 8017048:	42be      	cmp	r6, r7
 801704a:	d900      	bls.n	801704e <__ssputs_r+0x72>
 801704c:	463e      	mov	r6, r7
 801704e:	6820      	ldr	r0, [r4, #0]
 8017050:	4632      	mov	r2, r6
 8017052:	4641      	mov	r1, r8
 8017054:	f7ff fe54 	bl	8016d00 <memmove>
 8017058:	68a3      	ldr	r3, [r4, #8]
 801705a:	1b9b      	subs	r3, r3, r6
 801705c:	60a3      	str	r3, [r4, #8]
 801705e:	6823      	ldr	r3, [r4, #0]
 8017060:	4433      	add	r3, r6
 8017062:	6023      	str	r3, [r4, #0]
 8017064:	2000      	movs	r0, #0
 8017066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801706a:	462a      	mov	r2, r5
 801706c:	f7ff fc20 	bl	80168b0 <_realloc_r>
 8017070:	4606      	mov	r6, r0
 8017072:	2800      	cmp	r0, #0
 8017074:	d1e0      	bne.n	8017038 <__ssputs_r+0x5c>
 8017076:	6921      	ldr	r1, [r4, #16]
 8017078:	4650      	mov	r0, sl
 801707a:	f7ff ff5d 	bl	8016f38 <_free_r>
 801707e:	230c      	movs	r3, #12
 8017080:	f8ca 3000 	str.w	r3, [sl]
 8017084:	89a3      	ldrh	r3, [r4, #12]
 8017086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801708a:	81a3      	strh	r3, [r4, #12]
 801708c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017090:	e7e9      	b.n	8017066 <__ssputs_r+0x8a>
	...

08017094 <_svfiprintf_r>:
 8017094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017098:	4698      	mov	r8, r3
 801709a:	898b      	ldrh	r3, [r1, #12]
 801709c:	061b      	lsls	r3, r3, #24
 801709e:	b09d      	sub	sp, #116	@ 0x74
 80170a0:	4607      	mov	r7, r0
 80170a2:	460d      	mov	r5, r1
 80170a4:	4614      	mov	r4, r2
 80170a6:	d510      	bpl.n	80170ca <_svfiprintf_r+0x36>
 80170a8:	690b      	ldr	r3, [r1, #16]
 80170aa:	b973      	cbnz	r3, 80170ca <_svfiprintf_r+0x36>
 80170ac:	2140      	movs	r1, #64	@ 0x40
 80170ae:	f7ff faff 	bl	80166b0 <_malloc_r>
 80170b2:	6028      	str	r0, [r5, #0]
 80170b4:	6128      	str	r0, [r5, #16]
 80170b6:	b930      	cbnz	r0, 80170c6 <_svfiprintf_r+0x32>
 80170b8:	230c      	movs	r3, #12
 80170ba:	603b      	str	r3, [r7, #0]
 80170bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80170c0:	b01d      	add	sp, #116	@ 0x74
 80170c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170c6:	2340      	movs	r3, #64	@ 0x40
 80170c8:	616b      	str	r3, [r5, #20]
 80170ca:	2300      	movs	r3, #0
 80170cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80170ce:	2320      	movs	r3, #32
 80170d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80170d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80170d8:	2330      	movs	r3, #48	@ 0x30
 80170da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017278 <_svfiprintf_r+0x1e4>
 80170de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80170e2:	f04f 0901 	mov.w	r9, #1
 80170e6:	4623      	mov	r3, r4
 80170e8:	469a      	mov	sl, r3
 80170ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170ee:	b10a      	cbz	r2, 80170f4 <_svfiprintf_r+0x60>
 80170f0:	2a25      	cmp	r2, #37	@ 0x25
 80170f2:	d1f9      	bne.n	80170e8 <_svfiprintf_r+0x54>
 80170f4:	ebba 0b04 	subs.w	fp, sl, r4
 80170f8:	d00b      	beq.n	8017112 <_svfiprintf_r+0x7e>
 80170fa:	465b      	mov	r3, fp
 80170fc:	4622      	mov	r2, r4
 80170fe:	4629      	mov	r1, r5
 8017100:	4638      	mov	r0, r7
 8017102:	f7ff ff6b 	bl	8016fdc <__ssputs_r>
 8017106:	3001      	adds	r0, #1
 8017108:	f000 80a7 	beq.w	801725a <_svfiprintf_r+0x1c6>
 801710c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801710e:	445a      	add	r2, fp
 8017110:	9209      	str	r2, [sp, #36]	@ 0x24
 8017112:	f89a 3000 	ldrb.w	r3, [sl]
 8017116:	2b00      	cmp	r3, #0
 8017118:	f000 809f 	beq.w	801725a <_svfiprintf_r+0x1c6>
 801711c:	2300      	movs	r3, #0
 801711e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017126:	f10a 0a01 	add.w	sl, sl, #1
 801712a:	9304      	str	r3, [sp, #16]
 801712c:	9307      	str	r3, [sp, #28]
 801712e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017132:	931a      	str	r3, [sp, #104]	@ 0x68
 8017134:	4654      	mov	r4, sl
 8017136:	2205      	movs	r2, #5
 8017138:	f814 1b01 	ldrb.w	r1, [r4], #1
 801713c:	484e      	ldr	r0, [pc, #312]	@ (8017278 <_svfiprintf_r+0x1e4>)
 801713e:	f7e9 f85f 	bl	8000200 <memchr>
 8017142:	9a04      	ldr	r2, [sp, #16]
 8017144:	b9d8      	cbnz	r0, 801717e <_svfiprintf_r+0xea>
 8017146:	06d0      	lsls	r0, r2, #27
 8017148:	bf44      	itt	mi
 801714a:	2320      	movmi	r3, #32
 801714c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017150:	0711      	lsls	r1, r2, #28
 8017152:	bf44      	itt	mi
 8017154:	232b      	movmi	r3, #43	@ 0x2b
 8017156:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801715a:	f89a 3000 	ldrb.w	r3, [sl]
 801715e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017160:	d015      	beq.n	801718e <_svfiprintf_r+0xfa>
 8017162:	9a07      	ldr	r2, [sp, #28]
 8017164:	4654      	mov	r4, sl
 8017166:	2000      	movs	r0, #0
 8017168:	f04f 0c0a 	mov.w	ip, #10
 801716c:	4621      	mov	r1, r4
 801716e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017172:	3b30      	subs	r3, #48	@ 0x30
 8017174:	2b09      	cmp	r3, #9
 8017176:	d94b      	bls.n	8017210 <_svfiprintf_r+0x17c>
 8017178:	b1b0      	cbz	r0, 80171a8 <_svfiprintf_r+0x114>
 801717a:	9207      	str	r2, [sp, #28]
 801717c:	e014      	b.n	80171a8 <_svfiprintf_r+0x114>
 801717e:	eba0 0308 	sub.w	r3, r0, r8
 8017182:	fa09 f303 	lsl.w	r3, r9, r3
 8017186:	4313      	orrs	r3, r2
 8017188:	9304      	str	r3, [sp, #16]
 801718a:	46a2      	mov	sl, r4
 801718c:	e7d2      	b.n	8017134 <_svfiprintf_r+0xa0>
 801718e:	9b03      	ldr	r3, [sp, #12]
 8017190:	1d19      	adds	r1, r3, #4
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	9103      	str	r1, [sp, #12]
 8017196:	2b00      	cmp	r3, #0
 8017198:	bfbb      	ittet	lt
 801719a:	425b      	neglt	r3, r3
 801719c:	f042 0202 	orrlt.w	r2, r2, #2
 80171a0:	9307      	strge	r3, [sp, #28]
 80171a2:	9307      	strlt	r3, [sp, #28]
 80171a4:	bfb8      	it	lt
 80171a6:	9204      	strlt	r2, [sp, #16]
 80171a8:	7823      	ldrb	r3, [r4, #0]
 80171aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80171ac:	d10a      	bne.n	80171c4 <_svfiprintf_r+0x130>
 80171ae:	7863      	ldrb	r3, [r4, #1]
 80171b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80171b2:	d132      	bne.n	801721a <_svfiprintf_r+0x186>
 80171b4:	9b03      	ldr	r3, [sp, #12]
 80171b6:	1d1a      	adds	r2, r3, #4
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	9203      	str	r2, [sp, #12]
 80171bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80171c0:	3402      	adds	r4, #2
 80171c2:	9305      	str	r3, [sp, #20]
 80171c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017288 <_svfiprintf_r+0x1f4>
 80171c8:	7821      	ldrb	r1, [r4, #0]
 80171ca:	2203      	movs	r2, #3
 80171cc:	4650      	mov	r0, sl
 80171ce:	f7e9 f817 	bl	8000200 <memchr>
 80171d2:	b138      	cbz	r0, 80171e4 <_svfiprintf_r+0x150>
 80171d4:	9b04      	ldr	r3, [sp, #16]
 80171d6:	eba0 000a 	sub.w	r0, r0, sl
 80171da:	2240      	movs	r2, #64	@ 0x40
 80171dc:	4082      	lsls	r2, r0
 80171de:	4313      	orrs	r3, r2
 80171e0:	3401      	adds	r4, #1
 80171e2:	9304      	str	r3, [sp, #16]
 80171e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171e8:	4824      	ldr	r0, [pc, #144]	@ (801727c <_svfiprintf_r+0x1e8>)
 80171ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80171ee:	2206      	movs	r2, #6
 80171f0:	f7e9 f806 	bl	8000200 <memchr>
 80171f4:	2800      	cmp	r0, #0
 80171f6:	d036      	beq.n	8017266 <_svfiprintf_r+0x1d2>
 80171f8:	4b21      	ldr	r3, [pc, #132]	@ (8017280 <_svfiprintf_r+0x1ec>)
 80171fa:	bb1b      	cbnz	r3, 8017244 <_svfiprintf_r+0x1b0>
 80171fc:	9b03      	ldr	r3, [sp, #12]
 80171fe:	3307      	adds	r3, #7
 8017200:	f023 0307 	bic.w	r3, r3, #7
 8017204:	3308      	adds	r3, #8
 8017206:	9303      	str	r3, [sp, #12]
 8017208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801720a:	4433      	add	r3, r6
 801720c:	9309      	str	r3, [sp, #36]	@ 0x24
 801720e:	e76a      	b.n	80170e6 <_svfiprintf_r+0x52>
 8017210:	fb0c 3202 	mla	r2, ip, r2, r3
 8017214:	460c      	mov	r4, r1
 8017216:	2001      	movs	r0, #1
 8017218:	e7a8      	b.n	801716c <_svfiprintf_r+0xd8>
 801721a:	2300      	movs	r3, #0
 801721c:	3401      	adds	r4, #1
 801721e:	9305      	str	r3, [sp, #20]
 8017220:	4619      	mov	r1, r3
 8017222:	f04f 0c0a 	mov.w	ip, #10
 8017226:	4620      	mov	r0, r4
 8017228:	f810 2b01 	ldrb.w	r2, [r0], #1
 801722c:	3a30      	subs	r2, #48	@ 0x30
 801722e:	2a09      	cmp	r2, #9
 8017230:	d903      	bls.n	801723a <_svfiprintf_r+0x1a6>
 8017232:	2b00      	cmp	r3, #0
 8017234:	d0c6      	beq.n	80171c4 <_svfiprintf_r+0x130>
 8017236:	9105      	str	r1, [sp, #20]
 8017238:	e7c4      	b.n	80171c4 <_svfiprintf_r+0x130>
 801723a:	fb0c 2101 	mla	r1, ip, r1, r2
 801723e:	4604      	mov	r4, r0
 8017240:	2301      	movs	r3, #1
 8017242:	e7f0      	b.n	8017226 <_svfiprintf_r+0x192>
 8017244:	ab03      	add	r3, sp, #12
 8017246:	9300      	str	r3, [sp, #0]
 8017248:	462a      	mov	r2, r5
 801724a:	4b0e      	ldr	r3, [pc, #56]	@ (8017284 <_svfiprintf_r+0x1f0>)
 801724c:	a904      	add	r1, sp, #16
 801724e:	4638      	mov	r0, r7
 8017250:	f3af 8000 	nop.w
 8017254:	1c42      	adds	r2, r0, #1
 8017256:	4606      	mov	r6, r0
 8017258:	d1d6      	bne.n	8017208 <_svfiprintf_r+0x174>
 801725a:	89ab      	ldrh	r3, [r5, #12]
 801725c:	065b      	lsls	r3, r3, #25
 801725e:	f53f af2d 	bmi.w	80170bc <_svfiprintf_r+0x28>
 8017262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017264:	e72c      	b.n	80170c0 <_svfiprintf_r+0x2c>
 8017266:	ab03      	add	r3, sp, #12
 8017268:	9300      	str	r3, [sp, #0]
 801726a:	462a      	mov	r2, r5
 801726c:	4b05      	ldr	r3, [pc, #20]	@ (8017284 <_svfiprintf_r+0x1f0>)
 801726e:	a904      	add	r1, sp, #16
 8017270:	4638      	mov	r0, r7
 8017272:	f000 f879 	bl	8017368 <_printf_i>
 8017276:	e7ed      	b.n	8017254 <_svfiprintf_r+0x1c0>
 8017278:	0801887c 	.word	0x0801887c
 801727c:	08018886 	.word	0x08018886
 8017280:	00000000 	.word	0x00000000
 8017284:	08016fdd 	.word	0x08016fdd
 8017288:	08018882 	.word	0x08018882

0801728c <_printf_common>:
 801728c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017290:	4616      	mov	r6, r2
 8017292:	4698      	mov	r8, r3
 8017294:	688a      	ldr	r2, [r1, #8]
 8017296:	690b      	ldr	r3, [r1, #16]
 8017298:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801729c:	4293      	cmp	r3, r2
 801729e:	bfb8      	it	lt
 80172a0:	4613      	movlt	r3, r2
 80172a2:	6033      	str	r3, [r6, #0]
 80172a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80172a8:	4607      	mov	r7, r0
 80172aa:	460c      	mov	r4, r1
 80172ac:	b10a      	cbz	r2, 80172b2 <_printf_common+0x26>
 80172ae:	3301      	adds	r3, #1
 80172b0:	6033      	str	r3, [r6, #0]
 80172b2:	6823      	ldr	r3, [r4, #0]
 80172b4:	0699      	lsls	r1, r3, #26
 80172b6:	bf42      	ittt	mi
 80172b8:	6833      	ldrmi	r3, [r6, #0]
 80172ba:	3302      	addmi	r3, #2
 80172bc:	6033      	strmi	r3, [r6, #0]
 80172be:	6825      	ldr	r5, [r4, #0]
 80172c0:	f015 0506 	ands.w	r5, r5, #6
 80172c4:	d106      	bne.n	80172d4 <_printf_common+0x48>
 80172c6:	f104 0a19 	add.w	sl, r4, #25
 80172ca:	68e3      	ldr	r3, [r4, #12]
 80172cc:	6832      	ldr	r2, [r6, #0]
 80172ce:	1a9b      	subs	r3, r3, r2
 80172d0:	42ab      	cmp	r3, r5
 80172d2:	dc26      	bgt.n	8017322 <_printf_common+0x96>
 80172d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80172d8:	6822      	ldr	r2, [r4, #0]
 80172da:	3b00      	subs	r3, #0
 80172dc:	bf18      	it	ne
 80172de:	2301      	movne	r3, #1
 80172e0:	0692      	lsls	r2, r2, #26
 80172e2:	d42b      	bmi.n	801733c <_printf_common+0xb0>
 80172e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80172e8:	4641      	mov	r1, r8
 80172ea:	4638      	mov	r0, r7
 80172ec:	47c8      	blx	r9
 80172ee:	3001      	adds	r0, #1
 80172f0:	d01e      	beq.n	8017330 <_printf_common+0xa4>
 80172f2:	6823      	ldr	r3, [r4, #0]
 80172f4:	6922      	ldr	r2, [r4, #16]
 80172f6:	f003 0306 	and.w	r3, r3, #6
 80172fa:	2b04      	cmp	r3, #4
 80172fc:	bf02      	ittt	eq
 80172fe:	68e5      	ldreq	r5, [r4, #12]
 8017300:	6833      	ldreq	r3, [r6, #0]
 8017302:	1aed      	subeq	r5, r5, r3
 8017304:	68a3      	ldr	r3, [r4, #8]
 8017306:	bf0c      	ite	eq
 8017308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801730c:	2500      	movne	r5, #0
 801730e:	4293      	cmp	r3, r2
 8017310:	bfc4      	itt	gt
 8017312:	1a9b      	subgt	r3, r3, r2
 8017314:	18ed      	addgt	r5, r5, r3
 8017316:	2600      	movs	r6, #0
 8017318:	341a      	adds	r4, #26
 801731a:	42b5      	cmp	r5, r6
 801731c:	d11a      	bne.n	8017354 <_printf_common+0xc8>
 801731e:	2000      	movs	r0, #0
 8017320:	e008      	b.n	8017334 <_printf_common+0xa8>
 8017322:	2301      	movs	r3, #1
 8017324:	4652      	mov	r2, sl
 8017326:	4641      	mov	r1, r8
 8017328:	4638      	mov	r0, r7
 801732a:	47c8      	blx	r9
 801732c:	3001      	adds	r0, #1
 801732e:	d103      	bne.n	8017338 <_printf_common+0xac>
 8017330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017338:	3501      	adds	r5, #1
 801733a:	e7c6      	b.n	80172ca <_printf_common+0x3e>
 801733c:	18e1      	adds	r1, r4, r3
 801733e:	1c5a      	adds	r2, r3, #1
 8017340:	2030      	movs	r0, #48	@ 0x30
 8017342:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017346:	4422      	add	r2, r4
 8017348:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801734c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017350:	3302      	adds	r3, #2
 8017352:	e7c7      	b.n	80172e4 <_printf_common+0x58>
 8017354:	2301      	movs	r3, #1
 8017356:	4622      	mov	r2, r4
 8017358:	4641      	mov	r1, r8
 801735a:	4638      	mov	r0, r7
 801735c:	47c8      	blx	r9
 801735e:	3001      	adds	r0, #1
 8017360:	d0e6      	beq.n	8017330 <_printf_common+0xa4>
 8017362:	3601      	adds	r6, #1
 8017364:	e7d9      	b.n	801731a <_printf_common+0x8e>
	...

08017368 <_printf_i>:
 8017368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801736c:	7e0f      	ldrb	r7, [r1, #24]
 801736e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017370:	2f78      	cmp	r7, #120	@ 0x78
 8017372:	4691      	mov	r9, r2
 8017374:	4680      	mov	r8, r0
 8017376:	460c      	mov	r4, r1
 8017378:	469a      	mov	sl, r3
 801737a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801737e:	d807      	bhi.n	8017390 <_printf_i+0x28>
 8017380:	2f62      	cmp	r7, #98	@ 0x62
 8017382:	d80a      	bhi.n	801739a <_printf_i+0x32>
 8017384:	2f00      	cmp	r7, #0
 8017386:	f000 80d2 	beq.w	801752e <_printf_i+0x1c6>
 801738a:	2f58      	cmp	r7, #88	@ 0x58
 801738c:	f000 80b9 	beq.w	8017502 <_printf_i+0x19a>
 8017390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017394:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017398:	e03a      	b.n	8017410 <_printf_i+0xa8>
 801739a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801739e:	2b15      	cmp	r3, #21
 80173a0:	d8f6      	bhi.n	8017390 <_printf_i+0x28>
 80173a2:	a101      	add	r1, pc, #4	@ (adr r1, 80173a8 <_printf_i+0x40>)
 80173a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80173a8:	08017401 	.word	0x08017401
 80173ac:	08017415 	.word	0x08017415
 80173b0:	08017391 	.word	0x08017391
 80173b4:	08017391 	.word	0x08017391
 80173b8:	08017391 	.word	0x08017391
 80173bc:	08017391 	.word	0x08017391
 80173c0:	08017415 	.word	0x08017415
 80173c4:	08017391 	.word	0x08017391
 80173c8:	08017391 	.word	0x08017391
 80173cc:	08017391 	.word	0x08017391
 80173d0:	08017391 	.word	0x08017391
 80173d4:	08017515 	.word	0x08017515
 80173d8:	0801743f 	.word	0x0801743f
 80173dc:	080174cf 	.word	0x080174cf
 80173e0:	08017391 	.word	0x08017391
 80173e4:	08017391 	.word	0x08017391
 80173e8:	08017537 	.word	0x08017537
 80173ec:	08017391 	.word	0x08017391
 80173f0:	0801743f 	.word	0x0801743f
 80173f4:	08017391 	.word	0x08017391
 80173f8:	08017391 	.word	0x08017391
 80173fc:	080174d7 	.word	0x080174d7
 8017400:	6833      	ldr	r3, [r6, #0]
 8017402:	1d1a      	adds	r2, r3, #4
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	6032      	str	r2, [r6, #0]
 8017408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801740c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017410:	2301      	movs	r3, #1
 8017412:	e09d      	b.n	8017550 <_printf_i+0x1e8>
 8017414:	6833      	ldr	r3, [r6, #0]
 8017416:	6820      	ldr	r0, [r4, #0]
 8017418:	1d19      	adds	r1, r3, #4
 801741a:	6031      	str	r1, [r6, #0]
 801741c:	0606      	lsls	r6, r0, #24
 801741e:	d501      	bpl.n	8017424 <_printf_i+0xbc>
 8017420:	681d      	ldr	r5, [r3, #0]
 8017422:	e003      	b.n	801742c <_printf_i+0xc4>
 8017424:	0645      	lsls	r5, r0, #25
 8017426:	d5fb      	bpl.n	8017420 <_printf_i+0xb8>
 8017428:	f9b3 5000 	ldrsh.w	r5, [r3]
 801742c:	2d00      	cmp	r5, #0
 801742e:	da03      	bge.n	8017438 <_printf_i+0xd0>
 8017430:	232d      	movs	r3, #45	@ 0x2d
 8017432:	426d      	negs	r5, r5
 8017434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017438:	4859      	ldr	r0, [pc, #356]	@ (80175a0 <_printf_i+0x238>)
 801743a:	230a      	movs	r3, #10
 801743c:	e011      	b.n	8017462 <_printf_i+0xfa>
 801743e:	6821      	ldr	r1, [r4, #0]
 8017440:	6833      	ldr	r3, [r6, #0]
 8017442:	0608      	lsls	r0, r1, #24
 8017444:	f853 5b04 	ldr.w	r5, [r3], #4
 8017448:	d402      	bmi.n	8017450 <_printf_i+0xe8>
 801744a:	0649      	lsls	r1, r1, #25
 801744c:	bf48      	it	mi
 801744e:	b2ad      	uxthmi	r5, r5
 8017450:	2f6f      	cmp	r7, #111	@ 0x6f
 8017452:	4853      	ldr	r0, [pc, #332]	@ (80175a0 <_printf_i+0x238>)
 8017454:	6033      	str	r3, [r6, #0]
 8017456:	bf14      	ite	ne
 8017458:	230a      	movne	r3, #10
 801745a:	2308      	moveq	r3, #8
 801745c:	2100      	movs	r1, #0
 801745e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017462:	6866      	ldr	r6, [r4, #4]
 8017464:	60a6      	str	r6, [r4, #8]
 8017466:	2e00      	cmp	r6, #0
 8017468:	bfa2      	ittt	ge
 801746a:	6821      	ldrge	r1, [r4, #0]
 801746c:	f021 0104 	bicge.w	r1, r1, #4
 8017470:	6021      	strge	r1, [r4, #0]
 8017472:	b90d      	cbnz	r5, 8017478 <_printf_i+0x110>
 8017474:	2e00      	cmp	r6, #0
 8017476:	d04b      	beq.n	8017510 <_printf_i+0x1a8>
 8017478:	4616      	mov	r6, r2
 801747a:	fbb5 f1f3 	udiv	r1, r5, r3
 801747e:	fb03 5711 	mls	r7, r3, r1, r5
 8017482:	5dc7      	ldrb	r7, [r0, r7]
 8017484:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017488:	462f      	mov	r7, r5
 801748a:	42bb      	cmp	r3, r7
 801748c:	460d      	mov	r5, r1
 801748e:	d9f4      	bls.n	801747a <_printf_i+0x112>
 8017490:	2b08      	cmp	r3, #8
 8017492:	d10b      	bne.n	80174ac <_printf_i+0x144>
 8017494:	6823      	ldr	r3, [r4, #0]
 8017496:	07df      	lsls	r7, r3, #31
 8017498:	d508      	bpl.n	80174ac <_printf_i+0x144>
 801749a:	6923      	ldr	r3, [r4, #16]
 801749c:	6861      	ldr	r1, [r4, #4]
 801749e:	4299      	cmp	r1, r3
 80174a0:	bfde      	ittt	le
 80174a2:	2330      	movle	r3, #48	@ 0x30
 80174a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80174a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80174ac:	1b92      	subs	r2, r2, r6
 80174ae:	6122      	str	r2, [r4, #16]
 80174b0:	f8cd a000 	str.w	sl, [sp]
 80174b4:	464b      	mov	r3, r9
 80174b6:	aa03      	add	r2, sp, #12
 80174b8:	4621      	mov	r1, r4
 80174ba:	4640      	mov	r0, r8
 80174bc:	f7ff fee6 	bl	801728c <_printf_common>
 80174c0:	3001      	adds	r0, #1
 80174c2:	d14a      	bne.n	801755a <_printf_i+0x1f2>
 80174c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80174c8:	b004      	add	sp, #16
 80174ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174ce:	6823      	ldr	r3, [r4, #0]
 80174d0:	f043 0320 	orr.w	r3, r3, #32
 80174d4:	6023      	str	r3, [r4, #0]
 80174d6:	4833      	ldr	r0, [pc, #204]	@ (80175a4 <_printf_i+0x23c>)
 80174d8:	2778      	movs	r7, #120	@ 0x78
 80174da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80174de:	6823      	ldr	r3, [r4, #0]
 80174e0:	6831      	ldr	r1, [r6, #0]
 80174e2:	061f      	lsls	r7, r3, #24
 80174e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80174e8:	d402      	bmi.n	80174f0 <_printf_i+0x188>
 80174ea:	065f      	lsls	r7, r3, #25
 80174ec:	bf48      	it	mi
 80174ee:	b2ad      	uxthmi	r5, r5
 80174f0:	6031      	str	r1, [r6, #0]
 80174f2:	07d9      	lsls	r1, r3, #31
 80174f4:	bf44      	itt	mi
 80174f6:	f043 0320 	orrmi.w	r3, r3, #32
 80174fa:	6023      	strmi	r3, [r4, #0]
 80174fc:	b11d      	cbz	r5, 8017506 <_printf_i+0x19e>
 80174fe:	2310      	movs	r3, #16
 8017500:	e7ac      	b.n	801745c <_printf_i+0xf4>
 8017502:	4827      	ldr	r0, [pc, #156]	@ (80175a0 <_printf_i+0x238>)
 8017504:	e7e9      	b.n	80174da <_printf_i+0x172>
 8017506:	6823      	ldr	r3, [r4, #0]
 8017508:	f023 0320 	bic.w	r3, r3, #32
 801750c:	6023      	str	r3, [r4, #0]
 801750e:	e7f6      	b.n	80174fe <_printf_i+0x196>
 8017510:	4616      	mov	r6, r2
 8017512:	e7bd      	b.n	8017490 <_printf_i+0x128>
 8017514:	6833      	ldr	r3, [r6, #0]
 8017516:	6825      	ldr	r5, [r4, #0]
 8017518:	6961      	ldr	r1, [r4, #20]
 801751a:	1d18      	adds	r0, r3, #4
 801751c:	6030      	str	r0, [r6, #0]
 801751e:	062e      	lsls	r6, r5, #24
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	d501      	bpl.n	8017528 <_printf_i+0x1c0>
 8017524:	6019      	str	r1, [r3, #0]
 8017526:	e002      	b.n	801752e <_printf_i+0x1c6>
 8017528:	0668      	lsls	r0, r5, #25
 801752a:	d5fb      	bpl.n	8017524 <_printf_i+0x1bc>
 801752c:	8019      	strh	r1, [r3, #0]
 801752e:	2300      	movs	r3, #0
 8017530:	6123      	str	r3, [r4, #16]
 8017532:	4616      	mov	r6, r2
 8017534:	e7bc      	b.n	80174b0 <_printf_i+0x148>
 8017536:	6833      	ldr	r3, [r6, #0]
 8017538:	1d1a      	adds	r2, r3, #4
 801753a:	6032      	str	r2, [r6, #0]
 801753c:	681e      	ldr	r6, [r3, #0]
 801753e:	6862      	ldr	r2, [r4, #4]
 8017540:	2100      	movs	r1, #0
 8017542:	4630      	mov	r0, r6
 8017544:	f7e8 fe5c 	bl	8000200 <memchr>
 8017548:	b108      	cbz	r0, 801754e <_printf_i+0x1e6>
 801754a:	1b80      	subs	r0, r0, r6
 801754c:	6060      	str	r0, [r4, #4]
 801754e:	6863      	ldr	r3, [r4, #4]
 8017550:	6123      	str	r3, [r4, #16]
 8017552:	2300      	movs	r3, #0
 8017554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017558:	e7aa      	b.n	80174b0 <_printf_i+0x148>
 801755a:	6923      	ldr	r3, [r4, #16]
 801755c:	4632      	mov	r2, r6
 801755e:	4649      	mov	r1, r9
 8017560:	4640      	mov	r0, r8
 8017562:	47d0      	blx	sl
 8017564:	3001      	adds	r0, #1
 8017566:	d0ad      	beq.n	80174c4 <_printf_i+0x15c>
 8017568:	6823      	ldr	r3, [r4, #0]
 801756a:	079b      	lsls	r3, r3, #30
 801756c:	d413      	bmi.n	8017596 <_printf_i+0x22e>
 801756e:	68e0      	ldr	r0, [r4, #12]
 8017570:	9b03      	ldr	r3, [sp, #12]
 8017572:	4298      	cmp	r0, r3
 8017574:	bfb8      	it	lt
 8017576:	4618      	movlt	r0, r3
 8017578:	e7a6      	b.n	80174c8 <_printf_i+0x160>
 801757a:	2301      	movs	r3, #1
 801757c:	4632      	mov	r2, r6
 801757e:	4649      	mov	r1, r9
 8017580:	4640      	mov	r0, r8
 8017582:	47d0      	blx	sl
 8017584:	3001      	adds	r0, #1
 8017586:	d09d      	beq.n	80174c4 <_printf_i+0x15c>
 8017588:	3501      	adds	r5, #1
 801758a:	68e3      	ldr	r3, [r4, #12]
 801758c:	9903      	ldr	r1, [sp, #12]
 801758e:	1a5b      	subs	r3, r3, r1
 8017590:	42ab      	cmp	r3, r5
 8017592:	dcf2      	bgt.n	801757a <_printf_i+0x212>
 8017594:	e7eb      	b.n	801756e <_printf_i+0x206>
 8017596:	2500      	movs	r5, #0
 8017598:	f104 0619 	add.w	r6, r4, #25
 801759c:	e7f5      	b.n	801758a <_printf_i+0x222>
 801759e:	bf00      	nop
 80175a0:	0801888d 	.word	0x0801888d
 80175a4:	0801889e 	.word	0x0801889e

080175a8 <__sflush_r>:
 80175a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80175ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175b0:	0716      	lsls	r6, r2, #28
 80175b2:	4605      	mov	r5, r0
 80175b4:	460c      	mov	r4, r1
 80175b6:	d454      	bmi.n	8017662 <__sflush_r+0xba>
 80175b8:	684b      	ldr	r3, [r1, #4]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	dc02      	bgt.n	80175c4 <__sflush_r+0x1c>
 80175be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	dd48      	ble.n	8017656 <__sflush_r+0xae>
 80175c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80175c6:	2e00      	cmp	r6, #0
 80175c8:	d045      	beq.n	8017656 <__sflush_r+0xae>
 80175ca:	2300      	movs	r3, #0
 80175cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80175d0:	682f      	ldr	r7, [r5, #0]
 80175d2:	6a21      	ldr	r1, [r4, #32]
 80175d4:	602b      	str	r3, [r5, #0]
 80175d6:	d030      	beq.n	801763a <__sflush_r+0x92>
 80175d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80175da:	89a3      	ldrh	r3, [r4, #12]
 80175dc:	0759      	lsls	r1, r3, #29
 80175de:	d505      	bpl.n	80175ec <__sflush_r+0x44>
 80175e0:	6863      	ldr	r3, [r4, #4]
 80175e2:	1ad2      	subs	r2, r2, r3
 80175e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80175e6:	b10b      	cbz	r3, 80175ec <__sflush_r+0x44>
 80175e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80175ea:	1ad2      	subs	r2, r2, r3
 80175ec:	2300      	movs	r3, #0
 80175ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80175f0:	6a21      	ldr	r1, [r4, #32]
 80175f2:	4628      	mov	r0, r5
 80175f4:	47b0      	blx	r6
 80175f6:	1c43      	adds	r3, r0, #1
 80175f8:	89a3      	ldrh	r3, [r4, #12]
 80175fa:	d106      	bne.n	801760a <__sflush_r+0x62>
 80175fc:	6829      	ldr	r1, [r5, #0]
 80175fe:	291d      	cmp	r1, #29
 8017600:	d82b      	bhi.n	801765a <__sflush_r+0xb2>
 8017602:	4a2a      	ldr	r2, [pc, #168]	@ (80176ac <__sflush_r+0x104>)
 8017604:	410a      	asrs	r2, r1
 8017606:	07d6      	lsls	r6, r2, #31
 8017608:	d427      	bmi.n	801765a <__sflush_r+0xb2>
 801760a:	2200      	movs	r2, #0
 801760c:	6062      	str	r2, [r4, #4]
 801760e:	04d9      	lsls	r1, r3, #19
 8017610:	6922      	ldr	r2, [r4, #16]
 8017612:	6022      	str	r2, [r4, #0]
 8017614:	d504      	bpl.n	8017620 <__sflush_r+0x78>
 8017616:	1c42      	adds	r2, r0, #1
 8017618:	d101      	bne.n	801761e <__sflush_r+0x76>
 801761a:	682b      	ldr	r3, [r5, #0]
 801761c:	b903      	cbnz	r3, 8017620 <__sflush_r+0x78>
 801761e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017620:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017622:	602f      	str	r7, [r5, #0]
 8017624:	b1b9      	cbz	r1, 8017656 <__sflush_r+0xae>
 8017626:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801762a:	4299      	cmp	r1, r3
 801762c:	d002      	beq.n	8017634 <__sflush_r+0x8c>
 801762e:	4628      	mov	r0, r5
 8017630:	f7ff fc82 	bl	8016f38 <_free_r>
 8017634:	2300      	movs	r3, #0
 8017636:	6363      	str	r3, [r4, #52]	@ 0x34
 8017638:	e00d      	b.n	8017656 <__sflush_r+0xae>
 801763a:	2301      	movs	r3, #1
 801763c:	4628      	mov	r0, r5
 801763e:	47b0      	blx	r6
 8017640:	4602      	mov	r2, r0
 8017642:	1c50      	adds	r0, r2, #1
 8017644:	d1c9      	bne.n	80175da <__sflush_r+0x32>
 8017646:	682b      	ldr	r3, [r5, #0]
 8017648:	2b00      	cmp	r3, #0
 801764a:	d0c6      	beq.n	80175da <__sflush_r+0x32>
 801764c:	2b1d      	cmp	r3, #29
 801764e:	d001      	beq.n	8017654 <__sflush_r+0xac>
 8017650:	2b16      	cmp	r3, #22
 8017652:	d11e      	bne.n	8017692 <__sflush_r+0xea>
 8017654:	602f      	str	r7, [r5, #0]
 8017656:	2000      	movs	r0, #0
 8017658:	e022      	b.n	80176a0 <__sflush_r+0xf8>
 801765a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801765e:	b21b      	sxth	r3, r3
 8017660:	e01b      	b.n	801769a <__sflush_r+0xf2>
 8017662:	690f      	ldr	r7, [r1, #16]
 8017664:	2f00      	cmp	r7, #0
 8017666:	d0f6      	beq.n	8017656 <__sflush_r+0xae>
 8017668:	0793      	lsls	r3, r2, #30
 801766a:	680e      	ldr	r6, [r1, #0]
 801766c:	bf08      	it	eq
 801766e:	694b      	ldreq	r3, [r1, #20]
 8017670:	600f      	str	r7, [r1, #0]
 8017672:	bf18      	it	ne
 8017674:	2300      	movne	r3, #0
 8017676:	eba6 0807 	sub.w	r8, r6, r7
 801767a:	608b      	str	r3, [r1, #8]
 801767c:	f1b8 0f00 	cmp.w	r8, #0
 8017680:	dde9      	ble.n	8017656 <__sflush_r+0xae>
 8017682:	6a21      	ldr	r1, [r4, #32]
 8017684:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017686:	4643      	mov	r3, r8
 8017688:	463a      	mov	r2, r7
 801768a:	4628      	mov	r0, r5
 801768c:	47b0      	blx	r6
 801768e:	2800      	cmp	r0, #0
 8017690:	dc08      	bgt.n	80176a4 <__sflush_r+0xfc>
 8017692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801769a:	81a3      	strh	r3, [r4, #12]
 801769c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80176a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176a4:	4407      	add	r7, r0
 80176a6:	eba8 0800 	sub.w	r8, r8, r0
 80176aa:	e7e7      	b.n	801767c <__sflush_r+0xd4>
 80176ac:	dfbffffe 	.word	0xdfbffffe

080176b0 <_fflush_r>:
 80176b0:	b538      	push	{r3, r4, r5, lr}
 80176b2:	690b      	ldr	r3, [r1, #16]
 80176b4:	4605      	mov	r5, r0
 80176b6:	460c      	mov	r4, r1
 80176b8:	b913      	cbnz	r3, 80176c0 <_fflush_r+0x10>
 80176ba:	2500      	movs	r5, #0
 80176bc:	4628      	mov	r0, r5
 80176be:	bd38      	pop	{r3, r4, r5, pc}
 80176c0:	b118      	cbz	r0, 80176ca <_fflush_r+0x1a>
 80176c2:	6a03      	ldr	r3, [r0, #32]
 80176c4:	b90b      	cbnz	r3, 80176ca <_fflush_r+0x1a>
 80176c6:	f7ff fa25 	bl	8016b14 <__sinit>
 80176ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d0f3      	beq.n	80176ba <_fflush_r+0xa>
 80176d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80176d4:	07d0      	lsls	r0, r2, #31
 80176d6:	d404      	bmi.n	80176e2 <_fflush_r+0x32>
 80176d8:	0599      	lsls	r1, r3, #22
 80176da:	d402      	bmi.n	80176e2 <_fflush_r+0x32>
 80176dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80176de:	f7ff fbe8 	bl	8016eb2 <__retarget_lock_acquire_recursive>
 80176e2:	4628      	mov	r0, r5
 80176e4:	4621      	mov	r1, r4
 80176e6:	f7ff ff5f 	bl	80175a8 <__sflush_r>
 80176ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80176ec:	07da      	lsls	r2, r3, #31
 80176ee:	4605      	mov	r5, r0
 80176f0:	d4e4      	bmi.n	80176bc <_fflush_r+0xc>
 80176f2:	89a3      	ldrh	r3, [r4, #12]
 80176f4:	059b      	lsls	r3, r3, #22
 80176f6:	d4e1      	bmi.n	80176bc <_fflush_r+0xc>
 80176f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80176fa:	f7ff fbdb 	bl	8016eb4 <__retarget_lock_release_recursive>
 80176fe:	e7dd      	b.n	80176bc <_fflush_r+0xc>

08017700 <fiprintf>:
 8017700:	b40e      	push	{r1, r2, r3}
 8017702:	b503      	push	{r0, r1, lr}
 8017704:	4601      	mov	r1, r0
 8017706:	ab03      	add	r3, sp, #12
 8017708:	4805      	ldr	r0, [pc, #20]	@ (8017720 <fiprintf+0x20>)
 801770a:	f853 2b04 	ldr.w	r2, [r3], #4
 801770e:	6800      	ldr	r0, [r0, #0]
 8017710:	9301      	str	r3, [sp, #4]
 8017712:	f000 f837 	bl	8017784 <_vfiprintf_r>
 8017716:	b002      	add	sp, #8
 8017718:	f85d eb04 	ldr.w	lr, [sp], #4
 801771c:	b003      	add	sp, #12
 801771e:	4770      	bx	lr
 8017720:	200000c0 	.word	0x200000c0

08017724 <abort>:
 8017724:	b508      	push	{r3, lr}
 8017726:	2006      	movs	r0, #6
 8017728:	f000 fa00 	bl	8017b2c <raise>
 801772c:	2001      	movs	r0, #1
 801772e:	f7e9 fec5 	bl	80014bc <_exit>

08017732 <__sfputc_r>:
 8017732:	6893      	ldr	r3, [r2, #8]
 8017734:	3b01      	subs	r3, #1
 8017736:	2b00      	cmp	r3, #0
 8017738:	b410      	push	{r4}
 801773a:	6093      	str	r3, [r2, #8]
 801773c:	da08      	bge.n	8017750 <__sfputc_r+0x1e>
 801773e:	6994      	ldr	r4, [r2, #24]
 8017740:	42a3      	cmp	r3, r4
 8017742:	db01      	blt.n	8017748 <__sfputc_r+0x16>
 8017744:	290a      	cmp	r1, #10
 8017746:	d103      	bne.n	8017750 <__sfputc_r+0x1e>
 8017748:	f85d 4b04 	ldr.w	r4, [sp], #4
 801774c:	f000 b932 	b.w	80179b4 <__swbuf_r>
 8017750:	6813      	ldr	r3, [r2, #0]
 8017752:	1c58      	adds	r0, r3, #1
 8017754:	6010      	str	r0, [r2, #0]
 8017756:	7019      	strb	r1, [r3, #0]
 8017758:	4608      	mov	r0, r1
 801775a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801775e:	4770      	bx	lr

08017760 <__sfputs_r>:
 8017760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017762:	4606      	mov	r6, r0
 8017764:	460f      	mov	r7, r1
 8017766:	4614      	mov	r4, r2
 8017768:	18d5      	adds	r5, r2, r3
 801776a:	42ac      	cmp	r4, r5
 801776c:	d101      	bne.n	8017772 <__sfputs_r+0x12>
 801776e:	2000      	movs	r0, #0
 8017770:	e007      	b.n	8017782 <__sfputs_r+0x22>
 8017772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017776:	463a      	mov	r2, r7
 8017778:	4630      	mov	r0, r6
 801777a:	f7ff ffda 	bl	8017732 <__sfputc_r>
 801777e:	1c43      	adds	r3, r0, #1
 8017780:	d1f3      	bne.n	801776a <__sfputs_r+0xa>
 8017782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017784 <_vfiprintf_r>:
 8017784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017788:	460d      	mov	r5, r1
 801778a:	b09d      	sub	sp, #116	@ 0x74
 801778c:	4614      	mov	r4, r2
 801778e:	4698      	mov	r8, r3
 8017790:	4606      	mov	r6, r0
 8017792:	b118      	cbz	r0, 801779c <_vfiprintf_r+0x18>
 8017794:	6a03      	ldr	r3, [r0, #32]
 8017796:	b90b      	cbnz	r3, 801779c <_vfiprintf_r+0x18>
 8017798:	f7ff f9bc 	bl	8016b14 <__sinit>
 801779c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801779e:	07d9      	lsls	r1, r3, #31
 80177a0:	d405      	bmi.n	80177ae <_vfiprintf_r+0x2a>
 80177a2:	89ab      	ldrh	r3, [r5, #12]
 80177a4:	059a      	lsls	r2, r3, #22
 80177a6:	d402      	bmi.n	80177ae <_vfiprintf_r+0x2a>
 80177a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80177aa:	f7ff fb82 	bl	8016eb2 <__retarget_lock_acquire_recursive>
 80177ae:	89ab      	ldrh	r3, [r5, #12]
 80177b0:	071b      	lsls	r3, r3, #28
 80177b2:	d501      	bpl.n	80177b8 <_vfiprintf_r+0x34>
 80177b4:	692b      	ldr	r3, [r5, #16]
 80177b6:	b99b      	cbnz	r3, 80177e0 <_vfiprintf_r+0x5c>
 80177b8:	4629      	mov	r1, r5
 80177ba:	4630      	mov	r0, r6
 80177bc:	f000 f938 	bl	8017a30 <__swsetup_r>
 80177c0:	b170      	cbz	r0, 80177e0 <_vfiprintf_r+0x5c>
 80177c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80177c4:	07dc      	lsls	r4, r3, #31
 80177c6:	d504      	bpl.n	80177d2 <_vfiprintf_r+0x4e>
 80177c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80177cc:	b01d      	add	sp, #116	@ 0x74
 80177ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177d2:	89ab      	ldrh	r3, [r5, #12]
 80177d4:	0598      	lsls	r0, r3, #22
 80177d6:	d4f7      	bmi.n	80177c8 <_vfiprintf_r+0x44>
 80177d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80177da:	f7ff fb6b 	bl	8016eb4 <__retarget_lock_release_recursive>
 80177de:	e7f3      	b.n	80177c8 <_vfiprintf_r+0x44>
 80177e0:	2300      	movs	r3, #0
 80177e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80177e4:	2320      	movs	r3, #32
 80177e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80177ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80177ee:	2330      	movs	r3, #48	@ 0x30
 80177f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80179a0 <_vfiprintf_r+0x21c>
 80177f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80177f8:	f04f 0901 	mov.w	r9, #1
 80177fc:	4623      	mov	r3, r4
 80177fe:	469a      	mov	sl, r3
 8017800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017804:	b10a      	cbz	r2, 801780a <_vfiprintf_r+0x86>
 8017806:	2a25      	cmp	r2, #37	@ 0x25
 8017808:	d1f9      	bne.n	80177fe <_vfiprintf_r+0x7a>
 801780a:	ebba 0b04 	subs.w	fp, sl, r4
 801780e:	d00b      	beq.n	8017828 <_vfiprintf_r+0xa4>
 8017810:	465b      	mov	r3, fp
 8017812:	4622      	mov	r2, r4
 8017814:	4629      	mov	r1, r5
 8017816:	4630      	mov	r0, r6
 8017818:	f7ff ffa2 	bl	8017760 <__sfputs_r>
 801781c:	3001      	adds	r0, #1
 801781e:	f000 80a7 	beq.w	8017970 <_vfiprintf_r+0x1ec>
 8017822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017824:	445a      	add	r2, fp
 8017826:	9209      	str	r2, [sp, #36]	@ 0x24
 8017828:	f89a 3000 	ldrb.w	r3, [sl]
 801782c:	2b00      	cmp	r3, #0
 801782e:	f000 809f 	beq.w	8017970 <_vfiprintf_r+0x1ec>
 8017832:	2300      	movs	r3, #0
 8017834:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801783c:	f10a 0a01 	add.w	sl, sl, #1
 8017840:	9304      	str	r3, [sp, #16]
 8017842:	9307      	str	r3, [sp, #28]
 8017844:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017848:	931a      	str	r3, [sp, #104]	@ 0x68
 801784a:	4654      	mov	r4, sl
 801784c:	2205      	movs	r2, #5
 801784e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017852:	4853      	ldr	r0, [pc, #332]	@ (80179a0 <_vfiprintf_r+0x21c>)
 8017854:	f7e8 fcd4 	bl	8000200 <memchr>
 8017858:	9a04      	ldr	r2, [sp, #16]
 801785a:	b9d8      	cbnz	r0, 8017894 <_vfiprintf_r+0x110>
 801785c:	06d1      	lsls	r1, r2, #27
 801785e:	bf44      	itt	mi
 8017860:	2320      	movmi	r3, #32
 8017862:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017866:	0713      	lsls	r3, r2, #28
 8017868:	bf44      	itt	mi
 801786a:	232b      	movmi	r3, #43	@ 0x2b
 801786c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017870:	f89a 3000 	ldrb.w	r3, [sl]
 8017874:	2b2a      	cmp	r3, #42	@ 0x2a
 8017876:	d015      	beq.n	80178a4 <_vfiprintf_r+0x120>
 8017878:	9a07      	ldr	r2, [sp, #28]
 801787a:	4654      	mov	r4, sl
 801787c:	2000      	movs	r0, #0
 801787e:	f04f 0c0a 	mov.w	ip, #10
 8017882:	4621      	mov	r1, r4
 8017884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017888:	3b30      	subs	r3, #48	@ 0x30
 801788a:	2b09      	cmp	r3, #9
 801788c:	d94b      	bls.n	8017926 <_vfiprintf_r+0x1a2>
 801788e:	b1b0      	cbz	r0, 80178be <_vfiprintf_r+0x13a>
 8017890:	9207      	str	r2, [sp, #28]
 8017892:	e014      	b.n	80178be <_vfiprintf_r+0x13a>
 8017894:	eba0 0308 	sub.w	r3, r0, r8
 8017898:	fa09 f303 	lsl.w	r3, r9, r3
 801789c:	4313      	orrs	r3, r2
 801789e:	9304      	str	r3, [sp, #16]
 80178a0:	46a2      	mov	sl, r4
 80178a2:	e7d2      	b.n	801784a <_vfiprintf_r+0xc6>
 80178a4:	9b03      	ldr	r3, [sp, #12]
 80178a6:	1d19      	adds	r1, r3, #4
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	9103      	str	r1, [sp, #12]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	bfbb      	ittet	lt
 80178b0:	425b      	neglt	r3, r3
 80178b2:	f042 0202 	orrlt.w	r2, r2, #2
 80178b6:	9307      	strge	r3, [sp, #28]
 80178b8:	9307      	strlt	r3, [sp, #28]
 80178ba:	bfb8      	it	lt
 80178bc:	9204      	strlt	r2, [sp, #16]
 80178be:	7823      	ldrb	r3, [r4, #0]
 80178c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80178c2:	d10a      	bne.n	80178da <_vfiprintf_r+0x156>
 80178c4:	7863      	ldrb	r3, [r4, #1]
 80178c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80178c8:	d132      	bne.n	8017930 <_vfiprintf_r+0x1ac>
 80178ca:	9b03      	ldr	r3, [sp, #12]
 80178cc:	1d1a      	adds	r2, r3, #4
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	9203      	str	r2, [sp, #12]
 80178d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80178d6:	3402      	adds	r4, #2
 80178d8:	9305      	str	r3, [sp, #20]
 80178da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80179b0 <_vfiprintf_r+0x22c>
 80178de:	7821      	ldrb	r1, [r4, #0]
 80178e0:	2203      	movs	r2, #3
 80178e2:	4650      	mov	r0, sl
 80178e4:	f7e8 fc8c 	bl	8000200 <memchr>
 80178e8:	b138      	cbz	r0, 80178fa <_vfiprintf_r+0x176>
 80178ea:	9b04      	ldr	r3, [sp, #16]
 80178ec:	eba0 000a 	sub.w	r0, r0, sl
 80178f0:	2240      	movs	r2, #64	@ 0x40
 80178f2:	4082      	lsls	r2, r0
 80178f4:	4313      	orrs	r3, r2
 80178f6:	3401      	adds	r4, #1
 80178f8:	9304      	str	r3, [sp, #16]
 80178fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178fe:	4829      	ldr	r0, [pc, #164]	@ (80179a4 <_vfiprintf_r+0x220>)
 8017900:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017904:	2206      	movs	r2, #6
 8017906:	f7e8 fc7b 	bl	8000200 <memchr>
 801790a:	2800      	cmp	r0, #0
 801790c:	d03f      	beq.n	801798e <_vfiprintf_r+0x20a>
 801790e:	4b26      	ldr	r3, [pc, #152]	@ (80179a8 <_vfiprintf_r+0x224>)
 8017910:	bb1b      	cbnz	r3, 801795a <_vfiprintf_r+0x1d6>
 8017912:	9b03      	ldr	r3, [sp, #12]
 8017914:	3307      	adds	r3, #7
 8017916:	f023 0307 	bic.w	r3, r3, #7
 801791a:	3308      	adds	r3, #8
 801791c:	9303      	str	r3, [sp, #12]
 801791e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017920:	443b      	add	r3, r7
 8017922:	9309      	str	r3, [sp, #36]	@ 0x24
 8017924:	e76a      	b.n	80177fc <_vfiprintf_r+0x78>
 8017926:	fb0c 3202 	mla	r2, ip, r2, r3
 801792a:	460c      	mov	r4, r1
 801792c:	2001      	movs	r0, #1
 801792e:	e7a8      	b.n	8017882 <_vfiprintf_r+0xfe>
 8017930:	2300      	movs	r3, #0
 8017932:	3401      	adds	r4, #1
 8017934:	9305      	str	r3, [sp, #20]
 8017936:	4619      	mov	r1, r3
 8017938:	f04f 0c0a 	mov.w	ip, #10
 801793c:	4620      	mov	r0, r4
 801793e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017942:	3a30      	subs	r2, #48	@ 0x30
 8017944:	2a09      	cmp	r2, #9
 8017946:	d903      	bls.n	8017950 <_vfiprintf_r+0x1cc>
 8017948:	2b00      	cmp	r3, #0
 801794a:	d0c6      	beq.n	80178da <_vfiprintf_r+0x156>
 801794c:	9105      	str	r1, [sp, #20]
 801794e:	e7c4      	b.n	80178da <_vfiprintf_r+0x156>
 8017950:	fb0c 2101 	mla	r1, ip, r1, r2
 8017954:	4604      	mov	r4, r0
 8017956:	2301      	movs	r3, #1
 8017958:	e7f0      	b.n	801793c <_vfiprintf_r+0x1b8>
 801795a:	ab03      	add	r3, sp, #12
 801795c:	9300      	str	r3, [sp, #0]
 801795e:	462a      	mov	r2, r5
 8017960:	4b12      	ldr	r3, [pc, #72]	@ (80179ac <_vfiprintf_r+0x228>)
 8017962:	a904      	add	r1, sp, #16
 8017964:	4630      	mov	r0, r6
 8017966:	f3af 8000 	nop.w
 801796a:	4607      	mov	r7, r0
 801796c:	1c78      	adds	r0, r7, #1
 801796e:	d1d6      	bne.n	801791e <_vfiprintf_r+0x19a>
 8017970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017972:	07d9      	lsls	r1, r3, #31
 8017974:	d405      	bmi.n	8017982 <_vfiprintf_r+0x1fe>
 8017976:	89ab      	ldrh	r3, [r5, #12]
 8017978:	059a      	lsls	r2, r3, #22
 801797a:	d402      	bmi.n	8017982 <_vfiprintf_r+0x1fe>
 801797c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801797e:	f7ff fa99 	bl	8016eb4 <__retarget_lock_release_recursive>
 8017982:	89ab      	ldrh	r3, [r5, #12]
 8017984:	065b      	lsls	r3, r3, #25
 8017986:	f53f af1f 	bmi.w	80177c8 <_vfiprintf_r+0x44>
 801798a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801798c:	e71e      	b.n	80177cc <_vfiprintf_r+0x48>
 801798e:	ab03      	add	r3, sp, #12
 8017990:	9300      	str	r3, [sp, #0]
 8017992:	462a      	mov	r2, r5
 8017994:	4b05      	ldr	r3, [pc, #20]	@ (80179ac <_vfiprintf_r+0x228>)
 8017996:	a904      	add	r1, sp, #16
 8017998:	4630      	mov	r0, r6
 801799a:	f7ff fce5 	bl	8017368 <_printf_i>
 801799e:	e7e4      	b.n	801796a <_vfiprintf_r+0x1e6>
 80179a0:	0801887c 	.word	0x0801887c
 80179a4:	08018886 	.word	0x08018886
 80179a8:	00000000 	.word	0x00000000
 80179ac:	08017761 	.word	0x08017761
 80179b0:	08018882 	.word	0x08018882

080179b4 <__swbuf_r>:
 80179b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179b6:	460e      	mov	r6, r1
 80179b8:	4614      	mov	r4, r2
 80179ba:	4605      	mov	r5, r0
 80179bc:	b118      	cbz	r0, 80179c6 <__swbuf_r+0x12>
 80179be:	6a03      	ldr	r3, [r0, #32]
 80179c0:	b90b      	cbnz	r3, 80179c6 <__swbuf_r+0x12>
 80179c2:	f7ff f8a7 	bl	8016b14 <__sinit>
 80179c6:	69a3      	ldr	r3, [r4, #24]
 80179c8:	60a3      	str	r3, [r4, #8]
 80179ca:	89a3      	ldrh	r3, [r4, #12]
 80179cc:	071a      	lsls	r2, r3, #28
 80179ce:	d501      	bpl.n	80179d4 <__swbuf_r+0x20>
 80179d0:	6923      	ldr	r3, [r4, #16]
 80179d2:	b943      	cbnz	r3, 80179e6 <__swbuf_r+0x32>
 80179d4:	4621      	mov	r1, r4
 80179d6:	4628      	mov	r0, r5
 80179d8:	f000 f82a 	bl	8017a30 <__swsetup_r>
 80179dc:	b118      	cbz	r0, 80179e6 <__swbuf_r+0x32>
 80179de:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80179e2:	4638      	mov	r0, r7
 80179e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179e6:	6823      	ldr	r3, [r4, #0]
 80179e8:	6922      	ldr	r2, [r4, #16]
 80179ea:	1a98      	subs	r0, r3, r2
 80179ec:	6963      	ldr	r3, [r4, #20]
 80179ee:	b2f6      	uxtb	r6, r6
 80179f0:	4283      	cmp	r3, r0
 80179f2:	4637      	mov	r7, r6
 80179f4:	dc05      	bgt.n	8017a02 <__swbuf_r+0x4e>
 80179f6:	4621      	mov	r1, r4
 80179f8:	4628      	mov	r0, r5
 80179fa:	f7ff fe59 	bl	80176b0 <_fflush_r>
 80179fe:	2800      	cmp	r0, #0
 8017a00:	d1ed      	bne.n	80179de <__swbuf_r+0x2a>
 8017a02:	68a3      	ldr	r3, [r4, #8]
 8017a04:	3b01      	subs	r3, #1
 8017a06:	60a3      	str	r3, [r4, #8]
 8017a08:	6823      	ldr	r3, [r4, #0]
 8017a0a:	1c5a      	adds	r2, r3, #1
 8017a0c:	6022      	str	r2, [r4, #0]
 8017a0e:	701e      	strb	r6, [r3, #0]
 8017a10:	6962      	ldr	r2, [r4, #20]
 8017a12:	1c43      	adds	r3, r0, #1
 8017a14:	429a      	cmp	r2, r3
 8017a16:	d004      	beq.n	8017a22 <__swbuf_r+0x6e>
 8017a18:	89a3      	ldrh	r3, [r4, #12]
 8017a1a:	07db      	lsls	r3, r3, #31
 8017a1c:	d5e1      	bpl.n	80179e2 <__swbuf_r+0x2e>
 8017a1e:	2e0a      	cmp	r6, #10
 8017a20:	d1df      	bne.n	80179e2 <__swbuf_r+0x2e>
 8017a22:	4621      	mov	r1, r4
 8017a24:	4628      	mov	r0, r5
 8017a26:	f7ff fe43 	bl	80176b0 <_fflush_r>
 8017a2a:	2800      	cmp	r0, #0
 8017a2c:	d0d9      	beq.n	80179e2 <__swbuf_r+0x2e>
 8017a2e:	e7d6      	b.n	80179de <__swbuf_r+0x2a>

08017a30 <__swsetup_r>:
 8017a30:	b538      	push	{r3, r4, r5, lr}
 8017a32:	4b29      	ldr	r3, [pc, #164]	@ (8017ad8 <__swsetup_r+0xa8>)
 8017a34:	4605      	mov	r5, r0
 8017a36:	6818      	ldr	r0, [r3, #0]
 8017a38:	460c      	mov	r4, r1
 8017a3a:	b118      	cbz	r0, 8017a44 <__swsetup_r+0x14>
 8017a3c:	6a03      	ldr	r3, [r0, #32]
 8017a3e:	b90b      	cbnz	r3, 8017a44 <__swsetup_r+0x14>
 8017a40:	f7ff f868 	bl	8016b14 <__sinit>
 8017a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a48:	0719      	lsls	r1, r3, #28
 8017a4a:	d422      	bmi.n	8017a92 <__swsetup_r+0x62>
 8017a4c:	06da      	lsls	r2, r3, #27
 8017a4e:	d407      	bmi.n	8017a60 <__swsetup_r+0x30>
 8017a50:	2209      	movs	r2, #9
 8017a52:	602a      	str	r2, [r5, #0]
 8017a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a58:	81a3      	strh	r3, [r4, #12]
 8017a5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a5e:	e033      	b.n	8017ac8 <__swsetup_r+0x98>
 8017a60:	0758      	lsls	r0, r3, #29
 8017a62:	d512      	bpl.n	8017a8a <__swsetup_r+0x5a>
 8017a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017a66:	b141      	cbz	r1, 8017a7a <__swsetup_r+0x4a>
 8017a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017a6c:	4299      	cmp	r1, r3
 8017a6e:	d002      	beq.n	8017a76 <__swsetup_r+0x46>
 8017a70:	4628      	mov	r0, r5
 8017a72:	f7ff fa61 	bl	8016f38 <_free_r>
 8017a76:	2300      	movs	r3, #0
 8017a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8017a7a:	89a3      	ldrh	r3, [r4, #12]
 8017a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017a80:	81a3      	strh	r3, [r4, #12]
 8017a82:	2300      	movs	r3, #0
 8017a84:	6063      	str	r3, [r4, #4]
 8017a86:	6923      	ldr	r3, [r4, #16]
 8017a88:	6023      	str	r3, [r4, #0]
 8017a8a:	89a3      	ldrh	r3, [r4, #12]
 8017a8c:	f043 0308 	orr.w	r3, r3, #8
 8017a90:	81a3      	strh	r3, [r4, #12]
 8017a92:	6923      	ldr	r3, [r4, #16]
 8017a94:	b94b      	cbnz	r3, 8017aaa <__swsetup_r+0x7a>
 8017a96:	89a3      	ldrh	r3, [r4, #12]
 8017a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017aa0:	d003      	beq.n	8017aaa <__swsetup_r+0x7a>
 8017aa2:	4621      	mov	r1, r4
 8017aa4:	4628      	mov	r0, r5
 8017aa6:	f000 f883 	bl	8017bb0 <__smakebuf_r>
 8017aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017aae:	f013 0201 	ands.w	r2, r3, #1
 8017ab2:	d00a      	beq.n	8017aca <__swsetup_r+0x9a>
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	60a2      	str	r2, [r4, #8]
 8017ab8:	6962      	ldr	r2, [r4, #20]
 8017aba:	4252      	negs	r2, r2
 8017abc:	61a2      	str	r2, [r4, #24]
 8017abe:	6922      	ldr	r2, [r4, #16]
 8017ac0:	b942      	cbnz	r2, 8017ad4 <__swsetup_r+0xa4>
 8017ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017ac6:	d1c5      	bne.n	8017a54 <__swsetup_r+0x24>
 8017ac8:	bd38      	pop	{r3, r4, r5, pc}
 8017aca:	0799      	lsls	r1, r3, #30
 8017acc:	bf58      	it	pl
 8017ace:	6962      	ldrpl	r2, [r4, #20]
 8017ad0:	60a2      	str	r2, [r4, #8]
 8017ad2:	e7f4      	b.n	8017abe <__swsetup_r+0x8e>
 8017ad4:	2000      	movs	r0, #0
 8017ad6:	e7f7      	b.n	8017ac8 <__swsetup_r+0x98>
 8017ad8:	200000c0 	.word	0x200000c0

08017adc <_raise_r>:
 8017adc:	291f      	cmp	r1, #31
 8017ade:	b538      	push	{r3, r4, r5, lr}
 8017ae0:	4605      	mov	r5, r0
 8017ae2:	460c      	mov	r4, r1
 8017ae4:	d904      	bls.n	8017af0 <_raise_r+0x14>
 8017ae6:	2316      	movs	r3, #22
 8017ae8:	6003      	str	r3, [r0, #0]
 8017aea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017aee:	bd38      	pop	{r3, r4, r5, pc}
 8017af0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017af2:	b112      	cbz	r2, 8017afa <_raise_r+0x1e>
 8017af4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017af8:	b94b      	cbnz	r3, 8017b0e <_raise_r+0x32>
 8017afa:	4628      	mov	r0, r5
 8017afc:	f000 f830 	bl	8017b60 <_getpid_r>
 8017b00:	4622      	mov	r2, r4
 8017b02:	4601      	mov	r1, r0
 8017b04:	4628      	mov	r0, r5
 8017b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b0a:	f000 b817 	b.w	8017b3c <_kill_r>
 8017b0e:	2b01      	cmp	r3, #1
 8017b10:	d00a      	beq.n	8017b28 <_raise_r+0x4c>
 8017b12:	1c59      	adds	r1, r3, #1
 8017b14:	d103      	bne.n	8017b1e <_raise_r+0x42>
 8017b16:	2316      	movs	r3, #22
 8017b18:	6003      	str	r3, [r0, #0]
 8017b1a:	2001      	movs	r0, #1
 8017b1c:	e7e7      	b.n	8017aee <_raise_r+0x12>
 8017b1e:	2100      	movs	r1, #0
 8017b20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017b24:	4620      	mov	r0, r4
 8017b26:	4798      	blx	r3
 8017b28:	2000      	movs	r0, #0
 8017b2a:	e7e0      	b.n	8017aee <_raise_r+0x12>

08017b2c <raise>:
 8017b2c:	4b02      	ldr	r3, [pc, #8]	@ (8017b38 <raise+0xc>)
 8017b2e:	4601      	mov	r1, r0
 8017b30:	6818      	ldr	r0, [r3, #0]
 8017b32:	f7ff bfd3 	b.w	8017adc <_raise_r>
 8017b36:	bf00      	nop
 8017b38:	200000c0 	.word	0x200000c0

08017b3c <_kill_r>:
 8017b3c:	b538      	push	{r3, r4, r5, lr}
 8017b3e:	4d07      	ldr	r5, [pc, #28]	@ (8017b5c <_kill_r+0x20>)
 8017b40:	2300      	movs	r3, #0
 8017b42:	4604      	mov	r4, r0
 8017b44:	4608      	mov	r0, r1
 8017b46:	4611      	mov	r1, r2
 8017b48:	602b      	str	r3, [r5, #0]
 8017b4a:	f7e9 fca7 	bl	800149c <_kill>
 8017b4e:	1c43      	adds	r3, r0, #1
 8017b50:	d102      	bne.n	8017b58 <_kill_r+0x1c>
 8017b52:	682b      	ldr	r3, [r5, #0]
 8017b54:	b103      	cbz	r3, 8017b58 <_kill_r+0x1c>
 8017b56:	6023      	str	r3, [r4, #0]
 8017b58:	bd38      	pop	{r3, r4, r5, pc}
 8017b5a:	bf00      	nop
 8017b5c:	2001610c 	.word	0x2001610c

08017b60 <_getpid_r>:
 8017b60:	f7e9 bc94 	b.w	800148c <_getpid>

08017b64 <__swhatbuf_r>:
 8017b64:	b570      	push	{r4, r5, r6, lr}
 8017b66:	460c      	mov	r4, r1
 8017b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b6c:	2900      	cmp	r1, #0
 8017b6e:	b096      	sub	sp, #88	@ 0x58
 8017b70:	4615      	mov	r5, r2
 8017b72:	461e      	mov	r6, r3
 8017b74:	da0d      	bge.n	8017b92 <__swhatbuf_r+0x2e>
 8017b76:	89a3      	ldrh	r3, [r4, #12]
 8017b78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017b7c:	f04f 0100 	mov.w	r1, #0
 8017b80:	bf14      	ite	ne
 8017b82:	2340      	movne	r3, #64	@ 0x40
 8017b84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017b88:	2000      	movs	r0, #0
 8017b8a:	6031      	str	r1, [r6, #0]
 8017b8c:	602b      	str	r3, [r5, #0]
 8017b8e:	b016      	add	sp, #88	@ 0x58
 8017b90:	bd70      	pop	{r4, r5, r6, pc}
 8017b92:	466a      	mov	r2, sp
 8017b94:	f000 f848 	bl	8017c28 <_fstat_r>
 8017b98:	2800      	cmp	r0, #0
 8017b9a:	dbec      	blt.n	8017b76 <__swhatbuf_r+0x12>
 8017b9c:	9901      	ldr	r1, [sp, #4]
 8017b9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017ba2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017ba6:	4259      	negs	r1, r3
 8017ba8:	4159      	adcs	r1, r3
 8017baa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017bae:	e7eb      	b.n	8017b88 <__swhatbuf_r+0x24>

08017bb0 <__smakebuf_r>:
 8017bb0:	898b      	ldrh	r3, [r1, #12]
 8017bb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017bb4:	079d      	lsls	r5, r3, #30
 8017bb6:	4606      	mov	r6, r0
 8017bb8:	460c      	mov	r4, r1
 8017bba:	d507      	bpl.n	8017bcc <__smakebuf_r+0x1c>
 8017bbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017bc0:	6023      	str	r3, [r4, #0]
 8017bc2:	6123      	str	r3, [r4, #16]
 8017bc4:	2301      	movs	r3, #1
 8017bc6:	6163      	str	r3, [r4, #20]
 8017bc8:	b003      	add	sp, #12
 8017bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bcc:	ab01      	add	r3, sp, #4
 8017bce:	466a      	mov	r2, sp
 8017bd0:	f7ff ffc8 	bl	8017b64 <__swhatbuf_r>
 8017bd4:	9f00      	ldr	r7, [sp, #0]
 8017bd6:	4605      	mov	r5, r0
 8017bd8:	4639      	mov	r1, r7
 8017bda:	4630      	mov	r0, r6
 8017bdc:	f7fe fd68 	bl	80166b0 <_malloc_r>
 8017be0:	b948      	cbnz	r0, 8017bf6 <__smakebuf_r+0x46>
 8017be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017be6:	059a      	lsls	r2, r3, #22
 8017be8:	d4ee      	bmi.n	8017bc8 <__smakebuf_r+0x18>
 8017bea:	f023 0303 	bic.w	r3, r3, #3
 8017bee:	f043 0302 	orr.w	r3, r3, #2
 8017bf2:	81a3      	strh	r3, [r4, #12]
 8017bf4:	e7e2      	b.n	8017bbc <__smakebuf_r+0xc>
 8017bf6:	89a3      	ldrh	r3, [r4, #12]
 8017bf8:	6020      	str	r0, [r4, #0]
 8017bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017bfe:	81a3      	strh	r3, [r4, #12]
 8017c00:	9b01      	ldr	r3, [sp, #4]
 8017c02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017c06:	b15b      	cbz	r3, 8017c20 <__smakebuf_r+0x70>
 8017c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c0c:	4630      	mov	r0, r6
 8017c0e:	f000 f81d 	bl	8017c4c <_isatty_r>
 8017c12:	b128      	cbz	r0, 8017c20 <__smakebuf_r+0x70>
 8017c14:	89a3      	ldrh	r3, [r4, #12]
 8017c16:	f023 0303 	bic.w	r3, r3, #3
 8017c1a:	f043 0301 	orr.w	r3, r3, #1
 8017c1e:	81a3      	strh	r3, [r4, #12]
 8017c20:	89a3      	ldrh	r3, [r4, #12]
 8017c22:	431d      	orrs	r5, r3
 8017c24:	81a5      	strh	r5, [r4, #12]
 8017c26:	e7cf      	b.n	8017bc8 <__smakebuf_r+0x18>

08017c28 <_fstat_r>:
 8017c28:	b538      	push	{r3, r4, r5, lr}
 8017c2a:	4d07      	ldr	r5, [pc, #28]	@ (8017c48 <_fstat_r+0x20>)
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	4604      	mov	r4, r0
 8017c30:	4608      	mov	r0, r1
 8017c32:	4611      	mov	r1, r2
 8017c34:	602b      	str	r3, [r5, #0]
 8017c36:	f7e9 fc91 	bl	800155c <_fstat>
 8017c3a:	1c43      	adds	r3, r0, #1
 8017c3c:	d102      	bne.n	8017c44 <_fstat_r+0x1c>
 8017c3e:	682b      	ldr	r3, [r5, #0]
 8017c40:	b103      	cbz	r3, 8017c44 <_fstat_r+0x1c>
 8017c42:	6023      	str	r3, [r4, #0]
 8017c44:	bd38      	pop	{r3, r4, r5, pc}
 8017c46:	bf00      	nop
 8017c48:	2001610c 	.word	0x2001610c

08017c4c <_isatty_r>:
 8017c4c:	b538      	push	{r3, r4, r5, lr}
 8017c4e:	4d06      	ldr	r5, [pc, #24]	@ (8017c68 <_isatty_r+0x1c>)
 8017c50:	2300      	movs	r3, #0
 8017c52:	4604      	mov	r4, r0
 8017c54:	4608      	mov	r0, r1
 8017c56:	602b      	str	r3, [r5, #0]
 8017c58:	f7e9 fc90 	bl	800157c <_isatty>
 8017c5c:	1c43      	adds	r3, r0, #1
 8017c5e:	d102      	bne.n	8017c66 <_isatty_r+0x1a>
 8017c60:	682b      	ldr	r3, [r5, #0]
 8017c62:	b103      	cbz	r3, 8017c66 <_isatty_r+0x1a>
 8017c64:	6023      	str	r3, [r4, #0]
 8017c66:	bd38      	pop	{r3, r4, r5, pc}
 8017c68:	2001610c 	.word	0x2001610c

08017c6c <_init>:
 8017c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c6e:	bf00      	nop
 8017c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c72:	bc08      	pop	{r3}
 8017c74:	469e      	mov	lr, r3
 8017c76:	4770      	bx	lr

08017c78 <_fini>:
 8017c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c7a:	bf00      	nop
 8017c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c7e:	bc08      	pop	{r3}
 8017c80:	469e      	mov	lr, r3
 8017c82:	4770      	bx	lr
