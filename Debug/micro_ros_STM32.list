
micro_ros_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019d8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  08019f20  08019f20  0001af20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ab14  0801ab14  0001c134  2**0
                  CONTENTS
  4 .ARM          00000008  0801ab14  0801ab14  0001bb14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ab1c  0801ab1c  0001c134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801ab1c  0801ab1c  0001bb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ab24  0801ab24  0001bb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000134  20000000  0801ab28  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001c134  2**0
                  CONTENTS
 10 .bss          0000aca4  20000138  20000138  0001c138  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000addc  2000addc  0001c138  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c134  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b2db  00000000  00000000  0001c164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000064ab  00000000  00000000  0004743f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002398  00000000  00000000  0004d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b8b  00000000  00000000  0004fc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c780  00000000  00000000  00051813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002daed  00000000  00000000  0005df93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb972  00000000  00000000  0008ba80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000076  00000000  00000000  001773f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a514  00000000  00000000  00177468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0018197c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000138 	.word	0x20000138
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019f04 	.word	0x08019f04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000013c 	.word	0x2000013c
 80001cc:	08019f04 	.word	0x08019f04

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002be:	f000 b9b5 	b.w	800062c <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000354:	f000 b96a 	b.w	800062c <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	460c      	mov	r4, r1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d14e      	bne.n	800041a <__udivmoddi4+0xaa>
 800037c:	4694      	mov	ip, r2
 800037e:	458c      	cmp	ip, r1
 8000380:	4686      	mov	lr, r0
 8000382:	fab2 f282 	clz	r2, r2
 8000386:	d962      	bls.n	800044e <__udivmoddi4+0xde>
 8000388:	b14a      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038a:	f1c2 0320 	rsb	r3, r2, #32
 800038e:	4091      	lsls	r1, r2
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa0c fc02 	lsl.w	ip, ip, r2
 8000398:	4319      	orrs	r1, r3
 800039a:	fa00 fe02 	lsl.w	lr, r0, r2
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f f68c 	uxth.w	r6, ip
 80003a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb07 1114 	mls	r1, r7, r4, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb04 f106 	mul.w	r1, r4, r6
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003c6:	f080 8112 	bcs.w	80005ee <__udivmoddi4+0x27e>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 810f 	bls.w	80005ee <__udivmoddi4+0x27e>
 80003d0:	3c02      	subs	r4, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb1 f0f7 	udiv	r0, r1, r7
 80003de:	fb07 1110 	mls	r1, r7, r0, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb00 f606 	mul.w	r6, r0, r6
 80003ea:	429e      	cmp	r6, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x94>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003f6:	f080 80fc 	bcs.w	80005f2 <__udivmoddi4+0x282>
 80003fa:	429e      	cmp	r6, r3
 80003fc:	f240 80f9 	bls.w	80005f2 <__udivmoddi4+0x282>
 8000400:	4463      	add	r3, ip
 8000402:	3802      	subs	r0, #2
 8000404:	1b9b      	subs	r3, r3, r6
 8000406:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800040a:	2100      	movs	r1, #0
 800040c:	b11d      	cbz	r5, 8000416 <__udivmoddi4+0xa6>
 800040e:	40d3      	lsrs	r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	e9c5 3200 	strd	r3, r2, [r5]
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d905      	bls.n	800042a <__udivmoddi4+0xba>
 800041e:	b10d      	cbz	r5, 8000424 <__udivmoddi4+0xb4>
 8000420:	e9c5 0100 	strd	r0, r1, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	4608      	mov	r0, r1
 8000428:	e7f5      	b.n	8000416 <__udivmoddi4+0xa6>
 800042a:	fab3 f183 	clz	r1, r3
 800042e:	2900      	cmp	r1, #0
 8000430:	d146      	bne.n	80004c0 <__udivmoddi4+0x150>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d302      	bcc.n	800043c <__udivmoddi4+0xcc>
 8000436:	4290      	cmp	r0, r2
 8000438:	f0c0 80f0 	bcc.w	800061c <__udivmoddi4+0x2ac>
 800043c:	1a86      	subs	r6, r0, r2
 800043e:	eb64 0303 	sbc.w	r3, r4, r3
 8000442:	2001      	movs	r0, #1
 8000444:	2d00      	cmp	r5, #0
 8000446:	d0e6      	beq.n	8000416 <__udivmoddi4+0xa6>
 8000448:	e9c5 6300 	strd	r6, r3, [r5]
 800044c:	e7e3      	b.n	8000416 <__udivmoddi4+0xa6>
 800044e:	2a00      	cmp	r2, #0
 8000450:	f040 8090 	bne.w	8000574 <__udivmoddi4+0x204>
 8000454:	eba1 040c 	sub.w	r4, r1, ip
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa1f f78c 	uxth.w	r7, ip
 8000460:	2101      	movs	r1, #1
 8000462:	fbb4 f6f8 	udiv	r6, r4, r8
 8000466:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800046a:	fb08 4416 	mls	r4, r8, r6, r4
 800046e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000472:	fb07 f006 	mul.w	r0, r7, r6
 8000476:	4298      	cmp	r0, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x11c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x11a>
 8000484:	4298      	cmp	r0, r3
 8000486:	f200 80cd 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 800048a:	4626      	mov	r6, r4
 800048c:	1a1c      	subs	r4, r3, r0
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb4 f0f8 	udiv	r0, r4, r8
 8000496:	fb08 4410 	mls	r4, r8, r0, r4
 800049a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800049e:	fb00 f707 	mul.w	r7, r0, r7
 80004a2:	429f      	cmp	r7, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x148>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ae:	d202      	bcs.n	80004b6 <__udivmoddi4+0x146>
 80004b0:	429f      	cmp	r7, r3
 80004b2:	f200 80b0 	bhi.w	8000616 <__udivmoddi4+0x2a6>
 80004b6:	4620      	mov	r0, r4
 80004b8:	1bdb      	subs	r3, r3, r7
 80004ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004be:	e7a5      	b.n	800040c <__udivmoddi4+0x9c>
 80004c0:	f1c1 0620 	rsb	r6, r1, #32
 80004c4:	408b      	lsls	r3, r1
 80004c6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ca:	431f      	orrs	r7, r3
 80004cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004d0:	fa04 f301 	lsl.w	r3, r4, r1
 80004d4:	ea43 030c 	orr.w	r3, r3, ip
 80004d8:	40f4      	lsrs	r4, r6
 80004da:	fa00 f801 	lsl.w	r8, r0, r1
 80004de:	0c38      	lsrs	r0, r7, #16
 80004e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004e4:	fbb4 fef0 	udiv	lr, r4, r0
 80004e8:	fa1f fc87 	uxth.w	ip, r7
 80004ec:	fb00 441e 	mls	r4, r0, lr, r4
 80004f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f4:	fb0e f90c 	mul.w	r9, lr, ip
 80004f8:	45a1      	cmp	r9, r4
 80004fa:	fa02 f201 	lsl.w	r2, r2, r1
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x1a6>
 8000500:	193c      	adds	r4, r7, r4
 8000502:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000506:	f080 8084 	bcs.w	8000612 <__udivmoddi4+0x2a2>
 800050a:	45a1      	cmp	r9, r4
 800050c:	f240 8081 	bls.w	8000612 <__udivmoddi4+0x2a2>
 8000510:	f1ae 0e02 	sub.w	lr, lr, #2
 8000514:	443c      	add	r4, r7
 8000516:	eba4 0409 	sub.w	r4, r4, r9
 800051a:	fa1f f983 	uxth.w	r9, r3
 800051e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000522:	fb00 4413 	mls	r4, r0, r3, r4
 8000526:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800052a:	fb03 fc0c 	mul.w	ip, r3, ip
 800052e:	45a4      	cmp	ip, r4
 8000530:	d907      	bls.n	8000542 <__udivmoddi4+0x1d2>
 8000532:	193c      	adds	r4, r7, r4
 8000534:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000538:	d267      	bcs.n	800060a <__udivmoddi4+0x29a>
 800053a:	45a4      	cmp	ip, r4
 800053c:	d965      	bls.n	800060a <__udivmoddi4+0x29a>
 800053e:	3b02      	subs	r3, #2
 8000540:	443c      	add	r4, r7
 8000542:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000546:	fba0 9302 	umull	r9, r3, r0, r2
 800054a:	eba4 040c 	sub.w	r4, r4, ip
 800054e:	429c      	cmp	r4, r3
 8000550:	46ce      	mov	lr, r9
 8000552:	469c      	mov	ip, r3
 8000554:	d351      	bcc.n	80005fa <__udivmoddi4+0x28a>
 8000556:	d04e      	beq.n	80005f6 <__udivmoddi4+0x286>
 8000558:	b155      	cbz	r5, 8000570 <__udivmoddi4+0x200>
 800055a:	ebb8 030e 	subs.w	r3, r8, lr
 800055e:	eb64 040c 	sbc.w	r4, r4, ip
 8000562:	fa04 f606 	lsl.w	r6, r4, r6
 8000566:	40cb      	lsrs	r3, r1
 8000568:	431e      	orrs	r6, r3
 800056a:	40cc      	lsrs	r4, r1
 800056c:	e9c5 6400 	strd	r6, r4, [r5]
 8000570:	2100      	movs	r1, #0
 8000572:	e750      	b.n	8000416 <__udivmoddi4+0xa6>
 8000574:	f1c2 0320 	rsb	r3, r2, #32
 8000578:	fa20 f103 	lsr.w	r1, r0, r3
 800057c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000580:	fa24 f303 	lsr.w	r3, r4, r3
 8000584:	4094      	lsls	r4, r2
 8000586:	430c      	orrs	r4, r1
 8000588:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800058c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000590:	fa1f f78c 	uxth.w	r7, ip
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3110 	mls	r1, r8, r0, r3
 800059c:	0c23      	lsrs	r3, r4, #16
 800059e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a2:	fb00 f107 	mul.w	r1, r0, r7
 80005a6:	4299      	cmp	r1, r3
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x24c>
 80005aa:	eb1c 0303 	adds.w	r3, ip, r3
 80005ae:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005b2:	d22c      	bcs.n	800060e <__udivmoddi4+0x29e>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	d92a      	bls.n	800060e <__udivmoddi4+0x29e>
 80005b8:	3802      	subs	r0, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	1a5b      	subs	r3, r3, r1
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005c4:	fb08 3311 	mls	r3, r8, r1, r3
 80005c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005cc:	fb01 f307 	mul.w	r3, r1, r7
 80005d0:	42a3      	cmp	r3, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x276>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005dc:	d213      	bcs.n	8000606 <__udivmoddi4+0x296>
 80005de:	42a3      	cmp	r3, r4
 80005e0:	d911      	bls.n	8000606 <__udivmoddi4+0x296>
 80005e2:	3902      	subs	r1, #2
 80005e4:	4464      	add	r4, ip
 80005e6:	1ae4      	subs	r4, r4, r3
 80005e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005ec:	e739      	b.n	8000462 <__udivmoddi4+0xf2>
 80005ee:	4604      	mov	r4, r0
 80005f0:	e6f0      	b.n	80003d4 <__udivmoddi4+0x64>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e706      	b.n	8000404 <__udivmoddi4+0x94>
 80005f6:	45c8      	cmp	r8, r9
 80005f8:	d2ae      	bcs.n	8000558 <__udivmoddi4+0x1e8>
 80005fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000602:	3801      	subs	r0, #1
 8000604:	e7a8      	b.n	8000558 <__udivmoddi4+0x1e8>
 8000606:	4631      	mov	r1, r6
 8000608:	e7ed      	b.n	80005e6 <__udivmoddi4+0x276>
 800060a:	4603      	mov	r3, r0
 800060c:	e799      	b.n	8000542 <__udivmoddi4+0x1d2>
 800060e:	4630      	mov	r0, r6
 8000610:	e7d4      	b.n	80005bc <__udivmoddi4+0x24c>
 8000612:	46d6      	mov	lr, sl
 8000614:	e77f      	b.n	8000516 <__udivmoddi4+0x1a6>
 8000616:	4463      	add	r3, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e74d      	b.n	80004b8 <__udivmoddi4+0x148>
 800061c:	4606      	mov	r6, r0
 800061e:	4623      	mov	r3, r4
 8000620:	4608      	mov	r0, r1
 8000622:	e70f      	b.n	8000444 <__udivmoddi4+0xd4>
 8000624:	3e02      	subs	r6, #2
 8000626:	4463      	add	r3, ip
 8000628:	e730      	b.n	800048c <__udivmoddi4+0x11c>
 800062a:	bf00      	nop

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800063c:	f00d fc10 	bl	800de60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000640:	4b5a      	ldr	r3, [pc, #360]	@ (80007ac <pvPortMallocMicroROS+0x17c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000648:	f000 f986 	bl	8000958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800064c:	4b58      	ldr	r3, [pc, #352]	@ (80007b0 <pvPortMallocMicroROS+0x180>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4013      	ands	r3, r2
 8000654:	2b00      	cmp	r3, #0
 8000656:	f040 8090 	bne.w	800077a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d01e      	beq.n	800069e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000660:	2208      	movs	r2, #8
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	2b00      	cmp	r3, #0
 8000670:	d015      	beq.n	800069e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f023 0307 	bic.w	r3, r3, #7
 8000678:	3308      	adds	r3, #8
 800067a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	2b00      	cmp	r3, #0
 8000684:	d00b      	beq.n	800069e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800068a:	f383 8811 	msr	BASEPRI, r3
 800068e:	f3bf 8f6f 	isb	sy
 8000692:	f3bf 8f4f 	dsb	sy
 8000696:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	e7fd      	b.n	800069a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d06a      	beq.n	800077a <pvPortMallocMicroROS+0x14a>
 80006a4:	4b43      	ldr	r3, [pc, #268]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d865      	bhi.n	800077a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006ae:	4b42      	ldr	r3, [pc, #264]	@ (80007b8 <pvPortMallocMicroROS+0x188>)
 80006b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006b2:	4b41      	ldr	r3, [pc, #260]	@ (80007b8 <pvPortMallocMicroROS+0x188>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006b8:	e004      	b.n	80006c4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80006ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d903      	bls.n	80006d6 <pvPortMallocMicroROS+0xa6>
 80006ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f1      	bne.n	80006ba <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006d6:	4b35      	ldr	r3, [pc, #212]	@ (80007ac <pvPortMallocMicroROS+0x17c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006dc:	429a      	cmp	r2, r3
 80006de:	d04c      	beq.n	800077a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006e0:	6a3b      	ldr	r3, [r7, #32]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2208      	movs	r2, #8
 80006e6:	4413      	add	r3, r2
 80006e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	6a3b      	ldr	r3, [r7, #32]
 80006f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80006f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f4:	685a      	ldr	r2, [r3, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	1ad2      	subs	r2, r2, r3
 80006fa:	2308      	movs	r3, #8
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	429a      	cmp	r2, r3
 8000700:	d920      	bls.n	8000744 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	f003 0307 	and.w	r3, r3, #7
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00b      	beq.n	800072c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000718:	f383 8811 	msr	BASEPRI, r3
 800071c:	f3bf 8f6f 	isb	sy
 8000720:	f3bf 8f4f 	dsb	sy
 8000724:	613b      	str	r3, [r7, #16]
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800072c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072e:	685a      	ldr	r2, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	1ad2      	subs	r2, r2, r3
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800073e:	69b8      	ldr	r0, [r7, #24]
 8000740:	f000 f96c 	bl	8000a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	4a19      	ldr	r2, [pc, #100]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 8000750:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <pvPortMallocMicroROS+0x18c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	429a      	cmp	r2, r3
 800075c:	d203      	bcs.n	8000766 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a16      	ldr	r2, [pc, #88]	@ (80007bc <pvPortMallocMicroROS+0x18c>)
 8000764:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <pvPortMallocMicroROS+0x180>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	431a      	orrs	r2, r3
 8000770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000772:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800077a:	f00d fb7f 	bl	800de7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00b      	beq.n	80007a0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800078c:	f383 8811 	msr	BASEPRI, r3
 8000790:	f3bf 8f6f 	isb	sy
 8000794:	f3bf 8f4f 	dsb	sy
 8000798:	60fb      	str	r3, [r7, #12]
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80007a0:	69fb      	ldr	r3, [r7, #28]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3728      	adds	r7, #40	@ 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000215c 	.word	0x2000215c
 80007b0:	20002168 	.word	0x20002168
 80007b4:	20002160 	.word	0x20002160
 80007b8:	20002154 	.word	0x20002154
 80007bc:	20002164 	.word	0x20002164

080007c0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d04a      	beq.n	8000868 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007d2:	2308      	movs	r3, #8
 80007d4:	425b      	negs	r3, r3
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	685a      	ldr	r2, [r3, #4]
 80007e4:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <vPortFreeMicroROS+0xb0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4013      	ands	r3, r2
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10b      	bne.n	8000806 <vPortFreeMicroROS+0x46>
	__asm volatile
 80007ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007f2:	f383 8811 	msr	BASEPRI, r3
 80007f6:	f3bf 8f6f 	isb	sy
 80007fa:	f3bf 8f4f 	dsb	sy
 80007fe:	60fb      	str	r3, [r7, #12]
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	e7fd      	b.n	8000802 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00b      	beq.n	8000826 <vPortFreeMicroROS+0x66>
	__asm volatile
 800080e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000812:	f383 8811 	msr	BASEPRI, r3
 8000816:	f3bf 8f6f 	isb	sy
 800081a:	f3bf 8f4f 	dsb	sy
 800081e:	60bb      	str	r3, [r7, #8]
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	e7fd      	b.n	8000822 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <vPortFreeMicroROS+0xb0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4013      	ands	r3, r2
 8000830:	2b00      	cmp	r3, #0
 8000832:	d019      	beq.n	8000868 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d115      	bne.n	8000868 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <vPortFreeMicroROS+0xb0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	43db      	mvns	r3, r3
 8000846:	401a      	ands	r2, r3
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800084c:	f00d fb08 	bl	800de60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <vPortFreeMicroROS+0xb4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4413      	add	r3, r2
 800085a:	4a06      	ldr	r2, [pc, #24]	@ (8000874 <vPortFreeMicroROS+0xb4>)
 800085c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800085e:	6938      	ldr	r0, [r7, #16]
 8000860:	f000 f8dc 	bl	8000a1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000864:	f00d fb0a 	bl	800de7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20002168 	.word	0x20002168
 8000874:	20002160 	.word	0x20002160

08000878 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000884:	2308      	movs	r3, #8
 8000886:	425b      	negs	r3, r3
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	4413      	add	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <getBlockSize+0x38>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	43db      	mvns	r3, r3
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]

	return count;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20002168 	.word	0x20002168

080008b4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008be:	f00d facf 	bl	800de60 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	f7ff feb4 	bl	8000630 <pvPortMallocMicroROS>
 80008c8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d017      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d014      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffce 	bl	8000878 <getBlockSize>
 80008dc:	4603      	mov	r3, r0
 80008de:	2208      	movs	r2, #8
 80008e0:	1a9b      	subs	r3, r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d201      	bcs.n	80008f0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	68b8      	ldr	r0, [r7, #8]
 80008f6:	f018 fcaa 	bl	801924e <memcpy>

		vPortFreeMicroROS(pv);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff60 	bl	80007c0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000900:	f00d fabc 	bl	800de7c <xTaskResumeAll>

	return newmem;
 8000904:	68bb      	ldr	r3, [r7, #8]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000918:	f00d faa2 	bl	800de60 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	fb02 f303 	mul.w	r3, r2, r3
 8000924:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff fe82 	bl	8000630 <pvPortMallocMicroROS>
 800092c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000932:	e004      	b.n	800093e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	613a      	str	r2, [r7, #16]
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	617a      	str	r2, [r7, #20]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f5      	bne.n	8000934 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000948:	f00d fa98 	bl	800de7c <xTaskResumeAll>
  	return mem;
 800094c:	68fb      	ldr	r3, [r7, #12]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800095e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000964:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <prvHeapInit+0xac>)
 8000966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00c      	beq.n	800098c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3307      	adds	r3, #7
 8000976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f023 0307 	bic.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	4a1f      	ldr	r2, [pc, #124]	@ (8000a04 <prvHeapInit+0xac>)
 8000988:	4413      	add	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000990:	4a1d      	ldr	r2, [pc, #116]	@ (8000a08 <prvHeapInit+0xb0>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000996:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <prvHeapInit+0xb0>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	4413      	add	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009a4:	2208      	movs	r2, #8
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	1a9b      	subs	r3, r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f023 0307 	bic.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <prvHeapInit+0xb4>)
 80009b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <prvHeapInit+0xb4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <prvHeapInit+0xb4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	1ad2      	subs	r2, r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <prvHeapInit+0xb4>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <prvHeapInit+0xb8>)
 80009e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4a09      	ldr	r2, [pc, #36]	@ (8000a14 <prvHeapInit+0xbc>)
 80009ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <prvHeapInit+0xc0>)
 80009f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	20000154 	.word	0x20000154
 8000a08:	20002154 	.word	0x20002154
 8000a0c:	2000215c 	.word	0x2000215c
 8000a10:	20002164 	.word	0x20002164
 8000a14:	20002160 	.word	0x20002160
 8000a18:	20002168 	.word	0x20002168

08000a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a24:	4b28      	ldr	r3, [pc, #160]	@ (8000ac8 <prvInsertBlockIntoFreeList+0xac>)
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e002      	b.n	8000a30 <prvInsertBlockIntoFreeList+0x14>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d8f7      	bhi.n	8000a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4413      	add	r3, r2
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d108      	bne.n	8000a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	441a      	add	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	441a      	add	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d118      	bne.n	8000aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d00d      	beq.n	8000a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	441a      	add	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e008      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e003      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d002      	beq.n	8000aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20002154 	.word	0x20002154
 8000acc:	2000215c 	.word	0x2000215c

08000ad0 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__          // GCC / arm-none-eabi-gcc
int __io_putchar(int ch)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ad8:	1d39      	adds	r1, r7, #4
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4803      	ldr	r0, [pc, #12]	@ (8000af0 <__io_putchar+0x20>)
 8000ae2:	f006 ffb7 	bl	8007a54 <HAL_UART_Transmit>
    return ch;
 8000ae6:	687b      	ldr	r3, [r7, #4]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20002260 	.word	0x20002260

08000af4 <lcd_send_cmd>:
int day=1;
int now=0;
char MonitorTset[100];

void lcd_send_cmd(char cmd)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
	char data_h,data_l;
	uint8_t frame_data[4];
	data_h = (cmd&0xf0);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f023 030f 	bic.w	r3, r3, #15
 8000b04:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd <<4)&0xf0);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	011b      	lsls	r3, r3, #4
 8000b0a:	73bb      	strb	r3, [r7, #14]
	frame_data[0] = data_h | 0x0C;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	f043 030c 	orr.w	r3, r3, #12
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	723b      	strb	r3, [r7, #8]
	frame_data[1] = data_h | 0x08;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	727b      	strb	r3, [r7, #9]
	frame_data[2] = data_l | 0x0C;
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	f043 030c 	orr.w	r3, r3, #12
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	72bb      	strb	r3, [r7, #10]
	frame_data[3] = data_l | 0x08;
 8000b2a:	7bbb      	ldrb	r3, [r7, #14]
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *)frame_data,4,0x100);
 8000b34:	f107 0208 	add.w	r2, r7, #8
 8000b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2304      	movs	r3, #4
 8000b40:	214e      	movs	r1, #78	@ 0x4e
 8000b42:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <lcd_send_cmd+0x5c>)
 8000b44:	f004 fcde 	bl	8005504 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1);
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000216c 	.word	0x2000216c

08000b54 <lcd_send_data>:

void lcd_send_data(char data)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	char data_h,data_l;
	uint8_t frame_data[4];
	data_h = (data&0xf0);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f023 030f 	bic.w	r3, r3, #15
 8000b64:	73fb      	strb	r3, [r7, #15]
	data_l = ((data <<4)&0xf0);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	011b      	lsls	r3, r3, #4
 8000b6a:	73bb      	strb	r3, [r7, #14]
	frame_data[0] = data_h | 0x0D;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	f043 030d 	orr.w	r3, r3, #13
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	723b      	strb	r3, [r7, #8]
	frame_data[1] = data_h | 0x09;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	f043 0309 	orr.w	r3, r3, #9
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	727b      	strb	r3, [r7, #9]
	frame_data[2] = data_l | 0x0D;
 8000b80:	7bbb      	ldrb	r3, [r7, #14]
 8000b82:	f043 030d 	orr.w	r3, r3, #13
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	72bb      	strb	r3, [r7, #10]
	frame_data[3] = data_l | 0x09;
 8000b8a:	7bbb      	ldrb	r3, [r7, #14]
 8000b8c:	f043 0309 	orr.w	r3, r3, #9
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *)frame_data,4,0x100);
 8000b94:	f107 0208 	add.w	r2, r7, #8
 8000b98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	214e      	movs	r1, #78	@ 0x4e
 8000ba2:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <lcd_send_data+0x5c>)
 8000ba4:	f004 fcae 	bl	8005504 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1);
}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000216c 	.word	0x2000216c

08000bb4 <lcd_clear>:

void lcd_clear()
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01); // clear display
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff ff9b 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f001 fb52 	bl	8002268 <HAL_Delay>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <lcd_Init>:


void lcd_Init()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	HAL_Delay(50); // 8-bit initialization start
 8000bcc:	2032      	movs	r0, #50	@ 0x32
 8000bce:	f001 fb4b 	bl	8002268 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000bd2:	2030      	movs	r0, #48	@ 0x30
 8000bd4:	f7ff ff8e 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(5);
 8000bd8:	2005      	movs	r0, #5
 8000bda:	f001 fb45 	bl	8002268 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000bde:	2030      	movs	r0, #48	@ 0x30
 8000be0:	f7ff ff88 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f001 fb3f 	bl	8002268 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000bea:	2030      	movs	r0, #48	@ 0x30
 8000bec:	f7ff ff82 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(10);
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f001 fb39 	bl	8002268 <HAL_Delay>
	lcd_send_cmd(0x20);
 8000bf6:	2020      	movs	r0, #32
 8000bf8:	f7ff ff7c 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(10); // 8-bit initialization finish
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	f001 fb33 	bl	8002268 <HAL_Delay>

	lcd_send_cmd(0x28);		//function set
 8000c02:	2028      	movs	r0, #40	@ 0x28
 8000c04:	f7ff ff76 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f001 fb2d 	bl	8002268 <HAL_Delay>
	lcd_send_cmd(0x08);		//Display on/off
 8000c0e:	2008      	movs	r0, #8
 8000c10:	f7ff ff70 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f001 fb27 	bl	8002268 <HAL_Delay>
	lcd_send_cmd(0x01);		//clear display
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff ff6a 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f001 fb21 	bl	8002268 <HAL_Delay>
	lcd_send_cmd(0x06);		//Enter mode set
 8000c26:	2006      	movs	r0, #6
 8000c28:	f7ff ff64 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f001 fb1b 	bl	8002268 <HAL_Delay>
	lcd_send_cmd(0x0C);		//Display on/off
 8000c32:	200c      	movs	r0, #12
 8000c34:	f7ff ff5e 	bl	8000af4 <lcd_send_cmd>
	HAL_Delay(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f001 fb15 	bl	8002268 <HAL_Delay>

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
	while(*str)
 8000c4a:	e006      	b.n	8000c5a <lcd_send_string+0x18>
	{
		lcd_send_data(*str++);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff7d 	bl	8000b54 <lcd_send_data>
	while(*str)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1f4      	bne.n	8000c4c <lcd_send_string+0xa>
	}
	HAL_Delay(1);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f001 fb00 	bl	8002268 <HAL_Delay>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <lcd_put_cur>:

void lcd_put_cur(uint8_t row,uint8_t col) // the location on the lcd screen
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	460a      	mov	r2, r1
 8000c7a:	71fb      	strb	r3, [r7, #7]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	71bb      	strb	r3, [r7, #6]
	lcd_send_cmd(0x80 | (col + (0x40 * row)));
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	019b      	lsls	r3, r3, #6
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	4413      	add	r3, r2
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff2c 	bl	8000af4 <lcd_send_cmd>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <I2C_Scan>:

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b094      	sub	sp, #80	@ 0x50
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    char msg[64];
    for (uint8_t addr = 1; addr < 127; addr++) {
 8000cac:	2301      	movs	r3, #1
 8000cae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000cb2:	e028      	b.n	8000d06 <I2C_Scan+0x62>
        if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK) {
 8000cb4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	b299      	uxth	r1, r3
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f004 fd1c 	bl	8005700 <HAL_I2C_IsDeviceReady>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d116      	bne.n	8000cfc <I2C_Scan+0x58>
            sprintf(msg, "Found device at 0x%02X\r\n", addr << 1);
 8000cce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000cd2:	005a      	lsls	r2, r3, #1
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	490f      	ldr	r1, [pc, #60]	@ (8000d18 <I2C_Scan+0x74>)
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f018 f8be 	bl	8018e5c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xffff);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fa7d 	bl	80001e4 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	f107 010c 	add.w	r1, r7, #12
 8000cf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cf6:	4809      	ldr	r0, [pc, #36]	@ (8000d1c <I2C_Scan+0x78>)
 8000cf8:	f006 feac 	bl	8007a54 <HAL_UART_Transmit>
    for (uint8_t addr = 1; addr < 127; addr++) {
 8000cfc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d00:	3301      	adds	r3, #1
 8000d02:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000d06:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d0a:	2b7e      	cmp	r3, #126	@ 0x7e
 8000d0c:	d9d2      	bls.n	8000cb4 <I2C_Scan+0x10>
        }
    }
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	3750      	adds	r7, #80	@ 0x50
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	08019f2c 	.word	0x08019f2c
 8000d1c:	20002260 	.word	0x20002260

08000d20 <incomingImpulse>:

void incomingImpulse() {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	for (;;) {
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0) {
 8000d24:	2101      	movs	r1, #1
 8000d26:	480b      	ldr	r0, [pc, #44]	@ (8000d54 <incomingImpulse+0x34>)
 8000d28:	f002 f942 	bl	8002fb0 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f8      	bne.n	8000d24 <incomingImpulse+0x4>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0){}
 8000d32:	bf00      	nop
 8000d34:	2101      	movs	r1, #1
 8000d36:	4807      	ldr	r0, [pc, #28]	@ (8000d54 <incomingImpulse+0x34>)
 8000d38:	f002 f93a 	bl	8002fb0 <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f8      	beq.n	8000d34 <incomingImpulse+0x14>
			impulse = impulse + 1;
 8000d42:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <incomingImpulse+0x38>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	4a03      	ldr	r2, [pc, #12]	@ (8000d58 <incomingImpulse+0x38>)
 8000d4a:	6013      	str	r3, [r2, #0]
			i = 0;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	@ (8000d5c <incomingImpulse+0x3c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0) {
 8000d52:	e7e7      	b.n	8000d24 <incomingImpulse+0x4>
 8000d54:	40020000 	.word	0x40020000
 8000d58:	20002378 	.word	0x20002378
 8000d5c:	20002374 	.word	0x20002374

08000d60 <COIN_Task>:
		}
	}
}

void COIN_Task() {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af02      	add	r7, sp, #8
  // put your main code here, to run repeatedly:

	memset(MonitorTset,'\0',sizeof(MonitorTset));
 8000d66:	2264      	movs	r2, #100	@ 0x64
 8000d68:	2100      	movs	r1, #0
 8000d6a:	487d      	ldr	r0, [pc, #500]	@ (8000f60 <COIN_Task+0x200>)
 8000d6c:	f018 f9a6 	bl	80190bc <memset>
	I2C_Scan(&hi2c1);
 8000d70:	487c      	ldr	r0, [pc, #496]	@ (8000f64 <COIN_Task+0x204>)
 8000d72:	f7ff ff97 	bl	8000ca4 <I2C_Scan>
	for (;;) {
	  i = i + 1;
 8000d76:	4b7c      	ldr	r3, [pc, #496]	@ (8000f68 <COIN_Task+0x208>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a7a      	ldr	r2, [pc, #488]	@ (8000f68 <COIN_Task+0x208>)
 8000d7e:	6013      	str	r3, [r2, #0]

	  if (i >= 5 && impulse == 1){ // 10 dollar
 8000d80:	4b79      	ldr	r3, [pc, #484]	@ (8000f68 <COIN_Task+0x208>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	dd47      	ble.n	8000e18 <COIN_Task+0xb8>
 8000d88:	4b78      	ldr	r3, [pc, #480]	@ (8000f6c <COIN_Task+0x20c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d143      	bne.n	8000e18 <COIN_Task+0xb8>
		total = total + 10;
 8000d90:	4b77      	ldr	r3, [pc, #476]	@ (8000f70 <COIN_Task+0x210>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	330a      	adds	r3, #10
 8000d96:	4a76      	ldr	r2, [pc, #472]	@ (8000f70 <COIN_Task+0x210>)
 8000d98:	6013      	str	r3, [r2, #0]
		now = now + 10;
 8000d9a:	4b76      	ldr	r3, [pc, #472]	@ (8000f74 <COIN_Task+0x214>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	330a      	adds	r3, #10
 8000da0:	4a74      	ldr	r2, [pc, #464]	@ (8000f74 <COIN_Task+0x214>)
 8000da2:	6013      	str	r3, [r2, #0]

		while (day <= now){
 8000da4:	e00b      	b.n	8000dbe <COIN_Task+0x5e>
		  now = now - day;
 8000da6:	4b73      	ldr	r3, [pc, #460]	@ (8000f74 <COIN_Task+0x214>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4b73      	ldr	r3, [pc, #460]	@ (8000f78 <COIN_Task+0x218>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	4a70      	ldr	r2, [pc, #448]	@ (8000f74 <COIN_Task+0x214>)
 8000db2:	6013      	str	r3, [r2, #0]
		  day = day + 1;
 8000db4:	4b70      	ldr	r3, [pc, #448]	@ (8000f78 <COIN_Task+0x218>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	4a6f      	ldr	r2, [pc, #444]	@ (8000f78 <COIN_Task+0x218>)
 8000dbc:	6013      	str	r3, [r2, #0]
		while (day <= now){
 8000dbe:	4b6e      	ldr	r3, [pc, #440]	@ (8000f78 <COIN_Task+0x218>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8000f74 <COIN_Task+0x214>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	dded      	ble.n	8000da6 <COIN_Task+0x46>
		}

		// uart
		sprintf(MonitorTset,"The day is %d. Today already saved %d. The total value is %d.\n\r",day, now, total);
 8000dca:	4b6b      	ldr	r3, [pc, #428]	@ (8000f78 <COIN_Task+0x218>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	4b69      	ldr	r3, [pc, #420]	@ (8000f74 <COIN_Task+0x214>)
 8000dd0:	6819      	ldr	r1, [r3, #0]
 8000dd2:	4b67      	ldr	r3, [pc, #412]	@ (8000f70 <COIN_Task+0x210>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4968      	ldr	r1, [pc, #416]	@ (8000f7c <COIN_Task+0x21c>)
 8000ddc:	4860      	ldr	r0, [pc, #384]	@ (8000f60 <COIN_Task+0x200>)
 8000dde:	f018 f83d 	bl	8018e5c <siprintf>
//		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);

		lcd_clear();
 8000de2:	f7ff fee7 	bl	8000bb4 <lcd_clear>
		lcd_put_cur(0,0);
 8000de6:	2100      	movs	r1, #0
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff ff41 	bl	8000c70 <lcd_put_cur>
		lcd_send_string("Insert 10 dollar.");
 8000dee:	4864      	ldr	r0, [pc, #400]	@ (8000f80 <COIN_Task+0x220>)
 8000df0:	f7ff ff27 	bl	8000c42 <lcd_send_string>
		lcd_put_cur(1,0);
 8000df4:	2100      	movs	r1, #0
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff ff3a 	bl	8000c70 <lcd_put_cur>
		sprintf(MonitorTset,"Total value is %d", total);
 8000dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8000f70 <COIN_Task+0x210>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4960      	ldr	r1, [pc, #384]	@ (8000f84 <COIN_Task+0x224>)
 8000e04:	4856      	ldr	r0, [pc, #344]	@ (8000f60 <COIN_Task+0x200>)
 8000e06:	f018 f829 	bl	8018e5c <siprintf>
		lcd_send_string(MonitorTset);
 8000e0a:	4855      	ldr	r0, [pc, #340]	@ (8000f60 <COIN_Task+0x200>)
 8000e0c:	f7ff ff19 	bl	8000c42 <lcd_send_string>

		impulse = 0;
 8000e10:	4b56      	ldr	r3, [pc, #344]	@ (8000f6c <COIN_Task+0x20c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e096      	b.n	8000f46 <COIN_Task+0x1e6>
	  }
	  else if (i >= 5 && impulse == 2){ // 5 dollar
 8000e18:	4b53      	ldr	r3, [pc, #332]	@ (8000f68 <COIN_Task+0x208>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	dd47      	ble.n	8000eb0 <COIN_Task+0x150>
 8000e20:	4b52      	ldr	r3, [pc, #328]	@ (8000f6c <COIN_Task+0x20c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d143      	bne.n	8000eb0 <COIN_Task+0x150>
		total = total + 5;
 8000e28:	4b51      	ldr	r3, [pc, #324]	@ (8000f70 <COIN_Task+0x210>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3305      	adds	r3, #5
 8000e2e:	4a50      	ldr	r2, [pc, #320]	@ (8000f70 <COIN_Task+0x210>)
 8000e30:	6013      	str	r3, [r2, #0]
		now = now + 5;
 8000e32:	4b50      	ldr	r3, [pc, #320]	@ (8000f74 <COIN_Task+0x214>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3305      	adds	r3, #5
 8000e38:	4a4e      	ldr	r2, [pc, #312]	@ (8000f74 <COIN_Task+0x214>)
 8000e3a:	6013      	str	r3, [r2, #0]

		while(day <= now){
 8000e3c:	e00b      	b.n	8000e56 <COIN_Task+0xf6>
		  now = now - day;
 8000e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f74 <COIN_Task+0x214>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b4d      	ldr	r3, [pc, #308]	@ (8000f78 <COIN_Task+0x218>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	4a4a      	ldr	r2, [pc, #296]	@ (8000f74 <COIN_Task+0x214>)
 8000e4a:	6013      	str	r3, [r2, #0]
		  day = day + 1;
 8000e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8000f78 <COIN_Task+0x218>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a49      	ldr	r2, [pc, #292]	@ (8000f78 <COIN_Task+0x218>)
 8000e54:	6013      	str	r3, [r2, #0]
		while(day <= now){
 8000e56:	4b48      	ldr	r3, [pc, #288]	@ (8000f78 <COIN_Task+0x218>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b46      	ldr	r3, [pc, #280]	@ (8000f74 <COIN_Task+0x214>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	dded      	ble.n	8000e3e <COIN_Task+0xde>
		}

		sprintf(MonitorTset,"The day is %d. Today already saved %d. The total value is %d.\n\r",day, now, total);
 8000e62:	4b45      	ldr	r3, [pc, #276]	@ (8000f78 <COIN_Task+0x218>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4b43      	ldr	r3, [pc, #268]	@ (8000f74 <COIN_Task+0x214>)
 8000e68:	6819      	ldr	r1, [r3, #0]
 8000e6a:	4b41      	ldr	r3, [pc, #260]	@ (8000f70 <COIN_Task+0x210>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	460b      	mov	r3, r1
 8000e72:	4942      	ldr	r1, [pc, #264]	@ (8000f7c <COIN_Task+0x21c>)
 8000e74:	483a      	ldr	r0, [pc, #232]	@ (8000f60 <COIN_Task+0x200>)
 8000e76:	f017 fff1 	bl	8018e5c <siprintf>
//		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);

		lcd_clear();
 8000e7a:	f7ff fe9b 	bl	8000bb4 <lcd_clear>
		lcd_put_cur(0,0);
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2000      	movs	r0, #0
 8000e82:	f7ff fef5 	bl	8000c70 <lcd_put_cur>
		lcd_send_string("Insert 5 dollar.");
 8000e86:	4840      	ldr	r0, [pc, #256]	@ (8000f88 <COIN_Task+0x228>)
 8000e88:	f7ff fedb 	bl	8000c42 <lcd_send_string>
		lcd_put_cur(1,0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f7ff feee 	bl	8000c70 <lcd_put_cur>
		sprintf(MonitorTset,"Total value is %d", total);
 8000e94:	4b36      	ldr	r3, [pc, #216]	@ (8000f70 <COIN_Task+0x210>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	493a      	ldr	r1, [pc, #232]	@ (8000f84 <COIN_Task+0x224>)
 8000e9c:	4830      	ldr	r0, [pc, #192]	@ (8000f60 <COIN_Task+0x200>)
 8000e9e:	f017 ffdd 	bl	8018e5c <siprintf>
		lcd_send_string(MonitorTset);
 8000ea2:	482f      	ldr	r0, [pc, #188]	@ (8000f60 <COIN_Task+0x200>)
 8000ea4:	f7ff fecd 	bl	8000c42 <lcd_send_string>

		impulse = 0;
 8000ea8:	4b30      	ldr	r3, [pc, #192]	@ (8000f6c <COIN_Task+0x20c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	e04a      	b.n	8000f46 <COIN_Task+0x1e6>
	  }
	  else if (i >= 5 && impulse == 3){ // 1 dollar
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <COIN_Task+0x208>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	dd46      	ble.n	8000f46 <COIN_Task+0x1e6>
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f6c <COIN_Task+0x20c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d142      	bne.n	8000f46 <COIN_Task+0x1e6>
		total = total + 1;
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f70 <COIN_Task+0x210>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8000f70 <COIN_Task+0x210>)
 8000ec8:	6013      	str	r3, [r2, #0]
		now = now + 1;
 8000eca:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <COIN_Task+0x214>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	4a28      	ldr	r2, [pc, #160]	@ (8000f74 <COIN_Task+0x214>)
 8000ed2:	6013      	str	r3, [r2, #0]

		while(day <= now){
 8000ed4:	e00b      	b.n	8000eee <COIN_Task+0x18e>
		  now = now - day;
 8000ed6:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <COIN_Task+0x214>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <COIN_Task+0x218>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	4a24      	ldr	r2, [pc, #144]	@ (8000f74 <COIN_Task+0x214>)
 8000ee2:	6013      	str	r3, [r2, #0]
		  day = day + 1;
 8000ee4:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <COIN_Task+0x218>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a23      	ldr	r2, [pc, #140]	@ (8000f78 <COIN_Task+0x218>)
 8000eec:	6013      	str	r3, [r2, #0]
		while(day <= now){
 8000eee:	4b22      	ldr	r3, [pc, #136]	@ (8000f78 <COIN_Task+0x218>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b20      	ldr	r3, [pc, #128]	@ (8000f74 <COIN_Task+0x214>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	dded      	ble.n	8000ed6 <COIN_Task+0x176>
		}

		sprintf(MonitorTset,"The day is %d. Today already saved %d. The total value is %d.\n\r",day, now, total);
 8000efa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <COIN_Task+0x218>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <COIN_Task+0x214>)
 8000f00:	6819      	ldr	r1, [r3, #0]
 8000f02:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <COIN_Task+0x210>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	491c      	ldr	r1, [pc, #112]	@ (8000f7c <COIN_Task+0x21c>)
 8000f0c:	4814      	ldr	r0, [pc, #80]	@ (8000f60 <COIN_Task+0x200>)
 8000f0e:	f017 ffa5 	bl	8018e5c <siprintf>
//		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);

		lcd_clear();
 8000f12:	f7ff fe4f 	bl	8000bb4 <lcd_clear>
		lcd_put_cur(0,0);
 8000f16:	2100      	movs	r1, #0
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff fea9 	bl	8000c70 <lcd_put_cur>
		lcd_send_string("Insert 1 dollar.");
 8000f1e:	481b      	ldr	r0, [pc, #108]	@ (8000f8c <COIN_Task+0x22c>)
 8000f20:	f7ff fe8f 	bl	8000c42 <lcd_send_string>
		lcd_put_cur(1,0);
 8000f24:	2100      	movs	r1, #0
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff fea2 	bl	8000c70 <lcd_put_cur>
		sprintf(MonitorTset,"Total value is %d", total);
 8000f2c:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <COIN_Task+0x210>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4914      	ldr	r1, [pc, #80]	@ (8000f84 <COIN_Task+0x224>)
 8000f34:	480a      	ldr	r0, [pc, #40]	@ (8000f60 <COIN_Task+0x200>)
 8000f36:	f017 ff91 	bl	8018e5c <siprintf>
		lcd_send_string(MonitorTset);
 8000f3a:	4809      	ldr	r0, [pc, #36]	@ (8000f60 <COIN_Task+0x200>)
 8000f3c:	f7ff fe81 	bl	8000c42 <lcd_send_string>

		impulse=0;
 8000f40:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <COIN_Task+0x20c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
	  }

	  if (day > 365){
 8000f46:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <COIN_Task+0x218>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f5b3 7fb7 	cmp.w	r3, #366	@ 0x16e
 8000f4e:	db02      	blt.n	8000f56 <COIN_Task+0x1f6>
		day = 1;
 8000f50:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <COIN_Task+0x218>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
	  }

	  vTaskDelay(100);
 8000f56:	2064      	movs	r0, #100	@ 0x64
 8000f58:	f00c fee4 	bl	800dd24 <vTaskDelay>
	  i = i + 1;
 8000f5c:	e70b      	b.n	8000d76 <COIN_Task+0x16>
 8000f5e:	bf00      	nop
 8000f60:	20002384 	.word	0x20002384
 8000f64:	2000216c 	.word	0x2000216c
 8000f68:	20002374 	.word	0x20002374
 8000f6c:	20002378 	.word	0x20002378
 8000f70:	2000237c 	.word	0x2000237c
 8000f74:	20002380 	.word	0x20002380
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	08019f48 	.word	0x08019f48
 8000f80:	08019f88 	.word	0x08019f88
 8000f84:	08019f9c 	.word	0x08019f9c
 8000f88:	08019fb0 	.word	0x08019fb0
 8000f8c:	08019fc4 	.word	0x08019fc4

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	@ 0x30
 8000f94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f001 f925 	bl	80021e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 f87f 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f000 f9cd 	bl	800133c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa2:	f000 f9a3 	bl	80012ec <MX_DMA_Init>
  MX_I2C1_Init();
 8000fa6:	f000 f8e3 	bl	8001170 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000faa:	f000 f90f 	bl	80011cc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000fae:	f000 f93d 	bl	800122c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000fb2:	f000 f971 	bl	8001298 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 10; i++) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fba:	e018      	b.n	8000fee <main+0x5e>
  	    char msg[32];
  	    sprintf(msg, "Count: %d\r\n", i);
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fc0:	4926      	ldr	r1, [pc, #152]	@ (800105c <main+0xcc>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f017 ff4a 	bl	8018e5c <siprintf>
  	    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff f90a 	bl	80001e4 <strlen>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	1d39      	adds	r1, r7, #4
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fda:	4821      	ldr	r0, [pc, #132]	@ (8001060 <main+0xd0>)
 8000fdc:	f006 fd3a 	bl	8007a54 <HAL_UART_Transmit>
  	  HAL_Delay(1000);
 8000fe0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe4:	f001 f940 	bl	8002268 <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fea:	3301      	adds	r3, #1
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff0:	2b09      	cmp	r3, #9
 8000ff2:	dde3      	ble.n	8000fbc <main+0x2c>
  	}

  HAL_Delay(30);
 8000ff4:	201e      	movs	r0, #30
 8000ff6:	f001 f937 	bl	8002268 <HAL_Delay>
  lcd_Init();
 8000ffa:	f7ff fde5 	bl	8000bc8 <lcd_Init>

  xTaskCreate(
 8000ffe:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <main+0xd4>)
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	2301      	movs	r3, #1
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2300      	movs	r3, #0
 8001008:	2280      	movs	r2, #128	@ 0x80
 800100a:	4917      	ldr	r1, [pc, #92]	@ (8001068 <main+0xd8>)
 800100c:	4817      	ldr	r0, [pc, #92]	@ (800106c <main+0xdc>)
 800100e:	f00c fd43 	bl	800da98 <xTaskCreate>
		  128,
		  NULL,
		  1,
		  &xcoinHandle);

  xTaskCreate(
 8001012:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <main+0xe0>)
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	2301      	movs	r3, #1
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2300      	movs	r3, #0
 800101c:	2280      	movs	r2, #128	@ 0x80
 800101e:	4915      	ldr	r1, [pc, #84]	@ (8001074 <main+0xe4>)
 8001020:	4815      	ldr	r0, [pc, #84]	@ (8001078 <main+0xe8>)
 8001022:	f00c fd39 	bl	800da98 <xTaskCreate>

//  vTaskStartScheduler();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001026:	f00b fbb5 	bl	800c794 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800102a:	4a14      	ldr	r2, [pc, #80]	@ (800107c <main+0xec>)
 800102c:	2100      	movs	r1, #0
 800102e:	4814      	ldr	r0, [pc, #80]	@ (8001080 <main+0xf0>)
 8001030:	f00b fbfa 	bl	800c828 <osThreadNew>
 8001034:	4603      	mov	r3, r0
 8001036:	4a13      	ldr	r2, [pc, #76]	@ (8001084 <main+0xf4>)
 8001038:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800103a:	f00b fbcf 	bl	800c7dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sprintf(MonitorTset,"The day is %d. Today already saved %d. The total value is %d.\n\r",day, now, total);
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <main+0xf8>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <main+0xfc>)
 8001044:	6819      	ldr	r1, [r3, #0]
 8001046:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <main+0x100>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	460b      	mov	r3, r1
 800104e:	4911      	ldr	r1, [pc, #68]	@ (8001094 <main+0x104>)
 8001050:	4811      	ldr	r0, [pc, #68]	@ (8001098 <main+0x108>)
 8001052:	f017 ff03 	bl	8018e5c <siprintf>
//  HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
  while (1)
 8001056:	bf00      	nop
 8001058:	e7fd      	b.n	8001056 <main+0xc6>
 800105a:	bf00      	nop
 800105c:	08019fd8 	.word	0x08019fd8
 8001060:	20002260 	.word	0x20002260
 8001064:	2000236c 	.word	0x2000236c
 8001068:	08019fe4 	.word	0x08019fe4
 800106c:	08000d61 	.word	0x08000d61
 8001070:	20002370 	.word	0x20002370
 8001074:	08019ff0 	.word	0x08019ff0
 8001078:	08000d21 	.word	0x08000d21
 800107c:	0801a09c 	.word	0x0801a09c
 8001080:	080014f5 	.word	0x080014f5
 8001084:	20002368 	.word	0x20002368
 8001088:	20000000 	.word	0x20000000
 800108c:	20002380 	.word	0x20002380
 8001090:	2000237c 	.word	0x2000237c
 8001094:	08019f48 	.word	0x08019f48
 8001098:	20002384 	.word	0x20002384

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	@ 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2230      	movs	r2, #48	@ 0x30
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f018 f806 	bl	80190bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <SystemClock_Config+0xcc>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	4a27      	ldr	r2, [pc, #156]	@ (8001168 <SystemClock_Config+0xcc>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d0:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <SystemClock_Config+0xcc>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	4b22      	ldr	r3, [pc, #136]	@ (800116c <SystemClock_Config+0xd0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a21      	ldr	r2, [pc, #132]	@ (800116c <SystemClock_Config+0xd0>)
 80010e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <SystemClock_Config+0xd0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001106:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800110a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800110c:	2308      	movs	r3, #8
 800110e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001110:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001114:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800111a:	2307      	movs	r3, #7
 800111c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	4618      	mov	r0, r3
 8001124:	f005 fb16 	bl	8006754 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800112e:	f000 fa87 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2302      	movs	r3, #2
 8001138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800113e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001142:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001144:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001148:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2105      	movs	r1, #5
 8001150:	4618      	mov	r0, r3
 8001152:	f005 fd77 	bl	8006c44 <HAL_RCC_ClockConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800115c:	f000 fa70 	bl	8001640 <Error_Handler>
  }
}
 8001160:	bf00      	nop
 8001162:	3750      	adds	r7, #80	@ 0x50
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40007000 	.word	0x40007000

08001170 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <MX_I2C1_Init+0x50>)
 8001176:	4a13      	ldr	r2, [pc, #76]	@ (80011c4 <MX_I2C1_Init+0x54>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800117a:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <MX_I2C1_Init+0x50>)
 800117c:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <MX_I2C1_Init+0x58>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <MX_I2C1_Init+0x50>)
 800118e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001192:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001194:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <MX_I2C1_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <MX_I2C1_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ac:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <MX_I2C1_Init+0x50>)
 80011ae:	f004 f865 	bl	800527c <HAL_I2C_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011b8:	f000 fa42 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000216c 	.word	0x2000216c
 80011c4:	40005400 	.word	0x40005400
 80011c8:	000186a0 	.word	0x000186a0

080011cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <MX_I2S3_Init+0x54>)
 80011d2:	4a14      	ldr	r2, [pc, #80]	@ (8001224 <MX_I2S3_Init+0x58>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011d6:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_I2S3_Init+0x54>)
 80011d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <MX_I2S3_Init+0x54>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_I2S3_Init+0x54>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <MX_I2S3_Init+0x54>)
 80011ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <MX_I2S3_Init+0x54>)
 80011f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001228 <MX_I2S3_Init+0x5c>)
 80011f6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_I2S3_Init+0x54>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <MX_I2S3_Init+0x54>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_I2S3_Init+0x54>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <MX_I2S3_Init+0x54>)
 800120c:	f004 fe02 	bl	8005e14 <HAL_I2S_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001216:	f000 fa13 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200021c0 	.word	0x200021c0
 8001224:	40003c00 	.word	0x40003c00
 8001228:	00017700 	.word	0x00017700

0800122c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001232:	4a18      	ldr	r2, [pc, #96]	@ (8001294 <MX_SPI1_Init+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001238:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800123c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800123e:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_SPI1_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800125c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800125e:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_SPI1_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_SPI1_Init+0x64>)
 8001278:	220a      	movs	r2, #10
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_SPI1_Init+0x64>)
 800127e:	f006 f875 	bl	800736c <HAL_SPI_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001288:	f000 f9da 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20002208 	.word	0x20002208
 8001294:	40013000 	.word	0x40013000

08001298 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 800129e:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <MX_USART2_UART_Init+0x50>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012d0:	f006 fb70 	bl	80079b4 <HAL_UART_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012da:	f000 f9b1 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20002260 	.word	0x20002260
 80012e8:	40004400 	.word	0x40004400

080012ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <MX_DMA_Init+0x4c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <MX_DMA_Init+0x4c>)
 80012fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <MX_DMA_Init+0x4c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2105      	movs	r1, #5
 8001312:	2010      	movs	r0, #16
 8001314:	f001 f884 	bl	8002420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001318:	2010      	movs	r0, #16
 800131a:	f001 f89d 	bl	8002458 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2105      	movs	r1, #5
 8001322:	2011      	movs	r0, #17
 8001324:	f001 f87c 	bl	8002420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001328:	2011      	movs	r0, #17
 800132a:	f001 f895 	bl	8002458 <HAL_NVIC_EnableIRQ>

}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	@ 0x30
 8001340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	4b62      	ldr	r3, [pc, #392]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a61      	ldr	r2, [pc, #388]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b5f      	ldr	r3, [pc, #380]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	4b5b      	ldr	r3, [pc, #364]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a5a      	ldr	r2, [pc, #360]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 8001378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b58      	ldr	r3, [pc, #352]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b54      	ldr	r3, [pc, #336]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a53      	ldr	r2, [pc, #332]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b51      	ldr	r3, [pc, #324]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b4d      	ldr	r3, [pc, #308]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a4c      	ldr	r2, [pc, #304]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b4a      	ldr	r3, [pc, #296]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	4b46      	ldr	r3, [pc, #280]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a45      	ldr	r2, [pc, #276]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b43      	ldr	r3, [pc, #268]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b3f      	ldr	r3, [pc, #252]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a3e      	ldr	r2, [pc, #248]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 80013e8:	f043 0310 	orr.w	r3, r3, #16
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b3c      	ldr	r3, [pc, #240]	@ (80014e0 <MX_GPIO_Init+0x1a4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2101      	movs	r1, #1
 80013fe:	4839      	ldr	r0, [pc, #228]	@ (80014e4 <MX_GPIO_Init+0x1a8>)
 8001400:	f001 fdee 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001404:	2200      	movs	r2, #0
 8001406:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800140a:	4837      	ldr	r0, [pc, #220]	@ (80014e8 <MX_GPIO_Init+0x1ac>)
 800140c:	f001 fde8 	bl	8002fe0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001410:	2301      	movs	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	482f      	ldr	r0, [pc, #188]	@ (80014e4 <MX_GPIO_Init+0x1a8>)
 8001428:	f001 fc26 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800142c:	2308      	movs	r3, #8
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800143c:	2305      	movs	r3, #5
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4827      	ldr	r0, [pc, #156]	@ (80014e4 <MX_GPIO_Init+0x1a8>)
 8001448:	f001 fc16 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800144c:	2304      	movs	r3, #4
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	4823      	ldr	r0, [pc, #140]	@ (80014ec <MX_GPIO_Init+0x1b0>)
 8001460:	f001 fc0a 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001476:	2305      	movs	r3, #5
 8001478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	481a      	ldr	r0, [pc, #104]	@ (80014ec <MX_GPIO_Init+0x1b0>)
 8001482:	f001 fbf9 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001486:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800148a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4812      	ldr	r0, [pc, #72]	@ (80014e8 <MX_GPIO_Init+0x1ac>)
 80014a0:	f001 fbea 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014a4:	2320      	movs	r3, #32
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4619      	mov	r1, r3
 80014b6:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <MX_GPIO_Init+0x1ac>)
 80014b8:	f001 fbde 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80014bc:	2302      	movs	r3, #2
 80014be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014c0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <MX_GPIO_Init+0x1b4>)
 80014d2:	f001 fbd1 	bl	8002c78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d6:	bf00      	nop
 80014d8:	3730      	adds	r7, #48	@ 0x30
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40021000 	.word	0x40021000

080014f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014f4:	b5b0      	push	{r4, r5, r7, lr}
 80014f6:	b0a6      	sub	sp, #152	@ 0x98
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	61f8      	str	r0, [r7, #28]
//	uint8_t hello[] = "HELLO_AGENT\r\n";
//	HAL_UART_Transmit(&huart2, hello, sizeof(hello)-1, HAL_MAX_DELAY);
	HAL_Delay(3000);
 80014fc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001500:	f000 feb2 	bl	8002268 <HAL_Delay>
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001504:	f00e f938 	bl	800f778 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

    // micro-ROS configuration

    rmw_uros_set_custom_transport(
 8001508:	4b35      	ldr	r3, [pc, #212]	@ (80015e0 <StartDefaultTask+0xec>)
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	4b35      	ldr	r3, [pc, #212]	@ (80015e4 <StartDefaultTask+0xf0>)
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4b35      	ldr	r3, [pc, #212]	@ (80015e8 <StartDefaultTask+0xf4>)
 8001512:	4a36      	ldr	r2, [pc, #216]	@ (80015ec <StartDefaultTask+0xf8>)
 8001514:	4936      	ldr	r1, [pc, #216]	@ (80015f0 <StartDefaultTask+0xfc>)
 8001516:	2001      	movs	r0, #1
 8001518:	f00e fe62 	bl	80101e0 <rmw_uros_set_custom_transport>
      cubemx_transport_open,
      cubemx_transport_close,
      cubemx_transport_write,
      cubemx_transport_read);

    rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800151c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001520:	4618      	mov	r0, r3
 8001522:	f00e fddd 	bl	80100e0 <rcutils_get_zero_initialized_allocator>
    freeRTOS_allocator.allocate = microros_allocate;
 8001526:	4b33      	ldr	r3, [pc, #204]	@ (80015f4 <StartDefaultTask+0x100>)
 8001528:	67bb      	str	r3, [r7, #120]	@ 0x78
    freeRTOS_allocator.deallocate = microros_deallocate;
 800152a:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <StartDefaultTask+0x104>)
 800152c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    freeRTOS_allocator.reallocate = microros_reallocate;
 800152e:	4b33      	ldr	r3, [pc, #204]	@ (80015fc <StartDefaultTask+0x108>)
 8001530:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001534:	4b32      	ldr	r3, [pc, #200]	@ (8001600 <StartDefaultTask+0x10c>)
 8001536:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800153a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800153e:	4618      	mov	r0, r3
 8001540:	f00e fddc 	bl	80100fc <rcutils_set_default_allocator>
 8001544:	4603      	mov	r3, r0
 8001546:	f083 0301 	eor.w	r3, r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <StartDefaultTask+0x66>
        printf("Error on default allocators (line %d)\n", __LINE__);
 8001550:	f240 21f9 	movw	r1, #761	@ 0x2f9
 8001554:	482b      	ldr	r0, [pc, #172]	@ (8001604 <StartDefaultTask+0x110>)
 8001556:	f017 fbdd 	bl	8018d14 <iprintf>
    rclc_support_t support;
    rcl_allocator_t allocator;
    rcl_node_t node;
    rcl_ret_t ret;

    allocator = rcl_get_default_allocator();
 800155a:	463b      	mov	r3, r7
 800155c:	4618      	mov	r0, r3
 800155e:	f00e fdeb 	bl	8010138 <rcutils_get_default_allocator>
 8001562:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001566:	463d      	mov	r5, r7
 8001568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	6023      	str	r3, [r4, #0]

    //create init_options
    rclc_support_init(&support, 0, NULL, &allocator);
 8001570:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001574:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	f00e fcee 	bl	800ff5c <rclc_support_init>

    // create node
    rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001580:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001584:	f107 0020 	add.w	r0, r7, #32
 8001588:	4a1f      	ldr	r2, [pc, #124]	@ (8001608 <StartDefaultTask+0x114>)
 800158a:	4920      	ldr	r1, [pc, #128]	@ (800160c <StartDefaultTask+0x118>)
 800158c:	f00e fd30 	bl	800fff0 <rclc_node_init_default>

    // create publisher
    ret = rclc_publisher_init_default(
 8001590:	f00f faac 	bl	8010aec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001594:	4602      	mov	r2, r0
 8001596:	f107 0120 	add.w	r1, r7, #32
 800159a:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 800159e:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <StartDefaultTask+0x11c>)
 80015a0:	f00e fd62 	bl	8010068 <rclc_publisher_init_default>
 80015a4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
      &publisher,
      &node,
      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
      "cubemx_publisher");
    printf("pub_init: %d\n", ret);
 80015a8:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80015ac:	4819      	ldr	r0, [pc, #100]	@ (8001614 <StartDefaultTask+0x120>)
 80015ae:	f017 fbb1 	bl	8018d14 <iprintf>

    printf("Publisher created\n");
 80015b2:	4819      	ldr	r0, [pc, #100]	@ (8001618 <StartDefaultTask+0x124>)
 80015b4:	f017 fc16 	bl	8018de4 <puts>
    msg.data = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	673b      	str	r3, [r7, #112]	@ 0x70

    for(;;)
    {
      ret = rcl_publish(&publisher, &msg, NULL);
 80015bc:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80015c0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80015c4:	2200      	movs	r2, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f00e fca4 	bl	800ff14 <rcl_publish>
 80015cc:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
      if (ret != RCL_RET_OK)
      {
//        printf("Error publishing \n");
      }

      msg.data++;
 80015d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015d2:	3301      	adds	r3, #1
 80015d4:	673b      	str	r3, [r7, #112]	@ 0x70
      osDelay(10);
 80015d6:	200a      	movs	r0, #10
 80015d8:	f00b f9b8 	bl	800c94c <osDelay>
      ret = rcl_publish(&publisher, &msg, NULL);
 80015dc:	e7ee      	b.n	80015bc <StartDefaultTask+0xc8>
 80015de:	bf00      	nop
 80015e0:	080020e9 	.word	0x080020e9
 80015e4:	08002081 	.word	0x08002081
 80015e8:	08002061 	.word	0x08002061
 80015ec:	08002035 	.word	0x08002035
 80015f0:	20002260 	.word	0x20002260
 80015f4:	0800164d 	.word	0x0800164d
 80015f8:	08001691 	.word	0x08001691
 80015fc:	080016c9 	.word	0x080016c9
 8001600:	08001735 	.word	0x08001735
 8001604:	08019ff8 	.word	0x08019ff8
 8001608:	0801a020 	.word	0x0801a020
 800160c:	0801a024 	.word	0x0801a024
 8001610:	0801a030 	.word	0x0801a030
 8001614:	0801a044 	.word	0x0801a044
 8001618:	0801a054 	.word	0x0801a054

0800161c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a04      	ldr	r2, [pc, #16]	@ (800163c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800162e:	f000 fdfb 	bl	8002228 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40010000 	.word	0x40010000

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <Error_Handler+0x8>

0800164c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001656:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <microros_allocate+0x3c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	461a      	mov	r2, r3
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <microros_allocate+0x3c>)
 8001664:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <microros_allocate+0x40>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <microros_allocate+0x40>)
 8001674:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7fe ffda 	bl	8000630 <pvPortMallocMicroROS>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200023e8 	.word	0x200023e8
 800168c:	200023ec 	.word	0x200023ec

08001690 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00c      	beq.n	80016ba <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff f8e9 	bl	8000878 <getBlockSize>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a06      	ldr	r2, [pc, #24]	@ (80016c4 <microros_deallocate+0x34>)
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <microros_deallocate+0x34>)
 80016b2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff f883 	bl	80007c0 <vPortFreeMicroROS>
  }
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200023ec 	.word	0x200023ec

080016c8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80016d4:	4b15      	ldr	r3, [pc, #84]	@ (800172c <microros_reallocate+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	4413      	add	r3, r2
 80016de:	461a      	mov	r2, r3
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <microros_reallocate+0x64>)
 80016e2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <microros_reallocate+0x68>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	4413      	add	r3, r2
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <microros_reallocate+0x68>)
 80016f2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d104      	bne.n	8001704 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80016fa:	68b8      	ldr	r0, [r7, #8]
 80016fc:	f7fe ff98 	bl	8000630 <pvPortMallocMicroROS>
 8001700:	4603      	mov	r3, r0
 8001702:	e00e      	b.n	8001722 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7ff f8b7 	bl	8000878 <getBlockSize>
 800170a:	4603      	mov	r3, r0
 800170c:	4a08      	ldr	r2, [pc, #32]	@ (8001730 <microros_reallocate+0x68>)
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	461a      	mov	r2, r3
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <microros_reallocate+0x68>)
 8001716:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7ff f8ca 	bl	80008b4 <pvPortReallocMicroROS>
 8001720:	4603      	mov	r3, r0
  }
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200023e8 	.word	0x200023e8
 8001730:	200023ec 	.word	0x200023ec

08001734 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	fb02 f303 	mul.w	r3, r2, r3
 8001748:	4a0c      	ldr	r2, [pc, #48]	@ (800177c <microros_zero_allocate+0x48>)
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	4413      	add	r3, r2
 800174e:	461a      	mov	r2, r3
 8001750:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <microros_zero_allocate+0x48>)
 8001752:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	fb02 f303 	mul.w	r3, r2, r3
 800175c:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <microros_zero_allocate+0x4c>)
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	4413      	add	r3, r2
 8001762:	461a      	mov	r2, r3
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <microros_zero_allocate+0x4c>)
 8001766:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff f8cf 	bl	800090e <pvPortCallocMicroROS>
 8001770:	4603      	mov	r3, r0
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200023e8 	.word	0x200023e8
 8001780:	200023ec 	.word	0x200023ec
 8001784:	00000000 	.word	0x00000000

08001788 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001788:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800179a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800179e:	a320      	add	r3, pc, #128	@ (adr r3, 8001820 <UTILS_NanosecondsToTimespec+0x98>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe fd7c 	bl	80002a0 <__aeabi_ldivmod>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80017b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001820 <UTILS_NanosecondsToTimespec+0x98>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe fd70 	bl	80002a0 <__aeabi_ldivmod>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	da20      	bge.n	800180e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a11      	ldr	r2, [pc, #68]	@ (8001818 <UTILS_NanosecondsToTimespec+0x90>)
 80017d2:	fb82 1203 	smull	r1, r2, r2, r3
 80017d6:	1712      	asrs	r2, r2, #28
 80017d8:	17db      	asrs	r3, r3, #31
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	6979      	ldr	r1, [r7, #20]
 80017e8:	17c8      	asrs	r0, r1, #31
 80017ea:	460c      	mov	r4, r1
 80017ec:	4605      	mov	r5, r0
 80017ee:	ebb2 0804 	subs.w	r8, r2, r4
 80017f2:	eb63 0905 	sbc.w	r9, r3, r5
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	4906      	ldr	r1, [pc, #24]	@ (800181c <UTILS_NanosecondsToTimespec+0x94>)
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	441a      	add	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	609a      	str	r2, [r3, #8]
    }
}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001818:	44b82fa1 	.word	0x44b82fa1
 800181c:	3b9aca00 	.word	0x3b9aca00
 8001820:	3b9aca00 	.word	0x3b9aca00
 8001824:	00000000 	.word	0x00000000

08001828 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800182c:	b08e      	sub	sp, #56	@ 0x38
 800182e:	af00      	add	r7, sp, #0
 8001830:	6278      	str	r0, [r7, #36]	@ 0x24
 8001832:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001834:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001838:	2300      	movs	r3, #0
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800184a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800184e:	4618      	mov	r0, r3
 8001850:	f00c fd90 	bl	800e374 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001856:	17da      	asrs	r2, r3, #31
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	61fa      	str	r2, [r7, #28]
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	69b9      	ldr	r1, [r7, #24]
 8001866:	000b      	movs	r3, r1
 8001868:	2200      	movs	r2, #0
 800186a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800186e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001870:	2200      	movs	r2, #0
 8001872:	461c      	mov	r4, r3
 8001874:	4615      	mov	r5, r2
 8001876:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800187a:	1911      	adds	r1, r2, r4
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	416b      	adcs	r3, r5
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001886:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800188a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	f04f 0400 	mov.w	r4, #0
 8001896:	f04f 0500 	mov.w	r5, #0
 800189a:	015d      	lsls	r5, r3, #5
 800189c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80018a0:	0154      	lsls	r4, r2, #5
 80018a2:	4622      	mov	r2, r4
 80018a4:	462b      	mov	r3, r5
 80018a6:	ebb2 0800 	subs.w	r8, r2, r0
 80018aa:	eb63 0901 	sbc.w	r9, r3, r1
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80018ba:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80018be:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80018c2:	4690      	mov	r8, r2
 80018c4:	4699      	mov	r9, r3
 80018c6:	eb18 0a00 	adds.w	sl, r8, r0
 80018ca:	eb49 0b01 	adc.w	fp, r9, r1
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018da:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018de:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018e2:	ebb2 040a 	subs.w	r4, r2, sl
 80018e6:	603c      	str	r4, [r7, #0]
 80018e8:	eb63 030b 	sbc.w	r3, r3, fp
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018f2:	4623      	mov	r3, r4
 80018f4:	181b      	adds	r3, r3, r0
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	462b      	mov	r3, r5
 80018fa:	eb41 0303 	adc.w	r3, r1, r3
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	6a3a      	ldr	r2, [r7, #32]
 8001902:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001906:	f7ff ff3f 	bl	8001788 <UTILS_NanosecondsToTimespec>

    return 0;
 800190a:	2300      	movs	r3, #0
 800190c:	4618      	mov	r0, r3
 800190e:	3738      	adds	r7, #56	@ 0x38
 8001910:	46bd      	mov	sp, r7
 8001912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_MspInit+0x54>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	4a11      	ldr	r2, [pc, #68]	@ (800196c <HAL_MspInit+0x54>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800192c:	6453      	str	r3, [r2, #68]	@ 0x44
 800192e:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <HAL_MspInit+0x54>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_MspInit+0x54>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <HAL_MspInit+0x54>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	@ 0x40
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <HAL_MspInit+0x54>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	210f      	movs	r1, #15
 800195a:	f06f 0001 	mvn.w	r0, #1
 800195e:	f000 fd5f 	bl	8002420 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	@ 0x28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a19      	ldr	r2, [pc, #100]	@ (80019f4 <HAL_I2C_MspInit+0x84>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d12c      	bne.n	80019ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	4b18      	ldr	r3, [pc, #96]	@ (80019f8 <HAL_I2C_MspInit+0x88>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a17      	ldr	r2, [pc, #92]	@ (80019f8 <HAL_I2C_MspInit+0x88>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <HAL_I2C_MspInit+0x88>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80019ae:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b4:	2312      	movs	r3, #18
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019c0:	2304      	movs	r3, #4
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	480c      	ldr	r0, [pc, #48]	@ (80019fc <HAL_I2C_MspInit+0x8c>)
 80019cc:	f001 f954 	bl	8002c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_I2C_MspInit+0x88>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <HAL_I2C_MspInit+0x88>)
 80019da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019de:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_I2C_MspInit+0x88>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	@ 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40005400 	.word	0x40005400
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020400 	.word	0x40020400

08001a00 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08e      	sub	sp, #56	@ 0x38
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a31      	ldr	r2, [pc, #196]	@ (8001af0 <HAL_I2S_MspInit+0xf0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d15a      	bne.n	8001ae6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001a30:	2301      	movs	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001a34:	23c0      	movs	r3, #192	@ 0xc0
 8001a36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4618      	mov	r0, r3
 8001a42:	f005 fb51 	bl	80070e8 <HAL_RCCEx_PeriphCLKConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001a4c:	f7ff fdf8 	bl	8001640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	4b27      	ldr	r3, [pc, #156]	@ (8001af4 <HAL_I2S_MspInit+0xf4>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	4a26      	ldr	r2, [pc, #152]	@ (8001af4 <HAL_I2S_MspInit+0xf4>)
 8001a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a60:	4b24      	ldr	r3, [pc, #144]	@ (8001af4 <HAL_I2S_MspInit+0xf4>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <HAL_I2S_MspInit+0xf4>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a74:	4a1f      	ldr	r2, [pc, #124]	@ (8001af4 <HAL_I2S_MspInit+0xf4>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_I2S_MspInit+0xf4>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <HAL_I2S_MspInit+0xf4>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a90:	4a18      	ldr	r2, [pc, #96]	@ (8001af4 <HAL_I2S_MspInit+0xf4>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <HAL_I2S_MspInit+0xf4>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001aa4:	2310      	movs	r3, #16
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ab4:	2306      	movs	r3, #6
 8001ab6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001abc:	4619      	mov	r1, r3
 8001abe:	480e      	ldr	r0, [pc, #56]	@ (8001af8 <HAL_I2S_MspInit+0xf8>)
 8001ac0:	f001 f8da 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001ac4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4806      	ldr	r0, [pc, #24]	@ (8001afc <HAL_I2S_MspInit+0xfc>)
 8001ae2:	f001 f8c9 	bl	8002c78 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3738      	adds	r7, #56	@ 0x38
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40003c00 	.word	0x40003c00
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020800 	.word	0x40020800

08001b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	@ 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	@ (8001b84 <HAL_SPI_MspInit+0x84>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d12b      	bne.n	8001b7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	4b18      	ldr	r3, [pc, #96]	@ (8001b88 <HAL_SPI_MspInit+0x88>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	4a17      	ldr	r2, [pc, #92]	@ (8001b88 <HAL_SPI_MspInit+0x88>)
 8001b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <HAL_SPI_MspInit+0x88>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <HAL_SPI_MspInit+0x88>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a10      	ldr	r2, [pc, #64]	@ (8001b88 <HAL_SPI_MspInit+0x88>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <HAL_SPI_MspInit+0x88>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001b5a:	23e0      	movs	r3, #224	@ 0xe0
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	@ (8001b8c <HAL_SPI_MspInit+0x8c>)
 8001b76:	f001 f87f 	bl	8002c78 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b7a:	bf00      	nop
 8001b7c:	3728      	adds	r7, #40	@ 0x28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40013000 	.word	0x40013000
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020000 	.word	0x40020000

08001b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	@ 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ce4 <HAL_UART_MspInit+0x154>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	f040 8093 	bne.w	8001cda <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ce8 <HAL_UART_MspInit+0x158>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	4a4a      	ldr	r2, [pc, #296]	@ (8001ce8 <HAL_UART_MspInit+0x158>)
 8001bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc4:	4b48      	ldr	r3, [pc, #288]	@ (8001ce8 <HAL_UART_MspInit+0x158>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4b44      	ldr	r3, [pc, #272]	@ (8001ce8 <HAL_UART_MspInit+0x158>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd8:	4a43      	ldr	r2, [pc, #268]	@ (8001ce8 <HAL_UART_MspInit+0x158>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be0:	4b41      	ldr	r3, [pc, #260]	@ (8001ce8 <HAL_UART_MspInit+0x158>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bec:	230c      	movs	r3, #12
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bfc:	2307      	movs	r3, #7
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4839      	ldr	r0, [pc, #228]	@ (8001cec <HAL_UART_MspInit+0x15c>)
 8001c08:	f001 f836 	bl	8002c78 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001c0c:	4b38      	ldr	r3, [pc, #224]	@ (8001cf0 <HAL_UART_MspInit+0x160>)
 8001c0e:	4a39      	ldr	r2, [pc, #228]	@ (8001cf4 <HAL_UART_MspInit+0x164>)
 8001c10:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001c12:	4b37      	ldr	r3, [pc, #220]	@ (8001cf0 <HAL_UART_MspInit+0x160>)
 8001c14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c18:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c1a:	4b35      	ldr	r3, [pc, #212]	@ (8001cf0 <HAL_UART_MspInit+0x160>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c20:	4b33      	ldr	r3, [pc, #204]	@ (8001cf0 <HAL_UART_MspInit+0x160>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c26:	4b32      	ldr	r3, [pc, #200]	@ (8001cf0 <HAL_UART_MspInit+0x160>)
 8001c28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c2e:	4b30      	ldr	r3, [pc, #192]	@ (8001cf0 <HAL_UART_MspInit+0x160>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c34:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <HAL_UART_MspInit+0x160>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf0 <HAL_UART_MspInit+0x160>)
 8001c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c40:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c42:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf0 <HAL_UART_MspInit+0x160>)
 8001c44:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c48:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c4a:	4b29      	ldr	r3, [pc, #164]	@ (8001cf0 <HAL_UART_MspInit+0x160>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c50:	4827      	ldr	r0, [pc, #156]	@ (8001cf0 <HAL_UART_MspInit+0x160>)
 8001c52:	f000 fc0f 	bl	8002474 <HAL_DMA_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001c5c:	f7ff fcf0 	bl	8001640 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a23      	ldr	r2, [pc, #140]	@ (8001cf0 <HAL_UART_MspInit+0x160>)
 8001c64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c66:	4a22      	ldr	r2, [pc, #136]	@ (8001cf0 <HAL_UART_MspInit+0x160>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c6c:	4b22      	ldr	r3, [pc, #136]	@ (8001cf8 <HAL_UART_MspInit+0x168>)
 8001c6e:	4a23      	ldr	r2, [pc, #140]	@ (8001cfc <HAL_UART_MspInit+0x16c>)
 8001c70:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c72:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <HAL_UART_MspInit+0x168>)
 8001c74:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c78:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <HAL_UART_MspInit+0x168>)
 8001c7c:	2240      	movs	r2, #64	@ 0x40
 8001c7e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <HAL_UART_MspInit+0x168>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <HAL_UART_MspInit+0x168>)
 8001c88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c8c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <HAL_UART_MspInit+0x168>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c94:	4b18      	ldr	r3, [pc, #96]	@ (8001cf8 <HAL_UART_MspInit+0x168>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <HAL_UART_MspInit+0x168>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <HAL_UART_MspInit+0x168>)
 8001ca2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ca6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ca8:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <HAL_UART_MspInit+0x168>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001cae:	4812      	ldr	r0, [pc, #72]	@ (8001cf8 <HAL_UART_MspInit+0x168>)
 8001cb0:	f000 fbe0 	bl	8002474 <HAL_DMA_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001cba:	f7ff fcc1 	bl	8001640 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf8 <HAL_UART_MspInit+0x168>)
 8001cc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <HAL_UART_MspInit+0x168>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2105      	movs	r1, #5
 8001cce:	2026      	movs	r0, #38	@ 0x26
 8001cd0:	f000 fba6 	bl	8002420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cd4:	2026      	movs	r0, #38	@ 0x26
 8001cd6:	f000 fbbf 	bl	8002458 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001cda:	bf00      	nop
 8001cdc:	3728      	adds	r7, #40	@ 0x28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40004400 	.word	0x40004400
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020000 	.word	0x40020000
 8001cf0:	200022a8 	.word	0x200022a8
 8001cf4:	40026088 	.word	0x40026088
 8001cf8:	20002308 	.word	0x20002308
 8001cfc:	400260a0 	.word	0x400260a0

08001d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	@ 0x30
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd4 <HAL_InitTick+0xd4>)
 8001d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d18:	4a2e      	ldr	r2, [pc, #184]	@ (8001dd4 <HAL_InitTick+0xd4>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d20:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd4 <HAL_InitTick+0xd4>)
 8001d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d2c:	f107 020c 	add.w	r2, r7, #12
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f005 f9a4 	bl	8007084 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001d3c:	f005 f98e 	bl	800705c <HAL_RCC_GetPCLK2Freq>
 8001d40:	4603      	mov	r3, r0
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d48:	4a23      	ldr	r2, [pc, #140]	@ (8001dd8 <HAL_InitTick+0xd8>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	0c9b      	lsrs	r3, r3, #18
 8001d50:	3b01      	subs	r3, #1
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d54:	4b21      	ldr	r3, [pc, #132]	@ (8001ddc <HAL_InitTick+0xdc>)
 8001d56:	4a22      	ldr	r2, [pc, #136]	@ (8001de0 <HAL_InitTick+0xe0>)
 8001d58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d5a:	4b20      	ldr	r3, [pc, #128]	@ (8001ddc <HAL_InitTick+0xdc>)
 8001d5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d60:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d62:	4a1e      	ldr	r2, [pc, #120]	@ (8001ddc <HAL_InitTick+0xdc>)
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d66:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d68:	4b1c      	ldr	r3, [pc, #112]	@ (8001ddc <HAL_InitTick+0xdc>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <HAL_InitTick+0xdc>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d74:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <HAL_InitTick+0xdc>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d7a:	4818      	ldr	r0, [pc, #96]	@ (8001ddc <HAL_InitTick+0xdc>)
 8001d7c:	f005 fb7f 	bl	800747e <HAL_TIM_Base_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d11b      	bne.n	8001dc6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d8e:	4813      	ldr	r0, [pc, #76]	@ (8001ddc <HAL_InitTick+0xdc>)
 8001d90:	f005 fbce 	bl	8007530 <HAL_TIM_Base_Start_IT>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d111      	bne.n	8001dc6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001da2:	2019      	movs	r0, #25
 8001da4:	f000 fb58 	bl	8002458 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b0f      	cmp	r3, #15
 8001dac:	d808      	bhi.n	8001dc0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001dae:	2200      	movs	r2, #0
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	2019      	movs	r0, #25
 8001db4:	f000 fb34 	bl	8002420 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db8:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <HAL_InitTick+0xe4>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e002      	b.n	8001dc6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3730      	adds	r7, #48	@ 0x30
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	431bde83 	.word	0x431bde83
 8001ddc:	200023f0 	.word	0x200023f0
 8001de0:	40010000 	.word	0x40010000
 8001de4:	2000000c 	.word	0x2000000c

08001de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <NMI_Handler+0x4>

08001df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <HardFault_Handler+0x4>

08001df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <MemManage_Handler+0x4>

08001e00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <BusFault_Handler+0x4>

08001e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <UsageFault_Handler+0x4>

08001e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e24:	4802      	ldr	r0, [pc, #8]	@ (8001e30 <DMA1_Stream5_IRQHandler+0x10>)
 8001e26:	f000 fcbd 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200022a8 	.word	0x200022a8

08001e34 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e38:	4802      	ldr	r0, [pc, #8]	@ (8001e44 <DMA1_Stream6_IRQHandler+0x10>)
 8001e3a:	f000 fcb3 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20002308 	.word	0x20002308

08001e48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e4c:	4802      	ldr	r0, [pc, #8]	@ (8001e58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e4e:	f005 fbdf 	bl	8007610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200023f0 	.word	0x200023f0

08001e5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <USART2_IRQHandler+0x10>)
 8001e62:	f005 ffa3 	bl	8007dac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20002260 	.word	0x20002260

08001e70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <OTG_FS_IRQHandler+0x10>)
 8001e76:	f001 fbad 	bl	80035d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20005da8 	.word	0x20005da8

08001e84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return 1;
 8001e88:	2301      	movs	r3, #1
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_kill>:

int _kill(int pid, int sig)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e9e:	f017 f9a1 	bl	80191e4 <__errno>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2216      	movs	r2, #22
 8001ea6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_exit>:

void _exit (int status)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ffe7 	bl	8001e94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec6:	bf00      	nop
 8001ec8:	e7fd      	b.n	8001ec6 <_exit+0x12>

08001eca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e00a      	b.n	8001ef2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001edc:	f3af 8000 	nop.w
 8001ee0:	4601      	mov	r1, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	60ba      	str	r2, [r7, #8]
 8001ee8:	b2ca      	uxtb	r2, r1
 8001eea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	dbf0      	blt.n	8001edc <_read+0x12>
  }

  return len;
 8001efa:	687b      	ldr	r3, [r7, #4]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	e009      	b.n	8001f2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	60ba      	str	r2, [r7, #8]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fdd6 	bl	8000ad0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3301      	adds	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dbf1      	blt.n	8001f16 <_write+0x12>
  }
  return len;
 8001f32:	687b      	ldr	r3, [r7, #4]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_close>:

int _close(int file)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f64:	605a      	str	r2, [r3, #4]
  return 0;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_isatty>:

int _isatty(int file)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fac:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <_sbrk+0x5c>)
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <_sbrk+0x60>)
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb8:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <_sbrk+0x64>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	@ (800200c <_sbrk+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d207      	bcs.n	8001fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd4:	f017 f906 	bl	80191e4 <__errno>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	220c      	movs	r2, #12
 8001fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fe2:	e009      	b.n	8001ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fea:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <_sbrk+0x64>)
 8001ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20020000 	.word	0x20020000
 8002004:	00000400 	.word	0x00000400
 8002008:	2000243c 	.word	0x2000243c
 800200c:	2000ade0 	.word	0x2000ade0

08002010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <SystemInit+0x20>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201a:	4a05      	ldr	r2, [pc, #20]	@ (8002030 <SystemInit+0x20>)
 800201c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002020:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002042:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002044:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002048:	4904      	ldr	r1, [pc, #16]	@ (800205c <cubemx_transport_open+0x28>)
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f005 fe0a 	bl	8007c64 <HAL_UART_Receive_DMA>
    return true;
 8002050:	2301      	movs	r3, #1
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20002440 	.word	0x20002440

08002060 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800206e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f005 fe1c 	bl	8007cae <HAL_UART_DMAStop>
    return true;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002094:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b20      	cmp	r3, #32
 80020a0:	d11c      	bne.n	80020dc <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f005 fd5e 	bl	8007b6c <HAL_UART_Transmit_DMA>
 80020b0:	4603      	mov	r3, r0
 80020b2:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80020b4:	e002      	b.n	80020bc <cubemx_transport_write+0x3c>
            osDelay(1);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f00a fc48 	bl	800c94c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <cubemx_transport_write+0x4e>
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d1f3      	bne.n	80020b6 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <cubemx_transport_write+0x58>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	e002      	b.n	80020de <cubemx_transport_write+0x5e>
 80020d8:	2300      	movs	r3, #0
 80020da:	e000      	b.n	80020de <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80020dc:	2300      	movs	r3, #0
    }
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80020fc:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002102:	b672      	cpsid	i
}
 8002104:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002112:	4a1c      	ldr	r2, [pc, #112]	@ (8002184 <cubemx_transport_read+0x9c>)
 8002114:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002116:	b662      	cpsie	i
}
 8002118:	bf00      	nop
        __enable_irq();
        ms_used++;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3301      	adds	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002120:	2001      	movs	r0, #1
 8002122:	f00a fc13 	bl	800c94c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002126:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <cubemx_transport_read+0xa0>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b16      	ldr	r3, [pc, #88]	@ (8002184 <cubemx_transport_read+0x9c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d103      	bne.n	800213a <cubemx_transport_read+0x52>
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	dbe3      	blt.n	8002102 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800213e:	e011      	b.n	8002164 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002140:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <cubemx_transport_read+0xa0>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	440b      	add	r3, r1
 800214a:	4910      	ldr	r1, [pc, #64]	@ (800218c <cubemx_transport_read+0xa4>)
 800214c:	5c8a      	ldrb	r2, [r1, r2]
 800214e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002150:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <cubemx_transport_read+0xa0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800215a:	4a0b      	ldr	r2, [pc, #44]	@ (8002188 <cubemx_transport_read+0xa0>)
 800215c:	6013      	str	r3, [r2, #0]
        wrote++;
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	3301      	adds	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002164:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <cubemx_transport_read+0xa0>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <cubemx_transport_read+0x9c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d003      	beq.n	8002178 <cubemx_transport_read+0x90>
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	429a      	cmp	r2, r3
 8002176:	d3e3      	bcc.n	8002140 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002178:	69bb      	ldr	r3, [r7, #24]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20002c44 	.word	0x20002c44
 8002188:	20002c40 	.word	0x20002c40
 800218c:	20002440 	.word	0x20002440

08002190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002190:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002194:	f7ff ff3c 	bl	8002010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002198:	480c      	ldr	r0, [pc, #48]	@ (80021cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800219a:	490d      	ldr	r1, [pc, #52]	@ (80021d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800219c:	4a0d      	ldr	r2, [pc, #52]	@ (80021d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021b0:	4c0a      	ldr	r4, [pc, #40]	@ (80021dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021be:	f017 f817 	bl	80191f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021c2:	f7fe fee5 	bl	8000f90 <main>
  bx  lr    
 80021c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d0:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 80021d4:	0801ab28 	.word	0x0801ab28
  ldr r2, =_sbss
 80021d8:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 80021dc:	2000addc 	.word	0x2000addc

080021e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC_IRQHandler>
	...

080021e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <HAL_Init+0x40>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <HAL_Init+0x40>)
 80021ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <HAL_Init+0x40>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <HAL_Init+0x40>)
 80021fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002200:	4b08      	ldr	r3, [pc, #32]	@ (8002224 <HAL_Init+0x40>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a07      	ldr	r2, [pc, #28]	@ (8002224 <HAL_Init+0x40>)
 8002206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800220a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800220c:	2003      	movs	r0, #3
 800220e:	f000 f8fc 	bl	800240a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002212:	200f      	movs	r0, #15
 8002214:	f7ff fd74 	bl	8001d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002218:	f7ff fb7e 	bl	8001918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023c00 	.word	0x40023c00

08002228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_IncTick+0x20>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_IncTick+0x24>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4413      	add	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	@ (800224c <HAL_IncTick+0x24>)
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000010 	.word	0x20000010
 800224c:	20002c48 	.word	0x20002c48

08002250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return uwTick;
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_GetTick+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20002c48 	.word	0x20002c48

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff ffee 	bl	8002250 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002280:	d005      	beq.n	800228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002282:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <HAL_Delay+0x44>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800228e:	bf00      	nop
 8002290:	f7ff ffde 	bl	8002250 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d8f7      	bhi.n	8002290 <HAL_Delay+0x28>
  {
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000010 	.word	0x20000010

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4907      	ldr	r1, [pc, #28]	@ (800234c <__NVIC_EnableIRQ+0x38>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	@ (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	@ (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	@ 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff4c 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002432:	f7ff ff61 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 8002436:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	6978      	ldr	r0, [r7, #20]
 800243e:	f7ff ffb1 	bl	80023a4 <NVIC_EncodePriority>
 8002442:	4602      	mov	r2, r0
 8002444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff80 	bl	8002350 <__NVIC_SetPriority>
}
 8002450:	bf00      	nop
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ff54 	bl	8002314 <__NVIC_EnableIRQ>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002480:	f7ff fee6 	bl	8002250 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e099      	b.n	80025c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b0:	e00f      	b.n	80024d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024b2:	f7ff fecd 	bl	8002250 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d908      	bls.n	80024d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2220      	movs	r2, #32
 80024c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2203      	movs	r2, #3
 80024ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e078      	b.n	80025c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e8      	bne.n	80024b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4b38      	ldr	r3, [pc, #224]	@ (80025cc <HAL_DMA_Init+0x158>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	2b04      	cmp	r3, #4
 800252a:	d107      	bne.n	800253c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002534:	4313      	orrs	r3, r2
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f023 0307 	bic.w	r3, r3, #7
 8002552:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	2b04      	cmp	r3, #4
 8002564:	d117      	bne.n	8002596 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00e      	beq.n	8002596 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fb01 	bl	8002b80 <DMA_CheckFifoParam>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2240      	movs	r2, #64	@ 0x40
 8002588:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002592:	2301      	movs	r3, #1
 8002594:	e016      	b.n	80025c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fab8 	bl	8002b14 <DMA_CalcBaseAndBitshift>
 80025a4:	4603      	mov	r3, r0
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ac:	223f      	movs	r2, #63	@ 0x3f
 80025ae:	409a      	lsls	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	f010803f 	.word	0xf010803f

080025d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_DMA_Start_IT+0x26>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e040      	b.n	8002678 <HAL_DMA_Start_IT+0xa8>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d12f      	bne.n	800266a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2202      	movs	r2, #2
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fa4a 	bl	8002ab8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002628:	223f      	movs	r2, #63	@ 0x3f
 800262a:	409a      	lsls	r2, r3
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0216 	orr.w	r2, r2, #22
 800263e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0208 	orr.w	r2, r2, #8
 8002656:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e005      	b.n	8002676 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002672:	2302      	movs	r3, #2
 8002674:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002676:	7dfb      	ldrb	r3, [r7, #23]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800268e:	f7ff fddf 	bl	8002250 <HAL_GetTick>
 8002692:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d008      	beq.n	80026b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2280      	movs	r2, #128	@ 0x80
 80026a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e052      	b.n	8002758 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0216 	bic.w	r2, r2, #22
 80026c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <HAL_DMA_Abort+0x62>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0208 	bic.w	r2, r2, #8
 80026f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002702:	e013      	b.n	800272c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002704:	f7ff fda4 	bl	8002250 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b05      	cmp	r3, #5
 8002710:	d90c      	bls.n	800272c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2203      	movs	r2, #3
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e015      	b.n	8002758 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1e4      	bne.n	8002704 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273e:	223f      	movs	r2, #63	@ 0x3f
 8002740:	409a      	lsls	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d004      	beq.n	800277e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2280      	movs	r2, #128	@ 0x80
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e00c      	b.n	8002798 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2205      	movs	r2, #5
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027b0:	4b8e      	ldr	r3, [pc, #568]	@ (80029ec <HAL_DMA_IRQHandler+0x248>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a8e      	ldr	r2, [pc, #568]	@ (80029f0 <HAL_DMA_IRQHandler+0x24c>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0a9b      	lsrs	r3, r3, #10
 80027bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ce:	2208      	movs	r2, #8
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01a      	beq.n	8002810 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0204 	bic.w	r2, r2, #4
 80027f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fc:	2208      	movs	r2, #8
 80027fe:	409a      	lsls	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002814:	2201      	movs	r2, #1
 8002816:	409a      	lsls	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d012      	beq.n	8002846 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002832:	2201      	movs	r2, #1
 8002834:	409a      	lsls	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283e:	f043 0202 	orr.w	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284a:	2204      	movs	r2, #4
 800284c:	409a      	lsls	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002868:	2204      	movs	r2, #4
 800286a:	409a      	lsls	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002874:	f043 0204 	orr.w	r2, r3, #4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002880:	2210      	movs	r2, #16
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d043      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d03c      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289e:	2210      	movs	r2, #16
 80028a0:	409a      	lsls	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d018      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d108      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d024      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	4798      	blx	r3
 80028d2:	e01f      	b.n	8002914 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01b      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
 80028e4:	e016      	b.n	8002914 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0208 	bic.w	r2, r2, #8
 8002902:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002918:	2220      	movs	r2, #32
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 808f 	beq.w	8002a44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8087 	beq.w	8002a44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293a:	2220      	movs	r2, #32
 800293c:	409a      	lsls	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b05      	cmp	r3, #5
 800294c:	d136      	bne.n	80029bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0216 	bic.w	r2, r2, #22
 800295c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800296c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <HAL_DMA_IRQHandler+0x1da>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800297a:	2b00      	cmp	r3, #0
 800297c:	d007      	beq.n	800298e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0208 	bic.w	r2, r2, #8
 800298c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002992:	223f      	movs	r2, #63	@ 0x3f
 8002994:	409a      	lsls	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d07e      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	4798      	blx	r3
        }
        return;
 80029ba:	e079      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01d      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10d      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d031      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
 80029e8:	e02c      	b.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
 80029ea:	bf00      	nop
 80029ec:	20000008 	.word	0x20000008
 80029f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d023      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
 8002a04:	e01e      	b.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10f      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0210 	bic.w	r2, r2, #16
 8002a22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d032      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d022      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	3301      	adds	r3, #1
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d307      	bcc.n	8002a8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f2      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x2cc>
 8002a8a:	e000      	b.n	8002a8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
 8002aae:	e000      	b.n	8002ab2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ab0:	bf00      	nop
    }
  }
}
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b40      	cmp	r3, #64	@ 0x40
 8002ae4:	d108      	bne.n	8002af8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002af6:	e007      	b.n	8002b08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	60da      	str	r2, [r3, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3b10      	subs	r3, #16
 8002b24:	4a14      	ldr	r2, [pc, #80]	@ (8002b78 <DMA_CalcBaseAndBitshift+0x64>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b2e:	4a13      	ldr	r2, [pc, #76]	@ (8002b7c <DMA_CalcBaseAndBitshift+0x68>)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d909      	bls.n	8002b56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	1d1a      	adds	r2, r3, #4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b54:	e007      	b.n	8002b66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	aaaaaaab 	.word	0xaaaaaaab
 8002b7c:	0801a0d8 	.word	0x0801a0d8

08002b80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d11f      	bne.n	8002bda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d856      	bhi.n	8002c4e <DMA_CheckFifoParam+0xce>
 8002ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba8 <DMA_CheckFifoParam+0x28>)
 8002ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba6:	bf00      	nop
 8002ba8:	08002bb9 	.word	0x08002bb9
 8002bac:	08002bcb 	.word	0x08002bcb
 8002bb0:	08002bb9 	.word	0x08002bb9
 8002bb4:	08002c4f 	.word	0x08002c4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d046      	beq.n	8002c52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc8:	e043      	b.n	8002c52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bd2:	d140      	bne.n	8002c56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd8:	e03d      	b.n	8002c56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002be2:	d121      	bne.n	8002c28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d837      	bhi.n	8002c5a <DMA_CheckFifoParam+0xda>
 8002bea:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf0 <DMA_CheckFifoParam+0x70>)
 8002bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf0:	08002c01 	.word	0x08002c01
 8002bf4:	08002c07 	.word	0x08002c07
 8002bf8:	08002c01 	.word	0x08002c01
 8002bfc:	08002c19 	.word	0x08002c19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      break;
 8002c04:	e030      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d025      	beq.n	8002c5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c16:	e022      	b.n	8002c5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c20:	d11f      	bne.n	8002c62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c26:	e01c      	b.n	8002c62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d903      	bls.n	8002c36 <DMA_CheckFifoParam+0xb6>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d003      	beq.n	8002c3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c34:	e018      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3a:	e015      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00e      	beq.n	8002c66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4c:	e00b      	b.n	8002c66 <DMA_CheckFifoParam+0xe6>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e00a      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      break;
 8002c52:	bf00      	nop
 8002c54:	e008      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      break;
 8002c56:	bf00      	nop
 8002c58:	e006      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e004      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e002      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c62:	bf00      	nop
 8002c64:	e000      	b.n	8002c68 <DMA_CheckFifoParam+0xe8>
      break;
 8002c66:	bf00      	nop
    }
  } 
  
  return status; 
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	@ 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	e16b      	b.n	8002f6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c94:	2201      	movs	r2, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	f040 815a 	bne.w	8002f66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d005      	beq.n	8002cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d130      	bne.n	8002d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d00:	2201      	movs	r2, #1
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 0201 	and.w	r2, r3, #1
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d017      	beq.n	8002d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d123      	bne.n	8002dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	08da      	lsrs	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3208      	adds	r2, #8
 8002d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	08da      	lsrs	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3208      	adds	r2, #8
 8002db6:	69b9      	ldr	r1, [r7, #24]
 8002db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0203 	and.w	r2, r3, #3
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80b4 	beq.w	8002f66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b60      	ldr	r3, [pc, #384]	@ (8002f84 <HAL_GPIO_Init+0x30c>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e06:	4a5f      	ldr	r2, [pc, #380]	@ (8002f84 <HAL_GPIO_Init+0x30c>)
 8002e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002f84 <HAL_GPIO_Init+0x30c>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002f88 <HAL_GPIO_Init+0x310>)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	3302      	adds	r3, #2
 8002e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	220f      	movs	r2, #15
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a52      	ldr	r2, [pc, #328]	@ (8002f8c <HAL_GPIO_Init+0x314>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d02b      	beq.n	8002e9e <HAL_GPIO_Init+0x226>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a51      	ldr	r2, [pc, #324]	@ (8002f90 <HAL_GPIO_Init+0x318>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d025      	beq.n	8002e9a <HAL_GPIO_Init+0x222>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a50      	ldr	r2, [pc, #320]	@ (8002f94 <HAL_GPIO_Init+0x31c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01f      	beq.n	8002e96 <HAL_GPIO_Init+0x21e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a4f      	ldr	r2, [pc, #316]	@ (8002f98 <HAL_GPIO_Init+0x320>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d019      	beq.n	8002e92 <HAL_GPIO_Init+0x21a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a4e      	ldr	r2, [pc, #312]	@ (8002f9c <HAL_GPIO_Init+0x324>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_GPIO_Init+0x216>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4d      	ldr	r2, [pc, #308]	@ (8002fa0 <HAL_GPIO_Init+0x328>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00d      	beq.n	8002e8a <HAL_GPIO_Init+0x212>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4c      	ldr	r2, [pc, #304]	@ (8002fa4 <HAL_GPIO_Init+0x32c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <HAL_GPIO_Init+0x20e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4b      	ldr	r2, [pc, #300]	@ (8002fa8 <HAL_GPIO_Init+0x330>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <HAL_GPIO_Init+0x20a>
 8002e7e:	2307      	movs	r3, #7
 8002e80:	e00e      	b.n	8002ea0 <HAL_GPIO_Init+0x228>
 8002e82:	2308      	movs	r3, #8
 8002e84:	e00c      	b.n	8002ea0 <HAL_GPIO_Init+0x228>
 8002e86:	2306      	movs	r3, #6
 8002e88:	e00a      	b.n	8002ea0 <HAL_GPIO_Init+0x228>
 8002e8a:	2305      	movs	r3, #5
 8002e8c:	e008      	b.n	8002ea0 <HAL_GPIO_Init+0x228>
 8002e8e:	2304      	movs	r3, #4
 8002e90:	e006      	b.n	8002ea0 <HAL_GPIO_Init+0x228>
 8002e92:	2303      	movs	r3, #3
 8002e94:	e004      	b.n	8002ea0 <HAL_GPIO_Init+0x228>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e002      	b.n	8002ea0 <HAL_GPIO_Init+0x228>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_GPIO_Init+0x228>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	f002 0203 	and.w	r2, r2, #3
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	4093      	lsls	r3, r2
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eb0:	4935      	ldr	r1, [pc, #212]	@ (8002f88 <HAL_GPIO_Init+0x310>)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8002fac <HAL_GPIO_Init+0x334>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ee2:	4a32      	ldr	r2, [pc, #200]	@ (8002fac <HAL_GPIO_Init+0x334>)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee8:	4b30      	ldr	r3, [pc, #192]	@ (8002fac <HAL_GPIO_Init+0x334>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f0c:	4a27      	ldr	r2, [pc, #156]	@ (8002fac <HAL_GPIO_Init+0x334>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f12:	4b26      	ldr	r3, [pc, #152]	@ (8002fac <HAL_GPIO_Init+0x334>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f36:	4a1d      	ldr	r2, [pc, #116]	@ (8002fac <HAL_GPIO_Init+0x334>)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fac <HAL_GPIO_Init+0x334>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f60:	4a12      	ldr	r2, [pc, #72]	@ (8002fac <HAL_GPIO_Init+0x334>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	f67f ae90 	bls.w	8002c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3724      	adds	r7, #36	@ 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40020000 	.word	0x40020000
 8002f90:	40020400 	.word	0x40020400
 8002f94:	40020800 	.word	0x40020800
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40021400 	.word	0x40021400
 8002fa4:	40021800 	.word	0x40021800
 8002fa8:	40021c00 	.word	0x40021c00
 8002fac:	40013c00 	.word	0x40013c00

08002fb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
 8002fcc:	e001      	b.n	8002fd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
 8002fec:	4613      	mov	r3, r2
 8002fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff0:	787b      	ldrb	r3, [r7, #1]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ffc:	e003      	b.n	8003006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	041a      	lsls	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	619a      	str	r2, [r3, #24]
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af02      	add	r7, sp, #8
 8003018:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e059      	b.n	80030d8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f00c fbee 	bl	800f820 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2203      	movs	r2, #3
 8003048:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003052:	d102      	bne.n	800305a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f006 f88f 	bl	8009182 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	7c1a      	ldrb	r2, [r3, #16]
 800306c:	f88d 2000 	strb.w	r2, [sp]
 8003070:	3304      	adds	r3, #4
 8003072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003074:	f006 f810 	bl	8009098 <USB_CoreInit>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e026      	b.n	80030d8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2101      	movs	r1, #1
 8003090:	4618      	mov	r0, r3
 8003092:	f006 f887 	bl	80091a4 <USB_SetCurrentMode>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e017      	b.n	80030d8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	7c1a      	ldrb	r2, [r3, #16]
 80030b0:	f88d 2000 	strb.w	r2, [sp]
 80030b4:	3304      	adds	r3, #4
 80030b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b8:	f006 fa30 	bl	800951c <USB_HostInit>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2202      	movs	r2, #2
 80030c6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e004      	b.n	80030d8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b08b      	sub	sp, #44	@ 0x2c
 80030e4:	af04      	add	r7, sp, #16
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	4608      	mov	r0, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4603      	mov	r3, r0
 80030f0:	70fb      	strb	r3, [r7, #3]
 80030f2:	460b      	mov	r3, r1
 80030f4:	70bb      	strb	r3, [r7, #2]
 80030f6:	4613      	mov	r3, r2
 80030f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80030fa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80030fc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_HCD_HC_Init+0x2c>
 8003108:	2302      	movs	r3, #2
 800310a:	e09d      	b.n	8003248 <HAL_HCD_HC_Init+0x168>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3319      	adds	r3, #25
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	3314      	adds	r3, #20
 8003138:	787a      	ldrb	r2, [r7, #1]
 800313a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3315      	adds	r3, #21
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3326      	adds	r3, #38	@ 0x26
 8003160:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003164:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	78bb      	ldrb	r3, [r7, #2]
 800316a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800316e:	b2d8      	uxtb	r0, r3
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3316      	adds	r3, #22
 800317e:	4602      	mov	r2, r0
 8003180:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	4619      	mov	r1, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fbc8 	bl	800391c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800318c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003190:	2b00      	cmp	r3, #0
 8003192:	da0a      	bge.n	80031aa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3317      	adds	r3, #23
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	e009      	b.n	80031be <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	3317      	adds	r3, #23
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f006 fb0e 	bl	80097e4 <USB_GetHostSpeed>
 80031c8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80031ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d10b      	bne.n	80031ea <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80031d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d107      	bne.n	80031ea <HAL_HCD_HC_Init+0x10a>
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d104      	bne.n	80031ea <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2bbc      	cmp	r3, #188	@ 0xbc
 80031e4:	d901      	bls.n	80031ea <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80031e6:	23bc      	movs	r3, #188	@ 0xbc
 80031e8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3318      	adds	r3, #24
 80031fa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80031fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	b298      	uxth	r0, r3
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	3328      	adds	r3, #40	@ 0x28
 8003214:	4602      	mov	r2, r0
 8003216:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	b29b      	uxth	r3, r3
 8003220:	787c      	ldrb	r4, [r7, #1]
 8003222:	78ba      	ldrb	r2, [r7, #2]
 8003224:	78f9      	ldrb	r1, [r7, #3]
 8003226:	9302      	str	r3, [sp, #8]
 8003228:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	4623      	mov	r3, r4
 8003236:	f006 fafd 	bl	8009834 <USB_HC_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
}
 8003248:	4618      	mov	r0, r3
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	bd90      	pop	{r4, r7, pc}

08003250 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_HCD_HC_Halt+0x1e>
 800326a:	2302      	movs	r3, #2
 800326c:	e00f      	b.n	800328e <HAL_HCD_HC_Halt+0x3e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f006 fe8f 	bl	8009fa2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800328c:	7bfb      	ldrb	r3, [r7, #15]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	4608      	mov	r0, r1
 80032a2:	4611      	mov	r1, r2
 80032a4:	461a      	mov	r2, r3
 80032a6:	4603      	mov	r3, r0
 80032a8:	70fb      	strb	r3, [r7, #3]
 80032aa:	460b      	mov	r3, r1
 80032ac:	70bb      	strb	r3, [r7, #2]
 80032ae:	4613      	mov	r3, r2
 80032b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	3317      	adds	r3, #23
 80032c2:	78ba      	ldrb	r2, [r7, #2]
 80032c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	3326      	adds	r3, #38	@ 0x26
 80032d6:	787a      	ldrb	r2, [r7, #1]
 80032d8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80032da:	7c3b      	ldrb	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d114      	bne.n	800330a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	332a      	adds	r3, #42	@ 0x2a
 80032f0:	2203      	movs	r2, #3
 80032f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	3319      	adds	r3, #25
 8003304:	7f3a      	ldrb	r2, [r7, #28]
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	e009      	b.n	800331e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	332a      	adds	r3, #42	@ 0x2a
 800331a:	2202      	movs	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800331e:	787b      	ldrb	r3, [r7, #1]
 8003320:	2b03      	cmp	r3, #3
 8003322:	f200 8102 	bhi.w	800352a <HAL_HCD_HC_SubmitRequest+0x292>
 8003326:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	0800333d 	.word	0x0800333d
 8003330:	08003515 	.word	0x08003515
 8003334:	08003401 	.word	0x08003401
 8003338:	0800348b 	.word	0x0800348b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800333c:	7c3b      	ldrb	r3, [r7, #16]
 800333e:	2b01      	cmp	r3, #1
 8003340:	f040 80f5 	bne.w	800352e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003344:	78bb      	ldrb	r3, [r7, #2]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d12d      	bne.n	80033a6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800334a:	8b3b      	ldrh	r3, [r7, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	333d      	adds	r3, #61	@ 0x3d
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	333d      	adds	r3, #61	@ 0x3d
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	332a      	adds	r3, #42	@ 0x2a
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800338e:	e0ce      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	332a      	adds	r3, #42	@ 0x2a
 80033a0:	2202      	movs	r2, #2
 80033a2:	701a      	strb	r2, [r3, #0]
      break;
 80033a4:	e0c3      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	331a      	adds	r3, #26
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	f040 80b8 	bne.w	800352e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	333c      	adds	r3, #60	@ 0x3c
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	332a      	adds	r3, #42	@ 0x2a
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
      break;
 80033e8:	e0a1      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	332a      	adds	r3, #42	@ 0x2a
 80033fa:	2202      	movs	r2, #2
 80033fc:	701a      	strb	r2, [r3, #0]
      break;
 80033fe:	e096      	b.n	800352e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003400:	78bb      	ldrb	r3, [r7, #2]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d120      	bne.n	8003448 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	333d      	adds	r3, #61	@ 0x3d
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	332a      	adds	r3, #42	@ 0x2a
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003430:	e07e      	b.n	8003530 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	332a      	adds	r3, #42	@ 0x2a
 8003442:	2202      	movs	r2, #2
 8003444:	701a      	strb	r2, [r3, #0]
      break;
 8003446:	e073      	b.n	8003530 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	333c      	adds	r3, #60	@ 0x3c
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	332a      	adds	r3, #42	@ 0x2a
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
      break;
 8003472:	e05d      	b.n	8003530 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	332a      	adds	r3, #42	@ 0x2a
 8003484:	2202      	movs	r2, #2
 8003486:	701a      	strb	r2, [r3, #0]
      break;
 8003488:	e052      	b.n	8003530 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800348a:	78bb      	ldrb	r3, [r7, #2]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d120      	bne.n	80034d2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	333d      	adds	r3, #61	@ 0x3d
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	332a      	adds	r3, #42	@ 0x2a
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034ba:	e039      	b.n	8003530 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	332a      	adds	r3, #42	@ 0x2a
 80034cc:	2202      	movs	r2, #2
 80034ce:	701a      	strb	r2, [r3, #0]
      break;
 80034d0:	e02e      	b.n	8003530 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	333c      	adds	r3, #60	@ 0x3c
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	332a      	adds	r3, #42	@ 0x2a
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
      break;
 80034fc:	e018      	b.n	8003530 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	332a      	adds	r3, #42	@ 0x2a
 800350e:	2202      	movs	r2, #2
 8003510:	701a      	strb	r2, [r3, #0]
      break;
 8003512:	e00d      	b.n	8003530 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	332a      	adds	r3, #42	@ 0x2a
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
      break;
 8003528:	e002      	b.n	8003530 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800352e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	332c      	adds	r3, #44	@ 0x2c
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	8b39      	ldrh	r1, [r7, #24]
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4403      	add	r3, r0
 8003554:	3334      	adds	r3, #52	@ 0x34
 8003556:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	334c      	adds	r3, #76	@ 0x4c
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3338      	adds	r3, #56	@ 0x38
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3315      	adds	r3, #21
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003594:	78fa      	ldrb	r2, [r7, #3]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	334d      	adds	r3, #77	@ 0x4d
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	3310      	adds	r3, #16
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	4413      	add	r3, r2
 80035bc:	1d19      	adds	r1, r3, #4
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	799b      	ldrb	r3, [r3, #6]
 80035c2:	461a      	mov	r2, r3
 80035c4:	f006 fa62 	bl	8009a8c <USB_HC_StartXfer>
 80035c8:	4603      	mov	r3, r0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop

080035d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f005 ff50 	bl	8009490 <USB_GetMode>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	f040 80fb 	bne.w	80037ee <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f005 ff13 	bl	8009428 <USB_ReadInterrupts>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80f1 	beq.w	80037ec <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f005 ff0a 	bl	8009428 <USB_ReadInterrupts>
 8003614:	4603      	mov	r3, r0
 8003616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800361a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800361e:	d104      	bne.n	800362a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003628:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f005 fefa 	bl	8009428 <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800363a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800363e:	d104      	bne.n	800364a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003648:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f005 feea 	bl	8009428 <USB_ReadInterrupts>
 8003654:	4603      	mov	r3, r0
 8003656:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800365a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800365e:	d104      	bne.n	800366a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003668:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f005 feda 	bl	8009428 <USB_ReadInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d103      	bne.n	8003686 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2202      	movs	r2, #2
 8003684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f005 fecc 	bl	8009428 <USB_ReadInterrupts>
 8003690:	4603      	mov	r3, r0
 8003692:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800369a:	d120      	bne.n	80036de <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80036a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d113      	bne.n	80036de <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80036b6:	2110      	movs	r1, #16
 80036b8:	6938      	ldr	r0, [r7, #16]
 80036ba:	f005 fdbf 	bl	800923c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80036be:	6938      	ldr	r0, [r7, #16]
 80036c0:	f005 fdee 	bl	80092a0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7a5b      	ldrb	r3, [r3, #9]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d105      	bne.n	80036d8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2101      	movs	r1, #1
 80036d2:	4618      	mov	r0, r3
 80036d4:	f005 ffe6 	bl	80096a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f00c f91f 	bl	800f91c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f005 fea0 	bl	8009428 <USB_ReadInterrupts>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036f2:	d102      	bne.n	80036fa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f001 fd4d 	bl	8005194 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f005 fe92 	bl	8009428 <USB_ReadInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b08      	cmp	r3, #8
 800370c:	d106      	bne.n	800371c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f00c f8e8 	bl	800f8e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2208      	movs	r2, #8
 800371a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f005 fe81 	bl	8009428 <USB_ReadInterrupts>
 8003726:	4603      	mov	r3, r0
 8003728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003730:	d139      	bne.n	80037a6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f006 fc22 	bl	8009f80 <USB_HC_ReadInterrupt>
 800373c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e025      	b.n	8003790 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d018      	beq.n	800378a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800376a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800376e:	d106      	bne.n	800377e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f905 	bl	8003986 <HCD_HC_IN_IRQHandler>
 800377c:	e005      	b.n	800378a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	4619      	mov	r1, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 ff67 	bl	8004658 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	3301      	adds	r3, #1
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	795b      	ldrb	r3, [r3, #5]
 8003794:	461a      	mov	r2, r3
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	4293      	cmp	r3, r2
 800379a:	d3d3      	bcc.n	8003744 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f005 fe3c 	bl	8009428 <USB_ReadInterrupts>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d101      	bne.n	80037be <HAL_HCD_IRQHandler+0x1ea>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <HAL_HCD_IRQHandler+0x1ec>
 80037be:	2300      	movs	r3, #0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d014      	beq.n	80037ee <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0210 	bic.w	r2, r2, #16
 80037d2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f001 fbfe 	bl	8004fd6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0210 	orr.w	r2, r2, #16
 80037e8:	619a      	str	r2, [r3, #24]
 80037ea:	e000      	b.n	80037ee <HAL_HCD_IRQHandler+0x21a>
      return;
 80037ec:	bf00      	nop
    }
  }
}
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_HCD_Start+0x16>
 8003806:	2302      	movs	r3, #2
 8003808:	e013      	b.n	8003832 <HAL_HCD_Start+0x3e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2101      	movs	r1, #1
 8003818:	4618      	mov	r0, r3
 800381a:	f005 ffaa 	bl	8009772 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f005 fc9c 	bl	8009160 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_HCD_Stop+0x16>
 800384c:	2302      	movs	r3, #2
 800384e:	e00d      	b.n	800386c <HAL_HCD_Stop+0x32>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f006 fcfd 	bl	800a25c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f005 ff4c 	bl	800971e <USB_ResetPort>
 8003886:	4603      	mov	r3, r0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	334c      	adds	r3, #76	@ 0x4c
 80038ac:	781b      	ldrb	r3, [r3, #0]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	460b      	mov	r3, r1
 80038c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	3338      	adds	r3, #56	@ 0x38
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f005 ff8e 	bl	8009812 <USB_GetCurrentFrame>
 80038f6:	4603      	mov	r3, r0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f005 ff69 	bl	80097e4 <USB_GetHostSpeed>
 8003912:	4603      	mov	r3, r0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	331a      	adds	r3, #26
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	331b      	adds	r3, #27
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	3325      	adds	r3, #37	@ 0x25
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	3324      	adds	r3, #36	@ 0x24
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	460b      	mov	r3, r1
 8003990:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f005 fd52 	bl	800944e <USB_ReadChInterrupts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d11a      	bne.n	80039ea <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c0:	461a      	mov	r2, r3
 80039c2:	2304      	movs	r3, #4
 80039c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	334d      	adds	r3, #77	@ 0x4d
 80039d6:	2207      	movs	r2, #7
 80039d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f006 fadd 	bl	8009fa2 <USB_HC_Halt>
 80039e8:	e09e      	b.n	8003b28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f005 fd2b 	bl	800944e <USB_ReadChInterrupts>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a02:	d11b      	bne.n	8003a3c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a10:	461a      	mov	r2, r3
 8003a12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	334d      	adds	r3, #77	@ 0x4d
 8003a28:	2208      	movs	r2, #8
 8003a2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f006 fab4 	bl	8009fa2 <USB_HC_Halt>
 8003a3a:	e075      	b.n	8003b28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	4611      	mov	r1, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f005 fd02 	bl	800944e <USB_ReadChInterrupts>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d11a      	bne.n	8003a8a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a60:	461a      	mov	r2, r3
 8003a62:	2308      	movs	r3, #8
 8003a64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	334d      	adds	r3, #77	@ 0x4d
 8003a76:	2206      	movs	r2, #6
 8003a78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f006 fa8d 	bl	8009fa2 <USB_HC_Halt>
 8003a88:	e04e      	b.n	8003b28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f005 fcdb 	bl	800944e <USB_ReadChInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa2:	d11b      	bne.n	8003adc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ab6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	334d      	adds	r3, #77	@ 0x4d
 8003ac8:	2209      	movs	r2, #9
 8003aca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f006 fa64 	bl	8009fa2 <USB_HC_Halt>
 8003ada:	e025      	b.n	8003b28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f005 fcb2 	bl	800944e <USB_ReadChInterrupts>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af0:	2b80      	cmp	r3, #128	@ 0x80
 8003af2:	d119      	bne.n	8003b28 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b00:	461a      	mov	r2, r3
 8003b02:	2380      	movs	r3, #128	@ 0x80
 8003b04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b06:	78fa      	ldrb	r2, [r7, #3]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	334d      	adds	r3, #77	@ 0x4d
 8003b16:	2207      	movs	r2, #7
 8003b18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f006 fa3d 	bl	8009fa2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f005 fc8c 	bl	800944e <USB_ReadChInterrupts>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b40:	d112      	bne.n	8003b68 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f006 fa29 	bl	8009fa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b62:	6093      	str	r3, [r2, #8]
 8003b64:	f000 bd75 	b.w	8004652 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f005 fc6c 	bl	800944e <USB_ReadChInterrupts>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	f040 8128 	bne.w	8003dd2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2320      	movs	r3, #32
 8003b92:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	331b      	adds	r3, #27
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d119      	bne.n	8003bde <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	331b      	adds	r3, #27
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	0151      	lsls	r1, r2, #5
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	440a      	add	r2, r1
 8003bd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bdc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	799b      	ldrb	r3, [r3, #6]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01b      	beq.n	8003c1e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	3330      	adds	r3, #48	@ 0x30
 8003bf6:	6819      	ldr	r1, [r3, #0]
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	1ac9      	subs	r1, r1, r3
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4403      	add	r3, r0
 8003c1a:	3338      	adds	r3, #56	@ 0x38
 8003c1c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	334d      	adds	r3, #77	@ 0x4d
 8003c2e:	2201      	movs	r2, #1
 8003c30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	3344      	adds	r3, #68	@ 0x44
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c52:	461a      	mov	r2, r3
 8003c54:	2301      	movs	r3, #1
 8003c56:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	3326      	adds	r3, #38	@ 0x26
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	3326      	adds	r3, #38	@ 0x26
 8003c7e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d110      	bne.n	8003ca6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f006 f988 	bl	8009fa2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	6093      	str	r3, [r2, #8]
 8003ca4:	e03d      	b.n	8003d22 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3326      	adds	r3, #38	@ 0x26
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d00a      	beq.n	8003cd2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	3326      	adds	r3, #38	@ 0x26
 8003ccc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d127      	bne.n	8003d22 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	0151      	lsls	r1, r2, #5
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	440a      	add	r2, r1
 8003ce8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003cec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003cf0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	1a9b      	subs	r3, r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	334c      	adds	r3, #76	@ 0x4c
 8003d02:	2201      	movs	r2, #1
 8003d04:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	334c      	adds	r3, #76	@ 0x4c
 8003d16:	781a      	ldrb	r2, [r3, #0]
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f00b fe0b 	bl	800f938 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	799b      	ldrb	r3, [r3, #6]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d13b      	bne.n	8003da2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	3338      	adds	r3, #56	@ 0x38
 8003d3a:	6819      	ldr	r1, [r3, #0]
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4403      	add	r3, r0
 8003d4a:	3328      	adds	r3, #40	@ 0x28
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	440b      	add	r3, r1
 8003d50:	1e59      	subs	r1, r3, #1
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4403      	add	r3, r0
 8003d60:	3328      	adds	r3, #40	@ 0x28
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8470 	beq.w	8004652 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	333c      	adds	r3, #60	@ 0x3c
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	f083 0301 	eor.w	r3, r3, #1
 8003d8a:	b2d8      	uxtb	r0, r3
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	333c      	adds	r3, #60	@ 0x3c
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	f000 bc58 	b.w	8004652 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	333c      	adds	r3, #60	@ 0x3c
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	78fa      	ldrb	r2, [r7, #3]
 8003db6:	f083 0301 	eor.w	r3, r3, #1
 8003dba:	b2d8      	uxtb	r0, r3
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	333c      	adds	r3, #60	@ 0x3c
 8003dca:	4602      	mov	r2, r0
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	f000 bc40 	b.w	8004652 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f005 fb37 	bl	800944e <USB_ReadChInterrupts>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d131      	bne.n	8003e4e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df6:	461a      	mov	r2, r3
 8003df8:	2320      	movs	r3, #32
 8003dfa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	331a      	adds	r3, #26
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	f040 841f 	bne.w	8004652 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003e14:	78fa      	ldrb	r2, [r7, #3]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	331b      	adds	r3, #27
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	334d      	adds	r3, #77	@ 0x4d
 8003e38:	2203      	movs	r2, #3
 8003e3a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f006 f8ac 	bl	8009fa2 <USB_HC_Halt>
 8003e4a:	f000 bc02 	b.w	8004652 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f005 faf9 	bl	800944e <USB_ReadChInterrupts>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	f040 8305 	bne.w	8004472 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e74:	461a      	mov	r2, r3
 8003e76:	2302      	movs	r3, #2
 8003e78:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	334d      	adds	r3, #77	@ 0x4d
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d114      	bne.n	8003eba <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	334d      	adds	r3, #77	@ 0x4d
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	334c      	adds	r3, #76	@ 0x4c
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
 8003eb8:	e2cc      	b.n	8004454 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	334d      	adds	r3, #77	@ 0x4d
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b06      	cmp	r3, #6
 8003ece:	d114      	bne.n	8003efa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	334d      	adds	r3, #77	@ 0x4d
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	334c      	adds	r3, #76	@ 0x4c
 8003ef4:	2205      	movs	r2, #5
 8003ef6:	701a      	strb	r2, [r3, #0]
 8003ef8:	e2ac      	b.n	8004454 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	334d      	adds	r3, #77	@ 0x4d
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b07      	cmp	r3, #7
 8003f0e:	d00b      	beq.n	8003f28 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	334d      	adds	r3, #77	@ 0x4d
 8003f20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f22:	2b09      	cmp	r3, #9
 8003f24:	f040 80a6 	bne.w	8004074 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	334d      	adds	r3, #77	@ 0x4d
 8003f38:	2202      	movs	r2, #2
 8003f3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	3344      	adds	r3, #68	@ 0x44
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	1c59      	adds	r1, r3, #1
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4403      	add	r3, r0
 8003f5c:	3344      	adds	r3, #68	@ 0x44
 8003f5e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3344      	adds	r3, #68	@ 0x44
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d943      	bls.n	8003ffe <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	3344      	adds	r3, #68	@ 0x44
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	331a      	adds	r3, #26
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d123      	bne.n	8003fe8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	331b      	adds	r3, #27
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	331c      	adds	r3, #28
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	78fa      	ldrb	r2, [r7, #3]
 8003fd8:	0151      	lsls	r1, r2, #5
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	440a      	add	r2, r1
 8003fde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fe6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	334c      	adds	r3, #76	@ 0x4c
 8003ff8:	2204      	movs	r2, #4
 8003ffa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ffc:	e229      	b.n	8004452 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	334c      	adds	r3, #76	@ 0x4c
 800400e:	2202      	movs	r2, #2
 8004010:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	3326      	adds	r3, #38	@ 0x26
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00b      	beq.n	8004040 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	3326      	adds	r3, #38	@ 0x26
 8004038:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800403a:	2b02      	cmp	r3, #2
 800403c:	f040 8209 	bne.w	8004452 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4413      	add	r3, r2
 8004048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004056:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800405e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4413      	add	r3, r2
 8004068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800406c:	461a      	mov	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004072:	e1ee      	b.n	8004452 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	334d      	adds	r3, #77	@ 0x4d
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b05      	cmp	r3, #5
 8004088:	f040 80c8 	bne.w	800421c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	334d      	adds	r3, #77	@ 0x4d
 800409c:	2202      	movs	r2, #2
 800409e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	331b      	adds	r3, #27
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	f040 81ce 	bne.w	8004454 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80040b8:	78fa      	ldrb	r2, [r7, #3]
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	3326      	adds	r3, #38	@ 0x26
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d16b      	bne.n	80041a6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80040ce:	78fa      	ldrb	r2, [r7, #3]
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	3348      	adds	r3, #72	@ 0x48
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	1c59      	adds	r1, r3, #1
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4403      	add	r3, r0
 80040ee:	3348      	adds	r3, #72	@ 0x48
 80040f0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	3348      	adds	r3, #72	@ 0x48
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d943      	bls.n	8004190 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	3348      	adds	r3, #72	@ 0x48
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	331b      	adds	r3, #27
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	3344      	adds	r3, #68	@ 0x44
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d809      	bhi.n	800415a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	331c      	adds	r3, #28
 8004156:	2201      	movs	r2, #1
 8004158:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4413      	add	r3, r2
 8004162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	0151      	lsls	r1, r2, #5
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	440a      	add	r2, r1
 8004170:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004178:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	334c      	adds	r3, #76	@ 0x4c
 800418a:	2204      	movs	r2, #4
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	e014      	b.n	80041ba <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	334c      	adds	r3, #76	@ 0x4c
 80041a0:	2202      	movs	r2, #2
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e009      	b.n	80041ba <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041a6:	78fa      	ldrb	r2, [r7, #3]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	334c      	adds	r3, #76	@ 0x4c
 80041b6:	2202      	movs	r2, #2
 80041b8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	3326      	adds	r3, #38	@ 0x26
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00b      	beq.n	80041e8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80041d0:	78fa      	ldrb	r2, [r7, #3]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	3326      	adds	r3, #38	@ 0x26
 80041e0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	f040 8136 	bne.w	8004454 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80041fe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004206:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004214:	461a      	mov	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e11b      	b.n	8004454 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	334d      	adds	r3, #77	@ 0x4d
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b03      	cmp	r3, #3
 8004230:	f040 8081 	bne.w	8004336 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004234:	78fa      	ldrb	r2, [r7, #3]
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	1a9b      	subs	r3, r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	334d      	adds	r3, #77	@ 0x4d
 8004244:	2202      	movs	r2, #2
 8004246:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	331b      	adds	r3, #27
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b01      	cmp	r3, #1
 800425c:	f040 80fa 	bne.w	8004454 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	334c      	adds	r3, #76	@ 0x4c
 8004270:	2202      	movs	r2, #2
 8004272:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4413      	add	r3, r2
 800427c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	0151      	lsls	r1, r2, #5
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	440a      	add	r2, r1
 800428a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800428e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004292:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	78fa      	ldrb	r2, [r7, #3]
 80042a4:	0151      	lsls	r1, r2, #5
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	440a      	add	r2, r1
 80042aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042b2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	0151      	lsls	r1, r2, #5
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	440a      	add	r2, r1
 80042ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042ce:	f023 0320 	bic.w	r3, r3, #32
 80042d2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	3326      	adds	r3, #38	@ 0x26
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	3326      	adds	r3, #38	@ 0x26
 80042fa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	f040 80a9 	bne.w	8004454 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4413      	add	r3, r2
 800430a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004318:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004320:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4413      	add	r3, r2
 800432a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800432e:	461a      	mov	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	e08e      	b.n	8004454 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	334d      	adds	r3, #77	@ 0x4d
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d143      	bne.n	80043d4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	334d      	adds	r3, #77	@ 0x4d
 800435c:	2202      	movs	r2, #2
 800435e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004360:	78fa      	ldrb	r2, [r7, #3]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	334c      	adds	r3, #76	@ 0x4c
 8004370:	2202      	movs	r2, #2
 8004372:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	3326      	adds	r3, #38	@ 0x26
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	3326      	adds	r3, #38	@ 0x26
 800439a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800439c:	2b02      	cmp	r3, #2
 800439e:	d159      	bne.n	8004454 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043b6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043be:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043cc:	461a      	mov	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e03f      	b.n	8004454 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	334d      	adds	r3, #77	@ 0x4d
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d126      	bne.n	8004438 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	334d      	adds	r3, #77	@ 0x4d
 80043fa:	2202      	movs	r2, #2
 80043fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	3344      	adds	r3, #68	@ 0x44
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	1c59      	adds	r1, r3, #1
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4403      	add	r3, r0
 800441e:	3344      	adds	r3, #68	@ 0x44
 8004420:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004422:	78fa      	ldrb	r2, [r7, #3]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	334c      	adds	r3, #76	@ 0x4c
 8004432:	2204      	movs	r2, #4
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	e00d      	b.n	8004454 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	334d      	adds	r3, #77	@ 0x4d
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b02      	cmp	r3, #2
 800444c:	f000 8100 	beq.w	8004650 <HCD_HC_IN_IRQHandler+0xcca>
 8004450:	e000      	b.n	8004454 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004452:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004454:	78fa      	ldrb	r2, [r7, #3]
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	334c      	adds	r3, #76	@ 0x4c
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	4619      	mov	r1, r3
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f00b fa64 	bl	800f938 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004470:	e0ef      	b.n	8004652 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	78fa      	ldrb	r2, [r7, #3]
 8004478:	4611      	mov	r1, r2
 800447a:	4618      	mov	r0, r3
 800447c:	f004 ffe7 	bl	800944e <USB_ReadChInterrupts>
 8004480:	4603      	mov	r3, r0
 8004482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004486:	2b40      	cmp	r3, #64	@ 0x40
 8004488:	d12f      	bne.n	80044ea <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800448a:	78fb      	ldrb	r3, [r7, #3]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004496:	461a      	mov	r2, r3
 8004498:	2340      	movs	r3, #64	@ 0x40
 800449a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800449c:	78fa      	ldrb	r2, [r7, #3]
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	334d      	adds	r3, #77	@ 0x4d
 80044ac:	2205      	movs	r2, #5
 80044ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	331a      	adds	r3, #26
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	3344      	adds	r3, #68	@ 0x44
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f005 fd5d 	bl	8009fa2 <USB_HC_Halt>
 80044e8:	e0b3      	b.n	8004652 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	4611      	mov	r1, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f004 ffab 	bl	800944e <USB_ReadChInterrupts>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b10      	cmp	r3, #16
 8004500:	f040 80a7 	bne.w	8004652 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	3326      	adds	r3, #38	@ 0x26
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b03      	cmp	r3, #3
 8004518:	d11b      	bne.n	8004552 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	3344      	adds	r3, #68	@ 0x44
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	334d      	adds	r3, #77	@ 0x4d
 800453e:	2204      	movs	r2, #4
 8004540:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f005 fd29 	bl	8009fa2 <USB_HC_Halt>
 8004550:	e03f      	b.n	80045d2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	3326      	adds	r3, #38	@ 0x26
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004568:	78fa      	ldrb	r2, [r7, #3]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	3326      	adds	r3, #38	@ 0x26
 8004578:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800457a:	2b02      	cmp	r3, #2
 800457c:	d129      	bne.n	80045d2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800457e:	78fa      	ldrb	r2, [r7, #3]
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	3344      	adds	r3, #68	@ 0x44
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	799b      	ldrb	r3, [r3, #6]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HCD_HC_IN_IRQHandler+0xc2a>
 800459a:	78fa      	ldrb	r2, [r7, #3]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	331b      	adds	r3, #27
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d110      	bne.n	80045d2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80045b0:	78fa      	ldrb	r2, [r7, #3]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	334d      	adds	r3, #77	@ 0x4d
 80045c0:	2204      	movs	r2, #4
 80045c2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f005 fce8 	bl	8009fa2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	331b      	adds	r3, #27
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d129      	bne.n	800463c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	331b      	adds	r3, #27
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4413      	add	r3, r2
 8004604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	440a      	add	r2, r1
 8004612:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800461a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	78fa      	ldrb	r2, [r7, #3]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	440a      	add	r2, r1
 8004632:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004636:	f043 0320 	orr.w	r3, r3, #32
 800463a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004648:	461a      	mov	r2, r3
 800464a:	2310      	movs	r3, #16
 800464c:	6093      	str	r3, [r2, #8]
 800464e:	e000      	b.n	8004652 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004650:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	4611      	mov	r1, r2
 8004676:	4618      	mov	r0, r3
 8004678:	f004 fee9 	bl	800944e <USB_ReadChInterrupts>
 800467c:	4603      	mov	r3, r0
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b04      	cmp	r3, #4
 8004684:	d11b      	bne.n	80046be <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4413      	add	r3, r2
 800468e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004692:	461a      	mov	r2, r3
 8004694:	2304      	movs	r3, #4
 8004696:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	334d      	adds	r3, #77	@ 0x4d
 80046a8:	2207      	movs	r2, #7
 80046aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	4611      	mov	r1, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f005 fc74 	bl	8009fa2 <USB_HC_Halt>
 80046ba:	f000 bc89 	b.w	8004fd0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f004 fec1 	bl	800944e <USB_ReadChInterrupts>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	f040 8082 	bne.w	80047dc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046e4:	461a      	mov	r2, r3
 80046e6:	2320      	movs	r3, #32
 80046e8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	3319      	adds	r3, #25
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d124      	bne.n	800474a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	3319      	adds	r3, #25
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	334c      	adds	r3, #76	@ 0x4c
 8004724:	2202      	movs	r2, #2
 8004726:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	334d      	adds	r3, #77	@ 0x4d
 8004738:	2203      	movs	r2, #3
 800473a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	4611      	mov	r1, r2
 8004744:	4618      	mov	r0, r3
 8004746:	f005 fc2c 	bl	8009fa2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	331a      	adds	r3, #26
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	f040 8437 	bne.w	8004fd0 <HCD_HC_OUT_IRQHandler+0x978>
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	331b      	adds	r3, #27
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f040 842b 	bne.w	8004fd0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	3326      	adds	r3, #38	@ 0x26
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d009      	beq.n	80047a4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	331b      	adds	r3, #27
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80047a4:	78fa      	ldrb	r2, [r7, #3]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	334d      	adds	r3, #77	@ 0x4d
 80047b4:	2203      	movs	r2, #3
 80047b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	78fa      	ldrb	r2, [r7, #3]
 80047be:	4611      	mov	r1, r2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f005 fbee 	bl	8009fa2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80047c6:	78fa      	ldrb	r2, [r7, #3]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	3344      	adds	r3, #68	@ 0x44
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e3f9      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	78fa      	ldrb	r2, [r7, #3]
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f004 fe32 	bl	800944e <USB_ReadChInterrupts>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047f4:	d111      	bne.n	800481a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004802:	461a      	mov	r2, r3
 8004804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004808:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	78fa      	ldrb	r2, [r7, #3]
 8004810:	4611      	mov	r1, r2
 8004812:	4618      	mov	r0, r3
 8004814:	f005 fbc5 	bl	8009fa2 <USB_HC_Halt>
 8004818:	e3da      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	78fa      	ldrb	r2, [r7, #3]
 8004820:	4611      	mov	r1, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f004 fe13 	bl	800944e <USB_ReadChInterrupts>
 8004828:	4603      	mov	r3, r0
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b01      	cmp	r3, #1
 8004830:	d168      	bne.n	8004904 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	3344      	adds	r3, #68	@ 0x44
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	78fa      	ldrb	r2, [r7, #3]
 800484c:	4611      	mov	r1, r2
 800484e:	4618      	mov	r0, r3
 8004850:	f004 fdfd 	bl	800944e <USB_ReadChInterrupts>
 8004854:	4603      	mov	r3, r0
 8004856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485a:	2b40      	cmp	r3, #64	@ 0x40
 800485c:	d112      	bne.n	8004884 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	3319      	adds	r3, #25
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4413      	add	r3, r2
 800487a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800487e:	461a      	mov	r2, r3
 8004880:	2340      	movs	r3, #64	@ 0x40
 8004882:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004884:	78fa      	ldrb	r2, [r7, #3]
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	331b      	adds	r3, #27
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d019      	beq.n	80048ce <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800489a:	78fa      	ldrb	r2, [r7, #3]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	331b      	adds	r3, #27
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048cc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048da:	461a      	mov	r2, r3
 80048dc:	2301      	movs	r3, #1
 80048de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	334d      	adds	r3, #77	@ 0x4d
 80048f0:	2201      	movs	r2, #1
 80048f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	4611      	mov	r1, r2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f005 fb50 	bl	8009fa2 <USB_HC_Halt>
 8004902:	e365      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	78fa      	ldrb	r2, [r7, #3]
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f004 fd9e 	bl	800944e <USB_ReadChInterrupts>
 8004912:	4603      	mov	r3, r0
 8004914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004918:	2b40      	cmp	r3, #64	@ 0x40
 800491a:	d139      	bne.n	8004990 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	334d      	adds	r3, #77	@ 0x4d
 800492c:	2205      	movs	r2, #5
 800492e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	331a      	adds	r3, #26
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004946:	78fa      	ldrb	r2, [r7, #3]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	3319      	adds	r3, #25
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	1a9b      	subs	r3, r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	440b      	add	r3, r1
 8004968:	3344      	adds	r3, #68	@ 0x44
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	4611      	mov	r1, r2
 8004976:	4618      	mov	r0, r3
 8004978:	f005 fb13 	bl	8009fa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4413      	add	r3, r2
 8004984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004988:	461a      	mov	r2, r3
 800498a:	2340      	movs	r3, #64	@ 0x40
 800498c:	6093      	str	r3, [r2, #8]
 800498e:	e31f      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	78fa      	ldrb	r2, [r7, #3]
 8004996:	4611      	mov	r1, r2
 8004998:	4618      	mov	r0, r3
 800499a:	f004 fd58 	bl	800944e <USB_ReadChInterrupts>
 800499e:	4603      	mov	r3, r0
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d11a      	bne.n	80049de <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049b4:	461a      	mov	r2, r3
 80049b6:	2308      	movs	r3, #8
 80049b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	334d      	adds	r3, #77	@ 0x4d
 80049ca:	2206      	movs	r2, #6
 80049cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	78fa      	ldrb	r2, [r7, #3]
 80049d4:	4611      	mov	r1, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f005 fae3 	bl	8009fa2 <USB_HC_Halt>
 80049dc:	e2f8      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	78fa      	ldrb	r2, [r7, #3]
 80049e4:	4611      	mov	r1, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f004 fd31 	bl	800944e <USB_ReadChInterrupts>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d144      	bne.n	8004a80 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	3344      	adds	r3, #68	@ 0x44
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	334d      	adds	r3, #77	@ 0x4d
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3319      	adds	r3, #25
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d114      	bne.n	8004a5e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004a34:	78fa      	ldrb	r2, [r7, #3]
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	3318      	adds	r3, #24
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	3319      	adds	r3, #25
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	78fa      	ldrb	r2, [r7, #3]
 8004a64:	4611      	mov	r1, r2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f005 fa9b 	bl	8009fa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a78:	461a      	mov	r2, r3
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	6093      	str	r3, [r2, #8]
 8004a7e:	e2a7      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	78fa      	ldrb	r2, [r7, #3]
 8004a86:	4611      	mov	r1, r2
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f004 fce0 	bl	800944e <USB_ReadChInterrupts>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a94:	2b80      	cmp	r3, #128	@ 0x80
 8004a96:	f040 8083 	bne.w	8004ba0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	799b      	ldrb	r3, [r3, #6]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d111      	bne.n	8004ac6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004aa2:	78fa      	ldrb	r2, [r7, #3]
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	334d      	adds	r3, #77	@ 0x4d
 8004ab2:	2207      	movs	r2, #7
 8004ab4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	78fa      	ldrb	r2, [r7, #3]
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f005 fa6f 	bl	8009fa2 <USB_HC_Halt>
 8004ac4:	e062      	b.n	8004b8c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	3344      	adds	r3, #68	@ 0x44
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	1c59      	adds	r1, r3, #1
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4403      	add	r3, r0
 8004ae6:	3344      	adds	r3, #68	@ 0x44
 8004ae8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	3344      	adds	r3, #68	@ 0x44
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d922      	bls.n	8004b46 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	3344      	adds	r3, #68	@ 0x44
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	334c      	adds	r3, #76	@ 0x4c
 8004b24:	2204      	movs	r2, #4
 8004b26:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b28:	78fa      	ldrb	r2, [r7, #3]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	334c      	adds	r3, #76	@ 0x4c
 8004b38:	781a      	ldrb	r2, [r3, #0]
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f00a fefa 	bl	800f938 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b44:	e022      	b.n	8004b8c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	334c      	adds	r3, #76	@ 0x4c
 8004b56:	2202      	movs	r2, #2
 8004b58:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b70:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b78:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b7a:	78fb      	ldrb	r3, [r7, #3]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b86:	461a      	mov	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2380      	movs	r3, #128	@ 0x80
 8004b9c:	6093      	str	r3, [r2, #8]
 8004b9e:	e217      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	78fa      	ldrb	r2, [r7, #3]
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f004 fc50 	bl	800944e <USB_ReadChInterrupts>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bb8:	d11b      	bne.n	8004bf2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004bba:	78fa      	ldrb	r2, [r7, #3]
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	334d      	adds	r3, #77	@ 0x4d
 8004bca:	2209      	movs	r2, #9
 8004bcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f005 f9e3 	bl	8009fa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be8:	461a      	mov	r2, r3
 8004bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bee:	6093      	str	r3, [r2, #8]
 8004bf0:	e1ee      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f004 fc27 	bl	800944e <USB_ReadChInterrupts>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	f040 81df 	bne.w	8004fca <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	334d      	adds	r3, #77	@ 0x4d
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	f040 8093 	bne.w	8004d5c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c36:	78fa      	ldrb	r2, [r7, #3]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	334d      	adds	r3, #77	@ 0x4d
 8004c46:	2202      	movs	r2, #2
 8004c48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	334c      	adds	r3, #76	@ 0x4c
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	3326      	adds	r3, #38	@ 0x26
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d00b      	beq.n	8004c8c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004c74:	78fa      	ldrb	r2, [r7, #3]
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	1a9b      	subs	r3, r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	3326      	adds	r3, #38	@ 0x26
 8004c84:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	f040 8190 	bne.w	8004fac <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	799b      	ldrb	r3, [r3, #6]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d115      	bne.n	8004cc0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004c94:	78fa      	ldrb	r2, [r7, #3]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	333d      	adds	r3, #61	@ 0x3d
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	f083 0301 	eor.w	r3, r3, #1
 8004cac:	b2d8      	uxtb	r0, r3
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	333d      	adds	r3, #61	@ 0x3d
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	799b      	ldrb	r3, [r3, #6]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	f040 8171 	bne.w	8004fac <HCD_HC_OUT_IRQHandler+0x954>
 8004cca:	78fa      	ldrb	r2, [r7, #3]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	3334      	adds	r3, #52	@ 0x34
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8165 	beq.w	8004fac <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	3334      	adds	r3, #52	@ 0x34
 8004cf2:	6819      	ldr	r1, [r3, #0]
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4403      	add	r3, r0
 8004d02:	3328      	adds	r3, #40	@ 0x28
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	440b      	add	r3, r1
 8004d08:	1e59      	subs	r1, r3, #1
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4403      	add	r3, r0
 8004d18:	3328      	adds	r3, #40	@ 0x28
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d20:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 813f 	beq.w	8004fac <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	333d      	adds	r3, #61	@ 0x3d
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	78fa      	ldrb	r2, [r7, #3]
 8004d42:	f083 0301 	eor.w	r3, r3, #1
 8004d46:	b2d8      	uxtb	r0, r3
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	333d      	adds	r3, #61	@ 0x3d
 8004d56:	4602      	mov	r2, r0
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	e127      	b.n	8004fac <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	334d      	adds	r3, #77	@ 0x4d
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d120      	bne.n	8004db4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d72:	78fa      	ldrb	r2, [r7, #3]
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	334d      	adds	r3, #77	@ 0x4d
 8004d82:	2202      	movs	r2, #2
 8004d84:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	440b      	add	r3, r1
 8004d94:	331b      	adds	r3, #27
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	f040 8107 	bne.w	8004fac <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d9e:	78fa      	ldrb	r2, [r7, #3]
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	334c      	adds	r3, #76	@ 0x4c
 8004dae:	2202      	movs	r2, #2
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	e0fb      	b.n	8004fac <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	334d      	adds	r3, #77	@ 0x4d
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d13a      	bne.n	8004e40 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004dca:	78fa      	ldrb	r2, [r7, #3]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	334d      	adds	r3, #77	@ 0x4d
 8004dda:	2202      	movs	r2, #2
 8004ddc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	334c      	adds	r3, #76	@ 0x4c
 8004dee:	2202      	movs	r2, #2
 8004df0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004df2:	78fa      	ldrb	r2, [r7, #3]
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	4613      	mov	r3, r2
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	1a9b      	subs	r3, r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	440b      	add	r3, r1
 8004e00:	331b      	adds	r3, #27
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	f040 80d1 	bne.w	8004fac <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004e0a:	78fa      	ldrb	r2, [r7, #3]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	331b      	adds	r3, #27
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e3c:	6053      	str	r3, [r2, #4]
 8004e3e:	e0b5      	b.n	8004fac <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004e40:	78fa      	ldrb	r2, [r7, #3]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	1a9b      	subs	r3, r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	334d      	adds	r3, #77	@ 0x4d
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b05      	cmp	r3, #5
 8004e54:	d114      	bne.n	8004e80 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e56:	78fa      	ldrb	r2, [r7, #3]
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	334d      	adds	r3, #77	@ 0x4d
 8004e66:	2202      	movs	r2, #2
 8004e68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	334c      	adds	r3, #76	@ 0x4c
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e095      	b.n	8004fac <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004e80:	78fa      	ldrb	r2, [r7, #3]
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	334d      	adds	r3, #77	@ 0x4d
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b06      	cmp	r3, #6
 8004e94:	d114      	bne.n	8004ec0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	334d      	adds	r3, #77	@ 0x4d
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	334c      	adds	r3, #76	@ 0x4c
 8004eba:	2205      	movs	r2, #5
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	e075      	b.n	8004fac <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004ec0:	78fa      	ldrb	r2, [r7, #3]
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	334d      	adds	r3, #77	@ 0x4d
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b07      	cmp	r3, #7
 8004ed4:	d00a      	beq.n	8004eec <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	334d      	adds	r3, #77	@ 0x4d
 8004ee6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004ee8:	2b09      	cmp	r3, #9
 8004eea:	d170      	bne.n	8004fce <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	334d      	adds	r3, #77	@ 0x4d
 8004efc:	2202      	movs	r2, #2
 8004efe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	3344      	adds	r3, #68	@ 0x44
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	1c59      	adds	r1, r3, #1
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4403      	add	r3, r0
 8004f20:	3344      	adds	r3, #68	@ 0x44
 8004f22:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	3344      	adds	r3, #68	@ 0x44
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d914      	bls.n	8004f64 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004f3a:	78fa      	ldrb	r2, [r7, #3]
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	3344      	adds	r3, #68	@ 0x44
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	334c      	adds	r3, #76	@ 0x4c
 8004f5e:	2204      	movs	r2, #4
 8004f60:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f62:	e022      	b.n	8004faa <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f64:	78fa      	ldrb	r2, [r7, #3]
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	334c      	adds	r3, #76	@ 0x4c
 8004f74:	2202      	movs	r2, #2
 8004f76:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f8e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f96:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004faa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	334c      	adds	r3, #76	@ 0x4c
 8004fbc:	781a      	ldrb	r2, [r3, #0]
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f00a fcb8 	bl	800f938 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004fc8:	e002      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004fca:	bf00      	nop
 8004fcc:	e000      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004fce:	bf00      	nop
  }
}
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b08a      	sub	sp, #40	@ 0x28
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	0c5b      	lsrs	r3, r3, #17
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	091b      	lsrs	r3, r3, #4
 8005006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800500a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d004      	beq.n	800501c <HCD_RXQLVL_IRQHandler+0x46>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b05      	cmp	r3, #5
 8005016:	f000 80b6 	beq.w	8005186 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800501a:	e0b7      	b.n	800518c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 80b3 	beq.w	800518a <HCD_RXQLVL_IRQHandler+0x1b4>
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4613      	mov	r3, r2
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	332c      	adds	r3, #44	@ 0x2c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 80a7 	beq.w	800518a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4613      	mov	r3, r2
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	3338      	adds	r3, #56	@ 0x38
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	18d1      	adds	r1, r2, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4613      	mov	r3, r2
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4403      	add	r3, r0
 8005060:	3334      	adds	r3, #52	@ 0x34
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4299      	cmp	r1, r3
 8005066:	f200 8083 	bhi.w	8005170 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4613      	mov	r3, r2
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	332c      	adds	r3, #44	@ 0x2c
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	b292      	uxth	r2, r2
 8005084:	4619      	mov	r1, r3
 8005086:	f004 f977 	bl	8009378 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	4613      	mov	r3, r2
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	332c      	adds	r3, #44	@ 0x2c
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	18d1      	adds	r1, r2, r3
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4613      	mov	r3, r2
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4403      	add	r3, r0
 80050ae:	332c      	adds	r3, #44	@ 0x2c
 80050b0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4613      	mov	r3, r2
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	1a9b      	subs	r3, r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	3338      	adds	r3, #56	@ 0x38
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	18d1      	adds	r1, r2, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4613      	mov	r3, r2
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4403      	add	r3, r0
 80050d6:	3338      	adds	r3, #56	@ 0x38
 80050d8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	0cdb      	lsrs	r3, r3, #19
 80050ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ee:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4613      	mov	r3, r2
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	3328      	adds	r3, #40	@ 0x28
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4293      	cmp	r3, r2
 8005108:	d13f      	bne.n	800518a <HCD_RXQLVL_IRQHandler+0x1b4>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d03c      	beq.n	800518a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	4413      	add	r3, r2
 8005118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005126:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800512e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800513c:	461a      	mov	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4613      	mov	r3, r2
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	333c      	adds	r3, #60	@ 0x3c
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	f083 0301 	eor.w	r3, r3, #1
 8005158:	b2d8      	uxtb	r0, r3
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4613      	mov	r3, r2
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	333c      	adds	r3, #60	@ 0x3c
 800516a:	4602      	mov	r2, r0
 800516c:	701a      	strb	r2, [r3, #0]
      break;
 800516e:	e00c      	b.n	800518a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4613      	mov	r3, r2
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	334c      	adds	r3, #76	@ 0x4c
 8005180:	2204      	movs	r2, #4
 8005182:	701a      	strb	r2, [r3, #0]
      break;
 8005184:	e001      	b.n	800518a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800518a:	bf00      	nop
  }
}
 800518c:	bf00      	nop
 800518e:	3728      	adds	r7, #40	@ 0x28
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80051c0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d10b      	bne.n	80051e4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d102      	bne.n	80051dc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f00a fb92 	bl	800f900 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f043 0302 	orr.w	r3, r3, #2
 80051e2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d132      	bne.n	8005254 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f043 0308 	orr.w	r3, r3, #8
 80051f4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d126      	bne.n	800524e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	7a5b      	ldrb	r3, [r3, #9]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d113      	bne.n	8005230 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800520e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005212:	d106      	bne.n	8005222 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2102      	movs	r1, #2
 800521a:	4618      	mov	r0, r3
 800521c:	f004 fa42 	bl	80096a4 <USB_InitFSLSPClkSel>
 8005220:	e011      	b.n	8005246 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2101      	movs	r1, #1
 8005228:	4618      	mov	r0, r3
 800522a:	f004 fa3b 	bl	80096a4 <USB_InitFSLSPClkSel>
 800522e:	e00a      	b.n	8005246 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	79db      	ldrb	r3, [r3, #7]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d106      	bne.n	8005246 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800523e:	461a      	mov	r2, r3
 8005240:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005244:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f00a fb88 	bl	800f95c <HAL_HCD_PortEnabled_Callback>
 800524c:	e002      	b.n	8005254 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f00a fb92 	bl	800f978 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b20      	cmp	r3, #32
 800525c:	d103      	bne.n	8005266 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f043 0320 	orr.w	r3, r3, #32
 8005264:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800526c:	461a      	mov	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	6013      	str	r3, [r2, #0]
}
 8005272:	bf00      	nop
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e12b      	b.n	80054e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fc fb64 	bl	8001970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2224      	movs	r2, #36	@ 0x24
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0201 	bic.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052e0:	f001 fea8 	bl	8007034 <HAL_RCC_GetPCLK1Freq>
 80052e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	4a81      	ldr	r2, [pc, #516]	@ (80054f0 <HAL_I2C_Init+0x274>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d807      	bhi.n	8005300 <HAL_I2C_Init+0x84>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4a80      	ldr	r2, [pc, #512]	@ (80054f4 <HAL_I2C_Init+0x278>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	bf94      	ite	ls
 80052f8:	2301      	movls	r3, #1
 80052fa:	2300      	movhi	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	e006      	b.n	800530e <HAL_I2C_Init+0x92>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a7d      	ldr	r2, [pc, #500]	@ (80054f8 <HAL_I2C_Init+0x27c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	bf94      	ite	ls
 8005308:	2301      	movls	r3, #1
 800530a:	2300      	movhi	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e0e7      	b.n	80054e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4a78      	ldr	r2, [pc, #480]	@ (80054fc <HAL_I2C_Init+0x280>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	0c9b      	lsrs	r3, r3, #18
 8005320:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4a6a      	ldr	r2, [pc, #424]	@ (80054f0 <HAL_I2C_Init+0x274>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d802      	bhi.n	8005350 <HAL_I2C_Init+0xd4>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	3301      	adds	r3, #1
 800534e:	e009      	b.n	8005364 <HAL_I2C_Init+0xe8>
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005356:	fb02 f303 	mul.w	r3, r2, r3
 800535a:	4a69      	ldr	r2, [pc, #420]	@ (8005500 <HAL_I2C_Init+0x284>)
 800535c:	fba2 2303 	umull	r2, r3, r2, r3
 8005360:	099b      	lsrs	r3, r3, #6
 8005362:	3301      	adds	r3, #1
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	430b      	orrs	r3, r1
 800536a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005376:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	495c      	ldr	r1, [pc, #368]	@ (80054f0 <HAL_I2C_Init+0x274>)
 8005380:	428b      	cmp	r3, r1
 8005382:	d819      	bhi.n	80053b8 <HAL_I2C_Init+0x13c>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1e59      	subs	r1, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005392:	1c59      	adds	r1, r3, #1
 8005394:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005398:	400b      	ands	r3, r1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_I2C_Init+0x138>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1e59      	subs	r1, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80053ac:	3301      	adds	r3, #1
 80053ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053b2:	e051      	b.n	8005458 <HAL_I2C_Init+0x1dc>
 80053b4:	2304      	movs	r3, #4
 80053b6:	e04f      	b.n	8005458 <HAL_I2C_Init+0x1dc>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d111      	bne.n	80053e4 <HAL_I2C_Init+0x168>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	1e58      	subs	r0, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6859      	ldr	r1, [r3, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	440b      	add	r3, r1
 80053ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80053d2:	3301      	adds	r3, #1
 80053d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d8:	2b00      	cmp	r3, #0
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	e012      	b.n	800540a <HAL_I2C_Init+0x18e>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1e58      	subs	r0, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6859      	ldr	r1, [r3, #4]
 80053ec:	460b      	mov	r3, r1
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	0099      	lsls	r1, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053fa:	3301      	adds	r3, #1
 80053fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005400:	2b00      	cmp	r3, #0
 8005402:	bf0c      	ite	eq
 8005404:	2301      	moveq	r3, #1
 8005406:	2300      	movne	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_I2C_Init+0x196>
 800540e:	2301      	movs	r3, #1
 8005410:	e022      	b.n	8005458 <HAL_I2C_Init+0x1dc>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10e      	bne.n	8005438 <HAL_I2C_Init+0x1bc>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1e58      	subs	r0, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6859      	ldr	r1, [r3, #4]
 8005422:	460b      	mov	r3, r1
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	440b      	add	r3, r1
 8005428:	fbb0 f3f3 	udiv	r3, r0, r3
 800542c:	3301      	adds	r3, #1
 800542e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005436:	e00f      	b.n	8005458 <HAL_I2C_Init+0x1dc>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	1e58      	subs	r0, r3, #1
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6859      	ldr	r1, [r3, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	0099      	lsls	r1, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	fbb0 f3f3 	udiv	r3, r0, r3
 800544e:	3301      	adds	r3, #1
 8005450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005454:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	6809      	ldr	r1, [r1, #0]
 800545c:	4313      	orrs	r3, r2
 800545e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005486:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6911      	ldr	r1, [r2, #16]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	68d2      	ldr	r2, [r2, #12]
 8005492:	4311      	orrs	r1, r2
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	430b      	orrs	r3, r1
 800549a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	000186a0 	.word	0x000186a0
 80054f4:	001e847f 	.word	0x001e847f
 80054f8:	003d08ff 	.word	0x003d08ff
 80054fc:	431bde83 	.word	0x431bde83
 8005500:	10624dd3 	.word	0x10624dd3

08005504 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	607a      	str	r2, [r7, #4]
 800550e:	461a      	mov	r2, r3
 8005510:	460b      	mov	r3, r1
 8005512:	817b      	strh	r3, [r7, #10]
 8005514:	4613      	mov	r3, r2
 8005516:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005518:	f7fc fe9a 	bl	8002250 <HAL_GetTick>
 800551c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b20      	cmp	r3, #32
 8005528:	f040 80e0 	bne.w	80056ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	2319      	movs	r3, #25
 8005532:	2201      	movs	r2, #1
 8005534:	4970      	ldr	r1, [pc, #448]	@ (80056f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fa92 	bl	8005a60 <I2C_WaitOnFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005542:	2302      	movs	r3, #2
 8005544:	e0d3      	b.n	80056ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_I2C_Master_Transmit+0x50>
 8005550:	2302      	movs	r3, #2
 8005552:	e0cc      	b.n	80056ee <HAL_I2C_Master_Transmit+0x1ea>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b01      	cmp	r3, #1
 8005568:	d007      	beq.n	800557a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0201 	orr.w	r2, r2, #1
 8005578:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005588:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2221      	movs	r2, #33	@ 0x21
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2210      	movs	r2, #16
 8005596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	893a      	ldrh	r2, [r7, #8]
 80055aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4a50      	ldr	r2, [pc, #320]	@ (80056fc <HAL_I2C_Master_Transmit+0x1f8>)
 80055ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80055bc:	8979      	ldrh	r1, [r7, #10]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	6a3a      	ldr	r2, [r7, #32]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f9ca 	bl	800595c <I2C_MasterRequestWrite>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e08d      	b.n	80056ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055e8:	e066      	b.n	80056b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	6a39      	ldr	r1, [r7, #32]
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fb50 	bl	8005c94 <I2C_WaitOnTXEFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00d      	beq.n	8005616 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d107      	bne.n	8005612 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005610:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e06b      	b.n	80056ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561a:	781a      	ldrb	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b04      	cmp	r3, #4
 8005652:	d11b      	bne.n	800568c <HAL_I2C_Master_Transmit+0x188>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005658:	2b00      	cmp	r3, #0
 800565a:	d017      	beq.n	800568c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	781a      	ldrb	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	6a39      	ldr	r1, [r7, #32]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 fb47 	bl	8005d24 <I2C_WaitOnBTFFlagUntilTimeout>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00d      	beq.n	80056b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d107      	bne.n	80056b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e01a      	b.n	80056ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d194      	bne.n	80055ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e000      	b.n	80056ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056ec:	2302      	movs	r3, #2
  }
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	00100002 	.word	0x00100002
 80056fc:	ffff0000 	.word	0xffff0000

08005700 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	@ 0x28
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	460b      	mov	r3, r1
 800570e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005710:	f7fc fd9e 	bl	8002250 <HAL_GetTick>
 8005714:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b20      	cmp	r3, #32
 8005724:	f040 8111 	bne.w	800594a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	2319      	movs	r3, #25
 800572e:	2201      	movs	r2, #1
 8005730:	4988      	ldr	r1, [pc, #544]	@ (8005954 <HAL_I2C_IsDeviceReady+0x254>)
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f994 	bl	8005a60 <I2C_WaitOnFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800573e:	2302      	movs	r3, #2
 8005740:	e104      	b.n	800594c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_I2C_IsDeviceReady+0x50>
 800574c:	2302      	movs	r3, #2
 800574e:	e0fd      	b.n	800594c <HAL_I2C_IsDeviceReady+0x24c>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b01      	cmp	r3, #1
 8005764:	d007      	beq.n	8005776 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0201 	orr.w	r2, r2, #1
 8005774:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005784:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2224      	movs	r2, #36	@ 0x24
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4a70      	ldr	r2, [pc, #448]	@ (8005958 <HAL_I2C_IsDeviceReady+0x258>)
 8005798:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 f952 	bl	8005a60 <I2C_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00d      	beq.n	80057de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d0:	d103      	bne.n	80057da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057d8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e0b6      	b.n	800594c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057de:	897b      	ldrh	r3, [r7, #10]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	461a      	mov	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80057ee:	f7fc fd2f 	bl	8002250 <HAL_GetTick>
 80057f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b02      	cmp	r3, #2
 8005800:	bf0c      	ite	eq
 8005802:	2301      	moveq	r3, #1
 8005804:	2300      	movne	r3, #0
 8005806:	b2db      	uxtb	r3, r3
 8005808:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005818:	bf0c      	ite	eq
 800581a:	2301      	moveq	r3, #1
 800581c:	2300      	movne	r3, #0
 800581e:	b2db      	uxtb	r3, r3
 8005820:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005822:	e025      	b.n	8005870 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005824:	f7fc fd14 	bl	8002250 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d302      	bcc.n	800583a <HAL_I2C_IsDeviceReady+0x13a>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	22a0      	movs	r2, #160	@ 0xa0
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b02      	cmp	r3, #2
 800584e:	bf0c      	ite	eq
 8005850:	2301      	moveq	r3, #1
 8005852:	2300      	movne	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2ba0      	cmp	r3, #160	@ 0xa0
 800587a:	d005      	beq.n	8005888 <HAL_I2C_IsDeviceReady+0x188>
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <HAL_I2C_IsDeviceReady+0x188>
 8005882:	7dbb      	ldrb	r3, [r7, #22]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0cd      	beq.n	8005824 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b02      	cmp	r3, #2
 800589c:	d129      	bne.n	80058f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	2319      	movs	r3, #25
 80058ca:	2201      	movs	r2, #1
 80058cc:	4921      	ldr	r1, [pc, #132]	@ (8005954 <HAL_I2C_IsDeviceReady+0x254>)
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f8c6 	bl	8005a60 <I2C_WaitOnFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e036      	b.n	800594c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e02c      	b.n	800594c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005900:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800590a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	2319      	movs	r3, #25
 8005912:	2201      	movs	r2, #1
 8005914:	490f      	ldr	r1, [pc, #60]	@ (8005954 <HAL_I2C_IsDeviceReady+0x254>)
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f8a2 	bl	8005a60 <I2C_WaitOnFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e012      	b.n	800594c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	3301      	adds	r3, #1
 800592a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	429a      	cmp	r2, r3
 8005932:	f4ff af32 	bcc.w	800579a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800594a:	2302      	movs	r3, #2
  }
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	00100002 	.word	0x00100002
 8005958:	ffff0000 	.word	0xffff0000

0800595c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af02      	add	r7, sp, #8
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	607a      	str	r2, [r7, #4]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	460b      	mov	r3, r1
 800596a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d006      	beq.n	8005986 <I2C_MasterRequestWrite+0x2a>
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d003      	beq.n	8005986 <I2C_MasterRequestWrite+0x2a>
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005984:	d108      	bne.n	8005998 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	e00b      	b.n	80059b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599c:	2b12      	cmp	r3, #18
 800599e:	d107      	bne.n	80059b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 f84f 	bl	8005a60 <I2C_WaitOnFlagUntilTimeout>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00d      	beq.n	80059e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059d6:	d103      	bne.n	80059e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e035      	b.n	8005a50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059ec:	d108      	bne.n	8005a00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059ee:	897b      	ldrh	r3, [r7, #10]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80059fc:	611a      	str	r2, [r3, #16]
 80059fe:	e01b      	b.n	8005a38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a00:	897b      	ldrh	r3, [r7, #10]
 8005a02:	11db      	asrs	r3, r3, #7
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	f003 0306 	and.w	r3, r3, #6
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	f063 030f 	orn	r3, r3, #15
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	490e      	ldr	r1, [pc, #56]	@ (8005a58 <I2C_MasterRequestWrite+0xfc>)
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f898 	bl	8005b54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e010      	b.n	8005a50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a2e:	897b      	ldrh	r3, [r7, #10]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	4907      	ldr	r1, [pc, #28]	@ (8005a5c <I2C_MasterRequestWrite+0x100>)
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 f888 	bl	8005b54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	00010008 	.word	0x00010008
 8005a5c:	00010002 	.word	0x00010002

08005a60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a70:	e048      	b.n	8005b04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a78:	d044      	beq.n	8005b04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7a:	f7fc fbe9 	bl	8002250 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d302      	bcc.n	8005a90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d139      	bne.n	8005b04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	0c1b      	lsrs	r3, r3, #16
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d10d      	bne.n	8005ab6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	43da      	mvns	r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bf0c      	ite	eq
 8005aac:	2301      	moveq	r3, #1
 8005aae:	2300      	movne	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	e00c      	b.n	8005ad0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	43da      	mvns	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d116      	bne.n	8005b04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af0:	f043 0220 	orr.w	r2, r3, #32
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e023      	b.n	8005b4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	0c1b      	lsrs	r3, r3, #16
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d10d      	bne.n	8005b2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	43da      	mvns	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	bf0c      	ite	eq
 8005b20:	2301      	moveq	r3, #1
 8005b22:	2300      	movne	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	e00c      	b.n	8005b44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	43da      	mvns	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	4013      	ands	r3, r2
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bf0c      	ite	eq
 8005b3c:	2301      	moveq	r3, #1
 8005b3e:	2300      	movne	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	461a      	mov	r2, r3
 8005b44:	79fb      	ldrb	r3, [r7, #7]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d093      	beq.n	8005a72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b62:	e071      	b.n	8005c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b72:	d123      	bne.n	8005bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba8:	f043 0204 	orr.w	r2, r3, #4
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e067      	b.n	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bc2:	d041      	beq.n	8005c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc4:	f7fc fb44 	bl	8002250 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d302      	bcc.n	8005bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d136      	bne.n	8005c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	0c1b      	lsrs	r3, r3, #16
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d10c      	bne.n	8005bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	43da      	mvns	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	bf14      	ite	ne
 8005bf6:	2301      	movne	r3, #1
 8005bf8:	2300      	moveq	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	e00b      	b.n	8005c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	43da      	mvns	r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	bf14      	ite	ne
 8005c10:	2301      	movne	r3, #1
 8005c12:	2300      	moveq	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d016      	beq.n	8005c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c34:	f043 0220 	orr.w	r2, r3, #32
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e021      	b.n	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d10c      	bne.n	8005c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	43da      	mvns	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bf14      	ite	ne
 8005c64:	2301      	movne	r3, #1
 8005c66:	2300      	moveq	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	e00b      	b.n	8005c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	43da      	mvns	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4013      	ands	r3, r2
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	bf14      	ite	ne
 8005c7e:	2301      	movne	r3, #1
 8005c80:	2300      	moveq	r3, #0
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f47f af6d 	bne.w	8005b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ca0:	e034      	b.n	8005d0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f886 	bl	8005db4 <I2C_IsAcknowledgeFailed>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e034      	b.n	8005d1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cb8:	d028      	beq.n	8005d0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cba:	f7fc fac9 	bl	8002250 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d302      	bcc.n	8005cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d11d      	bne.n	8005d0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cda:	2b80      	cmp	r3, #128	@ 0x80
 8005cdc:	d016      	beq.n	8005d0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf8:	f043 0220 	orr.w	r2, r3, #32
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e007      	b.n	8005d1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d16:	2b80      	cmp	r3, #128	@ 0x80
 8005d18:	d1c3      	bne.n	8005ca2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d30:	e034      	b.n	8005d9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 f83e 	bl	8005db4 <I2C_IsAcknowledgeFailed>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e034      	b.n	8005dac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d48:	d028      	beq.n	8005d9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4a:	f7fc fa81 	bl	8002250 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d302      	bcc.n	8005d60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d11d      	bne.n	8005d9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d016      	beq.n	8005d9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d88:	f043 0220 	orr.w	r2, r3, #32
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e007      	b.n	8005dac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d1c3      	bne.n	8005d32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dca:	d11b      	bne.n	8005e04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005dd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df0:	f043 0204 	orr.w	r2, r3, #4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e000      	b.n	8005e06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
	...

08005e14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e128      	b.n	8006078 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a90      	ldr	r2, [pc, #576]	@ (8006080 <HAL_I2S_Init+0x26c>)
 8005e3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7fb fddd 	bl	8001a00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005e5c:	f023 030f 	bic.w	r3, r3, #15
 8005e60:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2202      	movs	r2, #2
 8005e68:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d060      	beq.n	8005f34 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005e7a:	2310      	movs	r3, #16
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	e001      	b.n	8005e84 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005e80:	2320      	movs	r3, #32
 8005e82:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d802      	bhi.n	8005e92 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005e92:	2001      	movs	r0, #1
 8005e94:	f001 fa0a 	bl	80072ac <HAL_RCCEx_GetPeriphCLKFreq>
 8005e98:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ea2:	d125      	bne.n	8005ef0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d010      	beq.n	8005ece <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	3305      	adds	r3, #5
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	e01f      	b.n	8005f0e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eea:	3305      	adds	r3, #5
 8005eec:	613b      	str	r3, [r7, #16]
 8005eee:	e00e      	b.n	8005f0e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	461a      	mov	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	3305      	adds	r3, #5
 8005f0c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	4a5c      	ldr	r2, [pc, #368]	@ (8006084 <HAL_I2S_Init+0x270>)
 8005f12:	fba2 2303 	umull	r2, r3, r2, r3
 8005f16:	08db      	lsrs	r3, r3, #3
 8005f18:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	085b      	lsrs	r3, r3, #1
 8005f2a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	e003      	b.n	8005f3c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005f34:	2302      	movs	r3, #2
 8005f36:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d902      	bls.n	8005f48 <HAL_I2S_Init+0x134>
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	2bff      	cmp	r3, #255	@ 0xff
 8005f46:	d907      	bls.n	8005f58 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f4c:	f043 0210 	orr.w	r2, r3, #16
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e08f      	b.n	8006078 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	ea42 0103 	orr.w	r1, r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005f76:	f023 030f 	bic.w	r3, r3, #15
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6851      	ldr	r1, [r2, #4]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6892      	ldr	r2, [r2, #8]
 8005f82:	4311      	orrs	r1, r2
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	68d2      	ldr	r2, [r2, #12]
 8005f88:	4311      	orrs	r1, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6992      	ldr	r2, [r2, #24]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f9a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d161      	bne.n	8006068 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a38      	ldr	r2, [pc, #224]	@ (8006088 <HAL_I2S_Init+0x274>)
 8005fa8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a37      	ldr	r2, [pc, #220]	@ (800608c <HAL_I2S_Init+0x278>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d101      	bne.n	8005fb8 <HAL_I2S_Init+0x1a4>
 8005fb4:	4b36      	ldr	r3, [pc, #216]	@ (8006090 <HAL_I2S_Init+0x27c>)
 8005fb6:	e001      	b.n	8005fbc <HAL_I2S_Init+0x1a8>
 8005fb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	4932      	ldr	r1, [pc, #200]	@ (800608c <HAL_I2S_Init+0x278>)
 8005fc4:	428a      	cmp	r2, r1
 8005fc6:	d101      	bne.n	8005fcc <HAL_I2S_Init+0x1b8>
 8005fc8:	4a31      	ldr	r2, [pc, #196]	@ (8006090 <HAL_I2S_Init+0x27c>)
 8005fca:	e001      	b.n	8005fd0 <HAL_I2S_Init+0x1bc>
 8005fcc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005fd0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005fd4:	f023 030f 	bic.w	r3, r3, #15
 8005fd8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a2b      	ldr	r2, [pc, #172]	@ (800608c <HAL_I2S_Init+0x278>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d101      	bne.n	8005fe8 <HAL_I2S_Init+0x1d4>
 8005fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8006090 <HAL_I2S_Init+0x27c>)
 8005fe6:	e001      	b.n	8005fec <HAL_I2S_Init+0x1d8>
 8005fe8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fec:	2202      	movs	r2, #2
 8005fee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a25      	ldr	r2, [pc, #148]	@ (800608c <HAL_I2S_Init+0x278>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d101      	bne.n	8005ffe <HAL_I2S_Init+0x1ea>
 8005ffa:	4b25      	ldr	r3, [pc, #148]	@ (8006090 <HAL_I2S_Init+0x27c>)
 8005ffc:	e001      	b.n	8006002 <HAL_I2S_Init+0x1ee>
 8005ffe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800600e:	d003      	beq.n	8006018 <HAL_I2S_Init+0x204>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d103      	bne.n	8006020 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006018:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	e001      	b.n	8006024 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006020:	2300      	movs	r3, #0
 8006022:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800602e:	4313      	orrs	r3, r2
 8006030:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006038:	4313      	orrs	r3, r2
 800603a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006042:	4313      	orrs	r3, r2
 8006044:	b29a      	uxth	r2, r3
 8006046:	897b      	ldrh	r3, [r7, #10]
 8006048:	4313      	orrs	r3, r2
 800604a:	b29b      	uxth	r3, r3
 800604c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006050:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a0d      	ldr	r2, [pc, #52]	@ (800608c <HAL_I2S_Init+0x278>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d101      	bne.n	8006060 <HAL_I2S_Init+0x24c>
 800605c:	4b0c      	ldr	r3, [pc, #48]	@ (8006090 <HAL_I2S_Init+0x27c>)
 800605e:	e001      	b.n	8006064 <HAL_I2S_Init+0x250>
 8006060:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006064:	897a      	ldrh	r2, [r7, #10]
 8006066:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	0800618b 	.word	0x0800618b
 8006084:	cccccccd 	.word	0xcccccccd
 8006088:	080062a1 	.word	0x080062a1
 800608c:	40003800 	.word	0x40003800
 8006090:	40003400 	.word	0x40003400

08006094 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	881a      	ldrh	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	1c9a      	adds	r2, r3, #2
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10e      	bne.n	8006124 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006114:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff ffb8 	bl	8006094 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613e:	b292      	uxth	r2, r2
 8006140:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	1c9a      	adds	r2, r3, #2
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10e      	bne.n	8006182 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006172:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7ff ff93 	bl	80060a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b086      	sub	sp, #24
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d13a      	bne.n	800621c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d109      	bne.n	80061c4 <I2S_IRQHandler+0x3a>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ba:	2b40      	cmp	r3, #64	@ 0x40
 80061bc:	d102      	bne.n	80061c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff ffb4 	bl	800612c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ca:	2b40      	cmp	r3, #64	@ 0x40
 80061cc:	d126      	bne.n	800621c <I2S_IRQHandler+0x92>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f003 0320 	and.w	r3, r3, #32
 80061d8:	2b20      	cmp	r3, #32
 80061da:	d11f      	bne.n	800621c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80061ec:	2300      	movs	r3, #0
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620e:	f043 0202 	orr.w	r2, r3, #2
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7ff ff50 	bl	80060bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b03      	cmp	r3, #3
 8006226:	d136      	bne.n	8006296 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b02      	cmp	r3, #2
 8006230:	d109      	bne.n	8006246 <I2S_IRQHandler+0xbc>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623c:	2b80      	cmp	r3, #128	@ 0x80
 800623e:	d102      	bne.n	8006246 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff ff45 	bl	80060d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b08      	cmp	r3, #8
 800624e:	d122      	bne.n	8006296 <I2S_IRQHandler+0x10c>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b20      	cmp	r3, #32
 800625c:	d11b      	bne.n	8006296 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800626c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006288:	f043 0204 	orr.w	r2, r3, #4
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7ff ff13 	bl	80060bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006296:	bf00      	nop
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a92      	ldr	r2, [pc, #584]	@ (8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d101      	bne.n	80062be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80062ba:	4b92      	ldr	r3, [pc, #584]	@ (8006504 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062bc:	e001      	b.n	80062c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80062be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a8b      	ldr	r2, [pc, #556]	@ (8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d101      	bne.n	80062dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80062d8:	4b8a      	ldr	r3, [pc, #552]	@ (8006504 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062da:	e001      	b.n	80062e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80062dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ec:	d004      	beq.n	80062f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f040 8099 	bne.w	800642a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d107      	bne.n	8006312 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f925 	bl	800655c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b01      	cmp	r3, #1
 800631a:	d107      	bne.n	800632c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f9c8 	bl	80066bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006332:	2b40      	cmp	r3, #64	@ 0x40
 8006334:	d13a      	bne.n	80063ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b00      	cmp	r3, #0
 800633e:	d035      	beq.n	80063ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a6e      	ldr	r2, [pc, #440]	@ (8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d101      	bne.n	800634e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800634a:	4b6e      	ldr	r3, [pc, #440]	@ (8006504 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800634c:	e001      	b.n	8006352 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800634e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4969      	ldr	r1, [pc, #420]	@ (8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800635a:	428b      	cmp	r3, r1
 800635c:	d101      	bne.n	8006362 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800635e:	4b69      	ldr	r3, [pc, #420]	@ (8006504 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006360:	e001      	b.n	8006366 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006362:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006366:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800636a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800637a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800637c:	2300      	movs	r3, #0
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800639e:	f043 0202 	orr.w	r2, r3, #2
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff fe88 	bl	80060bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b08      	cmp	r3, #8
 80063b4:	f040 80c3 	bne.w	800653e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 80bd 	beq.w	800653e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80063d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a49      	ldr	r2, [pc, #292]	@ (8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d101      	bne.n	80063e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80063de:	4b49      	ldr	r3, [pc, #292]	@ (8006504 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063e0:	e001      	b.n	80063e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80063e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4944      	ldr	r1, [pc, #272]	@ (8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063ee:	428b      	cmp	r3, r1
 80063f0:	d101      	bne.n	80063f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80063f2:	4b44      	ldr	r3, [pc, #272]	@ (8006504 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063f4:	e001      	b.n	80063fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80063f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80063fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006400:	2300      	movs	r3, #0
 8006402:	60bb      	str	r3, [r7, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	60bb      	str	r3, [r7, #8]
 800640c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641a:	f043 0204 	orr.w	r2, r3, #4
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff fe4a 	bl	80060bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006428:	e089      	b.n	800653e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b02      	cmp	r3, #2
 8006432:	d107      	bne.n	8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f8be 	bl	80065c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b01      	cmp	r3, #1
 800644c:	d107      	bne.n	800645e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f8fd 	bl	8006658 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006464:	2b40      	cmp	r3, #64	@ 0x40
 8006466:	d12f      	bne.n	80064c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b00      	cmp	r3, #0
 8006470:	d02a      	beq.n	80064c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006480:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1e      	ldr	r2, [pc, #120]	@ (8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d101      	bne.n	8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800648c:	4b1d      	ldr	r3, [pc, #116]	@ (8006504 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800648e:	e001      	b.n	8006494 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006490:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4919      	ldr	r1, [pc, #100]	@ (8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800649c:	428b      	cmp	r3, r1
 800649e:	d101      	bne.n	80064a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80064a0:	4b18      	ldr	r3, [pc, #96]	@ (8006504 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064a2:	e001      	b.n	80064a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80064a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80064ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ba:	f043 0202 	orr.w	r2, r3, #2
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fdfa 	bl	80060bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d136      	bne.n	8006540 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d031      	beq.n	8006540 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a07      	ldr	r2, [pc, #28]	@ (8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d101      	bne.n	80064ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80064e6:	4b07      	ldr	r3, [pc, #28]	@ (8006504 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064e8:	e001      	b.n	80064ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80064ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4902      	ldr	r1, [pc, #8]	@ (8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80064f6:	428b      	cmp	r3, r1
 80064f8:	d106      	bne.n	8006508 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80064fa:	4b02      	ldr	r3, [pc, #8]	@ (8006504 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064fc:	e006      	b.n	800650c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80064fe:	bf00      	nop
 8006500:	40003800 	.word	0x40003800
 8006504:	40003400 	.word	0x40003400
 8006508:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800650c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006510:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006520:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800652e:	f043 0204 	orr.w	r2, r3, #4
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff fdc0 	bl	80060bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800653c:	e000      	b.n	8006540 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800653e:	bf00      	nop
}
 8006540:	bf00      	nop
 8006542:	3720      	adds	r7, #32
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	1c99      	adds	r1, r3, #2
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6251      	str	r1, [r2, #36]	@ 0x24
 800656e:	881a      	ldrh	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d113      	bne.n	80065b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800659c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff ffc9 	bl	8006548 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065cc:	1c99      	adds	r1, r3, #2
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6251      	str	r1, [r2, #36]	@ 0x24
 80065d2:	8819      	ldrh	r1, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006650 <I2SEx_TxISR_I2SExt+0x90>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d101      	bne.n	80065e2 <I2SEx_TxISR_I2SExt+0x22>
 80065de:	4b1d      	ldr	r3, [pc, #116]	@ (8006654 <I2SEx_TxISR_I2SExt+0x94>)
 80065e0:	e001      	b.n	80065e6 <I2SEx_TxISR_I2SExt+0x26>
 80065e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065e6:	460a      	mov	r2, r1
 80065e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d121      	bne.n	8006646 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a12      	ldr	r2, [pc, #72]	@ (8006650 <I2SEx_TxISR_I2SExt+0x90>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d101      	bne.n	8006610 <I2SEx_TxISR_I2SExt+0x50>
 800660c:	4b11      	ldr	r3, [pc, #68]	@ (8006654 <I2SEx_TxISR_I2SExt+0x94>)
 800660e:	e001      	b.n	8006614 <I2SEx_TxISR_I2SExt+0x54>
 8006610:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	490d      	ldr	r1, [pc, #52]	@ (8006650 <I2SEx_TxISR_I2SExt+0x90>)
 800661c:	428b      	cmp	r3, r1
 800661e:	d101      	bne.n	8006624 <I2SEx_TxISR_I2SExt+0x64>
 8006620:	4b0c      	ldr	r3, [pc, #48]	@ (8006654 <I2SEx_TxISR_I2SExt+0x94>)
 8006622:	e001      	b.n	8006628 <I2SEx_TxISR_I2SExt+0x68>
 8006624:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006628:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800662c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006632:	b29b      	uxth	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d106      	bne.n	8006646 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff ff81 	bl	8006548 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40003800 	.word	0x40003800
 8006654:	40003400 	.word	0x40003400

08006658 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68d8      	ldr	r0, [r3, #12]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666a:	1c99      	adds	r1, r3, #2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006670:	b282      	uxth	r2, r0
 8006672:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006678:	b29b      	uxth	r3, r3
 800667a:	3b01      	subs	r3, #1
 800667c:	b29a      	uxth	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006686:	b29b      	uxth	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d113      	bne.n	80066b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800669a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff ff4a 	bl	8006548 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a20      	ldr	r2, [pc, #128]	@ (800674c <I2SEx_RxISR_I2SExt+0x90>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d101      	bne.n	80066d2 <I2SEx_RxISR_I2SExt+0x16>
 80066ce:	4b20      	ldr	r3, [pc, #128]	@ (8006750 <I2SEx_RxISR_I2SExt+0x94>)
 80066d0:	e001      	b.n	80066d6 <I2SEx_RxISR_I2SExt+0x1a>
 80066d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066d6:	68d8      	ldr	r0, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066dc:	1c99      	adds	r1, r3, #2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80066e2:	b282      	uxth	r2, r0
 80066e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d121      	bne.n	8006742 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a12      	ldr	r2, [pc, #72]	@ (800674c <I2SEx_RxISR_I2SExt+0x90>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d101      	bne.n	800670c <I2SEx_RxISR_I2SExt+0x50>
 8006708:	4b11      	ldr	r3, [pc, #68]	@ (8006750 <I2SEx_RxISR_I2SExt+0x94>)
 800670a:	e001      	b.n	8006710 <I2SEx_RxISR_I2SExt+0x54>
 800670c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	490d      	ldr	r1, [pc, #52]	@ (800674c <I2SEx_RxISR_I2SExt+0x90>)
 8006718:	428b      	cmp	r3, r1
 800671a:	d101      	bne.n	8006720 <I2SEx_RxISR_I2SExt+0x64>
 800671c:	4b0c      	ldr	r3, [pc, #48]	@ (8006750 <I2SEx_RxISR_I2SExt+0x94>)
 800671e:	e001      	b.n	8006724 <I2SEx_RxISR_I2SExt+0x68>
 8006720:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006724:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006728:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d106      	bne.n	8006742 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff ff03 	bl	8006548 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	40003800 	.word	0x40003800
 8006750:	40003400 	.word	0x40003400

08006754 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e267      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d075      	beq.n	800685e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006772:	4b88      	ldr	r3, [pc, #544]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 030c 	and.w	r3, r3, #12
 800677a:	2b04      	cmp	r3, #4
 800677c:	d00c      	beq.n	8006798 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800677e:	4b85      	ldr	r3, [pc, #532]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006786:	2b08      	cmp	r3, #8
 8006788:	d112      	bne.n	80067b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800678a:	4b82      	ldr	r3, [pc, #520]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006792:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006796:	d10b      	bne.n	80067b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006798:	4b7e      	ldr	r3, [pc, #504]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d05b      	beq.n	800685c <HAL_RCC_OscConfig+0x108>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d157      	bne.n	800685c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e242      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b8:	d106      	bne.n	80067c8 <HAL_RCC_OscConfig+0x74>
 80067ba:	4b76      	ldr	r3, [pc, #472]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a75      	ldr	r2, [pc, #468]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80067c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	e01d      	b.n	8006804 <HAL_RCC_OscConfig+0xb0>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067d0:	d10c      	bne.n	80067ec <HAL_RCC_OscConfig+0x98>
 80067d2:	4b70      	ldr	r3, [pc, #448]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a6f      	ldr	r2, [pc, #444]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80067d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	4b6d      	ldr	r3, [pc, #436]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a6c      	ldr	r2, [pc, #432]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80067e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	e00b      	b.n	8006804 <HAL_RCC_OscConfig+0xb0>
 80067ec:	4b69      	ldr	r3, [pc, #420]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a68      	ldr	r2, [pc, #416]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80067f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	4b66      	ldr	r3, [pc, #408]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a65      	ldr	r2, [pc, #404]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80067fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d013      	beq.n	8006834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680c:	f7fb fd20 	bl	8002250 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006814:	f7fb fd1c 	bl	8002250 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b64      	cmp	r3, #100	@ 0x64
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e207      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006826:	4b5b      	ldr	r3, [pc, #364]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0f0      	beq.n	8006814 <HAL_RCC_OscConfig+0xc0>
 8006832:	e014      	b.n	800685e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006834:	f7fb fd0c 	bl	8002250 <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800683c:	f7fb fd08 	bl	8002250 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b64      	cmp	r3, #100	@ 0x64
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e1f3      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800684e:	4b51      	ldr	r3, [pc, #324]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f0      	bne.n	800683c <HAL_RCC_OscConfig+0xe8>
 800685a:	e000      	b.n	800685e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800685c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d063      	beq.n	8006932 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800686a:	4b4a      	ldr	r3, [pc, #296]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 030c 	and.w	r3, r3, #12
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00b      	beq.n	800688e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006876:	4b47      	ldr	r3, [pc, #284]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800687e:	2b08      	cmp	r3, #8
 8006880:	d11c      	bne.n	80068bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006882:	4b44      	ldr	r3, [pc, #272]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d116      	bne.n	80068bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800688e:	4b41      	ldr	r3, [pc, #260]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <HAL_RCC_OscConfig+0x152>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d001      	beq.n	80068a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e1c7      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	4937      	ldr	r1, [pc, #220]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ba:	e03a      	b.n	8006932 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d020      	beq.n	8006906 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068c4:	4b34      	ldr	r3, [pc, #208]	@ (8006998 <HAL_RCC_OscConfig+0x244>)
 80068c6:	2201      	movs	r2, #1
 80068c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ca:	f7fb fcc1 	bl	8002250 <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068d0:	e008      	b.n	80068e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068d2:	f7fb fcbd 	bl	8002250 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e1a8      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0f0      	beq.n	80068d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f0:	4b28      	ldr	r3, [pc, #160]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	4925      	ldr	r1, [pc, #148]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 8006900:	4313      	orrs	r3, r2
 8006902:	600b      	str	r3, [r1, #0]
 8006904:	e015      	b.n	8006932 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006906:	4b24      	ldr	r3, [pc, #144]	@ (8006998 <HAL_RCC_OscConfig+0x244>)
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690c:	f7fb fca0 	bl	8002250 <HAL_GetTick>
 8006910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006912:	e008      	b.n	8006926 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006914:	f7fb fc9c 	bl	8002250 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d901      	bls.n	8006926 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e187      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006926:	4b1b      	ldr	r3, [pc, #108]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1f0      	bne.n	8006914 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d036      	beq.n	80069ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d016      	beq.n	8006974 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006946:	4b15      	ldr	r3, [pc, #84]	@ (800699c <HAL_RCC_OscConfig+0x248>)
 8006948:	2201      	movs	r2, #1
 800694a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800694c:	f7fb fc80 	bl	8002250 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006954:	f7fb fc7c 	bl	8002250 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e167      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006966:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <HAL_RCC_OscConfig+0x240>)
 8006968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f0      	beq.n	8006954 <HAL_RCC_OscConfig+0x200>
 8006972:	e01b      	b.n	80069ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006974:	4b09      	ldr	r3, [pc, #36]	@ (800699c <HAL_RCC_OscConfig+0x248>)
 8006976:	2200      	movs	r2, #0
 8006978:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800697a:	f7fb fc69 	bl	8002250 <HAL_GetTick>
 800697e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006980:	e00e      	b.n	80069a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006982:	f7fb fc65 	bl	8002250 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d907      	bls.n	80069a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e150      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
 8006994:	40023800 	.word	0x40023800
 8006998:	42470000 	.word	0x42470000
 800699c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069a0:	4b88      	ldr	r3, [pc, #544]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 80069a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1ea      	bne.n	8006982 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 8097 	beq.w	8006ae8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069ba:	2300      	movs	r3, #0
 80069bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069be:	4b81      	ldr	r3, [pc, #516]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 80069c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10f      	bne.n	80069ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069ca:	2300      	movs	r3, #0
 80069cc:	60bb      	str	r3, [r7, #8]
 80069ce:	4b7d      	ldr	r3, [pc, #500]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 80069d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d2:	4a7c      	ldr	r2, [pc, #496]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 80069d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80069da:	4b7a      	ldr	r3, [pc, #488]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 80069dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069e2:	60bb      	str	r3, [r7, #8]
 80069e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069e6:	2301      	movs	r3, #1
 80069e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ea:	4b77      	ldr	r3, [pc, #476]	@ (8006bc8 <HAL_RCC_OscConfig+0x474>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d118      	bne.n	8006a28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069f6:	4b74      	ldr	r3, [pc, #464]	@ (8006bc8 <HAL_RCC_OscConfig+0x474>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a73      	ldr	r2, [pc, #460]	@ (8006bc8 <HAL_RCC_OscConfig+0x474>)
 80069fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a02:	f7fb fc25 	bl	8002250 <HAL_GetTick>
 8006a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a08:	e008      	b.n	8006a1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a0a:	f7fb fc21 	bl	8002250 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d901      	bls.n	8006a1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e10c      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8006bc8 <HAL_RCC_OscConfig+0x474>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0f0      	beq.n	8006a0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d106      	bne.n	8006a3e <HAL_RCC_OscConfig+0x2ea>
 8006a30:	4b64      	ldr	r3, [pc, #400]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a34:	4a63      	ldr	r2, [pc, #396]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006a36:	f043 0301 	orr.w	r3, r3, #1
 8006a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a3c:	e01c      	b.n	8006a78 <HAL_RCC_OscConfig+0x324>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	2b05      	cmp	r3, #5
 8006a44:	d10c      	bne.n	8006a60 <HAL_RCC_OscConfig+0x30c>
 8006a46:	4b5f      	ldr	r3, [pc, #380]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a4a:	4a5e      	ldr	r2, [pc, #376]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006a4c:	f043 0304 	orr.w	r3, r3, #4
 8006a50:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a52:	4b5c      	ldr	r3, [pc, #368]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a56:	4a5b      	ldr	r2, [pc, #364]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006a58:	f043 0301 	orr.w	r3, r3, #1
 8006a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a5e:	e00b      	b.n	8006a78 <HAL_RCC_OscConfig+0x324>
 8006a60:	4b58      	ldr	r3, [pc, #352]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a64:	4a57      	ldr	r2, [pc, #348]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006a66:	f023 0301 	bic.w	r3, r3, #1
 8006a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a6c:	4b55      	ldr	r3, [pc, #340]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a70:	4a54      	ldr	r2, [pc, #336]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006a72:	f023 0304 	bic.w	r3, r3, #4
 8006a76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d015      	beq.n	8006aac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a80:	f7fb fbe6 	bl	8002250 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a86:	e00a      	b.n	8006a9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a88:	f7fb fbe2 	bl	8002250 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e0cb      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a9e:	4b49      	ldr	r3, [pc, #292]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0ee      	beq.n	8006a88 <HAL_RCC_OscConfig+0x334>
 8006aaa:	e014      	b.n	8006ad6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aac:	f7fb fbd0 	bl	8002250 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ab2:	e00a      	b.n	8006aca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ab4:	f7fb fbcc 	bl	8002250 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e0b5      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aca:	4b3e      	ldr	r3, [pc, #248]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1ee      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d105      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006adc:	4b39      	ldr	r3, [pc, #228]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae0:	4a38      	ldr	r2, [pc, #224]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ae6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 80a1 	beq.w	8006c34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006af2:	4b34      	ldr	r3, [pc, #208]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 030c 	and.w	r3, r3, #12
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d05c      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d141      	bne.n	8006b8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b06:	4b31      	ldr	r3, [pc, #196]	@ (8006bcc <HAL_RCC_OscConfig+0x478>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b0c:	f7fb fba0 	bl	8002250 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b14:	f7fb fb9c 	bl	8002250 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e087      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b26:	4b27      	ldr	r3, [pc, #156]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1f0      	bne.n	8006b14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69da      	ldr	r2, [r3, #28]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b40:	019b      	lsls	r3, r3, #6
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b48:	085b      	lsrs	r3, r3, #1
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	041b      	lsls	r3, r3, #16
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b54:	061b      	lsls	r3, r3, #24
 8006b56:	491b      	ldr	r1, [pc, #108]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bcc <HAL_RCC_OscConfig+0x478>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b62:	f7fb fb75 	bl	8002250 <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b68:	e008      	b.n	8006b7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b6a:	f7fb fb71 	bl	8002250 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e05c      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b7c:	4b11      	ldr	r3, [pc, #68]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d0f0      	beq.n	8006b6a <HAL_RCC_OscConfig+0x416>
 8006b88:	e054      	b.n	8006c34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b8a:	4b10      	ldr	r3, [pc, #64]	@ (8006bcc <HAL_RCC_OscConfig+0x478>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b90:	f7fb fb5e 	bl	8002250 <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b98:	f7fb fb5a 	bl	8002250 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e045      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006baa:	4b06      	ldr	r3, [pc, #24]	@ (8006bc4 <HAL_RCC_OscConfig+0x470>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f0      	bne.n	8006b98 <HAL_RCC_OscConfig+0x444>
 8006bb6:	e03d      	b.n	8006c34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d107      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e038      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	40007000 	.word	0x40007000
 8006bcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c40 <HAL_RCC_OscConfig+0x4ec>)
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d028      	beq.n	8006c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d121      	bne.n	8006c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d11a      	bne.n	8006c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c00:	4013      	ands	r3, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d111      	bne.n	8006c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c16:	085b      	lsrs	r3, r3, #1
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d107      	bne.n	8006c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d001      	beq.n	8006c34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e000      	b.n	8006c36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	40023800 	.word	0x40023800

08006c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e0cc      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c58:	4b68      	ldr	r3, [pc, #416]	@ (8006dfc <HAL_RCC_ClockConfig+0x1b8>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0307 	and.w	r3, r3, #7
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d90c      	bls.n	8006c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c66:	4b65      	ldr	r3, [pc, #404]	@ (8006dfc <HAL_RCC_ClockConfig+0x1b8>)
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c6e:	4b63      	ldr	r3, [pc, #396]	@ (8006dfc <HAL_RCC_ClockConfig+0x1b8>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d001      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e0b8      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d020      	beq.n	8006cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d005      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c98:	4b59      	ldr	r3, [pc, #356]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	4a58      	ldr	r2, [pc, #352]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ca2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0308 	and.w	r3, r3, #8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cb0:	4b53      	ldr	r3, [pc, #332]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	4a52      	ldr	r2, [pc, #328]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cbc:	4b50      	ldr	r3, [pc, #320]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	494d      	ldr	r1, [pc, #308]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d044      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d107      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ce2:	4b47      	ldr	r3, [pc, #284]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d119      	bne.n	8006d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e07f      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d003      	beq.n	8006d02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d107      	bne.n	8006d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d02:	4b3f      	ldr	r3, [pc, #252]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e06f      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d12:	4b3b      	ldr	r3, [pc, #236]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e067      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d22:	4b37      	ldr	r3, [pc, #220]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f023 0203 	bic.w	r2, r3, #3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	4934      	ldr	r1, [pc, #208]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d34:	f7fb fa8c 	bl	8002250 <HAL_GetTick>
 8006d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d3a:	e00a      	b.n	8006d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d3c:	f7fb fa88 	bl	8002250 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e04f      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d52:	4b2b      	ldr	r3, [pc, #172]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 020c 	and.w	r2, r3, #12
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d1eb      	bne.n	8006d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d64:	4b25      	ldr	r3, [pc, #148]	@ (8006dfc <HAL_RCC_ClockConfig+0x1b8>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d20c      	bcs.n	8006d8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d72:	4b22      	ldr	r3, [pc, #136]	@ (8006dfc <HAL_RCC_ClockConfig+0x1b8>)
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d7a:	4b20      	ldr	r3, [pc, #128]	@ (8006dfc <HAL_RCC_ClockConfig+0x1b8>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d001      	beq.n	8006d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e032      	b.n	8006df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d008      	beq.n	8006daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d98:	4b19      	ldr	r3, [pc, #100]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	4916      	ldr	r1, [pc, #88]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0308 	and.w	r3, r3, #8
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006db6:	4b12      	ldr	r3, [pc, #72]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	490e      	ldr	r1, [pc, #56]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006dca:	f000 f821 	bl	8006e10 <HAL_RCC_GetSysClockFreq>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e00 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	091b      	lsrs	r3, r3, #4
 8006dd6:	f003 030f 	and.w	r3, r3, #15
 8006dda:	490a      	ldr	r1, [pc, #40]	@ (8006e04 <HAL_RCC_ClockConfig+0x1c0>)
 8006ddc:	5ccb      	ldrb	r3, [r1, r3]
 8006dde:	fa22 f303 	lsr.w	r3, r2, r3
 8006de2:	4a09      	ldr	r2, [pc, #36]	@ (8006e08 <HAL_RCC_ClockConfig+0x1c4>)
 8006de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006de6:	4b09      	ldr	r3, [pc, #36]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fa ff88 	bl	8001d00 <HAL_InitTick>

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40023c00 	.word	0x40023c00
 8006e00:	40023800 	.word	0x40023800
 8006e04:	0801a0c0 	.word	0x0801a0c0
 8006e08:	20000008 	.word	0x20000008
 8006e0c:	2000000c 	.word	0x2000000c

08006e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e14:	b094      	sub	sp, #80	@ 0x50
 8006e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e28:	4b79      	ldr	r3, [pc, #484]	@ (8007010 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 030c 	and.w	r3, r3, #12
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d00d      	beq.n	8006e50 <HAL_RCC_GetSysClockFreq+0x40>
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	f200 80e1 	bhi.w	8006ffc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <HAL_RCC_GetSysClockFreq+0x34>
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d003      	beq.n	8006e4a <HAL_RCC_GetSysClockFreq+0x3a>
 8006e42:	e0db      	b.n	8006ffc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e44:	4b73      	ldr	r3, [pc, #460]	@ (8007014 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e48:	e0db      	b.n	8007002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e4a:	4b73      	ldr	r3, [pc, #460]	@ (8007018 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e4e:	e0d8      	b.n	8007002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e50:	4b6f      	ldr	r3, [pc, #444]	@ (8007010 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e5a:	4b6d      	ldr	r3, [pc, #436]	@ (8007010 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d063      	beq.n	8006f2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e66:	4b6a      	ldr	r3, [pc, #424]	@ (8007010 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	099b      	lsrs	r3, r3, #6
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006e82:	4622      	mov	r2, r4
 8006e84:	462b      	mov	r3, r5
 8006e86:	f04f 0000 	mov.w	r0, #0
 8006e8a:	f04f 0100 	mov.w	r1, #0
 8006e8e:	0159      	lsls	r1, r3, #5
 8006e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e94:	0150      	lsls	r0, r2, #5
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	1a51      	subs	r1, r2, r1
 8006e9e:	6139      	str	r1, [r7, #16]
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	f04f 0300 	mov.w	r3, #0
 8006eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eb4:	4659      	mov	r1, fp
 8006eb6:	018b      	lsls	r3, r1, #6
 8006eb8:	4651      	mov	r1, sl
 8006eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ebe:	4651      	mov	r1, sl
 8006ec0:	018a      	lsls	r2, r1, #6
 8006ec2:	4651      	mov	r1, sl
 8006ec4:	ebb2 0801 	subs.w	r8, r2, r1
 8006ec8:	4659      	mov	r1, fp
 8006eca:	eb63 0901 	sbc.w	r9, r3, r1
 8006ece:	f04f 0200 	mov.w	r2, #0
 8006ed2:	f04f 0300 	mov.w	r3, #0
 8006ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ee2:	4690      	mov	r8, r2
 8006ee4:	4699      	mov	r9, r3
 8006ee6:	4623      	mov	r3, r4
 8006ee8:	eb18 0303 	adds.w	r3, r8, r3
 8006eec:	60bb      	str	r3, [r7, #8]
 8006eee:	462b      	mov	r3, r5
 8006ef0:	eb49 0303 	adc.w	r3, r9, r3
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	f04f 0300 	mov.w	r3, #0
 8006efe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f02:	4629      	mov	r1, r5
 8006f04:	024b      	lsls	r3, r1, #9
 8006f06:	4621      	mov	r1, r4
 8006f08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	024a      	lsls	r2, r1, #9
 8006f10:	4610      	mov	r0, r2
 8006f12:	4619      	mov	r1, r3
 8006f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f16:	2200      	movs	r2, #0
 8006f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f20:	f7f9 fa0e 	bl	8000340 <__aeabi_uldivmod>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4613      	mov	r3, r2
 8006f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f2c:	e058      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f2e:	4b38      	ldr	r3, [pc, #224]	@ (8007010 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	099b      	lsrs	r3, r3, #6
 8006f34:	2200      	movs	r2, #0
 8006f36:	4618      	mov	r0, r3
 8006f38:	4611      	mov	r1, r2
 8006f3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f3e:	623b      	str	r3, [r7, #32]
 8006f40:	2300      	movs	r3, #0
 8006f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f48:	4642      	mov	r2, r8
 8006f4a:	464b      	mov	r3, r9
 8006f4c:	f04f 0000 	mov.w	r0, #0
 8006f50:	f04f 0100 	mov.w	r1, #0
 8006f54:	0159      	lsls	r1, r3, #5
 8006f56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f5a:	0150      	lsls	r0, r2, #5
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4641      	mov	r1, r8
 8006f62:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f66:	4649      	mov	r1, r9
 8006f68:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f80:	ebb2 040a 	subs.w	r4, r2, sl
 8006f84:	eb63 050b 	sbc.w	r5, r3, fp
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	00eb      	lsls	r3, r5, #3
 8006f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f96:	00e2      	lsls	r2, r4, #3
 8006f98:	4614      	mov	r4, r2
 8006f9a:	461d      	mov	r5, r3
 8006f9c:	4643      	mov	r3, r8
 8006f9e:	18e3      	adds	r3, r4, r3
 8006fa0:	603b      	str	r3, [r7, #0]
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	eb45 0303 	adc.w	r3, r5, r3
 8006fa8:	607b      	str	r3, [r7, #4]
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	028b      	lsls	r3, r1, #10
 8006fba:	4621      	mov	r1, r4
 8006fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	028a      	lsls	r2, r1, #10
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fca:	2200      	movs	r2, #0
 8006fcc:	61bb      	str	r3, [r7, #24]
 8006fce:	61fa      	str	r2, [r7, #28]
 8006fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fd4:	f7f9 f9b4 	bl	8000340 <__aeabi_uldivmod>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4613      	mov	r3, r2
 8006fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8007010 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	0c1b      	lsrs	r3, r3, #16
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	3301      	adds	r3, #1
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006ff0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ffa:	e002      	b.n	8007002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ffc:	4b05      	ldr	r3, [pc, #20]	@ (8007014 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007004:	4618      	mov	r0, r3
 8007006:	3750      	adds	r7, #80	@ 0x50
 8007008:	46bd      	mov	sp, r7
 800700a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800700e:	bf00      	nop
 8007010:	40023800 	.word	0x40023800
 8007014:	00f42400 	.word	0x00f42400
 8007018:	007a1200 	.word	0x007a1200

0800701c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007020:	4b03      	ldr	r3, [pc, #12]	@ (8007030 <HAL_RCC_GetHCLKFreq+0x14>)
 8007022:	681b      	ldr	r3, [r3, #0]
}
 8007024:	4618      	mov	r0, r3
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20000008 	.word	0x20000008

08007034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007038:	f7ff fff0 	bl	800701c <HAL_RCC_GetHCLKFreq>
 800703c:	4602      	mov	r2, r0
 800703e:	4b05      	ldr	r3, [pc, #20]	@ (8007054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	0a9b      	lsrs	r3, r3, #10
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	4903      	ldr	r1, [pc, #12]	@ (8007058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800704a:	5ccb      	ldrb	r3, [r1, r3]
 800704c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007050:	4618      	mov	r0, r3
 8007052:	bd80      	pop	{r7, pc}
 8007054:	40023800 	.word	0x40023800
 8007058:	0801a0d0 	.word	0x0801a0d0

0800705c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007060:	f7ff ffdc 	bl	800701c <HAL_RCC_GetHCLKFreq>
 8007064:	4602      	mov	r2, r0
 8007066:	4b05      	ldr	r3, [pc, #20]	@ (800707c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	0b5b      	lsrs	r3, r3, #13
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	4903      	ldr	r1, [pc, #12]	@ (8007080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007072:	5ccb      	ldrb	r3, [r1, r3]
 8007074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007078:	4618      	mov	r0, r3
 800707a:	bd80      	pop	{r7, pc}
 800707c:	40023800 	.word	0x40023800
 8007080:	0801a0d0 	.word	0x0801a0d0

08007084 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	220f      	movs	r2, #15
 8007092:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007094:	4b12      	ldr	r3, [pc, #72]	@ (80070e0 <HAL_RCC_GetClockConfig+0x5c>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 0203 	and.w	r2, r3, #3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80070a0:	4b0f      	ldr	r3, [pc, #60]	@ (80070e0 <HAL_RCC_GetClockConfig+0x5c>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80070ac:	4b0c      	ldr	r3, [pc, #48]	@ (80070e0 <HAL_RCC_GetClockConfig+0x5c>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80070b8:	4b09      	ldr	r3, [pc, #36]	@ (80070e0 <HAL_RCC_GetClockConfig+0x5c>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	08db      	lsrs	r3, r3, #3
 80070be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070c6:	4b07      	ldr	r3, [pc, #28]	@ (80070e4 <HAL_RCC_GetClockConfig+0x60>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0207 	and.w	r2, r3, #7
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	601a      	str	r2, [r3, #0]
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40023800 	.word	0x40023800
 80070e4:	40023c00 	.word	0x40023c00

080070e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d105      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800710c:	2b00      	cmp	r3, #0
 800710e:	d035      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007110:	4b62      	ldr	r3, [pc, #392]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007116:	f7fb f89b 	bl	8002250 <HAL_GetTick>
 800711a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800711c:	e008      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800711e:	f7fb f897 	bl	8002250 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b02      	cmp	r3, #2
 800712a:	d901      	bls.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e0b0      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007130:	4b5b      	ldr	r3, [pc, #364]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1f0      	bne.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	019a      	lsls	r2, r3, #6
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	071b      	lsls	r3, r3, #28
 8007148:	4955      	ldr	r1, [pc, #340]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007150:	4b52      	ldr	r3, [pc, #328]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007152:	2201      	movs	r2, #1
 8007154:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007156:	f7fb f87b 	bl	8002250 <HAL_GetTick>
 800715a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800715c:	e008      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800715e:	f7fb f877 	bl	8002250 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d901      	bls.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e090      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007170:	4b4b      	ldr	r3, [pc, #300]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0f0      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8083 	beq.w	8007290 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	4b44      	ldr	r3, [pc, #272]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007192:	4a43      	ldr	r2, [pc, #268]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007198:	6413      	str	r3, [r2, #64]	@ 0x40
 800719a:	4b41      	ldr	r3, [pc, #260]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800719c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071a6:	4b3f      	ldr	r3, [pc, #252]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a3e      	ldr	r2, [pc, #248]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071b2:	f7fb f84d 	bl	8002250 <HAL_GetTick>
 80071b6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80071b8:	e008      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ba:	f7fb f849 	bl	8002250 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e062      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80071cc:	4b35      	ldr	r3, [pc, #212]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0f0      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071d8:	4b31      	ldr	r3, [pc, #196]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071e0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d02f      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d028      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071f6:	4b2a      	ldr	r3, [pc, #168]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007200:	4b29      	ldr	r3, [pc, #164]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007202:	2201      	movs	r2, #1
 8007204:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007206:	4b28      	ldr	r3, [pc, #160]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800720c:	4a24      	ldr	r2, [pc, #144]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007212:	4b23      	ldr	r3, [pc, #140]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b01      	cmp	r3, #1
 800721c:	d114      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800721e:	f7fb f817 	bl	8002250 <HAL_GetTick>
 8007222:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007224:	e00a      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007226:	f7fb f813 	bl	8002250 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007234:	4293      	cmp	r3, r2
 8007236:	d901      	bls.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e02a      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800723c:	4b18      	ldr	r3, [pc, #96]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800723e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0ee      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007250:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007254:	d10d      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007256:	4b12      	ldr	r3, [pc, #72]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800726a:	490d      	ldr	r1, [pc, #52]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800726c:	4313      	orrs	r3, r2
 800726e:	608b      	str	r3, [r1, #8]
 8007270:	e005      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007272:	4b0b      	ldr	r3, [pc, #44]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	4a0a      	ldr	r2, [pc, #40]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007278:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800727c:	6093      	str	r3, [r2, #8]
 800727e:	4b08      	ldr	r3, [pc, #32]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007280:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800728a:	4905      	ldr	r1, [pc, #20]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800728c:	4313      	orrs	r3, r2
 800728e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	42470068 	.word	0x42470068
 80072a0:	40023800 	.word	0x40023800
 80072a4:	40007000 	.word	0x40007000
 80072a8:	42470e40 	.word	0x42470e40

080072ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d13f      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80072ca:	4b24      	ldr	r3, [pc, #144]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d006      	beq.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80072e0:	d12f      	bne.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80072e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80072e4:	617b      	str	r3, [r7, #20]
          break;
 80072e6:	e02f      	b.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80072e8:	4b1c      	ldr	r3, [pc, #112]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072f4:	d108      	bne.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072f6:	4b19      	ldr	r3, [pc, #100]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072fe:	4a19      	ldr	r2, [pc, #100]	@ (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007300:	fbb2 f3f3 	udiv	r3, r2, r3
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	e007      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007308:	4b14      	ldr	r3, [pc, #80]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007310:	4a15      	ldr	r2, [pc, #84]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007312:	fbb2 f3f3 	udiv	r3, r2, r3
 8007316:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007318:	4b10      	ldr	r3, [pc, #64]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800731a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800731e:	099b      	lsrs	r3, r3, #6
 8007320:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	fb02 f303 	mul.w	r3, r2, r3
 800732a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800732c:	4b0b      	ldr	r3, [pc, #44]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800732e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007332:	0f1b      	lsrs	r3, r3, #28
 8007334:	f003 0307 	and.w	r3, r3, #7
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	fbb2 f3f3 	udiv	r3, r2, r3
 800733e:	617b      	str	r3, [r7, #20]
          break;
 8007340:	e002      	b.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	617b      	str	r3, [r7, #20]
          break;
 8007346:	bf00      	nop
        }
      }
      break;
 8007348:	e000      	b.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800734a:	bf00      	nop
    }
  }
  return frequency;
 800734c:	697b      	ldr	r3, [r7, #20]
}
 800734e:	4618      	mov	r0, r3
 8007350:	371c      	adds	r7, #28
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40023800 	.word	0x40023800
 8007360:	00bb8000 	.word	0x00bb8000
 8007364:	007a1200 	.word	0x007a1200
 8007368:	00f42400 	.word	0x00f42400

0800736c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e07b      	b.n	8007476 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	d108      	bne.n	8007398 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800738e:	d009      	beq.n	80073a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	61da      	str	r2, [r3, #28]
 8007396:	e005      	b.n	80073a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fa fb9e 	bl	8001b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007414:	431a      	orrs	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800741e:	431a      	orrs	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007428:	ea42 0103 	orr.w	r1, r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007430:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	0c1b      	lsrs	r3, r3, #16
 8007442:	f003 0104 	and.w	r1, r3, #4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744a:	f003 0210 	and.w	r2, r3, #16
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69da      	ldr	r2, [r3, #28]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007464:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e041      	b.n	8007514 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d106      	bne.n	80074aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f839 	bl	800751c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2202      	movs	r2, #2
 80074ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3304      	adds	r3, #4
 80074ba:	4619      	mov	r1, r3
 80074bc:	4610      	mov	r0, r2
 80074be:	f000 f9bf 	bl	8007840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b01      	cmp	r3, #1
 8007542:	d001      	beq.n	8007548 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e04e      	b.n	80075e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0201 	orr.w	r2, r2, #1
 800755e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a23      	ldr	r2, [pc, #140]	@ (80075f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d022      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007572:	d01d      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a1f      	ldr	r2, [pc, #124]	@ (80075f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d018      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a1e      	ldr	r2, [pc, #120]	@ (80075fc <HAL_TIM_Base_Start_IT+0xcc>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d013      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a1c      	ldr	r2, [pc, #112]	@ (8007600 <HAL_TIM_Base_Start_IT+0xd0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00e      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1b      	ldr	r2, [pc, #108]	@ (8007604 <HAL_TIM_Base_Start_IT+0xd4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d009      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a19      	ldr	r2, [pc, #100]	@ (8007608 <HAL_TIM_Base_Start_IT+0xd8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d004      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a18      	ldr	r2, [pc, #96]	@ (800760c <HAL_TIM_Base_Start_IT+0xdc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d111      	bne.n	80075d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b06      	cmp	r3, #6
 80075c0:	d010      	beq.n	80075e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f042 0201 	orr.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d2:	e007      	b.n	80075e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0201 	orr.w	r2, r2, #1
 80075e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40010000 	.word	0x40010000
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800
 8007600:	40000c00 	.word	0x40000c00
 8007604:	40010400 	.word	0x40010400
 8007608:	40014000 	.word	0x40014000
 800760c:	40001800 	.word	0x40001800

08007610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d020      	beq.n	8007674 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01b      	beq.n	8007674 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f06f 0202 	mvn.w	r2, #2
 8007644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f8d2 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 8007660:	e005      	b.n	800766e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8c4 	bl	80077f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f8d5 	bl	8007818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f003 0304 	and.w	r3, r3, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d020      	beq.n	80076c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01b      	beq.n	80076c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f06f 0204 	mvn.w	r2, #4
 8007690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2202      	movs	r2, #2
 8007696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f8ac 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 80076ac:	e005      	b.n	80076ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f89e 	bl	80077f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f8af 	bl	8007818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d020      	beq.n	800770c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f003 0308 	and.w	r3, r3, #8
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01b      	beq.n	800770c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f06f 0208 	mvn.w	r2, #8
 80076dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2204      	movs	r2, #4
 80076e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f886 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 80076f8:	e005      	b.n	8007706 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f878 	bl	80077f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f889 	bl	8007818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f003 0310 	and.w	r3, r3, #16
 8007712:	2b00      	cmp	r3, #0
 8007714:	d020      	beq.n	8007758 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f003 0310 	and.w	r3, r3, #16
 800771c:	2b00      	cmp	r3, #0
 800771e:	d01b      	beq.n	8007758 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f06f 0210 	mvn.w	r2, #16
 8007728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2208      	movs	r2, #8
 800772e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f860 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 8007744:	e005      	b.n	8007752 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f852 	bl	80077f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f863 	bl	8007818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00c      	beq.n	800777c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d007      	beq.n	800777c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0201 	mvn.w	r2, #1
 8007774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7f9 ff50 	bl	800161c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00c      	beq.n	80077a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800778c:	2b00      	cmp	r3, #0
 800778e:	d007      	beq.n	80077a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f900 	bl	80079a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00c      	beq.n	80077c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f834 	bl	800782c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00c      	beq.n	80077e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d007      	beq.n	80077e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f06f 0220 	mvn.w	r2, #32
 80077e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f8d2 	bl	800798c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077e8:	bf00      	nop
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a43      	ldr	r2, [pc, #268]	@ (8007960 <TIM_Base_SetConfig+0x120>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d013      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800785e:	d00f      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a40      	ldr	r2, [pc, #256]	@ (8007964 <TIM_Base_SetConfig+0x124>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00b      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a3f      	ldr	r2, [pc, #252]	@ (8007968 <TIM_Base_SetConfig+0x128>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d007      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a3e      	ldr	r2, [pc, #248]	@ (800796c <TIM_Base_SetConfig+0x12c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a3d      	ldr	r2, [pc, #244]	@ (8007970 <TIM_Base_SetConfig+0x130>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d108      	bne.n	8007892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a32      	ldr	r2, [pc, #200]	@ (8007960 <TIM_Base_SetConfig+0x120>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d02b      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078a0:	d027      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a2f      	ldr	r2, [pc, #188]	@ (8007964 <TIM_Base_SetConfig+0x124>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d023      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a2e      	ldr	r2, [pc, #184]	@ (8007968 <TIM_Base_SetConfig+0x128>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d01f      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a2d      	ldr	r2, [pc, #180]	@ (800796c <TIM_Base_SetConfig+0x12c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d01b      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a2c      	ldr	r2, [pc, #176]	@ (8007970 <TIM_Base_SetConfig+0x130>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d017      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a2b      	ldr	r2, [pc, #172]	@ (8007974 <TIM_Base_SetConfig+0x134>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d013      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a2a      	ldr	r2, [pc, #168]	@ (8007978 <TIM_Base_SetConfig+0x138>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00f      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a29      	ldr	r2, [pc, #164]	@ (800797c <TIM_Base_SetConfig+0x13c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00b      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a28      	ldr	r2, [pc, #160]	@ (8007980 <TIM_Base_SetConfig+0x140>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d007      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a27      	ldr	r2, [pc, #156]	@ (8007984 <TIM_Base_SetConfig+0x144>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d003      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a26      	ldr	r2, [pc, #152]	@ (8007988 <TIM_Base_SetConfig+0x148>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d108      	bne.n	8007904 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a0e      	ldr	r2, [pc, #56]	@ (8007960 <TIM_Base_SetConfig+0x120>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d003      	beq.n	8007932 <TIM_Base_SetConfig+0xf2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a10      	ldr	r2, [pc, #64]	@ (8007970 <TIM_Base_SetConfig+0x130>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d103      	bne.n	800793a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f043 0204 	orr.w	r2, r3, #4
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	601a      	str	r2, [r3, #0]
}
 8007952:	bf00      	nop
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40010000 	.word	0x40010000
 8007964:	40000400 	.word	0x40000400
 8007968:	40000800 	.word	0x40000800
 800796c:	40000c00 	.word	0x40000c00
 8007970:	40010400 	.word	0x40010400
 8007974:	40014000 	.word	0x40014000
 8007978:	40014400 	.word	0x40014400
 800797c:	40014800 	.word	0x40014800
 8007980:	40001800 	.word	0x40001800
 8007984:	40001c00 	.word	0x40001c00
 8007988:	40002000 	.word	0x40002000

0800798c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e042      	b.n	8007a4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d106      	bne.n	80079e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7fa f8d8 	bl	8001b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2224      	movs	r2, #36	@ 0x24
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68da      	ldr	r2, [r3, #12]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 f8d9 	bl	8008bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	691a      	ldr	r2, [r3, #16]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	695a      	ldr	r2, [r3, #20]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08a      	sub	sp, #40	@ 0x28
 8007a58:	af02      	add	r7, sp, #8
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	4613      	mov	r3, r2
 8007a62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d175      	bne.n	8007b60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <HAL_UART_Transmit+0x2c>
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e06e      	b.n	8007b62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2221      	movs	r2, #33	@ 0x21
 8007a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a92:	f7fa fbdd 	bl	8002250 <HAL_GetTick>
 8007a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	88fa      	ldrh	r2, [r7, #6]
 8007a9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	88fa      	ldrh	r2, [r7, #6]
 8007aa2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aac:	d108      	bne.n	8007ac0 <HAL_UART_Transmit+0x6c>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d104      	bne.n	8007ac0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	61bb      	str	r3, [r7, #24]
 8007abe:	e003      	b.n	8007ac8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ac8:	e02e      	b.n	8007b28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2180      	movs	r1, #128	@ 0x80
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 fdaa 	bl	800862e <UART_WaitOnFlagUntilTimeout>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e03a      	b.n	8007b62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10b      	bne.n	8007b0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	3302      	adds	r3, #2
 8007b06:	61bb      	str	r3, [r7, #24]
 8007b08:	e007      	b.n	8007b1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	781a      	ldrb	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	3301      	adds	r3, #1
 8007b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1cb      	bne.n	8007aca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2140      	movs	r1, #64	@ 0x40
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 fd76 	bl	800862e <UART_WaitOnFlagUntilTimeout>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e006      	b.n	8007b62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	e000      	b.n	8007b62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007b60:	2302      	movs	r3, #2
  }
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3720      	adds	r7, #32
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08c      	sub	sp, #48	@ 0x30
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b20      	cmp	r3, #32
 8007b84:	d162      	bne.n	8007c4c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <HAL_UART_Transmit_DMA+0x26>
 8007b8c:	88fb      	ldrh	r3, [r7, #6]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e05b      	b.n	8007c4e <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	88fa      	ldrh	r2, [r7, #6]
 8007ba0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	88fa      	ldrh	r2, [r7, #6]
 8007ba6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2221      	movs	r2, #33	@ 0x21
 8007bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bba:	4a27      	ldr	r2, [pc, #156]	@ (8007c58 <HAL_UART_Transmit_DMA+0xec>)
 8007bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc2:	4a26      	ldr	r2, [pc, #152]	@ (8007c5c <HAL_UART_Transmit_DMA+0xf0>)
 8007bc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bca:	4a25      	ldr	r2, [pc, #148]	@ (8007c60 <HAL_UART_Transmit_DMA+0xf4>)
 8007bcc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007bd6:	f107 0308 	add.w	r3, r7, #8
 8007bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be2:	6819      	ldr	r1, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3304      	adds	r3, #4
 8007bea:	461a      	mov	r2, r3
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	f7fa fcef 	bl	80025d0 <HAL_DMA_Start_IT>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d008      	beq.n	8007c0a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2210      	movs	r2, #16
 8007bfc:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e021      	b.n	8007c4e <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c12:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3314      	adds	r3, #20
 8007c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	e853 3f00 	ldrex	r3, [r3]
 8007c22:	617b      	str	r3, [r7, #20]
   return(result);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3314      	adds	r3, #20
 8007c32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c34:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	6a39      	ldr	r1, [r7, #32]
 8007c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c3c:	e841 2300 	strex	r3, r2, [r1]
 8007c40:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e5      	bne.n	8007c14 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	e000      	b.n	8007c4e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8007c4c:	2302      	movs	r3, #2
  }
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3730      	adds	r7, #48	@ 0x30
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	0800837d 	.word	0x0800837d
 8007c5c:	08008417 	.word	0x08008417
 8007c60:	0800859b 	.word	0x0800859b

08007c64 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	d112      	bne.n	8007ca4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <HAL_UART_Receive_DMA+0x26>
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e00b      	b.n	8007ca6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	461a      	mov	r2, r3
 8007c98:	68b9      	ldr	r1, [r7, #8]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 fd20 	bl	80086e0 <UART_Start_Receive_DMA>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	e000      	b.n	8007ca6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007ca4:	2302      	movs	r3, #2
  }
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b090      	sub	sp, #64	@ 0x40
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cc4:	2b80      	cmp	r3, #128	@ 0x80
 8007cc6:	bf0c      	ite	eq
 8007cc8:	2301      	moveq	r3, #1
 8007cca:	2300      	movne	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b21      	cmp	r3, #33	@ 0x21
 8007cda:	d128      	bne.n	8007d2e <HAL_UART_DMAStop+0x80>
 8007cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d025      	beq.n	8007d2e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3314      	adds	r3, #20
 8007ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3314      	adds	r3, #20
 8007d00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d02:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1e5      	bne.n	8007ce2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d004      	beq.n	8007d28 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fa fcac 	bl	8002680 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fd7f 	bl	800882c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d38:	2b40      	cmp	r3, #64	@ 0x40
 8007d3a:	bf0c      	ite	eq
 8007d3c:	2301      	moveq	r3, #1
 8007d3e:	2300      	movne	r3, #0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b22      	cmp	r3, #34	@ 0x22
 8007d4e:	d128      	bne.n	8007da2 <HAL_UART_DMAStop+0xf4>
 8007d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d025      	beq.n	8007da2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3314      	adds	r3, #20
 8007d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3314      	adds	r3, #20
 8007d74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d76:	61fa      	str	r2, [r7, #28]
 8007d78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	69b9      	ldr	r1, [r7, #24]
 8007d7c:	69fa      	ldr	r2, [r7, #28]
 8007d7e:	e841 2300 	strex	r3, r2, [r1]
 8007d82:	617b      	str	r3, [r7, #20]
   return(result);
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1e5      	bne.n	8007d56 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d004      	beq.n	8007d9c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fa fc72 	bl	8002680 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fd6d 	bl	800887c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3740      	adds	r7, #64	@ 0x40
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b0ba      	sub	sp, #232	@ 0xe8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007de2:	f003 030f 	and.w	r3, r3, #15
 8007de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10f      	bne.n	8007e12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df6:	f003 0320 	and.w	r3, r3, #32
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d009      	beq.n	8007e12 <HAL_UART_IRQHandler+0x66>
 8007dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e02:	f003 0320 	and.w	r3, r3, #32
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fe12 	bl	8008a34 <UART_Receive_IT>
      return;
 8007e10:	e273      	b.n	80082fa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 80de 	beq.w	8007fd8 <HAL_UART_IRQHandler+0x22c>
 8007e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d106      	bne.n	8007e36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 80d1 	beq.w	8007fd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <HAL_UART_IRQHandler+0xae>
 8007e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d005      	beq.n	8007e5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e52:	f043 0201 	orr.w	r2, r3, #1
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e5e:	f003 0304 	and.w	r3, r3, #4
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00b      	beq.n	8007e7e <HAL_UART_IRQHandler+0xd2>
 8007e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d005      	beq.n	8007e7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e76:	f043 0202 	orr.w	r2, r3, #2
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e82:	f003 0302 	and.w	r3, r3, #2
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00b      	beq.n	8007ea2 <HAL_UART_IRQHandler+0xf6>
 8007e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d005      	beq.n	8007ea2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e9a:	f043 0204 	orr.w	r2, r3, #4
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ea6:	f003 0308 	and.w	r3, r3, #8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d011      	beq.n	8007ed2 <HAL_UART_IRQHandler+0x126>
 8007eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb2:	f003 0320 	and.w	r3, r3, #32
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d105      	bne.n	8007ec6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eca:	f043 0208 	orr.w	r2, r3, #8
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 820a 	beq.w	80082f0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ee0:	f003 0320 	and.w	r3, r3, #32
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d008      	beq.n	8007efa <HAL_UART_IRQHandler+0x14e>
 8007ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eec:	f003 0320 	and.w	r3, r3, #32
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fd9d 	bl	8008a34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f04:	2b40      	cmp	r3, #64	@ 0x40
 8007f06:	bf0c      	ite	eq
 8007f08:	2301      	moveq	r3, #1
 8007f0a:	2300      	movne	r3, #0
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f16:	f003 0308 	and.w	r3, r3, #8
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d103      	bne.n	8007f26 <HAL_UART_IRQHandler+0x17a>
 8007f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d04f      	beq.n	8007fc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fca8 	bl	800887c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f36:	2b40      	cmp	r3, #64	@ 0x40
 8007f38:	d141      	bne.n	8007fbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3314      	adds	r3, #20
 8007f40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3314      	adds	r3, #20
 8007f62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1d9      	bne.n	8007f3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d013      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f92:	4a8a      	ldr	r2, [pc, #552]	@ (80081bc <HAL_UART_IRQHandler+0x410>)
 8007f94:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fa fbe0 	bl	8002760 <HAL_DMA_Abort_IT>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d016      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb4:	e00e      	b.n	8007fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f9ca 	bl	8008350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fbc:	e00a      	b.n	8007fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f9c6 	bl	8008350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc4:	e006      	b.n	8007fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f9c2 	bl	8008350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007fd2:	e18d      	b.n	80082f0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd4:	bf00      	nop
    return;
 8007fd6:	e18b      	b.n	80082f0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	f040 8167 	bne.w	80082b0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fe6:	f003 0310 	and.w	r3, r3, #16
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 8160 	beq.w	80082b0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ff4:	f003 0310 	and.w	r3, r3, #16
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 8159 	beq.w	80082b0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ffe:	2300      	movs	r3, #0
 8008000:	60bb      	str	r3, [r7, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60bb      	str	r3, [r7, #8]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	60bb      	str	r3, [r7, #8]
 8008012:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800801e:	2b40      	cmp	r3, #64	@ 0x40
 8008020:	f040 80ce 	bne.w	80081c0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008030:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 80a9 	beq.w	800818c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800803e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008042:	429a      	cmp	r2, r3
 8008044:	f080 80a2 	bcs.w	800818c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800804e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800805a:	f000 8088 	beq.w	800816e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	330c      	adds	r3, #12
 8008064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008068:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008074:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800807c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	330c      	adds	r3, #12
 8008086:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800808a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800808e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008092:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008096:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1d9      	bne.n	800805e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3314      	adds	r3, #20
 80080b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080b4:	e853 3f00 	ldrex	r3, [r3]
 80080b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080bc:	f023 0301 	bic.w	r3, r3, #1
 80080c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3314      	adds	r3, #20
 80080ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80080d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e1      	bne.n	80080aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3314      	adds	r3, #20
 80080ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080f0:	e853 3f00 	ldrex	r3, [r3]
 80080f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80080f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3314      	adds	r3, #20
 8008106:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800810a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800810c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008110:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008118:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e3      	bne.n	80080e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2220      	movs	r2, #32
 8008122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	330c      	adds	r3, #12
 8008132:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008136:	e853 3f00 	ldrex	r3, [r3]
 800813a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800813c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800813e:	f023 0310 	bic.w	r3, r3, #16
 8008142:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	330c      	adds	r3, #12
 800814c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008150:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008152:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008156:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800815e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e3      	bne.n	800812c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008168:	4618      	mov	r0, r3
 800816a:	f7fa fa89 	bl	8002680 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2202      	movs	r2, #2
 8008172:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800817c:	b29b      	uxth	r3, r3
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	b29b      	uxth	r3, r3
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f8ed 	bl	8008364 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800818a:	e0b3      	b.n	80082f4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008190:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008194:	429a      	cmp	r2, r3
 8008196:	f040 80ad 	bne.w	80082f4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081a4:	f040 80a6 	bne.w	80082f4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f8d5 	bl	8008364 <HAL_UARTEx_RxEventCallback>
      return;
 80081ba:	e09b      	b.n	80082f4 <HAL_UART_IRQHandler+0x548>
 80081bc:	08008943 	.word	0x08008943
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 808e 	beq.w	80082f8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80081dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 8089 	beq.w	80082f8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	330c      	adds	r3, #12
 80081ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	330c      	adds	r3, #12
 8008206:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800820a:	647a      	str	r2, [r7, #68]	@ 0x44
 800820c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008210:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e3      	bne.n	80081e6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3314      	adds	r3, #20
 8008224:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	623b      	str	r3, [r7, #32]
   return(result);
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	f023 0301 	bic.w	r3, r3, #1
 8008234:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3314      	adds	r3, #20
 800823e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008242:	633a      	str	r2, [r7, #48]	@ 0x30
 8008244:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e3      	bne.n	800821e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2220      	movs	r2, #32
 800825a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	330c      	adds	r3, #12
 800826a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	e853 3f00 	ldrex	r3, [r3]
 8008272:	60fb      	str	r3, [r7, #12]
   return(result);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 0310 	bic.w	r3, r3, #16
 800827a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	330c      	adds	r3, #12
 8008284:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008288:	61fa      	str	r2, [r7, #28]
 800828a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	69b9      	ldr	r1, [r7, #24]
 800828e:	69fa      	ldr	r2, [r7, #28]
 8008290:	e841 2300 	strex	r3, r2, [r1]
 8008294:	617b      	str	r3, [r7, #20]
   return(result);
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e3      	bne.n	8008264 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f85b 	bl	8008364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082ae:	e023      	b.n	80082f8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d009      	beq.n	80082d0 <HAL_UART_IRQHandler+0x524>
 80082bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fb4b 	bl	8008964 <UART_Transmit_IT>
    return;
 80082ce:	e014      	b.n	80082fa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00e      	beq.n	80082fa <HAL_UART_IRQHandler+0x54e>
 80082dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d008      	beq.n	80082fa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fb8b 	bl	8008a04 <UART_EndTransmit_IT>
    return;
 80082ee:	e004      	b.n	80082fa <HAL_UART_IRQHandler+0x54e>
    return;
 80082f0:	bf00      	nop
 80082f2:	e002      	b.n	80082fa <HAL_UART_IRQHandler+0x54e>
      return;
 80082f4:	bf00      	nop
 80082f6:	e000      	b.n	80082fa <HAL_UART_IRQHandler+0x54e>
      return;
 80082f8:	bf00      	nop
  }
}
 80082fa:	37e8      	adds	r7, #232	@ 0xe8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b090      	sub	sp, #64	@ 0x40
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008388:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008394:	2b00      	cmp	r3, #0
 8008396:	d137      	bne.n	8008408 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800839a:	2200      	movs	r2, #0
 800839c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800839e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3314      	adds	r3, #20
 80083a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a8:	e853 3f00 	ldrex	r3, [r3]
 80083ac:	623b      	str	r3, [r7, #32]
   return(result);
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3314      	adds	r3, #20
 80083bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083be:	633a      	str	r2, [r7, #48]	@ 0x30
 80083c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e5      	bne.n	800839e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	330c      	adds	r3, #12
 80083d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	330c      	adds	r3, #12
 80083f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083f2:	61fa      	str	r2, [r7, #28]
 80083f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	69b9      	ldr	r1, [r7, #24]
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e5      	bne.n	80083d2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008406:	e002      	b.n	800840e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008408:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800840a:	f7ff ff79 	bl	8008300 <HAL_UART_TxCpltCallback>
}
 800840e:	bf00      	nop
 8008410:	3740      	adds	r7, #64	@ 0x40
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008422:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f7ff ff75 	bl	8008314 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800842a:	bf00      	nop
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b09c      	sub	sp, #112	@ 0x70
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800843e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800844a:	2b00      	cmp	r3, #0
 800844c:	d172      	bne.n	8008534 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800844e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008450:	2200      	movs	r2, #0
 8008452:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	330c      	adds	r3, #12
 800845a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008466:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800846a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800846c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	330c      	adds	r3, #12
 8008472:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008474:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008476:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800847a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e5      	bne.n	8008454 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3314      	adds	r3, #20
 800848e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800849a:	f023 0301 	bic.w	r3, r3, #1
 800849e:	667b      	str	r3, [r7, #100]	@ 0x64
 80084a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3314      	adds	r3, #20
 80084a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80084a8:	647a      	str	r2, [r7, #68]	@ 0x44
 80084aa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e5      	bne.n	8008488 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3314      	adds	r3, #20
 80084c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	623b      	str	r3, [r7, #32]
   return(result);
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80084d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3314      	adds	r3, #20
 80084da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80084dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80084de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e5      	bne.n	80084bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084f2:	2220      	movs	r2, #32
 80084f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d119      	bne.n	8008534 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	330c      	adds	r3, #12
 8008506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 0310 	bic.w	r3, r3, #16
 8008516:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	330c      	adds	r3, #12
 800851e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008520:	61fa      	str	r2, [r7, #28]
 8008522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	69b9      	ldr	r1, [r7, #24]
 8008526:	69fa      	ldr	r2, [r7, #28]
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	617b      	str	r3, [r7, #20]
   return(result);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e5      	bne.n	8008500 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008536:	2200      	movs	r2, #0
 8008538:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800853a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800853c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800853e:	2b01      	cmp	r3, #1
 8008540:	d106      	bne.n	8008550 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008544:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008546:	4619      	mov	r1, r3
 8008548:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800854a:	f7ff ff0b 	bl	8008364 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800854e:	e002      	b.n	8008556 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008550:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008552:	f7ff fee9 	bl	8008328 <HAL_UART_RxCpltCallback>
}
 8008556:	bf00      	nop
 8008558:	3770      	adds	r7, #112	@ 0x70
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800856a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008576:	2b01      	cmp	r3, #1
 8008578:	d108      	bne.n	800858c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800857e:	085b      	lsrs	r3, r3, #1
 8008580:	b29b      	uxth	r3, r3
 8008582:	4619      	mov	r1, r3
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7ff feed 	bl	8008364 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800858a:	e002      	b.n	8008592 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f7ff fed5 	bl	800833c <HAL_UART_RxHalfCpltCallback>
}
 8008592:	bf00      	nop
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085b6:	2b80      	cmp	r3, #128	@ 0x80
 80085b8:	bf0c      	ite	eq
 80085ba:	2301      	moveq	r3, #1
 80085bc:	2300      	movne	r3, #0
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b21      	cmp	r3, #33	@ 0x21
 80085cc:	d108      	bne.n	80085e0 <UART_DMAError+0x46>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d005      	beq.n	80085e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2200      	movs	r2, #0
 80085d8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80085da:	68b8      	ldr	r0, [r7, #8]
 80085dc:	f000 f926 	bl	800882c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ea:	2b40      	cmp	r3, #64	@ 0x40
 80085ec:	bf0c      	ite	eq
 80085ee:	2301      	moveq	r3, #1
 80085f0:	2300      	movne	r3, #0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b22      	cmp	r3, #34	@ 0x22
 8008600:	d108      	bne.n	8008614 <UART_DMAError+0x7a>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d005      	beq.n	8008614 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2200      	movs	r2, #0
 800860c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800860e:	68b8      	ldr	r0, [r7, #8]
 8008610:	f000 f934 	bl	800887c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008618:	f043 0210 	orr.w	r2, r3, #16
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008620:	68b8      	ldr	r0, [r7, #8]
 8008622:	f7ff fe95 	bl	8008350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008626:	bf00      	nop
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b086      	sub	sp, #24
 8008632:	af00      	add	r7, sp, #0
 8008634:	60f8      	str	r0, [r7, #12]
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	603b      	str	r3, [r7, #0]
 800863a:	4613      	mov	r3, r2
 800863c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800863e:	e03b      	b.n	80086b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008646:	d037      	beq.n	80086b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008648:	f7f9 fe02 	bl	8002250 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	6a3a      	ldr	r2, [r7, #32]
 8008654:	429a      	cmp	r2, r3
 8008656:	d302      	bcc.n	800865e <UART_WaitOnFlagUntilTimeout+0x30>
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e03a      	b.n	80086d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	2b00      	cmp	r3, #0
 800866e:	d023      	beq.n	80086b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b80      	cmp	r3, #128	@ 0x80
 8008674:	d020      	beq.n	80086b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2b40      	cmp	r3, #64	@ 0x40
 800867a:	d01d      	beq.n	80086b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0308 	and.w	r3, r3, #8
 8008686:	2b08      	cmp	r3, #8
 8008688:	d116      	bne.n	80086b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800868a:	2300      	movs	r3, #0
 800868c:	617b      	str	r3, [r7, #20]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	617b      	str	r3, [r7, #20]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 f8eb 	bl	800887c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2208      	movs	r2, #8
 80086aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e00f      	b.n	80086d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	4013      	ands	r3, r2
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	bf0c      	ite	eq
 80086c8:	2301      	moveq	r3, #1
 80086ca:	2300      	movne	r3, #0
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	461a      	mov	r2, r3
 80086d0:	79fb      	ldrb	r3, [r7, #7]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d0b4      	beq.n	8008640 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b098      	sub	sp, #96	@ 0x60
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	4613      	mov	r3, r2
 80086ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	88fa      	ldrh	r2, [r7, #6]
 80086f8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2222      	movs	r2, #34	@ 0x22
 8008704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800870c:	4a44      	ldr	r2, [pc, #272]	@ (8008820 <UART_Start_Receive_DMA+0x140>)
 800870e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008714:	4a43      	ldr	r2, [pc, #268]	@ (8008824 <UART_Start_Receive_DMA+0x144>)
 8008716:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871c:	4a42      	ldr	r2, [pc, #264]	@ (8008828 <UART_Start_Receive_DMA+0x148>)
 800871e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008724:	2200      	movs	r2, #0
 8008726:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008728:	f107 0308 	add.w	r3, r7, #8
 800872c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3304      	adds	r3, #4
 8008738:	4619      	mov	r1, r3
 800873a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	88fb      	ldrh	r3, [r7, #6]
 8008740:	f7f9 ff46 	bl	80025d0 <HAL_DMA_Start_IT>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d008      	beq.n	800875c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2210      	movs	r2, #16
 800874e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2220      	movs	r2, #32
 8008754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e05d      	b.n	8008818 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800875c:	2300      	movs	r3, #0
 800875e:	613b      	str	r3, [r7, #16]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	613b      	str	r3, [r7, #16]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d019      	beq.n	80087ae <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	330c      	adds	r3, #12
 8008780:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008784:	e853 3f00 	ldrex	r3, [r3]
 8008788:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800878a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800878c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008790:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	330c      	adds	r3, #12
 8008798:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800879a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800879c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80087a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087a2:	e841 2300 	strex	r3, r2, [r1]
 80087a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80087a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1e5      	bne.n	800877a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3314      	adds	r3, #20
 80087b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c0:	f043 0301 	orr.w	r3, r3, #1
 80087c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3314      	adds	r3, #20
 80087cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80087ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 80087d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80087d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e5      	bne.n	80087ae <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3314      	adds	r3, #20
 80087e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	e853 3f00 	ldrex	r3, [r3]
 80087f0:	617b      	str	r3, [r7, #20]
   return(result);
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3314      	adds	r3, #20
 8008800:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008802:	627a      	str	r2, [r7, #36]	@ 0x24
 8008804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008806:	6a39      	ldr	r1, [r7, #32]
 8008808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e5      	bne.n	80087e2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3760      	adds	r7, #96	@ 0x60
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	08008433 	.word	0x08008433
 8008824:	0800855f 	.word	0x0800855f
 8008828:	0800859b 	.word	0x0800859b

0800882c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800882c:	b480      	push	{r7}
 800882e:	b089      	sub	sp, #36	@ 0x24
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	330c      	adds	r3, #12
 800883a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	e853 3f00 	ldrex	r3, [r3]
 8008842:	60bb      	str	r3, [r7, #8]
   return(result);
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800884a:	61fb      	str	r3, [r7, #28]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	330c      	adds	r3, #12
 8008852:	69fa      	ldr	r2, [r7, #28]
 8008854:	61ba      	str	r2, [r7, #24]
 8008856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6979      	ldr	r1, [r7, #20]
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	613b      	str	r3, [r7, #16]
   return(result);
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e5      	bne.n	8008834 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008870:	bf00      	nop
 8008872:	3724      	adds	r7, #36	@ 0x24
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b095      	sub	sp, #84	@ 0x54
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	330c      	adds	r3, #12
 800888a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888e:	e853 3f00 	ldrex	r3, [r3]
 8008892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800889a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	330c      	adds	r3, #12
 80088a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80088a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80088a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088ac:	e841 2300 	strex	r3, r2, [r1]
 80088b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e5      	bne.n	8008884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3314      	adds	r3, #20
 80088be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	f023 0301 	bic.w	r3, r3, #1
 80088ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3314      	adds	r3, #20
 80088d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e5      	bne.n	80088b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d119      	bne.n	8008928 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	330c      	adds	r3, #12
 80088fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	60bb      	str	r3, [r7, #8]
   return(result);
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f023 0310 	bic.w	r3, r3, #16
 800890a:	647b      	str	r3, [r7, #68]	@ 0x44
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	330c      	adds	r3, #12
 8008912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008914:	61ba      	str	r2, [r7, #24]
 8008916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008918:	6979      	ldr	r1, [r7, #20]
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	e841 2300 	strex	r3, r2, [r1]
 8008920:	613b      	str	r3, [r7, #16]
   return(result);
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e5      	bne.n	80088f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2220      	movs	r2, #32
 800892c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008936:	bf00      	nop
 8008938:	3754      	adds	r7, #84	@ 0x54
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f7ff fcfa 	bl	8008350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800895c:	bf00      	nop
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b21      	cmp	r3, #33	@ 0x21
 8008976:	d13e      	bne.n	80089f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008980:	d114      	bne.n	80089ac <UART_Transmit_IT+0x48>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d110      	bne.n	80089ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800899e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a1b      	ldr	r3, [r3, #32]
 80089a4:	1c9a      	adds	r2, r3, #2
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	621a      	str	r2, [r3, #32]
 80089aa:	e008      	b.n	80089be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	1c59      	adds	r1, r3, #1
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	6211      	str	r1, [r2, #32]
 80089b6:	781a      	ldrb	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	3b01      	subs	r3, #1
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	4619      	mov	r1, r3
 80089cc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10f      	bne.n	80089f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68da      	ldr	r2, [r3, #12]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68da      	ldr	r2, [r3, #12]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	e000      	b.n	80089f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089f6:	2302      	movs	r3, #2
  }
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7ff fc6b 	bl	8008300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08c      	sub	sp, #48	@ 0x30
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b22      	cmp	r3, #34	@ 0x22
 8008a4e:	f040 80aa 	bne.w	8008ba6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a5a:	d115      	bne.n	8008a88 <UART_Receive_IT+0x54>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d111      	bne.n	8008a88 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a68:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a80:	1c9a      	adds	r2, r3, #2
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a86:	e024      	b.n	8008ad2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a96:	d007      	beq.n	8008aa8 <UART_Receive_IT+0x74>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10a      	bne.n	8008ab6 <UART_Receive_IT+0x82>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab2:	701a      	strb	r2, [r3, #0]
 8008ab4:	e008      	b.n	8008ac8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008acc:	1c5a      	adds	r2, r3, #1
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d15d      	bne.n	8008ba2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f022 0220 	bic.w	r2, r2, #32
 8008af4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68da      	ldr	r2, [r3, #12]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008b04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	695a      	ldr	r2, [r3, #20]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f022 0201 	bic.w	r2, r2, #1
 8008b14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d135      	bne.n	8008b98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	330c      	adds	r3, #12
 8008b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	e853 3f00 	ldrex	r3, [r3]
 8008b40:	613b      	str	r3, [r7, #16]
   return(result);
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	f023 0310 	bic.w	r3, r3, #16
 8008b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	330c      	adds	r3, #12
 8008b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b52:	623a      	str	r2, [r7, #32]
 8008b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	69f9      	ldr	r1, [r7, #28]
 8008b58:	6a3a      	ldr	r2, [r7, #32]
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e5      	bne.n	8008b32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	2b10      	cmp	r3, #16
 8008b72:	d10a      	bne.n	8008b8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7ff fbe7 	bl	8008364 <HAL_UARTEx_RxEventCallback>
 8008b96:	e002      	b.n	8008b9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff fbc5 	bl	8008328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	e002      	b.n	8008ba8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	e000      	b.n	8008ba8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008ba6:	2302      	movs	r3, #2
  }
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3730      	adds	r7, #48	@ 0x30
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bb4:	b0c0      	sub	sp, #256	@ 0x100
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bcc:	68d9      	ldr	r1, [r3, #12]
 8008bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	ea40 0301 	orr.w	r3, r0, r1
 8008bd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bde:	689a      	ldr	r2, [r3, #8]
 8008be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	431a      	orrs	r2, r3
 8008be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008c08:	f021 010c 	bic.w	r1, r1, #12
 8008c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c16:	430b      	orrs	r3, r1
 8008c18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c2a:	6999      	ldr	r1, [r3, #24]
 8008c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	ea40 0301 	orr.w	r3, r0, r1
 8008c36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	4b8f      	ldr	r3, [pc, #572]	@ (8008e7c <UART_SetConfig+0x2cc>)
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d005      	beq.n	8008c50 <UART_SetConfig+0xa0>
 8008c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	4b8d      	ldr	r3, [pc, #564]	@ (8008e80 <UART_SetConfig+0x2d0>)
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d104      	bne.n	8008c5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c50:	f7fe fa04 	bl	800705c <HAL_RCC_GetPCLK2Freq>
 8008c54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008c58:	e003      	b.n	8008c62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c5a:	f7fe f9eb 	bl	8007034 <HAL_RCC_GetPCLK1Freq>
 8008c5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c6c:	f040 810c 	bne.w	8008e88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c74:	2200      	movs	r2, #0
 8008c76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008c7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008c7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008c82:	4622      	mov	r2, r4
 8008c84:	462b      	mov	r3, r5
 8008c86:	1891      	adds	r1, r2, r2
 8008c88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008c8a:	415b      	adcs	r3, r3
 8008c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008c92:	4621      	mov	r1, r4
 8008c94:	eb12 0801 	adds.w	r8, r2, r1
 8008c98:	4629      	mov	r1, r5
 8008c9a:	eb43 0901 	adc.w	r9, r3, r1
 8008c9e:	f04f 0200 	mov.w	r2, #0
 8008ca2:	f04f 0300 	mov.w	r3, #0
 8008ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cb2:	4690      	mov	r8, r2
 8008cb4:	4699      	mov	r9, r3
 8008cb6:	4623      	mov	r3, r4
 8008cb8:	eb18 0303 	adds.w	r3, r8, r3
 8008cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	eb49 0303 	adc.w	r3, r9, r3
 8008cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008cd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008cda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008cde:	460b      	mov	r3, r1
 8008ce0:	18db      	adds	r3, r3, r3
 8008ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	eb42 0303 	adc.w	r3, r2, r3
 8008cea:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008cf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008cf4:	f7f7 fb24 	bl	8000340 <__aeabi_uldivmod>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4b61      	ldr	r3, [pc, #388]	@ (8008e84 <UART_SetConfig+0x2d4>)
 8008cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8008d02:	095b      	lsrs	r3, r3, #5
 8008d04:	011c      	lsls	r4, r3, #4
 8008d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008d14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008d18:	4642      	mov	r2, r8
 8008d1a:	464b      	mov	r3, r9
 8008d1c:	1891      	adds	r1, r2, r2
 8008d1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008d20:	415b      	adcs	r3, r3
 8008d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008d28:	4641      	mov	r1, r8
 8008d2a:	eb12 0a01 	adds.w	sl, r2, r1
 8008d2e:	4649      	mov	r1, r9
 8008d30:	eb43 0b01 	adc.w	fp, r3, r1
 8008d34:	f04f 0200 	mov.w	r2, #0
 8008d38:	f04f 0300 	mov.w	r3, #0
 8008d3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d48:	4692      	mov	sl, r2
 8008d4a:	469b      	mov	fp, r3
 8008d4c:	4643      	mov	r3, r8
 8008d4e:	eb1a 0303 	adds.w	r3, sl, r3
 8008d52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d56:	464b      	mov	r3, r9
 8008d58:	eb4b 0303 	adc.w	r3, fp, r3
 8008d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008d70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008d74:	460b      	mov	r3, r1
 8008d76:	18db      	adds	r3, r3, r3
 8008d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	eb42 0303 	adc.w	r3, r2, r3
 8008d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008d86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008d8a:	f7f7 fad9 	bl	8000340 <__aeabi_uldivmod>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4611      	mov	r1, r2
 8008d94:	4b3b      	ldr	r3, [pc, #236]	@ (8008e84 <UART_SetConfig+0x2d4>)
 8008d96:	fba3 2301 	umull	r2, r3, r3, r1
 8008d9a:	095b      	lsrs	r3, r3, #5
 8008d9c:	2264      	movs	r2, #100	@ 0x64
 8008d9e:	fb02 f303 	mul.w	r3, r2, r3
 8008da2:	1acb      	subs	r3, r1, r3
 8008da4:	00db      	lsls	r3, r3, #3
 8008da6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008daa:	4b36      	ldr	r3, [pc, #216]	@ (8008e84 <UART_SetConfig+0x2d4>)
 8008dac:	fba3 2302 	umull	r2, r3, r3, r2
 8008db0:	095b      	lsrs	r3, r3, #5
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008db8:	441c      	add	r4, r3
 8008dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008dc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008dc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008dcc:	4642      	mov	r2, r8
 8008dce:	464b      	mov	r3, r9
 8008dd0:	1891      	adds	r1, r2, r2
 8008dd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008dd4:	415b      	adcs	r3, r3
 8008dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ddc:	4641      	mov	r1, r8
 8008dde:	1851      	adds	r1, r2, r1
 8008de0:	6339      	str	r1, [r7, #48]	@ 0x30
 8008de2:	4649      	mov	r1, r9
 8008de4:	414b      	adcs	r3, r1
 8008de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de8:	f04f 0200 	mov.w	r2, #0
 8008dec:	f04f 0300 	mov.w	r3, #0
 8008df0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008df4:	4659      	mov	r1, fp
 8008df6:	00cb      	lsls	r3, r1, #3
 8008df8:	4651      	mov	r1, sl
 8008dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dfe:	4651      	mov	r1, sl
 8008e00:	00ca      	lsls	r2, r1, #3
 8008e02:	4610      	mov	r0, r2
 8008e04:	4619      	mov	r1, r3
 8008e06:	4603      	mov	r3, r0
 8008e08:	4642      	mov	r2, r8
 8008e0a:	189b      	adds	r3, r3, r2
 8008e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e10:	464b      	mov	r3, r9
 8008e12:	460a      	mov	r2, r1
 8008e14:	eb42 0303 	adc.w	r3, r2, r3
 8008e18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008e2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e30:	460b      	mov	r3, r1
 8008e32:	18db      	adds	r3, r3, r3
 8008e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e36:	4613      	mov	r3, r2
 8008e38:	eb42 0303 	adc.w	r3, r2, r3
 8008e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008e42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008e46:	f7f7 fa7b 	bl	8000340 <__aeabi_uldivmod>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e84 <UART_SetConfig+0x2d4>)
 8008e50:	fba3 1302 	umull	r1, r3, r3, r2
 8008e54:	095b      	lsrs	r3, r3, #5
 8008e56:	2164      	movs	r1, #100	@ 0x64
 8008e58:	fb01 f303 	mul.w	r3, r1, r3
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	00db      	lsls	r3, r3, #3
 8008e60:	3332      	adds	r3, #50	@ 0x32
 8008e62:	4a08      	ldr	r2, [pc, #32]	@ (8008e84 <UART_SetConfig+0x2d4>)
 8008e64:	fba2 2303 	umull	r2, r3, r2, r3
 8008e68:	095b      	lsrs	r3, r3, #5
 8008e6a:	f003 0207 	and.w	r2, r3, #7
 8008e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4422      	add	r2, r4
 8008e76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e78:	e106      	b.n	8009088 <UART_SetConfig+0x4d8>
 8008e7a:	bf00      	nop
 8008e7c:	40011000 	.word	0x40011000
 8008e80:	40011400 	.word	0x40011400
 8008e84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008e96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008e9a:	4642      	mov	r2, r8
 8008e9c:	464b      	mov	r3, r9
 8008e9e:	1891      	adds	r1, r2, r2
 8008ea0:	6239      	str	r1, [r7, #32]
 8008ea2:	415b      	adcs	r3, r3
 8008ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008eaa:	4641      	mov	r1, r8
 8008eac:	1854      	adds	r4, r2, r1
 8008eae:	4649      	mov	r1, r9
 8008eb0:	eb43 0501 	adc.w	r5, r3, r1
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	f04f 0300 	mov.w	r3, #0
 8008ebc:	00eb      	lsls	r3, r5, #3
 8008ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ec2:	00e2      	lsls	r2, r4, #3
 8008ec4:	4614      	mov	r4, r2
 8008ec6:	461d      	mov	r5, r3
 8008ec8:	4643      	mov	r3, r8
 8008eca:	18e3      	adds	r3, r4, r3
 8008ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ed0:	464b      	mov	r3, r9
 8008ed2:	eb45 0303 	adc.w	r3, r5, r3
 8008ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ee6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008eea:	f04f 0200 	mov.w	r2, #0
 8008eee:	f04f 0300 	mov.w	r3, #0
 8008ef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	008b      	lsls	r3, r1, #2
 8008efa:	4621      	mov	r1, r4
 8008efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f00:	4621      	mov	r1, r4
 8008f02:	008a      	lsls	r2, r1, #2
 8008f04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008f08:	f7f7 fa1a 	bl	8000340 <__aeabi_uldivmod>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4b60      	ldr	r3, [pc, #384]	@ (8009094 <UART_SetConfig+0x4e4>)
 8008f12:	fba3 2302 	umull	r2, r3, r3, r2
 8008f16:	095b      	lsrs	r3, r3, #5
 8008f18:	011c      	lsls	r4, r3, #4
 8008f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008f28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008f2c:	4642      	mov	r2, r8
 8008f2e:	464b      	mov	r3, r9
 8008f30:	1891      	adds	r1, r2, r2
 8008f32:	61b9      	str	r1, [r7, #24]
 8008f34:	415b      	adcs	r3, r3
 8008f36:	61fb      	str	r3, [r7, #28]
 8008f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f3c:	4641      	mov	r1, r8
 8008f3e:	1851      	adds	r1, r2, r1
 8008f40:	6139      	str	r1, [r7, #16]
 8008f42:	4649      	mov	r1, r9
 8008f44:	414b      	adcs	r3, r1
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f54:	4659      	mov	r1, fp
 8008f56:	00cb      	lsls	r3, r1, #3
 8008f58:	4651      	mov	r1, sl
 8008f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f5e:	4651      	mov	r1, sl
 8008f60:	00ca      	lsls	r2, r1, #3
 8008f62:	4610      	mov	r0, r2
 8008f64:	4619      	mov	r1, r3
 8008f66:	4603      	mov	r3, r0
 8008f68:	4642      	mov	r2, r8
 8008f6a:	189b      	adds	r3, r3, r2
 8008f6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f70:	464b      	mov	r3, r9
 8008f72:	460a      	mov	r2, r1
 8008f74:	eb42 0303 	adc.w	r3, r2, r3
 8008f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008f88:	f04f 0200 	mov.w	r2, #0
 8008f8c:	f04f 0300 	mov.w	r3, #0
 8008f90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008f94:	4649      	mov	r1, r9
 8008f96:	008b      	lsls	r3, r1, #2
 8008f98:	4641      	mov	r1, r8
 8008f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f9e:	4641      	mov	r1, r8
 8008fa0:	008a      	lsls	r2, r1, #2
 8008fa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008fa6:	f7f7 f9cb 	bl	8000340 <__aeabi_uldivmod>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4b38      	ldr	r3, [pc, #224]	@ (8009094 <UART_SetConfig+0x4e4>)
 8008fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8008fb6:	095b      	lsrs	r3, r3, #5
 8008fb8:	2264      	movs	r2, #100	@ 0x64
 8008fba:	fb02 f303 	mul.w	r3, r2, r3
 8008fbe:	1acb      	subs	r3, r1, r3
 8008fc0:	011b      	lsls	r3, r3, #4
 8008fc2:	3332      	adds	r3, #50	@ 0x32
 8008fc4:	4a33      	ldr	r2, [pc, #204]	@ (8009094 <UART_SetConfig+0x4e4>)
 8008fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fca:	095b      	lsrs	r3, r3, #5
 8008fcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008fd0:	441c      	add	r4, r3
 8008fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8008fda:	677a      	str	r2, [r7, #116]	@ 0x74
 8008fdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008fe0:	4642      	mov	r2, r8
 8008fe2:	464b      	mov	r3, r9
 8008fe4:	1891      	adds	r1, r2, r2
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	415b      	adcs	r3, r3
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ff0:	4641      	mov	r1, r8
 8008ff2:	1851      	adds	r1, r2, r1
 8008ff4:	6039      	str	r1, [r7, #0]
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	414b      	adcs	r3, r1
 8008ffa:	607b      	str	r3, [r7, #4]
 8008ffc:	f04f 0200 	mov.w	r2, #0
 8009000:	f04f 0300 	mov.w	r3, #0
 8009004:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009008:	4659      	mov	r1, fp
 800900a:	00cb      	lsls	r3, r1, #3
 800900c:	4651      	mov	r1, sl
 800900e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009012:	4651      	mov	r1, sl
 8009014:	00ca      	lsls	r2, r1, #3
 8009016:	4610      	mov	r0, r2
 8009018:	4619      	mov	r1, r3
 800901a:	4603      	mov	r3, r0
 800901c:	4642      	mov	r2, r8
 800901e:	189b      	adds	r3, r3, r2
 8009020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009022:	464b      	mov	r3, r9
 8009024:	460a      	mov	r2, r1
 8009026:	eb42 0303 	adc.w	r3, r2, r3
 800902a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800902c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	663b      	str	r3, [r7, #96]	@ 0x60
 8009036:	667a      	str	r2, [r7, #100]	@ 0x64
 8009038:	f04f 0200 	mov.w	r2, #0
 800903c:	f04f 0300 	mov.w	r3, #0
 8009040:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009044:	4649      	mov	r1, r9
 8009046:	008b      	lsls	r3, r1, #2
 8009048:	4641      	mov	r1, r8
 800904a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800904e:	4641      	mov	r1, r8
 8009050:	008a      	lsls	r2, r1, #2
 8009052:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009056:	f7f7 f973 	bl	8000340 <__aeabi_uldivmod>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4b0d      	ldr	r3, [pc, #52]	@ (8009094 <UART_SetConfig+0x4e4>)
 8009060:	fba3 1302 	umull	r1, r3, r3, r2
 8009064:	095b      	lsrs	r3, r3, #5
 8009066:	2164      	movs	r1, #100	@ 0x64
 8009068:	fb01 f303 	mul.w	r3, r1, r3
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	011b      	lsls	r3, r3, #4
 8009070:	3332      	adds	r3, #50	@ 0x32
 8009072:	4a08      	ldr	r2, [pc, #32]	@ (8009094 <UART_SetConfig+0x4e4>)
 8009074:	fba2 2303 	umull	r2, r3, r2, r3
 8009078:	095b      	lsrs	r3, r3, #5
 800907a:	f003 020f 	and.w	r2, r3, #15
 800907e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4422      	add	r2, r4
 8009086:	609a      	str	r2, [r3, #8]
}
 8009088:	bf00      	nop
 800908a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800908e:	46bd      	mov	sp, r7
 8009090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009094:	51eb851f 	.word	0x51eb851f

08009098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009098:	b084      	sub	sp, #16
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	f107 001c 	add.w	r0, r7, #28
 80090a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d123      	bne.n	80090fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80090c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80090da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d105      	bne.n	80090ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f9dc 	bl	80094ac <USB_CoreReset>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73fb      	strb	r3, [r7, #15]
 80090f8:	e01b      	b.n	8009132 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f9d0 	bl	80094ac <USB_CoreReset>
 800910c:	4603      	mov	r3, r0
 800910e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009110:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009114:	2b00      	cmp	r3, #0
 8009116:	d106      	bne.n	8009126 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800911c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	639a      	str	r2, [r3, #56]	@ 0x38
 8009124:	e005      	b.n	8009132 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009132:	7fbb      	ldrb	r3, [r7, #30]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d10b      	bne.n	8009150 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f043 0206 	orr.w	r2, r3, #6
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f043 0220 	orr.w	r2, r3, #32
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009150:	7bfb      	ldrb	r3, [r7, #15]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800915c:	b004      	add	sp, #16
 800915e:	4770      	bx	lr

08009160 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f043 0201 	orr.w	r2, r3, #1
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009182:	b480      	push	{r7}
 8009184:	b083      	sub	sp, #12
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f023 0201 	bic.w	r2, r3, #1
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091c0:	78fb      	ldrb	r3, [r7, #3]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d115      	bne.n	80091f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80091d2:	200a      	movs	r0, #10
 80091d4:	f7f9 f848 	bl	8002268 <HAL_Delay>
      ms += 10U;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	330a      	adds	r3, #10
 80091dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f956 	bl	8009490 <USB_GetMode>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d01e      	beq.n	8009228 <USB_SetCurrentMode+0x84>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80091ee:	d9f0      	bls.n	80091d2 <USB_SetCurrentMode+0x2e>
 80091f0:	e01a      	b.n	8009228 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d115      	bne.n	8009224 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009204:	200a      	movs	r0, #10
 8009206:	f7f9 f82f 	bl	8002268 <HAL_Delay>
      ms += 10U;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	330a      	adds	r3, #10
 800920e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f93d 	bl	8009490 <USB_GetMode>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d005      	beq.n	8009228 <USB_SetCurrentMode+0x84>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009220:	d9f0      	bls.n	8009204 <USB_SetCurrentMode+0x60>
 8009222:	e001      	b.n	8009228 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e005      	b.n	8009234 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2bc8      	cmp	r3, #200	@ 0xc8
 800922c:	d101      	bne.n	8009232 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e000      	b.n	8009234 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3301      	adds	r3, #1
 800924e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009256:	d901      	bls.n	800925c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e01b      	b.n	8009294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	daf2      	bge.n	800924a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	019b      	lsls	r3, r3, #6
 800926c:	f043 0220 	orr.w	r2, r3, #32
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3301      	adds	r3, #1
 8009278:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009280:	d901      	bls.n	8009286 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e006      	b.n	8009294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b20      	cmp	r3, #32
 8009290:	d0f0      	beq.n	8009274 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	3301      	adds	r3, #1
 80092b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092b8:	d901      	bls.n	80092be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e018      	b.n	80092f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	daf2      	bge.n	80092ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2210      	movs	r2, #16
 80092ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	3301      	adds	r3, #1
 80092d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092dc:	d901      	bls.n	80092e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e006      	b.n	80092f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	f003 0310 	and.w	r3, r3, #16
 80092ea:	2b10      	cmp	r3, #16
 80092ec:	d0f0      	beq.n	80092d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b089      	sub	sp, #36	@ 0x24
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4611      	mov	r1, r2
 8009308:	461a      	mov	r2, r3
 800930a:	460b      	mov	r3, r1
 800930c:	71fb      	strb	r3, [r7, #7]
 800930e:	4613      	mov	r3, r2
 8009310:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800931a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800931e:	2b00      	cmp	r3, #0
 8009320:	d123      	bne.n	800936a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009322:	88bb      	ldrh	r3, [r7, #4]
 8009324:	3303      	adds	r3, #3
 8009326:	089b      	lsrs	r3, r3, #2
 8009328:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800932a:	2300      	movs	r3, #0
 800932c:	61bb      	str	r3, [r7, #24]
 800932e:	e018      	b.n	8009362 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	031a      	lsls	r2, r3, #12
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	4413      	add	r3, r2
 8009338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800933c:	461a      	mov	r2, r3
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	3301      	adds	r3, #1
 8009348:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	3301      	adds	r3, #1
 800934e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	3301      	adds	r3, #1
 8009354:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	3301      	adds	r3, #1
 800935a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	3301      	adds	r3, #1
 8009360:	61bb      	str	r3, [r7, #24]
 8009362:	69ba      	ldr	r2, [r7, #24]
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	429a      	cmp	r2, r3
 8009368:	d3e2      	bcc.n	8009330 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3724      	adds	r7, #36	@ 0x24
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009378:	b480      	push	{r7}
 800937a:	b08b      	sub	sp, #44	@ 0x2c
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800938e:	88fb      	ldrh	r3, [r7, #6]
 8009390:	089b      	lsrs	r3, r3, #2
 8009392:	b29b      	uxth	r3, r3
 8009394:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009396:	88fb      	ldrh	r3, [r7, #6]
 8009398:	f003 0303 	and.w	r3, r3, #3
 800939c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800939e:	2300      	movs	r3, #0
 80093a0:	623b      	str	r3, [r7, #32]
 80093a2:	e014      	b.n	80093ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	3301      	adds	r3, #1
 80093b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80093b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b8:	3301      	adds	r3, #1
 80093ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80093bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093be:	3301      	adds	r3, #1
 80093c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80093c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c4:	3301      	adds	r3, #1
 80093c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	3301      	adds	r3, #1
 80093cc:	623b      	str	r3, [r7, #32]
 80093ce:	6a3a      	ldr	r2, [r7, #32]
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d3e6      	bcc.n	80093a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80093d6:	8bfb      	ldrh	r3, [r7, #30]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01e      	beq.n	800941a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093e6:	461a      	mov	r2, r3
 80093e8:	f107 0310 	add.w	r3, r7, #16
 80093ec:	6812      	ldr	r2, [r2, #0]
 80093ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	fa22 f303 	lsr.w	r3, r2, r3
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009400:	701a      	strb	r2, [r3, #0]
      i++;
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	3301      	adds	r3, #1
 8009406:	623b      	str	r3, [r7, #32]
      pDest++;
 8009408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940a:	3301      	adds	r3, #1
 800940c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800940e:	8bfb      	ldrh	r3, [r7, #30]
 8009410:	3b01      	subs	r3, #1
 8009412:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009414:	8bfb      	ldrh	r3, [r7, #30]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1ea      	bne.n	80093f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800941a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800941c:	4618      	mov	r0, r3
 800941e:	372c      	adds	r7, #44	@ 0x2c
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	4013      	ands	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009440:	68fb      	ldr	r3, [r7, #12]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800944e:	b480      	push	{r7}
 8009450:	b085      	sub	sp, #20
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	460b      	mov	r3, r1
 8009458:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800945e:	78fb      	ldrb	r3, [r7, #3]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4413      	add	r3, r2
 8009466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4413      	add	r3, r2
 8009476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	4013      	ands	r3, r2
 8009480:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009482:	68bb      	ldr	r3, [r7, #8]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	f003 0301 	and.w	r3, r3, #1
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094b4:	2300      	movs	r3, #0
 80094b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	3301      	adds	r3, #1
 80094bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094c4:	d901      	bls.n	80094ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e022      	b.n	8009510 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	daf2      	bge.n	80094b8 <USB_CoreReset+0xc>

  count = 10U;
 80094d2:	230a      	movs	r3, #10
 80094d4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80094d6:	e002      	b.n	80094de <USB_CoreReset+0x32>
  {
    count--;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3b01      	subs	r3, #1
 80094dc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1f9      	bne.n	80094d8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	f043 0201 	orr.w	r2, r3, #1
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	3301      	adds	r3, #1
 80094f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094fc:	d901      	bls.n	8009502 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e006      	b.n	8009510 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b01      	cmp	r3, #1
 800950c:	d0f0      	beq.n	80094f0 <USB_CoreReset+0x44>

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800951c:	b084      	sub	sp, #16
 800951e:	b580      	push	{r7, lr}
 8009520:	b086      	sub	sp, #24
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800952a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800953c:	461a      	mov	r2, r3
 800953e:	2300      	movs	r3, #0
 8009540:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009546:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009552:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800956e:	2b00      	cmp	r3, #0
 8009570:	d119      	bne.n	80095a6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009572:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009576:	2b01      	cmp	r3, #1
 8009578:	d10a      	bne.n	8009590 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009588:	f043 0304 	orr.w	r3, r3, #4
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	e014      	b.n	80095ba <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800959e:	f023 0304 	bic.w	r3, r3, #4
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	e009      	b.n	80095ba <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095b4:	f023 0304 	bic.w	r3, r3, #4
 80095b8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095ba:	2110      	movs	r1, #16
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff fe3d 	bl	800923c <USB_FlushTxFifo>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7ff fe67 	bl	80092a0 <USB_FlushRxFifo>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80095dc:	2300      	movs	r3, #0
 80095de:	613b      	str	r3, [r7, #16]
 80095e0:	e015      	b.n	800960e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095ee:	461a      	mov	r2, r3
 80095f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80095f4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009602:	461a      	mov	r2, r3
 8009604:	2300      	movs	r3, #0
 8009606:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	3301      	adds	r3, #1
 800960c:	613b      	str	r3, [r7, #16]
 800960e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009612:	461a      	mov	r2, r3
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	4293      	cmp	r3, r2
 8009618:	d3e3      	bcc.n	80095e2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009626:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a18      	ldr	r2, [pc, #96]	@ (800968c <USB_HostInit+0x170>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d10b      	bne.n	8009648 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009636:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a15      	ldr	r2, [pc, #84]	@ (8009690 <USB_HostInit+0x174>)
 800963c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a14      	ldr	r2, [pc, #80]	@ (8009694 <USB_HostInit+0x178>)
 8009642:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009646:	e009      	b.n	800965c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2280      	movs	r2, #128	@ 0x80
 800964c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a11      	ldr	r2, [pc, #68]	@ (8009698 <USB_HostInit+0x17c>)
 8009652:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a11      	ldr	r2, [pc, #68]	@ (800969c <USB_HostInit+0x180>)
 8009658:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800965c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009660:	2b00      	cmp	r3, #0
 8009662:	d105      	bne.n	8009670 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	f043 0210 	orr.w	r2, r3, #16
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	699a      	ldr	r2, [r3, #24]
 8009674:	4b0a      	ldr	r3, [pc, #40]	@ (80096a0 <USB_HostInit+0x184>)
 8009676:	4313      	orrs	r3, r2
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800967c:	7dfb      	ldrb	r3, [r7, #23]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009688:	b004      	add	sp, #16
 800968a:	4770      	bx	lr
 800968c:	40040000 	.word	0x40040000
 8009690:	01000200 	.word	0x01000200
 8009694:	00e00300 	.word	0x00e00300
 8009698:	00600080 	.word	0x00600080
 800969c:	004000e0 	.word	0x004000e0
 80096a0:	a3200008 	.word	0xa3200008

080096a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80096c2:	f023 0303 	bic.w	r3, r3, #3
 80096c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	78fb      	ldrb	r3, [r7, #3]
 80096d2:	f003 0303 	and.w	r3, r3, #3
 80096d6:	68f9      	ldr	r1, [r7, #12]
 80096d8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80096dc:	4313      	orrs	r3, r2
 80096de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80096e0:	78fb      	ldrb	r3, [r7, #3]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d107      	bne.n	80096f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096ec:	461a      	mov	r2, r3
 80096ee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80096f2:	6053      	str	r3, [r2, #4]
 80096f4:	e00c      	b.n	8009710 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80096f6:	78fb      	ldrb	r3, [r7, #3]
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d107      	bne.n	800970c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009702:	461a      	mov	r2, r3
 8009704:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009708:	6053      	str	r3, [r2, #4]
 800970a:	e001      	b.n	8009710 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e000      	b.n	8009712 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800972a:	2300      	movs	r3, #0
 800972c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800973e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800974c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800974e:	2064      	movs	r0, #100	@ 0x64
 8009750:	f7f8 fd8a 	bl	8002268 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800975c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009760:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009762:	200a      	movs	r0, #10
 8009764:	f7f8 fd80 	bl	8002268 <HAL_Delay>

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009772:	b480      	push	{r7}
 8009774:	b085      	sub	sp, #20
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	460b      	mov	r3, r1
 800977c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009782:	2300      	movs	r3, #0
 8009784:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009796:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d109      	bne.n	80097b6 <USB_DriveVbus+0x44>
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d106      	bne.n	80097b6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80097b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80097b4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097c0:	d109      	bne.n	80097d6 <USB_DriveVbus+0x64>
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d106      	bne.n	80097d6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80097d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097d4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80097f0:	2300      	movs	r3, #0
 80097f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	0c5b      	lsrs	r3, r3, #17
 8009802:	f003 0303 	and.w	r3, r3, #3
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009812:	b480      	push	{r7}
 8009814:	b085      	sub	sp, #20
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	b29b      	uxth	r3, r3
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	4608      	mov	r0, r1
 800983e:	4611      	mov	r1, r2
 8009840:	461a      	mov	r2, r3
 8009842:	4603      	mov	r3, r0
 8009844:	70fb      	strb	r3, [r7, #3]
 8009846:	460b      	mov	r3, r1
 8009848:	70bb      	strb	r3, [r7, #2]
 800984a:	4613      	mov	r3, r2
 800984c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009856:	78fb      	ldrb	r3, [r7, #3]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	4413      	add	r3, r2
 800985e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009862:	461a      	mov	r2, r3
 8009864:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009868:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800986a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800986e:	2b03      	cmp	r3, #3
 8009870:	d87c      	bhi.n	800996c <USB_HC_Init+0x138>
 8009872:	a201      	add	r2, pc, #4	@ (adr r2, 8009878 <USB_HC_Init+0x44>)
 8009874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009878:	08009889 	.word	0x08009889
 800987c:	0800992f 	.word	0x0800992f
 8009880:	08009889 	.word	0x08009889
 8009884:	080098f1 	.word	0x080098f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009888:	78fb      	ldrb	r3, [r7, #3]
 800988a:	015a      	lsls	r2, r3, #5
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	4413      	add	r3, r2
 8009890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009894:	461a      	mov	r2, r3
 8009896:	f240 439d 	movw	r3, #1181	@ 0x49d
 800989a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800989c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	da10      	bge.n	80098c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	78fa      	ldrb	r2, [r7, #3]
 80098b4:	0151      	lsls	r1, r2, #5
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	440a      	add	r2, r1
 80098ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098c2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80098c4:	e055      	b.n	8009972 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a6f      	ldr	r2, [pc, #444]	@ (8009a88 <USB_HC_Init+0x254>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d151      	bne.n	8009972 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	015a      	lsls	r2, r3, #5
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	4413      	add	r3, r2
 80098d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	78fa      	ldrb	r2, [r7, #3]
 80098de:	0151      	lsls	r1, r2, #5
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	440a      	add	r2, r1
 80098e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098e8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80098ec:	60d3      	str	r3, [r2, #12]
      break;
 80098ee:	e040      	b.n	8009972 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098fc:	461a      	mov	r2, r3
 80098fe:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009902:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009904:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009908:	2b00      	cmp	r3, #0
 800990a:	da34      	bge.n	8009976 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	4413      	add	r3, r2
 8009914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	78fa      	ldrb	r2, [r7, #3]
 800991c:	0151      	lsls	r1, r2, #5
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	440a      	add	r2, r1
 8009922:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800992a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800992c:	e023      	b.n	8009976 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800992e:	78fb      	ldrb	r3, [r7, #3]
 8009930:	015a      	lsls	r2, r3, #5
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	4413      	add	r3, r2
 8009936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800993a:	461a      	mov	r2, r3
 800993c:	f240 2325 	movw	r3, #549	@ 0x225
 8009940:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009942:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009946:	2b00      	cmp	r3, #0
 8009948:	da17      	bge.n	800997a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800994a:	78fb      	ldrb	r3, [r7, #3]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	4413      	add	r3, r2
 8009952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	78fa      	ldrb	r2, [r7, #3]
 800995a:	0151      	lsls	r1, r2, #5
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	440a      	add	r2, r1
 8009960:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009964:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009968:	60d3      	str	r3, [r2, #12]
      }
      break;
 800996a:	e006      	b.n	800997a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	77fb      	strb	r3, [r7, #31]
      break;
 8009970:	e004      	b.n	800997c <USB_HC_Init+0x148>
      break;
 8009972:	bf00      	nop
 8009974:	e002      	b.n	800997c <USB_HC_Init+0x148>
      break;
 8009976:	bf00      	nop
 8009978:	e000      	b.n	800997c <USB_HC_Init+0x148>
      break;
 800997a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	4413      	add	r3, r2
 8009984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009988:	461a      	mov	r2, r3
 800998a:	2300      	movs	r3, #0
 800998c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800998e:	78fb      	ldrb	r3, [r7, #3]
 8009990:	015a      	lsls	r2, r3, #5
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	4413      	add	r3, r2
 8009996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	78fa      	ldrb	r2, [r7, #3]
 800999e:	0151      	lsls	r1, r2, #5
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	440a      	add	r2, r1
 80099a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099a8:	f043 0302 	orr.w	r3, r3, #2
 80099ac:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80099b4:	699a      	ldr	r2, [r3, #24]
 80099b6:	78fb      	ldrb	r3, [r7, #3]
 80099b8:	f003 030f 	and.w	r3, r3, #15
 80099bc:	2101      	movs	r1, #1
 80099be:	fa01 f303 	lsl.w	r3, r1, r3
 80099c2:	6939      	ldr	r1, [r7, #16]
 80099c4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80099c8:	4313      	orrs	r3, r2
 80099ca:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80099d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	da03      	bge.n	80099e8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80099e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099e4:	61bb      	str	r3, [r7, #24]
 80099e6:	e001      	b.n	80099ec <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff fef9 	bl	80097e4 <USB_GetHostSpeed>
 80099f2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80099f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d106      	bne.n	8009a0a <USB_HC_Init+0x1d6>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d003      	beq.n	8009a0a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009a02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	e001      	b.n	8009a0e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009a0e:	787b      	ldrb	r3, [r7, #1]
 8009a10:	059b      	lsls	r3, r3, #22
 8009a12:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009a16:	78bb      	ldrb	r3, [r7, #2]
 8009a18:	02db      	lsls	r3, r3, #11
 8009a1a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009a1e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009a20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a24:	049b      	lsls	r3, r3, #18
 8009a26:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009a2a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009a2c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009a32:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	431a      	orrs	r2, r3
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009a3c:	78fa      	ldrb	r2, [r7, #3]
 8009a3e:	0151      	lsls	r1, r2, #5
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	440a      	add	r2, r1
 8009a44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009a48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009a4c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009a4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d003      	beq.n	8009a5e <USB_HC_Init+0x22a>
 8009a56:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d10f      	bne.n	8009a7e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009a5e:	78fb      	ldrb	r3, [r7, #3]
 8009a60:	015a      	lsls	r2, r3, #5
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	78fa      	ldrb	r2, [r7, #3]
 8009a6e:	0151      	lsls	r1, r2, #5
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	440a      	add	r2, r1
 8009a74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a7c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009a7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3720      	adds	r7, #32
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	40040000 	.word	0x40040000

08009a8c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b08c      	sub	sp, #48	@ 0x30
 8009a90:	af02      	add	r7, sp, #8
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	4613      	mov	r3, r2
 8009a98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	785b      	ldrb	r3, [r3, #1]
 8009aa2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009aa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009aa8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	4a5d      	ldr	r2, [pc, #372]	@ (8009c24 <USB_HC_StartXfer+0x198>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d12f      	bne.n	8009b12 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009ab2:	79fb      	ldrb	r3, [r7, #7]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d11c      	bne.n	8009af2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	7c9b      	ldrb	r3, [r3, #18]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d003      	beq.n	8009ac8 <USB_HC_StartXfer+0x3c>
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	7c9b      	ldrb	r3, [r3, #18]
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d124      	bne.n	8009b12 <USB_HC_StartXfer+0x86>
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	799b      	ldrb	r3, [r3, #6]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d120      	bne.n	8009b12 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	015a      	lsls	r2, r3, #5
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	69fa      	ldr	r2, [r7, #28]
 8009ae0:	0151      	lsls	r1, r2, #5
 8009ae2:	6a3a      	ldr	r2, [r7, #32]
 8009ae4:	440a      	add	r2, r1
 8009ae6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aee:	60d3      	str	r3, [r2, #12]
 8009af0:	e00f      	b.n	8009b12 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	791b      	ldrb	r3, [r3, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10b      	bne.n	8009b12 <USB_HC_StartXfer+0x86>
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	795b      	ldrb	r3, [r3, #5]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d107      	bne.n	8009b12 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	785b      	ldrb	r3, [r3, #1]
 8009b06:	4619      	mov	r1, r3
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 fb6b 	bl	800a1e4 <USB_DoPing>
        return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	e232      	b.n	8009f78 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	799b      	ldrb	r3, [r3, #6]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d158      	bne.n	8009bcc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	78db      	ldrb	r3, [r3, #3]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d007      	beq.n	8009b36 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009b26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	8a92      	ldrh	r2, [r2, #20]
 8009b2c:	fb03 f202 	mul.w	r2, r3, r2
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	61da      	str	r2, [r3, #28]
 8009b34:	e07c      	b.n	8009c30 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	7c9b      	ldrb	r3, [r3, #18]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d130      	bne.n	8009ba0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	2bbc      	cmp	r3, #188	@ 0xbc
 8009b44:	d918      	bls.n	8009b78 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	8a9b      	ldrh	r3, [r3, #20]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	69da      	ldr	r2, [r3, #28]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d003      	beq.n	8009b68 <USB_HC_StartXfer+0xdc>
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d103      	bne.n	8009b70 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	60da      	str	r2, [r3, #12]
 8009b6e:	e05f      	b.n	8009c30 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2201      	movs	r2, #1
 8009b74:	60da      	str	r2, [r3, #12]
 8009b76:	e05b      	b.n	8009c30 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	6a1a      	ldr	r2, [r3, #32]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d007      	beq.n	8009b98 <USB_HC_StartXfer+0x10c>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d003      	beq.n	8009b98 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2204      	movs	r2, #4
 8009b94:	60da      	str	r2, [r3, #12]
 8009b96:	e04b      	b.n	8009c30 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	2203      	movs	r2, #3
 8009b9c:	60da      	str	r2, [r3, #12]
 8009b9e:	e047      	b.n	8009c30 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009ba0:	79fb      	ldrb	r3, [r7, #7]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d10d      	bne.n	8009bc2 <USB_HC_StartXfer+0x136>
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	8a92      	ldrh	r2, [r2, #20]
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d907      	bls.n	8009bc2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009bb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	8a92      	ldrh	r2, [r2, #20]
 8009bb8:	fb03 f202 	mul.w	r2, r3, r2
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	61da      	str	r2, [r3, #28]
 8009bc0:	e036      	b.n	8009c30 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	6a1a      	ldr	r2, [r3, #32]
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	61da      	str	r2, [r3, #28]
 8009bca:	e031      	b.n	8009c30 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	6a1b      	ldr	r3, [r3, #32]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d018      	beq.n	8009c06 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	6a1b      	ldr	r3, [r3, #32]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	8a92      	ldrh	r2, [r2, #20]
 8009bdc:	4413      	add	r3, r2
 8009bde:	3b01      	subs	r3, #1
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	8a92      	ldrh	r2, [r2, #20]
 8009be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009be8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009bea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009bec:	8b7b      	ldrh	r3, [r7, #26]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d90b      	bls.n	8009c0a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009bf2:	8b7b      	ldrh	r3, [r7, #26]
 8009bf4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009bf6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	8a92      	ldrh	r2, [r2, #20]
 8009bfc:	fb03 f202 	mul.w	r2, r3, r2
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	61da      	str	r2, [r3, #28]
 8009c04:	e001      	b.n	8009c0a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009c06:	2301      	movs	r3, #1
 8009c08:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	78db      	ldrb	r3, [r3, #3]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00a      	beq.n	8009c28 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009c12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	8a92      	ldrh	r2, [r2, #20]
 8009c18:	fb03 f202 	mul.w	r2, r3, r2
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	61da      	str	r2, [r3, #28]
 8009c20:	e006      	b.n	8009c30 <USB_HC_StartXfer+0x1a4>
 8009c22:	bf00      	nop
 8009c24:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	6a1a      	ldr	r2, [r3, #32]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	69db      	ldr	r3, [r3, #28]
 8009c34:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009c38:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009c3a:	04d9      	lsls	r1, r3, #19
 8009c3c:	4ba3      	ldr	r3, [pc, #652]	@ (8009ecc <USB_HC_StartXfer+0x440>)
 8009c3e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009c40:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	7d9b      	ldrb	r3, [r3, #22]
 8009c46:	075b      	lsls	r3, r3, #29
 8009c48:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009c4c:	69f9      	ldr	r1, [r7, #28]
 8009c4e:	0148      	lsls	r0, r1, #5
 8009c50:	6a39      	ldr	r1, [r7, #32]
 8009c52:	4401      	add	r1, r0
 8009c54:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009c58:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009c5a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009c5c:	79fb      	ldrb	r3, [r7, #7]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d009      	beq.n	8009c76 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	6999      	ldr	r1, [r3, #24]
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c72:	460a      	mov	r2, r1
 8009c74:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	bf0c      	ite	eq
 8009c86:	2301      	moveq	r3, #1
 8009c88:	2300      	movne	r3, #0
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	015a      	lsls	r2, r3, #5
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	4413      	add	r3, r2
 8009c96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	69fa      	ldr	r2, [r7, #28]
 8009c9e:	0151      	lsls	r1, r2, #5
 8009ca0:	6a3a      	ldr	r2, [r7, #32]
 8009ca2:	440a      	add	r2, r1
 8009ca4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ca8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009cac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	6a3b      	ldr	r3, [r7, #32]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	7e7b      	ldrb	r3, [r7, #25]
 8009cbe:	075b      	lsls	r3, r3, #29
 8009cc0:	69f9      	ldr	r1, [r7, #28]
 8009cc2:	0148      	lsls	r0, r1, #5
 8009cc4:	6a39      	ldr	r1, [r7, #32]
 8009cc6:	4401      	add	r1, r0
 8009cc8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	799b      	ldrb	r3, [r3, #6]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	f040 80c3 	bne.w	8009e60 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	7c5b      	ldrb	r3, [r3, #17]
 8009cde:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	69fa      	ldr	r2, [r7, #28]
 8009ce8:	0151      	lsls	r1, r2, #5
 8009cea:	6a3a      	ldr	r2, [r7, #32]
 8009cec:	440a      	add	r2, r1
 8009cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009cf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009cf6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	69fa      	ldr	r2, [r7, #28]
 8009d08:	0151      	lsls	r1, r2, #5
 8009d0a:	6a3a      	ldr	r2, [r7, #32]
 8009d0c:	440a      	add	r2, r1
 8009d0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d12:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009d16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	79db      	ldrb	r3, [r3, #7]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d123      	bne.n	8009d68 <USB_HC_StartXfer+0x2dc>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	78db      	ldrb	r3, [r3, #3]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d11f      	bne.n	8009d68 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	015a      	lsls	r2, r3, #5
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	69fa      	ldr	r2, [r7, #28]
 8009d38:	0151      	lsls	r1, r2, #5
 8009d3a:	6a3a      	ldr	r2, [r7, #32]
 8009d3c:	440a      	add	r2, r1
 8009d3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d46:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	0151      	lsls	r1, r2, #5
 8009d5a:	6a3a      	ldr	r2, [r7, #32]
 8009d5c:	440a      	add	r2, r1
 8009d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d66:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	7c9b      	ldrb	r3, [r3, #18]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d003      	beq.n	8009d78 <USB_HC_StartXfer+0x2ec>
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	7c9b      	ldrb	r3, [r3, #18]
 8009d74:	2b03      	cmp	r3, #3
 8009d76:	d117      	bne.n	8009da8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d113      	bne.n	8009da8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	78db      	ldrb	r3, [r3, #3]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d10f      	bne.n	8009da8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	69fa      	ldr	r2, [r7, #28]
 8009d98:	0151      	lsls	r1, r2, #5
 8009d9a:	6a3a      	ldr	r2, [r7, #32]
 8009d9c:	440a      	add	r2, r1
 8009d9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009da2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009da6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	7c9b      	ldrb	r3, [r3, #18]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d162      	bne.n	8009e76 <USB_HC_StartXfer+0x3ea>
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	78db      	ldrb	r3, [r3, #3]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d15e      	bne.n	8009e76 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d858      	bhi.n	8009e74 <USB_HC_StartXfer+0x3e8>
 8009dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc8 <USB_HC_StartXfer+0x33c>)
 8009dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc8:	08009dd9 	.word	0x08009dd9
 8009dcc:	08009dfb 	.word	0x08009dfb
 8009dd0:	08009e1d 	.word	0x08009e1d
 8009dd4:	08009e3f 	.word	0x08009e3f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	015a      	lsls	r2, r3, #5
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	69fa      	ldr	r2, [r7, #28]
 8009de8:	0151      	lsls	r1, r2, #5
 8009dea:	6a3a      	ldr	r2, [r7, #32]
 8009dec:	440a      	add	r2, r1
 8009dee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009df6:	6053      	str	r3, [r2, #4]
          break;
 8009df8:	e03d      	b.n	8009e76 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	69fa      	ldr	r2, [r7, #28]
 8009e0a:	0151      	lsls	r1, r2, #5
 8009e0c:	6a3a      	ldr	r2, [r7, #32]
 8009e0e:	440a      	add	r2, r1
 8009e10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e14:	f043 030e 	orr.w	r3, r3, #14
 8009e18:	6053      	str	r3, [r2, #4]
          break;
 8009e1a:	e02c      	b.n	8009e76 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	015a      	lsls	r2, r3, #5
 8009e20:	6a3b      	ldr	r3, [r7, #32]
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	69fa      	ldr	r2, [r7, #28]
 8009e2c:	0151      	lsls	r1, r2, #5
 8009e2e:	6a3a      	ldr	r2, [r7, #32]
 8009e30:	440a      	add	r2, r1
 8009e32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009e3a:	6053      	str	r3, [r2, #4]
          break;
 8009e3c:	e01b      	b.n	8009e76 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	015a      	lsls	r2, r3, #5
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	4413      	add	r3, r2
 8009e46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	69fa      	ldr	r2, [r7, #28]
 8009e4e:	0151      	lsls	r1, r2, #5
 8009e50:	6a3a      	ldr	r2, [r7, #32]
 8009e52:	440a      	add	r2, r1
 8009e54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e5c:	6053      	str	r3, [r2, #4]
          break;
 8009e5e:	e00a      	b.n	8009e76 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	2300      	movs	r3, #0
 8009e70:	6053      	str	r3, [r2, #4]
 8009e72:	e000      	b.n	8009e76 <USB_HC_StartXfer+0x3ea>
          break;
 8009e74:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009e8c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	78db      	ldrb	r3, [r3, #3]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d004      	beq.n	8009ea0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e9c:	613b      	str	r3, [r7, #16]
 8009e9e:	e003      	b.n	8009ea8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ea6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009eae:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	015a      	lsls	r2, r3, #5
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009ec2:	79fb      	ldrb	r3, [r7, #7]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d003      	beq.n	8009ed0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	e055      	b.n	8009f78 <USB_HC_StartXfer+0x4ec>
 8009ecc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	78db      	ldrb	r3, [r3, #3]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d14e      	bne.n	8009f76 <USB_HC_StartXfer+0x4ea>
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d04a      	beq.n	8009f76 <USB_HC_StartXfer+0x4ea>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	79db      	ldrb	r3, [r3, #7]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d146      	bne.n	8009f76 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	7c9b      	ldrb	r3, [r3, #18]
 8009eec:	2b03      	cmp	r3, #3
 8009eee:	d831      	bhi.n	8009f54 <USB_HC_StartXfer+0x4c8>
 8009ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef8 <USB_HC_StartXfer+0x46c>)
 8009ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef6:	bf00      	nop
 8009ef8:	08009f09 	.word	0x08009f09
 8009efc:	08009f2d 	.word	0x08009f2d
 8009f00:	08009f09 	.word	0x08009f09
 8009f04:	08009f2d 	.word	0x08009f2d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	3303      	adds	r3, #3
 8009f0e:	089b      	lsrs	r3, r3, #2
 8009f10:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009f12:	8afa      	ldrh	r2, [r7, #22]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d91c      	bls.n	8009f58 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	f043 0220 	orr.w	r2, r3, #32
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	619a      	str	r2, [r3, #24]
        }
        break;
 8009f2a:	e015      	b.n	8009f58 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	6a1b      	ldr	r3, [r3, #32]
 8009f30:	3303      	adds	r3, #3
 8009f32:	089b      	lsrs	r3, r3, #2
 8009f34:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009f36:	8afa      	ldrh	r2, [r7, #22]
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d90a      	bls.n	8009f5c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	619a      	str	r2, [r3, #24]
        }
        break;
 8009f52:	e003      	b.n	8009f5c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009f54:	bf00      	nop
 8009f56:	e002      	b.n	8009f5e <USB_HC_StartXfer+0x4d2>
        break;
 8009f58:	bf00      	nop
 8009f5a:	e000      	b.n	8009f5e <USB_HC_StartXfer+0x4d2>
        break;
 8009f5c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	6999      	ldr	r1, [r3, #24]
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	785a      	ldrb	r2, [r3, #1]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	9000      	str	r0, [sp, #0]
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f7ff f9c3 	bl	80092fc <USB_WritePacket>
  }

  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3728      	adds	r7, #40	@ 0x28
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	b29b      	uxth	r3, r3
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b089      	sub	sp, #36	@ 0x24
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	460b      	mov	r3, r1
 8009fac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009fb2:	78fb      	ldrb	r3, [r7, #3]
 8009fb4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	0c9b      	lsrs	r3, r3, #18
 8009fca:	f003 0303 	and.w	r3, r3, #3
 8009fce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	0fdb      	lsrs	r3, r3, #31
 8009fe0:	f003 0301 	and.w	r3, r3, #1
 8009fe4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	0fdb      	lsrs	r3, r3, #31
 8009ff6:	f003 0301 	and.w	r3, r3, #1
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f003 0320 	and.w	r3, r3, #32
 800a004:	2b20      	cmp	r3, #32
 800a006:	d10d      	bne.n	800a024 <USB_HC_Halt+0x82>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10a      	bne.n	800a024 <USB_HC_Halt+0x82>
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d005      	beq.n	800a020 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d002      	beq.n	800a020 <USB_HC_Halt+0x7e>
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b03      	cmp	r3, #3
 800a01e:	d101      	bne.n	800a024 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	e0d8      	b.n	800a1d6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d002      	beq.n	800a030 <USB_HC_Halt+0x8e>
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d173      	bne.n	800a118 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	4413      	add	r3, r2
 800a038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	69ba      	ldr	r2, [r7, #24]
 800a040:	0151      	lsls	r1, r2, #5
 800a042:	69fa      	ldr	r2, [r7, #28]
 800a044:	440a      	add	r2, r1
 800a046:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a04a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a04e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	f003 0320 	and.w	r3, r3, #32
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d14a      	bne.n	800a0f2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a060:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d133      	bne.n	800a0d0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	015a      	lsls	r2, r3, #5
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	4413      	add	r3, r2
 800a070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	69ba      	ldr	r2, [r7, #24]
 800a078:	0151      	lsls	r1, r2, #5
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	440a      	add	r2, r1
 800a07e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a082:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a086:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	0151      	lsls	r1, r2, #5
 800a09a:	69fa      	ldr	r2, [r7, #28]
 800a09c:	440a      	add	r2, r1
 800a09e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a0a6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a0b4:	d82e      	bhi.n	800a114 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0cc:	d0ec      	beq.n	800a0a8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a0ce:	e081      	b.n	800a1d4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	0151      	lsls	r1, r2, #5
 800a0e2:	69fa      	ldr	r2, [r7, #28]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a0ee:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a0f0:	e070      	b.n	800a1d4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	015a      	lsls	r2, r3, #5
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	69ba      	ldr	r2, [r7, #24]
 800a102:	0151      	lsls	r1, r2, #5
 800a104:	69fa      	ldr	r2, [r7, #28]
 800a106:	440a      	add	r2, r1
 800a108:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a10c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a110:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a112:	e05f      	b.n	800a1d4 <USB_HC_Halt+0x232>
            break;
 800a114:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a116:	e05d      	b.n	800a1d4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	69ba      	ldr	r2, [r7, #24]
 800a128:	0151      	lsls	r1, r2, #5
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	440a      	add	r2, r1
 800a12e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a132:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a136:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d133      	bne.n	800a1b0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	69ba      	ldr	r2, [r7, #24]
 800a158:	0151      	lsls	r1, r2, #5
 800a15a:	69fa      	ldr	r2, [r7, #28]
 800a15c:	440a      	add	r2, r1
 800a15e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a162:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a166:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	015a      	lsls	r2, r3, #5
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	4413      	add	r3, r2
 800a170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	69ba      	ldr	r2, [r7, #24]
 800a178:	0151      	lsls	r1, r2, #5
 800a17a:	69fa      	ldr	r2, [r7, #28]
 800a17c:	440a      	add	r2, r1
 800a17e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a182:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a186:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	3301      	adds	r3, #1
 800a18c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a194:	d81d      	bhi.n	800a1d2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1ac:	d0ec      	beq.n	800a188 <USB_HC_Halt+0x1e6>
 800a1ae:	e011      	b.n	800a1d4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	0151      	lsls	r1, r2, #5
 800a1c2:	69fa      	ldr	r2, [r7, #28]
 800a1c4:	440a      	add	r2, r1
 800a1c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	e000      	b.n	800a1d4 <USB_HC_Halt+0x232>
          break;
 800a1d2:	bf00      	nop
    }
  }

  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3724      	adds	r7, #36	@ 0x24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
	...

0800a1e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b087      	sub	sp, #28
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	04da      	lsls	r2, r3, #19
 800a200:	4b15      	ldr	r3, [pc, #84]	@ (800a258 <USB_DoPing+0x74>)
 800a202:	4013      	ands	r3, r2
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	0151      	lsls	r1, r2, #5
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	440a      	add	r2, r1
 800a20c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a210:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a214:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	015a      	lsls	r2, r3, #5
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	4413      	add	r3, r2
 800a21e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a22c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a234:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	015a      	lsls	r2, r3, #5
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	4413      	add	r3, r2
 800a23e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a242:	461a      	mov	r2, r3
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	371c      	adds	r7, #28
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	1ff80000 	.word	0x1ff80000

0800a25c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a26c:	2300      	movs	r3, #0
 800a26e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7fe ff86 	bl	8009182 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a276:	2110      	movs	r1, #16
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7fe ffdf 	bl	800923c <USB_FlushTxFifo>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d001      	beq.n	800a288 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f7ff f809 	bl	80092a0 <USB_FlushRxFifo>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d001      	beq.n	800a298 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a298:	2300      	movs	r3, #0
 800a29a:	61bb      	str	r3, [r7, #24]
 800a29c:	e01f      	b.n	800a2de <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	015a      	lsls	r2, r3, #5
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a2b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a2bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a2c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	61bb      	str	r3, [r7, #24]
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	2b0f      	cmp	r3, #15
 800a2e2:	d9dc      	bls.n	800a29e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	61bb      	str	r3, [r7, #24]
 800a2e8:	e034      	b.n	800a354 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	015a      	lsls	r2, r3, #5
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a300:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a308:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a310:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	015a      	lsls	r2, r3, #5
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	4413      	add	r3, r2
 800a31a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a31e:	461a      	mov	r2, r3
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3301      	adds	r3, #1
 800a328:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a330:	d80c      	bhi.n	800a34c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	015a      	lsls	r2, r3, #5
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	4413      	add	r3, r2
 800a33a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a344:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a348:	d0ec      	beq.n	800a324 <USB_StopHost+0xc8>
 800a34a:	e000      	b.n	800a34e <USB_StopHost+0xf2>
        break;
 800a34c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	3301      	adds	r3, #1
 800a352:	61bb      	str	r3, [r7, #24]
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	2b0f      	cmp	r3, #15
 800a358:	d9c7      	bls.n	800a2ea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a360:	461a      	mov	r2, r3
 800a362:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a366:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a36e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7fe fef5 	bl	8009160 <USB_EnableGlobalInt>

  return ret;
 800a376:	7ffb      	ldrb	r3, [r7, #31]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3720      	adds	r7, #32
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a380:	b590      	push	{r4, r7, lr}
 800a382:	b089      	sub	sp, #36	@ 0x24
 800a384:	af04      	add	r7, sp, #16
 800a386:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a388:	2301      	movs	r3, #1
 800a38a:	2202      	movs	r2, #2
 800a38c:	2102      	movs	r1, #2
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fcb7 	bl	800ad02 <USBH_FindInterface>
 800a394:	4603      	mov	r3, r0
 800a396:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a398:	7bfb      	ldrb	r3, [r7, #15]
 800a39a:	2bff      	cmp	r3, #255	@ 0xff
 800a39c:	d002      	beq.n	800a3a4 <USBH_CDC_InterfaceInit+0x24>
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d901      	bls.n	800a3a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	e13d      	b.n	800a624 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fc8c 	bl	800acca <USBH_SelectInterface>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a3b6:	7bbb      	ldrb	r3, [r7, #14]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a3bc:	2302      	movs	r3, #2
 800a3be:	e131      	b.n	800a624 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800a3c6:	2050      	movs	r0, #80	@ 0x50
 800a3c8:	f00e fa0a 	bl	80187e0 <malloc>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a3d6:	69db      	ldr	r3, [r3, #28]
 800a3d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	e11f      	b.n	800a624 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a3e4:	2250      	movs	r2, #80	@ 0x50
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	68b8      	ldr	r0, [r7, #8]
 800a3ea:	f00e fe67 	bl	80190bc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	211a      	movs	r1, #26
 800a3f4:	fb01 f303 	mul.w	r3, r1, r3
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	b25b      	sxtb	r3, r3
 800a402:	2b00      	cmp	r3, #0
 800a404:	da15      	bge.n	800a432 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a406:	7bfb      	ldrb	r3, [r7, #15]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	211a      	movs	r1, #26
 800a40c:	fb01 f303 	mul.w	r3, r1, r3
 800a410:	4413      	add	r3, r2
 800a412:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a416:	781a      	ldrb	r2, [r3, #0]
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a41c:	7bfb      	ldrb	r3, [r7, #15]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	211a      	movs	r1, #26
 800a422:	fb01 f303 	mul.w	r3, r1, r3
 800a426:	4413      	add	r3, r2
 800a428:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a42c:	881a      	ldrh	r2, [r3, #0]
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	785b      	ldrb	r3, [r3, #1]
 800a436:	4619      	mov	r1, r3
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f002 f904 	bl	800c646 <USBH_AllocPipe>
 800a43e:	4603      	mov	r3, r0
 800a440:	461a      	mov	r2, r3
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	7819      	ldrb	r1, [r3, #0]
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	7858      	ldrb	r0, [r3, #1]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	8952      	ldrh	r2, [r2, #10]
 800a45e:	9202      	str	r2, [sp, #8]
 800a460:	2203      	movs	r2, #3
 800a462:	9201      	str	r2, [sp, #4]
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	4623      	mov	r3, r4
 800a468:	4602      	mov	r2, r0
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f002 f8bc 	bl	800c5e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	2200      	movs	r2, #0
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f005 fbfb 	bl	800fc74 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a47e:	2300      	movs	r3, #0
 800a480:	2200      	movs	r2, #0
 800a482:	210a      	movs	r1, #10
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fc3c 	bl	800ad02 <USBH_FindInterface>
 800a48a:	4603      	mov	r3, r0
 800a48c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
 800a490:	2bff      	cmp	r3, #255	@ 0xff
 800a492:	d002      	beq.n	800a49a <USBH_CDC_InterfaceInit+0x11a>
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d901      	bls.n	800a49e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a49a:	2302      	movs	r3, #2
 800a49c:	e0c2      	b.n	800a624 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	211a      	movs	r1, #26
 800a4a4:	fb01 f303 	mul.w	r3, r1, r3
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	b25b      	sxtb	r3, r3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	da16      	bge.n	800a4e4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	211a      	movs	r1, #26
 800a4bc:	fb01 f303 	mul.w	r3, r1, r3
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a4c6:	781a      	ldrb	r2, [r3, #0]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	211a      	movs	r1, #26
 800a4d2:	fb01 f303 	mul.w	r3, r1, r3
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a4dc:	881a      	ldrh	r2, [r3, #0]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	835a      	strh	r2, [r3, #26]
 800a4e2:	e015      	b.n	800a510 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	211a      	movs	r1, #26
 800a4ea:	fb01 f303 	mul.w	r3, r1, r3
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a4f4:	781a      	ldrb	r2, [r3, #0]
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	211a      	movs	r1, #26
 800a500:	fb01 f303 	mul.w	r3, r1, r3
 800a504:	4413      	add	r3, r2
 800a506:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a50a:	881a      	ldrh	r2, [r3, #0]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a510:	7bfb      	ldrb	r3, [r7, #15]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	211a      	movs	r1, #26
 800a516:	fb01 f303 	mul.w	r3, r1, r3
 800a51a:	4413      	add	r3, r2
 800a51c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	b25b      	sxtb	r3, r3
 800a524:	2b00      	cmp	r3, #0
 800a526:	da16      	bge.n	800a556 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a528:	7bfb      	ldrb	r3, [r7, #15]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	211a      	movs	r1, #26
 800a52e:	fb01 f303 	mul.w	r3, r1, r3
 800a532:	4413      	add	r3, r2
 800a534:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a538:	781a      	ldrb	r2, [r3, #0]
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	211a      	movs	r1, #26
 800a544:	fb01 f303 	mul.w	r3, r1, r3
 800a548:	4413      	add	r3, r2
 800a54a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a54e:	881a      	ldrh	r2, [r3, #0]
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	835a      	strh	r2, [r3, #26]
 800a554:	e015      	b.n	800a582 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	211a      	movs	r1, #26
 800a55c:	fb01 f303 	mul.w	r3, r1, r3
 800a560:	4413      	add	r3, r2
 800a562:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a566:	781a      	ldrb	r2, [r3, #0]
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a56c:	7bfb      	ldrb	r3, [r7, #15]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	211a      	movs	r1, #26
 800a572:	fb01 f303 	mul.w	r3, r1, r3
 800a576:	4413      	add	r3, r2
 800a578:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a57c:	881a      	ldrh	r2, [r3, #0]
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	7b9b      	ldrb	r3, [r3, #14]
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f002 f85c 	bl	800c646 <USBH_AllocPipe>
 800a58e:	4603      	mov	r3, r0
 800a590:	461a      	mov	r2, r3
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	7bdb      	ldrb	r3, [r3, #15]
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f002 f852 	bl	800c646 <USBH_AllocPipe>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	7b59      	ldrb	r1, [r3, #13]
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	7b98      	ldrb	r0, [r3, #14]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	8b12      	ldrh	r2, [r2, #24]
 800a5c2:	9202      	str	r2, [sp, #8]
 800a5c4:	2202      	movs	r2, #2
 800a5c6:	9201      	str	r2, [sp, #4]
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	4623      	mov	r3, r4
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f002 f80a 	bl	800c5e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	7b19      	ldrb	r1, [r3, #12]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	7bd8      	ldrb	r0, [r3, #15]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	8b52      	ldrh	r2, [r2, #26]
 800a5ec:	9202      	str	r2, [sp, #8]
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	9201      	str	r2, [sp, #4]
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	4623      	mov	r3, r4
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f001 fff5 	bl	800c5e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	7b5b      	ldrb	r3, [r3, #13]
 800a60a:	2200      	movs	r2, #0
 800a60c:	4619      	mov	r1, r3
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f005 fb30 	bl	800fc74 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	7b1b      	ldrb	r3, [r3, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	4619      	mov	r1, r3
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f005 fb29 	bl	800fc74 <USBH_LL_SetToggle>

  return USBH_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd90      	pop	{r4, r7, pc}

0800a62c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a63a:	69db      	ldr	r3, [r3, #28]
 800a63c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00e      	beq.n	800a664 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	4619      	mov	r1, r3
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f001 ffea 	bl	800c626 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f002 f815 	bl	800c688 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	7b1b      	ldrb	r3, [r3, #12]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00e      	beq.n	800a68a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	7b1b      	ldrb	r3, [r3, #12]
 800a670:	4619      	mov	r1, r3
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f001 ffd7 	bl	800c626 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	7b1b      	ldrb	r3, [r3, #12]
 800a67c:	4619      	mov	r1, r3
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f002 f802 	bl	800c688 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	7b5b      	ldrb	r3, [r3, #13]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00e      	beq.n	800a6b0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	7b5b      	ldrb	r3, [r3, #13]
 800a696:	4619      	mov	r1, r3
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f001 ffc4 	bl	800c626 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	7b5b      	ldrb	r3, [r3, #13]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f001 ffef 	bl	800c688 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6b6:	69db      	ldr	r3, [r3, #28]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00b      	beq.n	800a6d4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f00e f893 	bl	80187f0 <free>
    phost->pActiveClass->pData = 0U;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6ec:	69db      	ldr	r3, [r3, #28]
 800a6ee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	3340      	adds	r3, #64	@ 0x40
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f8b1 	bl	800a85e <GetLineCoding>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a700:	7afb      	ldrb	r3, [r7, #11]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d105      	bne.n	800a712 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a70c:	2102      	movs	r1, #2
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a712:	7afb      	ldrb	r3, [r7, #11]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a724:	2301      	movs	r3, #1
 800a726:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a728:	2300      	movs	r3, #0
 800a72a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a73c:	2b04      	cmp	r3, #4
 800a73e:	d877      	bhi.n	800a830 <USBH_CDC_Process+0x114>
 800a740:	a201      	add	r2, pc, #4	@ (adr r2, 800a748 <USBH_CDC_Process+0x2c>)
 800a742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a746:	bf00      	nop
 800a748:	0800a75d 	.word	0x0800a75d
 800a74c:	0800a763 	.word	0x0800a763
 800a750:	0800a793 	.word	0x0800a793
 800a754:	0800a807 	.word	0x0800a807
 800a758:	0800a815 	.word	0x0800a815
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73fb      	strb	r3, [r7, #15]
      break;
 800a760:	e06d      	b.n	800a83e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a766:	4619      	mov	r1, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f897 	bl	800a89c <SetLineCoding>
 800a76e:	4603      	mov	r3, r0
 800a770:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a772:	7bbb      	ldrb	r3, [r7, #14]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d104      	bne.n	800a782 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	2202      	movs	r2, #2
 800a77c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a780:	e058      	b.n	800a834 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d055      	beq.n	800a834 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	2204      	movs	r2, #4
 800a78c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a790:	e050      	b.n	800a834 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	3340      	adds	r3, #64	@ 0x40
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f860 	bl	800a85e <GetLineCoding>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a7a2:	7bbb      	ldrb	r3, [r7, #14]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d126      	bne.n	800a7f6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7ba:	791b      	ldrb	r3, [r3, #4]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d13b      	bne.n	800a838 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7ca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d133      	bne.n	800a838 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7da:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d12b      	bne.n	800a838 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7e8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d124      	bne.n	800a838 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f96a 	bl	800aac8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a7f4:	e020      	b.n	800a838 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a7f6:	7bbb      	ldrb	r3, [r7, #14]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d01d      	beq.n	800a838 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	2204      	movs	r2, #4
 800a800:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a804:	e018      	b.n	800a838 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f867 	bl	800a8da <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f8e6 	bl	800a9de <CDC_ProcessReception>
      break;
 800a812:	e014      	b.n	800a83e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a814:	2100      	movs	r1, #0
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f001 f8f8 	bl	800ba0c <USBH_ClrFeature>
 800a81c:	4603      	mov	r3, r0
 800a81e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a820:	7bbb      	ldrb	r3, [r7, #14]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10a      	bne.n	800a83c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800a82e:	e005      	b.n	800a83c <USBH_CDC_Process+0x120>

    default:
      break;
 800a830:	bf00      	nop
 800a832:	e004      	b.n	800a83e <USBH_CDC_Process+0x122>
      break;
 800a834:	bf00      	nop
 800a836:	e002      	b.n	800a83e <USBH_CDC_Process+0x122>
      break;
 800a838:	bf00      	nop
 800a83a:	e000      	b.n	800a83e <USBH_CDC_Process+0x122>
      break;
 800a83c:	bf00      	nop

  }

  return status;
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b082      	sub	sp, #8
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	22a1      	movs	r2, #161	@ 0xa1
 800a86c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2221      	movs	r2, #33	@ 0x21
 800a872:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2207      	movs	r2, #7
 800a884:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2207      	movs	r2, #7
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f001 fbf1 	bl	800c074 <USBH_CtlReq>
 800a892:	4603      	mov	r3, r0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2221      	movs	r2, #33	@ 0x21
 800a8aa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2207      	movs	r2, #7
 800a8c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	2207      	movs	r2, #7
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f001 fbd2 	bl	800c074 <USBH_CtlReq>
 800a8d0:	4603      	mov	r3, r0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b086      	sub	sp, #24
 800a8de:	af02      	add	r7, sp, #8
 800a8e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d002      	beq.n	800a900 <CDC_ProcessTransmission+0x26>
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d023      	beq.n	800a946 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a8fe:	e06a      	b.n	800a9d6 <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	8b12      	ldrh	r2, [r2, #24]
 800a908:	4293      	cmp	r3, r2
 800a90a:	d90b      	bls.n	800a924 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	69d9      	ldr	r1, [r3, #28]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	8b1a      	ldrh	r2, [r3, #24]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	7b5b      	ldrb	r3, [r3, #13]
 800a918:	2001      	movs	r0, #1
 800a91a:	9000      	str	r0, [sp, #0]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f001 fe20 	bl	800c562 <USBH_BulkSendData>
 800a922:	e00b      	b.n	800a93c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	7b5b      	ldrb	r3, [r3, #13]
 800a932:	2001      	movs	r0, #1
 800a934:	9000      	str	r0, [sp, #0]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f001 fe13 	bl	800c562 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2202      	movs	r2, #2
 800a940:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a944:	e047      	b.n	800a9d6 <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	7b5b      	ldrb	r3, [r3, #13]
 800a94a:	4619      	mov	r1, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f005 f967 	bl	800fc20 <USBH_LL_GetURBState>
 800a952:	4603      	mov	r3, r0
 800a954:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a956:	7afb      	ldrb	r3, [r7, #11]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d12e      	bne.n	800a9ba <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	8b12      	ldrh	r2, [r2, #24]
 800a964:	4293      	cmp	r3, r2
 800a966:	d90e      	bls.n	800a986 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	8b12      	ldrh	r2, [r2, #24]
 800a970:	1a9a      	subs	r2, r3, r2
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	69db      	ldr	r3, [r3, #28]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	8b12      	ldrh	r2, [r2, #24]
 800a97e:	441a      	add	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	61da      	str	r2, [r3, #28]
 800a984:	e002      	b.n	800a98c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a990:	2b00      	cmp	r3, #0
 800a992:	d004      	beq.n	800a99e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800a99c:	e006      	b.n	800a9ac <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f87a 	bl	800aaa0 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	2104      	movs	r1, #4
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 feb6 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800a9b8:	e00c      	b.n	800a9d4 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 800a9ba:	7afb      	ldrb	r3, [r7, #11]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d109      	bne.n	800a9d4 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2104      	movs	r1, #4
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fea8 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800a9d4:	bf00      	nop
  }
}
 800a9d6:	bf00      	nop
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b086      	sub	sp, #24
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a9ec:	69db      	ldr	r3, [r3, #28]
 800a9ee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d002      	beq.n	800aa04 <CDC_ProcessReception+0x26>
 800a9fe:	2b04      	cmp	r3, #4
 800aa00:	d00e      	beq.n	800aa20 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800aa02:	e049      	b.n	800aa98 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	6a19      	ldr	r1, [r3, #32]
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	8b5a      	ldrh	r2, [r3, #26]
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	7b1b      	ldrb	r3, [r3, #12]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f001 fdcb 	bl	800c5ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2204      	movs	r2, #4
 800aa1a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800aa1e:	e03b      	b.n	800aa98 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	7b1b      	ldrb	r3, [r3, #12]
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f005 f8fa 	bl	800fc20 <USBH_LL_GetURBState>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800aa30:	7cfb      	ldrb	r3, [r7, #19]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d12f      	bne.n	800aa96 <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	7b1b      	ldrb	r3, [r3, #12]
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f005 f85d 	bl	800fafc <USBH_LL_GetLastXferSize>
 800aa42:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d016      	beq.n	800aa7c <CDC_ProcessReception+0x9e>
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	8b5b      	ldrh	r3, [r3, #26]
 800aa52:	461a      	mov	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d110      	bne.n	800aa7c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	1ad2      	subs	r2, r2, r3
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	6a1a      	ldr	r2, [r3, #32]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	441a      	add	r2, r3
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	2203      	movs	r2, #3
 800aa76:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800aa7a:	e006      	b.n	800aa8a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 f815 	bl	800aab4 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2104      	movs	r1, #4
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 fe47 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800aa96:	bf00      	nop
  }
}
 800aa98:	bf00      	nop
 800aa9a:	3718      	adds	r7, #24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	4613      	mov	r3, r2
 800aae8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d101      	bne.n	800aaf4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	e044      	b.n	800ab7e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	79fa      	ldrb	r2, [r7, #7]
 800aaf8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f000 f841 	bl	800ab94 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800ab40:	2200      	movs	r2, #0
 800ab42:	2104      	movs	r1, #4
 800ab44:	2010      	movs	r0, #16
 800ab46:	f001 ff1c 	bl	800c982 <osMessageQueueNew>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800ab52:	4b0d      	ldr	r3, [pc, #52]	@ (800ab88 <USBH_Init+0xac>)
 800ab54:	4a0d      	ldr	r2, [pc, #52]	@ (800ab8c <USBH_Init+0xb0>)
 800ab56:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800ab58:	4b0b      	ldr	r3, [pc, #44]	@ (800ab88 <USBH_Init+0xac>)
 800ab5a:	2280      	movs	r2, #128	@ 0x80
 800ab5c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800ab5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ab88 <USBH_Init+0xac>)
 800ab60:	2218      	movs	r2, #24
 800ab62:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800ab64:	4a08      	ldr	r2, [pc, #32]	@ (800ab88 <USBH_Init+0xac>)
 800ab66:	68f9      	ldr	r1, [r7, #12]
 800ab68:	4809      	ldr	r0, [pc, #36]	@ (800ab90 <USBH_Init+0xb4>)
 800ab6a:	f001 fe5d 	bl	800c828 <osThreadNew>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f004 ff0c 	bl	800f994 <USBH_LL_Init>

  return USBH_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	20002c4c 	.word	0x20002c4c
 800ab8c:	0801a06c 	.word	0x0801a06c
 800ab90:	0800b76d 	.word	0x0800b76d

0800ab94 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	60fb      	str	r3, [r7, #12]
 800aba0:	e009      	b.n	800abb6 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	33e0      	adds	r3, #224	@ 0xe0
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4413      	add	r3, r2
 800abac:	2200      	movs	r2, #0
 800abae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	3301      	adds	r3, #1
 800abb4:	60fb      	str	r3, [r7, #12]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b0f      	cmp	r3, #15
 800abba:	d9f2      	bls.n	800aba2 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800abbc:	2300      	movs	r3, #0
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	e009      	b.n	800abd6 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	4413      	add	r3, r2
 800abc8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800abcc:	2200      	movs	r2, #0
 800abce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3301      	adds	r3, #1
 800abd4:	60fb      	str	r3, [r7, #12]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abdc:	d3f1      	bcc.n	800abc2 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2240      	movs	r2, #64	@ 0x40
 800ac02:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	331c      	adds	r3, #28
 800ac2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ac32:	2100      	movs	r1, #0
 800ac34:	4618      	mov	r0, r3
 800ac36:	f00e fa41 	bl	80190bc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ac40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac44:	2100      	movs	r1, #0
 800ac46:	4618      	mov	r0, r3
 800ac48:	f00e fa38 	bl	80190bc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ac52:	2212      	movs	r2, #18
 800ac54:	2100      	movs	r1, #0
 800ac56:	4618      	mov	r0, r3
 800ac58:	f00e fa30 	bl	80190bc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ac62:	223e      	movs	r2, #62	@ 0x3e
 800ac64:	2100      	movs	r1, #0
 800ac66:	4618      	mov	r0, r3
 800ac68:	f00e fa28 	bl	80190bc <memset>

  return USBH_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b085      	sub	sp, #20
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d016      	beq.n	800acb8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10e      	bne.n	800acb2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ac9a:	1c59      	adds	r1, r3, #1
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	33de      	adds	r3, #222	@ 0xde
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	73fb      	strb	r3, [r7, #15]
 800acb0:	e004      	b.n	800acbc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800acb2:	2302      	movs	r3, #2
 800acb4:	73fb      	strb	r3, [r7, #15]
 800acb6:	e001      	b.n	800acbc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800acb8:	2302      	movs	r3, #2
 800acba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3714      	adds	r7, #20
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr

0800acca <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800acca:	b480      	push	{r7}
 800accc:	b085      	sub	sp, #20
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	460b      	mov	r3, r1
 800acd4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800ace0:	78fa      	ldrb	r2, [r7, #3]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d204      	bcs.n	800acf0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	78fa      	ldrb	r2, [r7, #3]
 800acea:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800acee:	e001      	b.n	800acf4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800acf0:	2302      	movs	r3, #2
 800acf2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b087      	sub	sp, #28
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	4608      	mov	r0, r1
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	461a      	mov	r2, r3
 800ad10:	4603      	mov	r3, r0
 800ad12:	70fb      	strb	r3, [r7, #3]
 800ad14:	460b      	mov	r3, r1
 800ad16:	70bb      	strb	r3, [r7, #2]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ad20:	2300      	movs	r3, #0
 800ad22:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ad2a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ad2c:	e025      	b.n	800ad7a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ad2e:	7dfb      	ldrb	r3, [r7, #23]
 800ad30:	221a      	movs	r2, #26
 800ad32:	fb02 f303 	mul.w	r3, r2, r3
 800ad36:	3308      	adds	r3, #8
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	3302      	adds	r3, #2
 800ad3e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	795b      	ldrb	r3, [r3, #5]
 800ad44:	78fa      	ldrb	r2, [r7, #3]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d002      	beq.n	800ad50 <USBH_FindInterface+0x4e>
 800ad4a:	78fb      	ldrb	r3, [r7, #3]
 800ad4c:	2bff      	cmp	r3, #255	@ 0xff
 800ad4e:	d111      	bne.n	800ad74 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ad54:	78ba      	ldrb	r2, [r7, #2]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d002      	beq.n	800ad60 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ad5a:	78bb      	ldrb	r3, [r7, #2]
 800ad5c:	2bff      	cmp	r3, #255	@ 0xff
 800ad5e:	d109      	bne.n	800ad74 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ad64:	787a      	ldrb	r2, [r7, #1]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d002      	beq.n	800ad70 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ad6a:	787b      	ldrb	r3, [r7, #1]
 800ad6c:	2bff      	cmp	r3, #255	@ 0xff
 800ad6e:	d101      	bne.n	800ad74 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ad70:	7dfb      	ldrb	r3, [r7, #23]
 800ad72:	e006      	b.n	800ad82 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
 800ad76:	3301      	adds	r3, #1
 800ad78:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ad7a:	7dfb      	ldrb	r3, [r7, #23]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d9d6      	bls.n	800ad2e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ad80:	23ff      	movs	r3, #255	@ 0xff
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	371c      	adds	r7, #28
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b082      	sub	sp, #8
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f004 fe38 	bl	800fa0c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ad9c:	2101      	movs	r1, #1
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f004 ff51 	bl	800fc46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
	...

0800adb0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af04      	add	r7, sp, #16
 800adb6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800adb8:	2302      	movs	r3, #2
 800adba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d102      	bne.n	800add2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2203      	movs	r2, #3
 800add0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b0b      	cmp	r3, #11
 800adda:	f200 81f5 	bhi.w	800b1c8 <USBH_Process+0x418>
 800adde:	a201      	add	r2, pc, #4	@ (adr r2, 800ade4 <USBH_Process+0x34>)
 800ade0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade4:	0800ae15 	.word	0x0800ae15
 800ade8:	0800ae53 	.word	0x0800ae53
 800adec:	0800aec9 	.word	0x0800aec9
 800adf0:	0800b157 	.word	0x0800b157
 800adf4:	0800b1c9 	.word	0x0800b1c9
 800adf8:	0800af75 	.word	0x0800af75
 800adfc:	0800b0f1 	.word	0x0800b0f1
 800ae00:	0800afb7 	.word	0x0800afb7
 800ae04:	0800afe3 	.word	0x0800afe3
 800ae08:	0800b00b 	.word	0x0800b00b
 800ae0c:	0800b059 	.word	0x0800b059
 800ae10:	0800b13f 	.word	0x0800b13f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f000 81d5 	beq.w	800b1cc <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ae28:	20c8      	movs	r0, #200	@ 0xc8
 800ae2a:	f004 ff56 	bl	800fcda <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f004 fe49 	bl	800fac6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ae44:	2300      	movs	r3, #0
 800ae46:	2200      	movs	r2, #0
 800ae48:	2101      	movs	r1, #1
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fc6a 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800ae50:	e1bc      	b.n	800b1cc <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d107      	bne.n	800ae6e <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2202      	movs	r2, #2
 800ae6a:	701a      	strb	r2, [r3, #0]
 800ae6c:	e025      	b.n	800aeba <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ae74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ae78:	d914      	bls.n	800aea4 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ae80:	3301      	adds	r3, #1
 800ae82:	b2da      	uxtb	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ae90:	2b03      	cmp	r3, #3
 800ae92:	d903      	bls.n	800ae9c <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	220d      	movs	r2, #13
 800ae98:	701a      	strb	r2, [r3, #0]
 800ae9a:	e00e      	b.n	800aeba <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	701a      	strb	r2, [r3, #0]
 800aea2:	e00a      	b.n	800aeba <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800aeaa:	f103 020a 	add.w	r2, r3, #10
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800aeb4:	200a      	movs	r0, #10
 800aeb6:	f004 ff10 	bl	800fcda <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800aeba:	2300      	movs	r3, #0
 800aebc:	2200      	movs	r2, #0
 800aebe:	2101      	movs	r1, #1
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fc2f 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800aec6:	e188      	b.n	800b1da <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d005      	beq.n	800aede <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aed8:	2104      	movs	r1, #4
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800aede:	2064      	movs	r0, #100	@ 0x64
 800aee0:	f004 fefb 	bl	800fcda <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f004 fdc7 	bl	800fa78 <USBH_LL_GetSpeed>
 800aeea:	4603      	mov	r3, r0
 800aeec:	461a      	mov	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2205      	movs	r2, #5
 800aef8:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800aefa:	2100      	movs	r1, #0
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f001 fba2 	bl	800c646 <USBH_AllocPipe>
 800af02:	4603      	mov	r3, r0
 800af04:	461a      	mov	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800af0a:	2180      	movs	r1, #128	@ 0x80
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f001 fb9a 	bl	800c646 <USBH_AllocPipe>
 800af12:	4603      	mov	r3, r0
 800af14:	461a      	mov	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	7919      	ldrb	r1, [r3, #4]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800af2e:	9202      	str	r2, [sp, #8]
 800af30:	2200      	movs	r2, #0
 800af32:	9201      	str	r2, [sp, #4]
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	4603      	mov	r3, r0
 800af38:	2280      	movs	r2, #128	@ 0x80
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f001 fb54 	bl	800c5e8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7959      	ldrb	r1, [r3, #5]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800af54:	9202      	str	r2, [sp, #8]
 800af56:	2200      	movs	r2, #0
 800af58:	9201      	str	r2, [sp, #4]
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	4603      	mov	r3, r0
 800af5e:	2200      	movs	r2, #0
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f001 fb41 	bl	800c5e8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800af66:	2300      	movs	r3, #0
 800af68:	2200      	movs	r2, #0
 800af6a:	2101      	movs	r1, #1
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 fbd9 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800af72:	e132      	b.n	800b1da <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f935 	bl	800b1e4 <USBH_HandleEnum>
 800af7a:	4603      	mov	r3, r0
 800af7c:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800af7e:	7bbb      	ldrb	r3, [r7, #14]
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	f040 8124 	bne.w	800b1d0 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800af96:	2b01      	cmp	r3, #1
 800af98:	d103      	bne.n	800afa2 <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2208      	movs	r2, #8
 800af9e:	701a      	strb	r2, [r3, #0]
 800afa0:	e002      	b.n	800afa8 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2207      	movs	r2, #7
 800afa6:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800afa8:	2300      	movs	r3, #0
 800afaa:	2200      	movs	r2, #0
 800afac:	2105      	movs	r1, #5
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fbb8 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800afb4:	e10c      	b.n	800b1d0 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f000 8109 	beq.w	800b1d4 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800afc8:	2101      	movs	r1, #1
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2208      	movs	r2, #8
 800afd2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800afd4:	2300      	movs	r3, #0
 800afd6:	2200      	movs	r2, #0
 800afd8:	2105      	movs	r1, #5
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fba2 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800afe0:	e0f8      	b.n	800b1d4 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800afe8:	4619      	mov	r1, r3
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fcc7 	bl	800b97e <USBH_SetCfg>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d102      	bne.n	800affc <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2209      	movs	r2, #9
 800affa:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800affc:	2300      	movs	r3, #0
 800affe:	2200      	movs	r2, #0
 800b000:	2101      	movs	r1, #1
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fb8e 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b008:	e0e7      	b.n	800b1da <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800b010:	f003 0320 	and.w	r3, r3, #32
 800b014:	2b00      	cmp	r3, #0
 800b016:	d015      	beq.n	800b044 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b018:	2101      	movs	r1, #1
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fcd2 	bl	800b9c4 <USBH_SetFeature>
 800b020:	4603      	mov	r3, r0
 800b022:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b024:	7bbb      	ldrb	r3, [r7, #14]
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d103      	bne.n	800b034 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	220a      	movs	r2, #10
 800b030:	701a      	strb	r2, [r3, #0]
 800b032:	e00a      	b.n	800b04a <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b034:	7bbb      	ldrb	r3, [r7, #14]
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b03      	cmp	r3, #3
 800b03a:	d106      	bne.n	800b04a <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	220a      	movs	r2, #10
 800b040:	701a      	strb	r2, [r3, #0]
 800b042:	e002      	b.n	800b04a <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	220a      	movs	r2, #10
 800b048:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b04a:	2300      	movs	r3, #0
 800b04c:	2200      	movs	r2, #0
 800b04e:	2101      	movs	r1, #1
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fb67 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b056:	e0c0      	b.n	800b1da <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d03f      	beq.n	800b0e2 <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b06a:	2300      	movs	r3, #0
 800b06c:	73fb      	strb	r3, [r7, #15]
 800b06e:	e016      	b.n	800b09e <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b070:	7bfa      	ldrb	r2, [r7, #15]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	32de      	adds	r2, #222	@ 0xde
 800b076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b07a:	791a      	ldrb	r2, [r3, #4]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b082:	429a      	cmp	r2, r3
 800b084:	d108      	bne.n	800b098 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b086:	7bfa      	ldrb	r2, [r7, #15]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	32de      	adds	r2, #222	@ 0xde
 800b08c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b096:	e005      	b.n	800b0a4 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b098:	7bfb      	ldrb	r3, [r7, #15]
 800b09a:	3301      	adds	r3, #1
 800b09c:	73fb      	strb	r3, [r7, #15]
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0e5      	beq.n	800b070 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d016      	beq.n	800b0dc <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	4798      	blx	r3
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d109      	bne.n	800b0d4 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2206      	movs	r2, #6
 800b0c4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b0cc:	2103      	movs	r1, #3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	4798      	blx	r3
 800b0d2:	e006      	b.n	800b0e2 <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	220d      	movs	r2, #13
 800b0d8:	701a      	strb	r2, [r3, #0]
 800b0da:	e002      	b.n	800b0e2 <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	220d      	movs	r2, #13
 800b0e0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	2105      	movs	r1, #5
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fb1b 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b0ee:	e074      	b.n	800b1da <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d017      	beq.n	800b12a <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	4798      	blx	r3
 800b106:	4603      	mov	r3, r0
 800b108:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b10a:	7bbb      	ldrb	r3, [r7, #14]
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d103      	bne.n	800b11a <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	220b      	movs	r2, #11
 800b116:	701a      	strb	r2, [r3, #0]
 800b118:	e00a      	b.n	800b130 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 800b11a:	7bbb      	ldrb	r3, [r7, #14]
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d106      	bne.n	800b130 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	220d      	movs	r2, #13
 800b126:	701a      	strb	r2, [r3, #0]
 800b128:	e002      	b.n	800b130 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	220d      	movs	r2, #13
 800b12e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b130:	2300      	movs	r3, #0
 800b132:	2200      	movs	r2, #0
 800b134:	2105      	movs	r1, #5
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 faf4 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b13c:	e04d      	b.n	800b1da <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b144:	2b00      	cmp	r3, #0
 800b146:	d047      	beq.n	800b1d8 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	4798      	blx	r3
      }
      break;
 800b154:	e040      	b.n	800b1d8 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7ff fd18 	bl	800ab94 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d009      	beq.n	800b182 <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d005      	beq.n	800b198 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b192:	2105      	movs	r1, #5
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d107      	bne.n	800b1b4 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff fdee 	bl	800ad8e <USBH_Start>
 800b1b2:	e002      	b.n	800b1ba <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f004 fc29 	bl	800fa0c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2101      	movs	r1, #1
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 faaf 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b1c6:	e008      	b.n	800b1da <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 800b1c8:	bf00      	nop
 800b1ca:	e006      	b.n	800b1da <USBH_Process+0x42a>
      break;
 800b1cc:	bf00      	nop
 800b1ce:	e004      	b.n	800b1da <USBH_Process+0x42a>
      break;
 800b1d0:	bf00      	nop
 800b1d2:	e002      	b.n	800b1da <USBH_Process+0x42a>
    break;
 800b1d4:	bf00      	nop
 800b1d6:	e000      	b.n	800b1da <USBH_Process+0x42a>
      break;
 800b1d8:	bf00      	nop
  }
  return USBH_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b088      	sub	sp, #32
 800b1e8:	af04      	add	r7, sp, #16
 800b1ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	785b      	ldrb	r3, [r3, #1]
 800b1f8:	2b07      	cmp	r3, #7
 800b1fa:	f200 81db 	bhi.w	800b5b4 <USBH_HandleEnum+0x3d0>
 800b1fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b204 <USBH_HandleEnum+0x20>)
 800b200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b204:	0800b225 	.word	0x0800b225
 800b208:	0800b2df 	.word	0x0800b2df
 800b20c:	0800b349 	.word	0x0800b349
 800b210:	0800b3d3 	.word	0x0800b3d3
 800b214:	0800b43d 	.word	0x0800b43d
 800b218:	0800b4ad 	.word	0x0800b4ad
 800b21c:	0800b517 	.word	0x0800b517
 800b220:	0800b575 	.word	0x0800b575
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b224:	2108      	movs	r1, #8
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fac6 	bl	800b7b8 <USBH_Get_DevDesc>
 800b22c:	4603      	mov	r3, r0
 800b22e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b230:	7bbb      	ldrb	r3, [r7, #14]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d12e      	bne.n	800b294 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	7919      	ldrb	r1, [r3, #4]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b25a:	9202      	str	r2, [sp, #8]
 800b25c:	2200      	movs	r2, #0
 800b25e:	9201      	str	r2, [sp, #4]
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	4603      	mov	r3, r0
 800b264:	2280      	movs	r2, #128	@ 0x80
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f001 f9be 	bl	800c5e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	7959      	ldrb	r1, [r3, #5]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b280:	9202      	str	r2, [sp, #8]
 800b282:	2200      	movs	r2, #0
 800b284:	9201      	str	r2, [sp, #4]
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	4603      	mov	r3, r0
 800b28a:	2200      	movs	r2, #0
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f001 f9ab 	bl	800c5e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b292:	e191      	b.n	800b5b8 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	2b03      	cmp	r3, #3
 800b298:	f040 818e 	bne.w	800b5b8 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b2b2:	2b03      	cmp	r3, #3
 800b2b4:	d903      	bls.n	800b2be <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	220d      	movs	r2, #13
 800b2ba:	701a      	strb	r2, [r3, #0]
      break;
 800b2bc:	e17c      	b.n	800b5b8 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	795b      	ldrb	r3, [r3, #5]
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f001 f9df 	bl	800c688 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	791b      	ldrb	r3, [r3, #4]
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f001 f9d9 	bl	800c688 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	701a      	strb	r2, [r3, #0]
      break;
 800b2dc:	e16c      	b.n	800b5b8 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b2de:	2112      	movs	r1, #18
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fa69 	bl	800b7b8 <USBH_Get_DevDesc>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b2ea:	7bbb      	ldrb	r3, [r7, #14]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d103      	bne.n	800b2f8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b2f6:	e161      	b.n	800b5bc <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2f8:	7bbb      	ldrb	r3, [r7, #14]
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	f040 815e 	bne.w	800b5bc <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b306:	3301      	adds	r3, #1
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b316:	2b03      	cmp	r3, #3
 800b318:	d903      	bls.n	800b322 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	220d      	movs	r2, #13
 800b31e:	701a      	strb	r2, [r3, #0]
      break;
 800b320:	e14c      	b.n	800b5bc <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	795b      	ldrb	r3, [r3, #5]
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f001 f9ad 	bl	800c688 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	791b      	ldrb	r3, [r3, #4]
 800b332:	4619      	mov	r1, r3
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f001 f9a7 	bl	800c688 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	701a      	strb	r2, [r3, #0]
      break;
 800b346:	e139      	b.n	800b5bc <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b348:	2101      	movs	r1, #1
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 faf3 	bl	800b936 <USBH_SetAddress>
 800b350:	4603      	mov	r3, r0
 800b352:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b354:	7bbb      	ldrb	r3, [r7, #14]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d130      	bne.n	800b3bc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b35a:	2002      	movs	r0, #2
 800b35c:	f004 fcbd 	bl	800fcda <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2203      	movs	r2, #3
 800b36c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	7919      	ldrb	r1, [r3, #4]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b382:	9202      	str	r2, [sp, #8]
 800b384:	2200      	movs	r2, #0
 800b386:	9201      	str	r2, [sp, #4]
 800b388:	9300      	str	r3, [sp, #0]
 800b38a:	4603      	mov	r3, r0
 800b38c:	2280      	movs	r2, #128	@ 0x80
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f001 f92a 	bl	800c5e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	7959      	ldrb	r1, [r3, #5]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b3a8:	9202      	str	r2, [sp, #8]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	9201      	str	r2, [sp, #4]
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f001 f917 	bl	800c5e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b3ba:	e101      	b.n	800b5c0 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b3bc:	7bbb      	ldrb	r3, [r7, #14]
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	f040 80fe 	bne.w	800b5c0 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	220d      	movs	r2, #13
 800b3c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	705a      	strb	r2, [r3, #1]
      break;
 800b3d0:	e0f6      	b.n	800b5c0 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b3d2:	2109      	movs	r1, #9
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fa1b 	bl	800b810 <USBH_Get_CfgDesc>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b3de:	7bbb      	ldrb	r3, [r7, #14]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d103      	bne.n	800b3ec <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2204      	movs	r2, #4
 800b3e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b3ea:	e0eb      	b.n	800b5c4 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b3ec:	7bbb      	ldrb	r3, [r7, #14]
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	f040 80e8 	bne.w	800b5c4 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	d903      	bls.n	800b416 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	220d      	movs	r2, #13
 800b412:	701a      	strb	r2, [r3, #0]
      break;
 800b414:	e0d6      	b.n	800b5c4 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	795b      	ldrb	r3, [r3, #5]
 800b41a:	4619      	mov	r1, r3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f001 f933 	bl	800c688 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	791b      	ldrb	r3, [r3, #4]
 800b426:	4619      	mov	r1, r3
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f001 f92d 	bl	800c688 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	701a      	strb	r2, [r3, #0]
      break;
 800b43a:	e0c3      	b.n	800b5c4 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b442:	4619      	mov	r1, r3
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 f9e3 	bl	800b810 <USBH_Get_CfgDesc>
 800b44a:	4603      	mov	r3, r0
 800b44c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b44e:	7bbb      	ldrb	r3, [r7, #14]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d103      	bne.n	800b45c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2205      	movs	r2, #5
 800b458:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b45a:	e0b5      	b.n	800b5c8 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	2b03      	cmp	r3, #3
 800b460:	f040 80b2 	bne.w	800b5c8 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b46a:	3301      	adds	r3, #1
 800b46c:	b2da      	uxtb	r2, r3
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d903      	bls.n	800b486 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	220d      	movs	r2, #13
 800b482:	701a      	strb	r2, [r3, #0]
      break;
 800b484:	e0a0      	b.n	800b5c8 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	795b      	ldrb	r3, [r3, #5]
 800b48a:	4619      	mov	r1, r3
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f001 f8fb 	bl	800c688 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	791b      	ldrb	r3, [r3, #4]
 800b496:	4619      	mov	r1, r3
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f001 f8f5 	bl	800c688 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	701a      	strb	r2, [r3, #0]
      break;
 800b4aa:	e08d      	b.n	800b5c8 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d025      	beq.n	800b502 <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b4c2:	23ff      	movs	r3, #255	@ 0xff
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f9cd 	bl	800b864 <USBH_Get_StringDesc>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b4ce:	7bbb      	ldrb	r3, [r7, #14]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d109      	bne.n	800b4e8 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2206      	movs	r2, #6
 800b4d8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b4da:	2300      	movs	r3, #0
 800b4dc:	2200      	movs	r2, #0
 800b4de:	2105      	movs	r1, #5
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f91f 	bl	800b724 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b4e6:	e071      	b.n	800b5cc <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b4e8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ea:	2b03      	cmp	r3, #3
 800b4ec:	d16e      	bne.n	800b5cc <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2206      	movs	r2, #6
 800b4f2:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	2105      	movs	r1, #5
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 f912 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800b500:	e064      	b.n	800b5cc <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2206      	movs	r2, #6
 800b506:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b508:	2300      	movs	r3, #0
 800b50a:	2200      	movs	r2, #0
 800b50c:	2105      	movs	r1, #5
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f908 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800b514:	e05a      	b.n	800b5cc <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d01f      	beq.n	800b560 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b52c:	23ff      	movs	r3, #255	@ 0xff
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 f998 	bl	800b864 <USBH_Get_StringDesc>
 800b534:	4603      	mov	r3, r0
 800b536:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b538:	7bbb      	ldrb	r3, [r7, #14]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d103      	bne.n	800b546 <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2207      	movs	r2, #7
 800b542:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b544:	e044      	b.n	800b5d0 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b546:	7bbb      	ldrb	r3, [r7, #14]
 800b548:	2b03      	cmp	r3, #3
 800b54a:	d141      	bne.n	800b5d0 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2207      	movs	r2, #7
 800b550:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b552:	2300      	movs	r3, #0
 800b554:	2200      	movs	r2, #0
 800b556:	2105      	movs	r1, #5
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f8e3 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800b55e:	e037      	b.n	800b5d0 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2207      	movs	r2, #7
 800b564:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b566:	2300      	movs	r3, #0
 800b568:	2200      	movs	r2, #0
 800b56a:	2105      	movs	r1, #5
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 f8d9 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800b572:	e02d      	b.n	800b5d0 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d017      	beq.n	800b5ae <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b58a:	23ff      	movs	r3, #255	@ 0xff
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f969 	bl	800b864 <USBH_Get_StringDesc>
 800b592:	4603      	mov	r3, r0
 800b594:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d102      	bne.n	800b5a2 <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b5a0:	e018      	b.n	800b5d4 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5a2:	7bbb      	ldrb	r3, [r7, #14]
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	d115      	bne.n	800b5d4 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ac:	e012      	b.n	800b5d4 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b5b2:	e00f      	b.n	800b5d4 <USBH_HandleEnum+0x3f0>

    default:
      break;
 800b5b4:	bf00      	nop
 800b5b6:	e00e      	b.n	800b5d6 <USBH_HandleEnum+0x3f2>
      break;
 800b5b8:	bf00      	nop
 800b5ba:	e00c      	b.n	800b5d6 <USBH_HandleEnum+0x3f2>
      break;
 800b5bc:	bf00      	nop
 800b5be:	e00a      	b.n	800b5d6 <USBH_HandleEnum+0x3f2>
      break;
 800b5c0:	bf00      	nop
 800b5c2:	e008      	b.n	800b5d6 <USBH_HandleEnum+0x3f2>
      break;
 800b5c4:	bf00      	nop
 800b5c6:	e006      	b.n	800b5d6 <USBH_HandleEnum+0x3f2>
      break;
 800b5c8:	bf00      	nop
 800b5ca:	e004      	b.n	800b5d6 <USBH_HandleEnum+0x3f2>
      break;
 800b5cc:	bf00      	nop
 800b5ce:	e002      	b.n	800b5d6 <USBH_HandleEnum+0x3f2>
      break;
 800b5d0:	bf00      	nop
 800b5d2:	e000      	b.n	800b5d6 <USBH_HandleEnum+0x3f2>
      break;
 800b5d4:	bf00      	nop
  }
  return Status;
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	683a      	ldr	r2, [r7, #0]
 800b5ee:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b5f2:	bf00      	nop
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b082      	sub	sp, #8
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b60c:	1c5a      	adds	r2, r3, #1
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f804 	bl	800b622 <USBH_HandleSof>
}
 800b61a:	bf00      	nop
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	2b0b      	cmp	r3, #11
 800b632:	d10a      	bne.n	800b64a <USBH_HandleSof+0x28>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d005      	beq.n	800b64a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	4798      	blx	r3
  }
}
 800b64a:	bf00      	nop
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b082      	sub	sp, #8
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b662:	2300      	movs	r3, #0
 800b664:	2200      	movs	r2, #0
 800b666:	2101      	movs	r1, #1
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f85b 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 800b66e:	bf00      	nop
}
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b676:	b480      	push	{r7}
 800b678:	b083      	sub	sp, #12
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2201      	movs	r2, #1
 800b68a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800b68e:	bf00      	nop
}
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	2200      	movs	r2, #0
 800b6be:	2101      	movs	r1, #1
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f82f 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f004 f9a6 	bl	800fa42 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	791b      	ldrb	r3, [r3, #4]
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 ffc3 	bl	800c688 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	795b      	ldrb	r3, [r3, #5]
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 ffbd 	bl	800c688 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b70e:	2300      	movs	r3, #0
 800b710:	2200      	movs	r2, #0
 800b712:	2101      	movs	r1, #1
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f805 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	607a      	str	r2, [r7, #4]
 800b72e:	603b      	str	r3, [r7, #0]
 800b730:	460b      	mov	r3, r1
 800b732:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 800b734:	7afa      	ldrb	r2, [r7, #11]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
  if (available_spaces != 0U)
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
  }
#else
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800b742:	4618      	mov	r0, r3
 800b744:	f001 fa4e 	bl	800cbe4 <osMessageQueueGetSpace>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00a      	beq.n	800b764 <USBH_OS_PutMessage+0x40>
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	b2da      	uxtb	r2, r3
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f001 f982 	bl	800ca68 <osMessageQueuePut>
  }
#endif /* (osCMSIS < 0x20000U) */
}
 800b764:	bf00      	nop
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b780:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b784:	2200      	movs	r2, #0
 800b786:	f001 f9cf 	bl	800cb28 <osMessageQueueGet>
 800b78a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1f0      	bne.n	800b774 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7ff fb0c 	bl	800adb0 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b798:	e7ec      	b.n	800b774 <USBH_Process_OS+0x8>

0800b79a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f7ff ffbb 	bl	800b724 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af02      	add	r7, sp, #8
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b7c4:	887b      	ldrh	r3, [r7, #2]
 800b7c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7ca:	d901      	bls.n	800b7d0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	e01b      	b.n	800b808 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b7d6:	887b      	ldrh	r3, [r7, #2]
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f872 	bl	800b8cc <USBH_GetDescriptor>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d109      	bne.n	800b806 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b7f8:	887a      	ldrh	r2, [r7, #2]
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f929 	bl	800ba54 <USBH_ParseDevDesc>
 800b802:	4603      	mov	r3, r0
 800b804:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b806:	7bfb      	ldrb	r3, [r7, #15]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af02      	add	r7, sp, #8
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	331c      	adds	r3, #28
 800b820:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b822:	887b      	ldrh	r3, [r7, #2]
 800b824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b828:	d901      	bls.n	800b82e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b82a:	2303      	movs	r3, #3
 800b82c:	e016      	b.n	800b85c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b82e:	887b      	ldrh	r3, [r7, #2]
 800b830:	9300      	str	r3, [sp, #0]
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b838:	2100      	movs	r1, #0
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 f846 	bl	800b8cc <USBH_GetDescriptor>
 800b840:	4603      	mov	r3, r0
 800b842:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b844:	7bfb      	ldrb	r3, [r7, #15]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d107      	bne.n	800b85a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b84a:	887b      	ldrh	r3, [r7, #2]
 800b84c:	461a      	mov	r2, r3
 800b84e:	68b9      	ldr	r1, [r7, #8]
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 f9af 	bl	800bbb4 <USBH_ParseCfgDesc>
 800b856:	4603      	mov	r3, r0
 800b858:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b088      	sub	sp, #32
 800b868:	af02      	add	r7, sp, #8
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	461a      	mov	r2, r3
 800b870:	460b      	mov	r3, r1
 800b872:	72fb      	strb	r3, [r7, #11]
 800b874:	4613      	mov	r3, r2
 800b876:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b878:	893b      	ldrh	r3, [r7, #8]
 800b87a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b87e:	d802      	bhi.n	800b886 <USBH_Get_StringDesc+0x22>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d101      	bne.n	800b88a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b886:	2303      	movs	r3, #3
 800b888:	e01c      	b.n	800b8c4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b88a:	7afb      	ldrb	r3, [r7, #11]
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b892:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b89a:	893b      	ldrh	r3, [r7, #8]
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	460b      	mov	r3, r1
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f000 f812 	bl	800b8cc <USBH_GetDescriptor>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b8ac:	7dfb      	ldrb	r3, [r7, #23]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d107      	bne.n	800b8c2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b8b8:	893a      	ldrh	r2, [r7, #8]
 800b8ba:	6879      	ldr	r1, [r7, #4]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f000 fb8c 	bl	800bfda <USBH_ParseStringDesc>
  }

  return status;
 800b8c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3718      	adds	r7, #24
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	607b      	str	r3, [r7, #4]
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	72fb      	strb	r3, [r7, #11]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	789b      	ldrb	r3, [r3, #2]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d11c      	bne.n	800b920 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b8e6:	7afb      	ldrb	r3, [r7, #11]
 800b8e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2206      	movs	r2, #6
 800b8f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	893a      	ldrh	r2, [r7, #8]
 800b8fc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b8fe:	893b      	ldrh	r3, [r7, #8]
 800b900:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b908:	d104      	bne.n	800b914 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f240 4209 	movw	r2, #1033	@ 0x409
 800b910:	829a      	strh	r2, [r3, #20]
 800b912:	e002      	b.n	800b91a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	8b3a      	ldrh	r2, [r7, #24]
 800b91e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b920:	8b3b      	ldrh	r3, [r7, #24]
 800b922:	461a      	mov	r2, r3
 800b924:	6879      	ldr	r1, [r7, #4]
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f000 fba4 	bl	800c074 <USBH_CtlReq>
 800b92c:	4603      	mov	r3, r0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b082      	sub	sp, #8
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
 800b93e:	460b      	mov	r3, r1
 800b940:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	789b      	ldrb	r3, [r3, #2]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d10f      	bne.n	800b96a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2205      	movs	r2, #5
 800b954:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b956:	78fb      	ldrb	r3, [r7, #3]
 800b958:	b29a      	uxth	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b96a:	2200      	movs	r2, #0
 800b96c:	2100      	movs	r1, #0
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fb80 	bl	800c074 <USBH_CtlReq>
 800b974:	4603      	mov	r3, r0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b082      	sub	sp, #8
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
 800b986:	460b      	mov	r3, r1
 800b988:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	789b      	ldrb	r3, [r3, #2]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d10e      	bne.n	800b9b0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2209      	movs	r2, #9
 800b99c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	887a      	ldrh	r2, [r7, #2]
 800b9a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 fb5d 	bl	800c074 <USBH_CtlReq>
 800b9ba:	4603      	mov	r3, r0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	789b      	ldrb	r3, [r3, #2]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d10f      	bne.n	800b9f8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2203      	movs	r2, #3
 800b9e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b9e4:	78fb      	ldrb	r3, [r7, #3]
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fb39 	bl	800c074 <USBH_CtlReq>
 800ba02:	4603      	mov	r3, r0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	460b      	mov	r3, r1
 800ba16:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	789b      	ldrb	r3, [r3, #2]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d10f      	bne.n	800ba40 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2202      	movs	r2, #2
 800ba24:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ba32:	78fb      	ldrb	r3, [r7, #3]
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ba40:	2200      	movs	r2, #0
 800ba42:	2100      	movs	r1, #0
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fb15 	bl	800c074 <USBH_CtlReq>
 800ba4a:	4603      	mov	r3, r0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b087      	sub	sp, #28
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ba68:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d101      	bne.n	800ba78 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800ba74:	2302      	movs	r3, #2
 800ba76:	e094      	b.n	800bba2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	781a      	ldrb	r2, [r3, #0]
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	785a      	ldrb	r2, [r3, #1]
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	3302      	adds	r3, #2
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	3303      	adds	r3, #3
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	021b      	lsls	r3, r3, #8
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	791a      	ldrb	r2, [r3, #4]
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	795a      	ldrb	r2, [r3, #5]
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	799a      	ldrb	r2, [r3, #6]
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	79da      	ldrb	r2, [r3, #7]
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d004      	beq.n	800bad6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d11b      	bne.n	800bb0e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	79db      	ldrb	r3, [r3, #7]
 800bada:	2b20      	cmp	r3, #32
 800badc:	dc0f      	bgt.n	800bafe <USBH_ParseDevDesc+0xaa>
 800bade:	2b08      	cmp	r3, #8
 800bae0:	db0f      	blt.n	800bb02 <USBH_ParseDevDesc+0xae>
 800bae2:	3b08      	subs	r3, #8
 800bae4:	4a32      	ldr	r2, [pc, #200]	@ (800bbb0 <USBH_ParseDevDesc+0x15c>)
 800bae6:	fa22 f303 	lsr.w	r3, r2, r3
 800baea:	f003 0301 	and.w	r3, r3, #1
 800baee:	2b00      	cmp	r3, #0
 800baf0:	bf14      	ite	ne
 800baf2:	2301      	movne	r3, #1
 800baf4:	2300      	moveq	r3, #0
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d106      	bne.n	800bb0a <USBH_ParseDevDesc+0xb6>
 800bafc:	e001      	b.n	800bb02 <USBH_ParseDevDesc+0xae>
 800bafe:	2b40      	cmp	r3, #64	@ 0x40
 800bb00:	d003      	beq.n	800bb0a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	2208      	movs	r2, #8
 800bb06:	71da      	strb	r2, [r3, #7]
        break;
 800bb08:	e000      	b.n	800bb0c <USBH_ParseDevDesc+0xb8>
        break;
 800bb0a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800bb0c:	e00e      	b.n	800bb2c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d107      	bne.n	800bb28 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	79db      	ldrb	r3, [r3, #7]
 800bb1c:	2b08      	cmp	r3, #8
 800bb1e:	d005      	beq.n	800bb2c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	2208      	movs	r2, #8
 800bb24:	71da      	strb	r2, [r3, #7]
 800bb26:	e001      	b.n	800bb2c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bb28:	2303      	movs	r3, #3
 800bb2a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800bb2c:	88fb      	ldrh	r3, [r7, #6]
 800bb2e:	2b08      	cmp	r3, #8
 800bb30:	d936      	bls.n	800bba0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	3308      	adds	r3, #8
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	461a      	mov	r2, r3
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	3309      	adds	r3, #9
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	021b      	lsls	r3, r3, #8
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	4313      	orrs	r3, r2
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	330a      	adds	r3, #10
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	461a      	mov	r2, r3
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	330b      	adds	r3, #11
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	021b      	lsls	r3, r3, #8
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	330c      	adds	r3, #12
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	330d      	adds	r3, #13
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	021b      	lsls	r3, r3, #8
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	7b9a      	ldrb	r2, [r3, #14]
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	7bda      	ldrb	r2, [r3, #15]
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	7c1a      	ldrb	r2, [r3, #16]
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	7c5a      	ldrb	r2, [r3, #17]
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800bba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	371c      	adds	r7, #28
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	01000101 	.word	0x01000101

0800bbb4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b08c      	sub	sp, #48	@ 0x30
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bbc8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800bbe2:	2302      	movs	r3, #2
 800bbe4:	e0de      	b.n	800bda4 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	2b09      	cmp	r3, #9
 800bbf0:	d002      	beq.n	800bbf8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bbf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf4:	2209      	movs	r2, #9
 800bbf6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	781a      	ldrb	r2, [r3, #0]
 800bbfc:	6a3b      	ldr	r3, [r7, #32]
 800bbfe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	785a      	ldrb	r2, [r3, #1]
 800bc04:	6a3b      	ldr	r3, [r7, #32]
 800bc06:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	3302      	adds	r3, #2
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	461a      	mov	r2, r3
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	3303      	adds	r3, #3
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	021b      	lsls	r3, r3, #8
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc22:	bf28      	it	cs
 800bc24:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	6a3b      	ldr	r3, [r7, #32]
 800bc2c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	791a      	ldrb	r2, [r3, #4]
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	795a      	ldrb	r2, [r3, #5]
 800bc3a:	6a3b      	ldr	r3, [r7, #32]
 800bc3c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	799a      	ldrb	r2, [r3, #6]
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	79da      	ldrb	r2, [r3, #7]
 800bc4a:	6a3b      	ldr	r3, [r7, #32]
 800bc4c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	7a1a      	ldrb	r2, [r3, #8]
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bc56:	88fb      	ldrh	r3, [r7, #6]
 800bc58:	2b09      	cmp	r3, #9
 800bc5a:	f240 80a1 	bls.w	800bda0 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800bc5e:	2309      	movs	r3, #9
 800bc60:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bc62:	2300      	movs	r3, #0
 800bc64:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bc66:	e085      	b.n	800bd74 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bc68:	f107 0316 	add.w	r3, r7, #22
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc70:	f000 f9e6 	bl	800c040 <USBH_GetNextDesc>
 800bc74:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc78:	785b      	ldrb	r3, [r3, #1]
 800bc7a:	2b04      	cmp	r3, #4
 800bc7c:	d17a      	bne.n	800bd74 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bc7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	2b09      	cmp	r3, #9
 800bc84:	d002      	beq.n	800bc8c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bc86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc88:	2209      	movs	r2, #9
 800bc8a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800bc8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc90:	221a      	movs	r2, #26
 800bc92:	fb02 f303 	mul.w	r3, r2, r3
 800bc96:	3308      	adds	r3, #8
 800bc98:	6a3a      	ldr	r2, [r7, #32]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	3302      	adds	r3, #2
 800bc9e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bca2:	69f8      	ldr	r0, [r7, #28]
 800bca4:	f000 f882 	bl	800bdac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bcb2:	e043      	b.n	800bd3c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bcb4:	f107 0316 	add.w	r3, r7, #22
 800bcb8:	4619      	mov	r1, r3
 800bcba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcbc:	f000 f9c0 	bl	800c040 <USBH_GetNextDesc>
 800bcc0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bcc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcc4:	785b      	ldrb	r3, [r3, #1]
 800bcc6:	2b05      	cmp	r3, #5
 800bcc8:	d138      	bne.n	800bd3c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	795b      	ldrb	r3, [r3, #5]
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d113      	bne.n	800bcfa <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	d003      	beq.n	800bce2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	799b      	ldrb	r3, [r3, #6]
 800bcde:	2b03      	cmp	r3, #3
 800bce0:	d10b      	bne.n	800bcfa <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	79db      	ldrb	r3, [r3, #7]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10b      	bne.n	800bd02 <USBH_ParseCfgDesc+0x14e>
 800bcea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	2b09      	cmp	r3, #9
 800bcf0:	d007      	beq.n	800bd02 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800bcf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf4:	2209      	movs	r2, #9
 800bcf6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bcf8:	e003      	b.n	800bd02 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800bcfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcfc:	2207      	movs	r2, #7
 800bcfe:	701a      	strb	r2, [r3, #0]
 800bd00:	e000      	b.n	800bd04 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bd02:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bd04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd08:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bd0c:	3201      	adds	r2, #1
 800bd0e:	00d2      	lsls	r2, r2, #3
 800bd10:	211a      	movs	r1, #26
 800bd12:	fb01 f303 	mul.w	r3, r1, r3
 800bd16:	4413      	add	r3, r2
 800bd18:	3308      	adds	r3, #8
 800bd1a:	6a3a      	ldr	r2, [r7, #32]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	3304      	adds	r3, #4
 800bd20:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800bd22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd24:	69b9      	ldr	r1, [r7, #24]
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f000 f86f 	bl	800be0a <USBH_ParseEPDesc>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800bd32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bd36:	3301      	adds	r3, #1
 800bd38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bd3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d80a      	bhi.n	800bd5a <USBH_ParseCfgDesc+0x1a6>
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	791b      	ldrb	r3, [r3, #4]
 800bd48:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d204      	bcs.n	800bd5a <USBH_ParseCfgDesc+0x1a6>
 800bd50:	6a3b      	ldr	r3, [r7, #32]
 800bd52:	885a      	ldrh	r2, [r3, #2]
 800bd54:	8afb      	ldrh	r3, [r7, #22]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d8ac      	bhi.n	800bcb4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	791b      	ldrb	r3, [r3, #4]
 800bd5e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d201      	bcs.n	800bd6a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800bd66:	2303      	movs	r3, #3
 800bd68:	e01c      	b.n	800bda4 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800bd6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd6e:	3301      	adds	r3, #1
 800bd70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bd74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d805      	bhi.n	800bd88 <USBH_ParseCfgDesc+0x1d4>
 800bd7c:	6a3b      	ldr	r3, [r7, #32]
 800bd7e:	885a      	ldrh	r2, [r3, #2]
 800bd80:	8afb      	ldrh	r3, [r7, #22]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	f63f af70 	bhi.w	800bc68 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bd88:	6a3b      	ldr	r3, [r7, #32]
 800bd8a:	791b      	ldrb	r3, [r3, #4]
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	bf28      	it	cs
 800bd90:	2302      	movcs	r3, #2
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d201      	bcs.n	800bda0 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	e001      	b.n	800bda4 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800bda0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3730      	adds	r7, #48	@ 0x30
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	781a      	ldrb	r2, [r3, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	785a      	ldrb	r2, [r3, #1]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	789a      	ldrb	r2, [r3, #2]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	78da      	ldrb	r2, [r3, #3]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	791a      	ldrb	r2, [r3, #4]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	795a      	ldrb	r2, [r3, #5]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	799a      	ldrb	r2, [r3, #6]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	79da      	ldrb	r2, [r3, #7]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	7a1a      	ldrb	r2, [r3, #8]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	721a      	strb	r2, [r3, #8]
}
 800bdfe:	bf00      	nop
 800be00:	370c      	adds	r7, #12
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b087      	sub	sp, #28
 800be0e:	af00      	add	r7, sp, #0
 800be10:	60f8      	str	r0, [r7, #12]
 800be12:	60b9      	str	r1, [r7, #8]
 800be14:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	781a      	ldrb	r2, [r3, #0]
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	785a      	ldrb	r2, [r3, #1]
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	789a      	ldrb	r2, [r3, #2]
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	78da      	ldrb	r2, [r3, #3]
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	3304      	adds	r3, #4
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	461a      	mov	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	3305      	adds	r3, #5
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	021b      	lsls	r3, r3, #8
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	4313      	orrs	r3, r2
 800be4e:	b29a      	uxth	r2, r3
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	799a      	ldrb	r2, [r3, #6]
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	889b      	ldrh	r3, [r3, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d009      	beq.n	800be78 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800be68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be6c:	d804      	bhi.n	800be78 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800be72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be76:	d901      	bls.n	800be7c <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800be78:	2303      	movs	r3, #3
 800be7a:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be82:	2b00      	cmp	r3, #0
 800be84:	d136      	bne.n	800bef4 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	78db      	ldrb	r3, [r3, #3]
 800be8a:	f003 0303 	and.w	r3, r3, #3
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d108      	bne.n	800bea4 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	889b      	ldrh	r3, [r3, #4]
 800be96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be9a:	f240 8097 	bls.w	800bfcc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800be9e:	2303      	movs	r3, #3
 800bea0:	75fb      	strb	r3, [r7, #23]
 800bea2:	e093      	b.n	800bfcc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	78db      	ldrb	r3, [r3, #3]
 800bea8:	f003 0303 	and.w	r3, r3, #3
 800beac:	2b00      	cmp	r3, #0
 800beae:	d107      	bne.n	800bec0 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	889b      	ldrh	r3, [r3, #4]
 800beb4:	2b40      	cmp	r3, #64	@ 0x40
 800beb6:	f240 8089 	bls.w	800bfcc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800beba:	2303      	movs	r3, #3
 800bebc:	75fb      	strb	r3, [r7, #23]
 800bebe:	e085      	b.n	800bfcc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	78db      	ldrb	r3, [r3, #3]
 800bec4:	f003 0303 	and.w	r3, r3, #3
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d005      	beq.n	800bed8 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	78db      	ldrb	r3, [r3, #3]
 800bed0:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bed4:	2b03      	cmp	r3, #3
 800bed6:	d10a      	bne.n	800beee <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	799b      	ldrb	r3, [r3, #6]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d003      	beq.n	800bee8 <USBH_ParseEPDesc+0xde>
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	799b      	ldrb	r3, [r3, #6]
 800bee4:	2b10      	cmp	r3, #16
 800bee6:	d970      	bls.n	800bfca <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800bee8:	2303      	movs	r3, #3
 800beea:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800beec:	e06d      	b.n	800bfca <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800beee:	2303      	movs	r3, #3
 800bef0:	75fb      	strb	r3, [r7, #23]
 800bef2:	e06b      	b.n	800bfcc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800befa:	2b01      	cmp	r3, #1
 800befc:	d13c      	bne.n	800bf78 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	78db      	ldrb	r3, [r3, #3]
 800bf02:	f003 0303 	and.w	r3, r3, #3
 800bf06:	2b02      	cmp	r3, #2
 800bf08:	d005      	beq.n	800bf16 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	78db      	ldrb	r3, [r3, #3]
 800bf0e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d106      	bne.n	800bf24 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	889b      	ldrh	r3, [r3, #4]
 800bf1a:	2b40      	cmp	r3, #64	@ 0x40
 800bf1c:	d956      	bls.n	800bfcc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bf22:	e053      	b.n	800bfcc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	78db      	ldrb	r3, [r3, #3]
 800bf28:	f003 0303 	and.w	r3, r3, #3
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d10e      	bne.n	800bf4e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	799b      	ldrb	r3, [r3, #6]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d007      	beq.n	800bf48 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800bf3c:	2b10      	cmp	r3, #16
 800bf3e:	d803      	bhi.n	800bf48 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800bf44:	2b40      	cmp	r3, #64	@ 0x40
 800bf46:	d941      	bls.n	800bfcc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bf48:	2303      	movs	r3, #3
 800bf4a:	75fb      	strb	r3, [r7, #23]
 800bf4c:	e03e      	b.n	800bfcc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	78db      	ldrb	r3, [r3, #3]
 800bf52:	f003 0303 	and.w	r3, r3, #3
 800bf56:	2b03      	cmp	r3, #3
 800bf58:	d10b      	bne.n	800bf72 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	799b      	ldrb	r3, [r3, #6]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d004      	beq.n	800bf6c <USBH_ParseEPDesc+0x162>
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	889b      	ldrh	r3, [r3, #4]
 800bf66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf6a:	d32f      	bcc.n	800bfcc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bf6c:	2303      	movs	r3, #3
 800bf6e:	75fb      	strb	r3, [r7, #23]
 800bf70:	e02c      	b.n	800bfcc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bf72:	2303      	movs	r3, #3
 800bf74:	75fb      	strb	r3, [r7, #23]
 800bf76:	e029      	b.n	800bfcc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d120      	bne.n	800bfc4 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	78db      	ldrb	r3, [r3, #3]
 800bf86:	f003 0303 	and.w	r3, r3, #3
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d106      	bne.n	800bf9c <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	889b      	ldrh	r3, [r3, #4]
 800bf92:	2b08      	cmp	r3, #8
 800bf94:	d01a      	beq.n	800bfcc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bf96:	2303      	movs	r3, #3
 800bf98:	75fb      	strb	r3, [r7, #23]
 800bf9a:	e017      	b.n	800bfcc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	78db      	ldrb	r3, [r3, #3]
 800bfa0:	f003 0303 	and.w	r3, r3, #3
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d10a      	bne.n	800bfbe <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	799b      	ldrb	r3, [r3, #6]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d003      	beq.n	800bfb8 <USBH_ParseEPDesc+0x1ae>
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	889b      	ldrh	r3, [r3, #4]
 800bfb4:	2b08      	cmp	r3, #8
 800bfb6:	d909      	bls.n	800bfcc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bfb8:	2303      	movs	r3, #3
 800bfba:	75fb      	strb	r3, [r7, #23]
 800bfbc:	e006      	b.n	800bfcc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	75fb      	strb	r3, [r7, #23]
 800bfc2:	e003      	b.n	800bfcc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	75fb      	strb	r3, [r7, #23]
 800bfc8:	e000      	b.n	800bfcc <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bfca:	bf00      	nop
  }

  return status;
 800bfcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	371c      	adds	r7, #28
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr

0800bfda <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bfda:	b480      	push	{r7}
 800bfdc:	b087      	sub	sp, #28
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	60b9      	str	r1, [r7, #8]
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	3301      	adds	r3, #1
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	2b03      	cmp	r3, #3
 800bff0:	d120      	bne.n	800c034 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	1e9a      	subs	r2, r3, #2
 800bff8:	88fb      	ldrh	r3, [r7, #6]
 800bffa:	4293      	cmp	r3, r2
 800bffc:	bf28      	it	cs
 800bffe:	4613      	movcs	r3, r2
 800c000:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3302      	adds	r3, #2
 800c006:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c008:	2300      	movs	r3, #0
 800c00a:	82fb      	strh	r3, [r7, #22]
 800c00c:	e00b      	b.n	800c026 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c00e:	8afb      	ldrh	r3, [r7, #22]
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	4413      	add	r3, r2
 800c014:	781a      	ldrb	r2, [r3, #0]
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	3301      	adds	r3, #1
 800c01e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c020:	8afb      	ldrh	r3, [r7, #22]
 800c022:	3302      	adds	r3, #2
 800c024:	82fb      	strh	r3, [r7, #22]
 800c026:	8afa      	ldrh	r2, [r7, #22]
 800c028:	8abb      	ldrh	r3, [r7, #20]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d3ef      	bcc.n	800c00e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	2200      	movs	r2, #0
 800c032:	701a      	strb	r2, [r3, #0]
  }
}
 800c034:	bf00      	nop
 800c036:	371c      	adds	r7, #28
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	881b      	ldrh	r3, [r3, #0]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	7812      	ldrb	r2, [r2, #0]
 800c052:	4413      	add	r3, r2
 800c054:	b29a      	uxth	r2, r3
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4413      	add	r3, r2
 800c064:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c066:	68fb      	ldr	r3, [r7, #12]
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3714      	adds	r7, #20
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	4613      	mov	r3, r2
 800c080:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c082:	2301      	movs	r3, #1
 800c084:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	789b      	ldrb	r3, [r3, #2]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d002      	beq.n	800c094 <USBH_CtlReq+0x20>
 800c08e:	2b02      	cmp	r3, #2
 800c090:	d015      	beq.n	800c0be <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800c092:	e033      	b.n	800c0fc <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	88fa      	ldrh	r2, [r7, #6]
 800c09e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2202      	movs	r2, #2
 800c0aa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	2103      	movs	r1, #3
 800c0b6:	68f8      	ldr	r0, [r7, #12]
 800c0b8:	f7ff fb34 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800c0bc:	e01e      	b.n	800c0fc <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f000 f822 	bl	800c108 <USBH_HandleControl>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c0c8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d002      	beq.n	800c0d4 <USBH_CtlReq+0x60>
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
 800c0d0:	2b03      	cmp	r3, #3
 800c0d2:	d106      	bne.n	800c0e2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	761a      	strb	r2, [r3, #24]
 800c0e0:	e005      	b.n	800c0ee <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 800c0e2:	7dfb      	ldrb	r3, [r7, #23]
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	d102      	bne.n	800c0ee <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	2103      	movs	r1, #3
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f7ff fb15 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800c0fa:	bf00      	nop
  }
  return status;
 800c0fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3718      	adds	r7, #24
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
	...

0800c108 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b086      	sub	sp, #24
 800c10c:	af02      	add	r7, sp, #8
 800c10e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c110:	2301      	movs	r3, #1
 800c112:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c114:	2300      	movs	r3, #0
 800c116:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	7e1b      	ldrb	r3, [r3, #24]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	2b0a      	cmp	r3, #10
 800c120:	f200 81b2 	bhi.w	800c488 <USBH_HandleControl+0x380>
 800c124:	a201      	add	r2, pc, #4	@ (adr r2, 800c12c <USBH_HandleControl+0x24>)
 800c126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c12a:	bf00      	nop
 800c12c:	0800c159 	.word	0x0800c159
 800c130:	0800c173 	.word	0x0800c173
 800c134:	0800c1f5 	.word	0x0800c1f5
 800c138:	0800c21b 	.word	0x0800c21b
 800c13c:	0800c279 	.word	0x0800c279
 800c140:	0800c2a3 	.word	0x0800c2a3
 800c144:	0800c325 	.word	0x0800c325
 800c148:	0800c347 	.word	0x0800c347
 800c14c:	0800c3a9 	.word	0x0800c3a9
 800c150:	0800c3cf 	.word	0x0800c3cf
 800c154:	0800c431 	.word	0x0800c431
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f103 0110 	add.w	r1, r3, #16
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	795b      	ldrb	r3, [r3, #5]
 800c162:	461a      	mov	r2, r3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f99f 	bl	800c4a8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2202      	movs	r2, #2
 800c16e:	761a      	strb	r2, [r3, #24]
      break;
 800c170:	e195      	b.n	800c49e <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	795b      	ldrb	r3, [r3, #5]
 800c176:	4619      	mov	r1, r3
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f003 fd51 	bl	800fc20 <USBH_LL_GetURBState>
 800c17e:	4603      	mov	r3, r0
 800c180:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c182:	7bbb      	ldrb	r3, [r7, #14]
 800c184:	2b01      	cmp	r3, #1
 800c186:	d124      	bne.n	800c1d2 <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	7c1b      	ldrb	r3, [r3, #16]
 800c18c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c190:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	8adb      	ldrh	r3, [r3, #22]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00a      	beq.n	800c1b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c19a:	7b7b      	ldrb	r3, [r7, #13]
 800c19c:	2b80      	cmp	r3, #128	@ 0x80
 800c19e:	d103      	bne.n	800c1a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2203      	movs	r2, #3
 800c1a4:	761a      	strb	r2, [r3, #24]
 800c1a6:	e00d      	b.n	800c1c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2205      	movs	r2, #5
 800c1ac:	761a      	strb	r2, [r3, #24]
 800c1ae:	e009      	b.n	800c1c4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c1b0:	7b7b      	ldrb	r3, [r7, #13]
 800c1b2:	2b80      	cmp	r3, #128	@ 0x80
 800c1b4:	d103      	bne.n	800c1be <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2209      	movs	r2, #9
 800c1ba:	761a      	strb	r2, [r3, #24]
 800c1bc:	e002      	b.n	800c1c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2207      	movs	r2, #7
 800c1c2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	2103      	movs	r1, #3
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7ff faaa 	bl	800b724 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c1d0:	e15c      	b.n	800c48c <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
 800c1d4:	2b04      	cmp	r3, #4
 800c1d6:	d003      	beq.n	800c1e0 <USBH_HandleControl+0xd8>
 800c1d8:	7bbb      	ldrb	r3, [r7, #14]
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	f040 8156 	bne.w	800c48c <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	220b      	movs	r2, #11
 800c1e4:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	2103      	movs	r1, #3
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f7ff fa99 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800c1f2:	e14b      	b.n	800c48c <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6899      	ldr	r1, [r3, #8]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	899a      	ldrh	r2, [r3, #12]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	791b      	ldrb	r3, [r3, #4]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 f98a 	bl	800c526 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2204      	movs	r2, #4
 800c216:	761a      	strb	r2, [r3, #24]
      break;
 800c218:	e141      	b.n	800c49e <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	791b      	ldrb	r3, [r3, #4]
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f003 fcfd 	bl	800fc20 <USBH_LL_GetURBState>
 800c226:	4603      	mov	r3, r0
 800c228:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c22a:	7bbb      	ldrb	r3, [r7, #14]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d109      	bne.n	800c244 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2209      	movs	r2, #9
 800c234:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c236:	2300      	movs	r3, #0
 800c238:	2200      	movs	r2, #0
 800c23a:	2103      	movs	r1, #3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7ff fa71 	bl	800b724 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c242:	e125      	b.n	800c490 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 800c244:	7bbb      	ldrb	r3, [r7, #14]
 800c246:	2b05      	cmp	r3, #5
 800c248:	d108      	bne.n	800c25c <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 800c24a:	2303      	movs	r3, #3
 800c24c:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c24e:	2300      	movs	r3, #0
 800c250:	2200      	movs	r2, #0
 800c252:	2103      	movs	r1, #3
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7ff fa65 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800c25a:	e119      	b.n	800c490 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 800c25c:	7bbb      	ldrb	r3, [r7, #14]
 800c25e:	2b04      	cmp	r3, #4
 800c260:	f040 8116 	bne.w	800c490 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	220b      	movs	r2, #11
 800c268:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c26a:	2300      	movs	r3, #0
 800c26c:	2200      	movs	r2, #0
 800c26e:	2103      	movs	r1, #3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f7ff fa57 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800c276:	e10b      	b.n	800c490 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6899      	ldr	r1, [r3, #8]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	899a      	ldrh	r2, [r3, #12]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	795b      	ldrb	r3, [r3, #5]
 800c284:	2001      	movs	r0, #1
 800c286:	9000      	str	r0, [sp, #0]
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 f927 	bl	800c4dc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c294:	b29a      	uxth	r2, r3
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2206      	movs	r2, #6
 800c29e:	761a      	strb	r2, [r3, #24]
      break;
 800c2a0:	e0fd      	b.n	800c49e <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	795b      	ldrb	r3, [r3, #5]
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f003 fcb9 	bl	800fc20 <USBH_LL_GetURBState>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c2b2:	7bbb      	ldrb	r3, [r7, #14]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d109      	bne.n	800c2cc <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2207      	movs	r2, #7
 800c2bc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c2be:	2300      	movs	r3, #0
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	2103      	movs	r1, #3
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7ff fa2d 	bl	800b724 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c2ca:	e0e3      	b.n	800c494 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 800c2cc:	7bbb      	ldrb	r3, [r7, #14]
 800c2ce:	2b05      	cmp	r3, #5
 800c2d0:	d10b      	bne.n	800c2ea <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	220c      	movs	r2, #12
 800c2d6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c2dc:	2300      	movs	r3, #0
 800c2de:	2200      	movs	r2, #0
 800c2e0:	2103      	movs	r1, #3
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7ff fa1e 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800c2e8:	e0d4      	b.n	800c494 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c2ea:	7bbb      	ldrb	r3, [r7, #14]
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d109      	bne.n	800c304 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2205      	movs	r2, #5
 800c2f4:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	2103      	movs	r1, #3
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f7ff fa11 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800c302:	e0c7      	b.n	800c494 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 800c304:	7bbb      	ldrb	r3, [r7, #14]
 800c306:	2b04      	cmp	r3, #4
 800c308:	f040 80c4 	bne.w	800c494 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	220b      	movs	r2, #11
 800c310:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c312:	2302      	movs	r3, #2
 800c314:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c316:	2300      	movs	r3, #0
 800c318:	2200      	movs	r2, #0
 800c31a:	2103      	movs	r1, #3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f7ff fa01 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800c322:	e0b7      	b.n	800c494 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	791b      	ldrb	r3, [r3, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	2100      	movs	r1, #0
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f8fa 	bl	800c526 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c338:	b29a      	uxth	r2, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2208      	movs	r2, #8
 800c342:	761a      	strb	r2, [r3, #24]

      break;
 800c344:	e0ab      	b.n	800c49e <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	791b      	ldrb	r3, [r3, #4]
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f003 fc67 	bl	800fc20 <USBH_LL_GetURBState>
 800c352:	4603      	mov	r3, r0
 800c354:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c356:	7bbb      	ldrb	r3, [r7, #14]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d10b      	bne.n	800c374 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	220d      	movs	r2, #13
 800c360:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c366:	2300      	movs	r3, #0
 800c368:	2200      	movs	r2, #0
 800c36a:	2103      	movs	r1, #3
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f7ff f9d9 	bl	800b724 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c372:	e091      	b.n	800c498 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 800c374:	7bbb      	ldrb	r3, [r7, #14]
 800c376:	2b04      	cmp	r3, #4
 800c378:	d109      	bne.n	800c38e <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	220b      	movs	r2, #11
 800c37e:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c380:	2300      	movs	r3, #0
 800c382:	2200      	movs	r2, #0
 800c384:	2103      	movs	r1, #3
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f7ff f9cc 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800c38c:	e084      	b.n	800c498 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 800c38e:	7bbb      	ldrb	r3, [r7, #14]
 800c390:	2b05      	cmp	r3, #5
 800c392:	f040 8081 	bne.w	800c498 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 800c396:	2303      	movs	r3, #3
 800c398:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c39a:	2300      	movs	r3, #0
 800c39c:	2200      	movs	r2, #0
 800c39e:	2103      	movs	r1, #3
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f7ff f9bf 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800c3a6:	e077      	b.n	800c498 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	795b      	ldrb	r3, [r3, #5]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	9200      	str	r2, [sp, #0]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 f891 	bl	800c4dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	220a      	movs	r2, #10
 800c3ca:	761a      	strb	r2, [r3, #24]
      break;
 800c3cc:	e067      	b.n	800c49e <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	795b      	ldrb	r3, [r3, #5]
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f003 fc23 	bl	800fc20 <USBH_LL_GetURBState>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c3de:	7bbb      	ldrb	r3, [r7, #14]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d10b      	bne.n	800c3fc <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	220d      	movs	r2, #13
 800c3ec:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	2103      	movs	r1, #3
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7ff f995 	bl	800b724 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c3fa:	e04f      	b.n	800c49c <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c3fc:	7bbb      	ldrb	r3, [r7, #14]
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	d109      	bne.n	800c416 <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2209      	movs	r2, #9
 800c406:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c408:	2300      	movs	r3, #0
 800c40a:	2200      	movs	r2, #0
 800c40c:	2103      	movs	r1, #3
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7ff f988 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800c414:	e042      	b.n	800c49c <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 800c416:	7bbb      	ldrb	r3, [r7, #14]
 800c418:	2b04      	cmp	r3, #4
 800c41a:	d13f      	bne.n	800c49c <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	220b      	movs	r2, #11
 800c420:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c422:	2300      	movs	r3, #0
 800c424:	2200      	movs	r2, #0
 800c426:	2103      	movs	r1, #3
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7ff f97b 	bl	800b724 <USBH_OS_PutMessage>
      break;
 800c42e:	e035      	b.n	800c49c <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	7e5b      	ldrb	r3, [r3, #25]
 800c434:	3301      	adds	r3, #1
 800c436:	b2da      	uxtb	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	765a      	strb	r2, [r3, #25]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	7e5b      	ldrb	r3, [r3, #25]
 800c440:	2b02      	cmp	r3, #2
 800c442:	d806      	bhi.n	800c452 <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2201      	movs	r2, #1
 800c44e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c450:	e025      	b.n	800c49e <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c458:	2106      	movs	r1, #6
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	795b      	ldrb	r3, [r3, #5]
 800c468:	4619      	mov	r1, r3
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 f90c 	bl	800c688 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	791b      	ldrb	r3, [r3, #4]
 800c474:	4619      	mov	r1, r3
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f906 	bl	800c688 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c482:	2302      	movs	r3, #2
 800c484:	73fb      	strb	r3, [r7, #15]
      break;
 800c486:	e00a      	b.n	800c49e <USBH_HandleControl+0x396>

    default:
      break;
 800c488:	bf00      	nop
 800c48a:	e008      	b.n	800c49e <USBH_HandleControl+0x396>
      break;
 800c48c:	bf00      	nop
 800c48e:	e006      	b.n	800c49e <USBH_HandleControl+0x396>
      break;
 800c490:	bf00      	nop
 800c492:	e004      	b.n	800c49e <USBH_HandleControl+0x396>
      break;
 800c494:	bf00      	nop
 800c496:	e002      	b.n	800c49e <USBH_HandleControl+0x396>
      break;
 800c498:	bf00      	nop
 800c49a:	e000      	b.n	800c49e <USBH_HandleControl+0x396>
      break;
 800c49c:	bf00      	nop
  }

  return status;
 800c49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b088      	sub	sp, #32
 800c4ac:	af04      	add	r7, sp, #16
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c4b6:	79f9      	ldrb	r1, [r7, #7]
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	9303      	str	r3, [sp, #12]
 800c4bc:	2308      	movs	r3, #8
 800c4be:	9302      	str	r3, [sp, #8]
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	9301      	str	r3, [sp, #4]
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f003 fb76 	bl	800fbbe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af04      	add	r7, sp, #16
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	80fb      	strh	r3, [r7, #6]
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d001      	beq.n	800c500 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c500:	7979      	ldrb	r1, [r7, #5]
 800c502:	7e3b      	ldrb	r3, [r7, #24]
 800c504:	9303      	str	r3, [sp, #12]
 800c506:	88fb      	ldrh	r3, [r7, #6]
 800c508:	9302      	str	r3, [sp, #8]
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	9301      	str	r3, [sp, #4]
 800c50e:	2301      	movs	r3, #1
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	2300      	movs	r3, #0
 800c514:	2200      	movs	r2, #0
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f003 fb51 	bl	800fbbe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b088      	sub	sp, #32
 800c52a:	af04      	add	r7, sp, #16
 800c52c:	60f8      	str	r0, [r7, #12]
 800c52e:	60b9      	str	r1, [r7, #8]
 800c530:	4611      	mov	r1, r2
 800c532:	461a      	mov	r2, r3
 800c534:	460b      	mov	r3, r1
 800c536:	80fb      	strh	r3, [r7, #6]
 800c538:	4613      	mov	r3, r2
 800c53a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c53c:	7979      	ldrb	r1, [r7, #5]
 800c53e:	2300      	movs	r3, #0
 800c540:	9303      	str	r3, [sp, #12]
 800c542:	88fb      	ldrh	r3, [r7, #6]
 800c544:	9302      	str	r3, [sp, #8]
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	9301      	str	r3, [sp, #4]
 800c54a:	2301      	movs	r3, #1
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	2300      	movs	r3, #0
 800c550:	2201      	movs	r2, #1
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f003 fb33 	bl	800fbbe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c558:	2300      	movs	r3, #0

}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b088      	sub	sp, #32
 800c566:	af04      	add	r7, sp, #16
 800c568:	60f8      	str	r0, [r7, #12]
 800c56a:	60b9      	str	r1, [r7, #8]
 800c56c:	4611      	mov	r1, r2
 800c56e:	461a      	mov	r2, r3
 800c570:	460b      	mov	r3, r1
 800c572:	80fb      	strh	r3, [r7, #6]
 800c574:	4613      	mov	r3, r2
 800c576:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d001      	beq.n	800c586 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c582:	2300      	movs	r3, #0
 800c584:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c586:	7979      	ldrb	r1, [r7, #5]
 800c588:	7e3b      	ldrb	r3, [r7, #24]
 800c58a:	9303      	str	r3, [sp, #12]
 800c58c:	88fb      	ldrh	r3, [r7, #6]
 800c58e:	9302      	str	r3, [sp, #8]
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	9301      	str	r3, [sp, #4]
 800c594:	2301      	movs	r3, #1
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	2302      	movs	r3, #2
 800c59a:	2200      	movs	r2, #0
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f003 fb0e 	bl	800fbbe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b088      	sub	sp, #32
 800c5b0:	af04      	add	r7, sp, #16
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	4611      	mov	r1, r2
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	80fb      	strh	r3, [r7, #6]
 800c5be:	4613      	mov	r3, r2
 800c5c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c5c2:	7979      	ldrb	r1, [r7, #5]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	9303      	str	r3, [sp, #12]
 800c5c8:	88fb      	ldrh	r3, [r7, #6]
 800c5ca:	9302      	str	r3, [sp, #8]
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	9301      	str	r3, [sp, #4]
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	2302      	movs	r3, #2
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f003 faf0 	bl	800fbbe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b086      	sub	sp, #24
 800c5ec:	af04      	add	r7, sp, #16
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	4608      	mov	r0, r1
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	70fb      	strb	r3, [r7, #3]
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	70bb      	strb	r3, [r7, #2]
 800c5fe:	4613      	mov	r3, r2
 800c600:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c602:	7878      	ldrb	r0, [r7, #1]
 800c604:	78ba      	ldrb	r2, [r7, #2]
 800c606:	78f9      	ldrb	r1, [r7, #3]
 800c608:	8b3b      	ldrh	r3, [r7, #24]
 800c60a:	9302      	str	r3, [sp, #8]
 800c60c:	7d3b      	ldrb	r3, [r7, #20]
 800c60e:	9301      	str	r3, [sp, #4]
 800c610:	7c3b      	ldrb	r3, [r7, #16]
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	4603      	mov	r3, r0
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f003 fa83 	bl	800fb22 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3708      	adds	r7, #8
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b082      	sub	sp, #8
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
 800c62e:	460b      	mov	r3, r1
 800c630:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c632:	78fb      	ldrb	r3, [r7, #3]
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f003 faa2 	bl	800fb80 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3708      	adds	r7, #8
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	460b      	mov	r3, r1
 800c650:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f836 	bl	800c6c4 <USBH_GetFreePipe>
 800c658:	4603      	mov	r3, r0
 800c65a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c65c:	89fb      	ldrh	r3, [r7, #14]
 800c65e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c662:	4293      	cmp	r3, r2
 800c664:	d00a      	beq.n	800c67c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c666:	78fa      	ldrb	r2, [r7, #3]
 800c668:	89fb      	ldrh	r3, [r7, #14]
 800c66a:	f003 030f 	and.w	r3, r3, #15
 800c66e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c672:	6879      	ldr	r1, [r7, #4]
 800c674:	33e0      	adds	r3, #224	@ 0xe0
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	440b      	add	r3, r1
 800c67a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c67c:	89fb      	ldrh	r3, [r7, #14]
 800c67e:	b2db      	uxtb	r3, r3
}
 800c680:	4618      	mov	r0, r3
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	460b      	mov	r3, r1
 800c692:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c694:	78fb      	ldrb	r3, [r7, #3]
 800c696:	2b0f      	cmp	r3, #15
 800c698:	d80d      	bhi.n	800c6b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c69a:	78fb      	ldrb	r3, [r7, #3]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	33e0      	adds	r3, #224	@ 0xe0
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	4413      	add	r3, r2
 800c6a4:	685a      	ldr	r2, [r3, #4]
 800c6a6:	78fb      	ldrb	r3, [r7, #3]
 800c6a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c6ac:	6879      	ldr	r1, [r7, #4]
 800c6ae:	33e0      	adds	r3, #224	@ 0xe0
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	440b      	add	r3, r1
 800c6b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	73fb      	strb	r3, [r7, #15]
 800c6d4:	e00f      	b.n	800c6f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c6d6:	7bfb      	ldrb	r3, [r7, #15]
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	33e0      	adds	r3, #224	@ 0xe0
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	4413      	add	r3, r2
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d102      	bne.n	800c6f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	e007      	b.n	800c700 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	73fb      	strb	r3, [r7, #15]
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
 800c6f8:	2b0f      	cmp	r3, #15
 800c6fa:	d9ec      	bls.n	800c6d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c6fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800c700:	4618      	mov	r0, r3
 800c702:	3714      	adds	r7, #20
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <__NVIC_SetPriority>:
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	4603      	mov	r3, r0
 800c714:	6039      	str	r1, [r7, #0]
 800c716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	db0a      	blt.n	800c736 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	b2da      	uxtb	r2, r3
 800c724:	490c      	ldr	r1, [pc, #48]	@ (800c758 <__NVIC_SetPriority+0x4c>)
 800c726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c72a:	0112      	lsls	r2, r2, #4
 800c72c:	b2d2      	uxtb	r2, r2
 800c72e:	440b      	add	r3, r1
 800c730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c734:	e00a      	b.n	800c74c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	b2da      	uxtb	r2, r3
 800c73a:	4908      	ldr	r1, [pc, #32]	@ (800c75c <__NVIC_SetPriority+0x50>)
 800c73c:	79fb      	ldrb	r3, [r7, #7]
 800c73e:	f003 030f 	and.w	r3, r3, #15
 800c742:	3b04      	subs	r3, #4
 800c744:	0112      	lsls	r2, r2, #4
 800c746:	b2d2      	uxtb	r2, r2
 800c748:	440b      	add	r3, r1
 800c74a:	761a      	strb	r2, [r3, #24]
}
 800c74c:	bf00      	nop
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr
 800c758:	e000e100 	.word	0xe000e100
 800c75c:	e000ed00 	.word	0xe000ed00

0800c760 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c760:	b580      	push	{r7, lr}
 800c762:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c764:	4b05      	ldr	r3, [pc, #20]	@ (800c77c <SysTick_Handler+0x1c>)
 800c766:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c768:	f001 ff88 	bl	800e67c <xTaskGetSchedulerState>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d001      	beq.n	800c776 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c772:	f002 fd81 	bl	800f278 <xPortSysTickHandler>
  }
}
 800c776:	bf00      	nop
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	e000e010 	.word	0xe000e010

0800c780 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c780:	b580      	push	{r7, lr}
 800c782:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c784:	2100      	movs	r1, #0
 800c786:	f06f 0004 	mvn.w	r0, #4
 800c78a:	f7ff ffbf 	bl	800c70c <__NVIC_SetPriority>
#endif
}
 800c78e:	bf00      	nop
 800c790:	bd80      	pop	{r7, pc}
	...

0800c794 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c79a:	f3ef 8305 	mrs	r3, IPSR
 800c79e:	603b      	str	r3, [r7, #0]
  return(result);
 800c7a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d003      	beq.n	800c7ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c7a6:	f06f 0305 	mvn.w	r3, #5
 800c7aa:	607b      	str	r3, [r7, #4]
 800c7ac:	e00c      	b.n	800c7c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c7ae:	4b0a      	ldr	r3, [pc, #40]	@ (800c7d8 <osKernelInitialize+0x44>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d105      	bne.n	800c7c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c7b6:	4b08      	ldr	r3, [pc, #32]	@ (800c7d8 <osKernelInitialize+0x44>)
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	607b      	str	r3, [r7, #4]
 800c7c0:	e002      	b.n	800c7c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c7c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c7c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c7c8:	687b      	ldr	r3, [r7, #4]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	370c      	adds	r7, #12
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	20002c70 	.word	0x20002c70

0800c7dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7e2:	f3ef 8305 	mrs	r3, IPSR
 800c7e6:	603b      	str	r3, [r7, #0]
  return(result);
 800c7e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d003      	beq.n	800c7f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c7ee:	f06f 0305 	mvn.w	r3, #5
 800c7f2:	607b      	str	r3, [r7, #4]
 800c7f4:	e010      	b.n	800c818 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c7f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c824 <osKernelStart+0x48>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d109      	bne.n	800c812 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c7fe:	f7ff ffbf 	bl	800c780 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c802:	4b08      	ldr	r3, [pc, #32]	@ (800c824 <osKernelStart+0x48>)
 800c804:	2202      	movs	r2, #2
 800c806:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c808:	f001 fac2 	bl	800dd90 <vTaskStartScheduler>
      stat = osOK;
 800c80c:	2300      	movs	r3, #0
 800c80e:	607b      	str	r3, [r7, #4]
 800c810:	e002      	b.n	800c818 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c812:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c816:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c818:	687b      	ldr	r3, [r7, #4]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	20002c70 	.word	0x20002c70

0800c828 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c828:	b580      	push	{r7, lr}
 800c82a:	b08e      	sub	sp, #56	@ 0x38
 800c82c:	af04      	add	r7, sp, #16
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c834:	2300      	movs	r3, #0
 800c836:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c838:	f3ef 8305 	mrs	r3, IPSR
 800c83c:	617b      	str	r3, [r7, #20]
  return(result);
 800c83e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c840:	2b00      	cmp	r3, #0
 800c842:	d17e      	bne.n	800c942 <osThreadNew+0x11a>
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d07b      	beq.n	800c942 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c84a:	2380      	movs	r3, #128	@ 0x80
 800c84c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c84e:	2318      	movs	r3, #24
 800c850:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c852:	2300      	movs	r3, #0
 800c854:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c85a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d045      	beq.n	800c8ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d002      	beq.n	800c870 <osThreadNew+0x48>
        name = attr->name;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	699b      	ldr	r3, [r3, #24]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d002      	beq.n	800c87e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	699b      	ldr	r3, [r3, #24]
 800c87c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c87e:	69fb      	ldr	r3, [r7, #28]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d008      	beq.n	800c896 <osThreadNew+0x6e>
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	2b38      	cmp	r3, #56	@ 0x38
 800c888:	d805      	bhi.n	800c896 <osThreadNew+0x6e>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	2b00      	cmp	r3, #0
 800c894:	d001      	beq.n	800c89a <osThreadNew+0x72>
        return (NULL);
 800c896:	2300      	movs	r3, #0
 800c898:	e054      	b.n	800c944 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	695b      	ldr	r3, [r3, #20]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d003      	beq.n	800c8aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	695b      	ldr	r3, [r3, #20]
 800c8a6:	089b      	lsrs	r3, r3, #2
 800c8a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00e      	beq.n	800c8d0 <osThreadNew+0xa8>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	2b5b      	cmp	r3, #91	@ 0x5b
 800c8b8:	d90a      	bls.n	800c8d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d006      	beq.n	800c8d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	695b      	ldr	r3, [r3, #20]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d002      	beq.n	800c8d0 <osThreadNew+0xa8>
        mem = 1;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	61bb      	str	r3, [r7, #24]
 800c8ce:	e010      	b.n	800c8f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10c      	bne.n	800c8f2 <osThreadNew+0xca>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d108      	bne.n	800c8f2 <osThreadNew+0xca>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d104      	bne.n	800c8f2 <osThreadNew+0xca>
          mem = 0;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	61bb      	str	r3, [r7, #24]
 800c8ec:	e001      	b.n	800c8f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d110      	bne.n	800c91a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c900:	9202      	str	r2, [sp, #8]
 800c902:	9301      	str	r3, [sp, #4]
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	9300      	str	r3, [sp, #0]
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	6a3a      	ldr	r2, [r7, #32]
 800c90c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f001 f862 	bl	800d9d8 <xTaskCreateStatic>
 800c914:	4603      	mov	r3, r0
 800c916:	613b      	str	r3, [r7, #16]
 800c918:	e013      	b.n	800c942 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d110      	bne.n	800c942 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c920:	6a3b      	ldr	r3, [r7, #32]
 800c922:	b29a      	uxth	r2, r3
 800c924:	f107 0310 	add.w	r3, r7, #16
 800c928:	9301      	str	r3, [sp, #4]
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	f001 f8b0 	bl	800da98 <xTaskCreate>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d001      	beq.n	800c942 <osThreadNew+0x11a>
            hTask = NULL;
 800c93e:	2300      	movs	r3, #0
 800c940:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c942:	693b      	ldr	r3, [r7, #16]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3728      	adds	r7, #40	@ 0x28
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c954:	f3ef 8305 	mrs	r3, IPSR
 800c958:	60bb      	str	r3, [r7, #8]
  return(result);
 800c95a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d003      	beq.n	800c968 <osDelay+0x1c>
    stat = osErrorISR;
 800c960:	f06f 0305 	mvn.w	r3, #5
 800c964:	60fb      	str	r3, [r7, #12]
 800c966:	e007      	b.n	800c978 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c968:	2300      	movs	r3, #0
 800c96a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d002      	beq.n	800c978 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f001 f9d6 	bl	800dd24 <vTaskDelay>
    }
  }

  return (stat);
 800c978:	68fb      	ldr	r3, [r7, #12]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c982:	b580      	push	{r7, lr}
 800c984:	b08a      	sub	sp, #40	@ 0x28
 800c986:	af02      	add	r7, sp, #8
 800c988:	60f8      	str	r0, [r7, #12]
 800c98a:	60b9      	str	r1, [r7, #8]
 800c98c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c98e:	2300      	movs	r3, #0
 800c990:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c992:	f3ef 8305 	mrs	r3, IPSR
 800c996:	613b      	str	r3, [r7, #16]
  return(result);
 800c998:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d15f      	bne.n	800ca5e <osMessageQueueNew+0xdc>
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d05c      	beq.n	800ca5e <osMessageQueueNew+0xdc>
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d059      	beq.n	800ca5e <osMessageQueueNew+0xdc>
    mem = -1;
 800c9aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c9ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d029      	beq.n	800ca0a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d012      	beq.n	800c9e4 <osMessageQueueNew+0x62>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	2b4f      	cmp	r3, #79	@ 0x4f
 800c9c4:	d90e      	bls.n	800c9e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00a      	beq.n	800c9e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	695a      	ldr	r2, [r3, #20]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	68b9      	ldr	r1, [r7, #8]
 800c9d6:	fb01 f303 	mul.w	r3, r1, r3
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d302      	bcc.n	800c9e4 <osMessageQueueNew+0x62>
        mem = 1;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	61bb      	str	r3, [r7, #24]
 800c9e2:	e014      	b.n	800ca0e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d110      	bne.n	800ca0e <osMessageQueueNew+0x8c>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10c      	bne.n	800ca0e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d108      	bne.n	800ca0e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	695b      	ldr	r3, [r3, #20]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d104      	bne.n	800ca0e <osMessageQueueNew+0x8c>
          mem = 0;
 800ca04:	2300      	movs	r3, #0
 800ca06:	61bb      	str	r3, [r7, #24]
 800ca08:	e001      	b.n	800ca0e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d10b      	bne.n	800ca2c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	691a      	ldr	r2, [r3, #16]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	9100      	str	r1, [sp, #0]
 800ca20:	68b9      	ldr	r1, [r7, #8]
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f000 fa66 	bl	800cef4 <xQueueGenericCreateStatic>
 800ca28:	61f8      	str	r0, [r7, #28]
 800ca2a:	e008      	b.n	800ca3e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d105      	bne.n	800ca3e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ca32:	2200      	movs	r2, #0
 800ca34:	68b9      	ldr	r1, [r7, #8]
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f000 fad9 	bl	800cfee <xQueueGenericCreate>
 800ca3c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00c      	beq.n	800ca5e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d003      	beq.n	800ca52 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	617b      	str	r3, [r7, #20]
 800ca50:	e001      	b.n	800ca56 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ca52:	2300      	movs	r3, #0
 800ca54:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ca56:	6979      	ldr	r1, [r7, #20]
 800ca58:	69f8      	ldr	r0, [r7, #28]
 800ca5a:	f000 ff5f 	bl	800d91c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ca5e:	69fb      	ldr	r3, [r7, #28]
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3720      	adds	r7, #32
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b088      	sub	sp, #32
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	603b      	str	r3, [r7, #0]
 800ca74:	4613      	mov	r3, r2
 800ca76:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca80:	f3ef 8305 	mrs	r3, IPSR
 800ca84:	617b      	str	r3, [r7, #20]
  return(result);
 800ca86:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d028      	beq.n	800cade <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d005      	beq.n	800ca9e <osMessageQueuePut+0x36>
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <osMessageQueuePut+0x36>
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d003      	beq.n	800caa6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ca9e:	f06f 0303 	mvn.w	r3, #3
 800caa2:	61fb      	str	r3, [r7, #28]
 800caa4:	e038      	b.n	800cb18 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800caa6:	2300      	movs	r3, #0
 800caa8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800caaa:	f107 0210 	add.w	r2, r7, #16
 800caae:	2300      	movs	r3, #0
 800cab0:	68b9      	ldr	r1, [r7, #8]
 800cab2:	69b8      	ldr	r0, [r7, #24]
 800cab4:	f000 fbfc 	bl	800d2b0 <xQueueGenericSendFromISR>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d003      	beq.n	800cac6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cabe:	f06f 0302 	mvn.w	r3, #2
 800cac2:	61fb      	str	r3, [r7, #28]
 800cac4:	e028      	b.n	800cb18 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d025      	beq.n	800cb18 <osMessageQueuePut+0xb0>
 800cacc:	4b15      	ldr	r3, [pc, #84]	@ (800cb24 <osMessageQueuePut+0xbc>)
 800cace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cad2:	601a      	str	r2, [r3, #0]
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	f3bf 8f6f 	isb	sy
 800cadc:	e01c      	b.n	800cb18 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <osMessageQueuePut+0x82>
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d103      	bne.n	800caf2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800caea:	f06f 0303 	mvn.w	r3, #3
 800caee:	61fb      	str	r3, [r7, #28]
 800caf0:	e012      	b.n	800cb18 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800caf2:	2300      	movs	r3, #0
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	68b9      	ldr	r1, [r7, #8]
 800caf8:	69b8      	ldr	r0, [r7, #24]
 800cafa:	f000 fad7 	bl	800d0ac <xQueueGenericSend>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d009      	beq.n	800cb18 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d003      	beq.n	800cb12 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cb0a:	f06f 0301 	mvn.w	r3, #1
 800cb0e:	61fb      	str	r3, [r7, #28]
 800cb10:	e002      	b.n	800cb18 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cb12:	f06f 0302 	mvn.w	r3, #2
 800cb16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cb18:	69fb      	ldr	r3, [r7, #28]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3720      	adds	r7, #32
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	e000ed04 	.word	0xe000ed04

0800cb28 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b088      	sub	sp, #32
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
 800cb34:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb3e:	f3ef 8305 	mrs	r3, IPSR
 800cb42:	617b      	str	r3, [r7, #20]
  return(result);
 800cb44:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d028      	beq.n	800cb9c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d005      	beq.n	800cb5c <osMessageQueueGet+0x34>
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d002      	beq.n	800cb5c <osMessageQueueGet+0x34>
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d003      	beq.n	800cb64 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cb5c:	f06f 0303 	mvn.w	r3, #3
 800cb60:	61fb      	str	r3, [r7, #28]
 800cb62:	e037      	b.n	800cbd4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cb64:	2300      	movs	r3, #0
 800cb66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cb68:	f107 0310 	add.w	r3, r7, #16
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	68b9      	ldr	r1, [r7, #8]
 800cb70:	69b8      	ldr	r0, [r7, #24]
 800cb72:	f000 fd1d 	bl	800d5b0 <xQueueReceiveFromISR>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d003      	beq.n	800cb84 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cb7c:	f06f 0302 	mvn.w	r3, #2
 800cb80:	61fb      	str	r3, [r7, #28]
 800cb82:	e027      	b.n	800cbd4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d024      	beq.n	800cbd4 <osMessageQueueGet+0xac>
 800cb8a:	4b15      	ldr	r3, [pc, #84]	@ (800cbe0 <osMessageQueueGet+0xb8>)
 800cb8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb90:	601a      	str	r2, [r3, #0]
 800cb92:	f3bf 8f4f 	dsb	sy
 800cb96:	f3bf 8f6f 	isb	sy
 800cb9a:	e01b      	b.n	800cbd4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cb9c:	69bb      	ldr	r3, [r7, #24]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d002      	beq.n	800cba8 <osMessageQueueGet+0x80>
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d103      	bne.n	800cbb0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cba8:	f06f 0303 	mvn.w	r3, #3
 800cbac:	61fb      	str	r3, [r7, #28]
 800cbae:	e011      	b.n	800cbd4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cbb0:	683a      	ldr	r2, [r7, #0]
 800cbb2:	68b9      	ldr	r1, [r7, #8]
 800cbb4:	69b8      	ldr	r0, [r7, #24]
 800cbb6:	f000 fc19 	bl	800d3ec <xQueueReceive>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d009      	beq.n	800cbd4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d003      	beq.n	800cbce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cbc6:	f06f 0301 	mvn.w	r3, #1
 800cbca:	61fb      	str	r3, [r7, #28]
 800cbcc:	e002      	b.n	800cbd4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cbce:	f06f 0302 	mvn.w	r3, #2
 800cbd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cbd4:	69fb      	ldr	r3, [r7, #28]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3720      	adds	r7, #32
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	e000ed04 	.word	0xe000ed04

0800cbe4 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b08a      	sub	sp, #40	@ 0x28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d102      	bne.n	800cbfc <osMessageQueueGetSpace+0x18>
    space = 0U;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbfa:	e023      	b.n	800cc44 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbfc:	f3ef 8305 	mrs	r3, IPSR
 800cc00:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc02:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d019      	beq.n	800cc3c <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cc08:	f3ef 8211 	mrs	r2, BASEPRI
 800cc0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc10:	f383 8811 	msr	BASEPRI, r3
 800cc14:	f3bf 8f6f 	isb	sy
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	613a      	str	r2, [r7, #16]
 800cc1e:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc20:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800cc22:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800cc24:	6a3b      	ldr	r3, [r7, #32]
 800cc26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc28:	6a3b      	ldr	r3, [r7, #32]
 800cc2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cc3a:	e003      	b.n	800cc44 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800cc3c:	6a38      	ldr	r0, [r7, #32]
 800cc3e:	f000 fd39 	bl	800d6b4 <uxQueueSpacesAvailable>
 800cc42:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 800cc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3728      	adds	r7, #40	@ 0x28
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
	...

0800cc50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cc50:	b480      	push	{r7}
 800cc52:	b085      	sub	sp, #20
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	4a07      	ldr	r2, [pc, #28]	@ (800cc7c <vApplicationGetIdleTaskMemory+0x2c>)
 800cc60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	4a06      	ldr	r2, [pc, #24]	@ (800cc80 <vApplicationGetIdleTaskMemory+0x30>)
 800cc66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2280      	movs	r2, #128	@ 0x80
 800cc6c:	601a      	str	r2, [r3, #0]
}
 800cc6e:	bf00      	nop
 800cc70:	3714      	adds	r7, #20
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	20002c74 	.word	0x20002c74
 800cc80:	20002cd0 	.word	0x20002cd0

0800cc84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cc84:	b480      	push	{r7}
 800cc86:	b085      	sub	sp, #20
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	4a07      	ldr	r2, [pc, #28]	@ (800ccb0 <vApplicationGetTimerTaskMemory+0x2c>)
 800cc94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	4a06      	ldr	r2, [pc, #24]	@ (800ccb4 <vApplicationGetTimerTaskMemory+0x30>)
 800cc9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cca2:	601a      	str	r2, [r3, #0]
}
 800cca4:	bf00      	nop
 800cca6:	3714      	adds	r7, #20
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr
 800ccb0:	20002ed0 	.word	0x20002ed0
 800ccb4:	20002f2c 	.word	0x20002f2c

0800ccb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f103 0208 	add.w	r2, r3, #8
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ccd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f103 0208 	add.w	r2, r3, #8
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f103 0208 	add.w	r2, r3, #8
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ccec:	bf00      	nop
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd06:	bf00      	nop
 800cd08:	370c      	adds	r7, #12
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr

0800cd12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd12:	b480      	push	{r7}
 800cd14:	b085      	sub	sp, #20
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
 800cd1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	689a      	ldr	r2, [r3, #8]
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	1c5a      	adds	r2, r3, #1
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	601a      	str	r2, [r3, #0]
}
 800cd4e:	bf00      	nop
 800cd50:	3714      	adds	r7, #20
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr

0800cd5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd5a:	b480      	push	{r7}
 800cd5c:	b085      	sub	sp, #20
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
 800cd62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd70:	d103      	bne.n	800cd7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	691b      	ldr	r3, [r3, #16]
 800cd76:	60fb      	str	r3, [r7, #12]
 800cd78:	e00c      	b.n	800cd94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	3308      	adds	r3, #8
 800cd7e:	60fb      	str	r3, [r7, #12]
 800cd80:	e002      	b.n	800cd88 <vListInsert+0x2e>
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	60fb      	str	r3, [r7, #12]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	68ba      	ldr	r2, [r7, #8]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d2f6      	bcs.n	800cd82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	685a      	ldr	r2, [r3, #4]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	683a      	ldr	r2, [r7, #0]
 800cdae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	1c5a      	adds	r2, r3, #1
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	601a      	str	r2, [r3, #0]
}
 800cdc0:	bf00      	nop
 800cdc2:	3714      	adds	r7, #20
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	6892      	ldr	r2, [r2, #8]
 800cde2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	6852      	ldr	r2, [r2, #4]
 800cdec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d103      	bne.n	800ce00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	689a      	ldr	r2, [r3, #8]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	1e5a      	subs	r2, r3, #1
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3714      	adds	r7, #20
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d10b      	bne.n	800ce4c <xQueueGenericReset+0x2c>
	__asm volatile
 800ce34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce38:	f383 8811 	msr	BASEPRI, r3
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	60bb      	str	r3, [r7, #8]
}
 800ce46:	bf00      	nop
 800ce48:	bf00      	nop
 800ce4a:	e7fd      	b.n	800ce48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce4c:	f002 f984 	bl	800f158 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce58:	68f9      	ldr	r1, [r7, #12]
 800ce5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ce5c:	fb01 f303 	mul.w	r3, r1, r3
 800ce60:	441a      	add	r2, r3
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce7c:	3b01      	subs	r3, #1
 800ce7e:	68f9      	ldr	r1, [r7, #12]
 800ce80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ce82:	fb01 f303 	mul.w	r3, r1, r3
 800ce86:	441a      	add	r2, r3
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	22ff      	movs	r2, #255	@ 0xff
 800ce90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	22ff      	movs	r2, #255	@ 0xff
 800ce98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d114      	bne.n	800cecc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	691b      	ldr	r3, [r3, #16]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d01a      	beq.n	800cee0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	3310      	adds	r3, #16
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f001 f9fc 	bl	800e2ac <xTaskRemoveFromEventList>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d012      	beq.n	800cee0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ceba:	4b0d      	ldr	r3, [pc, #52]	@ (800cef0 <xQueueGenericReset+0xd0>)
 800cebc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cec0:	601a      	str	r2, [r3, #0]
 800cec2:	f3bf 8f4f 	dsb	sy
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	e009      	b.n	800cee0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	3310      	adds	r3, #16
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7ff fef1 	bl	800ccb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	3324      	adds	r3, #36	@ 0x24
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7ff feec 	bl	800ccb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cee0:	f002 f96c 	bl	800f1bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cee4:	2301      	movs	r3, #1
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop
 800cef0:	e000ed04 	.word	0xe000ed04

0800cef4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b08e      	sub	sp, #56	@ 0x38
 800cef8:	af02      	add	r7, sp, #8
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	607a      	str	r2, [r7, #4]
 800cf00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d10b      	bne.n	800cf20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cf08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf0c:	f383 8811 	msr	BASEPRI, r3
 800cf10:	f3bf 8f6f 	isb	sy
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cf1a:	bf00      	nop
 800cf1c:	bf00      	nop
 800cf1e:	e7fd      	b.n	800cf1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d10b      	bne.n	800cf3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cf38:	bf00      	nop
 800cf3a:	bf00      	nop
 800cf3c:	e7fd      	b.n	800cf3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <xQueueGenericCreateStatic+0x56>
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d001      	beq.n	800cf4e <xQueueGenericCreateStatic+0x5a>
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e000      	b.n	800cf50 <xQueueGenericCreateStatic+0x5c>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d10b      	bne.n	800cf6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	623b      	str	r3, [r7, #32]
}
 800cf66:	bf00      	nop
 800cf68:	bf00      	nop
 800cf6a:	e7fd      	b.n	800cf68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d102      	bne.n	800cf78 <xQueueGenericCreateStatic+0x84>
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d101      	bne.n	800cf7c <xQueueGenericCreateStatic+0x88>
 800cf78:	2301      	movs	r3, #1
 800cf7a:	e000      	b.n	800cf7e <xQueueGenericCreateStatic+0x8a>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d10b      	bne.n	800cf9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cf82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf86:	f383 8811 	msr	BASEPRI, r3
 800cf8a:	f3bf 8f6f 	isb	sy
 800cf8e:	f3bf 8f4f 	dsb	sy
 800cf92:	61fb      	str	r3, [r7, #28]
}
 800cf94:	bf00      	nop
 800cf96:	bf00      	nop
 800cf98:	e7fd      	b.n	800cf96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf9a:	2350      	movs	r3, #80	@ 0x50
 800cf9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	2b50      	cmp	r3, #80	@ 0x50
 800cfa2:	d00b      	beq.n	800cfbc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cfa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	61bb      	str	r3, [r7, #24]
}
 800cfb6:	bf00      	nop
 800cfb8:	bf00      	nop
 800cfba:	e7fd      	b.n	800cfb8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cfbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cfc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00d      	beq.n	800cfe4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfca:	2201      	movs	r2, #1
 800cfcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfd0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cfd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	4613      	mov	r3, r2
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	68b9      	ldr	r1, [r7, #8]
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f000 f840 	bl	800d064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3730      	adds	r7, #48	@ 0x30
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b08a      	sub	sp, #40	@ 0x28
 800cff2:	af02      	add	r7, sp, #8
 800cff4:	60f8      	str	r0, [r7, #12]
 800cff6:	60b9      	str	r1, [r7, #8]
 800cff8:	4613      	mov	r3, r2
 800cffa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10b      	bne.n	800d01a <xQueueGenericCreate+0x2c>
	__asm volatile
 800d002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d006:	f383 8811 	msr	BASEPRI, r3
 800d00a:	f3bf 8f6f 	isb	sy
 800d00e:	f3bf 8f4f 	dsb	sy
 800d012:	613b      	str	r3, [r7, #16]
}
 800d014:	bf00      	nop
 800d016:	bf00      	nop
 800d018:	e7fd      	b.n	800d016 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	68ba      	ldr	r2, [r7, #8]
 800d01e:	fb02 f303 	mul.w	r3, r2, r3
 800d022:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	3350      	adds	r3, #80	@ 0x50
 800d028:	4618      	mov	r0, r3
 800d02a:	f002 f9b7 	bl	800f39c <pvPortMalloc>
 800d02e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d011      	beq.n	800d05a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	3350      	adds	r3, #80	@ 0x50
 800d03e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	2200      	movs	r2, #0
 800d044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d048:	79fa      	ldrb	r2, [r7, #7]
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	4613      	mov	r3, r2
 800d050:	697a      	ldr	r2, [r7, #20]
 800d052:	68b9      	ldr	r1, [r7, #8]
 800d054:	68f8      	ldr	r0, [r7, #12]
 800d056:	f000 f805 	bl	800d064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d05a:	69bb      	ldr	r3, [r7, #24]
	}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3720      	adds	r7, #32
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	607a      	str	r2, [r7, #4]
 800d070:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d103      	bne.n	800d080 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	69ba      	ldr	r2, [r7, #24]
 800d07c:	601a      	str	r2, [r3, #0]
 800d07e:	e002      	b.n	800d086 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	68ba      	ldr	r2, [r7, #8]
 800d090:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d092:	2101      	movs	r1, #1
 800d094:	69b8      	ldr	r0, [r7, #24]
 800d096:	f7ff fec3 	bl	800ce20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	78fa      	ldrb	r2, [r7, #3]
 800d09e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d0a2:	bf00      	nop
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
	...

0800d0ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b08e      	sub	sp, #56	@ 0x38
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	607a      	str	r2, [r7, #4]
 800d0b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d10b      	bne.n	800d0e0 <xQueueGenericSend+0x34>
	__asm volatile
 800d0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0cc:	f383 8811 	msr	BASEPRI, r3
 800d0d0:	f3bf 8f6f 	isb	sy
 800d0d4:	f3bf 8f4f 	dsb	sy
 800d0d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d0da:	bf00      	nop
 800d0dc:	bf00      	nop
 800d0de:	e7fd      	b.n	800d0dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d103      	bne.n	800d0ee <xQueueGenericSend+0x42>
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d101      	bne.n	800d0f2 <xQueueGenericSend+0x46>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e000      	b.n	800d0f4 <xQueueGenericSend+0x48>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d10b      	bne.n	800d110 <xQueueGenericSend+0x64>
	__asm volatile
 800d0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fc:	f383 8811 	msr	BASEPRI, r3
 800d100:	f3bf 8f6f 	isb	sy
 800d104:	f3bf 8f4f 	dsb	sy
 800d108:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d10a:	bf00      	nop
 800d10c:	bf00      	nop
 800d10e:	e7fd      	b.n	800d10c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	2b02      	cmp	r3, #2
 800d114:	d103      	bne.n	800d11e <xQueueGenericSend+0x72>
 800d116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	d101      	bne.n	800d122 <xQueueGenericSend+0x76>
 800d11e:	2301      	movs	r3, #1
 800d120:	e000      	b.n	800d124 <xQueueGenericSend+0x78>
 800d122:	2300      	movs	r3, #0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10b      	bne.n	800d140 <xQueueGenericSend+0x94>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d12c:	f383 8811 	msr	BASEPRI, r3
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	623b      	str	r3, [r7, #32]
}
 800d13a:	bf00      	nop
 800d13c:	bf00      	nop
 800d13e:	e7fd      	b.n	800d13c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d140:	f001 fa9c 	bl	800e67c <xTaskGetSchedulerState>
 800d144:	4603      	mov	r3, r0
 800d146:	2b00      	cmp	r3, #0
 800d148:	d102      	bne.n	800d150 <xQueueGenericSend+0xa4>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d101      	bne.n	800d154 <xQueueGenericSend+0xa8>
 800d150:	2301      	movs	r3, #1
 800d152:	e000      	b.n	800d156 <xQueueGenericSend+0xaa>
 800d154:	2300      	movs	r3, #0
 800d156:	2b00      	cmp	r3, #0
 800d158:	d10b      	bne.n	800d172 <xQueueGenericSend+0xc6>
	__asm volatile
 800d15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d15e:	f383 8811 	msr	BASEPRI, r3
 800d162:	f3bf 8f6f 	isb	sy
 800d166:	f3bf 8f4f 	dsb	sy
 800d16a:	61fb      	str	r3, [r7, #28]
}
 800d16c:	bf00      	nop
 800d16e:	bf00      	nop
 800d170:	e7fd      	b.n	800d16e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d172:	f001 fff1 	bl	800f158 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d17c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d17e:	429a      	cmp	r2, r3
 800d180:	d302      	bcc.n	800d188 <xQueueGenericSend+0xdc>
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	2b02      	cmp	r3, #2
 800d186:	d129      	bne.n	800d1dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d188:	683a      	ldr	r2, [r7, #0]
 800d18a:	68b9      	ldr	r1, [r7, #8]
 800d18c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d18e:	f000 fab5 	bl	800d6fc <prvCopyDataToQueue>
 800d192:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d010      	beq.n	800d1be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d19e:	3324      	adds	r3, #36	@ 0x24
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f001 f883 	bl	800e2ac <xTaskRemoveFromEventList>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d013      	beq.n	800d1d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d1ac:	4b3f      	ldr	r3, [pc, #252]	@ (800d2ac <xQueueGenericSend+0x200>)
 800d1ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1b2:	601a      	str	r2, [r3, #0]
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	e00a      	b.n	800d1d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d007      	beq.n	800d1d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d1c4:	4b39      	ldr	r3, [pc, #228]	@ (800d2ac <xQueueGenericSend+0x200>)
 800d1c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1ca:	601a      	str	r2, [r3, #0]
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d1d4:	f001 fff2 	bl	800f1bc <vPortExitCritical>
				return pdPASS;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	e063      	b.n	800d2a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d103      	bne.n	800d1ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1e2:	f001 ffeb 	bl	800f1bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	e05c      	b.n	800d2a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d106      	bne.n	800d1fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1f0:	f107 0314 	add.w	r3, r7, #20
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f001 f8e5 	bl	800e3c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1fe:	f001 ffdd 	bl	800f1bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d202:	f000 fe2d 	bl	800de60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d206:	f001 ffa7 	bl	800f158 <vPortEnterCritical>
 800d20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d20c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d210:	b25b      	sxtb	r3, r3
 800d212:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d216:	d103      	bne.n	800d220 <xQueueGenericSend+0x174>
 800d218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d21a:	2200      	movs	r2, #0
 800d21c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d222:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d226:	b25b      	sxtb	r3, r3
 800d228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d22c:	d103      	bne.n	800d236 <xQueueGenericSend+0x18a>
 800d22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d230:	2200      	movs	r2, #0
 800d232:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d236:	f001 ffc1 	bl	800f1bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d23a:	1d3a      	adds	r2, r7, #4
 800d23c:	f107 0314 	add.w	r3, r7, #20
 800d240:	4611      	mov	r1, r2
 800d242:	4618      	mov	r0, r3
 800d244:	f001 f8d4 	bl	800e3f0 <xTaskCheckForTimeOut>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d124      	bne.n	800d298 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d24e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d250:	f000 fb4c 	bl	800d8ec <prvIsQueueFull>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d018      	beq.n	800d28c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25c:	3310      	adds	r3, #16
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	4611      	mov	r1, r2
 800d262:	4618      	mov	r0, r3
 800d264:	f000 ffd0 	bl	800e208 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d26a:	f000 fad7 	bl	800d81c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d26e:	f000 fe05 	bl	800de7c <xTaskResumeAll>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	f47f af7c 	bne.w	800d172 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d27a:	4b0c      	ldr	r3, [pc, #48]	@ (800d2ac <xQueueGenericSend+0x200>)
 800d27c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d280:	601a      	str	r2, [r3, #0]
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	e772      	b.n	800d172 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d28c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d28e:	f000 fac5 	bl	800d81c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d292:	f000 fdf3 	bl	800de7c <xTaskResumeAll>
 800d296:	e76c      	b.n	800d172 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d298:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d29a:	f000 fabf 	bl	800d81c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d29e:	f000 fded 	bl	800de7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3738      	adds	r7, #56	@ 0x38
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	e000ed04 	.word	0xe000ed04

0800d2b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b090      	sub	sp, #64	@ 0x40
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	607a      	str	r2, [r7, #4]
 800d2bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d10b      	bne.n	800d2e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d2c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2cc:	f383 8811 	msr	BASEPRI, r3
 800d2d0:	f3bf 8f6f 	isb	sy
 800d2d4:	f3bf 8f4f 	dsb	sy
 800d2d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d2da:	bf00      	nop
 800d2dc:	bf00      	nop
 800d2de:	e7fd      	b.n	800d2dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d103      	bne.n	800d2ee <xQueueGenericSendFromISR+0x3e>
 800d2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d101      	bne.n	800d2f2 <xQueueGenericSendFromISR+0x42>
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e000      	b.n	800d2f4 <xQueueGenericSendFromISR+0x44>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d10b      	bne.n	800d310 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d30a:	bf00      	nop
 800d30c:	bf00      	nop
 800d30e:	e7fd      	b.n	800d30c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	2b02      	cmp	r3, #2
 800d314:	d103      	bne.n	800d31e <xQueueGenericSendFromISR+0x6e>
 800d316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d101      	bne.n	800d322 <xQueueGenericSendFromISR+0x72>
 800d31e:	2301      	movs	r3, #1
 800d320:	e000      	b.n	800d324 <xQueueGenericSendFromISR+0x74>
 800d322:	2300      	movs	r3, #0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d10b      	bne.n	800d340 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d32c:	f383 8811 	msr	BASEPRI, r3
 800d330:	f3bf 8f6f 	isb	sy
 800d334:	f3bf 8f4f 	dsb	sy
 800d338:	623b      	str	r3, [r7, #32]
}
 800d33a:	bf00      	nop
 800d33c:	bf00      	nop
 800d33e:	e7fd      	b.n	800d33c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d340:	f001 ffea 	bl	800f318 <vPortValidateInterruptPriority>
	__asm volatile
 800d344:	f3ef 8211 	mrs	r2, BASEPRI
 800d348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d34c:	f383 8811 	msr	BASEPRI, r3
 800d350:	f3bf 8f6f 	isb	sy
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	61fa      	str	r2, [r7, #28]
 800d35a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d35c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d35e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d368:	429a      	cmp	r2, r3
 800d36a:	d302      	bcc.n	800d372 <xQueueGenericSendFromISR+0xc2>
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	2b02      	cmp	r3, #2
 800d370:	d12f      	bne.n	800d3d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d374:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d378:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d37e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d380:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	68b9      	ldr	r1, [r7, #8]
 800d386:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d388:	f000 f9b8 	bl	800d6fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d38c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d390:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d394:	d112      	bne.n	800d3bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d016      	beq.n	800d3cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a0:	3324      	adds	r3, #36	@ 0x24
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f000 ff82 	bl	800e2ac <xTaskRemoveFromEventList>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00e      	beq.n	800d3cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00b      	beq.n	800d3cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	601a      	str	r2, [r3, #0]
 800d3ba:	e007      	b.n	800d3cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d3bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	b25a      	sxtb	r2, r3
 800d3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d3d0:	e001      	b.n	800d3d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d3d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3d8:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	f383 8811 	msr	BASEPRI, r3
}
 800d3e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3740      	adds	r7, #64	@ 0x40
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b08c      	sub	sp, #48	@ 0x30
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d402:	2b00      	cmp	r3, #0
 800d404:	d10b      	bne.n	800d41e <xQueueReceive+0x32>
	__asm volatile
 800d406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d40a:	f383 8811 	msr	BASEPRI, r3
 800d40e:	f3bf 8f6f 	isb	sy
 800d412:	f3bf 8f4f 	dsb	sy
 800d416:	623b      	str	r3, [r7, #32]
}
 800d418:	bf00      	nop
 800d41a:	bf00      	nop
 800d41c:	e7fd      	b.n	800d41a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d103      	bne.n	800d42c <xQueueReceive+0x40>
 800d424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d101      	bne.n	800d430 <xQueueReceive+0x44>
 800d42c:	2301      	movs	r3, #1
 800d42e:	e000      	b.n	800d432 <xQueueReceive+0x46>
 800d430:	2300      	movs	r3, #0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d10b      	bne.n	800d44e <xQueueReceive+0x62>
	__asm volatile
 800d436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	61fb      	str	r3, [r7, #28]
}
 800d448:	bf00      	nop
 800d44a:	bf00      	nop
 800d44c:	e7fd      	b.n	800d44a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d44e:	f001 f915 	bl	800e67c <xTaskGetSchedulerState>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d102      	bne.n	800d45e <xQueueReceive+0x72>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d101      	bne.n	800d462 <xQueueReceive+0x76>
 800d45e:	2301      	movs	r3, #1
 800d460:	e000      	b.n	800d464 <xQueueReceive+0x78>
 800d462:	2300      	movs	r3, #0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10b      	bne.n	800d480 <xQueueReceive+0x94>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	61bb      	str	r3, [r7, #24]
}
 800d47a:	bf00      	nop
 800d47c:	bf00      	nop
 800d47e:	e7fd      	b.n	800d47c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d480:	f001 fe6a 	bl	800f158 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d488:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d01f      	beq.n	800d4d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d490:	68b9      	ldr	r1, [r7, #8]
 800d492:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d494:	f000 f99c 	bl	800d7d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d49a:	1e5a      	subs	r2, r3, #1
 800d49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d49e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4a2:	691b      	ldr	r3, [r3, #16]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00f      	beq.n	800d4c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4aa:	3310      	adds	r3, #16
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f000 fefd 	bl	800e2ac <xTaskRemoveFromEventList>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d007      	beq.n	800d4c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d4b8:	4b3c      	ldr	r3, [pc, #240]	@ (800d5ac <xQueueReceive+0x1c0>)
 800d4ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4be:	601a      	str	r2, [r3, #0]
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d4c8:	f001 fe78 	bl	800f1bc <vPortExitCritical>
				return pdPASS;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e069      	b.n	800d5a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d103      	bne.n	800d4de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d4d6:	f001 fe71 	bl	800f1bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	e062      	b.n	800d5a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d106      	bne.n	800d4f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4e4:	f107 0310 	add.w	r3, r7, #16
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f000 ff6b 	bl	800e3c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4f2:	f001 fe63 	bl	800f1bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4f6:	f000 fcb3 	bl	800de60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4fa:	f001 fe2d 	bl	800f158 <vPortEnterCritical>
 800d4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d504:	b25b      	sxtb	r3, r3
 800d506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d50a:	d103      	bne.n	800d514 <xQueueReceive+0x128>
 800d50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50e:	2200      	movs	r2, #0
 800d510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d516:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d51a:	b25b      	sxtb	r3, r3
 800d51c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d520:	d103      	bne.n	800d52a <xQueueReceive+0x13e>
 800d522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d524:	2200      	movs	r2, #0
 800d526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d52a:	f001 fe47 	bl	800f1bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d52e:	1d3a      	adds	r2, r7, #4
 800d530:	f107 0310 	add.w	r3, r7, #16
 800d534:	4611      	mov	r1, r2
 800d536:	4618      	mov	r0, r3
 800d538:	f000 ff5a 	bl	800e3f0 <xTaskCheckForTimeOut>
 800d53c:	4603      	mov	r3, r0
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d123      	bne.n	800d58a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d544:	f000 f9bc 	bl	800d8c0 <prvIsQueueEmpty>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d017      	beq.n	800d57e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d550:	3324      	adds	r3, #36	@ 0x24
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	4611      	mov	r1, r2
 800d556:	4618      	mov	r0, r3
 800d558:	f000 fe56 	bl	800e208 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d55c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d55e:	f000 f95d 	bl	800d81c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d562:	f000 fc8b 	bl	800de7c <xTaskResumeAll>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d189      	bne.n	800d480 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d56c:	4b0f      	ldr	r3, [pc, #60]	@ (800d5ac <xQueueReceive+0x1c0>)
 800d56e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	f3bf 8f6f 	isb	sy
 800d57c:	e780      	b.n	800d480 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d57e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d580:	f000 f94c 	bl	800d81c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d584:	f000 fc7a 	bl	800de7c <xTaskResumeAll>
 800d588:	e77a      	b.n	800d480 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d58a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d58c:	f000 f946 	bl	800d81c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d590:	f000 fc74 	bl	800de7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d594:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d596:	f000 f993 	bl	800d8c0 <prvIsQueueEmpty>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f43f af6f 	beq.w	800d480 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d5a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3730      	adds	r7, #48	@ 0x30
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	e000ed04 	.word	0xe000ed04

0800d5b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b08e      	sub	sp, #56	@ 0x38
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10b      	bne.n	800d5de <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ca:	f383 8811 	msr	BASEPRI, r3
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	f3bf 8f4f 	dsb	sy
 800d5d6:	623b      	str	r3, [r7, #32]
}
 800d5d8:	bf00      	nop
 800d5da:	bf00      	nop
 800d5dc:	e7fd      	b.n	800d5da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d103      	bne.n	800d5ec <xQueueReceiveFromISR+0x3c>
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d101      	bne.n	800d5f0 <xQueueReceiveFromISR+0x40>
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	e000      	b.n	800d5f2 <xQueueReceiveFromISR+0x42>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d10b      	bne.n	800d60e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5fa:	f383 8811 	msr	BASEPRI, r3
 800d5fe:	f3bf 8f6f 	isb	sy
 800d602:	f3bf 8f4f 	dsb	sy
 800d606:	61fb      	str	r3, [r7, #28]
}
 800d608:	bf00      	nop
 800d60a:	bf00      	nop
 800d60c:	e7fd      	b.n	800d60a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d60e:	f001 fe83 	bl	800f318 <vPortValidateInterruptPriority>
	__asm volatile
 800d612:	f3ef 8211 	mrs	r2, BASEPRI
 800d616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	61ba      	str	r2, [r7, #24]
 800d628:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d62a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d62c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d632:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d636:	2b00      	cmp	r3, #0
 800d638:	d02f      	beq.n	800d69a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d644:	68b9      	ldr	r1, [r7, #8]
 800d646:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d648:	f000 f8c2 	bl	800d7d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64e:	1e5a      	subs	r2, r3, #1
 800d650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d652:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d654:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d65c:	d112      	bne.n	800d684 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d660:	691b      	ldr	r3, [r3, #16]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d016      	beq.n	800d694 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d668:	3310      	adds	r3, #16
 800d66a:	4618      	mov	r0, r3
 800d66c:	f000 fe1e 	bl	800e2ac <xTaskRemoveFromEventList>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00e      	beq.n	800d694 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d00b      	beq.n	800d694 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2201      	movs	r2, #1
 800d680:	601a      	str	r2, [r3, #0]
 800d682:	e007      	b.n	800d694 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d688:	3301      	adds	r3, #1
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	b25a      	sxtb	r2, r3
 800d68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d694:	2301      	movs	r3, #1
 800d696:	637b      	str	r3, [r7, #52]	@ 0x34
 800d698:	e001      	b.n	800d69e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d69a:	2300      	movs	r3, #0
 800d69c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	f383 8811 	msr	BASEPRI, r3
}
 800d6a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3738      	adds	r7, #56	@ 0x38
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b086      	sub	sp, #24
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d10b      	bne.n	800d6de <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800d6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ca:	f383 8811 	msr	BASEPRI, r3
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f3bf 8f4f 	dsb	sy
 800d6d6:	60fb      	str	r3, [r7, #12]
}
 800d6d8:	bf00      	nop
 800d6da:	bf00      	nop
 800d6dc:	e7fd      	b.n	800d6da <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800d6de:	f001 fd3b 	bl	800f158 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6ea:	1ad3      	subs	r3, r2, r3
 800d6ec:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d6ee:	f001 fd65 	bl	800f1bc <vPortExitCritical>

	return uxReturn;
 800d6f2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3718      	adds	r7, #24
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b086      	sub	sp, #24
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d708:	2300      	movs	r3, #0
 800d70a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d710:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10d      	bne.n	800d736 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d14d      	bne.n	800d7be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	689b      	ldr	r3, [r3, #8]
 800d726:	4618      	mov	r0, r3
 800d728:	f000 ffc6 	bl	800e6b8 <xTaskPriorityDisinherit>
 800d72c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2200      	movs	r2, #0
 800d732:	609a      	str	r2, [r3, #8]
 800d734:	e043      	b.n	800d7be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d119      	bne.n	800d770 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6858      	ldr	r0, [r3, #4]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d744:	461a      	mov	r2, r3
 800d746:	68b9      	ldr	r1, [r7, #8]
 800d748:	f00b fd81 	bl	801924e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	685a      	ldr	r2, [r3, #4]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d754:	441a      	add	r2, r3
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	685a      	ldr	r2, [r3, #4]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	429a      	cmp	r2, r3
 800d764:	d32b      	bcc.n	800d7be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	605a      	str	r2, [r3, #4]
 800d76e:	e026      	b.n	800d7be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	68d8      	ldr	r0, [r3, #12]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d778:	461a      	mov	r2, r3
 800d77a:	68b9      	ldr	r1, [r7, #8]
 800d77c:	f00b fd67 	bl	801924e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	68da      	ldr	r2, [r3, #12]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d788:	425b      	negs	r3, r3
 800d78a:	441a      	add	r2, r3
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	68da      	ldr	r2, [r3, #12]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d207      	bcs.n	800d7ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	689a      	ldr	r2, [r3, #8]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7a4:	425b      	negs	r3, r3
 800d7a6:	441a      	add	r2, r3
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2b02      	cmp	r3, #2
 800d7b0:	d105      	bne.n	800d7be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d002      	beq.n	800d7be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	1c5a      	adds	r2, r3, #1
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d7c6:	697b      	ldr	r3, [r7, #20]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3718      	adds	r7, #24
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d018      	beq.n	800d814 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	68da      	ldr	r2, [r3, #12]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7ea:	441a      	add	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	68da      	ldr	r2, [r3, #12]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	689b      	ldr	r3, [r3, #8]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d303      	bcc.n	800d804 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	68d9      	ldr	r1, [r3, #12]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d80c:	461a      	mov	r2, r3
 800d80e:	6838      	ldr	r0, [r7, #0]
 800d810:	f00b fd1d 	bl	801924e <memcpy>
	}
}
 800d814:	bf00      	nop
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d824:	f001 fc98 	bl	800f158 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d82e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d830:	e011      	b.n	800d856 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d836:	2b00      	cmp	r3, #0
 800d838:	d012      	beq.n	800d860 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	3324      	adds	r3, #36	@ 0x24
 800d83e:	4618      	mov	r0, r3
 800d840:	f000 fd34 	bl	800e2ac <xTaskRemoveFromEventList>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d001      	beq.n	800d84e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d84a:	f000 fe35 	bl	800e4b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
 800d850:	3b01      	subs	r3, #1
 800d852:	b2db      	uxtb	r3, r3
 800d854:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	dce9      	bgt.n	800d832 <prvUnlockQueue+0x16>
 800d85e:	e000      	b.n	800d862 <prvUnlockQueue+0x46>
					break;
 800d860:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	22ff      	movs	r2, #255	@ 0xff
 800d866:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d86a:	f001 fca7 	bl	800f1bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d86e:	f001 fc73 	bl	800f158 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d878:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d87a:	e011      	b.n	800d8a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d012      	beq.n	800d8aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	3310      	adds	r3, #16
 800d888:	4618      	mov	r0, r3
 800d88a:	f000 fd0f 	bl	800e2ac <xTaskRemoveFromEventList>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d001      	beq.n	800d898 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d894:	f000 fe10 	bl	800e4b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d898:	7bbb      	ldrb	r3, [r7, #14]
 800d89a:	3b01      	subs	r3, #1
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	dce9      	bgt.n	800d87c <prvUnlockQueue+0x60>
 800d8a8:	e000      	b.n	800d8ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d8aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	22ff      	movs	r2, #255	@ 0xff
 800d8b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d8b4:	f001 fc82 	bl	800f1bc <vPortExitCritical>
}
 800d8b8:	bf00      	nop
 800d8ba:	3710      	adds	r7, #16
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8c8:	f001 fc46 	bl	800f158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d102      	bne.n	800d8da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	60fb      	str	r3, [r7, #12]
 800d8d8:	e001      	b.n	800d8de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8de:	f001 fc6d 	bl	800f1bc <vPortExitCritical>

	return xReturn;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8f4:	f001 fc30 	bl	800f158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d900:	429a      	cmp	r2, r3
 800d902:	d102      	bne.n	800d90a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d904:	2301      	movs	r3, #1
 800d906:	60fb      	str	r3, [r7, #12]
 800d908:	e001      	b.n	800d90e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d90a:	2300      	movs	r3, #0
 800d90c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d90e:	f001 fc55 	bl	800f1bc <vPortExitCritical>

	return xReturn;
 800d912:	68fb      	ldr	r3, [r7, #12]
}
 800d914:	4618      	mov	r0, r3
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d926:	2300      	movs	r3, #0
 800d928:	60fb      	str	r3, [r7, #12]
 800d92a:	e014      	b.n	800d956 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d92c:	4a0f      	ldr	r2, [pc, #60]	@ (800d96c <vQueueAddToRegistry+0x50>)
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d10b      	bne.n	800d950 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d938:	490c      	ldr	r1, [pc, #48]	@ (800d96c <vQueueAddToRegistry+0x50>)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	683a      	ldr	r2, [r7, #0]
 800d93e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d942:	4a0a      	ldr	r2, [pc, #40]	@ (800d96c <vQueueAddToRegistry+0x50>)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	00db      	lsls	r3, r3, #3
 800d948:	4413      	add	r3, r2
 800d94a:	687a      	ldr	r2, [r7, #4]
 800d94c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d94e:	e006      	b.n	800d95e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	3301      	adds	r3, #1
 800d954:	60fb      	str	r3, [r7, #12]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2b07      	cmp	r3, #7
 800d95a:	d9e7      	bls.n	800d92c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d95c:	bf00      	nop
 800d95e:	bf00      	nop
 800d960:	3714      	adds	r7, #20
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	2000332c 	.word	0x2000332c

0800d970 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d970:	b580      	push	{r7, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d980:	f001 fbea 	bl	800f158 <vPortEnterCritical>
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d98a:	b25b      	sxtb	r3, r3
 800d98c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d990:	d103      	bne.n	800d99a <vQueueWaitForMessageRestricted+0x2a>
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	2200      	movs	r2, #0
 800d996:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9a0:	b25b      	sxtb	r3, r3
 800d9a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9a6:	d103      	bne.n	800d9b0 <vQueueWaitForMessageRestricted+0x40>
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9b0:	f001 fc04 	bl	800f1bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d106      	bne.n	800d9ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	3324      	adds	r3, #36	@ 0x24
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	68b9      	ldr	r1, [r7, #8]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f000 fc45 	bl	800e254 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d9ca:	6978      	ldr	r0, [r7, #20]
 800d9cc:	f7ff ff26 	bl	800d81c <prvUnlockQueue>
	}
 800d9d0:	bf00      	nop
 800d9d2:	3718      	adds	r7, #24
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b08e      	sub	sp, #56	@ 0x38
 800d9dc:	af04      	add	r7, sp, #16
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10b      	bne.n	800da04 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9f0:	f383 8811 	msr	BASEPRI, r3
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	623b      	str	r3, [r7, #32]
}
 800d9fe:	bf00      	nop
 800da00:	bf00      	nop
 800da02:	e7fd      	b.n	800da00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800da04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10b      	bne.n	800da22 <xTaskCreateStatic+0x4a>
	__asm volatile
 800da0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	61fb      	str	r3, [r7, #28]
}
 800da1c:	bf00      	nop
 800da1e:	bf00      	nop
 800da20:	e7fd      	b.n	800da1e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800da22:	235c      	movs	r3, #92	@ 0x5c
 800da24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	2b5c      	cmp	r3, #92	@ 0x5c
 800da2a:	d00b      	beq.n	800da44 <xTaskCreateStatic+0x6c>
	__asm volatile
 800da2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da30:	f383 8811 	msr	BASEPRI, r3
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	61bb      	str	r3, [r7, #24]
}
 800da3e:	bf00      	nop
 800da40:	bf00      	nop
 800da42:	e7fd      	b.n	800da40 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800da44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800da46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d01e      	beq.n	800da8a <xTaskCreateStatic+0xb2>
 800da4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d01b      	beq.n	800da8a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da54:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800da56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da5a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800da5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da5e:	2202      	movs	r2, #2
 800da60:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800da64:	2300      	movs	r3, #0
 800da66:	9303      	str	r3, [sp, #12]
 800da68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da6a:	9302      	str	r3, [sp, #8]
 800da6c:	f107 0314 	add.w	r3, r7, #20
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	68b9      	ldr	r1, [r7, #8]
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 f850 	bl	800db22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800da84:	f000 f8de 	bl	800dc44 <prvAddNewTaskToReadyList>
 800da88:	e001      	b.n	800da8e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800da8a:	2300      	movs	r3, #0
 800da8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800da8e:	697b      	ldr	r3, [r7, #20]
	}
 800da90:	4618      	mov	r0, r3
 800da92:	3728      	adds	r7, #40	@ 0x28
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b08c      	sub	sp, #48	@ 0x30
 800da9c:	af04      	add	r7, sp, #16
 800da9e:	60f8      	str	r0, [r7, #12]
 800daa0:	60b9      	str	r1, [r7, #8]
 800daa2:	603b      	str	r3, [r7, #0]
 800daa4:	4613      	mov	r3, r2
 800daa6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800daa8:	88fb      	ldrh	r3, [r7, #6]
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	4618      	mov	r0, r3
 800daae:	f001 fc75 	bl	800f39c <pvPortMalloc>
 800dab2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00e      	beq.n	800dad8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800daba:	205c      	movs	r0, #92	@ 0x5c
 800dabc:	f001 fc6e 	bl	800f39c <pvPortMalloc>
 800dac0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d003      	beq.n	800dad0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	697a      	ldr	r2, [r7, #20]
 800dacc:	631a      	str	r2, [r3, #48]	@ 0x30
 800dace:	e005      	b.n	800dadc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dad0:	6978      	ldr	r0, [r7, #20]
 800dad2:	f001 fd31 	bl	800f538 <vPortFree>
 800dad6:	e001      	b.n	800dadc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dad8:	2300      	movs	r3, #0
 800dada:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d017      	beq.n	800db12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800daea:	88fa      	ldrh	r2, [r7, #6]
 800daec:	2300      	movs	r3, #0
 800daee:	9303      	str	r3, [sp, #12]
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	9302      	str	r3, [sp, #8]
 800daf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf6:	9301      	str	r3, [sp, #4]
 800daf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dafa:	9300      	str	r3, [sp, #0]
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	68b9      	ldr	r1, [r7, #8]
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f000 f80e 	bl	800db22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db06:	69f8      	ldr	r0, [r7, #28]
 800db08:	f000 f89c 	bl	800dc44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db0c:	2301      	movs	r3, #1
 800db0e:	61bb      	str	r3, [r7, #24]
 800db10:	e002      	b.n	800db18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db18:	69bb      	ldr	r3, [r7, #24]
	}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3720      	adds	r7, #32
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}

0800db22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800db22:	b580      	push	{r7, lr}
 800db24:	b088      	sub	sp, #32
 800db26:	af00      	add	r7, sp, #0
 800db28:	60f8      	str	r0, [r7, #12]
 800db2a:	60b9      	str	r1, [r7, #8]
 800db2c:	607a      	str	r2, [r7, #4]
 800db2e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800db30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db32:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	461a      	mov	r2, r3
 800db3a:	21a5      	movs	r1, #165	@ 0xa5
 800db3c:	f00b fabe 	bl	80190bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800db40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db4a:	3b01      	subs	r3, #1
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	4413      	add	r3, r2
 800db50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	f023 0307 	bic.w	r3, r3, #7
 800db58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	f003 0307 	and.w	r3, r3, #7
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00b      	beq.n	800db7c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800db64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	617b      	str	r3, [r7, #20]
}
 800db76:	bf00      	nop
 800db78:	bf00      	nop
 800db7a:	e7fd      	b.n	800db78 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d01f      	beq.n	800dbc2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db82:	2300      	movs	r3, #0
 800db84:	61fb      	str	r3, [r7, #28]
 800db86:	e012      	b.n	800dbae <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db88:	68ba      	ldr	r2, [r7, #8]
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	4413      	add	r3, r2
 800db8e:	7819      	ldrb	r1, [r3, #0]
 800db90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	4413      	add	r3, r2
 800db96:	3334      	adds	r3, #52	@ 0x34
 800db98:	460a      	mov	r2, r1
 800db9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db9c:	68ba      	ldr	r2, [r7, #8]
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	4413      	add	r3, r2
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d006      	beq.n	800dbb6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	61fb      	str	r3, [r7, #28]
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	2b0f      	cmp	r3, #15
 800dbb2:	d9e9      	bls.n	800db88 <prvInitialiseNewTask+0x66>
 800dbb4:	e000      	b.n	800dbb8 <prvInitialiseNewTask+0x96>
			{
				break;
 800dbb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dbc0:	e003      	b.n	800dbca <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbcc:	2b37      	cmp	r3, #55	@ 0x37
 800dbce:	d901      	bls.n	800dbd4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dbd0:	2337      	movs	r3, #55	@ 0x37
 800dbd2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dbd8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dbde:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe8:	3304      	adds	r3, #4
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7ff f884 	bl	800ccf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf2:	3318      	adds	r3, #24
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7ff f87f 	bl	800ccf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc0e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc12:	2200      	movs	r2, #0
 800dc14:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc1e:	683a      	ldr	r2, [r7, #0]
 800dc20:	68f9      	ldr	r1, [r7, #12]
 800dc22:	69b8      	ldr	r0, [r7, #24]
 800dc24:	f001 f966 	bl	800eef4 <pxPortInitialiseStack>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dc2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d002      	beq.n	800dc3a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc3a:	bf00      	nop
 800dc3c:	3720      	adds	r7, #32
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
	...

0800dc44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc4c:	f001 fa84 	bl	800f158 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc50:	4b2d      	ldr	r3, [pc, #180]	@ (800dd08 <prvAddNewTaskToReadyList+0xc4>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	3301      	adds	r3, #1
 800dc56:	4a2c      	ldr	r2, [pc, #176]	@ (800dd08 <prvAddNewTaskToReadyList+0xc4>)
 800dc58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc5a:	4b2c      	ldr	r3, [pc, #176]	@ (800dd0c <prvAddNewTaskToReadyList+0xc8>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d109      	bne.n	800dc76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc62:	4a2a      	ldr	r2, [pc, #168]	@ (800dd0c <prvAddNewTaskToReadyList+0xc8>)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc68:	4b27      	ldr	r3, [pc, #156]	@ (800dd08 <prvAddNewTaskToReadyList+0xc4>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d110      	bne.n	800dc92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc70:	f000 fc46 	bl	800e500 <prvInitialiseTaskLists>
 800dc74:	e00d      	b.n	800dc92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc76:	4b26      	ldr	r3, [pc, #152]	@ (800dd10 <prvAddNewTaskToReadyList+0xcc>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d109      	bne.n	800dc92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc7e:	4b23      	ldr	r3, [pc, #140]	@ (800dd0c <prvAddNewTaskToReadyList+0xc8>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d802      	bhi.n	800dc92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc8c:	4a1f      	ldr	r2, [pc, #124]	@ (800dd0c <prvAddNewTaskToReadyList+0xc8>)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc92:	4b20      	ldr	r3, [pc, #128]	@ (800dd14 <prvAddNewTaskToReadyList+0xd0>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	3301      	adds	r3, #1
 800dc98:	4a1e      	ldr	r2, [pc, #120]	@ (800dd14 <prvAddNewTaskToReadyList+0xd0>)
 800dc9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc9c:	4b1d      	ldr	r3, [pc, #116]	@ (800dd14 <prvAddNewTaskToReadyList+0xd0>)
 800dc9e:	681a      	ldr	r2, [r3, #0]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dca8:	4b1b      	ldr	r3, [pc, #108]	@ (800dd18 <prvAddNewTaskToReadyList+0xd4>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d903      	bls.n	800dcb8 <prvAddNewTaskToReadyList+0x74>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcb4:	4a18      	ldr	r2, [pc, #96]	@ (800dd18 <prvAddNewTaskToReadyList+0xd4>)
 800dcb6:	6013      	str	r3, [r2, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	4413      	add	r3, r2
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	4a15      	ldr	r2, [pc, #84]	@ (800dd1c <prvAddNewTaskToReadyList+0xd8>)
 800dcc6:	441a      	add	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	3304      	adds	r3, #4
 800dccc:	4619      	mov	r1, r3
 800dcce:	4610      	mov	r0, r2
 800dcd0:	f7ff f81f 	bl	800cd12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dcd4:	f001 fa72 	bl	800f1bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dcd8:	4b0d      	ldr	r3, [pc, #52]	@ (800dd10 <prvAddNewTaskToReadyList+0xcc>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d00e      	beq.n	800dcfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dce0:	4b0a      	ldr	r3, [pc, #40]	@ (800dd0c <prvAddNewTaskToReadyList+0xc8>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d207      	bcs.n	800dcfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dcee:	4b0c      	ldr	r3, [pc, #48]	@ (800dd20 <prvAddNewTaskToReadyList+0xdc>)
 800dcf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcf4:	601a      	str	r2, [r3, #0]
 800dcf6:	f3bf 8f4f 	dsb	sy
 800dcfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcfe:	bf00      	nop
 800dd00:	3708      	adds	r7, #8
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	20003840 	.word	0x20003840
 800dd0c:	2000336c 	.word	0x2000336c
 800dd10:	2000384c 	.word	0x2000384c
 800dd14:	2000385c 	.word	0x2000385c
 800dd18:	20003848 	.word	0x20003848
 800dd1c:	20003370 	.word	0x20003370
 800dd20:	e000ed04 	.word	0xe000ed04

0800dd24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d018      	beq.n	800dd68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dd36:	4b14      	ldr	r3, [pc, #80]	@ (800dd88 <vTaskDelay+0x64>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00b      	beq.n	800dd56 <vTaskDelay+0x32>
	__asm volatile
 800dd3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd42:	f383 8811 	msr	BASEPRI, r3
 800dd46:	f3bf 8f6f 	isb	sy
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	60bb      	str	r3, [r7, #8]
}
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
 800dd54:	e7fd      	b.n	800dd52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dd56:	f000 f883 	bl	800de60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 fd1b 	bl	800e798 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd62:	f000 f88b 	bl	800de7c <xTaskResumeAll>
 800dd66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d107      	bne.n	800dd7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dd6e:	4b07      	ldr	r3, [pc, #28]	@ (800dd8c <vTaskDelay+0x68>)
 800dd70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd74:	601a      	str	r2, [r3, #0]
 800dd76:	f3bf 8f4f 	dsb	sy
 800dd7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd7e:	bf00      	nop
 800dd80:	3710      	adds	r7, #16
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop
 800dd88:	20003868 	.word	0x20003868
 800dd8c:	e000ed04 	.word	0xe000ed04

0800dd90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b08a      	sub	sp, #40	@ 0x28
 800dd94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd96:	2300      	movs	r3, #0
 800dd98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd9e:	463a      	mov	r2, r7
 800dda0:	1d39      	adds	r1, r7, #4
 800dda2:	f107 0308 	add.w	r3, r7, #8
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fe ff52 	bl	800cc50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ddac:	6839      	ldr	r1, [r7, #0]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	68ba      	ldr	r2, [r7, #8]
 800ddb2:	9202      	str	r2, [sp, #8]
 800ddb4:	9301      	str	r3, [sp, #4]
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	2300      	movs	r3, #0
 800ddbc:	460a      	mov	r2, r1
 800ddbe:	4922      	ldr	r1, [pc, #136]	@ (800de48 <vTaskStartScheduler+0xb8>)
 800ddc0:	4822      	ldr	r0, [pc, #136]	@ (800de4c <vTaskStartScheduler+0xbc>)
 800ddc2:	f7ff fe09 	bl	800d9d8 <xTaskCreateStatic>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	4a21      	ldr	r2, [pc, #132]	@ (800de50 <vTaskStartScheduler+0xc0>)
 800ddca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ddcc:	4b20      	ldr	r3, [pc, #128]	@ (800de50 <vTaskStartScheduler+0xc0>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d002      	beq.n	800ddda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	617b      	str	r3, [r7, #20]
 800ddd8:	e001      	b.n	800ddde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ddda:	2300      	movs	r3, #0
 800dddc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d102      	bne.n	800ddea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dde4:	f000 fd2c 	bl	800e840 <xTimerCreateTimerTask>
 800dde8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d116      	bne.n	800de1e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ddf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	613b      	str	r3, [r7, #16]
}
 800de02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de04:	4b13      	ldr	r3, [pc, #76]	@ (800de54 <vTaskStartScheduler+0xc4>)
 800de06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800de0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de0c:	4b12      	ldr	r3, [pc, #72]	@ (800de58 <vTaskStartScheduler+0xc8>)
 800de0e:	2201      	movs	r2, #1
 800de10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de12:	4b12      	ldr	r3, [pc, #72]	@ (800de5c <vTaskStartScheduler+0xcc>)
 800de14:	2200      	movs	r2, #0
 800de16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de18:	f001 f8fa 	bl	800f010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de1c:	e00f      	b.n	800de3e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de24:	d10b      	bne.n	800de3e <vTaskStartScheduler+0xae>
	__asm volatile
 800de26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de2a:	f383 8811 	msr	BASEPRI, r3
 800de2e:	f3bf 8f6f 	isb	sy
 800de32:	f3bf 8f4f 	dsb	sy
 800de36:	60fb      	str	r3, [r7, #12]
}
 800de38:	bf00      	nop
 800de3a:	bf00      	nop
 800de3c:	e7fd      	b.n	800de3a <vTaskStartScheduler+0xaa>
}
 800de3e:	bf00      	nop
 800de40:	3718      	adds	r7, #24
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	0801a078 	.word	0x0801a078
 800de4c:	0800e4d1 	.word	0x0800e4d1
 800de50:	20003864 	.word	0x20003864
 800de54:	20003860 	.word	0x20003860
 800de58:	2000384c 	.word	0x2000384c
 800de5c:	20003844 	.word	0x20003844

0800de60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de60:	b480      	push	{r7}
 800de62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de64:	4b04      	ldr	r3, [pc, #16]	@ (800de78 <vTaskSuspendAll+0x18>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	3301      	adds	r3, #1
 800de6a:	4a03      	ldr	r2, [pc, #12]	@ (800de78 <vTaskSuspendAll+0x18>)
 800de6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de6e:	bf00      	nop
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr
 800de78:	20003868 	.word	0x20003868

0800de7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de82:	2300      	movs	r3, #0
 800de84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de86:	2300      	movs	r3, #0
 800de88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de8a:	4b42      	ldr	r3, [pc, #264]	@ (800df94 <xTaskResumeAll+0x118>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10b      	bne.n	800deaa <xTaskResumeAll+0x2e>
	__asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de96:	f383 8811 	msr	BASEPRI, r3
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	603b      	str	r3, [r7, #0]
}
 800dea4:	bf00      	nop
 800dea6:	bf00      	nop
 800dea8:	e7fd      	b.n	800dea6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800deaa:	f001 f955 	bl	800f158 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800deae:	4b39      	ldr	r3, [pc, #228]	@ (800df94 <xTaskResumeAll+0x118>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	3b01      	subs	r3, #1
 800deb4:	4a37      	ldr	r2, [pc, #220]	@ (800df94 <xTaskResumeAll+0x118>)
 800deb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deb8:	4b36      	ldr	r3, [pc, #216]	@ (800df94 <xTaskResumeAll+0x118>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d162      	bne.n	800df86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dec0:	4b35      	ldr	r3, [pc, #212]	@ (800df98 <xTaskResumeAll+0x11c>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d05e      	beq.n	800df86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dec8:	e02f      	b.n	800df2a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deca:	4b34      	ldr	r3, [pc, #208]	@ (800df9c <xTaskResumeAll+0x120>)
 800decc:	68db      	ldr	r3, [r3, #12]
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	3318      	adds	r3, #24
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fe ff78 	bl	800cdcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	3304      	adds	r3, #4
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7fe ff73 	bl	800cdcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deea:	4b2d      	ldr	r3, [pc, #180]	@ (800dfa0 <xTaskResumeAll+0x124>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	429a      	cmp	r2, r3
 800def0:	d903      	bls.n	800defa <xTaskResumeAll+0x7e>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800def6:	4a2a      	ldr	r2, [pc, #168]	@ (800dfa0 <xTaskResumeAll+0x124>)
 800def8:	6013      	str	r3, [r2, #0]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800defe:	4613      	mov	r3, r2
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	4413      	add	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	4a27      	ldr	r2, [pc, #156]	@ (800dfa4 <xTaskResumeAll+0x128>)
 800df08:	441a      	add	r2, r3
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	3304      	adds	r3, #4
 800df0e:	4619      	mov	r1, r3
 800df10:	4610      	mov	r0, r2
 800df12:	f7fe fefe 	bl	800cd12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df1a:	4b23      	ldr	r3, [pc, #140]	@ (800dfa8 <xTaskResumeAll+0x12c>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df20:	429a      	cmp	r2, r3
 800df22:	d302      	bcc.n	800df2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800df24:	4b21      	ldr	r3, [pc, #132]	@ (800dfac <xTaskResumeAll+0x130>)
 800df26:	2201      	movs	r2, #1
 800df28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df2a:	4b1c      	ldr	r3, [pc, #112]	@ (800df9c <xTaskResumeAll+0x120>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1cb      	bne.n	800deca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df38:	f000 fb80 	bl	800e63c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800df3c:	4b1c      	ldr	r3, [pc, #112]	@ (800dfb0 <xTaskResumeAll+0x134>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d010      	beq.n	800df6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df48:	f000 f846 	bl	800dfd8 <xTaskIncrementTick>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800df52:	4b16      	ldr	r3, [pc, #88]	@ (800dfac <xTaskResumeAll+0x130>)
 800df54:	2201      	movs	r2, #1
 800df56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	3b01      	subs	r3, #1
 800df5c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d1f1      	bne.n	800df48 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800df64:	4b12      	ldr	r3, [pc, #72]	@ (800dfb0 <xTaskResumeAll+0x134>)
 800df66:	2200      	movs	r2, #0
 800df68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df6a:	4b10      	ldr	r3, [pc, #64]	@ (800dfac <xTaskResumeAll+0x130>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d009      	beq.n	800df86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df72:	2301      	movs	r3, #1
 800df74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df76:	4b0f      	ldr	r3, [pc, #60]	@ (800dfb4 <xTaskResumeAll+0x138>)
 800df78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df7c:	601a      	str	r2, [r3, #0]
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df86:	f001 f919 	bl	800f1bc <vPortExitCritical>

	return xAlreadyYielded;
 800df8a:	68bb      	ldr	r3, [r7, #8]
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3710      	adds	r7, #16
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	20003868 	.word	0x20003868
 800df98:	20003840 	.word	0x20003840
 800df9c:	20003800 	.word	0x20003800
 800dfa0:	20003848 	.word	0x20003848
 800dfa4:	20003370 	.word	0x20003370
 800dfa8:	2000336c 	.word	0x2000336c
 800dfac:	20003854 	.word	0x20003854
 800dfb0:	20003850 	.word	0x20003850
 800dfb4:	e000ed04 	.word	0xe000ed04

0800dfb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dfbe:	4b05      	ldr	r3, [pc, #20]	@ (800dfd4 <xTaskGetTickCount+0x1c>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dfc4:	687b      	ldr	r3, [r7, #4]
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	370c      	adds	r7, #12
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	20003844 	.word	0x20003844

0800dfd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b086      	sub	sp, #24
 800dfdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfe2:	4b4f      	ldr	r3, [pc, #316]	@ (800e120 <xTaskIncrementTick+0x148>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	f040 8090 	bne.w	800e10c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dfec:	4b4d      	ldr	r3, [pc, #308]	@ (800e124 <xTaskIncrementTick+0x14c>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	3301      	adds	r3, #1
 800dff2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dff4:	4a4b      	ldr	r2, [pc, #300]	@ (800e124 <xTaskIncrementTick+0x14c>)
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d121      	bne.n	800e044 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e000:	4b49      	ldr	r3, [pc, #292]	@ (800e128 <xTaskIncrementTick+0x150>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d00b      	beq.n	800e022 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e00e:	f383 8811 	msr	BASEPRI, r3
 800e012:	f3bf 8f6f 	isb	sy
 800e016:	f3bf 8f4f 	dsb	sy
 800e01a:	603b      	str	r3, [r7, #0]
}
 800e01c:	bf00      	nop
 800e01e:	bf00      	nop
 800e020:	e7fd      	b.n	800e01e <xTaskIncrementTick+0x46>
 800e022:	4b41      	ldr	r3, [pc, #260]	@ (800e128 <xTaskIncrementTick+0x150>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	60fb      	str	r3, [r7, #12]
 800e028:	4b40      	ldr	r3, [pc, #256]	@ (800e12c <xTaskIncrementTick+0x154>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a3e      	ldr	r2, [pc, #248]	@ (800e128 <xTaskIncrementTick+0x150>)
 800e02e:	6013      	str	r3, [r2, #0]
 800e030:	4a3e      	ldr	r2, [pc, #248]	@ (800e12c <xTaskIncrementTick+0x154>)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	6013      	str	r3, [r2, #0]
 800e036:	4b3e      	ldr	r3, [pc, #248]	@ (800e130 <xTaskIncrementTick+0x158>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	3301      	adds	r3, #1
 800e03c:	4a3c      	ldr	r2, [pc, #240]	@ (800e130 <xTaskIncrementTick+0x158>)
 800e03e:	6013      	str	r3, [r2, #0]
 800e040:	f000 fafc 	bl	800e63c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e044:	4b3b      	ldr	r3, [pc, #236]	@ (800e134 <xTaskIncrementTick+0x15c>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	693a      	ldr	r2, [r7, #16]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d349      	bcc.n	800e0e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e04e:	4b36      	ldr	r3, [pc, #216]	@ (800e128 <xTaskIncrementTick+0x150>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d104      	bne.n	800e062 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e058:	4b36      	ldr	r3, [pc, #216]	@ (800e134 <xTaskIncrementTick+0x15c>)
 800e05a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e05e:	601a      	str	r2, [r3, #0]
					break;
 800e060:	e03f      	b.n	800e0e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e062:	4b31      	ldr	r3, [pc, #196]	@ (800e128 <xTaskIncrementTick+0x150>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e072:	693a      	ldr	r2, [r7, #16]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	429a      	cmp	r2, r3
 800e078:	d203      	bcs.n	800e082 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e07a:	4a2e      	ldr	r2, [pc, #184]	@ (800e134 <xTaskIncrementTick+0x15c>)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e080:	e02f      	b.n	800e0e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	3304      	adds	r3, #4
 800e086:	4618      	mov	r0, r3
 800e088:	f7fe fea0 	bl	800cdcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e090:	2b00      	cmp	r3, #0
 800e092:	d004      	beq.n	800e09e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	3318      	adds	r3, #24
 800e098:	4618      	mov	r0, r3
 800e09a:	f7fe fe97 	bl	800cdcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0a2:	4b25      	ldr	r3, [pc, #148]	@ (800e138 <xTaskIncrementTick+0x160>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d903      	bls.n	800e0b2 <xTaskIncrementTick+0xda>
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ae:	4a22      	ldr	r2, [pc, #136]	@ (800e138 <xTaskIncrementTick+0x160>)
 800e0b0:	6013      	str	r3, [r2, #0]
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	4413      	add	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4a1f      	ldr	r2, [pc, #124]	@ (800e13c <xTaskIncrementTick+0x164>)
 800e0c0:	441a      	add	r2, r3
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	3304      	adds	r3, #4
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	4610      	mov	r0, r2
 800e0ca:	f7fe fe22 	bl	800cd12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0d2:	4b1b      	ldr	r3, [pc, #108]	@ (800e140 <xTaskIncrementTick+0x168>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d3b8      	bcc.n	800e04e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0e0:	e7b5      	b.n	800e04e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e0e2:	4b17      	ldr	r3, [pc, #92]	@ (800e140 <xTaskIncrementTick+0x168>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0e8:	4914      	ldr	r1, [pc, #80]	@ (800e13c <xTaskIncrementTick+0x164>)
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	4413      	add	r3, r2
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	440b      	add	r3, r1
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d901      	bls.n	800e0fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e0fe:	4b11      	ldr	r3, [pc, #68]	@ (800e144 <xTaskIncrementTick+0x16c>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d007      	beq.n	800e116 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e106:	2301      	movs	r3, #1
 800e108:	617b      	str	r3, [r7, #20]
 800e10a:	e004      	b.n	800e116 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e10c:	4b0e      	ldr	r3, [pc, #56]	@ (800e148 <xTaskIncrementTick+0x170>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	3301      	adds	r3, #1
 800e112:	4a0d      	ldr	r2, [pc, #52]	@ (800e148 <xTaskIncrementTick+0x170>)
 800e114:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e116:	697b      	ldr	r3, [r7, #20]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3718      	adds	r7, #24
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	20003868 	.word	0x20003868
 800e124:	20003844 	.word	0x20003844
 800e128:	200037f8 	.word	0x200037f8
 800e12c:	200037fc 	.word	0x200037fc
 800e130:	20003858 	.word	0x20003858
 800e134:	20003860 	.word	0x20003860
 800e138:	20003848 	.word	0x20003848
 800e13c:	20003370 	.word	0x20003370
 800e140:	2000336c 	.word	0x2000336c
 800e144:	20003854 	.word	0x20003854
 800e148:	20003850 	.word	0x20003850

0800e14c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e152:	4b28      	ldr	r3, [pc, #160]	@ (800e1f4 <vTaskSwitchContext+0xa8>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d003      	beq.n	800e162 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e15a:	4b27      	ldr	r3, [pc, #156]	@ (800e1f8 <vTaskSwitchContext+0xac>)
 800e15c:	2201      	movs	r2, #1
 800e15e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e160:	e042      	b.n	800e1e8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e162:	4b25      	ldr	r3, [pc, #148]	@ (800e1f8 <vTaskSwitchContext+0xac>)
 800e164:	2200      	movs	r2, #0
 800e166:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e168:	4b24      	ldr	r3, [pc, #144]	@ (800e1fc <vTaskSwitchContext+0xb0>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	60fb      	str	r3, [r7, #12]
 800e16e:	e011      	b.n	800e194 <vTaskSwitchContext+0x48>
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d10b      	bne.n	800e18e <vTaskSwitchContext+0x42>
	__asm volatile
 800e176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e17a:	f383 8811 	msr	BASEPRI, r3
 800e17e:	f3bf 8f6f 	isb	sy
 800e182:	f3bf 8f4f 	dsb	sy
 800e186:	607b      	str	r3, [r7, #4]
}
 800e188:	bf00      	nop
 800e18a:	bf00      	nop
 800e18c:	e7fd      	b.n	800e18a <vTaskSwitchContext+0x3e>
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	3b01      	subs	r3, #1
 800e192:	60fb      	str	r3, [r7, #12]
 800e194:	491a      	ldr	r1, [pc, #104]	@ (800e200 <vTaskSwitchContext+0xb4>)
 800e196:	68fa      	ldr	r2, [r7, #12]
 800e198:	4613      	mov	r3, r2
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	4413      	add	r3, r2
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	440b      	add	r3, r1
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d0e3      	beq.n	800e170 <vTaskSwitchContext+0x24>
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	4413      	add	r3, r2
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4a13      	ldr	r2, [pc, #76]	@ (800e200 <vTaskSwitchContext+0xb4>)
 800e1b4:	4413      	add	r3, r2
 800e1b6:	60bb      	str	r3, [r7, #8]
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	685a      	ldr	r2, [r3, #4]
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	605a      	str	r2, [r3, #4]
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	685a      	ldr	r2, [r3, #4]
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	3308      	adds	r3, #8
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d104      	bne.n	800e1d8 <vTaskSwitchContext+0x8c>
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	685a      	ldr	r2, [r3, #4]
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	605a      	str	r2, [r3, #4]
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	4a09      	ldr	r2, [pc, #36]	@ (800e204 <vTaskSwitchContext+0xb8>)
 800e1e0:	6013      	str	r3, [r2, #0]
 800e1e2:	4a06      	ldr	r2, [pc, #24]	@ (800e1fc <vTaskSwitchContext+0xb0>)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	6013      	str	r3, [r2, #0]
}
 800e1e8:	bf00      	nop
 800e1ea:	3714      	adds	r7, #20
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr
 800e1f4:	20003868 	.word	0x20003868
 800e1f8:	20003854 	.word	0x20003854
 800e1fc:	20003848 	.word	0x20003848
 800e200:	20003370 	.word	0x20003370
 800e204:	2000336c 	.word	0x2000336c

0800e208 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d10b      	bne.n	800e230 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e21c:	f383 8811 	msr	BASEPRI, r3
 800e220:	f3bf 8f6f 	isb	sy
 800e224:	f3bf 8f4f 	dsb	sy
 800e228:	60fb      	str	r3, [r7, #12]
}
 800e22a:	bf00      	nop
 800e22c:	bf00      	nop
 800e22e:	e7fd      	b.n	800e22c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e230:	4b07      	ldr	r3, [pc, #28]	@ (800e250 <vTaskPlaceOnEventList+0x48>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	3318      	adds	r3, #24
 800e236:	4619      	mov	r1, r3
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f7fe fd8e 	bl	800cd5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e23e:	2101      	movs	r1, #1
 800e240:	6838      	ldr	r0, [r7, #0]
 800e242:	f000 faa9 	bl	800e798 <prvAddCurrentTaskToDelayedList>
}
 800e246:	bf00      	nop
 800e248:	3710      	adds	r7, #16
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	2000336c 	.word	0x2000336c

0800e254 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	60b9      	str	r1, [r7, #8]
 800e25e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d10b      	bne.n	800e27e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e26a:	f383 8811 	msr	BASEPRI, r3
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	f3bf 8f4f 	dsb	sy
 800e276:	617b      	str	r3, [r7, #20]
}
 800e278:	bf00      	nop
 800e27a:	bf00      	nop
 800e27c:	e7fd      	b.n	800e27a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e27e:	4b0a      	ldr	r3, [pc, #40]	@ (800e2a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	3318      	adds	r3, #24
 800e284:	4619      	mov	r1, r3
 800e286:	68f8      	ldr	r0, [r7, #12]
 800e288:	f7fe fd43 	bl	800cd12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d002      	beq.n	800e298 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e292:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e296:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e298:	6879      	ldr	r1, [r7, #4]
 800e29a:	68b8      	ldr	r0, [r7, #8]
 800e29c:	f000 fa7c 	bl	800e798 <prvAddCurrentTaskToDelayedList>
	}
 800e2a0:	bf00      	nop
 800e2a2:	3718      	adds	r7, #24
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	2000336c 	.word	0x2000336c

0800e2ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	68db      	ldr	r3, [r3, #12]
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d10b      	bne.n	800e2da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c6:	f383 8811 	msr	BASEPRI, r3
 800e2ca:	f3bf 8f6f 	isb	sy
 800e2ce:	f3bf 8f4f 	dsb	sy
 800e2d2:	60fb      	str	r3, [r7, #12]
}
 800e2d4:	bf00      	nop
 800e2d6:	bf00      	nop
 800e2d8:	e7fd      	b.n	800e2d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	3318      	adds	r3, #24
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7fe fd74 	bl	800cdcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2e4:	4b1d      	ldr	r3, [pc, #116]	@ (800e35c <xTaskRemoveFromEventList+0xb0>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d11d      	bne.n	800e328 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	3304      	adds	r3, #4
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fe fd6b 	bl	800cdcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2fa:	4b19      	ldr	r3, [pc, #100]	@ (800e360 <xTaskRemoveFromEventList+0xb4>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d903      	bls.n	800e30a <xTaskRemoveFromEventList+0x5e>
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e306:	4a16      	ldr	r2, [pc, #88]	@ (800e360 <xTaskRemoveFromEventList+0xb4>)
 800e308:	6013      	str	r3, [r2, #0]
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e30e:	4613      	mov	r3, r2
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	4413      	add	r3, r2
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	4a13      	ldr	r2, [pc, #76]	@ (800e364 <xTaskRemoveFromEventList+0xb8>)
 800e318:	441a      	add	r2, r3
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	3304      	adds	r3, #4
 800e31e:	4619      	mov	r1, r3
 800e320:	4610      	mov	r0, r2
 800e322:	f7fe fcf6 	bl	800cd12 <vListInsertEnd>
 800e326:	e005      	b.n	800e334 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	3318      	adds	r3, #24
 800e32c:	4619      	mov	r1, r3
 800e32e:	480e      	ldr	r0, [pc, #56]	@ (800e368 <xTaskRemoveFromEventList+0xbc>)
 800e330:	f7fe fcef 	bl	800cd12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e338:	4b0c      	ldr	r3, [pc, #48]	@ (800e36c <xTaskRemoveFromEventList+0xc0>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e33e:	429a      	cmp	r2, r3
 800e340:	d905      	bls.n	800e34e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e342:	2301      	movs	r3, #1
 800e344:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e346:	4b0a      	ldr	r3, [pc, #40]	@ (800e370 <xTaskRemoveFromEventList+0xc4>)
 800e348:	2201      	movs	r2, #1
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	e001      	b.n	800e352 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e34e:	2300      	movs	r3, #0
 800e350:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e352:	697b      	ldr	r3, [r7, #20]
}
 800e354:	4618      	mov	r0, r3
 800e356:	3718      	adds	r7, #24
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	20003868 	.word	0x20003868
 800e360:	20003848 	.word	0x20003848
 800e364:	20003370 	.word	0x20003370
 800e368:	20003800 	.word	0x20003800
 800e36c:	2000336c 	.word	0x2000336c
 800e370:	20003854 	.word	0x20003854

0800e374 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d10b      	bne.n	800e39a <vTaskSetTimeOutState+0x26>
	__asm volatile
 800e382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e386:	f383 8811 	msr	BASEPRI, r3
 800e38a:	f3bf 8f6f 	isb	sy
 800e38e:	f3bf 8f4f 	dsb	sy
 800e392:	60fb      	str	r3, [r7, #12]
}
 800e394:	bf00      	nop
 800e396:	bf00      	nop
 800e398:	e7fd      	b.n	800e396 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800e39a:	f000 fedd 	bl	800f158 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e39e:	4b07      	ldr	r3, [pc, #28]	@ (800e3bc <vTaskSetTimeOutState+0x48>)
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800e3a6:	4b06      	ldr	r3, [pc, #24]	@ (800e3c0 <vTaskSetTimeOutState+0x4c>)
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800e3ae:	f000 ff05 	bl	800f1bc <vPortExitCritical>
}
 800e3b2:	bf00      	nop
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	20003858 	.word	0x20003858
 800e3c0:	20003844 	.word	0x20003844

0800e3c4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e3cc:	4b06      	ldr	r3, [pc, #24]	@ (800e3e8 <vTaskInternalSetTimeOutState+0x24>)
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e3d4:	4b05      	ldr	r3, [pc, #20]	@ (800e3ec <vTaskInternalSetTimeOutState+0x28>)
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	605a      	str	r2, [r3, #4]
}
 800e3dc:	bf00      	nop
 800e3de:	370c      	adds	r7, #12
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr
 800e3e8:	20003858 	.word	0x20003858
 800e3ec:	20003844 	.word	0x20003844

0800e3f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b088      	sub	sp, #32
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d10b      	bne.n	800e418 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	613b      	str	r3, [r7, #16]
}
 800e412:	bf00      	nop
 800e414:	bf00      	nop
 800e416:	e7fd      	b.n	800e414 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d10b      	bne.n	800e436 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e422:	f383 8811 	msr	BASEPRI, r3
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f3bf 8f4f 	dsb	sy
 800e42e:	60fb      	str	r3, [r7, #12]
}
 800e430:	bf00      	nop
 800e432:	bf00      	nop
 800e434:	e7fd      	b.n	800e432 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e436:	f000 fe8f 	bl	800f158 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e43a:	4b1d      	ldr	r3, [pc, #116]	@ (800e4b0 <xTaskCheckForTimeOut+0xc0>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	69ba      	ldr	r2, [r7, #24]
 800e446:	1ad3      	subs	r3, r2, r3
 800e448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e452:	d102      	bne.n	800e45a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e454:	2300      	movs	r3, #0
 800e456:	61fb      	str	r3, [r7, #28]
 800e458:	e023      	b.n	800e4a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	4b15      	ldr	r3, [pc, #84]	@ (800e4b4 <xTaskCheckForTimeOut+0xc4>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	429a      	cmp	r2, r3
 800e464:	d007      	beq.n	800e476 <xTaskCheckForTimeOut+0x86>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	69ba      	ldr	r2, [r7, #24]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d302      	bcc.n	800e476 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e470:	2301      	movs	r3, #1
 800e472:	61fb      	str	r3, [r7, #28]
 800e474:	e015      	b.n	800e4a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	697a      	ldr	r2, [r7, #20]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d20b      	bcs.n	800e498 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	1ad2      	subs	r2, r2, r3
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f7ff ff99 	bl	800e3c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e492:	2300      	movs	r3, #0
 800e494:	61fb      	str	r3, [r7, #28]
 800e496:	e004      	b.n	800e4a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	2200      	movs	r2, #0
 800e49c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e4a2:	f000 fe8b 	bl	800f1bc <vPortExitCritical>

	return xReturn;
 800e4a6:	69fb      	ldr	r3, [r7, #28]
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3720      	adds	r7, #32
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	20003844 	.word	0x20003844
 800e4b4:	20003858 	.word	0x20003858

0800e4b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e4bc:	4b03      	ldr	r3, [pc, #12]	@ (800e4cc <vTaskMissedYield+0x14>)
 800e4be:	2201      	movs	r2, #1
 800e4c0:	601a      	str	r2, [r3, #0]
}
 800e4c2:	bf00      	nop
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr
 800e4cc:	20003854 	.word	0x20003854

0800e4d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e4d8:	f000 f852 	bl	800e580 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e4dc:	4b06      	ldr	r3, [pc, #24]	@ (800e4f8 <prvIdleTask+0x28>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	d9f9      	bls.n	800e4d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e4e4:	4b05      	ldr	r3, [pc, #20]	@ (800e4fc <prvIdleTask+0x2c>)
 800e4e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4ea:	601a      	str	r2, [r3, #0]
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e4f4:	e7f0      	b.n	800e4d8 <prvIdleTask+0x8>
 800e4f6:	bf00      	nop
 800e4f8:	20003370 	.word	0x20003370
 800e4fc:	e000ed04 	.word	0xe000ed04

0800e500 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e506:	2300      	movs	r3, #0
 800e508:	607b      	str	r3, [r7, #4]
 800e50a:	e00c      	b.n	800e526 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	4613      	mov	r3, r2
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	4413      	add	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	4a12      	ldr	r2, [pc, #72]	@ (800e560 <prvInitialiseTaskLists+0x60>)
 800e518:	4413      	add	r3, r2
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fe fbcc 	bl	800ccb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	3301      	adds	r3, #1
 800e524:	607b      	str	r3, [r7, #4]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2b37      	cmp	r3, #55	@ 0x37
 800e52a:	d9ef      	bls.n	800e50c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e52c:	480d      	ldr	r0, [pc, #52]	@ (800e564 <prvInitialiseTaskLists+0x64>)
 800e52e:	f7fe fbc3 	bl	800ccb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e532:	480d      	ldr	r0, [pc, #52]	@ (800e568 <prvInitialiseTaskLists+0x68>)
 800e534:	f7fe fbc0 	bl	800ccb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e538:	480c      	ldr	r0, [pc, #48]	@ (800e56c <prvInitialiseTaskLists+0x6c>)
 800e53a:	f7fe fbbd 	bl	800ccb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e53e:	480c      	ldr	r0, [pc, #48]	@ (800e570 <prvInitialiseTaskLists+0x70>)
 800e540:	f7fe fbba 	bl	800ccb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e544:	480b      	ldr	r0, [pc, #44]	@ (800e574 <prvInitialiseTaskLists+0x74>)
 800e546:	f7fe fbb7 	bl	800ccb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e54a:	4b0b      	ldr	r3, [pc, #44]	@ (800e578 <prvInitialiseTaskLists+0x78>)
 800e54c:	4a05      	ldr	r2, [pc, #20]	@ (800e564 <prvInitialiseTaskLists+0x64>)
 800e54e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e550:	4b0a      	ldr	r3, [pc, #40]	@ (800e57c <prvInitialiseTaskLists+0x7c>)
 800e552:	4a05      	ldr	r2, [pc, #20]	@ (800e568 <prvInitialiseTaskLists+0x68>)
 800e554:	601a      	str	r2, [r3, #0]
}
 800e556:	bf00      	nop
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	20003370 	.word	0x20003370
 800e564:	200037d0 	.word	0x200037d0
 800e568:	200037e4 	.word	0x200037e4
 800e56c:	20003800 	.word	0x20003800
 800e570:	20003814 	.word	0x20003814
 800e574:	2000382c 	.word	0x2000382c
 800e578:	200037f8 	.word	0x200037f8
 800e57c:	200037fc 	.word	0x200037fc

0800e580 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e586:	e019      	b.n	800e5bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e588:	f000 fde6 	bl	800f158 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e58c:	4b10      	ldr	r3, [pc, #64]	@ (800e5d0 <prvCheckTasksWaitingTermination+0x50>)
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	3304      	adds	r3, #4
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fe fc17 	bl	800cdcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e59e:	4b0d      	ldr	r3, [pc, #52]	@ (800e5d4 <prvCheckTasksWaitingTermination+0x54>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	3b01      	subs	r3, #1
 800e5a4:	4a0b      	ldr	r2, [pc, #44]	@ (800e5d4 <prvCheckTasksWaitingTermination+0x54>)
 800e5a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e5a8:	4b0b      	ldr	r3, [pc, #44]	@ (800e5d8 <prvCheckTasksWaitingTermination+0x58>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	4a0a      	ldr	r2, [pc, #40]	@ (800e5d8 <prvCheckTasksWaitingTermination+0x58>)
 800e5b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e5b2:	f000 fe03 	bl	800f1bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f000 f810 	bl	800e5dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5bc:	4b06      	ldr	r3, [pc, #24]	@ (800e5d8 <prvCheckTasksWaitingTermination+0x58>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1e1      	bne.n	800e588 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e5c4:	bf00      	nop
 800e5c6:	bf00      	nop
 800e5c8:	3708      	adds	r7, #8
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	20003814 	.word	0x20003814
 800e5d4:	20003840 	.word	0x20003840
 800e5d8:	20003828 	.word	0x20003828

0800e5dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d108      	bne.n	800e600 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f000 ffa0 	bl	800f538 <vPortFree>
				vPortFree( pxTCB );
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f000 ff9d 	bl	800f538 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e5fe:	e019      	b.n	800e634 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e606:	2b01      	cmp	r3, #1
 800e608:	d103      	bne.n	800e612 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 ff94 	bl	800f538 <vPortFree>
	}
 800e610:	e010      	b.n	800e634 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e618:	2b02      	cmp	r3, #2
 800e61a:	d00b      	beq.n	800e634 <prvDeleteTCB+0x58>
	__asm volatile
 800e61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e620:	f383 8811 	msr	BASEPRI, r3
 800e624:	f3bf 8f6f 	isb	sy
 800e628:	f3bf 8f4f 	dsb	sy
 800e62c:	60fb      	str	r3, [r7, #12]
}
 800e62e:	bf00      	nop
 800e630:	bf00      	nop
 800e632:	e7fd      	b.n	800e630 <prvDeleteTCB+0x54>
	}
 800e634:	bf00      	nop
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e642:	4b0c      	ldr	r3, [pc, #48]	@ (800e674 <prvResetNextTaskUnblockTime+0x38>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d104      	bne.n	800e656 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e64c:	4b0a      	ldr	r3, [pc, #40]	@ (800e678 <prvResetNextTaskUnblockTime+0x3c>)
 800e64e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e652:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e654:	e008      	b.n	800e668 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e656:	4b07      	ldr	r3, [pc, #28]	@ (800e674 <prvResetNextTaskUnblockTime+0x38>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	68db      	ldr	r3, [r3, #12]
 800e65e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	4a04      	ldr	r2, [pc, #16]	@ (800e678 <prvResetNextTaskUnblockTime+0x3c>)
 800e666:	6013      	str	r3, [r2, #0]
}
 800e668:	bf00      	nop
 800e66a:	370c      	adds	r7, #12
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr
 800e674:	200037f8 	.word	0x200037f8
 800e678:	20003860 	.word	0x20003860

0800e67c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e682:	4b0b      	ldr	r3, [pc, #44]	@ (800e6b0 <xTaskGetSchedulerState+0x34>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d102      	bne.n	800e690 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e68a:	2301      	movs	r3, #1
 800e68c:	607b      	str	r3, [r7, #4]
 800e68e:	e008      	b.n	800e6a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e690:	4b08      	ldr	r3, [pc, #32]	@ (800e6b4 <xTaskGetSchedulerState+0x38>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d102      	bne.n	800e69e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e698:	2302      	movs	r3, #2
 800e69a:	607b      	str	r3, [r7, #4]
 800e69c:	e001      	b.n	800e6a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e6a2:	687b      	ldr	r3, [r7, #4]
	}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr
 800e6b0:	2000384c 	.word	0x2000384c
 800e6b4:	20003868 	.word	0x20003868

0800e6b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b086      	sub	sp, #24
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d058      	beq.n	800e780 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e6ce:	4b2f      	ldr	r3, [pc, #188]	@ (800e78c <xTaskPriorityDisinherit+0xd4>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	693a      	ldr	r2, [r7, #16]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d00b      	beq.n	800e6f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6dc:	f383 8811 	msr	BASEPRI, r3
 800e6e0:	f3bf 8f6f 	isb	sy
 800e6e4:	f3bf 8f4f 	dsb	sy
 800e6e8:	60fb      	str	r3, [r7, #12]
}
 800e6ea:	bf00      	nop
 800e6ec:	bf00      	nop
 800e6ee:	e7fd      	b.n	800e6ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d10b      	bne.n	800e710 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6fc:	f383 8811 	msr	BASEPRI, r3
 800e700:	f3bf 8f6f 	isb	sy
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	60bb      	str	r3, [r7, #8]
}
 800e70a:	bf00      	nop
 800e70c:	bf00      	nop
 800e70e:	e7fd      	b.n	800e70c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e714:	1e5a      	subs	r2, r3, #1
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e722:	429a      	cmp	r2, r3
 800e724:	d02c      	beq.n	800e780 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d128      	bne.n	800e780 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	3304      	adds	r3, #4
 800e732:	4618      	mov	r0, r3
 800e734:	f7fe fb4a 	bl	800cdcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e744:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e750:	4b0f      	ldr	r3, [pc, #60]	@ (800e790 <xTaskPriorityDisinherit+0xd8>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	429a      	cmp	r2, r3
 800e756:	d903      	bls.n	800e760 <xTaskPriorityDisinherit+0xa8>
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e75c:	4a0c      	ldr	r2, [pc, #48]	@ (800e790 <xTaskPriorityDisinherit+0xd8>)
 800e75e:	6013      	str	r3, [r2, #0]
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e764:	4613      	mov	r3, r2
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	4413      	add	r3, r2
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	4a09      	ldr	r2, [pc, #36]	@ (800e794 <xTaskPriorityDisinherit+0xdc>)
 800e76e:	441a      	add	r2, r3
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	3304      	adds	r3, #4
 800e774:	4619      	mov	r1, r3
 800e776:	4610      	mov	r0, r2
 800e778:	f7fe facb 	bl	800cd12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e77c:	2301      	movs	r3, #1
 800e77e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e780:	697b      	ldr	r3, [r7, #20]
	}
 800e782:	4618      	mov	r0, r3
 800e784:	3718      	adds	r7, #24
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	2000336c 	.word	0x2000336c
 800e790:	20003848 	.word	0x20003848
 800e794:	20003370 	.word	0x20003370

0800e798 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e7a2:	4b21      	ldr	r3, [pc, #132]	@ (800e828 <prvAddCurrentTaskToDelayedList+0x90>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7a8:	4b20      	ldr	r3, [pc, #128]	@ (800e82c <prvAddCurrentTaskToDelayedList+0x94>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	3304      	adds	r3, #4
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fe fb0c 	bl	800cdcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e7ba:	d10a      	bne.n	800e7d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d007      	beq.n	800e7d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7c2:	4b1a      	ldr	r3, [pc, #104]	@ (800e82c <prvAddCurrentTaskToDelayedList+0x94>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	3304      	adds	r3, #4
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	4819      	ldr	r0, [pc, #100]	@ (800e830 <prvAddCurrentTaskToDelayedList+0x98>)
 800e7cc:	f7fe faa1 	bl	800cd12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e7d0:	e026      	b.n	800e820 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e7d2:	68fa      	ldr	r2, [r7, #12]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	4413      	add	r3, r2
 800e7d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e7da:	4b14      	ldr	r3, [pc, #80]	@ (800e82c <prvAddCurrentTaskToDelayedList+0x94>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	68ba      	ldr	r2, [r7, #8]
 800e7e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e7e2:	68ba      	ldr	r2, [r7, #8]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d209      	bcs.n	800e7fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7ea:	4b12      	ldr	r3, [pc, #72]	@ (800e834 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	4b0f      	ldr	r3, [pc, #60]	@ (800e82c <prvAddCurrentTaskToDelayedList+0x94>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	3304      	adds	r3, #4
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	4610      	mov	r0, r2
 800e7f8:	f7fe faaf 	bl	800cd5a <vListInsert>
}
 800e7fc:	e010      	b.n	800e820 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7fe:	4b0e      	ldr	r3, [pc, #56]	@ (800e838 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	4b0a      	ldr	r3, [pc, #40]	@ (800e82c <prvAddCurrentTaskToDelayedList+0x94>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	3304      	adds	r3, #4
 800e808:	4619      	mov	r1, r3
 800e80a:	4610      	mov	r0, r2
 800e80c:	f7fe faa5 	bl	800cd5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e810:	4b0a      	ldr	r3, [pc, #40]	@ (800e83c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	429a      	cmp	r2, r3
 800e818:	d202      	bcs.n	800e820 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e81a:	4a08      	ldr	r2, [pc, #32]	@ (800e83c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	6013      	str	r3, [r2, #0]
}
 800e820:	bf00      	nop
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	20003844 	.word	0x20003844
 800e82c:	2000336c 	.word	0x2000336c
 800e830:	2000382c 	.word	0x2000382c
 800e834:	200037fc 	.word	0x200037fc
 800e838:	200037f8 	.word	0x200037f8
 800e83c:	20003860 	.word	0x20003860

0800e840 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b08a      	sub	sp, #40	@ 0x28
 800e844:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e846:	2300      	movs	r3, #0
 800e848:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e84a:	f000 fb13 	bl	800ee74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e84e:	4b1d      	ldr	r3, [pc, #116]	@ (800e8c4 <xTimerCreateTimerTask+0x84>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d021      	beq.n	800e89a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e856:	2300      	movs	r3, #0
 800e858:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e85a:	2300      	movs	r3, #0
 800e85c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e85e:	1d3a      	adds	r2, r7, #4
 800e860:	f107 0108 	add.w	r1, r7, #8
 800e864:	f107 030c 	add.w	r3, r7, #12
 800e868:	4618      	mov	r0, r3
 800e86a:	f7fe fa0b 	bl	800cc84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e86e:	6879      	ldr	r1, [r7, #4]
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	9202      	str	r2, [sp, #8]
 800e876:	9301      	str	r3, [sp, #4]
 800e878:	2302      	movs	r3, #2
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	2300      	movs	r3, #0
 800e87e:	460a      	mov	r2, r1
 800e880:	4911      	ldr	r1, [pc, #68]	@ (800e8c8 <xTimerCreateTimerTask+0x88>)
 800e882:	4812      	ldr	r0, [pc, #72]	@ (800e8cc <xTimerCreateTimerTask+0x8c>)
 800e884:	f7ff f8a8 	bl	800d9d8 <xTaskCreateStatic>
 800e888:	4603      	mov	r3, r0
 800e88a:	4a11      	ldr	r2, [pc, #68]	@ (800e8d0 <xTimerCreateTimerTask+0x90>)
 800e88c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e88e:	4b10      	ldr	r3, [pc, #64]	@ (800e8d0 <xTimerCreateTimerTask+0x90>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d001      	beq.n	800e89a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e896:	2301      	movs	r3, #1
 800e898:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d10b      	bne.n	800e8b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a4:	f383 8811 	msr	BASEPRI, r3
 800e8a8:	f3bf 8f6f 	isb	sy
 800e8ac:	f3bf 8f4f 	dsb	sy
 800e8b0:	613b      	str	r3, [r7, #16]
}
 800e8b2:	bf00      	nop
 800e8b4:	bf00      	nop
 800e8b6:	e7fd      	b.n	800e8b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e8b8:	697b      	ldr	r3, [r7, #20]
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3718      	adds	r7, #24
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	2000389c 	.word	0x2000389c
 800e8c8:	0801a080 	.word	0x0801a080
 800e8cc:	0800ea0d 	.word	0x0800ea0d
 800e8d0:	200038a0 	.word	0x200038a0

0800e8d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b08a      	sub	sp, #40	@ 0x28
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	607a      	str	r2, [r7, #4]
 800e8e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d10b      	bne.n	800e904 <xTimerGenericCommand+0x30>
	__asm volatile
 800e8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8f0:	f383 8811 	msr	BASEPRI, r3
 800e8f4:	f3bf 8f6f 	isb	sy
 800e8f8:	f3bf 8f4f 	dsb	sy
 800e8fc:	623b      	str	r3, [r7, #32]
}
 800e8fe:	bf00      	nop
 800e900:	bf00      	nop
 800e902:	e7fd      	b.n	800e900 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e904:	4b19      	ldr	r3, [pc, #100]	@ (800e96c <xTimerGenericCommand+0x98>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d02a      	beq.n	800e962 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	2b05      	cmp	r3, #5
 800e91c:	dc18      	bgt.n	800e950 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e91e:	f7ff fead 	bl	800e67c <xTaskGetSchedulerState>
 800e922:	4603      	mov	r3, r0
 800e924:	2b02      	cmp	r3, #2
 800e926:	d109      	bne.n	800e93c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e928:	4b10      	ldr	r3, [pc, #64]	@ (800e96c <xTimerGenericCommand+0x98>)
 800e92a:	6818      	ldr	r0, [r3, #0]
 800e92c:	f107 0110 	add.w	r1, r7, #16
 800e930:	2300      	movs	r3, #0
 800e932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e934:	f7fe fbba 	bl	800d0ac <xQueueGenericSend>
 800e938:	6278      	str	r0, [r7, #36]	@ 0x24
 800e93a:	e012      	b.n	800e962 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e93c:	4b0b      	ldr	r3, [pc, #44]	@ (800e96c <xTimerGenericCommand+0x98>)
 800e93e:	6818      	ldr	r0, [r3, #0]
 800e940:	f107 0110 	add.w	r1, r7, #16
 800e944:	2300      	movs	r3, #0
 800e946:	2200      	movs	r2, #0
 800e948:	f7fe fbb0 	bl	800d0ac <xQueueGenericSend>
 800e94c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e94e:	e008      	b.n	800e962 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e950:	4b06      	ldr	r3, [pc, #24]	@ (800e96c <xTimerGenericCommand+0x98>)
 800e952:	6818      	ldr	r0, [r3, #0]
 800e954:	f107 0110 	add.w	r1, r7, #16
 800e958:	2300      	movs	r3, #0
 800e95a:	683a      	ldr	r2, [r7, #0]
 800e95c:	f7fe fca8 	bl	800d2b0 <xQueueGenericSendFromISR>
 800e960:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e964:	4618      	mov	r0, r3
 800e966:	3728      	adds	r7, #40	@ 0x28
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	2000389c 	.word	0x2000389c

0800e970 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b088      	sub	sp, #32
 800e974:	af02      	add	r7, sp, #8
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e97a:	4b23      	ldr	r3, [pc, #140]	@ (800ea08 <prvProcessExpiredTimer+0x98>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	3304      	adds	r3, #4
 800e988:	4618      	mov	r0, r3
 800e98a:	f7fe fa1f 	bl	800cdcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e994:	f003 0304 	and.w	r3, r3, #4
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d023      	beq.n	800e9e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	699a      	ldr	r2, [r3, #24]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	18d1      	adds	r1, r2, r3
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	683a      	ldr	r2, [r7, #0]
 800e9a8:	6978      	ldr	r0, [r7, #20]
 800e9aa:	f000 f8d5 	bl	800eb58 <prvInsertTimerInActiveList>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d020      	beq.n	800e9f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	2100      	movs	r1, #0
 800e9be:	6978      	ldr	r0, [r7, #20]
 800e9c0:	f7ff ff88 	bl	800e8d4 <xTimerGenericCommand>
 800e9c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d114      	bne.n	800e9f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9d0:	f383 8811 	msr	BASEPRI, r3
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	f3bf 8f4f 	dsb	sy
 800e9dc:	60fb      	str	r3, [r7, #12]
}
 800e9de:	bf00      	nop
 800e9e0:	bf00      	nop
 800e9e2:	e7fd      	b.n	800e9e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e9ea:	f023 0301 	bic.w	r3, r3, #1
 800e9ee:	b2da      	uxtb	r2, r3
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	6a1b      	ldr	r3, [r3, #32]
 800e9fa:	6978      	ldr	r0, [r7, #20]
 800e9fc:	4798      	blx	r3
}
 800e9fe:	bf00      	nop
 800ea00:	3718      	adds	r7, #24
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	20003894 	.word	0x20003894

0800ea0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea14:	f107 0308 	add.w	r3, r7, #8
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f000 f859 	bl	800ead0 <prvGetNextExpireTime>
 800ea1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	4619      	mov	r1, r3
 800ea24:	68f8      	ldr	r0, [r7, #12]
 800ea26:	f000 f805 	bl	800ea34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ea2a:	f000 f8d7 	bl	800ebdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea2e:	bf00      	nop
 800ea30:	e7f0      	b.n	800ea14 <prvTimerTask+0x8>
	...

0800ea34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ea3e:	f7ff fa0f 	bl	800de60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea42:	f107 0308 	add.w	r3, r7, #8
 800ea46:	4618      	mov	r0, r3
 800ea48:	f000 f866 	bl	800eb18 <prvSampleTimeNow>
 800ea4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d130      	bne.n	800eab6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d10a      	bne.n	800ea70 <prvProcessTimerOrBlockTask+0x3c>
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d806      	bhi.n	800ea70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ea62:	f7ff fa0b 	bl	800de7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ea66:	68f9      	ldr	r1, [r7, #12]
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7ff ff81 	bl	800e970 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ea6e:	e024      	b.n	800eaba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d008      	beq.n	800ea88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ea76:	4b13      	ldr	r3, [pc, #76]	@ (800eac4 <prvProcessTimerOrBlockTask+0x90>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d101      	bne.n	800ea84 <prvProcessTimerOrBlockTask+0x50>
 800ea80:	2301      	movs	r3, #1
 800ea82:	e000      	b.n	800ea86 <prvProcessTimerOrBlockTask+0x52>
 800ea84:	2300      	movs	r3, #0
 800ea86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ea88:	4b0f      	ldr	r3, [pc, #60]	@ (800eac8 <prvProcessTimerOrBlockTask+0x94>)
 800ea8a:	6818      	ldr	r0, [r3, #0]
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	4619      	mov	r1, r3
 800ea96:	f7fe ff6b 	bl	800d970 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ea9a:	f7ff f9ef 	bl	800de7c <xTaskResumeAll>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d10a      	bne.n	800eaba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eaa4:	4b09      	ldr	r3, [pc, #36]	@ (800eacc <prvProcessTimerOrBlockTask+0x98>)
 800eaa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eaaa:	601a      	str	r2, [r3, #0]
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	f3bf 8f6f 	isb	sy
}
 800eab4:	e001      	b.n	800eaba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eab6:	f7ff f9e1 	bl	800de7c <xTaskResumeAll>
}
 800eaba:	bf00      	nop
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	20003898 	.word	0x20003898
 800eac8:	2000389c 	.word	0x2000389c
 800eacc:	e000ed04 	.word	0xe000ed04

0800ead0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ead0:	b480      	push	{r7}
 800ead2:	b085      	sub	sp, #20
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ead8:	4b0e      	ldr	r3, [pc, #56]	@ (800eb14 <prvGetNextExpireTime+0x44>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d101      	bne.n	800eae6 <prvGetNextExpireTime+0x16>
 800eae2:	2201      	movs	r2, #1
 800eae4:	e000      	b.n	800eae8 <prvGetNextExpireTime+0x18>
 800eae6:	2200      	movs	r2, #0
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d105      	bne.n	800eb00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eaf4:	4b07      	ldr	r3, [pc, #28]	@ (800eb14 <prvGetNextExpireTime+0x44>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	68db      	ldr	r3, [r3, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	60fb      	str	r3, [r7, #12]
 800eafe:	e001      	b.n	800eb04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eb00:	2300      	movs	r3, #0
 800eb02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eb04:	68fb      	ldr	r3, [r7, #12]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3714      	adds	r7, #20
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop
 800eb14:	20003894 	.word	0x20003894

0800eb18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eb20:	f7ff fa4a 	bl	800dfb8 <xTaskGetTickCount>
 800eb24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800eb26:	4b0b      	ldr	r3, [pc, #44]	@ (800eb54 <prvSampleTimeNow+0x3c>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d205      	bcs.n	800eb3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800eb30:	f000 f93a 	bl	800eda8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2201      	movs	r2, #1
 800eb38:	601a      	str	r2, [r3, #0]
 800eb3a:	e002      	b.n	800eb42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eb42:	4a04      	ldr	r2, [pc, #16]	@ (800eb54 <prvSampleTimeNow+0x3c>)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eb48:	68fb      	ldr	r3, [r7, #12]
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	200038a4 	.word	0x200038a4

0800eb58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b086      	sub	sp, #24
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	607a      	str	r2, [r7, #4]
 800eb64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eb66:	2300      	movs	r3, #0
 800eb68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	68ba      	ldr	r2, [r7, #8]
 800eb6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eb76:	68ba      	ldr	r2, [r7, #8]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d812      	bhi.n	800eba4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	1ad2      	subs	r2, r2, r3
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	699b      	ldr	r3, [r3, #24]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d302      	bcc.n	800eb92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	617b      	str	r3, [r7, #20]
 800eb90:	e01b      	b.n	800ebca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eb92:	4b10      	ldr	r3, [pc, #64]	@ (800ebd4 <prvInsertTimerInActiveList+0x7c>)
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	3304      	adds	r3, #4
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	4610      	mov	r0, r2
 800eb9e:	f7fe f8dc 	bl	800cd5a <vListInsert>
 800eba2:	e012      	b.n	800ebca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d206      	bcs.n	800ebba <prvInsertTimerInActiveList+0x62>
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d302      	bcc.n	800ebba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	617b      	str	r3, [r7, #20]
 800ebb8:	e007      	b.n	800ebca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ebba:	4b07      	ldr	r3, [pc, #28]	@ (800ebd8 <prvInsertTimerInActiveList+0x80>)
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3304      	adds	r3, #4
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	4610      	mov	r0, r2
 800ebc6:	f7fe f8c8 	bl	800cd5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ebca:	697b      	ldr	r3, [r7, #20]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3718      	adds	r7, #24
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	20003898 	.word	0x20003898
 800ebd8:	20003894 	.word	0x20003894

0800ebdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b08e      	sub	sp, #56	@ 0x38
 800ebe0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ebe2:	e0ce      	b.n	800ed82 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	da19      	bge.n	800ec1e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ebea:	1d3b      	adds	r3, r7, #4
 800ebec:	3304      	adds	r3, #4
 800ebee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ebf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d10b      	bne.n	800ec0e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ebf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebfa:	f383 8811 	msr	BASEPRI, r3
 800ebfe:	f3bf 8f6f 	isb	sy
 800ec02:	f3bf 8f4f 	dsb	sy
 800ec06:	61fb      	str	r3, [r7, #28]
}
 800ec08:	bf00      	nop
 800ec0a:	bf00      	nop
 800ec0c:	e7fd      	b.n	800ec0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ec0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec14:	6850      	ldr	r0, [r2, #4]
 800ec16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec18:	6892      	ldr	r2, [r2, #8]
 800ec1a:	4611      	mov	r1, r2
 800ec1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	f2c0 80ae 	blt.w	800ed82 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ec2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec2c:	695b      	ldr	r3, [r3, #20]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d004      	beq.n	800ec3c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec34:	3304      	adds	r3, #4
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fe f8c8 	bl	800cdcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec3c:	463b      	mov	r3, r7
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7ff ff6a 	bl	800eb18 <prvSampleTimeNow>
 800ec44:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2b09      	cmp	r3, #9
 800ec4a:	f200 8097 	bhi.w	800ed7c <prvProcessReceivedCommands+0x1a0>
 800ec4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ec54 <prvProcessReceivedCommands+0x78>)
 800ec50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec54:	0800ec7d 	.word	0x0800ec7d
 800ec58:	0800ec7d 	.word	0x0800ec7d
 800ec5c:	0800ec7d 	.word	0x0800ec7d
 800ec60:	0800ecf3 	.word	0x0800ecf3
 800ec64:	0800ed07 	.word	0x0800ed07
 800ec68:	0800ed53 	.word	0x0800ed53
 800ec6c:	0800ec7d 	.word	0x0800ec7d
 800ec70:	0800ec7d 	.word	0x0800ec7d
 800ec74:	0800ecf3 	.word	0x0800ecf3
 800ec78:	0800ed07 	.word	0x0800ed07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec82:	f043 0301 	orr.w	r3, r3, #1
 800ec86:	b2da      	uxtb	r2, r3
 800ec88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ec8e:	68ba      	ldr	r2, [r7, #8]
 800ec90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec92:	699b      	ldr	r3, [r3, #24]
 800ec94:	18d1      	adds	r1, r2, r3
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec9c:	f7ff ff5c 	bl	800eb58 <prvInsertTimerInActiveList>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d06c      	beq.n	800ed80 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca8:	6a1b      	ldr	r3, [r3, #32]
 800ecaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ecac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ecae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ecb4:	f003 0304 	and.w	r3, r3, #4
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d061      	beq.n	800ed80 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ecbc:	68ba      	ldr	r2, [r7, #8]
 800ecbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc0:	699b      	ldr	r3, [r3, #24]
 800ecc2:	441a      	add	r2, r3
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	9300      	str	r3, [sp, #0]
 800ecc8:	2300      	movs	r3, #0
 800ecca:	2100      	movs	r1, #0
 800eccc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ecce:	f7ff fe01 	bl	800e8d4 <xTimerGenericCommand>
 800ecd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ecd4:	6a3b      	ldr	r3, [r7, #32]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d152      	bne.n	800ed80 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ecda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecde:	f383 8811 	msr	BASEPRI, r3
 800ece2:	f3bf 8f6f 	isb	sy
 800ece6:	f3bf 8f4f 	dsb	sy
 800ecea:	61bb      	str	r3, [r7, #24]
}
 800ecec:	bf00      	nop
 800ecee:	bf00      	nop
 800ecf0:	e7fd      	b.n	800ecee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ecf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ecf8:	f023 0301 	bic.w	r3, r3, #1
 800ecfc:	b2da      	uxtb	r2, r3
 800ecfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ed04:	e03d      	b.n	800ed82 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed0c:	f043 0301 	orr.w	r3, r3, #1
 800ed10:	b2da      	uxtb	r2, r3
 800ed12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ed18:	68ba      	ldr	r2, [r7, #8]
 800ed1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ed1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed20:	699b      	ldr	r3, [r3, #24]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d10b      	bne.n	800ed3e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ed26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed2a:	f383 8811 	msr	BASEPRI, r3
 800ed2e:	f3bf 8f6f 	isb	sy
 800ed32:	f3bf 8f4f 	dsb	sy
 800ed36:	617b      	str	r3, [r7, #20]
}
 800ed38:	bf00      	nop
 800ed3a:	bf00      	nop
 800ed3c:	e7fd      	b.n	800ed3a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ed3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed40:	699a      	ldr	r2, [r3, #24]
 800ed42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed44:	18d1      	adds	r1, r2, r3
 800ed46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed4c:	f7ff ff04 	bl	800eb58 <prvInsertTimerInActiveList>
					break;
 800ed50:	e017      	b.n	800ed82 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ed52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed58:	f003 0302 	and.w	r3, r3, #2
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d103      	bne.n	800ed68 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ed60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed62:	f000 fbe9 	bl	800f538 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ed66:	e00c      	b.n	800ed82 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed6e:	f023 0301 	bic.w	r3, r3, #1
 800ed72:	b2da      	uxtb	r2, r3
 800ed74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ed7a:	e002      	b.n	800ed82 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ed7c:	bf00      	nop
 800ed7e:	e000      	b.n	800ed82 <prvProcessReceivedCommands+0x1a6>
					break;
 800ed80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed82:	4b08      	ldr	r3, [pc, #32]	@ (800eda4 <prvProcessReceivedCommands+0x1c8>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	1d39      	adds	r1, r7, #4
 800ed88:	2200      	movs	r2, #0
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fe fb2e 	bl	800d3ec <xQueueReceive>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	f47f af26 	bne.w	800ebe4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ed98:	bf00      	nop
 800ed9a:	bf00      	nop
 800ed9c:	3730      	adds	r7, #48	@ 0x30
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	2000389c 	.word	0x2000389c

0800eda8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b088      	sub	sp, #32
 800edac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800edae:	e049      	b.n	800ee44 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800edb0:	4b2e      	ldr	r3, [pc, #184]	@ (800ee6c <prvSwitchTimerLists+0xc4>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	68db      	ldr	r3, [r3, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edba:	4b2c      	ldr	r3, [pc, #176]	@ (800ee6c <prvSwitchTimerLists+0xc4>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	68db      	ldr	r3, [r3, #12]
 800edc0:	68db      	ldr	r3, [r3, #12]
 800edc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	3304      	adds	r3, #4
 800edc8:	4618      	mov	r0, r3
 800edca:	f7fd ffff 	bl	800cdcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	6a1b      	ldr	r3, [r3, #32]
 800edd2:	68f8      	ldr	r0, [r7, #12]
 800edd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eddc:	f003 0304 	and.w	r3, r3, #4
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d02f      	beq.n	800ee44 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	699b      	ldr	r3, [r3, #24]
 800ede8:	693a      	ldr	r2, [r7, #16]
 800edea:	4413      	add	r3, r2
 800edec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800edee:	68ba      	ldr	r2, [r7, #8]
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d90e      	bls.n	800ee14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	68ba      	ldr	r2, [r7, #8]
 800edfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	68fa      	ldr	r2, [r7, #12]
 800ee00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee02:	4b1a      	ldr	r3, [pc, #104]	@ (800ee6c <prvSwitchTimerLists+0xc4>)
 800ee04:	681a      	ldr	r2, [r3, #0]
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	3304      	adds	r3, #4
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	4610      	mov	r0, r2
 800ee0e:	f7fd ffa4 	bl	800cd5a <vListInsert>
 800ee12:	e017      	b.n	800ee44 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee14:	2300      	movs	r3, #0
 800ee16:	9300      	str	r3, [sp, #0]
 800ee18:	2300      	movs	r3, #0
 800ee1a:	693a      	ldr	r2, [r7, #16]
 800ee1c:	2100      	movs	r1, #0
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f7ff fd58 	bl	800e8d4 <xTimerGenericCommand>
 800ee24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d10b      	bne.n	800ee44 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ee2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee30:	f383 8811 	msr	BASEPRI, r3
 800ee34:	f3bf 8f6f 	isb	sy
 800ee38:	f3bf 8f4f 	dsb	sy
 800ee3c:	603b      	str	r3, [r7, #0]
}
 800ee3e:	bf00      	nop
 800ee40:	bf00      	nop
 800ee42:	e7fd      	b.n	800ee40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee44:	4b09      	ldr	r3, [pc, #36]	@ (800ee6c <prvSwitchTimerLists+0xc4>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d1b0      	bne.n	800edb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ee4e:	4b07      	ldr	r3, [pc, #28]	@ (800ee6c <prvSwitchTimerLists+0xc4>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ee54:	4b06      	ldr	r3, [pc, #24]	@ (800ee70 <prvSwitchTimerLists+0xc8>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4a04      	ldr	r2, [pc, #16]	@ (800ee6c <prvSwitchTimerLists+0xc4>)
 800ee5a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ee5c:	4a04      	ldr	r2, [pc, #16]	@ (800ee70 <prvSwitchTimerLists+0xc8>)
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	6013      	str	r3, [r2, #0]
}
 800ee62:	bf00      	nop
 800ee64:	3718      	adds	r7, #24
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	20003894 	.word	0x20003894
 800ee70:	20003898 	.word	0x20003898

0800ee74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ee7a:	f000 f96d 	bl	800f158 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ee7e:	4b15      	ldr	r3, [pc, #84]	@ (800eed4 <prvCheckForValidListAndQueue+0x60>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d120      	bne.n	800eec8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ee86:	4814      	ldr	r0, [pc, #80]	@ (800eed8 <prvCheckForValidListAndQueue+0x64>)
 800ee88:	f7fd ff16 	bl	800ccb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ee8c:	4813      	ldr	r0, [pc, #76]	@ (800eedc <prvCheckForValidListAndQueue+0x68>)
 800ee8e:	f7fd ff13 	bl	800ccb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ee92:	4b13      	ldr	r3, [pc, #76]	@ (800eee0 <prvCheckForValidListAndQueue+0x6c>)
 800ee94:	4a10      	ldr	r2, [pc, #64]	@ (800eed8 <prvCheckForValidListAndQueue+0x64>)
 800ee96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ee98:	4b12      	ldr	r3, [pc, #72]	@ (800eee4 <prvCheckForValidListAndQueue+0x70>)
 800ee9a:	4a10      	ldr	r2, [pc, #64]	@ (800eedc <prvCheckForValidListAndQueue+0x68>)
 800ee9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ee9e:	2300      	movs	r3, #0
 800eea0:	9300      	str	r3, [sp, #0]
 800eea2:	4b11      	ldr	r3, [pc, #68]	@ (800eee8 <prvCheckForValidListAndQueue+0x74>)
 800eea4:	4a11      	ldr	r2, [pc, #68]	@ (800eeec <prvCheckForValidListAndQueue+0x78>)
 800eea6:	2110      	movs	r1, #16
 800eea8:	200a      	movs	r0, #10
 800eeaa:	f7fe f823 	bl	800cef4 <xQueueGenericCreateStatic>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	4a08      	ldr	r2, [pc, #32]	@ (800eed4 <prvCheckForValidListAndQueue+0x60>)
 800eeb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eeb4:	4b07      	ldr	r3, [pc, #28]	@ (800eed4 <prvCheckForValidListAndQueue+0x60>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d005      	beq.n	800eec8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eebc:	4b05      	ldr	r3, [pc, #20]	@ (800eed4 <prvCheckForValidListAndQueue+0x60>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	490b      	ldr	r1, [pc, #44]	@ (800eef0 <prvCheckForValidListAndQueue+0x7c>)
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fe fd2a 	bl	800d91c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eec8:	f000 f978 	bl	800f1bc <vPortExitCritical>
}
 800eecc:	bf00      	nop
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	2000389c 	.word	0x2000389c
 800eed8:	2000386c 	.word	0x2000386c
 800eedc:	20003880 	.word	0x20003880
 800eee0:	20003894 	.word	0x20003894
 800eee4:	20003898 	.word	0x20003898
 800eee8:	20003948 	.word	0x20003948
 800eeec:	200038a8 	.word	0x200038a8
 800eef0:	0801a088 	.word	0x0801a088

0800eef4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	3b04      	subs	r3, #4
 800ef04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ef0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	3b04      	subs	r3, #4
 800ef12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	f023 0201 	bic.w	r2, r3, #1
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	3b04      	subs	r3, #4
 800ef22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ef24:	4a0c      	ldr	r2, [pc, #48]	@ (800ef58 <pxPortInitialiseStack+0x64>)
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	3b14      	subs	r3, #20
 800ef2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	3b04      	subs	r3, #4
 800ef3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f06f 0202 	mvn.w	r2, #2
 800ef42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	3b20      	subs	r3, #32
 800ef48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3714      	adds	r7, #20
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr
 800ef58:	0800ef5d 	.word	0x0800ef5d

0800ef5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b085      	sub	sp, #20
 800ef60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ef62:	2300      	movs	r3, #0
 800ef64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ef66:	4b13      	ldr	r3, [pc, #76]	@ (800efb4 <prvTaskExitError+0x58>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef6e:	d00b      	beq.n	800ef88 <prvTaskExitError+0x2c>
	__asm volatile
 800ef70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef74:	f383 8811 	msr	BASEPRI, r3
 800ef78:	f3bf 8f6f 	isb	sy
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	60fb      	str	r3, [r7, #12]
}
 800ef82:	bf00      	nop
 800ef84:	bf00      	nop
 800ef86:	e7fd      	b.n	800ef84 <prvTaskExitError+0x28>
	__asm volatile
 800ef88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef8c:	f383 8811 	msr	BASEPRI, r3
 800ef90:	f3bf 8f6f 	isb	sy
 800ef94:	f3bf 8f4f 	dsb	sy
 800ef98:	60bb      	str	r3, [r7, #8]
}
 800ef9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ef9c:	bf00      	nop
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d0fc      	beq.n	800ef9e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800efa4:	bf00      	nop
 800efa6:	bf00      	nop
 800efa8:	3714      	adds	r7, #20
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop
 800efb4:	20000034 	.word	0x20000034
	...

0800efc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800efc0:	4b07      	ldr	r3, [pc, #28]	@ (800efe0 <pxCurrentTCBConst2>)
 800efc2:	6819      	ldr	r1, [r3, #0]
 800efc4:	6808      	ldr	r0, [r1, #0]
 800efc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efca:	f380 8809 	msr	PSP, r0
 800efce:	f3bf 8f6f 	isb	sy
 800efd2:	f04f 0000 	mov.w	r0, #0
 800efd6:	f380 8811 	msr	BASEPRI, r0
 800efda:	4770      	bx	lr
 800efdc:	f3af 8000 	nop.w

0800efe0 <pxCurrentTCBConst2>:
 800efe0:	2000336c 	.word	0x2000336c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800efe4:	bf00      	nop
 800efe6:	bf00      	nop

0800efe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800efe8:	4808      	ldr	r0, [pc, #32]	@ (800f00c <prvPortStartFirstTask+0x24>)
 800efea:	6800      	ldr	r0, [r0, #0]
 800efec:	6800      	ldr	r0, [r0, #0]
 800efee:	f380 8808 	msr	MSP, r0
 800eff2:	f04f 0000 	mov.w	r0, #0
 800eff6:	f380 8814 	msr	CONTROL, r0
 800effa:	b662      	cpsie	i
 800effc:	b661      	cpsie	f
 800effe:	f3bf 8f4f 	dsb	sy
 800f002:	f3bf 8f6f 	isb	sy
 800f006:	df00      	svc	0
 800f008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f00a:	bf00      	nop
 800f00c:	e000ed08 	.word	0xe000ed08

0800f010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b086      	sub	sp, #24
 800f014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f016:	4b47      	ldr	r3, [pc, #284]	@ (800f134 <xPortStartScheduler+0x124>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	4a47      	ldr	r2, [pc, #284]	@ (800f138 <xPortStartScheduler+0x128>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d10b      	bne.n	800f038 <xPortStartScheduler+0x28>
	__asm volatile
 800f020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f024:	f383 8811 	msr	BASEPRI, r3
 800f028:	f3bf 8f6f 	isb	sy
 800f02c:	f3bf 8f4f 	dsb	sy
 800f030:	613b      	str	r3, [r7, #16]
}
 800f032:	bf00      	nop
 800f034:	bf00      	nop
 800f036:	e7fd      	b.n	800f034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f038:	4b3e      	ldr	r3, [pc, #248]	@ (800f134 <xPortStartScheduler+0x124>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a3f      	ldr	r2, [pc, #252]	@ (800f13c <xPortStartScheduler+0x12c>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d10b      	bne.n	800f05a <xPortStartScheduler+0x4a>
	__asm volatile
 800f042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f046:	f383 8811 	msr	BASEPRI, r3
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	60fb      	str	r3, [r7, #12]
}
 800f054:	bf00      	nop
 800f056:	bf00      	nop
 800f058:	e7fd      	b.n	800f056 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f05a:	4b39      	ldr	r3, [pc, #228]	@ (800f140 <xPortStartScheduler+0x130>)
 800f05c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	b2db      	uxtb	r3, r3
 800f064:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	22ff      	movs	r2, #255	@ 0xff
 800f06a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	b2db      	uxtb	r3, r3
 800f072:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f074:	78fb      	ldrb	r3, [r7, #3]
 800f076:	b2db      	uxtb	r3, r3
 800f078:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f07c:	b2da      	uxtb	r2, r3
 800f07e:	4b31      	ldr	r3, [pc, #196]	@ (800f144 <xPortStartScheduler+0x134>)
 800f080:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f082:	4b31      	ldr	r3, [pc, #196]	@ (800f148 <xPortStartScheduler+0x138>)
 800f084:	2207      	movs	r2, #7
 800f086:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f088:	e009      	b.n	800f09e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f08a:	4b2f      	ldr	r3, [pc, #188]	@ (800f148 <xPortStartScheduler+0x138>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	3b01      	subs	r3, #1
 800f090:	4a2d      	ldr	r2, [pc, #180]	@ (800f148 <xPortStartScheduler+0x138>)
 800f092:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f094:	78fb      	ldrb	r3, [r7, #3]
 800f096:	b2db      	uxtb	r3, r3
 800f098:	005b      	lsls	r3, r3, #1
 800f09a:	b2db      	uxtb	r3, r3
 800f09c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f09e:	78fb      	ldrb	r3, [r7, #3]
 800f0a0:	b2db      	uxtb	r3, r3
 800f0a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0a6:	2b80      	cmp	r3, #128	@ 0x80
 800f0a8:	d0ef      	beq.n	800f08a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f0aa:	4b27      	ldr	r3, [pc, #156]	@ (800f148 <xPortStartScheduler+0x138>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f1c3 0307 	rsb	r3, r3, #7
 800f0b2:	2b04      	cmp	r3, #4
 800f0b4:	d00b      	beq.n	800f0ce <xPortStartScheduler+0xbe>
	__asm volatile
 800f0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ba:	f383 8811 	msr	BASEPRI, r3
 800f0be:	f3bf 8f6f 	isb	sy
 800f0c2:	f3bf 8f4f 	dsb	sy
 800f0c6:	60bb      	str	r3, [r7, #8]
}
 800f0c8:	bf00      	nop
 800f0ca:	bf00      	nop
 800f0cc:	e7fd      	b.n	800f0ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f0ce:	4b1e      	ldr	r3, [pc, #120]	@ (800f148 <xPortStartScheduler+0x138>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	021b      	lsls	r3, r3, #8
 800f0d4:	4a1c      	ldr	r2, [pc, #112]	@ (800f148 <xPortStartScheduler+0x138>)
 800f0d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f0d8:	4b1b      	ldr	r3, [pc, #108]	@ (800f148 <xPortStartScheduler+0x138>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f0e0:	4a19      	ldr	r2, [pc, #100]	@ (800f148 <xPortStartScheduler+0x138>)
 800f0e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	b2da      	uxtb	r2, r3
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f0ec:	4b17      	ldr	r3, [pc, #92]	@ (800f14c <xPortStartScheduler+0x13c>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	4a16      	ldr	r2, [pc, #88]	@ (800f14c <xPortStartScheduler+0x13c>)
 800f0f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f0f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f0f8:	4b14      	ldr	r3, [pc, #80]	@ (800f14c <xPortStartScheduler+0x13c>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4a13      	ldr	r2, [pc, #76]	@ (800f14c <xPortStartScheduler+0x13c>)
 800f0fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f102:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f104:	f000 f8da 	bl	800f2bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f108:	4b11      	ldr	r3, [pc, #68]	@ (800f150 <xPortStartScheduler+0x140>)
 800f10a:	2200      	movs	r2, #0
 800f10c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f10e:	f000 f8f9 	bl	800f304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f112:	4b10      	ldr	r3, [pc, #64]	@ (800f154 <xPortStartScheduler+0x144>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	4a0f      	ldr	r2, [pc, #60]	@ (800f154 <xPortStartScheduler+0x144>)
 800f118:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f11c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f11e:	f7ff ff63 	bl	800efe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f122:	f7ff f813 	bl	800e14c <vTaskSwitchContext>
	prvTaskExitError();
 800f126:	f7ff ff19 	bl	800ef5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f12a:	2300      	movs	r3, #0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3718      	adds	r7, #24
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	e000ed00 	.word	0xe000ed00
 800f138:	410fc271 	.word	0x410fc271
 800f13c:	410fc270 	.word	0x410fc270
 800f140:	e000e400 	.word	0xe000e400
 800f144:	20003998 	.word	0x20003998
 800f148:	2000399c 	.word	0x2000399c
 800f14c:	e000ed20 	.word	0xe000ed20
 800f150:	20000034 	.word	0x20000034
 800f154:	e000ef34 	.word	0xe000ef34

0800f158 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
	__asm volatile
 800f15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f162:	f383 8811 	msr	BASEPRI, r3
 800f166:	f3bf 8f6f 	isb	sy
 800f16a:	f3bf 8f4f 	dsb	sy
 800f16e:	607b      	str	r3, [r7, #4]
}
 800f170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f172:	4b10      	ldr	r3, [pc, #64]	@ (800f1b4 <vPortEnterCritical+0x5c>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	3301      	adds	r3, #1
 800f178:	4a0e      	ldr	r2, [pc, #56]	@ (800f1b4 <vPortEnterCritical+0x5c>)
 800f17a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f17c:	4b0d      	ldr	r3, [pc, #52]	@ (800f1b4 <vPortEnterCritical+0x5c>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2b01      	cmp	r3, #1
 800f182:	d110      	bne.n	800f1a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f184:	4b0c      	ldr	r3, [pc, #48]	@ (800f1b8 <vPortEnterCritical+0x60>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00b      	beq.n	800f1a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f192:	f383 8811 	msr	BASEPRI, r3
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	603b      	str	r3, [r7, #0]
}
 800f1a0:	bf00      	nop
 800f1a2:	bf00      	nop
 800f1a4:	e7fd      	b.n	800f1a2 <vPortEnterCritical+0x4a>
	}
}
 800f1a6:	bf00      	nop
 800f1a8:	370c      	adds	r7, #12
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr
 800f1b2:	bf00      	nop
 800f1b4:	20000034 	.word	0x20000034
 800f1b8:	e000ed04 	.word	0xe000ed04

0800f1bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f1c2:	4b12      	ldr	r3, [pc, #72]	@ (800f20c <vPortExitCritical+0x50>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d10b      	bne.n	800f1e2 <vPortExitCritical+0x26>
	__asm volatile
 800f1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ce:	f383 8811 	msr	BASEPRI, r3
 800f1d2:	f3bf 8f6f 	isb	sy
 800f1d6:	f3bf 8f4f 	dsb	sy
 800f1da:	607b      	str	r3, [r7, #4]
}
 800f1dc:	bf00      	nop
 800f1de:	bf00      	nop
 800f1e0:	e7fd      	b.n	800f1de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f1e2:	4b0a      	ldr	r3, [pc, #40]	@ (800f20c <vPortExitCritical+0x50>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	3b01      	subs	r3, #1
 800f1e8:	4a08      	ldr	r2, [pc, #32]	@ (800f20c <vPortExitCritical+0x50>)
 800f1ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f1ec:	4b07      	ldr	r3, [pc, #28]	@ (800f20c <vPortExitCritical+0x50>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d105      	bne.n	800f200 <vPortExitCritical+0x44>
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	f383 8811 	msr	BASEPRI, r3
}
 800f1fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f200:	bf00      	nop
 800f202:	370c      	adds	r7, #12
 800f204:	46bd      	mov	sp, r7
 800f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20a:	4770      	bx	lr
 800f20c:	20000034 	.word	0x20000034

0800f210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f210:	f3ef 8009 	mrs	r0, PSP
 800f214:	f3bf 8f6f 	isb	sy
 800f218:	4b15      	ldr	r3, [pc, #84]	@ (800f270 <pxCurrentTCBConst>)
 800f21a:	681a      	ldr	r2, [r3, #0]
 800f21c:	f01e 0f10 	tst.w	lr, #16
 800f220:	bf08      	it	eq
 800f222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22a:	6010      	str	r0, [r2, #0]
 800f22c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f234:	f380 8811 	msr	BASEPRI, r0
 800f238:	f3bf 8f4f 	dsb	sy
 800f23c:	f3bf 8f6f 	isb	sy
 800f240:	f7fe ff84 	bl	800e14c <vTaskSwitchContext>
 800f244:	f04f 0000 	mov.w	r0, #0
 800f248:	f380 8811 	msr	BASEPRI, r0
 800f24c:	bc09      	pop	{r0, r3}
 800f24e:	6819      	ldr	r1, [r3, #0]
 800f250:	6808      	ldr	r0, [r1, #0]
 800f252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f256:	f01e 0f10 	tst.w	lr, #16
 800f25a:	bf08      	it	eq
 800f25c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f260:	f380 8809 	msr	PSP, r0
 800f264:	f3bf 8f6f 	isb	sy
 800f268:	4770      	bx	lr
 800f26a:	bf00      	nop
 800f26c:	f3af 8000 	nop.w

0800f270 <pxCurrentTCBConst>:
 800f270:	2000336c 	.word	0x2000336c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f274:	bf00      	nop
 800f276:	bf00      	nop

0800f278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
	__asm volatile
 800f27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f282:	f383 8811 	msr	BASEPRI, r3
 800f286:	f3bf 8f6f 	isb	sy
 800f28a:	f3bf 8f4f 	dsb	sy
 800f28e:	607b      	str	r3, [r7, #4]
}
 800f290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f292:	f7fe fea1 	bl	800dfd8 <xTaskIncrementTick>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d003      	beq.n	800f2a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f29c:	4b06      	ldr	r3, [pc, #24]	@ (800f2b8 <xPortSysTickHandler+0x40>)
 800f29e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2a2:	601a      	str	r2, [r3, #0]
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	f383 8811 	msr	BASEPRI, r3
}
 800f2ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f2b0:	bf00      	nop
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	e000ed04 	.word	0xe000ed04

0800f2bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f2bc:	b480      	push	{r7}
 800f2be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800f2f0 <vPortSetupTimerInterrupt+0x34>)
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f2c6:	4b0b      	ldr	r3, [pc, #44]	@ (800f2f4 <vPortSetupTimerInterrupt+0x38>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800f2f8 <vPortSetupTimerInterrupt+0x3c>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4a0a      	ldr	r2, [pc, #40]	@ (800f2fc <vPortSetupTimerInterrupt+0x40>)
 800f2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2d6:	099b      	lsrs	r3, r3, #6
 800f2d8:	4a09      	ldr	r2, [pc, #36]	@ (800f300 <vPortSetupTimerInterrupt+0x44>)
 800f2da:	3b01      	subs	r3, #1
 800f2dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f2de:	4b04      	ldr	r3, [pc, #16]	@ (800f2f0 <vPortSetupTimerInterrupt+0x34>)
 800f2e0:	2207      	movs	r2, #7
 800f2e2:	601a      	str	r2, [r3, #0]
}
 800f2e4:	bf00      	nop
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	e000e010 	.word	0xe000e010
 800f2f4:	e000e018 	.word	0xe000e018
 800f2f8:	20000008 	.word	0x20000008
 800f2fc:	10624dd3 	.word	0x10624dd3
 800f300:	e000e014 	.word	0xe000e014

0800f304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f304:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f314 <vPortEnableVFP+0x10>
 800f308:	6801      	ldr	r1, [r0, #0]
 800f30a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f30e:	6001      	str	r1, [r0, #0]
 800f310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f312:	bf00      	nop
 800f314:	e000ed88 	.word	0xe000ed88

0800f318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f31e:	f3ef 8305 	mrs	r3, IPSR
 800f322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2b0f      	cmp	r3, #15
 800f328:	d915      	bls.n	800f356 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f32a:	4a18      	ldr	r2, [pc, #96]	@ (800f38c <vPortValidateInterruptPriority+0x74>)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	4413      	add	r3, r2
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f334:	4b16      	ldr	r3, [pc, #88]	@ (800f390 <vPortValidateInterruptPriority+0x78>)
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	7afa      	ldrb	r2, [r7, #11]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d20b      	bcs.n	800f356 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f342:	f383 8811 	msr	BASEPRI, r3
 800f346:	f3bf 8f6f 	isb	sy
 800f34a:	f3bf 8f4f 	dsb	sy
 800f34e:	607b      	str	r3, [r7, #4]
}
 800f350:	bf00      	nop
 800f352:	bf00      	nop
 800f354:	e7fd      	b.n	800f352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f356:	4b0f      	ldr	r3, [pc, #60]	@ (800f394 <vPortValidateInterruptPriority+0x7c>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f35e:	4b0e      	ldr	r3, [pc, #56]	@ (800f398 <vPortValidateInterruptPriority+0x80>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	429a      	cmp	r2, r3
 800f364:	d90b      	bls.n	800f37e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f36a:	f383 8811 	msr	BASEPRI, r3
 800f36e:	f3bf 8f6f 	isb	sy
 800f372:	f3bf 8f4f 	dsb	sy
 800f376:	603b      	str	r3, [r7, #0]
}
 800f378:	bf00      	nop
 800f37a:	bf00      	nop
 800f37c:	e7fd      	b.n	800f37a <vPortValidateInterruptPriority+0x62>
	}
 800f37e:	bf00      	nop
 800f380:	3714      	adds	r7, #20
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr
 800f38a:	bf00      	nop
 800f38c:	e000e3f0 	.word	0xe000e3f0
 800f390:	20003998 	.word	0x20003998
 800f394:	e000ed0c 	.word	0xe000ed0c
 800f398:	2000399c 	.word	0x2000399c

0800f39c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b08a      	sub	sp, #40	@ 0x28
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f3a8:	f7fe fd5a 	bl	800de60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f3ac:	4b5c      	ldr	r3, [pc, #368]	@ (800f520 <pvPortMalloc+0x184>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d101      	bne.n	800f3b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f3b4:	f000 f924 	bl	800f600 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f3b8:	4b5a      	ldr	r3, [pc, #360]	@ (800f524 <pvPortMalloc+0x188>)
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	4013      	ands	r3, r2
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f040 8095 	bne.w	800f4f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d01e      	beq.n	800f40a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f3cc:	2208      	movs	r2, #8
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f003 0307 	and.w	r3, r3, #7
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d015      	beq.n	800f40a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f023 0307 	bic.w	r3, r3, #7
 800f3e4:	3308      	adds	r3, #8
 800f3e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f003 0307 	and.w	r3, r3, #7
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d00b      	beq.n	800f40a <pvPortMalloc+0x6e>
	__asm volatile
 800f3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3f6:	f383 8811 	msr	BASEPRI, r3
 800f3fa:	f3bf 8f6f 	isb	sy
 800f3fe:	f3bf 8f4f 	dsb	sy
 800f402:	617b      	str	r3, [r7, #20]
}
 800f404:	bf00      	nop
 800f406:	bf00      	nop
 800f408:	e7fd      	b.n	800f406 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d06f      	beq.n	800f4f0 <pvPortMalloc+0x154>
 800f410:	4b45      	ldr	r3, [pc, #276]	@ (800f528 <pvPortMalloc+0x18c>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	429a      	cmp	r2, r3
 800f418:	d86a      	bhi.n	800f4f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f41a:	4b44      	ldr	r3, [pc, #272]	@ (800f52c <pvPortMalloc+0x190>)
 800f41c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f41e:	4b43      	ldr	r3, [pc, #268]	@ (800f52c <pvPortMalloc+0x190>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f424:	e004      	b.n	800f430 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	687a      	ldr	r2, [r7, #4]
 800f436:	429a      	cmp	r2, r3
 800f438:	d903      	bls.n	800f442 <pvPortMalloc+0xa6>
 800f43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d1f1      	bne.n	800f426 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f442:	4b37      	ldr	r3, [pc, #220]	@ (800f520 <pvPortMalloc+0x184>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f448:	429a      	cmp	r2, r3
 800f44a:	d051      	beq.n	800f4f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f44c:	6a3b      	ldr	r3, [r7, #32]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2208      	movs	r2, #8
 800f452:	4413      	add	r3, r2
 800f454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	6a3b      	ldr	r3, [r7, #32]
 800f45c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f460:	685a      	ldr	r2, [r3, #4]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	1ad2      	subs	r2, r2, r3
 800f466:	2308      	movs	r3, #8
 800f468:	005b      	lsls	r3, r3, #1
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d920      	bls.n	800f4b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f46e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	4413      	add	r3, r2
 800f474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	f003 0307 	and.w	r3, r3, #7
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d00b      	beq.n	800f498 <pvPortMalloc+0xfc>
	__asm volatile
 800f480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f484:	f383 8811 	msr	BASEPRI, r3
 800f488:	f3bf 8f6f 	isb	sy
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	613b      	str	r3, [r7, #16]
}
 800f492:	bf00      	nop
 800f494:	bf00      	nop
 800f496:	e7fd      	b.n	800f494 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f49a:	685a      	ldr	r2, [r3, #4]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	1ad2      	subs	r2, r2, r3
 800f4a0:	69bb      	ldr	r3, [r7, #24]
 800f4a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4a6:	687a      	ldr	r2, [r7, #4]
 800f4a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f4aa:	69b8      	ldr	r0, [r7, #24]
 800f4ac:	f000 f90a 	bl	800f6c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f4b0:	4b1d      	ldr	r3, [pc, #116]	@ (800f528 <pvPortMalloc+0x18c>)
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	1ad3      	subs	r3, r2, r3
 800f4ba:	4a1b      	ldr	r2, [pc, #108]	@ (800f528 <pvPortMalloc+0x18c>)
 800f4bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f4be:	4b1a      	ldr	r3, [pc, #104]	@ (800f528 <pvPortMalloc+0x18c>)
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	4b1b      	ldr	r3, [pc, #108]	@ (800f530 <pvPortMalloc+0x194>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d203      	bcs.n	800f4d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f4ca:	4b17      	ldr	r3, [pc, #92]	@ (800f528 <pvPortMalloc+0x18c>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	4a18      	ldr	r2, [pc, #96]	@ (800f530 <pvPortMalloc+0x194>)
 800f4d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d4:	685a      	ldr	r2, [r3, #4]
 800f4d6:	4b13      	ldr	r3, [pc, #76]	@ (800f524 <pvPortMalloc+0x188>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	431a      	orrs	r2, r3
 800f4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f4e6:	4b13      	ldr	r3, [pc, #76]	@ (800f534 <pvPortMalloc+0x198>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	4a11      	ldr	r2, [pc, #68]	@ (800f534 <pvPortMalloc+0x198>)
 800f4ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f4f0:	f7fe fcc4 	bl	800de7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4f4:	69fb      	ldr	r3, [r7, #28]
 800f4f6:	f003 0307 	and.w	r3, r3, #7
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d00b      	beq.n	800f516 <pvPortMalloc+0x17a>
	__asm volatile
 800f4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f502:	f383 8811 	msr	BASEPRI, r3
 800f506:	f3bf 8f6f 	isb	sy
 800f50a:	f3bf 8f4f 	dsb	sy
 800f50e:	60fb      	str	r3, [r7, #12]
}
 800f510:	bf00      	nop
 800f512:	bf00      	nop
 800f514:	e7fd      	b.n	800f512 <pvPortMalloc+0x176>
	return pvReturn;
 800f516:	69fb      	ldr	r3, [r7, #28]
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3728      	adds	r7, #40	@ 0x28
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	200059a8 	.word	0x200059a8
 800f524:	200059bc 	.word	0x200059bc
 800f528:	200059ac 	.word	0x200059ac
 800f52c:	200059a0 	.word	0x200059a0
 800f530:	200059b0 	.word	0x200059b0
 800f534:	200059b4 	.word	0x200059b4

0800f538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b086      	sub	sp, #24
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d04f      	beq.n	800f5ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f54a:	2308      	movs	r3, #8
 800f54c:	425b      	negs	r3, r3
 800f54e:	697a      	ldr	r2, [r7, #20]
 800f550:	4413      	add	r3, r2
 800f552:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	685a      	ldr	r2, [r3, #4]
 800f55c:	4b25      	ldr	r3, [pc, #148]	@ (800f5f4 <vPortFree+0xbc>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4013      	ands	r3, r2
 800f562:	2b00      	cmp	r3, #0
 800f564:	d10b      	bne.n	800f57e <vPortFree+0x46>
	__asm volatile
 800f566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f56a:	f383 8811 	msr	BASEPRI, r3
 800f56e:	f3bf 8f6f 	isb	sy
 800f572:	f3bf 8f4f 	dsb	sy
 800f576:	60fb      	str	r3, [r7, #12]
}
 800f578:	bf00      	nop
 800f57a:	bf00      	nop
 800f57c:	e7fd      	b.n	800f57a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00b      	beq.n	800f59e <vPortFree+0x66>
	__asm volatile
 800f586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f58a:	f383 8811 	msr	BASEPRI, r3
 800f58e:	f3bf 8f6f 	isb	sy
 800f592:	f3bf 8f4f 	dsb	sy
 800f596:	60bb      	str	r3, [r7, #8]
}
 800f598:	bf00      	nop
 800f59a:	bf00      	nop
 800f59c:	e7fd      	b.n	800f59a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	685a      	ldr	r2, [r3, #4]
 800f5a2:	4b14      	ldr	r3, [pc, #80]	@ (800f5f4 <vPortFree+0xbc>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	4013      	ands	r3, r2
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d01e      	beq.n	800f5ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d11a      	bne.n	800f5ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	685a      	ldr	r2, [r3, #4]
 800f5b8:	4b0e      	ldr	r3, [pc, #56]	@ (800f5f4 <vPortFree+0xbc>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	43db      	mvns	r3, r3
 800f5be:	401a      	ands	r2, r3
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f5c4:	f7fe fc4c 	bl	800de60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	685a      	ldr	r2, [r3, #4]
 800f5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800f5f8 <vPortFree+0xc0>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	4a09      	ldr	r2, [pc, #36]	@ (800f5f8 <vPortFree+0xc0>)
 800f5d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f5d6:	6938      	ldr	r0, [r7, #16]
 800f5d8:	f000 f874 	bl	800f6c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f5dc:	4b07      	ldr	r3, [pc, #28]	@ (800f5fc <vPortFree+0xc4>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	4a06      	ldr	r2, [pc, #24]	@ (800f5fc <vPortFree+0xc4>)
 800f5e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f5e6:	f7fe fc49 	bl	800de7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f5ea:	bf00      	nop
 800f5ec:	3718      	adds	r7, #24
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	200059bc 	.word	0x200059bc
 800f5f8:	200059ac 	.word	0x200059ac
 800f5fc:	200059b8 	.word	0x200059b8

0800f600 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f600:	b480      	push	{r7}
 800f602:	b085      	sub	sp, #20
 800f604:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f606:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f60a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f60c:	4b27      	ldr	r3, [pc, #156]	@ (800f6ac <prvHeapInit+0xac>)
 800f60e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f003 0307 	and.w	r3, r3, #7
 800f616:	2b00      	cmp	r3, #0
 800f618:	d00c      	beq.n	800f634 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	3307      	adds	r3, #7
 800f61e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f023 0307 	bic.w	r3, r3, #7
 800f626:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f628:	68ba      	ldr	r2, [r7, #8]
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	1ad3      	subs	r3, r2, r3
 800f62e:	4a1f      	ldr	r2, [pc, #124]	@ (800f6ac <prvHeapInit+0xac>)
 800f630:	4413      	add	r3, r2
 800f632:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f638:	4a1d      	ldr	r2, [pc, #116]	@ (800f6b0 <prvHeapInit+0xb0>)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f63e:	4b1c      	ldr	r3, [pc, #112]	@ (800f6b0 <prvHeapInit+0xb0>)
 800f640:	2200      	movs	r2, #0
 800f642:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	68ba      	ldr	r2, [r7, #8]
 800f648:	4413      	add	r3, r2
 800f64a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f64c:	2208      	movs	r2, #8
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	1a9b      	subs	r3, r3, r2
 800f652:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f023 0307 	bic.w	r3, r3, #7
 800f65a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	4a15      	ldr	r2, [pc, #84]	@ (800f6b4 <prvHeapInit+0xb4>)
 800f660:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f662:	4b14      	ldr	r3, [pc, #80]	@ (800f6b4 <prvHeapInit+0xb4>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	2200      	movs	r2, #0
 800f668:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f66a:	4b12      	ldr	r3, [pc, #72]	@ (800f6b4 <prvHeapInit+0xb4>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	2200      	movs	r2, #0
 800f670:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	1ad2      	subs	r2, r2, r3
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f680:	4b0c      	ldr	r3, [pc, #48]	@ (800f6b4 <prvHeapInit+0xb4>)
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	4a0a      	ldr	r2, [pc, #40]	@ (800f6b8 <prvHeapInit+0xb8>)
 800f68e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	4a09      	ldr	r2, [pc, #36]	@ (800f6bc <prvHeapInit+0xbc>)
 800f696:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f698:	4b09      	ldr	r3, [pc, #36]	@ (800f6c0 <prvHeapInit+0xc0>)
 800f69a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f69e:	601a      	str	r2, [r3, #0]
}
 800f6a0:	bf00      	nop
 800f6a2:	3714      	adds	r7, #20
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr
 800f6ac:	200039a0 	.word	0x200039a0
 800f6b0:	200059a0 	.word	0x200059a0
 800f6b4:	200059a8 	.word	0x200059a8
 800f6b8:	200059b0 	.word	0x200059b0
 800f6bc:	200059ac 	.word	0x200059ac
 800f6c0:	200059bc 	.word	0x200059bc

0800f6c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b085      	sub	sp, #20
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f6cc:	4b28      	ldr	r3, [pc, #160]	@ (800f770 <prvInsertBlockIntoFreeList+0xac>)
 800f6ce:	60fb      	str	r3, [r7, #12]
 800f6d0:	e002      	b.n	800f6d8 <prvInsertBlockIntoFreeList+0x14>
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	60fb      	str	r3, [r7, #12]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	687a      	ldr	r2, [r7, #4]
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d8f7      	bhi.n	800f6d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	68ba      	ldr	r2, [r7, #8]
 800f6ec:	4413      	add	r3, r2
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d108      	bne.n	800f706 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	685a      	ldr	r2, [r3, #4]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	441a      	add	r2, r3
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	68ba      	ldr	r2, [r7, #8]
 800f710:	441a      	add	r2, r3
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	429a      	cmp	r2, r3
 800f718:	d118      	bne.n	800f74c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	681a      	ldr	r2, [r3, #0]
 800f71e:	4b15      	ldr	r3, [pc, #84]	@ (800f774 <prvInsertBlockIntoFreeList+0xb0>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	429a      	cmp	r2, r3
 800f724:	d00d      	beq.n	800f742 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	685a      	ldr	r2, [r3, #4]
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	441a      	add	r2, r3
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	601a      	str	r2, [r3, #0]
 800f740:	e008      	b.n	800f754 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f742:	4b0c      	ldr	r3, [pc, #48]	@ (800f774 <prvInsertBlockIntoFreeList+0xb0>)
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	601a      	str	r2, [r3, #0]
 800f74a:	e003      	b.n	800f754 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f754:	68fa      	ldr	r2, [r7, #12]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d002      	beq.n	800f762 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f762:	bf00      	nop
 800f764:	3714      	adds	r7, #20
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr
 800f76e:	bf00      	nop
 800f770:	200059a0 	.word	0x200059a0
 800f774:	200059a8 	.word	0x200059a8

0800f778 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f77c:	2201      	movs	r2, #1
 800f77e:	490e      	ldr	r1, [pc, #56]	@ (800f7b8 <MX_USB_HOST_Init+0x40>)
 800f780:	480e      	ldr	r0, [pc, #56]	@ (800f7bc <MX_USB_HOST_Init+0x44>)
 800f782:	f7fb f9ab 	bl	800aadc <USBH_Init>
 800f786:	4603      	mov	r3, r0
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d001      	beq.n	800f790 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f78c:	f7f1 ff58 	bl	8001640 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f790:	490b      	ldr	r1, [pc, #44]	@ (800f7c0 <MX_USB_HOST_Init+0x48>)
 800f792:	480a      	ldr	r0, [pc, #40]	@ (800f7bc <MX_USB_HOST_Init+0x44>)
 800f794:	f7fb fa6f 	bl	800ac76 <USBH_RegisterClass>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d001      	beq.n	800f7a2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f79e:	f7f1 ff4f 	bl	8001640 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f7a2:	4806      	ldr	r0, [pc, #24]	@ (800f7bc <MX_USB_HOST_Init+0x44>)
 800f7a4:	f7fb faf3 	bl	800ad8e <USBH_Start>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d001      	beq.n	800f7b2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f7ae:	f7f1 ff47 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f7b2:	bf00      	nop
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	0800f7c5 	.word	0x0800f7c5
 800f7bc:	200059c0 	.word	0x200059c0
 800f7c0:	20000014 	.word	0x20000014

0800f7c4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b083      	sub	sp, #12
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f7d0:	78fb      	ldrb	r3, [r7, #3]
 800f7d2:	3b01      	subs	r3, #1
 800f7d4:	2b04      	cmp	r3, #4
 800f7d6:	d819      	bhi.n	800f80c <USBH_UserProcess+0x48>
 800f7d8:	a201      	add	r2, pc, #4	@ (adr r2, 800f7e0 <USBH_UserProcess+0x1c>)
 800f7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7de:	bf00      	nop
 800f7e0:	0800f80d 	.word	0x0800f80d
 800f7e4:	0800f7fd 	.word	0x0800f7fd
 800f7e8:	0800f80d 	.word	0x0800f80d
 800f7ec:	0800f805 	.word	0x0800f805
 800f7f0:	0800f7f5 	.word	0x0800f7f5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f7f4:	4b09      	ldr	r3, [pc, #36]	@ (800f81c <USBH_UserProcess+0x58>)
 800f7f6:	2203      	movs	r2, #3
 800f7f8:	701a      	strb	r2, [r3, #0]
  break;
 800f7fa:	e008      	b.n	800f80e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f7fc:	4b07      	ldr	r3, [pc, #28]	@ (800f81c <USBH_UserProcess+0x58>)
 800f7fe:	2202      	movs	r2, #2
 800f800:	701a      	strb	r2, [r3, #0]
  break;
 800f802:	e004      	b.n	800f80e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f804:	4b05      	ldr	r3, [pc, #20]	@ (800f81c <USBH_UserProcess+0x58>)
 800f806:	2201      	movs	r2, #1
 800f808:	701a      	strb	r2, [r3, #0]
  break;
 800f80a:	e000      	b.n	800f80e <USBH_UserProcess+0x4a>

  default:
  break;
 800f80c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f80e:	bf00      	nop
 800f810:	370c      	adds	r7, #12
 800f812:	46bd      	mov	sp, r7
 800f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f818:	4770      	bx	lr
 800f81a:	bf00      	nop
 800f81c:	20005da4 	.word	0x20005da4

0800f820 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b08a      	sub	sp, #40	@ 0x28
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f828:	f107 0314 	add.w	r3, r7, #20
 800f82c:	2200      	movs	r2, #0
 800f82e:	601a      	str	r2, [r3, #0]
 800f830:	605a      	str	r2, [r3, #4]
 800f832:	609a      	str	r2, [r3, #8]
 800f834:	60da      	str	r2, [r3, #12]
 800f836:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f840:	d147      	bne.n	800f8d2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f842:	2300      	movs	r3, #0
 800f844:	613b      	str	r3, [r7, #16]
 800f846:	4b25      	ldr	r3, [pc, #148]	@ (800f8dc <HAL_HCD_MspInit+0xbc>)
 800f848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f84a:	4a24      	ldr	r2, [pc, #144]	@ (800f8dc <HAL_HCD_MspInit+0xbc>)
 800f84c:	f043 0301 	orr.w	r3, r3, #1
 800f850:	6313      	str	r3, [r2, #48]	@ 0x30
 800f852:	4b22      	ldr	r3, [pc, #136]	@ (800f8dc <HAL_HCD_MspInit+0xbc>)
 800f854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f856:	f003 0301 	and.w	r3, r3, #1
 800f85a:	613b      	str	r3, [r7, #16]
 800f85c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800f85e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f864:	2300      	movs	r3, #0
 800f866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f868:	2300      	movs	r3, #0
 800f86a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f86c:	f107 0314 	add.w	r3, r7, #20
 800f870:	4619      	mov	r1, r3
 800f872:	481b      	ldr	r0, [pc, #108]	@ (800f8e0 <HAL_HCD_MspInit+0xc0>)
 800f874:	f7f3 fa00 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800f878:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800f87c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f87e:	2302      	movs	r3, #2
 800f880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f882:	2300      	movs	r3, #0
 800f884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f886:	2300      	movs	r3, #0
 800f888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f88a:	230a      	movs	r3, #10
 800f88c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f88e:	f107 0314 	add.w	r3, r7, #20
 800f892:	4619      	mov	r1, r3
 800f894:	4812      	ldr	r0, [pc, #72]	@ (800f8e0 <HAL_HCD_MspInit+0xc0>)
 800f896:	f7f3 f9ef 	bl	8002c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f89a:	4b10      	ldr	r3, [pc, #64]	@ (800f8dc <HAL_HCD_MspInit+0xbc>)
 800f89c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f89e:	4a0f      	ldr	r2, [pc, #60]	@ (800f8dc <HAL_HCD_MspInit+0xbc>)
 800f8a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8a4:	6353      	str	r3, [r2, #52]	@ 0x34
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	60fb      	str	r3, [r7, #12]
 800f8aa:	4b0c      	ldr	r3, [pc, #48]	@ (800f8dc <HAL_HCD_MspInit+0xbc>)
 800f8ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8ae:	4a0b      	ldr	r2, [pc, #44]	@ (800f8dc <HAL_HCD_MspInit+0xbc>)
 800f8b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f8b4:	6453      	str	r3, [r2, #68]	@ 0x44
 800f8b6:	4b09      	ldr	r3, [pc, #36]	@ (800f8dc <HAL_HCD_MspInit+0xbc>)
 800f8b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f8be:	60fb      	str	r3, [r7, #12]
 800f8c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	2105      	movs	r1, #5
 800f8c6:	2043      	movs	r0, #67	@ 0x43
 800f8c8:	f7f2 fdaa 	bl	8002420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f8cc:	2043      	movs	r0, #67	@ 0x43
 800f8ce:	f7f2 fdc3 	bl	8002458 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f8d2:	bf00      	nop
 800f8d4:	3728      	adds	r7, #40	@ 0x28
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	40023800 	.word	0x40023800
 800f8e0:	40020000 	.word	0x40020000

0800f8e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fb fe83 	bl	800b5fe <USBH_LL_IncTimer>
}
 800f8f8:	bf00      	nop
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fb fec3 	bl	800b69a <USBH_LL_Connect>
}
 800f914:	bf00      	nop
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fb fed0 	bl	800b6d0 <USBH_LL_Disconnect>
}
 800f930:	bf00      	nop
 800f932:	3708      	adds	r7, #8
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	460b      	mov	r3, r1
 800f942:	70fb      	strb	r3, [r7, #3]
 800f944:	4613      	mov	r3, r2
 800f946:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fb ff23 	bl	800b79a <USBH_LL_NotifyURBChange>
#endif
}
 800f954:	bf00      	nop
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7fb fe71 	bl	800b652 <USBH_LL_PortEnabled>
}
 800f970:	bf00      	nop
 800f972:	3708      	adds	r7, #8
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f986:	4618      	mov	r0, r3
 800f988:	f7fb fe75 	bl	800b676 <USBH_LL_PortDisabled>
}
 800f98c:	bf00      	nop
 800f98e:	3708      	adds	r7, #8
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d12a      	bne.n	800f9fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f9a6:	4a18      	ldr	r2, [pc, #96]	@ (800fa08 <USBH_LL_Init+0x74>)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	4a15      	ldr	r2, [pc, #84]	@ (800fa08 <USBH_LL_Init+0x74>)
 800f9b2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f9b6:	4b14      	ldr	r3, [pc, #80]	@ (800fa08 <USBH_LL_Init+0x74>)
 800f9b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f9bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f9be:	4b12      	ldr	r3, [pc, #72]	@ (800fa08 <USBH_LL_Init+0x74>)
 800f9c0:	2208      	movs	r2, #8
 800f9c2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f9c4:	4b10      	ldr	r3, [pc, #64]	@ (800fa08 <USBH_LL_Init+0x74>)
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f9ca:	4b0f      	ldr	r3, [pc, #60]	@ (800fa08 <USBH_LL_Init+0x74>)
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f9d0:	4b0d      	ldr	r3, [pc, #52]	@ (800fa08 <USBH_LL_Init+0x74>)
 800f9d2:	2202      	movs	r2, #2
 800f9d4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f9d6:	4b0c      	ldr	r3, [pc, #48]	@ (800fa08 <USBH_LL_Init+0x74>)
 800f9d8:	2200      	movs	r2, #0
 800f9da:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f9dc:	480a      	ldr	r0, [pc, #40]	@ (800fa08 <USBH_LL_Init+0x74>)
 800f9de:	f7f3 fb18 	bl	8003012 <HAL_HCD_Init>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d001      	beq.n	800f9ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f9e8:	f7f1 fe2a 	bl	8001640 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f9ec:	4806      	ldr	r0, [pc, #24]	@ (800fa08 <USBH_LL_Init+0x74>)
 800f9ee:	f7f3 ff79 	bl	80038e4 <HAL_HCD_GetCurrentFrame>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7fb fdf2 	bl	800b5e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f9fc:	2300      	movs	r3, #0
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	20005da8 	.word	0x20005da8

0800fa0c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa14:	2300      	movs	r3, #0
 800fa16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7f3 fee6 	bl	80037f4 <HAL_HCD_Start>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa2c:	7bfb      	ldrb	r3, [r7, #15]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 f95e 	bl	800fcf0 <USBH_Get_USB_Status>
 800fa34:	4603      	mov	r3, r0
 800fa36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa38:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3710      	adds	r7, #16
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}

0800fa42 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fa42:	b580      	push	{r7, lr}
 800fa44:	b084      	sub	sp, #16
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7f3 feee 	bl	800383a <HAL_HCD_Stop>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa62:	7bfb      	ldrb	r3, [r7, #15]
 800fa64:	4618      	mov	r0, r3
 800fa66:	f000 f943 	bl	800fcf0 <USBH_Get_USB_Status>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3710      	adds	r7, #16
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fa80:	2301      	movs	r3, #1
 800fa82:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7f3 ff38 	bl	8003900 <HAL_HCD_GetCurrentSpeed>
 800fa90:	4603      	mov	r3, r0
 800fa92:	2b02      	cmp	r3, #2
 800fa94:	d00c      	beq.n	800fab0 <USBH_LL_GetSpeed+0x38>
 800fa96:	2b02      	cmp	r3, #2
 800fa98:	d80d      	bhi.n	800fab6 <USBH_LL_GetSpeed+0x3e>
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d002      	beq.n	800faa4 <USBH_LL_GetSpeed+0x2c>
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d003      	beq.n	800faaa <USBH_LL_GetSpeed+0x32>
 800faa2:	e008      	b.n	800fab6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800faa4:	2300      	movs	r3, #0
 800faa6:	73fb      	strb	r3, [r7, #15]
    break;
 800faa8:	e008      	b.n	800fabc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800faaa:	2301      	movs	r3, #1
 800faac:	73fb      	strb	r3, [r7, #15]
    break;
 800faae:	e005      	b.n	800fabc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fab0:	2302      	movs	r3, #2
 800fab2:	73fb      	strb	r3, [r7, #15]
    break;
 800fab4:	e002      	b.n	800fabc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fab6:	2301      	movs	r3, #1
 800fab8:	73fb      	strb	r3, [r7, #15]
    break;
 800faba:	bf00      	nop
  }
  return  speed;
 800fabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3710      	adds	r7, #16
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fac6:	b580      	push	{r7, lr}
 800fac8:	b084      	sub	sp, #16
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800face:	2300      	movs	r3, #0
 800fad0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fad2:	2300      	movs	r3, #0
 800fad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fadc:	4618      	mov	r0, r3
 800fade:	f7f3 fec9 	bl	8003874 <HAL_HCD_ResetPort>
 800fae2:	4603      	mov	r3, r0
 800fae4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fae6:	7bfb      	ldrb	r3, [r7, #15]
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 f901 	bl	800fcf0 <USBH_Get_USB_Status>
 800faee:	4603      	mov	r3, r0
 800faf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3710      	adds	r7, #16
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	460b      	mov	r3, r1
 800fb06:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb0e:	78fa      	ldrb	r2, [r7, #3]
 800fb10:	4611      	mov	r1, r2
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7f3 fed1 	bl	80038ba <HAL_HCD_HC_GetXferCount>
 800fb18:	4603      	mov	r3, r0
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3708      	adds	r7, #8
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}

0800fb22 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fb22:	b590      	push	{r4, r7, lr}
 800fb24:	b089      	sub	sp, #36	@ 0x24
 800fb26:	af04      	add	r7, sp, #16
 800fb28:	6078      	str	r0, [r7, #4]
 800fb2a:	4608      	mov	r0, r1
 800fb2c:	4611      	mov	r1, r2
 800fb2e:	461a      	mov	r2, r3
 800fb30:	4603      	mov	r3, r0
 800fb32:	70fb      	strb	r3, [r7, #3]
 800fb34:	460b      	mov	r3, r1
 800fb36:	70bb      	strb	r3, [r7, #2]
 800fb38:	4613      	mov	r3, r2
 800fb3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb40:	2300      	movs	r3, #0
 800fb42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fb4a:	787c      	ldrb	r4, [r7, #1]
 800fb4c:	78ba      	ldrb	r2, [r7, #2]
 800fb4e:	78f9      	ldrb	r1, [r7, #3]
 800fb50:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fb52:	9302      	str	r3, [sp, #8]
 800fb54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fb58:	9301      	str	r3, [sp, #4]
 800fb5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb5e:	9300      	str	r3, [sp, #0]
 800fb60:	4623      	mov	r3, r4
 800fb62:	f7f3 fabd 	bl	80030e0 <HAL_HCD_HC_Init>
 800fb66:	4603      	mov	r3, r0
 800fb68:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb6a:	7bfb      	ldrb	r3, [r7, #15]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f000 f8bf 	bl	800fcf0 <USBH_Get_USB_Status>
 800fb72:	4603      	mov	r3, r0
 800fb74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb76:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3714      	adds	r7, #20
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd90      	pop	{r4, r7, pc}

0800fb80 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	460b      	mov	r3, r1
 800fb8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb90:	2300      	movs	r3, #0
 800fb92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb9a:	78fa      	ldrb	r2, [r7, #3]
 800fb9c:	4611      	mov	r1, r2
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7f3 fb56 	bl	8003250 <HAL_HCD_HC_Halt>
 800fba4:	4603      	mov	r3, r0
 800fba6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fba8:	7bfb      	ldrb	r3, [r7, #15]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f000 f8a0 	bl	800fcf0 <USBH_Get_USB_Status>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3710      	adds	r7, #16
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fbbe:	b590      	push	{r4, r7, lr}
 800fbc0:	b089      	sub	sp, #36	@ 0x24
 800fbc2:	af04      	add	r7, sp, #16
 800fbc4:	6078      	str	r0, [r7, #4]
 800fbc6:	4608      	mov	r0, r1
 800fbc8:	4611      	mov	r1, r2
 800fbca:	461a      	mov	r2, r3
 800fbcc:	4603      	mov	r3, r0
 800fbce:	70fb      	strb	r3, [r7, #3]
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	70bb      	strb	r3, [r7, #2]
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fbe6:	787c      	ldrb	r4, [r7, #1]
 800fbe8:	78ba      	ldrb	r2, [r7, #2]
 800fbea:	78f9      	ldrb	r1, [r7, #3]
 800fbec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fbf0:	9303      	str	r3, [sp, #12]
 800fbf2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fbf4:	9302      	str	r3, [sp, #8]
 800fbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf8:	9301      	str	r3, [sp, #4]
 800fbfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	4623      	mov	r3, r4
 800fc02:	f7f3 fb49 	bl	8003298 <HAL_HCD_HC_SubmitRequest>
 800fc06:	4603      	mov	r3, r0
 800fc08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fc0a:	7bfb      	ldrb	r3, [r7, #15]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f000 f86f 	bl	800fcf0 <USBH_Get_USB_Status>
 800fc12:	4603      	mov	r3, r0
 800fc14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc16:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3714      	adds	r7, #20
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd90      	pop	{r4, r7, pc}

0800fc20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	460b      	mov	r3, r1
 800fc2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fc32:	78fa      	ldrb	r2, [r7, #3]
 800fc34:	4611      	mov	r1, r2
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7f3 fe2a 	bl	8003890 <HAL_HCD_HC_GetURBState>
 800fc3c:	4603      	mov	r3, r0
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3708      	adds	r7, #8
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}

0800fc46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fc46:	b580      	push	{r7, lr}
 800fc48:	b082      	sub	sp, #8
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]
 800fc4e:	460b      	mov	r3, r1
 800fc50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d103      	bne.n	800fc64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fc5c:	78fb      	ldrb	r3, [r7, #3]
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f000 f872 	bl	800fd48 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fc64:	20c8      	movs	r0, #200	@ 0xc8
 800fc66:	f7f2 faff 	bl	8002268 <HAL_Delay>
  return USBH_OK;
 800fc6a:	2300      	movs	r3, #0
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b085      	sub	sp, #20
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	70fb      	strb	r3, [r7, #3]
 800fc80:	4613      	mov	r3, r2
 800fc82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fc8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fc8c:	78fa      	ldrb	r2, [r7, #3]
 800fc8e:	68f9      	ldr	r1, [r7, #12]
 800fc90:	4613      	mov	r3, r2
 800fc92:	011b      	lsls	r3, r3, #4
 800fc94:	1a9b      	subs	r3, r3, r2
 800fc96:	009b      	lsls	r3, r3, #2
 800fc98:	440b      	add	r3, r1
 800fc9a:	3317      	adds	r3, #23
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d00a      	beq.n	800fcb8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fca2:	78fa      	ldrb	r2, [r7, #3]
 800fca4:	68f9      	ldr	r1, [r7, #12]
 800fca6:	4613      	mov	r3, r2
 800fca8:	011b      	lsls	r3, r3, #4
 800fcaa:	1a9b      	subs	r3, r3, r2
 800fcac:	009b      	lsls	r3, r3, #2
 800fcae:	440b      	add	r3, r1
 800fcb0:	333c      	adds	r3, #60	@ 0x3c
 800fcb2:	78ba      	ldrb	r2, [r7, #2]
 800fcb4:	701a      	strb	r2, [r3, #0]
 800fcb6:	e009      	b.n	800fccc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fcb8:	78fa      	ldrb	r2, [r7, #3]
 800fcba:	68f9      	ldr	r1, [r7, #12]
 800fcbc:	4613      	mov	r3, r2
 800fcbe:	011b      	lsls	r3, r3, #4
 800fcc0:	1a9b      	subs	r3, r3, r2
 800fcc2:	009b      	lsls	r3, r3, #2
 800fcc4:	440b      	add	r3, r1
 800fcc6:	333d      	adds	r3, #61	@ 0x3d
 800fcc8:	78ba      	ldrb	r2, [r7, #2]
 800fcca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fccc:	2300      	movs	r3, #0
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3714      	adds	r7, #20
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr

0800fcda <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b082      	sub	sp, #8
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f7f2 fac0 	bl	8002268 <HAL_Delay>
}
 800fce8:	bf00      	nop
 800fcea:	3708      	adds	r7, #8
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b085      	sub	sp, #20
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fcfe:	79fb      	ldrb	r3, [r7, #7]
 800fd00:	2b03      	cmp	r3, #3
 800fd02:	d817      	bhi.n	800fd34 <USBH_Get_USB_Status+0x44>
 800fd04:	a201      	add	r2, pc, #4	@ (adr r2, 800fd0c <USBH_Get_USB_Status+0x1c>)
 800fd06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd0a:	bf00      	nop
 800fd0c:	0800fd1d 	.word	0x0800fd1d
 800fd10:	0800fd23 	.word	0x0800fd23
 800fd14:	0800fd29 	.word	0x0800fd29
 800fd18:	0800fd2f 	.word	0x0800fd2f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	73fb      	strb	r3, [r7, #15]
    break;
 800fd20:	e00b      	b.n	800fd3a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fd22:	2302      	movs	r3, #2
 800fd24:	73fb      	strb	r3, [r7, #15]
    break;
 800fd26:	e008      	b.n	800fd3a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fd28:	2301      	movs	r3, #1
 800fd2a:	73fb      	strb	r3, [r7, #15]
    break;
 800fd2c:	e005      	b.n	800fd3a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fd2e:	2302      	movs	r3, #2
 800fd30:	73fb      	strb	r3, [r7, #15]
    break;
 800fd32:	e002      	b.n	800fd3a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fd34:	2302      	movs	r3, #2
 800fd36:	73fb      	strb	r3, [r7, #15]
    break;
 800fd38:	bf00      	nop
  }
  return usb_status;
 800fd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3714      	adds	r7, #20
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr

0800fd48 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	4603      	mov	r3, r0
 800fd50:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fd52:	79fb      	ldrb	r3, [r7, #7]
 800fd54:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fd56:	79fb      	ldrb	r3, [r7, #7]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d102      	bne.n	800fd62 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	73fb      	strb	r3, [r7, #15]
 800fd60:	e001      	b.n	800fd66 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800fd62:	2301      	movs	r3, #1
 800fd64:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800fd66:	7bfb      	ldrb	r3, [r7, #15]
 800fd68:	461a      	mov	r2, r3
 800fd6a:	2101      	movs	r1, #1
 800fd6c:	4803      	ldr	r0, [pc, #12]	@ (800fd7c <MX_DriverVbusFS+0x34>)
 800fd6e:	f7f3 f937 	bl	8002fe0 <HAL_GPIO_WritePin>
}
 800fd72:	bf00      	nop
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	40020800 	.word	0x40020800

0800fd80 <rcl_get_zero_initialized_publisher>:
 800fd80:	4b01      	ldr	r3, [pc, #4]	@ (800fd88 <rcl_get_zero_initialized_publisher+0x8>)
 800fd82:	6818      	ldr	r0, [r3, #0]
 800fd84:	4770      	bx	lr
 800fd86:	bf00      	nop
 800fd88:	0801a0e0 	.word	0x0801a0e0

0800fd8c <rcl_publisher_init>:
 800fd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd90:	b088      	sub	sp, #32
 800fd92:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800fd94:	2d00      	cmp	r5, #0
 800fd96:	d069      	beq.n	800fe6c <rcl_publisher_init+0xe0>
 800fd98:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	4648      	mov	r0, r9
 800fda0:	460e      	mov	r6, r1
 800fda2:	4690      	mov	r8, r2
 800fda4:	461f      	mov	r7, r3
 800fda6:	f000 f9d5 	bl	8010154 <rcutils_allocator_is_valid>
 800fdaa:	2800      	cmp	r0, #0
 800fdac:	d05e      	beq.n	800fe6c <rcl_publisher_init+0xe0>
 800fdae:	2c00      	cmp	r4, #0
 800fdb0:	d05c      	beq.n	800fe6c <rcl_publisher_init+0xe0>
 800fdb2:	f8d4 a000 	ldr.w	sl, [r4]
 800fdb6:	f1ba 0f00 	cmp.w	sl, #0
 800fdba:	d004      	beq.n	800fdc6 <rcl_publisher_init+0x3a>
 800fdbc:	2764      	movs	r7, #100	@ 0x64
 800fdbe:	4638      	mov	r0, r7
 800fdc0:	b008      	add	sp, #32
 800fdc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdc6:	4630      	mov	r0, r6
 800fdc8:	f004 ffa4 	bl	8014d14 <rcl_node_is_valid>
 800fdcc:	2800      	cmp	r0, #0
 800fdce:	d052      	beq.n	800fe76 <rcl_publisher_init+0xea>
 800fdd0:	f1b8 0f00 	cmp.w	r8, #0
 800fdd4:	d04a      	beq.n	800fe6c <rcl_publisher_init+0xe0>
 800fdd6:	2f00      	cmp	r7, #0
 800fdd8:	d048      	beq.n	800fe6c <rcl_publisher_init+0xe0>
 800fdda:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800fdde:	aa07      	add	r2, sp, #28
 800fde0:	9205      	str	r2, [sp, #20]
 800fde2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800fde6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fdea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fdee:	f8cd a01c 	str.w	sl, [sp, #28]
 800fdf2:	4639      	mov	r1, r7
 800fdf4:	e899 000c 	ldmia.w	r9, {r2, r3}
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	f004 ffdf 	bl	8014dbc <rcl_node_resolve_name>
 800fdfe:	4607      	mov	r7, r0
 800fe00:	2800      	cmp	r0, #0
 800fe02:	d14f      	bne.n	800fea4 <rcl_publisher_init+0x118>
 800fe04:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800fe06:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800fe08:	20c8      	movs	r0, #200	@ 0xc8
 800fe0a:	4798      	blx	r3
 800fe0c:	6020      	str	r0, [r4, #0]
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d04e      	beq.n	800feb0 <rcl_publisher_init+0x124>
 800fe12:	4630      	mov	r0, r6
 800fe14:	f004 ffa0 	bl	8014d58 <rcl_node_get_rmw_handle>
 800fe18:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800fe1c:	9300      	str	r3, [sp, #0]
 800fe1e:	9a07      	ldr	r2, [sp, #28]
 800fe20:	6827      	ldr	r7, [r4, #0]
 800fe22:	462b      	mov	r3, r5
 800fe24:	4641      	mov	r1, r8
 800fe26:	f000 fa55 	bl	80102d4 <rmw_create_publisher>
 800fe2a:	6823      	ldr	r3, [r4, #0]
 800fe2c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800fe30:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800fe34:	b370      	cbz	r0, 800fe94 <rcl_publisher_init+0x108>
 800fe36:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800fe3a:	f000 fb29 	bl	8010490 <rmw_publisher_get_actual_qos>
 800fe3e:	6823      	ldr	r3, [r4, #0]
 800fe40:	4607      	mov	r7, r0
 800fe42:	b9d0      	cbnz	r0, 800fe7a <rcl_publisher_init+0xee>
 800fe44:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800fe48:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800fe4c:	4629      	mov	r1, r5
 800fe4e:	2270      	movs	r2, #112	@ 0x70
 800fe50:	4618      	mov	r0, r3
 800fe52:	f009 f9fc 	bl	801924e <memcpy>
 800fe56:	6832      	ldr	r2, [r6, #0]
 800fe58:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800fe5c:	9807      	ldr	r0, [sp, #28]
 800fe5e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800fe60:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800fe62:	4798      	blx	r3
 800fe64:	4638      	mov	r0, r7
 800fe66:	b008      	add	sp, #32
 800fe68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe6c:	270b      	movs	r7, #11
 800fe6e:	4638      	mov	r0, r7
 800fe70:	b008      	add	sp, #32
 800fe72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe76:	27c8      	movs	r7, #200	@ 0xc8
 800fe78:	e7a1      	b.n	800fdbe <rcl_publisher_init+0x32>
 800fe7a:	b18b      	cbz	r3, 800fea0 <rcl_publisher_init+0x114>
 800fe7c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800fe80:	b142      	cbz	r2, 800fe94 <rcl_publisher_init+0x108>
 800fe82:	4630      	mov	r0, r6
 800fe84:	f004 ff68 	bl	8014d58 <rcl_node_get_rmw_handle>
 800fe88:	6823      	ldr	r3, [r4, #0]
 800fe8a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800fe8e:	f000 fb0f 	bl	80104b0 <rmw_destroy_publisher>
 800fe92:	6823      	ldr	r3, [r4, #0]
 800fe94:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800fe96:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800fe98:	4618      	mov	r0, r3
 800fe9a:	4790      	blx	r2
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	6023      	str	r3, [r4, #0]
 800fea0:	2701      	movs	r7, #1
 800fea2:	e7db      	b.n	800fe5c <rcl_publisher_init+0xd0>
 800fea4:	2867      	cmp	r0, #103	@ 0x67
 800fea6:	d0d9      	beq.n	800fe5c <rcl_publisher_init+0xd0>
 800fea8:	2869      	cmp	r0, #105	@ 0x69
 800feaa:	d003      	beq.n	800feb4 <rcl_publisher_init+0x128>
 800feac:	280a      	cmp	r0, #10
 800feae:	d1f7      	bne.n	800fea0 <rcl_publisher_init+0x114>
 800feb0:	270a      	movs	r7, #10
 800feb2:	e7d3      	b.n	800fe5c <rcl_publisher_init+0xd0>
 800feb4:	2767      	movs	r7, #103	@ 0x67
 800feb6:	e7d1      	b.n	800fe5c <rcl_publisher_init+0xd0>

0800feb8 <rcl_publisher_get_default_options>:
 800feb8:	b570      	push	{r4, r5, r6, lr}
 800feba:	4d14      	ldr	r5, [pc, #80]	@ (800ff0c <rcl_publisher_get_default_options+0x54>)
 800febc:	4914      	ldr	r1, [pc, #80]	@ (800ff10 <rcl_publisher_get_default_options+0x58>)
 800febe:	b088      	sub	sp, #32
 800fec0:	4604      	mov	r4, r0
 800fec2:	2250      	movs	r2, #80	@ 0x50
 800fec4:	4628      	mov	r0, r5
 800fec6:	f009 f9c2 	bl	801924e <memcpy>
 800feca:	a802      	add	r0, sp, #8
 800fecc:	f000 f934 	bl	8010138 <rcutils_get_default_allocator>
 800fed0:	f10d 0c08 	add.w	ip, sp, #8
 800fed4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fed8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800fedc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fee0:	466e      	mov	r6, sp
 800fee2:	f8dc 3000 	ldr.w	r3, [ip]
 800fee6:	f8ce 3000 	str.w	r3, [lr]
 800feea:	4630      	mov	r0, r6
 800feec:	f000 f974 	bl	80101d8 <rmw_get_default_publisher_options>
 800fef0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fef4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800fef8:	e883 0003 	stmia.w	r3, {r0, r1}
 800fefc:	2270      	movs	r2, #112	@ 0x70
 800fefe:	4629      	mov	r1, r5
 800ff00:	4620      	mov	r0, r4
 800ff02:	f009 f9a4 	bl	801924e <memcpy>
 800ff06:	4620      	mov	r0, r4
 800ff08:	b008      	add	sp, #32
 800ff0a:	bd70      	pop	{r4, r5, r6, pc}
 800ff0c:	20006188 	.word	0x20006188
 800ff10:	0801a0e8 	.word	0x0801a0e8

0800ff14 <rcl_publish>:
 800ff14:	b1f8      	cbz	r0, 800ff56 <rcl_publish+0x42>
 800ff16:	6803      	ldr	r3, [r0, #0]
 800ff18:	b570      	push	{r4, r5, r6, lr}
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	b1b3      	cbz	r3, 800ff4c <rcl_publish+0x38>
 800ff1e:	4616      	mov	r6, r2
 800ff20:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ff24:	b192      	cbz	r2, 800ff4c <rcl_publish+0x38>
 800ff26:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ff2a:	460d      	mov	r5, r1
 800ff2c:	f004 fb2e 	bl	801458c <rcl_context_is_valid>
 800ff30:	b160      	cbz	r0, 800ff4c <rcl_publish+0x38>
 800ff32:	6823      	ldr	r3, [r4, #0]
 800ff34:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ff38:	b140      	cbz	r0, 800ff4c <rcl_publish+0x38>
 800ff3a:	b155      	cbz	r5, 800ff52 <rcl_publish+0x3e>
 800ff3c:	4632      	mov	r2, r6
 800ff3e:	4629      	mov	r1, r5
 800ff40:	f000 f968 	bl	8010214 <rmw_publish>
 800ff44:	3800      	subs	r0, #0
 800ff46:	bf18      	it	ne
 800ff48:	2001      	movne	r0, #1
 800ff4a:	bd70      	pop	{r4, r5, r6, pc}
 800ff4c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ff50:	bd70      	pop	{r4, r5, r6, pc}
 800ff52:	200b      	movs	r0, #11
 800ff54:	bd70      	pop	{r4, r5, r6, pc}
 800ff56:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ff5a:	4770      	bx	lr

0800ff5c <rclc_support_init>:
 800ff5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff60:	b086      	sub	sp, #24
 800ff62:	b3b8      	cbz	r0, 800ffd4 <rclc_support_init+0x78>
 800ff64:	461c      	mov	r4, r3
 800ff66:	b3ab      	cbz	r3, 800ffd4 <rclc_support_init+0x78>
 800ff68:	460f      	mov	r7, r1
 800ff6a:	4690      	mov	r8, r2
 800ff6c:	4606      	mov	r6, r0
 800ff6e:	f004 fc61 	bl	8014834 <rcl_get_zero_initialized_init_options>
 800ff72:	f104 030c 	add.w	r3, r4, #12
 800ff76:	9005      	str	r0, [sp, #20]
 800ff78:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ff7c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ff80:	a805      	add	r0, sp, #20
 800ff82:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ff86:	f004 fc57 	bl	8014838 <rcl_init_options_init>
 800ff8a:	4605      	mov	r5, r0
 800ff8c:	b9e0      	cbnz	r0, 800ffc8 <rclc_support_init+0x6c>
 800ff8e:	ad02      	add	r5, sp, #8
 800ff90:	4628      	mov	r0, r5
 800ff92:	f004 faf1 	bl	8014578 <rcl_get_zero_initialized_context>
 800ff96:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ff9a:	4633      	mov	r3, r6
 800ff9c:	e886 0003 	stmia.w	r6, {r0, r1}
 800ffa0:	aa05      	add	r2, sp, #20
 800ffa2:	4641      	mov	r1, r8
 800ffa4:	4638      	mov	r0, r7
 800ffa6:	f004 fb57 	bl	8014658 <rcl_init>
 800ffaa:	4605      	mov	r5, r0
 800ffac:	b9b8      	cbnz	r0, 800ffde <rclc_support_init+0x82>
 800ffae:	60b4      	str	r4, [r6, #8]
 800ffb0:	4622      	mov	r2, r4
 800ffb2:	f106 010c 	add.w	r1, r6, #12
 800ffb6:	2003      	movs	r0, #3
 800ffb8:	f004 ffc0 	bl	8014f3c <rcl_clock_init>
 800ffbc:	4605      	mov	r5, r0
 800ffbe:	b970      	cbnz	r0, 800ffde <rclc_support_init+0x82>
 800ffc0:	a805      	add	r0, sp, #20
 800ffc2:	f004 fc9f 	bl	8014904 <rcl_init_options_fini>
 800ffc6:	b108      	cbz	r0, 800ffcc <rclc_support_init+0x70>
 800ffc8:	f000 f8ea 	bl	80101a0 <rcutils_reset_error>
 800ffcc:	4628      	mov	r0, r5
 800ffce:	b006      	add	sp, #24
 800ffd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffd4:	250b      	movs	r5, #11
 800ffd6:	4628      	mov	r0, r5
 800ffd8:	b006      	add	sp, #24
 800ffda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffde:	f000 f8df 	bl	80101a0 <rcutils_reset_error>
 800ffe2:	a805      	add	r0, sp, #20
 800ffe4:	f004 fc8e 	bl	8014904 <rcl_init_options_fini>
 800ffe8:	2800      	cmp	r0, #0
 800ffea:	d0ef      	beq.n	800ffcc <rclc_support_init+0x70>
 800ffec:	e7ec      	b.n	800ffc8 <rclc_support_init+0x6c>
 800ffee:	bf00      	nop

0800fff0 <rclc_node_init_default>:
 800fff0:	b3b8      	cbz	r0, 8010062 <rclc_node_init_default+0x72>
 800fff2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fff6:	460d      	mov	r5, r1
 800fff8:	b0a1      	sub	sp, #132	@ 0x84
 800fffa:	b329      	cbz	r1, 8010048 <rclc_node_init_default+0x58>
 800fffc:	4616      	mov	r6, r2
 800fffe:	b31a      	cbz	r2, 8010048 <rclc_node_init_default+0x58>
 8010000:	461f      	mov	r7, r3
 8010002:	b30b      	cbz	r3, 8010048 <rclc_node_init_default+0x58>
 8010004:	f10d 0810 	add.w	r8, sp, #16
 8010008:	4604      	mov	r4, r0
 801000a:	4640      	mov	r0, r8
 801000c:	f004 fd32 	bl	8014a74 <rcl_get_zero_initialized_node>
 8010010:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010014:	f10d 0918 	add.w	r9, sp, #24
 8010018:	e884 0003 	stmia.w	r4, {r0, r1}
 801001c:	4648      	mov	r0, r9
 801001e:	f004 fea1 	bl	8014d64 <rcl_node_get_default_options>
 8010022:	4640      	mov	r0, r8
 8010024:	f004 fd26 	bl	8014a74 <rcl_get_zero_initialized_node>
 8010028:	f8cd 9000 	str.w	r9, [sp]
 801002c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010030:	463b      	mov	r3, r7
 8010032:	e884 0003 	stmia.w	r4, {r0, r1}
 8010036:	4632      	mov	r2, r6
 8010038:	4629      	mov	r1, r5
 801003a:	4620      	mov	r0, r4
 801003c:	f004 fd24 	bl	8014a88 <rcl_node_init>
 8010040:	b930      	cbnz	r0, 8010050 <rclc_node_init_default+0x60>
 8010042:	b021      	add	sp, #132	@ 0x84
 8010044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010048:	200b      	movs	r0, #11
 801004a:	b021      	add	sp, #132	@ 0x84
 801004c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010050:	9003      	str	r0, [sp, #12]
 8010052:	f000 f8a5 	bl	80101a0 <rcutils_reset_error>
 8010056:	f000 f8a3 	bl	80101a0 <rcutils_reset_error>
 801005a:	9803      	ldr	r0, [sp, #12]
 801005c:	b021      	add	sp, #132	@ 0x84
 801005e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010062:	200b      	movs	r0, #11
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop

08010068 <rclc_publisher_init_default>:
 8010068:	b368      	cbz	r0, 80100c6 <rclc_publisher_init_default+0x5e>
 801006a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801006e:	460d      	mov	r5, r1
 8010070:	b0a0      	sub	sp, #128	@ 0x80
 8010072:	b321      	cbz	r1, 80100be <rclc_publisher_init_default+0x56>
 8010074:	4616      	mov	r6, r2
 8010076:	b312      	cbz	r2, 80100be <rclc_publisher_init_default+0x56>
 8010078:	461f      	mov	r7, r3
 801007a:	b303      	cbz	r3, 80100be <rclc_publisher_init_default+0x56>
 801007c:	4604      	mov	r4, r0
 801007e:	f7ff fe7f 	bl	800fd80 <rcl_get_zero_initialized_publisher>
 8010082:	f10d 0810 	add.w	r8, sp, #16
 8010086:	6020      	str	r0, [r4, #0]
 8010088:	4640      	mov	r0, r8
 801008a:	f7ff ff15 	bl	800feb8 <rcl_publisher_get_default_options>
 801008e:	490f      	ldr	r1, [pc, #60]	@ (80100cc <rclc_publisher_init_default+0x64>)
 8010090:	2250      	movs	r2, #80	@ 0x50
 8010092:	4640      	mov	r0, r8
 8010094:	f009 f8db 	bl	801924e <memcpy>
 8010098:	f8cd 8000 	str.w	r8, [sp]
 801009c:	463b      	mov	r3, r7
 801009e:	4632      	mov	r2, r6
 80100a0:	4629      	mov	r1, r5
 80100a2:	4620      	mov	r0, r4
 80100a4:	f7ff fe72 	bl	800fd8c <rcl_publisher_init>
 80100a8:	b910      	cbnz	r0, 80100b0 <rclc_publisher_init_default+0x48>
 80100aa:	b020      	add	sp, #128	@ 0x80
 80100ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b0:	9003      	str	r0, [sp, #12]
 80100b2:	f000 f875 	bl	80101a0 <rcutils_reset_error>
 80100b6:	9803      	ldr	r0, [sp, #12]
 80100b8:	b020      	add	sp, #128	@ 0x80
 80100ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100be:	200b      	movs	r0, #11
 80100c0:	b020      	add	sp, #128	@ 0x80
 80100c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100c6:	200b      	movs	r0, #11
 80100c8:	4770      	bx	lr
 80100ca:	bf00      	nop
 80100cc:	0801a138 	.word	0x0801a138

080100d0 <__default_zero_allocate>:
 80100d0:	f008 bb22 	b.w	8018718 <calloc>

080100d4 <__default_reallocate>:
 80100d4:	f008 bcae 	b.w	8018a34 <realloc>

080100d8 <__default_deallocate>:
 80100d8:	f008 bb8a 	b.w	80187f0 <free>

080100dc <__default_allocate>:
 80100dc:	f008 bb80 	b.w	80187e0 <malloc>

080100e0 <rcutils_get_zero_initialized_allocator>:
 80100e0:	b510      	push	{r4, lr}
 80100e2:	4c05      	ldr	r4, [pc, #20]	@ (80100f8 <rcutils_get_zero_initialized_allocator+0x18>)
 80100e4:	4686      	mov	lr, r0
 80100e6:	4684      	mov	ip, r0
 80100e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80100ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100ee:	6823      	ldr	r3, [r4, #0]
 80100f0:	f8cc 3000 	str.w	r3, [ip]
 80100f4:	4670      	mov	r0, lr
 80100f6:	bd10      	pop	{r4, pc}
 80100f8:	0801a188 	.word	0x0801a188

080100fc <rcutils_set_default_allocator>:
 80100fc:	b1a8      	cbz	r0, 801012a <rcutils_set_default_allocator+0x2e>
 80100fe:	6802      	ldr	r2, [r0, #0]
 8010100:	b1a2      	cbz	r2, 801012c <rcutils_set_default_allocator+0x30>
 8010102:	6841      	ldr	r1, [r0, #4]
 8010104:	b1a1      	cbz	r1, 8010130 <rcutils_set_default_allocator+0x34>
 8010106:	b410      	push	{r4}
 8010108:	68c4      	ldr	r4, [r0, #12]
 801010a:	b164      	cbz	r4, 8010126 <rcutils_set_default_allocator+0x2a>
 801010c:	6880      	ldr	r0, [r0, #8]
 801010e:	b138      	cbz	r0, 8010120 <rcutils_set_default_allocator+0x24>
 8010110:	4b08      	ldr	r3, [pc, #32]	@ (8010134 <rcutils_set_default_allocator+0x38>)
 8010112:	601a      	str	r2, [r3, #0]
 8010114:	2200      	movs	r2, #0
 8010116:	e9c3 4203 	strd	r4, r2, [r3, #12]
 801011a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 801011e:	2001      	movs	r0, #1
 8010120:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010124:	4770      	bx	lr
 8010126:	4620      	mov	r0, r4
 8010128:	e7fa      	b.n	8010120 <rcutils_set_default_allocator+0x24>
 801012a:	4770      	bx	lr
 801012c:	4610      	mov	r0, r2
 801012e:	4770      	bx	lr
 8010130:	4608      	mov	r0, r1
 8010132:	4770      	bx	lr
 8010134:	20000038 	.word	0x20000038

08010138 <rcutils_get_default_allocator>:
 8010138:	b510      	push	{r4, lr}
 801013a:	4c05      	ldr	r4, [pc, #20]	@ (8010150 <rcutils_get_default_allocator+0x18>)
 801013c:	4686      	mov	lr, r0
 801013e:	4684      	mov	ip, r0
 8010140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010142:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010146:	6823      	ldr	r3, [r4, #0]
 8010148:	f8cc 3000 	str.w	r3, [ip]
 801014c:	4670      	mov	r0, lr
 801014e:	bd10      	pop	{r4, pc}
 8010150:	20000038 	.word	0x20000038

08010154 <rcutils_allocator_is_valid>:
 8010154:	b158      	cbz	r0, 801016e <rcutils_allocator_is_valid+0x1a>
 8010156:	6803      	ldr	r3, [r0, #0]
 8010158:	b143      	cbz	r3, 801016c <rcutils_allocator_is_valid+0x18>
 801015a:	6843      	ldr	r3, [r0, #4]
 801015c:	b133      	cbz	r3, 801016c <rcutils_allocator_is_valid+0x18>
 801015e:	68c3      	ldr	r3, [r0, #12]
 8010160:	b123      	cbz	r3, 801016c <rcutils_allocator_is_valid+0x18>
 8010162:	6880      	ldr	r0, [r0, #8]
 8010164:	3800      	subs	r0, #0
 8010166:	bf18      	it	ne
 8010168:	2001      	movne	r0, #1
 801016a:	4770      	bx	lr
 801016c:	4618      	mov	r0, r3
 801016e:	4770      	bx	lr

08010170 <rcutils_get_error_string>:
 8010170:	4b06      	ldr	r3, [pc, #24]	@ (801018c <rcutils_get_error_string+0x1c>)
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	b13b      	cbz	r3, 8010186 <rcutils_get_error_string+0x16>
 8010176:	4b06      	ldr	r3, [pc, #24]	@ (8010190 <rcutils_get_error_string+0x20>)
 8010178:	781a      	ldrb	r2, [r3, #0]
 801017a:	b90a      	cbnz	r2, 8010180 <rcutils_get_error_string+0x10>
 801017c:	2201      	movs	r2, #1
 801017e:	701a      	strb	r2, [r3, #0]
 8010180:	4b04      	ldr	r3, [pc, #16]	@ (8010194 <rcutils_get_error_string+0x24>)
 8010182:	7818      	ldrb	r0, [r3, #0]
 8010184:	4770      	bx	lr
 8010186:	4b04      	ldr	r3, [pc, #16]	@ (8010198 <rcutils_get_error_string+0x28>)
 8010188:	7818      	ldrb	r0, [r3, #0]
 801018a:	4770      	bx	lr
 801018c:	200061f8 	.word	0x200061f8
 8010190:	20006211 	.word	0x20006211
 8010194:	20006210 	.word	0x20006210
 8010198:	0801a19c 	.word	0x0801a19c
 801019c:	00000000 	.word	0x00000000

080101a0 <rcutils_reset_error>:
 80101a0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80101c0 <rcutils_reset_error+0x20>
 80101a4:	4a08      	ldr	r2, [pc, #32]	@ (80101c8 <rcutils_reset_error+0x28>)
 80101a6:	4809      	ldr	r0, [pc, #36]	@ (80101cc <rcutils_reset_error+0x2c>)
 80101a8:	4909      	ldr	r1, [pc, #36]	@ (80101d0 <rcutils_reset_error+0x30>)
 80101aa:	2300      	movs	r3, #0
 80101ac:	8013      	strh	r3, [r2, #0]
 80101ae:	ed82 7b02 	vstr	d7, [r2, #8]
 80101b2:	4a08      	ldr	r2, [pc, #32]	@ (80101d4 <rcutils_reset_error+0x34>)
 80101b4:	7003      	strb	r3, [r0, #0]
 80101b6:	700b      	strb	r3, [r1, #0]
 80101b8:	7013      	strb	r3, [r2, #0]
 80101ba:	4770      	bx	lr
 80101bc:	f3af 8000 	nop.w
	...
 80101c8:	20006200 	.word	0x20006200
 80101cc:	20006211 	.word	0x20006211
 80101d0:	20006210 	.word	0x20006210
 80101d4:	200061f8 	.word	0x200061f8

080101d8 <rmw_get_default_publisher_options>:
 80101d8:	2200      	movs	r2, #0
 80101da:	6002      	str	r2, [r0, #0]
 80101dc:	7102      	strb	r2, [r0, #4]
 80101de:	4770      	bx	lr

080101e0 <rmw_uros_set_custom_transport>:
 80101e0:	b470      	push	{r4, r5, r6}
 80101e2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80101e6:	b162      	cbz	r2, 8010202 <rmw_uros_set_custom_transport+0x22>
 80101e8:	b15b      	cbz	r3, 8010202 <rmw_uros_set_custom_transport+0x22>
 80101ea:	b155      	cbz	r5, 8010202 <rmw_uros_set_custom_transport+0x22>
 80101ec:	b14e      	cbz	r6, 8010202 <rmw_uros_set_custom_transport+0x22>
 80101ee:	4c06      	ldr	r4, [pc, #24]	@ (8010208 <rmw_uros_set_custom_transport+0x28>)
 80101f0:	7020      	strb	r0, [r4, #0]
 80101f2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80101f6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80101fa:	6166      	str	r6, [r4, #20]
 80101fc:	2000      	movs	r0, #0
 80101fe:	bc70      	pop	{r4, r5, r6}
 8010200:	4770      	bx	lr
 8010202:	200b      	movs	r0, #11
 8010204:	bc70      	pop	{r4, r5, r6}
 8010206:	4770      	bx	lr
 8010208:	20006214 	.word	0x20006214

0801020c <flush_session>:
 801020c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801020e:	f002 bb3d 	b.w	801288c <uxr_run_session_until_confirm_delivery>
 8010212:	bf00      	nop

08010214 <rmw_publish>:
 8010214:	2800      	cmp	r0, #0
 8010216:	d053      	beq.n	80102c0 <rmw_publish+0xac>
 8010218:	b570      	push	{r4, r5, r6, lr}
 801021a:	460d      	mov	r5, r1
 801021c:	b08e      	sub	sp, #56	@ 0x38
 801021e:	2900      	cmp	r1, #0
 8010220:	d04b      	beq.n	80102ba <rmw_publish+0xa6>
 8010222:	4604      	mov	r4, r0
 8010224:	6800      	ldr	r0, [r0, #0]
 8010226:	f000 fc47 	bl	8010ab8 <is_uxrce_rmw_identifier_valid>
 801022a:	2800      	cmp	r0, #0
 801022c:	d045      	beq.n	80102ba <rmw_publish+0xa6>
 801022e:	6866      	ldr	r6, [r4, #4]
 8010230:	2e00      	cmp	r6, #0
 8010232:	d042      	beq.n	80102ba <rmw_publish+0xa6>
 8010234:	69b4      	ldr	r4, [r6, #24]
 8010236:	4628      	mov	r0, r5
 8010238:	6923      	ldr	r3, [r4, #16]
 801023a:	4798      	blx	r3
 801023c:	69f3      	ldr	r3, [r6, #28]
 801023e:	9005      	str	r0, [sp, #20]
 8010240:	b113      	cbz	r3, 8010248 <rmw_publish+0x34>
 8010242:	a805      	add	r0, sp, #20
 8010244:	4798      	blx	r3
 8010246:	9805      	ldr	r0, [sp, #20]
 8010248:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801024c:	691b      	ldr	r3, [r3, #16]
 801024e:	9000      	str	r0, [sp, #0]
 8010250:	6972      	ldr	r2, [r6, #20]
 8010252:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8010254:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010258:	ab06      	add	r3, sp, #24
 801025a:	f003 f903 	bl	8013464 <uxr_prepare_output_stream>
 801025e:	b1d8      	cbz	r0, 8010298 <rmw_publish+0x84>
 8010260:	68a3      	ldr	r3, [r4, #8]
 8010262:	a906      	add	r1, sp, #24
 8010264:	4628      	mov	r0, r5
 8010266:	4798      	blx	r3
 8010268:	6a33      	ldr	r3, [r6, #32]
 801026a:	4604      	mov	r4, r0
 801026c:	b10b      	cbz	r3, 8010272 <rmw_publish+0x5e>
 801026e:	a806      	add	r0, sp, #24
 8010270:	4798      	blx	r3
 8010272:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8010276:	2b01      	cmp	r3, #1
 8010278:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801027c:	d022      	beq.n	80102c4 <rmw_publish+0xb0>
 801027e:	6918      	ldr	r0, [r3, #16]
 8010280:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8010282:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010286:	f002 fb01 	bl	801288c <uxr_run_session_until_confirm_delivery>
 801028a:	4020      	ands	r0, r4
 801028c:	b2c4      	uxtb	r4, r0
 801028e:	f084 0001 	eor.w	r0, r4, #1
 8010292:	b2c0      	uxtb	r0, r0
 8010294:	b00e      	add	sp, #56	@ 0x38
 8010296:	bd70      	pop	{r4, r5, r6, pc}
 8010298:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801029c:	6918      	ldr	r0, [r3, #16]
 801029e:	9b05      	ldr	r3, [sp, #20]
 80102a0:	9300      	str	r3, [sp, #0]
 80102a2:	4b0b      	ldr	r3, [pc, #44]	@ (80102d0 <rmw_publish+0xbc>)
 80102a4:	9301      	str	r3, [sp, #4]
 80102a6:	9602      	str	r6, [sp, #8]
 80102a8:	6972      	ldr	r2, [r6, #20]
 80102aa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80102ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80102b0:	ab06      	add	r3, sp, #24
 80102b2:	f003 f907 	bl	80134c4 <uxr_prepare_output_stream_fragmented>
 80102b6:	2800      	cmp	r0, #0
 80102b8:	d1d2      	bne.n	8010260 <rmw_publish+0x4c>
 80102ba:	2001      	movs	r0, #1
 80102bc:	b00e      	add	sp, #56	@ 0x38
 80102be:	bd70      	pop	{r4, r5, r6, pc}
 80102c0:	2001      	movs	r0, #1
 80102c2:	4770      	bx	lr
 80102c4:	6918      	ldr	r0, [r3, #16]
 80102c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80102ca:	f001 ff59 	bl	8012180 <uxr_flash_output_streams>
 80102ce:	e7de      	b.n	801028e <rmw_publish+0x7a>
 80102d0:	0801020d 	.word	0x0801020d

080102d4 <rmw_create_publisher>:
 80102d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102d8:	b087      	sub	sp, #28
 80102da:	2800      	cmp	r0, #0
 80102dc:	f000 80cc 	beq.w	8010478 <rmw_create_publisher+0x1a4>
 80102e0:	460e      	mov	r6, r1
 80102e2:	2900      	cmp	r1, #0
 80102e4:	f000 80c8 	beq.w	8010478 <rmw_create_publisher+0x1a4>
 80102e8:	4604      	mov	r4, r0
 80102ea:	6800      	ldr	r0, [r0, #0]
 80102ec:	4615      	mov	r5, r2
 80102ee:	4698      	mov	r8, r3
 80102f0:	f000 fbe2 	bl	8010ab8 <is_uxrce_rmw_identifier_valid>
 80102f4:	2800      	cmp	r0, #0
 80102f6:	f000 80bf 	beq.w	8010478 <rmw_create_publisher+0x1a4>
 80102fa:	2d00      	cmp	r5, #0
 80102fc:	f000 80bc 	beq.w	8010478 <rmw_create_publisher+0x1a4>
 8010300:	782b      	ldrb	r3, [r5, #0]
 8010302:	2b00      	cmp	r3, #0
 8010304:	f000 80b8 	beq.w	8010478 <rmw_create_publisher+0x1a4>
 8010308:	f1b8 0f00 	cmp.w	r8, #0
 801030c:	f000 80b4 	beq.w	8010478 <rmw_create_publisher+0x1a4>
 8010310:	485c      	ldr	r0, [pc, #368]	@ (8010484 <rmw_create_publisher+0x1b0>)
 8010312:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010316:	f005 fb0f 	bl	8015938 <get_memory>
 801031a:	2800      	cmp	r0, #0
 801031c:	f000 80ac 	beq.w	8010478 <rmw_create_publisher+0x1a4>
 8010320:	6884      	ldr	r4, [r0, #8]
 8010322:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8010326:	f005 fb2b 	bl	8015980 <rmw_get_implementation_identifier>
 801032a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 801032e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8010332:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8010336:	4628      	mov	r0, r5
 8010338:	f7ef ff54 	bl	80001e4 <strlen>
 801033c:	3001      	adds	r0, #1
 801033e:	283c      	cmp	r0, #60	@ 0x3c
 8010340:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 8010344:	f200 8091 	bhi.w	801046a <rmw_create_publisher+0x196>
 8010348:	4a4f      	ldr	r2, [pc, #316]	@ (8010488 <rmw_create_publisher+0x1b4>)
 801034a:	462b      	mov	r3, r5
 801034c:	213c      	movs	r1, #60	@ 0x3c
 801034e:	4650      	mov	r0, sl
 8010350:	f008 fd50 	bl	8018df4 <sniprintf>
 8010354:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010358:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801035a:	4641      	mov	r1, r8
 801035c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8010360:	2250      	movs	r2, #80	@ 0x50
 8010362:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010366:	f008 ff72 	bl	801924e <memcpy>
 801036a:	f898 3008 	ldrb.w	r3, [r8, #8]
 801036e:	4947      	ldr	r1, [pc, #284]	@ (801048c <rmw_create_publisher+0x1b8>)
 8010370:	2b02      	cmp	r3, #2
 8010372:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010376:	bf0c      	ite	eq
 8010378:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 801037c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8010380:	67a3      	str	r3, [r4, #120]	@ 0x78
 8010382:	2300      	movs	r3, #0
 8010384:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010388:	4630      	mov	r0, r6
 801038a:	f000 fba3 	bl	8010ad4 <get_message_typesupport_handle>
 801038e:	2800      	cmp	r0, #0
 8010390:	d06b      	beq.n	801046a <rmw_create_publisher+0x196>
 8010392:	6842      	ldr	r2, [r0, #4]
 8010394:	61a2      	str	r2, [r4, #24]
 8010396:	2a00      	cmp	r2, #0
 8010398:	d067      	beq.n	801046a <rmw_create_publisher+0x196>
 801039a:	4629      	mov	r1, r5
 801039c:	4643      	mov	r3, r8
 801039e:	4648      	mov	r0, r9
 80103a0:	f005 fd7e 	bl	8015ea0 <create_topic>
 80103a4:	6260      	str	r0, [r4, #36]	@ 0x24
 80103a6:	2800      	cmp	r0, #0
 80103a8:	d063      	beq.n	8010472 <rmw_create_publisher+0x19e>
 80103aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80103b2:	2103      	movs	r1, #3
 80103b4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80103b8:	1c42      	adds	r2, r0, #1
 80103ba:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80103be:	f001 fd91 	bl	8011ee4 <uxr_object_id>
 80103c2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80103c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103ca:	6120      	str	r0, [r4, #16]
 80103cc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80103d0:	6910      	ldr	r0, [r2, #16]
 80103d2:	2506      	movs	r5, #6
 80103d4:	9500      	str	r5, [sp, #0]
 80103d6:	6819      	ldr	r1, [r3, #0]
 80103d8:	6922      	ldr	r2, [r4, #16]
 80103da:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80103de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80103e2:	f001 fcd9 	bl	8011d98 <uxr_buffer_create_publisher_bin>
 80103e6:	4602      	mov	r2, r0
 80103e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80103ec:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80103f0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80103f4:	f000 fae0 	bl	80109b8 <run_xrce_session>
 80103f8:	b3b8      	cbz	r0, 801046a <rmw_create_publisher+0x196>
 80103fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010402:	2105      	movs	r1, #5
 8010404:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8010408:	1c42      	adds	r2, r0, #1
 801040a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801040e:	f001 fd69 	bl	8011ee4 <uxr_object_id>
 8010412:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010416:	6160      	str	r0, [r4, #20]
 8010418:	691e      	ldr	r6, [r3, #16]
 801041a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801041e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8010422:	f10d 0a10 	add.w	sl, sp, #16
 8010426:	4641      	mov	r1, r8
 8010428:	4650      	mov	r0, sl
 801042a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 801042e:	f000 fadf 	bl	80109f0 <convert_qos_profile>
 8010432:	9503      	str	r5, [sp, #12]
 8010434:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8010438:	9001      	str	r0, [sp, #4]
 801043a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801043e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010442:	9300      	str	r3, [sp, #0]
 8010444:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8010448:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801044c:	f8d8 1000 	ldr.w	r1, [r8]
 8010450:	4630      	mov	r0, r6
 8010452:	f001 fcd1 	bl	8011df8 <uxr_buffer_create_datawriter_bin>
 8010456:	4602      	mov	r2, r0
 8010458:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801045c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010460:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010464:	f000 faa8 	bl	80109b8 <run_xrce_session>
 8010468:	b938      	cbnz	r0, 801047a <rmw_create_publisher+0x1a6>
 801046a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801046c:	b108      	cbz	r0, 8010472 <rmw_create_publisher+0x19e>
 801046e:	f000 fa47 	bl	8010900 <rmw_uxrce_fini_topic_memory>
 8010472:	4638      	mov	r0, r7
 8010474:	f000 f9ec 	bl	8010850 <rmw_uxrce_fini_publisher_memory>
 8010478:	2700      	movs	r7, #0
 801047a:	4638      	mov	r0, r7
 801047c:	b007      	add	sp, #28
 801047e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010482:	bf00      	nop
 8010484:	2000ab0c 	.word	0x2000ab0c
 8010488:	0801a1d4 	.word	0x0801a1d4
 801048c:	0801a1a0 	.word	0x0801a1a0

08010490 <rmw_publisher_get_actual_qos>:
 8010490:	b150      	cbz	r0, 80104a8 <rmw_publisher_get_actual_qos+0x18>
 8010492:	b508      	push	{r3, lr}
 8010494:	460b      	mov	r3, r1
 8010496:	b149      	cbz	r1, 80104ac <rmw_publisher_get_actual_qos+0x1c>
 8010498:	6841      	ldr	r1, [r0, #4]
 801049a:	2250      	movs	r2, #80	@ 0x50
 801049c:	3128      	adds	r1, #40	@ 0x28
 801049e:	4618      	mov	r0, r3
 80104a0:	f008 fed5 	bl	801924e <memcpy>
 80104a4:	2000      	movs	r0, #0
 80104a6:	bd08      	pop	{r3, pc}
 80104a8:	200b      	movs	r0, #11
 80104aa:	4770      	bx	lr
 80104ac:	200b      	movs	r0, #11
 80104ae:	bd08      	pop	{r3, pc}

080104b0 <rmw_destroy_publisher>:
 80104b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104b2:	b128      	cbz	r0, 80104c0 <rmw_destroy_publisher+0x10>
 80104b4:	4604      	mov	r4, r0
 80104b6:	6800      	ldr	r0, [r0, #0]
 80104b8:	460d      	mov	r5, r1
 80104ba:	f000 fafd 	bl	8010ab8 <is_uxrce_rmw_identifier_valid>
 80104be:	b910      	cbnz	r0, 80104c6 <rmw_destroy_publisher+0x16>
 80104c0:	2401      	movs	r4, #1
 80104c2:	4620      	mov	r0, r4
 80104c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104c6:	6863      	ldr	r3, [r4, #4]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d0f9      	beq.n	80104c0 <rmw_destroy_publisher+0x10>
 80104cc:	2d00      	cmp	r5, #0
 80104ce:	d0f7      	beq.n	80104c0 <rmw_destroy_publisher+0x10>
 80104d0:	6828      	ldr	r0, [r5, #0]
 80104d2:	f000 faf1 	bl	8010ab8 <is_uxrce_rmw_identifier_valid>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	d0f2      	beq.n	80104c0 <rmw_destroy_publisher+0x10>
 80104da:	686c      	ldr	r4, [r5, #4]
 80104dc:	2c00      	cmp	r4, #0
 80104de:	d0ef      	beq.n	80104c0 <rmw_destroy_publisher+0x10>
 80104e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80104e2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 80104e6:	f005 fd2b 	bl	8015f40 <destroy_topic>
 80104ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80104ee:	6962      	ldr	r2, [r4, #20]
 80104f0:	6918      	ldr	r0, [r3, #16]
 80104f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80104f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80104fa:	6819      	ldr	r1, [r3, #0]
 80104fc:	f001 fb98 	bl	8011c30 <uxr_buffer_delete_entity>
 8010500:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010504:	6922      	ldr	r2, [r4, #16]
 8010506:	691b      	ldr	r3, [r3, #16]
 8010508:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 801050c:	4604      	mov	r4, r0
 801050e:	6809      	ldr	r1, [r1, #0]
 8010510:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010514:	f001 fb8c 	bl	8011c30 <uxr_buffer_delete_entity>
 8010518:	693e      	ldr	r6, [r7, #16]
 801051a:	4622      	mov	r2, r4
 801051c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8010520:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010524:	4604      	mov	r4, r0
 8010526:	4630      	mov	r0, r6
 8010528:	f000 fa46 	bl	80109b8 <run_xrce_session>
 801052c:	693e      	ldr	r6, [r7, #16]
 801052e:	4622      	mov	r2, r4
 8010530:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8010534:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010538:	4604      	mov	r4, r0
 801053a:	4630      	mov	r0, r6
 801053c:	f000 fa3c 	bl	80109b8 <run_xrce_session>
 8010540:	b12c      	cbz	r4, 801054e <rmw_destroy_publisher+0x9e>
 8010542:	b120      	cbz	r0, 801054e <rmw_destroy_publisher+0x9e>
 8010544:	2400      	movs	r4, #0
 8010546:	4628      	mov	r0, r5
 8010548:	f000 f982 	bl	8010850 <rmw_uxrce_fini_publisher_memory>
 801054c:	e7b9      	b.n	80104c2 <rmw_destroy_publisher+0x12>
 801054e:	2402      	movs	r4, #2
 8010550:	e7f9      	b.n	8010546 <rmw_destroy_publisher+0x96>
 8010552:	bf00      	nop

08010554 <rmw_uxrce_init_service_memory>:
 8010554:	b1e2      	cbz	r2, 8010590 <rmw_uxrce_init_service_memory+0x3c>
 8010556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801055a:	7b05      	ldrb	r5, [r0, #12]
 801055c:	4606      	mov	r6, r0
 801055e:	b9ad      	cbnz	r5, 801058c <rmw_uxrce_init_service_memory+0x38>
 8010560:	23c8      	movs	r3, #200	@ 0xc8
 8010562:	e9c0 5500 	strd	r5, r5, [r0]
 8010566:	6083      	str	r3, [r0, #8]
 8010568:	f240 1301 	movw	r3, #257	@ 0x101
 801056c:	4617      	mov	r7, r2
 801056e:	8183      	strh	r3, [r0, #12]
 8010570:	460c      	mov	r4, r1
 8010572:	46a8      	mov	r8, r5
 8010574:	4621      	mov	r1, r4
 8010576:	4630      	mov	r0, r6
 8010578:	3501      	adds	r5, #1
 801057a:	f005 f9ed 	bl	8015958 <put_memory>
 801057e:	42af      	cmp	r7, r5
 8010580:	60a4      	str	r4, [r4, #8]
 8010582:	f884 800c 	strb.w	r8, [r4, #12]
 8010586:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801058a:	d1f3      	bne.n	8010574 <rmw_uxrce_init_service_memory+0x20>
 801058c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop

08010594 <rmw_uxrce_init_client_memory>:
 8010594:	b1e2      	cbz	r2, 80105d0 <rmw_uxrce_init_client_memory+0x3c>
 8010596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801059a:	7b05      	ldrb	r5, [r0, #12]
 801059c:	4606      	mov	r6, r0
 801059e:	b9ad      	cbnz	r5, 80105cc <rmw_uxrce_init_client_memory+0x38>
 80105a0:	23c8      	movs	r3, #200	@ 0xc8
 80105a2:	e9c0 5500 	strd	r5, r5, [r0]
 80105a6:	6083      	str	r3, [r0, #8]
 80105a8:	f240 1301 	movw	r3, #257	@ 0x101
 80105ac:	4617      	mov	r7, r2
 80105ae:	8183      	strh	r3, [r0, #12]
 80105b0:	460c      	mov	r4, r1
 80105b2:	46a8      	mov	r8, r5
 80105b4:	4621      	mov	r1, r4
 80105b6:	4630      	mov	r0, r6
 80105b8:	3501      	adds	r5, #1
 80105ba:	f005 f9cd 	bl	8015958 <put_memory>
 80105be:	42af      	cmp	r7, r5
 80105c0:	60a4      	str	r4, [r4, #8]
 80105c2:	f884 800c 	strb.w	r8, [r4, #12]
 80105c6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80105ca:	d1f3      	bne.n	80105b4 <rmw_uxrce_init_client_memory+0x20>
 80105cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105d0:	4770      	bx	lr
 80105d2:	bf00      	nop

080105d4 <rmw_uxrce_init_publisher_memory>:
 80105d4:	b1e2      	cbz	r2, 8010610 <rmw_uxrce_init_publisher_memory+0x3c>
 80105d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105da:	7b05      	ldrb	r5, [r0, #12]
 80105dc:	4606      	mov	r6, r0
 80105de:	b9ad      	cbnz	r5, 801060c <rmw_uxrce_init_publisher_memory+0x38>
 80105e0:	23d8      	movs	r3, #216	@ 0xd8
 80105e2:	e9c0 5500 	strd	r5, r5, [r0]
 80105e6:	6083      	str	r3, [r0, #8]
 80105e8:	f240 1301 	movw	r3, #257	@ 0x101
 80105ec:	4617      	mov	r7, r2
 80105ee:	8183      	strh	r3, [r0, #12]
 80105f0:	460c      	mov	r4, r1
 80105f2:	46a8      	mov	r8, r5
 80105f4:	4621      	mov	r1, r4
 80105f6:	4630      	mov	r0, r6
 80105f8:	3501      	adds	r5, #1
 80105fa:	f005 f9ad 	bl	8015958 <put_memory>
 80105fe:	42af      	cmp	r7, r5
 8010600:	60a4      	str	r4, [r4, #8]
 8010602:	f884 800c 	strb.w	r8, [r4, #12]
 8010606:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801060a:	d1f3      	bne.n	80105f4 <rmw_uxrce_init_publisher_memory+0x20>
 801060c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010610:	4770      	bx	lr
 8010612:	bf00      	nop

08010614 <rmw_uxrce_init_subscription_memory>:
 8010614:	b1e2      	cbz	r2, 8010650 <rmw_uxrce_init_subscription_memory+0x3c>
 8010616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801061a:	7b05      	ldrb	r5, [r0, #12]
 801061c:	4606      	mov	r6, r0
 801061e:	b9ad      	cbnz	r5, 801064c <rmw_uxrce_init_subscription_memory+0x38>
 8010620:	23d8      	movs	r3, #216	@ 0xd8
 8010622:	e9c0 5500 	strd	r5, r5, [r0]
 8010626:	6083      	str	r3, [r0, #8]
 8010628:	f240 1301 	movw	r3, #257	@ 0x101
 801062c:	4617      	mov	r7, r2
 801062e:	8183      	strh	r3, [r0, #12]
 8010630:	460c      	mov	r4, r1
 8010632:	46a8      	mov	r8, r5
 8010634:	4621      	mov	r1, r4
 8010636:	4630      	mov	r0, r6
 8010638:	3501      	adds	r5, #1
 801063a:	f005 f98d 	bl	8015958 <put_memory>
 801063e:	42af      	cmp	r7, r5
 8010640:	60a4      	str	r4, [r4, #8]
 8010642:	f884 800c 	strb.w	r8, [r4, #12]
 8010646:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801064a:	d1f3      	bne.n	8010634 <rmw_uxrce_init_subscription_memory+0x20>
 801064c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010650:	4770      	bx	lr
 8010652:	bf00      	nop

08010654 <rmw_uxrce_init_node_memory>:
 8010654:	b1e2      	cbz	r2, 8010690 <rmw_uxrce_init_node_memory+0x3c>
 8010656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801065a:	7b05      	ldrb	r5, [r0, #12]
 801065c:	4606      	mov	r6, r0
 801065e:	b9ad      	cbnz	r5, 801068c <rmw_uxrce_init_node_memory+0x38>
 8010660:	23a4      	movs	r3, #164	@ 0xa4
 8010662:	e9c0 5500 	strd	r5, r5, [r0]
 8010666:	6083      	str	r3, [r0, #8]
 8010668:	f240 1301 	movw	r3, #257	@ 0x101
 801066c:	4617      	mov	r7, r2
 801066e:	8183      	strh	r3, [r0, #12]
 8010670:	460c      	mov	r4, r1
 8010672:	46a8      	mov	r8, r5
 8010674:	4621      	mov	r1, r4
 8010676:	4630      	mov	r0, r6
 8010678:	3501      	adds	r5, #1
 801067a:	f005 f96d 	bl	8015958 <put_memory>
 801067e:	42af      	cmp	r7, r5
 8010680:	60a4      	str	r4, [r4, #8]
 8010682:	f884 800c 	strb.w	r8, [r4, #12]
 8010686:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 801068a:	d1f3      	bne.n	8010674 <rmw_uxrce_init_node_memory+0x20>
 801068c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010690:	4770      	bx	lr
 8010692:	bf00      	nop

08010694 <rmw_uxrce_init_session_memory>:
 8010694:	b1ea      	cbz	r2, 80106d2 <rmw_uxrce_init_session_memory+0x3e>
 8010696:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801069a:	7b05      	ldrb	r5, [r0, #12]
 801069c:	4606      	mov	r6, r0
 801069e:	b9b5      	cbnz	r5, 80106ce <rmw_uxrce_init_session_memory+0x3a>
 80106a0:	e9c0 5500 	strd	r5, r5, [r0]
 80106a4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 80106a8:	f240 1301 	movw	r3, #257	@ 0x101
 80106ac:	4617      	mov	r7, r2
 80106ae:	f8c0 8008 	str.w	r8, [r0, #8]
 80106b2:	460c      	mov	r4, r1
 80106b4:	8183      	strh	r3, [r0, #12]
 80106b6:	46a9      	mov	r9, r5
 80106b8:	4621      	mov	r1, r4
 80106ba:	4630      	mov	r0, r6
 80106bc:	3501      	adds	r5, #1
 80106be:	f005 f94b 	bl	8015958 <put_memory>
 80106c2:	42af      	cmp	r7, r5
 80106c4:	60a4      	str	r4, [r4, #8]
 80106c6:	f884 900c 	strb.w	r9, [r4, #12]
 80106ca:	4444      	add	r4, r8
 80106cc:	d1f4      	bne.n	80106b8 <rmw_uxrce_init_session_memory+0x24>
 80106ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106d2:	4770      	bx	lr

080106d4 <rmw_uxrce_init_topic_memory>:
 80106d4:	b1e2      	cbz	r2, 8010710 <rmw_uxrce_init_topic_memory+0x3c>
 80106d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106da:	7b05      	ldrb	r5, [r0, #12]
 80106dc:	4606      	mov	r6, r0
 80106de:	b9ad      	cbnz	r5, 801070c <rmw_uxrce_init_topic_memory+0x38>
 80106e0:	231c      	movs	r3, #28
 80106e2:	e9c0 5500 	strd	r5, r5, [r0]
 80106e6:	6083      	str	r3, [r0, #8]
 80106e8:	f240 1301 	movw	r3, #257	@ 0x101
 80106ec:	4617      	mov	r7, r2
 80106ee:	8183      	strh	r3, [r0, #12]
 80106f0:	460c      	mov	r4, r1
 80106f2:	46a8      	mov	r8, r5
 80106f4:	4621      	mov	r1, r4
 80106f6:	4630      	mov	r0, r6
 80106f8:	3501      	adds	r5, #1
 80106fa:	f005 f92d 	bl	8015958 <put_memory>
 80106fe:	42af      	cmp	r7, r5
 8010700:	60a4      	str	r4, [r4, #8]
 8010702:	f884 800c 	strb.w	r8, [r4, #12]
 8010706:	f104 041c 	add.w	r4, r4, #28
 801070a:	d1f3      	bne.n	80106f4 <rmw_uxrce_init_topic_memory+0x20>
 801070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010710:	4770      	bx	lr
 8010712:	bf00      	nop

08010714 <rmw_uxrce_init_static_input_buffer_memory>:
 8010714:	b1ea      	cbz	r2, 8010752 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8010716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801071a:	7b05      	ldrb	r5, [r0, #12]
 801071c:	4606      	mov	r6, r0
 801071e:	b9b5      	cbnz	r5, 801074e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8010720:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8010724:	e9c0 5500 	strd	r5, r5, [r0]
 8010728:	6083      	str	r3, [r0, #8]
 801072a:	f240 1301 	movw	r3, #257	@ 0x101
 801072e:	4617      	mov	r7, r2
 8010730:	8183      	strh	r3, [r0, #12]
 8010732:	460c      	mov	r4, r1
 8010734:	46a8      	mov	r8, r5
 8010736:	4621      	mov	r1, r4
 8010738:	4630      	mov	r0, r6
 801073a:	3501      	adds	r5, #1
 801073c:	f005 f90c 	bl	8015958 <put_memory>
 8010740:	42af      	cmp	r7, r5
 8010742:	60a4      	str	r4, [r4, #8]
 8010744:	f884 800c 	strb.w	r8, [r4, #12]
 8010748:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 801074c:	d1f3      	bne.n	8010736 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801074e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010752:	4770      	bx	lr

08010754 <rmw_uxrce_init_init_options_impl_memory>:
 8010754:	b1e2      	cbz	r2, 8010790 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8010756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801075a:	7b05      	ldrb	r5, [r0, #12]
 801075c:	4606      	mov	r6, r0
 801075e:	b9ad      	cbnz	r5, 801078c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010760:	232c      	movs	r3, #44	@ 0x2c
 8010762:	e9c0 5500 	strd	r5, r5, [r0]
 8010766:	6083      	str	r3, [r0, #8]
 8010768:	f240 1301 	movw	r3, #257	@ 0x101
 801076c:	4617      	mov	r7, r2
 801076e:	8183      	strh	r3, [r0, #12]
 8010770:	460c      	mov	r4, r1
 8010772:	46a8      	mov	r8, r5
 8010774:	4621      	mov	r1, r4
 8010776:	4630      	mov	r0, r6
 8010778:	3501      	adds	r5, #1
 801077a:	f005 f8ed 	bl	8015958 <put_memory>
 801077e:	42af      	cmp	r7, r5
 8010780:	60a4      	str	r4, [r4, #8]
 8010782:	f884 800c 	strb.w	r8, [r4, #12]
 8010786:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801078a:	d1f3      	bne.n	8010774 <rmw_uxrce_init_init_options_impl_memory+0x20>
 801078c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010790:	4770      	bx	lr
 8010792:	bf00      	nop

08010794 <rmw_uxrce_init_wait_set_memory>:
 8010794:	b1e2      	cbz	r2, 80107d0 <rmw_uxrce_init_wait_set_memory+0x3c>
 8010796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801079a:	7b05      	ldrb	r5, [r0, #12]
 801079c:	4606      	mov	r6, r0
 801079e:	b9ad      	cbnz	r5, 80107cc <rmw_uxrce_init_wait_set_memory+0x38>
 80107a0:	231c      	movs	r3, #28
 80107a2:	e9c0 5500 	strd	r5, r5, [r0]
 80107a6:	6083      	str	r3, [r0, #8]
 80107a8:	f240 1301 	movw	r3, #257	@ 0x101
 80107ac:	4617      	mov	r7, r2
 80107ae:	8183      	strh	r3, [r0, #12]
 80107b0:	460c      	mov	r4, r1
 80107b2:	46a8      	mov	r8, r5
 80107b4:	4621      	mov	r1, r4
 80107b6:	4630      	mov	r0, r6
 80107b8:	3501      	adds	r5, #1
 80107ba:	f005 f8cd 	bl	8015958 <put_memory>
 80107be:	42af      	cmp	r7, r5
 80107c0:	60a4      	str	r4, [r4, #8]
 80107c2:	f884 800c 	strb.w	r8, [r4, #12]
 80107c6:	f104 041c 	add.w	r4, r4, #28
 80107ca:	d1f3      	bne.n	80107b4 <rmw_uxrce_init_wait_set_memory+0x20>
 80107cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107d0:	4770      	bx	lr
 80107d2:	bf00      	nop

080107d4 <rmw_uxrce_init_guard_condition_memory>:
 80107d4:	b1e2      	cbz	r2, 8010810 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80107d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107da:	7b05      	ldrb	r5, [r0, #12]
 80107dc:	4606      	mov	r6, r0
 80107de:	b9ad      	cbnz	r5, 801080c <rmw_uxrce_init_guard_condition_memory+0x38>
 80107e0:	2320      	movs	r3, #32
 80107e2:	e9c0 5500 	strd	r5, r5, [r0]
 80107e6:	6083      	str	r3, [r0, #8]
 80107e8:	f240 1301 	movw	r3, #257	@ 0x101
 80107ec:	4617      	mov	r7, r2
 80107ee:	8183      	strh	r3, [r0, #12]
 80107f0:	460c      	mov	r4, r1
 80107f2:	46a8      	mov	r8, r5
 80107f4:	4621      	mov	r1, r4
 80107f6:	4630      	mov	r0, r6
 80107f8:	3501      	adds	r5, #1
 80107fa:	f005 f8ad 	bl	8015958 <put_memory>
 80107fe:	42af      	cmp	r7, r5
 8010800:	60a4      	str	r4, [r4, #8]
 8010802:	f884 800c 	strb.w	r8, [r4, #12]
 8010806:	f104 0420 	add.w	r4, r4, #32
 801080a:	d1f3      	bne.n	80107f4 <rmw_uxrce_init_guard_condition_memory+0x20>
 801080c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010810:	4770      	bx	lr
 8010812:	bf00      	nop

08010814 <rmw_uxrce_fini_session_memory>:
 8010814:	4601      	mov	r1, r0
 8010816:	4801      	ldr	r0, [pc, #4]	@ (801081c <rmw_uxrce_fini_session_memory+0x8>)
 8010818:	f005 b89e 	b.w	8015958 <put_memory>
 801081c:	2000ab2c 	.word	0x2000ab2c

08010820 <rmw_uxrce_fini_node_memory>:
 8010820:	b538      	push	{r3, r4, r5, lr}
 8010822:	4604      	mov	r4, r0
 8010824:	6800      	ldr	r0, [r0, #0]
 8010826:	b128      	cbz	r0, 8010834 <rmw_uxrce_fini_node_memory+0x14>
 8010828:	4b07      	ldr	r3, [pc, #28]	@ (8010848 <rmw_uxrce_fini_node_memory+0x28>)
 801082a:	6819      	ldr	r1, [r3, #0]
 801082c:	f7ef fcd0 	bl	80001d0 <strcmp>
 8010830:	b940      	cbnz	r0, 8010844 <rmw_uxrce_fini_node_memory+0x24>
 8010832:	6020      	str	r0, [r4, #0]
 8010834:	6861      	ldr	r1, [r4, #4]
 8010836:	b129      	cbz	r1, 8010844 <rmw_uxrce_fini_node_memory+0x24>
 8010838:	2500      	movs	r5, #0
 801083a:	4804      	ldr	r0, [pc, #16]	@ (801084c <rmw_uxrce_fini_node_memory+0x2c>)
 801083c:	610d      	str	r5, [r1, #16]
 801083e:	f005 f88b 	bl	8015958 <put_memory>
 8010842:	6065      	str	r5, [r4, #4]
 8010844:	bd38      	pop	{r3, r4, r5, pc}
 8010846:	bf00      	nop
 8010848:	0801a6dc 	.word	0x0801a6dc
 801084c:	2000aafc 	.word	0x2000aafc

08010850 <rmw_uxrce_fini_publisher_memory>:
 8010850:	b510      	push	{r4, lr}
 8010852:	4604      	mov	r4, r0
 8010854:	6800      	ldr	r0, [r0, #0]
 8010856:	b128      	cbz	r0, 8010864 <rmw_uxrce_fini_publisher_memory+0x14>
 8010858:	4b06      	ldr	r3, [pc, #24]	@ (8010874 <rmw_uxrce_fini_publisher_memory+0x24>)
 801085a:	6819      	ldr	r1, [r3, #0]
 801085c:	f7ef fcb8 	bl	80001d0 <strcmp>
 8010860:	b938      	cbnz	r0, 8010872 <rmw_uxrce_fini_publisher_memory+0x22>
 8010862:	6020      	str	r0, [r4, #0]
 8010864:	6861      	ldr	r1, [r4, #4]
 8010866:	b121      	cbz	r1, 8010872 <rmw_uxrce_fini_publisher_memory+0x22>
 8010868:	4803      	ldr	r0, [pc, #12]	@ (8010878 <rmw_uxrce_fini_publisher_memory+0x28>)
 801086a:	f005 f875 	bl	8015958 <put_memory>
 801086e:	2300      	movs	r3, #0
 8010870:	6063      	str	r3, [r4, #4]
 8010872:	bd10      	pop	{r4, pc}
 8010874:	0801a6dc 	.word	0x0801a6dc
 8010878:	2000ab0c 	.word	0x2000ab0c

0801087c <rmw_uxrce_fini_subscription_memory>:
 801087c:	b510      	push	{r4, lr}
 801087e:	4604      	mov	r4, r0
 8010880:	6800      	ldr	r0, [r0, #0]
 8010882:	b128      	cbz	r0, 8010890 <rmw_uxrce_fini_subscription_memory+0x14>
 8010884:	4b06      	ldr	r3, [pc, #24]	@ (80108a0 <rmw_uxrce_fini_subscription_memory+0x24>)
 8010886:	6819      	ldr	r1, [r3, #0]
 8010888:	f7ef fca2 	bl	80001d0 <strcmp>
 801088c:	b938      	cbnz	r0, 801089e <rmw_uxrce_fini_subscription_memory+0x22>
 801088e:	6020      	str	r0, [r4, #0]
 8010890:	6861      	ldr	r1, [r4, #4]
 8010892:	b121      	cbz	r1, 801089e <rmw_uxrce_fini_subscription_memory+0x22>
 8010894:	4803      	ldr	r0, [pc, #12]	@ (80108a4 <rmw_uxrce_fini_subscription_memory+0x28>)
 8010896:	f005 f85f 	bl	8015958 <put_memory>
 801089a:	2300      	movs	r3, #0
 801089c:	6063      	str	r3, [r4, #4]
 801089e:	bd10      	pop	{r4, pc}
 80108a0:	0801a6dc 	.word	0x0801a6dc
 80108a4:	2000ab4c 	.word	0x2000ab4c

080108a8 <rmw_uxrce_fini_service_memory>:
 80108a8:	b510      	push	{r4, lr}
 80108aa:	4604      	mov	r4, r0
 80108ac:	6800      	ldr	r0, [r0, #0]
 80108ae:	b128      	cbz	r0, 80108bc <rmw_uxrce_fini_service_memory+0x14>
 80108b0:	4b06      	ldr	r3, [pc, #24]	@ (80108cc <rmw_uxrce_fini_service_memory+0x24>)
 80108b2:	6819      	ldr	r1, [r3, #0]
 80108b4:	f7ef fc8c 	bl	80001d0 <strcmp>
 80108b8:	b938      	cbnz	r0, 80108ca <rmw_uxrce_fini_service_memory+0x22>
 80108ba:	6020      	str	r0, [r4, #0]
 80108bc:	6861      	ldr	r1, [r4, #4]
 80108be:	b121      	cbz	r1, 80108ca <rmw_uxrce_fini_service_memory+0x22>
 80108c0:	4803      	ldr	r0, [pc, #12]	@ (80108d0 <rmw_uxrce_fini_service_memory+0x28>)
 80108c2:	f005 f849 	bl	8015958 <put_memory>
 80108c6:	2300      	movs	r3, #0
 80108c8:	6063      	str	r3, [r4, #4]
 80108ca:	bd10      	pop	{r4, pc}
 80108cc:	0801a6dc 	.word	0x0801a6dc
 80108d0:	2000ab1c 	.word	0x2000ab1c

080108d4 <rmw_uxrce_fini_client_memory>:
 80108d4:	b510      	push	{r4, lr}
 80108d6:	4604      	mov	r4, r0
 80108d8:	6800      	ldr	r0, [r0, #0]
 80108da:	b128      	cbz	r0, 80108e8 <rmw_uxrce_fini_client_memory+0x14>
 80108dc:	4b06      	ldr	r3, [pc, #24]	@ (80108f8 <rmw_uxrce_fini_client_memory+0x24>)
 80108de:	6819      	ldr	r1, [r3, #0]
 80108e0:	f7ef fc76 	bl	80001d0 <strcmp>
 80108e4:	b938      	cbnz	r0, 80108f6 <rmw_uxrce_fini_client_memory+0x22>
 80108e6:	6020      	str	r0, [r4, #0]
 80108e8:	6861      	ldr	r1, [r4, #4]
 80108ea:	b121      	cbz	r1, 80108f6 <rmw_uxrce_fini_client_memory+0x22>
 80108ec:	4803      	ldr	r0, [pc, #12]	@ (80108fc <rmw_uxrce_fini_client_memory+0x28>)
 80108ee:	f005 f833 	bl	8015958 <put_memory>
 80108f2:	2300      	movs	r3, #0
 80108f4:	6063      	str	r3, [r4, #4]
 80108f6:	bd10      	pop	{r4, pc}
 80108f8:	0801a6dc 	.word	0x0801a6dc
 80108fc:	20006230 	.word	0x20006230

08010900 <rmw_uxrce_fini_topic_memory>:
 8010900:	b510      	push	{r4, lr}
 8010902:	4604      	mov	r4, r0
 8010904:	4621      	mov	r1, r4
 8010906:	4803      	ldr	r0, [pc, #12]	@ (8010914 <rmw_uxrce_fini_topic_memory+0x14>)
 8010908:	f005 f826 	bl	8015958 <put_memory>
 801090c:	2300      	movs	r3, #0
 801090e:	61a3      	str	r3, [r4, #24]
 8010910:	bd10      	pop	{r4, pc}
 8010912:	bf00      	nop
 8010914:	2000ab5c 	.word	0x2000ab5c

08010918 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010918:	b082      	sub	sp, #8
 801091a:	b530      	push	{r4, r5, lr}
 801091c:	4925      	ldr	r1, [pc, #148]	@ (80109b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 801091e:	680d      	ldr	r5, [r1, #0]
 8010920:	ac03      	add	r4, sp, #12
 8010922:	e884 000c 	stmia.w	r4, {r2, r3}
 8010926:	461c      	mov	r4, r3
 8010928:	2d00      	cmp	r5, #0
 801092a:	d041      	beq.n	80109b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 801092c:	462b      	mov	r3, r5
 801092e:	2100      	movs	r1, #0
 8010930:	689a      	ldr	r2, [r3, #8]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8010938:	4290      	cmp	r0, r2
 801093a:	bf08      	it	eq
 801093c:	3101      	addeq	r1, #1
 801093e:	2b00      	cmp	r3, #0
 8010940:	d1f6      	bne.n	8010930 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010942:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010946:	2b02      	cmp	r3, #2
 8010948:	d029      	beq.n	801099e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801094a:	d907      	bls.n	801095c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 801094c:	2b03      	cmp	r3, #3
 801094e:	d005      	beq.n	801095c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010950:	2100      	movs	r1, #0
 8010952:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010956:	4608      	mov	r0, r1
 8010958:	b002      	add	sp, #8
 801095a:	4770      	bx	lr
 801095c:	b314      	cbz	r4, 80109a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 801095e:	428c      	cmp	r4, r1
 8010960:	d820      	bhi.n	80109a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010962:	2d00      	cmp	r5, #0
 8010964:	d0f4      	beq.n	8010950 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010966:	2100      	movs	r1, #0
 8010968:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801096c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010970:	e002      	b.n	8010978 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8010972:	686d      	ldr	r5, [r5, #4]
 8010974:	2d00      	cmp	r5, #0
 8010976:	d0ec      	beq.n	8010952 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010978:	68ab      	ldr	r3, [r5, #8]
 801097a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 801097e:	4290      	cmp	r0, r2
 8010980:	d1f7      	bne.n	8010972 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010982:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8010986:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801098a:	4562      	cmp	r2, ip
 801098c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010990:	eb73 0e04 	sbcs.w	lr, r3, r4
 8010994:	daed      	bge.n	8010972 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010996:	4694      	mov	ip, r2
 8010998:	461c      	mov	r4, r3
 801099a:	4629      	mov	r1, r5
 801099c:	e7e9      	b.n	8010972 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801099e:	b10c      	cbz	r4, 80109a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80109a0:	428c      	cmp	r4, r1
 80109a2:	d9d5      	bls.n	8010950 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80109a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109a8:	4802      	ldr	r0, [pc, #8]	@ (80109b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80109aa:	b002      	add	sp, #8
 80109ac:	f004 bfc4 	b.w	8015938 <get_memory>
 80109b0:	4629      	mov	r1, r5
 80109b2:	e7c6      	b.n	8010942 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80109b4:	2000ab3c 	.word	0x2000ab3c

080109b8 <run_xrce_session>:
 80109b8:	b510      	push	{r4, lr}
 80109ba:	788c      	ldrb	r4, [r1, #2]
 80109bc:	b086      	sub	sp, #24
 80109be:	2c01      	cmp	r4, #1
 80109c0:	f8ad 200e 	strh.w	r2, [sp, #14]
 80109c4:	d00c      	beq.n	80109e0 <run_xrce_session+0x28>
 80109c6:	4619      	mov	r1, r3
 80109c8:	2301      	movs	r3, #1
 80109ca:	9300      	str	r3, [sp, #0]
 80109cc:	f10d 020e 	add.w	r2, sp, #14
 80109d0:	f10d 0317 	add.w	r3, sp, #23
 80109d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80109d8:	f001 ff7e 	bl	80128d8 <uxr_run_session_until_all_status>
 80109dc:	b006      	add	sp, #24
 80109de:	bd10      	pop	{r4, pc}
 80109e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80109e4:	f001 fbcc 	bl	8012180 <uxr_flash_output_streams>
 80109e8:	4620      	mov	r0, r4
 80109ea:	b006      	add	sp, #24
 80109ec:	bd10      	pop	{r4, pc}
 80109ee:	bf00      	nop

080109f0 <convert_qos_profile>:
 80109f0:	7a4a      	ldrb	r2, [r1, #9]
 80109f2:	f891 c008 	ldrb.w	ip, [r1, #8]
 80109f6:	2a02      	cmp	r2, #2
 80109f8:	bf18      	it	ne
 80109fa:	2200      	movne	r2, #0
 80109fc:	7002      	strb	r2, [r0, #0]
 80109fe:	780a      	ldrb	r2, [r1, #0]
 8010a00:	8889      	ldrh	r1, [r1, #4]
 8010a02:	8081      	strh	r1, [r0, #4]
 8010a04:	f1ac 0c02 	sub.w	ip, ip, #2
 8010a08:	f1a2 0202 	sub.w	r2, r2, #2
 8010a0c:	fabc fc8c 	clz	ip, ip
 8010a10:	fab2 f282 	clz	r2, r2
 8010a14:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8010a18:	0952      	lsrs	r2, r2, #5
 8010a1a:	f880 c001 	strb.w	ip, [r0, #1]
 8010a1e:	7082      	strb	r2, [r0, #2]
 8010a20:	4770      	bx	lr
 8010a22:	bf00      	nop

08010a24 <generate_type_name>:
 8010a24:	b530      	push	{r4, r5, lr}
 8010a26:	2300      	movs	r3, #0
 8010a28:	700b      	strb	r3, [r1, #0]
 8010a2a:	6803      	ldr	r3, [r0, #0]
 8010a2c:	b087      	sub	sp, #28
 8010a2e:	4614      	mov	r4, r2
 8010a30:	b1d3      	cbz	r3, 8010a68 <generate_type_name+0x44>
 8010a32:	4a0f      	ldr	r2, [pc, #60]	@ (8010a70 <generate_type_name+0x4c>)
 8010a34:	4615      	mov	r5, r2
 8010a36:	9203      	str	r2, [sp, #12]
 8010a38:	9500      	str	r5, [sp, #0]
 8010a3a:	6842      	ldr	r2, [r0, #4]
 8010a3c:	480d      	ldr	r0, [pc, #52]	@ (8010a74 <generate_type_name+0x50>)
 8010a3e:	9001      	str	r0, [sp, #4]
 8010a40:	4608      	mov	r0, r1
 8010a42:	490d      	ldr	r1, [pc, #52]	@ (8010a78 <generate_type_name+0x54>)
 8010a44:	9204      	str	r2, [sp, #16]
 8010a46:	9105      	str	r1, [sp, #20]
 8010a48:	9102      	str	r1, [sp, #8]
 8010a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8010a7c <generate_type_name+0x58>)
 8010a4c:	4621      	mov	r1, r4
 8010a4e:	f008 f9d1 	bl	8018df4 <sniprintf>
 8010a52:	2800      	cmp	r0, #0
 8010a54:	db05      	blt.n	8010a62 <generate_type_name+0x3e>
 8010a56:	4284      	cmp	r4, r0
 8010a58:	bfd4      	ite	le
 8010a5a:	2000      	movle	r0, #0
 8010a5c:	2001      	movgt	r0, #1
 8010a5e:	b007      	add	sp, #28
 8010a60:	bd30      	pop	{r4, r5, pc}
 8010a62:	2000      	movs	r0, #0
 8010a64:	b007      	add	sp, #28
 8010a66:	bd30      	pop	{r4, r5, pc}
 8010a68:	4b05      	ldr	r3, [pc, #20]	@ (8010a80 <generate_type_name+0x5c>)
 8010a6a:	4a01      	ldr	r2, [pc, #4]	@ (8010a70 <generate_type_name+0x4c>)
 8010a6c:	461d      	mov	r5, r3
 8010a6e:	e7e2      	b.n	8010a36 <generate_type_name+0x12>
 8010a70:	0801a1c4 	.word	0x0801a1c4
 8010a74:	0801a1dc 	.word	0x0801a1dc
 8010a78:	0801a1d8 	.word	0x0801a1d8
 8010a7c:	0801a1c8 	.word	0x0801a1c8
 8010a80:	0801a4b4 	.word	0x0801a4b4

08010a84 <generate_topic_name>:
 8010a84:	b510      	push	{r4, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	4614      	mov	r4, r2
 8010a8a:	9000      	str	r0, [sp, #0]
 8010a8c:	4b08      	ldr	r3, [pc, #32]	@ (8010ab0 <generate_topic_name+0x2c>)
 8010a8e:	4a09      	ldr	r2, [pc, #36]	@ (8010ab4 <generate_topic_name+0x30>)
 8010a90:	4608      	mov	r0, r1
 8010a92:	4621      	mov	r1, r4
 8010a94:	f008 f9ae 	bl	8018df4 <sniprintf>
 8010a98:	2800      	cmp	r0, #0
 8010a9a:	db05      	blt.n	8010aa8 <generate_topic_name+0x24>
 8010a9c:	4284      	cmp	r4, r0
 8010a9e:	bfd4      	ite	le
 8010aa0:	2000      	movle	r0, #0
 8010aa2:	2001      	movgt	r0, #1
 8010aa4:	b002      	add	sp, #8
 8010aa6:	bd10      	pop	{r4, pc}
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	b002      	add	sp, #8
 8010aac:	bd10      	pop	{r4, pc}
 8010aae:	bf00      	nop
 8010ab0:	0801a1e8 	.word	0x0801a1e8
 8010ab4:	0801a1e0 	.word	0x0801a1e0

08010ab8 <is_uxrce_rmw_identifier_valid>:
 8010ab8:	b510      	push	{r4, lr}
 8010aba:	4604      	mov	r4, r0
 8010abc:	b140      	cbz	r0, 8010ad0 <is_uxrce_rmw_identifier_valid+0x18>
 8010abe:	f004 ff5f 	bl	8015980 <rmw_get_implementation_identifier>
 8010ac2:	4601      	mov	r1, r0
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	f7ef fb83 	bl	80001d0 <strcmp>
 8010aca:	fab0 f080 	clz	r0, r0
 8010ace:	0940      	lsrs	r0, r0, #5
 8010ad0:	bd10      	pop	{r4, pc}
 8010ad2:	bf00      	nop

08010ad4 <get_message_typesupport_handle>:
 8010ad4:	6883      	ldr	r3, [r0, #8]
 8010ad6:	4718      	bx	r3

08010ad8 <get_message_typesupport_handle_function>:
 8010ad8:	b510      	push	{r4, lr}
 8010ada:	4604      	mov	r4, r0
 8010adc:	6800      	ldr	r0, [r0, #0]
 8010ade:	f7ef fb77 	bl	80001d0 <strcmp>
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	bf0c      	ite	eq
 8010ae6:	4620      	moveq	r0, r4
 8010ae8:	2000      	movne	r0, #0
 8010aea:	bd10      	pop	{r4, pc}

08010aec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010aec:	4b04      	ldr	r3, [pc, #16]	@ (8010b00 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	b10a      	cbz	r2, 8010af6 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8010af2:	4803      	ldr	r0, [pc, #12]	@ (8010b00 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010af4:	4770      	bx	lr
 8010af6:	4a03      	ldr	r2, [pc, #12]	@ (8010b04 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8010af8:	4801      	ldr	r0, [pc, #4]	@ (8010b00 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010afa:	6812      	ldr	r2, [r2, #0]
 8010afc:	601a      	str	r2, [r3, #0]
 8010afe:	4770      	bx	lr
 8010b00:	20000054 	.word	0x20000054
 8010b04:	200000d0 	.word	0x200000d0

08010b08 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010b08:	4a02      	ldr	r2, [pc, #8]	@ (8010b14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8010b0a:	4b03      	ldr	r3, [pc, #12]	@ (8010b18 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8010b0c:	6812      	ldr	r2, [r2, #0]
 8010b0e:	601a      	str	r2, [r3, #0]
 8010b10:	4770      	bx	lr
 8010b12:	bf00      	nop
 8010b14:	200000d0 	.word	0x200000d0
 8010b18:	20000054 	.word	0x20000054

08010b1c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8010b1c:	f005 bc3e 	b.w	801639c <std_msgs__msg__Int32__init>

08010b20 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8010b20:	f005 bc40 	b.w	80163a4 <std_msgs__msg__Int32__fini>

08010b24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010b24:	4b04      	ldr	r3, [pc, #16]	@ (8010b38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	b10a      	cbz	r2, 8010b2e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8010b2a:	4803      	ldr	r0, [pc, #12]	@ (8010b38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010b2c:	4770      	bx	lr
 8010b2e:	4a03      	ldr	r2, [pc, #12]	@ (8010b3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8010b30:	4801      	ldr	r0, [pc, #4]	@ (8010b38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010b32:	6812      	ldr	r2, [r2, #0]
 8010b34:	601a      	str	r2, [r3, #0]
 8010b36:	4770      	bx	lr
 8010b38:	2000009c 	.word	0x2000009c
 8010b3c:	200000d4 	.word	0x200000d4

08010b40 <_Int32__max_serialized_size>:
 8010b40:	b508      	push	{r3, lr}
 8010b42:	2104      	movs	r1, #4
 8010b44:	2000      	movs	r0, #0
 8010b46:	f001 f807 	bl	8011b58 <ucdr_alignment>
 8010b4a:	3004      	adds	r0, #4
 8010b4c:	bd08      	pop	{r3, pc}
 8010b4e:	bf00      	nop

08010b50 <_Int32__cdr_deserialize>:
 8010b50:	b109      	cbz	r1, 8010b56 <_Int32__cdr_deserialize+0x6>
 8010b52:	f000 bf19 	b.w	8011988 <ucdr_deserialize_int32_t>
 8010b56:	4608      	mov	r0, r1
 8010b58:	4770      	bx	lr
 8010b5a:	bf00      	nop

08010b5c <get_serialized_size_std_msgs__msg__Int32>:
 8010b5c:	b138      	cbz	r0, 8010b6e <get_serialized_size_std_msgs__msg__Int32+0x12>
 8010b5e:	b508      	push	{r3, lr}
 8010b60:	460b      	mov	r3, r1
 8010b62:	4618      	mov	r0, r3
 8010b64:	2104      	movs	r1, #4
 8010b66:	f000 fff7 	bl	8011b58 <ucdr_alignment>
 8010b6a:	3004      	adds	r0, #4
 8010b6c:	bd08      	pop	{r3, pc}
 8010b6e:	4770      	bx	lr

08010b70 <_Int32__cdr_serialize>:
 8010b70:	460a      	mov	r2, r1
 8010b72:	b118      	cbz	r0, 8010b7c <_Int32__cdr_serialize+0xc>
 8010b74:	6801      	ldr	r1, [r0, #0]
 8010b76:	4610      	mov	r0, r2
 8010b78:	f000 be6e 	b.w	8011858 <ucdr_serialize_int32_t>
 8010b7c:	4770      	bx	lr
 8010b7e:	bf00      	nop

08010b80 <_Int32__get_serialized_size>:
 8010b80:	b130      	cbz	r0, 8010b90 <_Int32__get_serialized_size+0x10>
 8010b82:	b508      	push	{r3, lr}
 8010b84:	2104      	movs	r1, #4
 8010b86:	2000      	movs	r0, #0
 8010b88:	f000 ffe6 	bl	8011b58 <ucdr_alignment>
 8010b8c:	3004      	adds	r0, #4
 8010b8e:	bd08      	pop	{r3, pc}
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop

08010b94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010b94:	4800      	ldr	r0, [pc, #0]	@ (8010b98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8010b96:	4770      	bx	lr
 8010b98:	200000a8 	.word	0x200000a8

08010b9c <ucdr_serialize_bool>:
 8010b9c:	b538      	push	{r3, r4, r5, lr}
 8010b9e:	460d      	mov	r5, r1
 8010ba0:	2101      	movs	r1, #1
 8010ba2:	4604      	mov	r4, r0
 8010ba4:	f000 ff8c 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8010ba8:	b148      	cbz	r0, 8010bbe <ucdr_serialize_bool+0x22>
 8010baa:	68a3      	ldr	r3, [r4, #8]
 8010bac:	701d      	strb	r5, [r3, #0]
 8010bae:	68a2      	ldr	r2, [r4, #8]
 8010bb0:	6923      	ldr	r3, [r4, #16]
 8010bb2:	2101      	movs	r1, #1
 8010bb4:	440a      	add	r2, r1
 8010bb6:	440b      	add	r3, r1
 8010bb8:	60a2      	str	r2, [r4, #8]
 8010bba:	6123      	str	r3, [r4, #16]
 8010bbc:	7561      	strb	r1, [r4, #21]
 8010bbe:	7da0      	ldrb	r0, [r4, #22]
 8010bc0:	f080 0001 	eor.w	r0, r0, #1
 8010bc4:	bd38      	pop	{r3, r4, r5, pc}
 8010bc6:	bf00      	nop

08010bc8 <ucdr_deserialize_bool>:
 8010bc8:	b538      	push	{r3, r4, r5, lr}
 8010bca:	460d      	mov	r5, r1
 8010bcc:	2101      	movs	r1, #1
 8010bce:	4604      	mov	r4, r0
 8010bd0:	f000 ff76 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8010bd4:	b160      	cbz	r0, 8010bf0 <ucdr_deserialize_bool+0x28>
 8010bd6:	68a2      	ldr	r2, [r4, #8]
 8010bd8:	6923      	ldr	r3, [r4, #16]
 8010bda:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010bde:	3900      	subs	r1, #0
 8010be0:	bf18      	it	ne
 8010be2:	2101      	movne	r1, #1
 8010be4:	7029      	strb	r1, [r5, #0]
 8010be6:	3301      	adds	r3, #1
 8010be8:	2101      	movs	r1, #1
 8010bea:	60a2      	str	r2, [r4, #8]
 8010bec:	6123      	str	r3, [r4, #16]
 8010bee:	7561      	strb	r1, [r4, #21]
 8010bf0:	7da0      	ldrb	r0, [r4, #22]
 8010bf2:	f080 0001 	eor.w	r0, r0, #1
 8010bf6:	bd38      	pop	{r3, r4, r5, pc}

08010bf8 <ucdr_serialize_uint8_t>:
 8010bf8:	b538      	push	{r3, r4, r5, lr}
 8010bfa:	460d      	mov	r5, r1
 8010bfc:	2101      	movs	r1, #1
 8010bfe:	4604      	mov	r4, r0
 8010c00:	f000 ff5e 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8010c04:	b148      	cbz	r0, 8010c1a <ucdr_serialize_uint8_t+0x22>
 8010c06:	68a3      	ldr	r3, [r4, #8]
 8010c08:	701d      	strb	r5, [r3, #0]
 8010c0a:	68a2      	ldr	r2, [r4, #8]
 8010c0c:	6923      	ldr	r3, [r4, #16]
 8010c0e:	2101      	movs	r1, #1
 8010c10:	440a      	add	r2, r1
 8010c12:	440b      	add	r3, r1
 8010c14:	60a2      	str	r2, [r4, #8]
 8010c16:	6123      	str	r3, [r4, #16]
 8010c18:	7561      	strb	r1, [r4, #21]
 8010c1a:	7da0      	ldrb	r0, [r4, #22]
 8010c1c:	f080 0001 	eor.w	r0, r0, #1
 8010c20:	bd38      	pop	{r3, r4, r5, pc}
 8010c22:	bf00      	nop

08010c24 <ucdr_deserialize_uint8_t>:
 8010c24:	b538      	push	{r3, r4, r5, lr}
 8010c26:	460d      	mov	r5, r1
 8010c28:	2101      	movs	r1, #1
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	f000 ff48 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8010c30:	b150      	cbz	r0, 8010c48 <ucdr_deserialize_uint8_t+0x24>
 8010c32:	68a3      	ldr	r3, [r4, #8]
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	702b      	strb	r3, [r5, #0]
 8010c38:	68a2      	ldr	r2, [r4, #8]
 8010c3a:	6923      	ldr	r3, [r4, #16]
 8010c3c:	2101      	movs	r1, #1
 8010c3e:	440a      	add	r2, r1
 8010c40:	440b      	add	r3, r1
 8010c42:	60a2      	str	r2, [r4, #8]
 8010c44:	6123      	str	r3, [r4, #16]
 8010c46:	7561      	strb	r1, [r4, #21]
 8010c48:	7da0      	ldrb	r0, [r4, #22]
 8010c4a:	f080 0001 	eor.w	r0, r0, #1
 8010c4e:	bd38      	pop	{r3, r4, r5, pc}

08010c50 <ucdr_serialize_uint16_t>:
 8010c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c54:	b082      	sub	sp, #8
 8010c56:	460b      	mov	r3, r1
 8010c58:	2102      	movs	r1, #2
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010c60:	f000 ff82 	bl	8011b68 <ucdr_buffer_alignment>
 8010c64:	4601      	mov	r1, r0
 8010c66:	4620      	mov	r0, r4
 8010c68:	7d67      	ldrb	r7, [r4, #21]
 8010c6a:	f000 ffc1 	bl	8011bf0 <ucdr_advance_buffer>
 8010c6e:	2102      	movs	r1, #2
 8010c70:	4620      	mov	r0, r4
 8010c72:	f000 ff19 	bl	8011aa8 <ucdr_check_buffer_available_for>
 8010c76:	bb78      	cbnz	r0, 8010cd8 <ucdr_serialize_uint16_t+0x88>
 8010c78:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010c7c:	42ab      	cmp	r3, r5
 8010c7e:	d926      	bls.n	8010cce <ucdr_serialize_uint16_t+0x7e>
 8010c80:	1b5e      	subs	r6, r3, r5
 8010c82:	60a3      	str	r3, [r4, #8]
 8010c84:	6923      	ldr	r3, [r4, #16]
 8010c86:	f1c6 0802 	rsb	r8, r6, #2
 8010c8a:	4433      	add	r3, r6
 8010c8c:	6123      	str	r3, [r4, #16]
 8010c8e:	4641      	mov	r1, r8
 8010c90:	4620      	mov	r0, r4
 8010c92:	f000 ff15 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8010c96:	2800      	cmp	r0, #0
 8010c98:	d03b      	beq.n	8010d12 <ucdr_serialize_uint16_t+0xc2>
 8010c9a:	7d23      	ldrb	r3, [r4, #20]
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	d04a      	beq.n	8010d36 <ucdr_serialize_uint16_t+0xe6>
 8010ca0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010ca4:	702b      	strb	r3, [r5, #0]
 8010ca6:	2e00      	cmp	r6, #0
 8010ca8:	d040      	beq.n	8010d2c <ucdr_serialize_uint16_t+0xdc>
 8010caa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010cae:	706b      	strb	r3, [r5, #1]
 8010cb0:	6923      	ldr	r3, [r4, #16]
 8010cb2:	68a2      	ldr	r2, [r4, #8]
 8010cb4:	7da0      	ldrb	r0, [r4, #22]
 8010cb6:	3302      	adds	r3, #2
 8010cb8:	1b9e      	subs	r6, r3, r6
 8010cba:	4442      	add	r2, r8
 8010cbc:	2302      	movs	r3, #2
 8010cbe:	f080 0001 	eor.w	r0, r0, #1
 8010cc2:	60a2      	str	r2, [r4, #8]
 8010cc4:	6126      	str	r6, [r4, #16]
 8010cc6:	7563      	strb	r3, [r4, #21]
 8010cc8:	b002      	add	sp, #8
 8010cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cce:	2102      	movs	r1, #2
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	f000 fef5 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8010cd6:	b190      	cbz	r0, 8010cfe <ucdr_serialize_uint16_t+0xae>
 8010cd8:	7d23      	ldrb	r3, [r4, #20]
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	68a3      	ldr	r3, [r4, #8]
 8010cde:	d014      	beq.n	8010d0a <ucdr_serialize_uint16_t+0xba>
 8010ce0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010ce4:	701a      	strb	r2, [r3, #0]
 8010ce6:	68a3      	ldr	r3, [r4, #8]
 8010ce8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010cec:	705a      	strb	r2, [r3, #1]
 8010cee:	68a2      	ldr	r2, [r4, #8]
 8010cf0:	6923      	ldr	r3, [r4, #16]
 8010cf2:	3202      	adds	r2, #2
 8010cf4:	3302      	adds	r3, #2
 8010cf6:	2102      	movs	r1, #2
 8010cf8:	60a2      	str	r2, [r4, #8]
 8010cfa:	6123      	str	r3, [r4, #16]
 8010cfc:	7561      	strb	r1, [r4, #21]
 8010cfe:	7da0      	ldrb	r0, [r4, #22]
 8010d00:	f080 0001 	eor.w	r0, r0, #1
 8010d04:	b002      	add	sp, #8
 8010d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d0a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010d0e:	801a      	strh	r2, [r3, #0]
 8010d10:	e7ed      	b.n	8010cee <ucdr_serialize_uint16_t+0x9e>
 8010d12:	68a2      	ldr	r2, [r4, #8]
 8010d14:	6923      	ldr	r3, [r4, #16]
 8010d16:	7da0      	ldrb	r0, [r4, #22]
 8010d18:	7567      	strb	r7, [r4, #21]
 8010d1a:	1b92      	subs	r2, r2, r6
 8010d1c:	1b9b      	subs	r3, r3, r6
 8010d1e:	f080 0001 	eor.w	r0, r0, #1
 8010d22:	60a2      	str	r2, [r4, #8]
 8010d24:	6123      	str	r3, [r4, #16]
 8010d26:	b002      	add	sp, #8
 8010d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d2c:	68a3      	ldr	r3, [r4, #8]
 8010d2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d32:	701a      	strb	r2, [r3, #0]
 8010d34:	e7bc      	b.n	8010cb0 <ucdr_serialize_uint16_t+0x60>
 8010d36:	4628      	mov	r0, r5
 8010d38:	f10d 0506 	add.w	r5, sp, #6
 8010d3c:	4629      	mov	r1, r5
 8010d3e:	4632      	mov	r2, r6
 8010d40:	f008 fa85 	bl	801924e <memcpy>
 8010d44:	68a0      	ldr	r0, [r4, #8]
 8010d46:	4642      	mov	r2, r8
 8010d48:	19a9      	adds	r1, r5, r6
 8010d4a:	f008 fa80 	bl	801924e <memcpy>
 8010d4e:	e7af      	b.n	8010cb0 <ucdr_serialize_uint16_t+0x60>

08010d50 <ucdr_serialize_endian_uint16_t>:
 8010d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d54:	b083      	sub	sp, #12
 8010d56:	460d      	mov	r5, r1
 8010d58:	2102      	movs	r1, #2
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010d60:	f000 ff02 	bl	8011b68 <ucdr_buffer_alignment>
 8010d64:	4601      	mov	r1, r0
 8010d66:	4620      	mov	r0, r4
 8010d68:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010d6c:	f000 ff40 	bl	8011bf0 <ucdr_advance_buffer>
 8010d70:	2102      	movs	r1, #2
 8010d72:	4620      	mov	r0, r4
 8010d74:	f000 fe98 	bl	8011aa8 <ucdr_check_buffer_available_for>
 8010d78:	bb70      	cbnz	r0, 8010dd8 <ucdr_serialize_endian_uint16_t+0x88>
 8010d7a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010d7e:	42be      	cmp	r6, r7
 8010d80:	d925      	bls.n	8010dce <ucdr_serialize_endian_uint16_t+0x7e>
 8010d82:	6923      	ldr	r3, [r4, #16]
 8010d84:	60a6      	str	r6, [r4, #8]
 8010d86:	1bf6      	subs	r6, r6, r7
 8010d88:	4433      	add	r3, r6
 8010d8a:	f1c6 0902 	rsb	r9, r6, #2
 8010d8e:	6123      	str	r3, [r4, #16]
 8010d90:	4649      	mov	r1, r9
 8010d92:	4620      	mov	r0, r4
 8010d94:	f000 fe94 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8010d98:	2800      	cmp	r0, #0
 8010d9a:	d039      	beq.n	8010e10 <ucdr_serialize_endian_uint16_t+0xc0>
 8010d9c:	2d01      	cmp	r5, #1
 8010d9e:	d04a      	beq.n	8010e36 <ucdr_serialize_endian_uint16_t+0xe6>
 8010da0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010da4:	703b      	strb	r3, [r7, #0]
 8010da6:	2e00      	cmp	r6, #0
 8010da8:	d040      	beq.n	8010e2c <ucdr_serialize_endian_uint16_t+0xdc>
 8010daa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010dae:	707b      	strb	r3, [r7, #1]
 8010db0:	6923      	ldr	r3, [r4, #16]
 8010db2:	68a2      	ldr	r2, [r4, #8]
 8010db4:	7da0      	ldrb	r0, [r4, #22]
 8010db6:	3302      	adds	r3, #2
 8010db8:	444a      	add	r2, r9
 8010dba:	1b9b      	subs	r3, r3, r6
 8010dbc:	2102      	movs	r1, #2
 8010dbe:	f080 0001 	eor.w	r0, r0, #1
 8010dc2:	60a2      	str	r2, [r4, #8]
 8010dc4:	6123      	str	r3, [r4, #16]
 8010dc6:	7561      	strb	r1, [r4, #21]
 8010dc8:	b003      	add	sp, #12
 8010dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dce:	2102      	movs	r1, #2
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	f000 fe75 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8010dd6:	b188      	cbz	r0, 8010dfc <ucdr_serialize_endian_uint16_t+0xac>
 8010dd8:	2d01      	cmp	r5, #1
 8010dda:	68a3      	ldr	r3, [r4, #8]
 8010ddc:	d014      	beq.n	8010e08 <ucdr_serialize_endian_uint16_t+0xb8>
 8010dde:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010de2:	701a      	strb	r2, [r3, #0]
 8010de4:	68a3      	ldr	r3, [r4, #8]
 8010de6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010dea:	705a      	strb	r2, [r3, #1]
 8010dec:	68a2      	ldr	r2, [r4, #8]
 8010dee:	6923      	ldr	r3, [r4, #16]
 8010df0:	3202      	adds	r2, #2
 8010df2:	3302      	adds	r3, #2
 8010df4:	2102      	movs	r1, #2
 8010df6:	60a2      	str	r2, [r4, #8]
 8010df8:	6123      	str	r3, [r4, #16]
 8010dfa:	7561      	strb	r1, [r4, #21]
 8010dfc:	7da0      	ldrb	r0, [r4, #22]
 8010dfe:	f080 0001 	eor.w	r0, r0, #1
 8010e02:	b003      	add	sp, #12
 8010e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e08:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010e0c:	801a      	strh	r2, [r3, #0]
 8010e0e:	e7ed      	b.n	8010dec <ucdr_serialize_endian_uint16_t+0x9c>
 8010e10:	68a2      	ldr	r2, [r4, #8]
 8010e12:	6923      	ldr	r3, [r4, #16]
 8010e14:	7da0      	ldrb	r0, [r4, #22]
 8010e16:	f884 8015 	strb.w	r8, [r4, #21]
 8010e1a:	1b92      	subs	r2, r2, r6
 8010e1c:	1b9b      	subs	r3, r3, r6
 8010e1e:	f080 0001 	eor.w	r0, r0, #1
 8010e22:	60a2      	str	r2, [r4, #8]
 8010e24:	6123      	str	r3, [r4, #16]
 8010e26:	b003      	add	sp, #12
 8010e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e2c:	68a3      	ldr	r3, [r4, #8]
 8010e2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e32:	701a      	strb	r2, [r3, #0]
 8010e34:	e7bc      	b.n	8010db0 <ucdr_serialize_endian_uint16_t+0x60>
 8010e36:	f10d 0506 	add.w	r5, sp, #6
 8010e3a:	4629      	mov	r1, r5
 8010e3c:	4632      	mov	r2, r6
 8010e3e:	4638      	mov	r0, r7
 8010e40:	f008 fa05 	bl	801924e <memcpy>
 8010e44:	68a0      	ldr	r0, [r4, #8]
 8010e46:	464a      	mov	r2, r9
 8010e48:	19a9      	adds	r1, r5, r6
 8010e4a:	f008 fa00 	bl	801924e <memcpy>
 8010e4e:	e7af      	b.n	8010db0 <ucdr_serialize_endian_uint16_t+0x60>

08010e50 <ucdr_deserialize_uint16_t>:
 8010e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e54:	460d      	mov	r5, r1
 8010e56:	2102      	movs	r1, #2
 8010e58:	4604      	mov	r4, r0
 8010e5a:	f000 fe85 	bl	8011b68 <ucdr_buffer_alignment>
 8010e5e:	4601      	mov	r1, r0
 8010e60:	4620      	mov	r0, r4
 8010e62:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010e66:	f000 fec3 	bl	8011bf0 <ucdr_advance_buffer>
 8010e6a:	2102      	movs	r1, #2
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f000 fe1b 	bl	8011aa8 <ucdr_check_buffer_available_for>
 8010e72:	bb60      	cbnz	r0, 8010ece <ucdr_deserialize_uint16_t+0x7e>
 8010e74:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010e78:	42be      	cmp	r6, r7
 8010e7a:	d923      	bls.n	8010ec4 <ucdr_deserialize_uint16_t+0x74>
 8010e7c:	6923      	ldr	r3, [r4, #16]
 8010e7e:	60a6      	str	r6, [r4, #8]
 8010e80:	1bf6      	subs	r6, r6, r7
 8010e82:	4433      	add	r3, r6
 8010e84:	f1c6 0902 	rsb	r9, r6, #2
 8010e88:	6123      	str	r3, [r4, #16]
 8010e8a:	4649      	mov	r1, r9
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	f000 fe17 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8010e92:	2800      	cmp	r0, #0
 8010e94:	d034      	beq.n	8010f00 <ucdr_deserialize_uint16_t+0xb0>
 8010e96:	7d23      	ldrb	r3, [r4, #20]
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	d042      	beq.n	8010f22 <ucdr_deserialize_uint16_t+0xd2>
 8010e9c:	787b      	ldrb	r3, [r7, #1]
 8010e9e:	702b      	strb	r3, [r5, #0]
 8010ea0:	2e00      	cmp	r6, #0
 8010ea2:	d03a      	beq.n	8010f1a <ucdr_deserialize_uint16_t+0xca>
 8010ea4:	783b      	ldrb	r3, [r7, #0]
 8010ea6:	706b      	strb	r3, [r5, #1]
 8010ea8:	6923      	ldr	r3, [r4, #16]
 8010eaa:	68a2      	ldr	r2, [r4, #8]
 8010eac:	7da0      	ldrb	r0, [r4, #22]
 8010eae:	2102      	movs	r1, #2
 8010eb0:	3302      	adds	r3, #2
 8010eb2:	444a      	add	r2, r9
 8010eb4:	1b9b      	subs	r3, r3, r6
 8010eb6:	7561      	strb	r1, [r4, #21]
 8010eb8:	60a2      	str	r2, [r4, #8]
 8010eba:	6123      	str	r3, [r4, #16]
 8010ebc:	f080 0001 	eor.w	r0, r0, #1
 8010ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ec4:	2102      	movs	r1, #2
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f000 fdfa 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8010ecc:	b180      	cbz	r0, 8010ef0 <ucdr_deserialize_uint16_t+0xa0>
 8010ece:	7d23      	ldrb	r3, [r4, #20]
 8010ed0:	2b01      	cmp	r3, #1
 8010ed2:	68a3      	ldr	r3, [r4, #8]
 8010ed4:	d011      	beq.n	8010efa <ucdr_deserialize_uint16_t+0xaa>
 8010ed6:	785b      	ldrb	r3, [r3, #1]
 8010ed8:	702b      	strb	r3, [r5, #0]
 8010eda:	68a3      	ldr	r3, [r4, #8]
 8010edc:	781b      	ldrb	r3, [r3, #0]
 8010ede:	706b      	strb	r3, [r5, #1]
 8010ee0:	68a2      	ldr	r2, [r4, #8]
 8010ee2:	6923      	ldr	r3, [r4, #16]
 8010ee4:	3202      	adds	r2, #2
 8010ee6:	3302      	adds	r3, #2
 8010ee8:	2102      	movs	r1, #2
 8010eea:	60a2      	str	r2, [r4, #8]
 8010eec:	6123      	str	r3, [r4, #16]
 8010eee:	7561      	strb	r1, [r4, #21]
 8010ef0:	7da0      	ldrb	r0, [r4, #22]
 8010ef2:	f080 0001 	eor.w	r0, r0, #1
 8010ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010efa:	881b      	ldrh	r3, [r3, #0]
 8010efc:	802b      	strh	r3, [r5, #0]
 8010efe:	e7ef      	b.n	8010ee0 <ucdr_deserialize_uint16_t+0x90>
 8010f00:	68a2      	ldr	r2, [r4, #8]
 8010f02:	6923      	ldr	r3, [r4, #16]
 8010f04:	7da0      	ldrb	r0, [r4, #22]
 8010f06:	f884 8015 	strb.w	r8, [r4, #21]
 8010f0a:	1b92      	subs	r2, r2, r6
 8010f0c:	1b9b      	subs	r3, r3, r6
 8010f0e:	60a2      	str	r2, [r4, #8]
 8010f10:	6123      	str	r3, [r4, #16]
 8010f12:	f080 0001 	eor.w	r0, r0, #1
 8010f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f1a:	68a3      	ldr	r3, [r4, #8]
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	706b      	strb	r3, [r5, #1]
 8010f20:	e7c2      	b.n	8010ea8 <ucdr_deserialize_uint16_t+0x58>
 8010f22:	4639      	mov	r1, r7
 8010f24:	4632      	mov	r2, r6
 8010f26:	4628      	mov	r0, r5
 8010f28:	f008 f991 	bl	801924e <memcpy>
 8010f2c:	68a1      	ldr	r1, [r4, #8]
 8010f2e:	464a      	mov	r2, r9
 8010f30:	19a8      	adds	r0, r5, r6
 8010f32:	f008 f98c 	bl	801924e <memcpy>
 8010f36:	e7b7      	b.n	8010ea8 <ucdr_deserialize_uint16_t+0x58>

08010f38 <ucdr_deserialize_endian_uint16_t>:
 8010f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f3c:	460e      	mov	r6, r1
 8010f3e:	2102      	movs	r1, #2
 8010f40:	4604      	mov	r4, r0
 8010f42:	4615      	mov	r5, r2
 8010f44:	f000 fe10 	bl	8011b68 <ucdr_buffer_alignment>
 8010f48:	4601      	mov	r1, r0
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010f50:	f000 fe4e 	bl	8011bf0 <ucdr_advance_buffer>
 8010f54:	2102      	movs	r1, #2
 8010f56:	4620      	mov	r0, r4
 8010f58:	f000 fda6 	bl	8011aa8 <ucdr_check_buffer_available_for>
 8010f5c:	bb70      	cbnz	r0, 8010fbc <ucdr_deserialize_endian_uint16_t+0x84>
 8010f5e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8010f62:	4547      	cmp	r7, r8
 8010f64:	d925      	bls.n	8010fb2 <ucdr_deserialize_endian_uint16_t+0x7a>
 8010f66:	6923      	ldr	r3, [r4, #16]
 8010f68:	60a7      	str	r7, [r4, #8]
 8010f6a:	eba7 0708 	sub.w	r7, r7, r8
 8010f6e:	443b      	add	r3, r7
 8010f70:	f1c7 0a02 	rsb	sl, r7, #2
 8010f74:	6123      	str	r3, [r4, #16]
 8010f76:	4651      	mov	r1, sl
 8010f78:	4620      	mov	r0, r4
 8010f7a:	f000 fda1 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	d034      	beq.n	8010fec <ucdr_deserialize_endian_uint16_t+0xb4>
 8010f82:	2e01      	cmp	r6, #1
 8010f84:	d043      	beq.n	801100e <ucdr_deserialize_endian_uint16_t+0xd6>
 8010f86:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010f8a:	702b      	strb	r3, [r5, #0]
 8010f8c:	2f00      	cmp	r7, #0
 8010f8e:	d03a      	beq.n	8011006 <ucdr_deserialize_endian_uint16_t+0xce>
 8010f90:	f898 3000 	ldrb.w	r3, [r8]
 8010f94:	706b      	strb	r3, [r5, #1]
 8010f96:	6923      	ldr	r3, [r4, #16]
 8010f98:	68a2      	ldr	r2, [r4, #8]
 8010f9a:	7da0      	ldrb	r0, [r4, #22]
 8010f9c:	2102      	movs	r1, #2
 8010f9e:	3302      	adds	r3, #2
 8010fa0:	4452      	add	r2, sl
 8010fa2:	1bdb      	subs	r3, r3, r7
 8010fa4:	7561      	strb	r1, [r4, #21]
 8010fa6:	60a2      	str	r2, [r4, #8]
 8010fa8:	6123      	str	r3, [r4, #16]
 8010faa:	f080 0001 	eor.w	r0, r0, #1
 8010fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fb2:	2102      	movs	r1, #2
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	f000 fd83 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8010fba:	b178      	cbz	r0, 8010fdc <ucdr_deserialize_endian_uint16_t+0xa4>
 8010fbc:	2e01      	cmp	r6, #1
 8010fbe:	68a3      	ldr	r3, [r4, #8]
 8010fc0:	d011      	beq.n	8010fe6 <ucdr_deserialize_endian_uint16_t+0xae>
 8010fc2:	785b      	ldrb	r3, [r3, #1]
 8010fc4:	702b      	strb	r3, [r5, #0]
 8010fc6:	68a3      	ldr	r3, [r4, #8]
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	706b      	strb	r3, [r5, #1]
 8010fcc:	68a2      	ldr	r2, [r4, #8]
 8010fce:	6923      	ldr	r3, [r4, #16]
 8010fd0:	3202      	adds	r2, #2
 8010fd2:	3302      	adds	r3, #2
 8010fd4:	2102      	movs	r1, #2
 8010fd6:	60a2      	str	r2, [r4, #8]
 8010fd8:	6123      	str	r3, [r4, #16]
 8010fda:	7561      	strb	r1, [r4, #21]
 8010fdc:	7da0      	ldrb	r0, [r4, #22]
 8010fde:	f080 0001 	eor.w	r0, r0, #1
 8010fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fe6:	881b      	ldrh	r3, [r3, #0]
 8010fe8:	802b      	strh	r3, [r5, #0]
 8010fea:	e7ef      	b.n	8010fcc <ucdr_deserialize_endian_uint16_t+0x94>
 8010fec:	68a2      	ldr	r2, [r4, #8]
 8010fee:	6923      	ldr	r3, [r4, #16]
 8010ff0:	7da0      	ldrb	r0, [r4, #22]
 8010ff2:	f884 9015 	strb.w	r9, [r4, #21]
 8010ff6:	1bd2      	subs	r2, r2, r7
 8010ff8:	1bdb      	subs	r3, r3, r7
 8010ffa:	60a2      	str	r2, [r4, #8]
 8010ffc:	6123      	str	r3, [r4, #16]
 8010ffe:	f080 0001 	eor.w	r0, r0, #1
 8011002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011006:	68a3      	ldr	r3, [r4, #8]
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	706b      	strb	r3, [r5, #1]
 801100c:	e7c3      	b.n	8010f96 <ucdr_deserialize_endian_uint16_t+0x5e>
 801100e:	4641      	mov	r1, r8
 8011010:	463a      	mov	r2, r7
 8011012:	4628      	mov	r0, r5
 8011014:	f008 f91b 	bl	801924e <memcpy>
 8011018:	68a1      	ldr	r1, [r4, #8]
 801101a:	4652      	mov	r2, sl
 801101c:	19e8      	adds	r0, r5, r7
 801101e:	f008 f916 	bl	801924e <memcpy>
 8011022:	e7b8      	b.n	8010f96 <ucdr_deserialize_endian_uint16_t+0x5e>

08011024 <ucdr_serialize_uint32_t>:
 8011024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011028:	b082      	sub	sp, #8
 801102a:	4604      	mov	r4, r0
 801102c:	9101      	str	r1, [sp, #4]
 801102e:	2104      	movs	r1, #4
 8011030:	f000 fd9a 	bl	8011b68 <ucdr_buffer_alignment>
 8011034:	4601      	mov	r1, r0
 8011036:	4620      	mov	r0, r4
 8011038:	7d67      	ldrb	r7, [r4, #21]
 801103a:	f000 fdd9 	bl	8011bf0 <ucdr_advance_buffer>
 801103e:	2104      	movs	r1, #4
 8011040:	4620      	mov	r0, r4
 8011042:	f000 fd31 	bl	8011aa8 <ucdr_check_buffer_available_for>
 8011046:	2800      	cmp	r0, #0
 8011048:	d139      	bne.n	80110be <ucdr_serialize_uint32_t+0x9a>
 801104a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801104e:	42ab      	cmp	r3, r5
 8011050:	d930      	bls.n	80110b4 <ucdr_serialize_uint32_t+0x90>
 8011052:	1b5e      	subs	r6, r3, r5
 8011054:	60a3      	str	r3, [r4, #8]
 8011056:	6923      	ldr	r3, [r4, #16]
 8011058:	f1c6 0804 	rsb	r8, r6, #4
 801105c:	4433      	add	r3, r6
 801105e:	6123      	str	r3, [r4, #16]
 8011060:	4641      	mov	r1, r8
 8011062:	4620      	mov	r0, r4
 8011064:	f000 fd2c 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8011068:	2800      	cmp	r0, #0
 801106a:	d04c      	beq.n	8011106 <ucdr_serialize_uint32_t+0xe2>
 801106c:	7d23      	ldrb	r3, [r4, #20]
 801106e:	2b01      	cmp	r3, #1
 8011070:	d063      	beq.n	801113a <ucdr_serialize_uint32_t+0x116>
 8011072:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011076:	702b      	strb	r3, [r5, #0]
 8011078:	2e00      	cmp	r6, #0
 801107a:	d051      	beq.n	8011120 <ucdr_serialize_uint32_t+0xfc>
 801107c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011080:	706b      	strb	r3, [r5, #1]
 8011082:	2e01      	cmp	r6, #1
 8011084:	d050      	beq.n	8011128 <ucdr_serialize_uint32_t+0x104>
 8011086:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801108a:	70ab      	strb	r3, [r5, #2]
 801108c:	2e02      	cmp	r6, #2
 801108e:	d04f      	beq.n	8011130 <ucdr_serialize_uint32_t+0x10c>
 8011090:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011094:	70eb      	strb	r3, [r5, #3]
 8011096:	6923      	ldr	r3, [r4, #16]
 8011098:	68a2      	ldr	r2, [r4, #8]
 801109a:	7da0      	ldrb	r0, [r4, #22]
 801109c:	3304      	adds	r3, #4
 801109e:	1b9e      	subs	r6, r3, r6
 80110a0:	4442      	add	r2, r8
 80110a2:	2304      	movs	r3, #4
 80110a4:	f080 0001 	eor.w	r0, r0, #1
 80110a8:	60a2      	str	r2, [r4, #8]
 80110aa:	6126      	str	r6, [r4, #16]
 80110ac:	7563      	strb	r3, [r4, #21]
 80110ae:	b002      	add	sp, #8
 80110b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110b4:	2104      	movs	r1, #4
 80110b6:	4620      	mov	r0, r4
 80110b8:	f000 fd02 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 80110bc:	b1d0      	cbz	r0, 80110f4 <ucdr_serialize_uint32_t+0xd0>
 80110be:	7d23      	ldrb	r3, [r4, #20]
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	68a3      	ldr	r3, [r4, #8]
 80110c4:	d01c      	beq.n	8011100 <ucdr_serialize_uint32_t+0xdc>
 80110c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80110ca:	701a      	strb	r2, [r3, #0]
 80110cc:	68a3      	ldr	r3, [r4, #8]
 80110ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80110d2:	705a      	strb	r2, [r3, #1]
 80110d4:	68a3      	ldr	r3, [r4, #8]
 80110d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80110da:	709a      	strb	r2, [r3, #2]
 80110dc:	68a3      	ldr	r3, [r4, #8]
 80110de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80110e2:	70da      	strb	r2, [r3, #3]
 80110e4:	68a2      	ldr	r2, [r4, #8]
 80110e6:	6923      	ldr	r3, [r4, #16]
 80110e8:	3204      	adds	r2, #4
 80110ea:	3304      	adds	r3, #4
 80110ec:	2104      	movs	r1, #4
 80110ee:	60a2      	str	r2, [r4, #8]
 80110f0:	6123      	str	r3, [r4, #16]
 80110f2:	7561      	strb	r1, [r4, #21]
 80110f4:	7da0      	ldrb	r0, [r4, #22]
 80110f6:	f080 0001 	eor.w	r0, r0, #1
 80110fa:	b002      	add	sp, #8
 80110fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011100:	9a01      	ldr	r2, [sp, #4]
 8011102:	601a      	str	r2, [r3, #0]
 8011104:	e7ee      	b.n	80110e4 <ucdr_serialize_uint32_t+0xc0>
 8011106:	68a2      	ldr	r2, [r4, #8]
 8011108:	6923      	ldr	r3, [r4, #16]
 801110a:	7da0      	ldrb	r0, [r4, #22]
 801110c:	7567      	strb	r7, [r4, #21]
 801110e:	1b92      	subs	r2, r2, r6
 8011110:	1b9b      	subs	r3, r3, r6
 8011112:	f080 0001 	eor.w	r0, r0, #1
 8011116:	60a2      	str	r2, [r4, #8]
 8011118:	6123      	str	r3, [r4, #16]
 801111a:	b002      	add	sp, #8
 801111c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011120:	68a3      	ldr	r3, [r4, #8]
 8011122:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011126:	701a      	strb	r2, [r3, #0]
 8011128:	68a3      	ldr	r3, [r4, #8]
 801112a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801112e:	701a      	strb	r2, [r3, #0]
 8011130:	68a3      	ldr	r3, [r4, #8]
 8011132:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011136:	701a      	strb	r2, [r3, #0]
 8011138:	e7ad      	b.n	8011096 <ucdr_serialize_uint32_t+0x72>
 801113a:	4628      	mov	r0, r5
 801113c:	ad01      	add	r5, sp, #4
 801113e:	4629      	mov	r1, r5
 8011140:	4632      	mov	r2, r6
 8011142:	f008 f884 	bl	801924e <memcpy>
 8011146:	68a0      	ldr	r0, [r4, #8]
 8011148:	4642      	mov	r2, r8
 801114a:	19a9      	adds	r1, r5, r6
 801114c:	f008 f87f 	bl	801924e <memcpy>
 8011150:	e7a1      	b.n	8011096 <ucdr_serialize_uint32_t+0x72>
 8011152:	bf00      	nop

08011154 <ucdr_serialize_endian_uint32_t>:
 8011154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011158:	b083      	sub	sp, #12
 801115a:	460d      	mov	r5, r1
 801115c:	2104      	movs	r1, #4
 801115e:	4604      	mov	r4, r0
 8011160:	9201      	str	r2, [sp, #4]
 8011162:	f000 fd01 	bl	8011b68 <ucdr_buffer_alignment>
 8011166:	4601      	mov	r1, r0
 8011168:	4620      	mov	r0, r4
 801116a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801116e:	f000 fd3f 	bl	8011bf0 <ucdr_advance_buffer>
 8011172:	2104      	movs	r1, #4
 8011174:	4620      	mov	r0, r4
 8011176:	f000 fc97 	bl	8011aa8 <ucdr_check_buffer_available_for>
 801117a:	2800      	cmp	r0, #0
 801117c:	d138      	bne.n	80111f0 <ucdr_serialize_endian_uint32_t+0x9c>
 801117e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011182:	42b7      	cmp	r7, r6
 8011184:	d92f      	bls.n	80111e6 <ucdr_serialize_endian_uint32_t+0x92>
 8011186:	6923      	ldr	r3, [r4, #16]
 8011188:	60a7      	str	r7, [r4, #8]
 801118a:	1bbf      	subs	r7, r7, r6
 801118c:	443b      	add	r3, r7
 801118e:	f1c7 0904 	rsb	r9, r7, #4
 8011192:	6123      	str	r3, [r4, #16]
 8011194:	4649      	mov	r1, r9
 8011196:	4620      	mov	r0, r4
 8011198:	f000 fc92 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 801119c:	2800      	cmp	r0, #0
 801119e:	d04a      	beq.n	8011236 <ucdr_serialize_endian_uint32_t+0xe2>
 80111a0:	2d01      	cmp	r5, #1
 80111a2:	d063      	beq.n	801126c <ucdr_serialize_endian_uint32_t+0x118>
 80111a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80111a8:	7033      	strb	r3, [r6, #0]
 80111aa:	2f00      	cmp	r7, #0
 80111ac:	d051      	beq.n	8011252 <ucdr_serialize_endian_uint32_t+0xfe>
 80111ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80111b2:	7073      	strb	r3, [r6, #1]
 80111b4:	2f01      	cmp	r7, #1
 80111b6:	d050      	beq.n	801125a <ucdr_serialize_endian_uint32_t+0x106>
 80111b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80111bc:	70b3      	strb	r3, [r6, #2]
 80111be:	2f02      	cmp	r7, #2
 80111c0:	d04f      	beq.n	8011262 <ucdr_serialize_endian_uint32_t+0x10e>
 80111c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80111c6:	70f3      	strb	r3, [r6, #3]
 80111c8:	6923      	ldr	r3, [r4, #16]
 80111ca:	68a2      	ldr	r2, [r4, #8]
 80111cc:	7da0      	ldrb	r0, [r4, #22]
 80111ce:	3304      	adds	r3, #4
 80111d0:	444a      	add	r2, r9
 80111d2:	1bdb      	subs	r3, r3, r7
 80111d4:	2104      	movs	r1, #4
 80111d6:	f080 0001 	eor.w	r0, r0, #1
 80111da:	60a2      	str	r2, [r4, #8]
 80111dc:	6123      	str	r3, [r4, #16]
 80111de:	7561      	strb	r1, [r4, #21]
 80111e0:	b003      	add	sp, #12
 80111e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111e6:	2104      	movs	r1, #4
 80111e8:	4620      	mov	r0, r4
 80111ea:	f000 fc69 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 80111ee:	b1c8      	cbz	r0, 8011224 <ucdr_serialize_endian_uint32_t+0xd0>
 80111f0:	2d01      	cmp	r5, #1
 80111f2:	68a3      	ldr	r3, [r4, #8]
 80111f4:	d01c      	beq.n	8011230 <ucdr_serialize_endian_uint32_t+0xdc>
 80111f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80111fa:	701a      	strb	r2, [r3, #0]
 80111fc:	68a3      	ldr	r3, [r4, #8]
 80111fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011202:	705a      	strb	r2, [r3, #1]
 8011204:	68a3      	ldr	r3, [r4, #8]
 8011206:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801120a:	709a      	strb	r2, [r3, #2]
 801120c:	68a3      	ldr	r3, [r4, #8]
 801120e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011212:	70da      	strb	r2, [r3, #3]
 8011214:	68a2      	ldr	r2, [r4, #8]
 8011216:	6923      	ldr	r3, [r4, #16]
 8011218:	3204      	adds	r2, #4
 801121a:	3304      	adds	r3, #4
 801121c:	2104      	movs	r1, #4
 801121e:	60a2      	str	r2, [r4, #8]
 8011220:	6123      	str	r3, [r4, #16]
 8011222:	7561      	strb	r1, [r4, #21]
 8011224:	7da0      	ldrb	r0, [r4, #22]
 8011226:	f080 0001 	eor.w	r0, r0, #1
 801122a:	b003      	add	sp, #12
 801122c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011230:	9a01      	ldr	r2, [sp, #4]
 8011232:	601a      	str	r2, [r3, #0]
 8011234:	e7ee      	b.n	8011214 <ucdr_serialize_endian_uint32_t+0xc0>
 8011236:	68a2      	ldr	r2, [r4, #8]
 8011238:	6923      	ldr	r3, [r4, #16]
 801123a:	7da0      	ldrb	r0, [r4, #22]
 801123c:	f884 8015 	strb.w	r8, [r4, #21]
 8011240:	1bd2      	subs	r2, r2, r7
 8011242:	1bdb      	subs	r3, r3, r7
 8011244:	f080 0001 	eor.w	r0, r0, #1
 8011248:	60a2      	str	r2, [r4, #8]
 801124a:	6123      	str	r3, [r4, #16]
 801124c:	b003      	add	sp, #12
 801124e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011252:	68a3      	ldr	r3, [r4, #8]
 8011254:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011258:	701a      	strb	r2, [r3, #0]
 801125a:	68a3      	ldr	r3, [r4, #8]
 801125c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011260:	701a      	strb	r2, [r3, #0]
 8011262:	68a3      	ldr	r3, [r4, #8]
 8011264:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011268:	701a      	strb	r2, [r3, #0]
 801126a:	e7ad      	b.n	80111c8 <ucdr_serialize_endian_uint32_t+0x74>
 801126c:	ad01      	add	r5, sp, #4
 801126e:	4629      	mov	r1, r5
 8011270:	463a      	mov	r2, r7
 8011272:	4630      	mov	r0, r6
 8011274:	f007 ffeb 	bl	801924e <memcpy>
 8011278:	68a0      	ldr	r0, [r4, #8]
 801127a:	464a      	mov	r2, r9
 801127c:	19e9      	adds	r1, r5, r7
 801127e:	f007 ffe6 	bl	801924e <memcpy>
 8011282:	e7a1      	b.n	80111c8 <ucdr_serialize_endian_uint32_t+0x74>

08011284 <ucdr_deserialize_uint32_t>:
 8011284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011288:	460d      	mov	r5, r1
 801128a:	2104      	movs	r1, #4
 801128c:	4604      	mov	r4, r0
 801128e:	f000 fc6b 	bl	8011b68 <ucdr_buffer_alignment>
 8011292:	4601      	mov	r1, r0
 8011294:	4620      	mov	r0, r4
 8011296:	f894 8015 	ldrb.w	r8, [r4, #21]
 801129a:	f000 fca9 	bl	8011bf0 <ucdr_advance_buffer>
 801129e:	2104      	movs	r1, #4
 80112a0:	4620      	mov	r0, r4
 80112a2:	f000 fc01 	bl	8011aa8 <ucdr_check_buffer_available_for>
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d138      	bne.n	801131c <ucdr_deserialize_uint32_t+0x98>
 80112aa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80112ae:	42b7      	cmp	r7, r6
 80112b0:	d92f      	bls.n	8011312 <ucdr_deserialize_uint32_t+0x8e>
 80112b2:	6923      	ldr	r3, [r4, #16]
 80112b4:	60a7      	str	r7, [r4, #8]
 80112b6:	1bbf      	subs	r7, r7, r6
 80112b8:	443b      	add	r3, r7
 80112ba:	f1c7 0904 	rsb	r9, r7, #4
 80112be:	6123      	str	r3, [r4, #16]
 80112c0:	4649      	mov	r1, r9
 80112c2:	4620      	mov	r0, r4
 80112c4:	f000 fbfc 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 80112c8:	2800      	cmp	r0, #0
 80112ca:	d046      	beq.n	801135a <ucdr_deserialize_uint32_t+0xd6>
 80112cc:	7d23      	ldrb	r3, [r4, #20]
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d05c      	beq.n	801138c <ucdr_deserialize_uint32_t+0x108>
 80112d2:	78f3      	ldrb	r3, [r6, #3]
 80112d4:	702b      	strb	r3, [r5, #0]
 80112d6:	2f00      	cmp	r7, #0
 80112d8:	d04c      	beq.n	8011374 <ucdr_deserialize_uint32_t+0xf0>
 80112da:	78b3      	ldrb	r3, [r6, #2]
 80112dc:	706b      	strb	r3, [r5, #1]
 80112de:	2f01      	cmp	r7, #1
 80112e0:	f105 0302 	add.w	r3, r5, #2
 80112e4:	d04a      	beq.n	801137c <ucdr_deserialize_uint32_t+0xf8>
 80112e6:	7873      	ldrb	r3, [r6, #1]
 80112e8:	70ab      	strb	r3, [r5, #2]
 80112ea:	2f02      	cmp	r7, #2
 80112ec:	f105 0303 	add.w	r3, r5, #3
 80112f0:	d048      	beq.n	8011384 <ucdr_deserialize_uint32_t+0x100>
 80112f2:	7833      	ldrb	r3, [r6, #0]
 80112f4:	70eb      	strb	r3, [r5, #3]
 80112f6:	6923      	ldr	r3, [r4, #16]
 80112f8:	68a2      	ldr	r2, [r4, #8]
 80112fa:	7da0      	ldrb	r0, [r4, #22]
 80112fc:	2104      	movs	r1, #4
 80112fe:	3304      	adds	r3, #4
 8011300:	444a      	add	r2, r9
 8011302:	1bdb      	subs	r3, r3, r7
 8011304:	7561      	strb	r1, [r4, #21]
 8011306:	60a2      	str	r2, [r4, #8]
 8011308:	6123      	str	r3, [r4, #16]
 801130a:	f080 0001 	eor.w	r0, r0, #1
 801130e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011312:	2104      	movs	r1, #4
 8011314:	4620      	mov	r0, r4
 8011316:	f000 fbd3 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 801131a:	b1b0      	cbz	r0, 801134a <ucdr_deserialize_uint32_t+0xc6>
 801131c:	7d23      	ldrb	r3, [r4, #20]
 801131e:	2b01      	cmp	r3, #1
 8011320:	68a3      	ldr	r3, [r4, #8]
 8011322:	d017      	beq.n	8011354 <ucdr_deserialize_uint32_t+0xd0>
 8011324:	78db      	ldrb	r3, [r3, #3]
 8011326:	702b      	strb	r3, [r5, #0]
 8011328:	68a3      	ldr	r3, [r4, #8]
 801132a:	789b      	ldrb	r3, [r3, #2]
 801132c:	706b      	strb	r3, [r5, #1]
 801132e:	68a3      	ldr	r3, [r4, #8]
 8011330:	785b      	ldrb	r3, [r3, #1]
 8011332:	70ab      	strb	r3, [r5, #2]
 8011334:	68a3      	ldr	r3, [r4, #8]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	70eb      	strb	r3, [r5, #3]
 801133a:	68a2      	ldr	r2, [r4, #8]
 801133c:	6923      	ldr	r3, [r4, #16]
 801133e:	3204      	adds	r2, #4
 8011340:	3304      	adds	r3, #4
 8011342:	2104      	movs	r1, #4
 8011344:	60a2      	str	r2, [r4, #8]
 8011346:	6123      	str	r3, [r4, #16]
 8011348:	7561      	strb	r1, [r4, #21]
 801134a:	7da0      	ldrb	r0, [r4, #22]
 801134c:	f080 0001 	eor.w	r0, r0, #1
 8011350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	602b      	str	r3, [r5, #0]
 8011358:	e7ef      	b.n	801133a <ucdr_deserialize_uint32_t+0xb6>
 801135a:	68a2      	ldr	r2, [r4, #8]
 801135c:	6923      	ldr	r3, [r4, #16]
 801135e:	7da0      	ldrb	r0, [r4, #22]
 8011360:	f884 8015 	strb.w	r8, [r4, #21]
 8011364:	1bd2      	subs	r2, r2, r7
 8011366:	1bdb      	subs	r3, r3, r7
 8011368:	60a2      	str	r2, [r4, #8]
 801136a:	6123      	str	r3, [r4, #16]
 801136c:	f080 0001 	eor.w	r0, r0, #1
 8011370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011374:	68a3      	ldr	r3, [r4, #8]
 8011376:	789b      	ldrb	r3, [r3, #2]
 8011378:	706b      	strb	r3, [r5, #1]
 801137a:	1cab      	adds	r3, r5, #2
 801137c:	68a2      	ldr	r2, [r4, #8]
 801137e:	7852      	ldrb	r2, [r2, #1]
 8011380:	f803 2b01 	strb.w	r2, [r3], #1
 8011384:	68a2      	ldr	r2, [r4, #8]
 8011386:	7812      	ldrb	r2, [r2, #0]
 8011388:	701a      	strb	r2, [r3, #0]
 801138a:	e7b4      	b.n	80112f6 <ucdr_deserialize_uint32_t+0x72>
 801138c:	4631      	mov	r1, r6
 801138e:	463a      	mov	r2, r7
 8011390:	4628      	mov	r0, r5
 8011392:	f007 ff5c 	bl	801924e <memcpy>
 8011396:	68a1      	ldr	r1, [r4, #8]
 8011398:	464a      	mov	r2, r9
 801139a:	19e8      	adds	r0, r5, r7
 801139c:	f007 ff57 	bl	801924e <memcpy>
 80113a0:	e7a9      	b.n	80112f6 <ucdr_deserialize_uint32_t+0x72>
 80113a2:	bf00      	nop

080113a4 <ucdr_deserialize_endian_uint32_t>:
 80113a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113a8:	460e      	mov	r6, r1
 80113aa:	2104      	movs	r1, #4
 80113ac:	4604      	mov	r4, r0
 80113ae:	4615      	mov	r5, r2
 80113b0:	f000 fbda 	bl	8011b68 <ucdr_buffer_alignment>
 80113b4:	4601      	mov	r1, r0
 80113b6:	4620      	mov	r0, r4
 80113b8:	f894 9015 	ldrb.w	r9, [r4, #21]
 80113bc:	f000 fc18 	bl	8011bf0 <ucdr_advance_buffer>
 80113c0:	2104      	movs	r1, #4
 80113c2:	4620      	mov	r0, r4
 80113c4:	f000 fb70 	bl	8011aa8 <ucdr_check_buffer_available_for>
 80113c8:	2800      	cmp	r0, #0
 80113ca:	d13c      	bne.n	8011446 <ucdr_deserialize_endian_uint32_t+0xa2>
 80113cc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80113d0:	42bb      	cmp	r3, r7
 80113d2:	d933      	bls.n	801143c <ucdr_deserialize_endian_uint32_t+0x98>
 80113d4:	eba3 0807 	sub.w	r8, r3, r7
 80113d8:	60a3      	str	r3, [r4, #8]
 80113da:	6923      	ldr	r3, [r4, #16]
 80113dc:	f1c8 0a04 	rsb	sl, r8, #4
 80113e0:	4443      	add	r3, r8
 80113e2:	6123      	str	r3, [r4, #16]
 80113e4:	4651      	mov	r1, sl
 80113e6:	4620      	mov	r0, r4
 80113e8:	f000 fb6a 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d048      	beq.n	8011482 <ucdr_deserialize_endian_uint32_t+0xde>
 80113f0:	2e01      	cmp	r6, #1
 80113f2:	d061      	beq.n	80114b8 <ucdr_deserialize_endian_uint32_t+0x114>
 80113f4:	78fb      	ldrb	r3, [r7, #3]
 80113f6:	702b      	strb	r3, [r5, #0]
 80113f8:	f1b8 0f00 	cmp.w	r8, #0
 80113fc:	d050      	beq.n	80114a0 <ucdr_deserialize_endian_uint32_t+0xfc>
 80113fe:	78bb      	ldrb	r3, [r7, #2]
 8011400:	706b      	strb	r3, [r5, #1]
 8011402:	f1b8 0f01 	cmp.w	r8, #1
 8011406:	f105 0302 	add.w	r3, r5, #2
 801140a:	d04d      	beq.n	80114a8 <ucdr_deserialize_endian_uint32_t+0x104>
 801140c:	787b      	ldrb	r3, [r7, #1]
 801140e:	70ab      	strb	r3, [r5, #2]
 8011410:	f1b8 0f02 	cmp.w	r8, #2
 8011414:	f105 0303 	add.w	r3, r5, #3
 8011418:	d04a      	beq.n	80114b0 <ucdr_deserialize_endian_uint32_t+0x10c>
 801141a:	783b      	ldrb	r3, [r7, #0]
 801141c:	70eb      	strb	r3, [r5, #3]
 801141e:	6923      	ldr	r3, [r4, #16]
 8011420:	68a2      	ldr	r2, [r4, #8]
 8011422:	7da0      	ldrb	r0, [r4, #22]
 8011424:	2104      	movs	r1, #4
 8011426:	3304      	adds	r3, #4
 8011428:	4452      	add	r2, sl
 801142a:	eba3 0308 	sub.w	r3, r3, r8
 801142e:	7561      	strb	r1, [r4, #21]
 8011430:	60a2      	str	r2, [r4, #8]
 8011432:	6123      	str	r3, [r4, #16]
 8011434:	f080 0001 	eor.w	r0, r0, #1
 8011438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801143c:	2104      	movs	r1, #4
 801143e:	4620      	mov	r0, r4
 8011440:	f000 fb3e 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8011444:	b1a8      	cbz	r0, 8011472 <ucdr_deserialize_endian_uint32_t+0xce>
 8011446:	2e01      	cmp	r6, #1
 8011448:	68a3      	ldr	r3, [r4, #8]
 801144a:	d017      	beq.n	801147c <ucdr_deserialize_endian_uint32_t+0xd8>
 801144c:	78db      	ldrb	r3, [r3, #3]
 801144e:	702b      	strb	r3, [r5, #0]
 8011450:	68a3      	ldr	r3, [r4, #8]
 8011452:	789b      	ldrb	r3, [r3, #2]
 8011454:	706b      	strb	r3, [r5, #1]
 8011456:	68a3      	ldr	r3, [r4, #8]
 8011458:	785b      	ldrb	r3, [r3, #1]
 801145a:	70ab      	strb	r3, [r5, #2]
 801145c:	68a3      	ldr	r3, [r4, #8]
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	70eb      	strb	r3, [r5, #3]
 8011462:	68a2      	ldr	r2, [r4, #8]
 8011464:	6923      	ldr	r3, [r4, #16]
 8011466:	3204      	adds	r2, #4
 8011468:	3304      	adds	r3, #4
 801146a:	2104      	movs	r1, #4
 801146c:	60a2      	str	r2, [r4, #8]
 801146e:	6123      	str	r3, [r4, #16]
 8011470:	7561      	strb	r1, [r4, #21]
 8011472:	7da0      	ldrb	r0, [r4, #22]
 8011474:	f080 0001 	eor.w	r0, r0, #1
 8011478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	602b      	str	r3, [r5, #0]
 8011480:	e7ef      	b.n	8011462 <ucdr_deserialize_endian_uint32_t+0xbe>
 8011482:	68a2      	ldr	r2, [r4, #8]
 8011484:	6923      	ldr	r3, [r4, #16]
 8011486:	7da0      	ldrb	r0, [r4, #22]
 8011488:	f884 9015 	strb.w	r9, [r4, #21]
 801148c:	eba2 0208 	sub.w	r2, r2, r8
 8011490:	eba3 0308 	sub.w	r3, r3, r8
 8011494:	60a2      	str	r2, [r4, #8]
 8011496:	6123      	str	r3, [r4, #16]
 8011498:	f080 0001 	eor.w	r0, r0, #1
 801149c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114a0:	68a3      	ldr	r3, [r4, #8]
 80114a2:	789b      	ldrb	r3, [r3, #2]
 80114a4:	706b      	strb	r3, [r5, #1]
 80114a6:	1cab      	adds	r3, r5, #2
 80114a8:	68a2      	ldr	r2, [r4, #8]
 80114aa:	7852      	ldrb	r2, [r2, #1]
 80114ac:	f803 2b01 	strb.w	r2, [r3], #1
 80114b0:	68a2      	ldr	r2, [r4, #8]
 80114b2:	7812      	ldrb	r2, [r2, #0]
 80114b4:	701a      	strb	r2, [r3, #0]
 80114b6:	e7b2      	b.n	801141e <ucdr_deserialize_endian_uint32_t+0x7a>
 80114b8:	4639      	mov	r1, r7
 80114ba:	4642      	mov	r2, r8
 80114bc:	4628      	mov	r0, r5
 80114be:	f007 fec6 	bl	801924e <memcpy>
 80114c2:	68a1      	ldr	r1, [r4, #8]
 80114c4:	4652      	mov	r2, sl
 80114c6:	eb05 0008 	add.w	r0, r5, r8
 80114ca:	f007 fec0 	bl	801924e <memcpy>
 80114ce:	e7a6      	b.n	801141e <ucdr_deserialize_endian_uint32_t+0x7a>

080114d0 <ucdr_serialize_uint64_t>:
 80114d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114d4:	2108      	movs	r1, #8
 80114d6:	b082      	sub	sp, #8
 80114d8:	4604      	mov	r4, r0
 80114da:	e9cd 2300 	strd	r2, r3, [sp]
 80114de:	f000 fb43 	bl	8011b68 <ucdr_buffer_alignment>
 80114e2:	4601      	mov	r1, r0
 80114e4:	4620      	mov	r0, r4
 80114e6:	7d67      	ldrb	r7, [r4, #21]
 80114e8:	f000 fb82 	bl	8011bf0 <ucdr_advance_buffer>
 80114ec:	2108      	movs	r1, #8
 80114ee:	4620      	mov	r0, r4
 80114f0:	f000 fada 	bl	8011aa8 <ucdr_check_buffer_available_for>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d14e      	bne.n	8011596 <ucdr_serialize_uint64_t+0xc6>
 80114f8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80114fc:	42ab      	cmp	r3, r5
 80114fe:	d945      	bls.n	801158c <ucdr_serialize_uint64_t+0xbc>
 8011500:	1b5e      	subs	r6, r3, r5
 8011502:	60a3      	str	r3, [r4, #8]
 8011504:	6923      	ldr	r3, [r4, #16]
 8011506:	f1c6 0808 	rsb	r8, r6, #8
 801150a:	4433      	add	r3, r6
 801150c:	6123      	str	r3, [r4, #16]
 801150e:	4641      	mov	r1, r8
 8011510:	4620      	mov	r0, r4
 8011512:	f000 fad5 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8011516:	2800      	cmp	r0, #0
 8011518:	d074      	beq.n	8011604 <ucdr_serialize_uint64_t+0x134>
 801151a:	7d23      	ldrb	r3, [r4, #20]
 801151c:	2b01      	cmp	r3, #1
 801151e:	f000 809b 	beq.w	8011658 <ucdr_serialize_uint64_t+0x188>
 8011522:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011526:	702b      	strb	r3, [r5, #0]
 8011528:	2e00      	cmp	r6, #0
 801152a:	d078      	beq.n	801161e <ucdr_serialize_uint64_t+0x14e>
 801152c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011530:	706b      	strb	r3, [r5, #1]
 8011532:	2e01      	cmp	r6, #1
 8011534:	d077      	beq.n	8011626 <ucdr_serialize_uint64_t+0x156>
 8011536:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801153a:	70ab      	strb	r3, [r5, #2]
 801153c:	2e02      	cmp	r6, #2
 801153e:	d076      	beq.n	801162e <ucdr_serialize_uint64_t+0x15e>
 8011540:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011544:	70eb      	strb	r3, [r5, #3]
 8011546:	2e03      	cmp	r6, #3
 8011548:	d075      	beq.n	8011636 <ucdr_serialize_uint64_t+0x166>
 801154a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801154e:	712b      	strb	r3, [r5, #4]
 8011550:	2e04      	cmp	r6, #4
 8011552:	d074      	beq.n	801163e <ucdr_serialize_uint64_t+0x16e>
 8011554:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011558:	716b      	strb	r3, [r5, #5]
 801155a:	2e05      	cmp	r6, #5
 801155c:	d073      	beq.n	8011646 <ucdr_serialize_uint64_t+0x176>
 801155e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011562:	71ab      	strb	r3, [r5, #6]
 8011564:	2e06      	cmp	r6, #6
 8011566:	d072      	beq.n	801164e <ucdr_serialize_uint64_t+0x17e>
 8011568:	f89d 3000 	ldrb.w	r3, [sp]
 801156c:	71eb      	strb	r3, [r5, #7]
 801156e:	6923      	ldr	r3, [r4, #16]
 8011570:	68a2      	ldr	r2, [r4, #8]
 8011572:	7da0      	ldrb	r0, [r4, #22]
 8011574:	3308      	adds	r3, #8
 8011576:	1b9e      	subs	r6, r3, r6
 8011578:	4442      	add	r2, r8
 801157a:	2308      	movs	r3, #8
 801157c:	f080 0001 	eor.w	r0, r0, #1
 8011580:	60a2      	str	r2, [r4, #8]
 8011582:	6126      	str	r6, [r4, #16]
 8011584:	7563      	strb	r3, [r4, #21]
 8011586:	b002      	add	sp, #8
 8011588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801158c:	2108      	movs	r1, #8
 801158e:	4620      	mov	r0, r4
 8011590:	f000 fa96 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8011594:	b350      	cbz	r0, 80115ec <ucdr_serialize_uint64_t+0x11c>
 8011596:	7d23      	ldrb	r3, [r4, #20]
 8011598:	2b01      	cmp	r3, #1
 801159a:	d02d      	beq.n	80115f8 <ucdr_serialize_uint64_t+0x128>
 801159c:	68a3      	ldr	r3, [r4, #8]
 801159e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80115a2:	701a      	strb	r2, [r3, #0]
 80115a4:	68a3      	ldr	r3, [r4, #8]
 80115a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80115aa:	705a      	strb	r2, [r3, #1]
 80115ac:	68a3      	ldr	r3, [r4, #8]
 80115ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80115b2:	709a      	strb	r2, [r3, #2]
 80115b4:	68a3      	ldr	r3, [r4, #8]
 80115b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80115ba:	70da      	strb	r2, [r3, #3]
 80115bc:	68a3      	ldr	r3, [r4, #8]
 80115be:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80115c2:	711a      	strb	r2, [r3, #4]
 80115c4:	68a3      	ldr	r3, [r4, #8]
 80115c6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80115ca:	715a      	strb	r2, [r3, #5]
 80115cc:	68a3      	ldr	r3, [r4, #8]
 80115ce:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80115d2:	719a      	strb	r2, [r3, #6]
 80115d4:	68a3      	ldr	r3, [r4, #8]
 80115d6:	f89d 2000 	ldrb.w	r2, [sp]
 80115da:	71da      	strb	r2, [r3, #7]
 80115dc:	68a2      	ldr	r2, [r4, #8]
 80115de:	6923      	ldr	r3, [r4, #16]
 80115e0:	3208      	adds	r2, #8
 80115e2:	3308      	adds	r3, #8
 80115e4:	2108      	movs	r1, #8
 80115e6:	60a2      	str	r2, [r4, #8]
 80115e8:	6123      	str	r3, [r4, #16]
 80115ea:	7561      	strb	r1, [r4, #21]
 80115ec:	7da0      	ldrb	r0, [r4, #22]
 80115ee:	f080 0001 	eor.w	r0, r0, #1
 80115f2:	b002      	add	sp, #8
 80115f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f8:	466b      	mov	r3, sp
 80115fa:	cb03      	ldmia	r3!, {r0, r1}
 80115fc:	68a3      	ldr	r3, [r4, #8]
 80115fe:	6018      	str	r0, [r3, #0]
 8011600:	6059      	str	r1, [r3, #4]
 8011602:	e7eb      	b.n	80115dc <ucdr_serialize_uint64_t+0x10c>
 8011604:	68a2      	ldr	r2, [r4, #8]
 8011606:	6923      	ldr	r3, [r4, #16]
 8011608:	7da0      	ldrb	r0, [r4, #22]
 801160a:	7567      	strb	r7, [r4, #21]
 801160c:	1b92      	subs	r2, r2, r6
 801160e:	1b9b      	subs	r3, r3, r6
 8011610:	f080 0001 	eor.w	r0, r0, #1
 8011614:	60a2      	str	r2, [r4, #8]
 8011616:	6123      	str	r3, [r4, #16]
 8011618:	b002      	add	sp, #8
 801161a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801161e:	68a3      	ldr	r3, [r4, #8]
 8011620:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011624:	701a      	strb	r2, [r3, #0]
 8011626:	68a3      	ldr	r3, [r4, #8]
 8011628:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801162c:	701a      	strb	r2, [r3, #0]
 801162e:	68a3      	ldr	r3, [r4, #8]
 8011630:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011634:	701a      	strb	r2, [r3, #0]
 8011636:	68a3      	ldr	r3, [r4, #8]
 8011638:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801163c:	701a      	strb	r2, [r3, #0]
 801163e:	68a3      	ldr	r3, [r4, #8]
 8011640:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011644:	701a      	strb	r2, [r3, #0]
 8011646:	68a3      	ldr	r3, [r4, #8]
 8011648:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801164c:	701a      	strb	r2, [r3, #0]
 801164e:	68a3      	ldr	r3, [r4, #8]
 8011650:	f89d 2000 	ldrb.w	r2, [sp]
 8011654:	701a      	strb	r2, [r3, #0]
 8011656:	e78a      	b.n	801156e <ucdr_serialize_uint64_t+0x9e>
 8011658:	4628      	mov	r0, r5
 801165a:	466d      	mov	r5, sp
 801165c:	4629      	mov	r1, r5
 801165e:	4632      	mov	r2, r6
 8011660:	f007 fdf5 	bl	801924e <memcpy>
 8011664:	68a0      	ldr	r0, [r4, #8]
 8011666:	4642      	mov	r2, r8
 8011668:	19a9      	adds	r1, r5, r6
 801166a:	f007 fdf0 	bl	801924e <memcpy>
 801166e:	e77e      	b.n	801156e <ucdr_serialize_uint64_t+0x9e>

08011670 <ucdr_serialize_int16_t>:
 8011670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011674:	b082      	sub	sp, #8
 8011676:	460b      	mov	r3, r1
 8011678:	2102      	movs	r1, #2
 801167a:	4604      	mov	r4, r0
 801167c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011680:	f000 fa72 	bl	8011b68 <ucdr_buffer_alignment>
 8011684:	4601      	mov	r1, r0
 8011686:	4620      	mov	r0, r4
 8011688:	7d67      	ldrb	r7, [r4, #21]
 801168a:	f000 fab1 	bl	8011bf0 <ucdr_advance_buffer>
 801168e:	2102      	movs	r1, #2
 8011690:	4620      	mov	r0, r4
 8011692:	f000 fa09 	bl	8011aa8 <ucdr_check_buffer_available_for>
 8011696:	bb78      	cbnz	r0, 80116f8 <ucdr_serialize_int16_t+0x88>
 8011698:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801169c:	42ab      	cmp	r3, r5
 801169e:	d926      	bls.n	80116ee <ucdr_serialize_int16_t+0x7e>
 80116a0:	1b5e      	subs	r6, r3, r5
 80116a2:	60a3      	str	r3, [r4, #8]
 80116a4:	6923      	ldr	r3, [r4, #16]
 80116a6:	f1c6 0802 	rsb	r8, r6, #2
 80116aa:	4433      	add	r3, r6
 80116ac:	6123      	str	r3, [r4, #16]
 80116ae:	4641      	mov	r1, r8
 80116b0:	4620      	mov	r0, r4
 80116b2:	f000 fa05 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 80116b6:	2800      	cmp	r0, #0
 80116b8:	d03b      	beq.n	8011732 <ucdr_serialize_int16_t+0xc2>
 80116ba:	7d23      	ldrb	r3, [r4, #20]
 80116bc:	2b01      	cmp	r3, #1
 80116be:	d04a      	beq.n	8011756 <ucdr_serialize_int16_t+0xe6>
 80116c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80116c4:	702b      	strb	r3, [r5, #0]
 80116c6:	2e00      	cmp	r6, #0
 80116c8:	d040      	beq.n	801174c <ucdr_serialize_int16_t+0xdc>
 80116ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80116ce:	706b      	strb	r3, [r5, #1]
 80116d0:	6923      	ldr	r3, [r4, #16]
 80116d2:	68a2      	ldr	r2, [r4, #8]
 80116d4:	7da0      	ldrb	r0, [r4, #22]
 80116d6:	3302      	adds	r3, #2
 80116d8:	1b9e      	subs	r6, r3, r6
 80116da:	4442      	add	r2, r8
 80116dc:	2302      	movs	r3, #2
 80116de:	f080 0001 	eor.w	r0, r0, #1
 80116e2:	60a2      	str	r2, [r4, #8]
 80116e4:	6126      	str	r6, [r4, #16]
 80116e6:	7563      	strb	r3, [r4, #21]
 80116e8:	b002      	add	sp, #8
 80116ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116ee:	2102      	movs	r1, #2
 80116f0:	4620      	mov	r0, r4
 80116f2:	f000 f9e5 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 80116f6:	b190      	cbz	r0, 801171e <ucdr_serialize_int16_t+0xae>
 80116f8:	7d23      	ldrb	r3, [r4, #20]
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	68a3      	ldr	r3, [r4, #8]
 80116fe:	d014      	beq.n	801172a <ucdr_serialize_int16_t+0xba>
 8011700:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011704:	701a      	strb	r2, [r3, #0]
 8011706:	68a3      	ldr	r3, [r4, #8]
 8011708:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801170c:	705a      	strb	r2, [r3, #1]
 801170e:	68a2      	ldr	r2, [r4, #8]
 8011710:	6923      	ldr	r3, [r4, #16]
 8011712:	3202      	adds	r2, #2
 8011714:	3302      	adds	r3, #2
 8011716:	2102      	movs	r1, #2
 8011718:	60a2      	str	r2, [r4, #8]
 801171a:	6123      	str	r3, [r4, #16]
 801171c:	7561      	strb	r1, [r4, #21]
 801171e:	7da0      	ldrb	r0, [r4, #22]
 8011720:	f080 0001 	eor.w	r0, r0, #1
 8011724:	b002      	add	sp, #8
 8011726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801172a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801172e:	801a      	strh	r2, [r3, #0]
 8011730:	e7ed      	b.n	801170e <ucdr_serialize_int16_t+0x9e>
 8011732:	68a2      	ldr	r2, [r4, #8]
 8011734:	6923      	ldr	r3, [r4, #16]
 8011736:	7da0      	ldrb	r0, [r4, #22]
 8011738:	7567      	strb	r7, [r4, #21]
 801173a:	1b92      	subs	r2, r2, r6
 801173c:	1b9b      	subs	r3, r3, r6
 801173e:	f080 0001 	eor.w	r0, r0, #1
 8011742:	60a2      	str	r2, [r4, #8]
 8011744:	6123      	str	r3, [r4, #16]
 8011746:	b002      	add	sp, #8
 8011748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801174c:	68a3      	ldr	r3, [r4, #8]
 801174e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011752:	701a      	strb	r2, [r3, #0]
 8011754:	e7bc      	b.n	80116d0 <ucdr_serialize_int16_t+0x60>
 8011756:	4628      	mov	r0, r5
 8011758:	f10d 0506 	add.w	r5, sp, #6
 801175c:	4629      	mov	r1, r5
 801175e:	4632      	mov	r2, r6
 8011760:	f007 fd75 	bl	801924e <memcpy>
 8011764:	68a0      	ldr	r0, [r4, #8]
 8011766:	4642      	mov	r2, r8
 8011768:	19a9      	adds	r1, r5, r6
 801176a:	f007 fd70 	bl	801924e <memcpy>
 801176e:	e7af      	b.n	80116d0 <ucdr_serialize_int16_t+0x60>

08011770 <ucdr_deserialize_int16_t>:
 8011770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011774:	460d      	mov	r5, r1
 8011776:	2102      	movs	r1, #2
 8011778:	4604      	mov	r4, r0
 801177a:	f000 f9f5 	bl	8011b68 <ucdr_buffer_alignment>
 801177e:	4601      	mov	r1, r0
 8011780:	4620      	mov	r0, r4
 8011782:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011786:	f000 fa33 	bl	8011bf0 <ucdr_advance_buffer>
 801178a:	2102      	movs	r1, #2
 801178c:	4620      	mov	r0, r4
 801178e:	f000 f98b 	bl	8011aa8 <ucdr_check_buffer_available_for>
 8011792:	bb60      	cbnz	r0, 80117ee <ucdr_deserialize_int16_t+0x7e>
 8011794:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011798:	42be      	cmp	r6, r7
 801179a:	d923      	bls.n	80117e4 <ucdr_deserialize_int16_t+0x74>
 801179c:	6923      	ldr	r3, [r4, #16]
 801179e:	60a6      	str	r6, [r4, #8]
 80117a0:	1bf6      	subs	r6, r6, r7
 80117a2:	4433      	add	r3, r6
 80117a4:	f1c6 0902 	rsb	r9, r6, #2
 80117a8:	6123      	str	r3, [r4, #16]
 80117aa:	4649      	mov	r1, r9
 80117ac:	4620      	mov	r0, r4
 80117ae:	f000 f987 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 80117b2:	2800      	cmp	r0, #0
 80117b4:	d034      	beq.n	8011820 <ucdr_deserialize_int16_t+0xb0>
 80117b6:	7d23      	ldrb	r3, [r4, #20]
 80117b8:	2b01      	cmp	r3, #1
 80117ba:	d042      	beq.n	8011842 <ucdr_deserialize_int16_t+0xd2>
 80117bc:	787b      	ldrb	r3, [r7, #1]
 80117be:	702b      	strb	r3, [r5, #0]
 80117c0:	2e00      	cmp	r6, #0
 80117c2:	d03a      	beq.n	801183a <ucdr_deserialize_int16_t+0xca>
 80117c4:	783b      	ldrb	r3, [r7, #0]
 80117c6:	706b      	strb	r3, [r5, #1]
 80117c8:	6923      	ldr	r3, [r4, #16]
 80117ca:	68a2      	ldr	r2, [r4, #8]
 80117cc:	7da0      	ldrb	r0, [r4, #22]
 80117ce:	2102      	movs	r1, #2
 80117d0:	3302      	adds	r3, #2
 80117d2:	444a      	add	r2, r9
 80117d4:	1b9b      	subs	r3, r3, r6
 80117d6:	7561      	strb	r1, [r4, #21]
 80117d8:	60a2      	str	r2, [r4, #8]
 80117da:	6123      	str	r3, [r4, #16]
 80117dc:	f080 0001 	eor.w	r0, r0, #1
 80117e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117e4:	2102      	movs	r1, #2
 80117e6:	4620      	mov	r0, r4
 80117e8:	f000 f96a 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 80117ec:	b180      	cbz	r0, 8011810 <ucdr_deserialize_int16_t+0xa0>
 80117ee:	7d23      	ldrb	r3, [r4, #20]
 80117f0:	2b01      	cmp	r3, #1
 80117f2:	68a3      	ldr	r3, [r4, #8]
 80117f4:	d011      	beq.n	801181a <ucdr_deserialize_int16_t+0xaa>
 80117f6:	785b      	ldrb	r3, [r3, #1]
 80117f8:	702b      	strb	r3, [r5, #0]
 80117fa:	68a3      	ldr	r3, [r4, #8]
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	706b      	strb	r3, [r5, #1]
 8011800:	68a2      	ldr	r2, [r4, #8]
 8011802:	6923      	ldr	r3, [r4, #16]
 8011804:	3202      	adds	r2, #2
 8011806:	3302      	adds	r3, #2
 8011808:	2102      	movs	r1, #2
 801180a:	60a2      	str	r2, [r4, #8]
 801180c:	6123      	str	r3, [r4, #16]
 801180e:	7561      	strb	r1, [r4, #21]
 8011810:	7da0      	ldrb	r0, [r4, #22]
 8011812:	f080 0001 	eor.w	r0, r0, #1
 8011816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801181a:	881b      	ldrh	r3, [r3, #0]
 801181c:	802b      	strh	r3, [r5, #0]
 801181e:	e7ef      	b.n	8011800 <ucdr_deserialize_int16_t+0x90>
 8011820:	68a2      	ldr	r2, [r4, #8]
 8011822:	6923      	ldr	r3, [r4, #16]
 8011824:	7da0      	ldrb	r0, [r4, #22]
 8011826:	f884 8015 	strb.w	r8, [r4, #21]
 801182a:	1b92      	subs	r2, r2, r6
 801182c:	1b9b      	subs	r3, r3, r6
 801182e:	60a2      	str	r2, [r4, #8]
 8011830:	6123      	str	r3, [r4, #16]
 8011832:	f080 0001 	eor.w	r0, r0, #1
 8011836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801183a:	68a3      	ldr	r3, [r4, #8]
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	706b      	strb	r3, [r5, #1]
 8011840:	e7c2      	b.n	80117c8 <ucdr_deserialize_int16_t+0x58>
 8011842:	4639      	mov	r1, r7
 8011844:	4632      	mov	r2, r6
 8011846:	4628      	mov	r0, r5
 8011848:	f007 fd01 	bl	801924e <memcpy>
 801184c:	68a1      	ldr	r1, [r4, #8]
 801184e:	464a      	mov	r2, r9
 8011850:	19a8      	adds	r0, r5, r6
 8011852:	f007 fcfc 	bl	801924e <memcpy>
 8011856:	e7b7      	b.n	80117c8 <ucdr_deserialize_int16_t+0x58>

08011858 <ucdr_serialize_int32_t>:
 8011858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801185c:	b082      	sub	sp, #8
 801185e:	4604      	mov	r4, r0
 8011860:	9101      	str	r1, [sp, #4]
 8011862:	2104      	movs	r1, #4
 8011864:	f000 f980 	bl	8011b68 <ucdr_buffer_alignment>
 8011868:	4601      	mov	r1, r0
 801186a:	4620      	mov	r0, r4
 801186c:	7d67      	ldrb	r7, [r4, #21]
 801186e:	f000 f9bf 	bl	8011bf0 <ucdr_advance_buffer>
 8011872:	2104      	movs	r1, #4
 8011874:	4620      	mov	r0, r4
 8011876:	f000 f917 	bl	8011aa8 <ucdr_check_buffer_available_for>
 801187a:	2800      	cmp	r0, #0
 801187c:	d139      	bne.n	80118f2 <ucdr_serialize_int32_t+0x9a>
 801187e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011882:	42ab      	cmp	r3, r5
 8011884:	d930      	bls.n	80118e8 <ucdr_serialize_int32_t+0x90>
 8011886:	1b5e      	subs	r6, r3, r5
 8011888:	60a3      	str	r3, [r4, #8]
 801188a:	6923      	ldr	r3, [r4, #16]
 801188c:	f1c6 0804 	rsb	r8, r6, #4
 8011890:	4433      	add	r3, r6
 8011892:	6123      	str	r3, [r4, #16]
 8011894:	4641      	mov	r1, r8
 8011896:	4620      	mov	r0, r4
 8011898:	f000 f912 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 801189c:	2800      	cmp	r0, #0
 801189e:	d04c      	beq.n	801193a <ucdr_serialize_int32_t+0xe2>
 80118a0:	7d23      	ldrb	r3, [r4, #20]
 80118a2:	2b01      	cmp	r3, #1
 80118a4:	d063      	beq.n	801196e <ucdr_serialize_int32_t+0x116>
 80118a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80118aa:	702b      	strb	r3, [r5, #0]
 80118ac:	2e00      	cmp	r6, #0
 80118ae:	d051      	beq.n	8011954 <ucdr_serialize_int32_t+0xfc>
 80118b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80118b4:	706b      	strb	r3, [r5, #1]
 80118b6:	2e01      	cmp	r6, #1
 80118b8:	d050      	beq.n	801195c <ucdr_serialize_int32_t+0x104>
 80118ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80118be:	70ab      	strb	r3, [r5, #2]
 80118c0:	2e02      	cmp	r6, #2
 80118c2:	d04f      	beq.n	8011964 <ucdr_serialize_int32_t+0x10c>
 80118c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80118c8:	70eb      	strb	r3, [r5, #3]
 80118ca:	6923      	ldr	r3, [r4, #16]
 80118cc:	68a2      	ldr	r2, [r4, #8]
 80118ce:	7da0      	ldrb	r0, [r4, #22]
 80118d0:	3304      	adds	r3, #4
 80118d2:	1b9e      	subs	r6, r3, r6
 80118d4:	4442      	add	r2, r8
 80118d6:	2304      	movs	r3, #4
 80118d8:	f080 0001 	eor.w	r0, r0, #1
 80118dc:	60a2      	str	r2, [r4, #8]
 80118de:	6126      	str	r6, [r4, #16]
 80118e0:	7563      	strb	r3, [r4, #21]
 80118e2:	b002      	add	sp, #8
 80118e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118e8:	2104      	movs	r1, #4
 80118ea:	4620      	mov	r0, r4
 80118ec:	f000 f8e8 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 80118f0:	b1d0      	cbz	r0, 8011928 <ucdr_serialize_int32_t+0xd0>
 80118f2:	7d23      	ldrb	r3, [r4, #20]
 80118f4:	2b01      	cmp	r3, #1
 80118f6:	68a3      	ldr	r3, [r4, #8]
 80118f8:	d01c      	beq.n	8011934 <ucdr_serialize_int32_t+0xdc>
 80118fa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80118fe:	701a      	strb	r2, [r3, #0]
 8011900:	68a3      	ldr	r3, [r4, #8]
 8011902:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011906:	705a      	strb	r2, [r3, #1]
 8011908:	68a3      	ldr	r3, [r4, #8]
 801190a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801190e:	709a      	strb	r2, [r3, #2]
 8011910:	68a3      	ldr	r3, [r4, #8]
 8011912:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011916:	70da      	strb	r2, [r3, #3]
 8011918:	68a2      	ldr	r2, [r4, #8]
 801191a:	6923      	ldr	r3, [r4, #16]
 801191c:	3204      	adds	r2, #4
 801191e:	3304      	adds	r3, #4
 8011920:	2104      	movs	r1, #4
 8011922:	60a2      	str	r2, [r4, #8]
 8011924:	6123      	str	r3, [r4, #16]
 8011926:	7561      	strb	r1, [r4, #21]
 8011928:	7da0      	ldrb	r0, [r4, #22]
 801192a:	f080 0001 	eor.w	r0, r0, #1
 801192e:	b002      	add	sp, #8
 8011930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011934:	9a01      	ldr	r2, [sp, #4]
 8011936:	601a      	str	r2, [r3, #0]
 8011938:	e7ee      	b.n	8011918 <ucdr_serialize_int32_t+0xc0>
 801193a:	68a2      	ldr	r2, [r4, #8]
 801193c:	6923      	ldr	r3, [r4, #16]
 801193e:	7da0      	ldrb	r0, [r4, #22]
 8011940:	7567      	strb	r7, [r4, #21]
 8011942:	1b92      	subs	r2, r2, r6
 8011944:	1b9b      	subs	r3, r3, r6
 8011946:	f080 0001 	eor.w	r0, r0, #1
 801194a:	60a2      	str	r2, [r4, #8]
 801194c:	6123      	str	r3, [r4, #16]
 801194e:	b002      	add	sp, #8
 8011950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011954:	68a3      	ldr	r3, [r4, #8]
 8011956:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801195a:	701a      	strb	r2, [r3, #0]
 801195c:	68a3      	ldr	r3, [r4, #8]
 801195e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011962:	701a      	strb	r2, [r3, #0]
 8011964:	68a3      	ldr	r3, [r4, #8]
 8011966:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801196a:	701a      	strb	r2, [r3, #0]
 801196c:	e7ad      	b.n	80118ca <ucdr_serialize_int32_t+0x72>
 801196e:	4628      	mov	r0, r5
 8011970:	ad01      	add	r5, sp, #4
 8011972:	4629      	mov	r1, r5
 8011974:	4632      	mov	r2, r6
 8011976:	f007 fc6a 	bl	801924e <memcpy>
 801197a:	68a0      	ldr	r0, [r4, #8]
 801197c:	4642      	mov	r2, r8
 801197e:	19a9      	adds	r1, r5, r6
 8011980:	f007 fc65 	bl	801924e <memcpy>
 8011984:	e7a1      	b.n	80118ca <ucdr_serialize_int32_t+0x72>
 8011986:	bf00      	nop

08011988 <ucdr_deserialize_int32_t>:
 8011988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801198c:	460d      	mov	r5, r1
 801198e:	2104      	movs	r1, #4
 8011990:	4604      	mov	r4, r0
 8011992:	f000 f8e9 	bl	8011b68 <ucdr_buffer_alignment>
 8011996:	4601      	mov	r1, r0
 8011998:	4620      	mov	r0, r4
 801199a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801199e:	f000 f927 	bl	8011bf0 <ucdr_advance_buffer>
 80119a2:	2104      	movs	r1, #4
 80119a4:	4620      	mov	r0, r4
 80119a6:	f000 f87f 	bl	8011aa8 <ucdr_check_buffer_available_for>
 80119aa:	2800      	cmp	r0, #0
 80119ac:	d138      	bne.n	8011a20 <ucdr_deserialize_int32_t+0x98>
 80119ae:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80119b2:	42b7      	cmp	r7, r6
 80119b4:	d92f      	bls.n	8011a16 <ucdr_deserialize_int32_t+0x8e>
 80119b6:	6923      	ldr	r3, [r4, #16]
 80119b8:	60a7      	str	r7, [r4, #8]
 80119ba:	1bbf      	subs	r7, r7, r6
 80119bc:	443b      	add	r3, r7
 80119be:	f1c7 0904 	rsb	r9, r7, #4
 80119c2:	6123      	str	r3, [r4, #16]
 80119c4:	4649      	mov	r1, r9
 80119c6:	4620      	mov	r0, r4
 80119c8:	f000 f87a 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 80119cc:	2800      	cmp	r0, #0
 80119ce:	d046      	beq.n	8011a5e <ucdr_deserialize_int32_t+0xd6>
 80119d0:	7d23      	ldrb	r3, [r4, #20]
 80119d2:	2b01      	cmp	r3, #1
 80119d4:	d05c      	beq.n	8011a90 <ucdr_deserialize_int32_t+0x108>
 80119d6:	78f3      	ldrb	r3, [r6, #3]
 80119d8:	702b      	strb	r3, [r5, #0]
 80119da:	2f00      	cmp	r7, #0
 80119dc:	d04c      	beq.n	8011a78 <ucdr_deserialize_int32_t+0xf0>
 80119de:	78b3      	ldrb	r3, [r6, #2]
 80119e0:	706b      	strb	r3, [r5, #1]
 80119e2:	2f01      	cmp	r7, #1
 80119e4:	f105 0302 	add.w	r3, r5, #2
 80119e8:	d04a      	beq.n	8011a80 <ucdr_deserialize_int32_t+0xf8>
 80119ea:	7873      	ldrb	r3, [r6, #1]
 80119ec:	70ab      	strb	r3, [r5, #2]
 80119ee:	2f02      	cmp	r7, #2
 80119f0:	f105 0303 	add.w	r3, r5, #3
 80119f4:	d048      	beq.n	8011a88 <ucdr_deserialize_int32_t+0x100>
 80119f6:	7833      	ldrb	r3, [r6, #0]
 80119f8:	70eb      	strb	r3, [r5, #3]
 80119fa:	6923      	ldr	r3, [r4, #16]
 80119fc:	68a2      	ldr	r2, [r4, #8]
 80119fe:	7da0      	ldrb	r0, [r4, #22]
 8011a00:	2104      	movs	r1, #4
 8011a02:	3304      	adds	r3, #4
 8011a04:	444a      	add	r2, r9
 8011a06:	1bdb      	subs	r3, r3, r7
 8011a08:	7561      	strb	r1, [r4, #21]
 8011a0a:	60a2      	str	r2, [r4, #8]
 8011a0c:	6123      	str	r3, [r4, #16]
 8011a0e:	f080 0001 	eor.w	r0, r0, #1
 8011a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a16:	2104      	movs	r1, #4
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f000 f851 	bl	8011ac0 <ucdr_check_final_buffer_behavior>
 8011a1e:	b1b0      	cbz	r0, 8011a4e <ucdr_deserialize_int32_t+0xc6>
 8011a20:	7d23      	ldrb	r3, [r4, #20]
 8011a22:	2b01      	cmp	r3, #1
 8011a24:	68a3      	ldr	r3, [r4, #8]
 8011a26:	d017      	beq.n	8011a58 <ucdr_deserialize_int32_t+0xd0>
 8011a28:	78db      	ldrb	r3, [r3, #3]
 8011a2a:	702b      	strb	r3, [r5, #0]
 8011a2c:	68a3      	ldr	r3, [r4, #8]
 8011a2e:	789b      	ldrb	r3, [r3, #2]
 8011a30:	706b      	strb	r3, [r5, #1]
 8011a32:	68a3      	ldr	r3, [r4, #8]
 8011a34:	785b      	ldrb	r3, [r3, #1]
 8011a36:	70ab      	strb	r3, [r5, #2]
 8011a38:	68a3      	ldr	r3, [r4, #8]
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	70eb      	strb	r3, [r5, #3]
 8011a3e:	68a2      	ldr	r2, [r4, #8]
 8011a40:	6923      	ldr	r3, [r4, #16]
 8011a42:	3204      	adds	r2, #4
 8011a44:	3304      	adds	r3, #4
 8011a46:	2104      	movs	r1, #4
 8011a48:	60a2      	str	r2, [r4, #8]
 8011a4a:	6123      	str	r3, [r4, #16]
 8011a4c:	7561      	strb	r1, [r4, #21]
 8011a4e:	7da0      	ldrb	r0, [r4, #22]
 8011a50:	f080 0001 	eor.w	r0, r0, #1
 8011a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	602b      	str	r3, [r5, #0]
 8011a5c:	e7ef      	b.n	8011a3e <ucdr_deserialize_int32_t+0xb6>
 8011a5e:	68a2      	ldr	r2, [r4, #8]
 8011a60:	6923      	ldr	r3, [r4, #16]
 8011a62:	7da0      	ldrb	r0, [r4, #22]
 8011a64:	f884 8015 	strb.w	r8, [r4, #21]
 8011a68:	1bd2      	subs	r2, r2, r7
 8011a6a:	1bdb      	subs	r3, r3, r7
 8011a6c:	60a2      	str	r2, [r4, #8]
 8011a6e:	6123      	str	r3, [r4, #16]
 8011a70:	f080 0001 	eor.w	r0, r0, #1
 8011a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a78:	68a3      	ldr	r3, [r4, #8]
 8011a7a:	789b      	ldrb	r3, [r3, #2]
 8011a7c:	706b      	strb	r3, [r5, #1]
 8011a7e:	1cab      	adds	r3, r5, #2
 8011a80:	68a2      	ldr	r2, [r4, #8]
 8011a82:	7852      	ldrb	r2, [r2, #1]
 8011a84:	f803 2b01 	strb.w	r2, [r3], #1
 8011a88:	68a2      	ldr	r2, [r4, #8]
 8011a8a:	7812      	ldrb	r2, [r2, #0]
 8011a8c:	701a      	strb	r2, [r3, #0]
 8011a8e:	e7b4      	b.n	80119fa <ucdr_deserialize_int32_t+0x72>
 8011a90:	4631      	mov	r1, r6
 8011a92:	463a      	mov	r2, r7
 8011a94:	4628      	mov	r0, r5
 8011a96:	f007 fbda 	bl	801924e <memcpy>
 8011a9a:	68a1      	ldr	r1, [r4, #8]
 8011a9c:	464a      	mov	r2, r9
 8011a9e:	19e8      	adds	r0, r5, r7
 8011aa0:	f007 fbd5 	bl	801924e <memcpy>
 8011aa4:	e7a9      	b.n	80119fa <ucdr_deserialize_int32_t+0x72>
 8011aa6:	bf00      	nop

08011aa8 <ucdr_check_buffer_available_for>:
 8011aa8:	7d83      	ldrb	r3, [r0, #22]
 8011aaa:	b93b      	cbnz	r3, 8011abc <ucdr_check_buffer_available_for+0x14>
 8011aac:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8011ab0:	4419      	add	r1, r3
 8011ab2:	4288      	cmp	r0, r1
 8011ab4:	bf34      	ite	cc
 8011ab6:	2000      	movcc	r0, #0
 8011ab8:	2001      	movcs	r0, #1
 8011aba:	4770      	bx	lr
 8011abc:	2000      	movs	r0, #0
 8011abe:	4770      	bx	lr

08011ac0 <ucdr_check_final_buffer_behavior>:
 8011ac0:	7d83      	ldrb	r3, [r0, #22]
 8011ac2:	b943      	cbnz	r3, 8011ad6 <ucdr_check_final_buffer_behavior+0x16>
 8011ac4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8011ac8:	4291      	cmp	r1, r2
 8011aca:	b510      	push	{r4, lr}
 8011acc:	4604      	mov	r4, r0
 8011ace:	d205      	bcs.n	8011adc <ucdr_check_final_buffer_behavior+0x1c>
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	bd10      	pop	{r4, pc}
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	4618      	mov	r0, r3
 8011ada:	4770      	bx	lr
 8011adc:	6982      	ldr	r2, [r0, #24]
 8011ade:	b13a      	cbz	r2, 8011af0 <ucdr_check_final_buffer_behavior+0x30>
 8011ae0:	69c1      	ldr	r1, [r0, #28]
 8011ae2:	4790      	blx	r2
 8011ae4:	f080 0301 	eor.w	r3, r0, #1
 8011ae8:	b2db      	uxtb	r3, r3
 8011aea:	75a0      	strb	r0, [r4, #22]
 8011aec:	4618      	mov	r0, r3
 8011aee:	bd10      	pop	{r4, pc}
 8011af0:	2001      	movs	r0, #1
 8011af2:	75a0      	strb	r0, [r4, #22]
 8011af4:	e7fa      	b.n	8011aec <ucdr_check_final_buffer_behavior+0x2c>
 8011af6:	bf00      	nop

08011af8 <ucdr_set_on_full_buffer_callback>:
 8011af8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop

08011b00 <ucdr_init_buffer_origin_offset_endian>:
 8011b00:	b410      	push	{r4}
 8011b02:	9c01      	ldr	r4, [sp, #4]
 8011b04:	6001      	str	r1, [r0, #0]
 8011b06:	440a      	add	r2, r1
 8011b08:	6042      	str	r2, [r0, #4]
 8011b0a:	190a      	adds	r2, r1, r4
 8011b0c:	441c      	add	r4, r3
 8011b0e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8011b12:	6082      	str	r2, [r0, #8]
 8011b14:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011b18:	7503      	strb	r3, [r0, #20]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8011b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b24:	7542      	strb	r2, [r0, #21]
 8011b26:	7582      	strb	r2, [r0, #22]
 8011b28:	4770      	bx	lr
 8011b2a:	bf00      	nop

08011b2c <ucdr_init_buffer_origin_offset>:
 8011b2c:	b510      	push	{r4, lr}
 8011b2e:	b082      	sub	sp, #8
 8011b30:	9c04      	ldr	r4, [sp, #16]
 8011b32:	9400      	str	r4, [sp, #0]
 8011b34:	2401      	movs	r4, #1
 8011b36:	9401      	str	r4, [sp, #4]
 8011b38:	f7ff ffe2 	bl	8011b00 <ucdr_init_buffer_origin_offset_endian>
 8011b3c:	b002      	add	sp, #8
 8011b3e:	bd10      	pop	{r4, pc}

08011b40 <ucdr_init_buffer_origin>:
 8011b40:	b510      	push	{r4, lr}
 8011b42:	b082      	sub	sp, #8
 8011b44:	2400      	movs	r4, #0
 8011b46:	9400      	str	r4, [sp, #0]
 8011b48:	f7ff fff0 	bl	8011b2c <ucdr_init_buffer_origin_offset>
 8011b4c:	b002      	add	sp, #8
 8011b4e:	bd10      	pop	{r4, pc}

08011b50 <ucdr_init_buffer>:
 8011b50:	2300      	movs	r3, #0
 8011b52:	f7ff bff5 	b.w	8011b40 <ucdr_init_buffer_origin>
 8011b56:	bf00      	nop

08011b58 <ucdr_alignment>:
 8011b58:	fbb0 f3f1 	udiv	r3, r0, r1
 8011b5c:	fb03 0011 	mls	r0, r3, r1, r0
 8011b60:	1a08      	subs	r0, r1, r0
 8011b62:	3901      	subs	r1, #1
 8011b64:	4008      	ands	r0, r1
 8011b66:	4770      	bx	lr

08011b68 <ucdr_buffer_alignment>:
 8011b68:	7d43      	ldrb	r3, [r0, #21]
 8011b6a:	428b      	cmp	r3, r1
 8011b6c:	d208      	bcs.n	8011b80 <ucdr_buffer_alignment+0x18>
 8011b6e:	6900      	ldr	r0, [r0, #16]
 8011b70:	fbb0 f3f1 	udiv	r3, r0, r1
 8011b74:	fb01 0013 	mls	r0, r1, r3, r0
 8011b78:	1a08      	subs	r0, r1, r0
 8011b7a:	3901      	subs	r1, #1
 8011b7c:	4008      	ands	r0, r1
 8011b7e:	4770      	bx	lr
 8011b80:	2000      	movs	r0, #0
 8011b82:	4770      	bx	lr

08011b84 <ucdr_align_to>:
 8011b84:	b538      	push	{r3, r4, r5, lr}
 8011b86:	4604      	mov	r4, r0
 8011b88:	460d      	mov	r5, r1
 8011b8a:	f7ff ffed 	bl	8011b68 <ucdr_buffer_alignment>
 8011b8e:	68a3      	ldr	r3, [r4, #8]
 8011b90:	6921      	ldr	r1, [r4, #16]
 8011b92:	7565      	strb	r5, [r4, #21]
 8011b94:	181a      	adds	r2, r3, r0
 8011b96:	6863      	ldr	r3, [r4, #4]
 8011b98:	4293      	cmp	r3, r2
 8011b9a:	4408      	add	r0, r1
 8011b9c:	bf28      	it	cs
 8011b9e:	4613      	movcs	r3, r2
 8011ba0:	6120      	str	r0, [r4, #16]
 8011ba2:	60a3      	str	r3, [r4, #8]
 8011ba4:	bd38      	pop	{r3, r4, r5, pc}
 8011ba6:	bf00      	nop

08011ba8 <ucdr_buffer_length>:
 8011ba8:	6882      	ldr	r2, [r0, #8]
 8011baa:	6800      	ldr	r0, [r0, #0]
 8011bac:	1a10      	subs	r0, r2, r0
 8011bae:	4770      	bx	lr

08011bb0 <ucdr_buffer_remaining>:
 8011bb0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8011bb4:	1a10      	subs	r0, r2, r0
 8011bb6:	4770      	bx	lr

08011bb8 <ucdr_check_final_buffer_behavior_array>:
 8011bb8:	b538      	push	{r3, r4, r5, lr}
 8011bba:	7d83      	ldrb	r3, [r0, #22]
 8011bbc:	b963      	cbnz	r3, 8011bd8 <ucdr_check_final_buffer_behavior_array+0x20>
 8011bbe:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	4604      	mov	r4, r0
 8011bc6:	460d      	mov	r5, r1
 8011bc8:	d308      	bcc.n	8011bdc <ucdr_check_final_buffer_behavior_array+0x24>
 8011bca:	b139      	cbz	r1, 8011bdc <ucdr_check_final_buffer_behavior_array+0x24>
 8011bcc:	6983      	ldr	r3, [r0, #24]
 8011bce:	b163      	cbz	r3, 8011bea <ucdr_check_final_buffer_behavior_array+0x32>
 8011bd0:	69c1      	ldr	r1, [r0, #28]
 8011bd2:	4798      	blx	r3
 8011bd4:	75a0      	strb	r0, [r4, #22]
 8011bd6:	b108      	cbz	r0, 8011bdc <ucdr_check_final_buffer_behavior_array+0x24>
 8011bd8:	2000      	movs	r0, #0
 8011bda:	bd38      	pop	{r3, r4, r5, pc}
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f7ff ffe7 	bl	8011bb0 <ucdr_buffer_remaining>
 8011be2:	42a8      	cmp	r0, r5
 8011be4:	bf28      	it	cs
 8011be6:	4628      	movcs	r0, r5
 8011be8:	bd38      	pop	{r3, r4, r5, pc}
 8011bea:	2301      	movs	r3, #1
 8011bec:	7583      	strb	r3, [r0, #22]
 8011bee:	e7f3      	b.n	8011bd8 <ucdr_check_final_buffer_behavior_array+0x20>

08011bf0 <ucdr_advance_buffer>:
 8011bf0:	b538      	push	{r3, r4, r5, lr}
 8011bf2:	4604      	mov	r4, r0
 8011bf4:	460d      	mov	r5, r1
 8011bf6:	f7ff ff57 	bl	8011aa8 <ucdr_check_buffer_available_for>
 8011bfa:	b178      	cbz	r0, 8011c1c <ucdr_advance_buffer+0x2c>
 8011bfc:	6923      	ldr	r3, [r4, #16]
 8011bfe:	68a2      	ldr	r2, [r4, #8]
 8011c00:	442b      	add	r3, r5
 8011c02:	6123      	str	r3, [r4, #16]
 8011c04:	2301      	movs	r3, #1
 8011c06:	442a      	add	r2, r5
 8011c08:	7563      	strb	r3, [r4, #21]
 8011c0a:	60a2      	str	r2, [r4, #8]
 8011c0c:	bd38      	pop	{r3, r4, r5, pc}
 8011c0e:	68a2      	ldr	r2, [r4, #8]
 8011c10:	6923      	ldr	r3, [r4, #16]
 8011c12:	4402      	add	r2, r0
 8011c14:	4403      	add	r3, r0
 8011c16:	1a2d      	subs	r5, r5, r0
 8011c18:	60a2      	str	r2, [r4, #8]
 8011c1a:	6123      	str	r3, [r4, #16]
 8011c1c:	4629      	mov	r1, r5
 8011c1e:	2201      	movs	r2, #1
 8011c20:	4620      	mov	r0, r4
 8011c22:	f7ff ffc9 	bl	8011bb8 <ucdr_check_final_buffer_behavior_array>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	d1f1      	bne.n	8011c0e <ucdr_advance_buffer+0x1e>
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	7563      	strb	r3, [r4, #21]
 8011c2e:	bd38      	pop	{r3, r4, r5, pc}

08011c30 <uxr_buffer_delete_entity>:
 8011c30:	b510      	push	{r4, lr}
 8011c32:	2300      	movs	r3, #0
 8011c34:	b08e      	sub	sp, #56	@ 0x38
 8011c36:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011c3a:	2303      	movs	r3, #3
 8011c3c:	9300      	str	r3, [sp, #0]
 8011c3e:	2204      	movs	r2, #4
 8011c40:	ab06      	add	r3, sp, #24
 8011c42:	4604      	mov	r4, r0
 8011c44:	9103      	str	r1, [sp, #12]
 8011c46:	f001 f86f 	bl	8012d28 <uxr_prepare_stream_to_write_submessage>
 8011c4a:	b918      	cbnz	r0, 8011c54 <uxr_buffer_delete_entity+0x24>
 8011c4c:	4604      	mov	r4, r0
 8011c4e:	4620      	mov	r0, r4
 8011c50:	b00e      	add	sp, #56	@ 0x38
 8011c52:	bd10      	pop	{r4, pc}
 8011c54:	9902      	ldr	r1, [sp, #8]
 8011c56:	aa05      	add	r2, sp, #20
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f001 f99b 	bl	8012f94 <uxr_init_base_object_request>
 8011c5e:	a905      	add	r1, sp, #20
 8011c60:	4604      	mov	r4, r0
 8011c62:	a806      	add	r0, sp, #24
 8011c64:	f002 fb00 	bl	8014268 <uxr_serialize_DELETE_Payload>
 8011c68:	4620      	mov	r0, r4
 8011c6a:	b00e      	add	sp, #56	@ 0x38
 8011c6c:	bd10      	pop	{r4, pc}
 8011c6e:	bf00      	nop

08011c70 <uxr_common_create_entity>:
 8011c70:	b510      	push	{r4, lr}
 8011c72:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011c76:	b08c      	sub	sp, #48	@ 0x30
 8011c78:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011c7c:	f1bc 0f01 	cmp.w	ip, #1
 8011c80:	bf0c      	ite	eq
 8011c82:	f003 0201 	andeq.w	r2, r3, #1
 8011c86:	2200      	movne	r2, #0
 8011c88:	330e      	adds	r3, #14
 8011c8a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8011c8e:	9101      	str	r1, [sp, #4]
 8011c90:	441a      	add	r2, r3
 8011c92:	2301      	movs	r3, #1
 8011c94:	9300      	str	r3, [sp, #0]
 8011c96:	9903      	ldr	r1, [sp, #12]
 8011c98:	ab04      	add	r3, sp, #16
 8011c9a:	b292      	uxth	r2, r2
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	f001 f843 	bl	8012d28 <uxr_prepare_stream_to_write_submessage>
 8011ca2:	b918      	cbnz	r0, 8011cac <uxr_common_create_entity+0x3c>
 8011ca4:	4604      	mov	r4, r0
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	b00c      	add	sp, #48	@ 0x30
 8011caa:	bd10      	pop	{r4, pc}
 8011cac:	9902      	ldr	r1, [sp, #8]
 8011cae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	f001 f96f 	bl	8012f94 <uxr_init_base_object_request>
 8011cb6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011cb8:	4604      	mov	r4, r0
 8011cba:	a804      	add	r0, sp, #16
 8011cbc:	f002 fa30 	bl	8014120 <uxr_serialize_CREATE_Payload>
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	b00c      	add	sp, #48	@ 0x30
 8011cc4:	bd10      	pop	{r4, pc}
 8011cc6:	bf00      	nop

08011cc8 <uxr_buffer_create_participant_bin>:
 8011cc8:	b570      	push	{r4, r5, r6, lr}
 8011cca:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8011cce:	ac11      	add	r4, sp, #68	@ 0x44
 8011cd0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8011cd4:	2303      	movs	r3, #3
 8011cd6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011cda:	7223      	strb	r3, [r4, #8]
 8011cdc:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8011cde:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8011ce2:	2201      	movs	r2, #1
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	4605      	mov	r5, r0
 8011ce8:	7122      	strb	r2, [r4, #4]
 8011cea:	f88d 1014 	strb.w	r1, [sp, #20]
 8011cee:	b1cb      	cbz	r3, 8011d24 <uxr_buffer_create_participant_bin+0x5c>
 8011cf0:	f88d 201c 	strb.w	r2, [sp, #28]
 8011cf4:	9308      	str	r3, [sp, #32]
 8011cf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011cfa:	a915      	add	r1, sp, #84	@ 0x54
 8011cfc:	a809      	add	r0, sp, #36	@ 0x24
 8011cfe:	f7ff ff27 	bl	8011b50 <ucdr_init_buffer>
 8011d02:	a905      	add	r1, sp, #20
 8011d04:	a809      	add	r0, sp, #36	@ 0x24
 8011d06:	f001 fed9 	bl	8013abc <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011d0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011d0c:	9600      	str	r6, [sp, #0]
 8011d0e:	9401      	str	r4, [sp, #4]
 8011d10:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011d14:	60e3      	str	r3, [r4, #12]
 8011d16:	4628      	mov	r0, r5
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	f7ff ffa9 	bl	8011c70 <uxr_common_create_entity>
 8011d1e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8011d22:	bd70      	pop	{r4, r5, r6, pc}
 8011d24:	f88d 301c 	strb.w	r3, [sp, #28]
 8011d28:	e7e5      	b.n	8011cf6 <uxr_buffer_create_participant_bin+0x2e>
 8011d2a:	bf00      	nop

08011d2c <uxr_buffer_create_topic_bin>:
 8011d2c:	b570      	push	{r4, r5, r6, lr}
 8011d2e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8011d32:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011d36:	9105      	str	r1, [sp, #20]
 8011d38:	4605      	mov	r5, r0
 8011d3a:	a997      	add	r1, sp, #604	@ 0x25c
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	2302      	movs	r3, #2
 8011d40:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8011d44:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8011d48:	f000 f8ee 	bl	8011f28 <uxr_object_id_to_raw>
 8011d4c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8011d4e:	9306      	str	r3, [sp, #24]
 8011d50:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8011d52:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d54:	2303      	movs	r3, #3
 8011d56:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011d60:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8011d64:	a917      	add	r1, sp, #92	@ 0x5c
 8011d66:	2300      	movs	r3, #0
 8011d68:	a80b      	add	r0, sp, #44	@ 0x2c
 8011d6a:	f88d 301c 	strb.w	r3, [sp, #28]
 8011d6e:	f7ff feef 	bl	8011b50 <ucdr_init_buffer>
 8011d72:	a906      	add	r1, sp, #24
 8011d74:	a80b      	add	r0, sp, #44	@ 0x2c
 8011d76:	f001 fec3 	bl	8013b00 <uxr_serialize_OBJK_Topic_Binary>
 8011d7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d7c:	9316      	str	r3, [sp, #88]	@ 0x58
 8011d7e:	ac13      	add	r4, sp, #76	@ 0x4c
 8011d80:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011d84:	9600      	str	r6, [sp, #0]
 8011d86:	9401      	str	r4, [sp, #4]
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	4628      	mov	r0, r5
 8011d8c:	f7ff ff70 	bl	8011c70 <uxr_common_create_entity>
 8011d90:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8011d94:	bd70      	pop	{r4, r5, r6, pc}
 8011d96:	bf00      	nop

08011d98 <uxr_buffer_create_publisher_bin>:
 8011d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d9a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8011d9e:	4605      	mov	r5, r0
 8011da0:	9105      	str	r1, [sp, #20]
 8011da2:	4618      	mov	r0, r3
 8011da4:	2603      	movs	r6, #3
 8011da6:	a992      	add	r1, sp, #584	@ 0x248
 8011da8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011dac:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8011db0:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8011db4:	f000 f8b8 	bl	8011f28 <uxr_object_id_to_raw>
 8011db8:	2300      	movs	r3, #0
 8011dba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011dbe:	a912      	add	r1, sp, #72	@ 0x48
 8011dc0:	a806      	add	r0, sp, #24
 8011dc2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8011dc6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8011dca:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8011dce:	f7ff febf 	bl	8011b50 <ucdr_init_buffer>
 8011dd2:	a993      	add	r1, sp, #588	@ 0x24c
 8011dd4:	a806      	add	r0, sp, #24
 8011dd6:	f001 ff47 	bl	8013c68 <uxr_serialize_OBJK_Publisher_Binary>
 8011dda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ddc:	9311      	str	r3, [sp, #68]	@ 0x44
 8011dde:	ac0e      	add	r4, sp, #56	@ 0x38
 8011de0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011de4:	9700      	str	r7, [sp, #0]
 8011de6:	9401      	str	r4, [sp, #4]
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	4628      	mov	r0, r5
 8011dec:	f7ff ff40 	bl	8011c70 <uxr_common_create_entity>
 8011df0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8011df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011df6:	bf00      	nop

08011df8 <uxr_buffer_create_datawriter_bin>:
 8011df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dfc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8011e00:	ac1d      	add	r4, sp, #116	@ 0x74
 8011e02:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011e06:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8011e0a:	9105      	str	r1, [sp, #20]
 8011e0c:	4606      	mov	r6, r0
 8011e0e:	a9a1      	add	r1, sp, #644	@ 0x284
 8011e10:	4618      	mov	r0, r3
 8011e12:	2305      	movs	r3, #5
 8011e14:	7123      	strb	r3, [r4, #4]
 8011e16:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8011e1a:	2703      	movs	r7, #3
 8011e1c:	f000 f884 	bl	8011f28 <uxr_object_id_to_raw>
 8011e20:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8011e22:	7227      	strb	r7, [r4, #8]
 8011e24:	a90e      	add	r1, sp, #56	@ 0x38
 8011e26:	f000 f87f 	bl	8011f28 <uxr_object_id_to_raw>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8011e30:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8011e34:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8011e38:	3d00      	subs	r5, #0
 8011e3a:	bf18      	it	ne
 8011e3c:	2501      	movne	r5, #1
 8011e3e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8011e42:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8011e46:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8011e4a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011e4e:	2301      	movs	r3, #1
 8011e50:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8011e54:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8011e58:	bb8a      	cbnz	r2, 8011ebe <uxr_buffer_create_datawriter_bin+0xc6>
 8011e5a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011e5e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8011e62:	f04f 0c13 	mov.w	ip, #19
 8011e66:	250b      	movs	r5, #11
 8011e68:	2221      	movs	r2, #33	@ 0x21
 8011e6a:	2111      	movs	r1, #17
 8011e6c:	2009      	movs	r0, #9
 8011e6e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8011e72:	b923      	cbnz	r3, 8011e7e <uxr_buffer_create_datawriter_bin+0x86>
 8011e74:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8011e78:	4672      	mov	r2, lr
 8011e7a:	4661      	mov	r1, ip
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8011e82:	2b01      	cmp	r3, #1
 8011e84:	d025      	beq.n	8011ed2 <uxr_buffer_create_datawriter_bin+0xda>
 8011e86:	2b03      	cmp	r3, #3
 8011e88:	d029      	beq.n	8011ede <uxr_buffer_create_datawriter_bin+0xe6>
 8011e8a:	b32b      	cbz	r3, 8011ed8 <uxr_buffer_create_datawriter_bin+0xe0>
 8011e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011e90:	a921      	add	r1, sp, #132	@ 0x84
 8011e92:	a806      	add	r0, sp, #24
 8011e94:	f7ff fe5c 	bl	8011b50 <ucdr_init_buffer>
 8011e98:	a90e      	add	r1, sp, #56	@ 0x38
 8011e9a:	a806      	add	r0, sp, #24
 8011e9c:	f001 ff5a 	bl	8013d54 <uxr_serialize_OBJK_DataWriter_Binary>
 8011ea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ea2:	f8cd 8000 	str.w	r8, [sp]
 8011ea6:	9401      	str	r4, [sp, #4]
 8011ea8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011eac:	60e3      	str	r3, [r4, #12]
 8011eae:	4630      	mov	r0, r6
 8011eb0:	b29b      	uxth	r3, r3
 8011eb2:	f7ff fedd 	bl	8011c70 <uxr_common_create_entity>
 8011eb6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ebe:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8011ec2:	f04f 0c12 	mov.w	ip, #18
 8011ec6:	250a      	movs	r5, #10
 8011ec8:	2220      	movs	r2, #32
 8011eca:	2110      	movs	r1, #16
 8011ecc:	2008      	movs	r0, #8
 8011ece:	2702      	movs	r7, #2
 8011ed0:	e7cd      	b.n	8011e6e <uxr_buffer_create_datawriter_bin+0x76>
 8011ed2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8011ed6:	e7d9      	b.n	8011e8c <uxr_buffer_create_datawriter_bin+0x94>
 8011ed8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8011edc:	e7d6      	b.n	8011e8c <uxr_buffer_create_datawriter_bin+0x94>
 8011ede:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8011ee2:	e7d3      	b.n	8011e8c <uxr_buffer_create_datawriter_bin+0x94>

08011ee4 <uxr_object_id>:
 8011ee4:	b082      	sub	sp, #8
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	f88d 1006 	strb.w	r1, [sp, #6]
 8011eec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011ef0:	f360 030f 	bfi	r3, r0, #0, #16
 8011ef4:	f362 431f 	bfi	r3, r2, #16, #16
 8011ef8:	4618      	mov	r0, r3
 8011efa:	b002      	add	sp, #8
 8011efc:	4770      	bx	lr
 8011efe:	bf00      	nop

08011f00 <uxr_object_id_from_raw>:
 8011f00:	7843      	ldrb	r3, [r0, #1]
 8011f02:	7801      	ldrb	r1, [r0, #0]
 8011f04:	b082      	sub	sp, #8
 8011f06:	f003 020f 	and.w	r2, r3, #15
 8011f0a:	f88d 2006 	strb.w	r2, [sp, #6]
 8011f0e:	091b      	lsrs	r3, r3, #4
 8011f10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011f14:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011f18:	2000      	movs	r0, #0
 8011f1a:	f363 000f 	bfi	r0, r3, #0, #16
 8011f1e:	f362 401f 	bfi	r0, r2, #16, #16
 8011f22:	b002      	add	sp, #8
 8011f24:	4770      	bx	lr
 8011f26:	bf00      	nop

08011f28 <uxr_object_id_to_raw>:
 8011f28:	4602      	mov	r2, r0
 8011f2a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8011f2e:	b082      	sub	sp, #8
 8011f30:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8011f34:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8011f38:	f881 c000 	strb.w	ip, [r1]
 8011f3c:	7048      	strb	r0, [r1, #1]
 8011f3e:	b002      	add	sp, #8
 8011f40:	4770      	bx	lr
 8011f42:	bf00      	nop

08011f44 <on_get_fragmentation_info>:
 8011f44:	b500      	push	{lr}
 8011f46:	b08b      	sub	sp, #44	@ 0x2c
 8011f48:	4601      	mov	r1, r0
 8011f4a:	2204      	movs	r2, #4
 8011f4c:	a802      	add	r0, sp, #8
 8011f4e:	f7ff fdff 	bl	8011b50 <ucdr_init_buffer>
 8011f52:	f10d 0305 	add.w	r3, sp, #5
 8011f56:	f10d 0206 	add.w	r2, sp, #6
 8011f5a:	a901      	add	r1, sp, #4
 8011f5c:	a802      	add	r0, sp, #8
 8011f5e:	f001 f99b 	bl	8013298 <uxr_read_submessage_header>
 8011f62:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011f66:	2b0d      	cmp	r3, #13
 8011f68:	d003      	beq.n	8011f72 <on_get_fragmentation_info+0x2e>
 8011f6a:	2000      	movs	r0, #0
 8011f6c:	b00b      	add	sp, #44	@ 0x2c
 8011f6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011f76:	f013 0f02 	tst.w	r3, #2
 8011f7a:	bf14      	ite	ne
 8011f7c:	2002      	movne	r0, #2
 8011f7e:	2001      	moveq	r0, #1
 8011f80:	b00b      	add	sp, #44	@ 0x2c
 8011f82:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f86:	bf00      	nop

08011f88 <read_submessage_get_info>:
 8011f88:	b570      	push	{r4, r5, r6, lr}
 8011f8a:	2500      	movs	r5, #0
 8011f8c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8011f90:	4604      	mov	r4, r0
 8011f92:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8011f96:	460e      	mov	r6, r1
 8011f98:	a810      	add	r0, sp, #64	@ 0x40
 8011f9a:	4629      	mov	r1, r5
 8011f9c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8011fa0:	f007 f88c 	bl	80190bc <memset>
 8011fa4:	a903      	add	r1, sp, #12
 8011fa6:	4630      	mov	r0, r6
 8011fa8:	f002 f94a 	bl	8014240 <uxr_deserialize_GET_INFO_Payload>
 8011fac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011fb0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f000 ffe5 	bl	8012f84 <uxr_session_header_offset>
 8011fba:	462b      	mov	r3, r5
 8011fbc:	9000      	str	r0, [sp, #0]
 8011fbe:	220c      	movs	r2, #12
 8011fc0:	a905      	add	r1, sp, #20
 8011fc2:	a808      	add	r0, sp, #32
 8011fc4:	f7ff fdb2 	bl	8011b2c <ucdr_init_buffer_origin_offset>
 8011fc8:	a910      	add	r1, sp, #64	@ 0x40
 8011fca:	a808      	add	r0, sp, #32
 8011fcc:	f002 f9aa 	bl	8014324 <uxr_serialize_INFO_Payload>
 8011fd0:	9b08      	ldr	r3, [sp, #32]
 8011fd2:	462a      	mov	r2, r5
 8011fd4:	4629      	mov	r1, r5
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	f000 ff7e 	bl	8012ed8 <uxr_stamp_session_header>
 8011fdc:	a808      	add	r0, sp, #32
 8011fde:	f7ff fde3 	bl	8011ba8 <ucdr_buffer_length>
 8011fe2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011fe4:	4602      	mov	r2, r0
 8011fe6:	a905      	add	r1, sp, #20
 8011fe8:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011fec:	47a0      	blx	r4
 8011fee:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8011ff2:	bd70      	pop	{r4, r5, r6, pc}

08011ff4 <write_submessage_acknack.isra.0>:
 8011ff4:	b570      	push	{r4, r5, r6, lr}
 8011ff6:	b092      	sub	sp, #72	@ 0x48
 8011ff8:	4605      	mov	r5, r0
 8011ffa:	460e      	mov	r6, r1
 8011ffc:	4614      	mov	r4, r2
 8011ffe:	f000 ffc1 	bl	8012f84 <uxr_session_header_offset>
 8012002:	a905      	add	r1, sp, #20
 8012004:	9000      	str	r0, [sp, #0]
 8012006:	2300      	movs	r3, #0
 8012008:	a80a      	add	r0, sp, #40	@ 0x28
 801200a:	2211      	movs	r2, #17
 801200c:	f7ff fd8e 	bl	8011b2c <ucdr_init_buffer_origin_offset>
 8012010:	2218      	movs	r2, #24
 8012012:	fb02 5404 	mla	r4, r2, r4, r5
 8012016:	2300      	movs	r3, #0
 8012018:	2205      	movs	r2, #5
 801201a:	3450      	adds	r4, #80	@ 0x50
 801201c:	210a      	movs	r1, #10
 801201e:	a80a      	add	r0, sp, #40	@ 0x28
 8012020:	f001 f920 	bl	8013264 <uxr_buffer_submessage_header>
 8012024:	a903      	add	r1, sp, #12
 8012026:	4620      	mov	r0, r4
 8012028:	f004 fdbe 	bl	8016ba8 <uxr_compute_acknack>
 801202c:	ba40      	rev16	r0, r0
 801202e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012032:	a903      	add	r1, sp, #12
 8012034:	a80a      	add	r0, sp, #40	@ 0x28
 8012036:	f88d 6010 	strb.w	r6, [sp, #16]
 801203a:	f002 f9e3 	bl	8014404 <uxr_serialize_ACKNACK_Payload>
 801203e:	2200      	movs	r2, #0
 8012040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012042:	4611      	mov	r1, r2
 8012044:	4628      	mov	r0, r5
 8012046:	f000 ff47 	bl	8012ed8 <uxr_stamp_session_header>
 801204a:	a80a      	add	r0, sp, #40	@ 0x28
 801204c:	f7ff fdac 	bl	8011ba8 <ucdr_buffer_length>
 8012050:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8012052:	4602      	mov	r2, r0
 8012054:	a905      	add	r1, sp, #20
 8012056:	e9d3 0400 	ldrd	r0, r4, [r3]
 801205a:	47a0      	blx	r4
 801205c:	b012      	add	sp, #72	@ 0x48
 801205e:	bd70      	pop	{r4, r5, r6, pc}

08012060 <uxr_init_session>:
 8012060:	b510      	push	{r4, lr}
 8012062:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012098 <uxr_init_session+0x38>
 8012066:	2300      	movs	r3, #0
 8012068:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801206c:	4604      	mov	r4, r0
 801206e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8012072:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8012076:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801207a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801207e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8012082:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8012086:	2181      	movs	r1, #129	@ 0x81
 8012088:	f000 fe92 	bl	8012db0 <uxr_init_session_info>
 801208c:	f104 0008 	add.w	r0, r4, #8
 8012090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012094:	f001 b802 	b.w	801309c <uxr_init_stream_storage>
	...

080120a0 <uxr_set_status_callback>:
 80120a0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80120a4:	4770      	bx	lr
 80120a6:	bf00      	nop

080120a8 <uxr_set_topic_callback>:
 80120a8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80120ac:	4770      	bx	lr
 80120ae:	bf00      	nop

080120b0 <uxr_set_request_callback>:
 80120b0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80120b4:	4770      	bx	lr
 80120b6:	bf00      	nop

080120b8 <uxr_set_reply_callback>:
 80120b8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80120bc:	4770      	bx	lr
 80120be:	bf00      	nop

080120c0 <uxr_create_output_best_effort_stream>:
 80120c0:	b510      	push	{r4, lr}
 80120c2:	b084      	sub	sp, #16
 80120c4:	e9cd 2100 	strd	r2, r1, [sp]
 80120c8:	4604      	mov	r4, r0
 80120ca:	f000 ff5b 	bl	8012f84 <uxr_session_header_offset>
 80120ce:	e9dd 2100 	ldrd	r2, r1, [sp]
 80120d2:	4603      	mov	r3, r0
 80120d4:	f104 0008 	add.w	r0, r4, #8
 80120d8:	b004      	add	sp, #16
 80120da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120de:	f001 b827 	b.w	8013130 <uxr_add_output_best_effort_buffer>
 80120e2:	bf00      	nop

080120e4 <uxr_create_output_reliable_stream>:
 80120e4:	b510      	push	{r4, lr}
 80120e6:	b088      	sub	sp, #32
 80120e8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80120ec:	4604      	mov	r4, r0
 80120ee:	9303      	str	r3, [sp, #12]
 80120f0:	f000 ff48 	bl	8012f84 <uxr_session_header_offset>
 80120f4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80120f8:	9000      	str	r0, [sp, #0]
 80120fa:	9905      	ldr	r1, [sp, #20]
 80120fc:	f104 0008 	add.w	r0, r4, #8
 8012100:	f001 f82a 	bl	8013158 <uxr_add_output_reliable_buffer>
 8012104:	2200      	movs	r2, #0
 8012106:	b2c3      	uxtb	r3, r0
 8012108:	f363 0207 	bfi	r2, r3, #0, #8
 801210c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012110:	f363 220f 	bfi	r2, r3, #8, #8
 8012114:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012118:	f363 4217 	bfi	r2, r3, #16, #8
 801211c:	0e03      	lsrs	r3, r0, #24
 801211e:	f363 621f 	bfi	r2, r3, #24, #8
 8012122:	4610      	mov	r0, r2
 8012124:	b008      	add	sp, #32
 8012126:	bd10      	pop	{r4, pc}

08012128 <uxr_create_input_best_effort_stream>:
 8012128:	b082      	sub	sp, #8
 801212a:	3008      	adds	r0, #8
 801212c:	b002      	add	sp, #8
 801212e:	f001 b82d 	b.w	801318c <uxr_add_input_best_effort_buffer>
 8012132:	bf00      	nop

08012134 <uxr_create_input_reliable_stream>:
 8012134:	b510      	push	{r4, lr}
 8012136:	b084      	sub	sp, #16
 8012138:	4c0b      	ldr	r4, [pc, #44]	@ (8012168 <uxr_create_input_reliable_stream+0x34>)
 801213a:	9400      	str	r4, [sp, #0]
 801213c:	3008      	adds	r0, #8
 801213e:	f001 f83b 	bl	80131b8 <uxr_add_input_reliable_buffer>
 8012142:	2200      	movs	r2, #0
 8012144:	b2c3      	uxtb	r3, r0
 8012146:	f363 0207 	bfi	r2, r3, #0, #8
 801214a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801214e:	f363 220f 	bfi	r2, r3, #8, #8
 8012152:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012156:	f363 4217 	bfi	r2, r3, #16, #8
 801215a:	0e03      	lsrs	r3, r0, #24
 801215c:	f363 621f 	bfi	r2, r3, #24, #8
 8012160:	4610      	mov	r0, r2
 8012162:	b004      	add	sp, #16
 8012164:	bd10      	pop	{r4, pc}
 8012166:	bf00      	nop
 8012168:	08011f45 	.word	0x08011f45

0801216c <uxr_epoch_nanos>:
 801216c:	b510      	push	{r4, lr}
 801216e:	4604      	mov	r4, r0
 8012170:	f001 f8d8 	bl	8013324 <uxr_nanos>
 8012174:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8012178:	1ac0      	subs	r0, r0, r3
 801217a:	eb61 0102 	sbc.w	r1, r1, r2
 801217e:	bd10      	pop	{r4, pc}

08012180 <uxr_flash_output_streams>:
 8012180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012184:	7e03      	ldrb	r3, [r0, #24]
 8012186:	b084      	sub	sp, #16
 8012188:	4604      	mov	r4, r0
 801218a:	2b00      	cmp	r3, #0
 801218c:	d035      	beq.n	80121fa <uxr_flash_output_streams+0x7a>
 801218e:	f04f 0900 	mov.w	r9, #0
 8012192:	4648      	mov	r0, r9
 8012194:	f10d 0802 	add.w	r8, sp, #2
 8012198:	af03      	add	r7, sp, #12
 801219a:	ae02      	add	r6, sp, #8
 801219c:	e006      	b.n	80121ac <uxr_flash_output_streams+0x2c>
 801219e:	7e23      	ldrb	r3, [r4, #24]
 80121a0:	f109 0901 	add.w	r9, r9, #1
 80121a4:	fa5f f089 	uxtb.w	r0, r9
 80121a8:	4283      	cmp	r3, r0
 80121aa:	d926      	bls.n	80121fa <uxr_flash_output_streams+0x7a>
 80121ac:	2201      	movs	r2, #1
 80121ae:	4611      	mov	r1, r2
 80121b0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80121b4:	f000 ff1e 	bl	8012ff4 <uxr_stream_id>
 80121b8:	3508      	adds	r5, #8
 80121ba:	4684      	mov	ip, r0
 80121bc:	4643      	mov	r3, r8
 80121be:	463a      	mov	r2, r7
 80121c0:	4631      	mov	r1, r6
 80121c2:	4628      	mov	r0, r5
 80121c4:	f8cd c004 	str.w	ip, [sp, #4]
 80121c8:	f004 fd74 	bl	8016cb4 <uxr_prepare_best_effort_buffer_to_send>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	d0e6      	beq.n	801219e <uxr_flash_output_streams+0x1e>
 80121d0:	9b02      	ldr	r3, [sp, #8]
 80121d2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80121d6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80121da:	4620      	mov	r0, r4
 80121dc:	f000 fe7c 	bl	8012ed8 <uxr_stamp_session_header>
 80121e0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80121e2:	9a03      	ldr	r2, [sp, #12]
 80121e4:	685d      	ldr	r5, [r3, #4]
 80121e6:	6818      	ldr	r0, [r3, #0]
 80121e8:	9902      	ldr	r1, [sp, #8]
 80121ea:	47a8      	blx	r5
 80121ec:	f109 0901 	add.w	r9, r9, #1
 80121f0:	7e23      	ldrb	r3, [r4, #24]
 80121f2:	fa5f f089 	uxtb.w	r0, r9
 80121f6:	4283      	cmp	r3, r0
 80121f8:	d8d8      	bhi.n	80121ac <uxr_flash_output_streams+0x2c>
 80121fa:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80121fe:	b38b      	cbz	r3, 8012264 <uxr_flash_output_streams+0xe4>
 8012200:	f04f 0900 	mov.w	r9, #0
 8012204:	f10d 0802 	add.w	r8, sp, #2
 8012208:	af03      	add	r7, sp, #12
 801220a:	ae02      	add	r6, sp, #8
 801220c:	4648      	mov	r0, r9
 801220e:	2201      	movs	r2, #1
 8012210:	2102      	movs	r1, #2
 8012212:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012216:	f000 feed 	bl	8012ff4 <uxr_stream_id>
 801221a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801221e:	3520      	adds	r5, #32
 8012220:	9001      	str	r0, [sp, #4]
 8012222:	e00d      	b.n	8012240 <uxr_flash_output_streams+0xc0>
 8012224:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012228:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801222c:	9b02      	ldr	r3, [sp, #8]
 801222e:	f000 fe53 	bl	8012ed8 <uxr_stamp_session_header>
 8012232:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012234:	9a03      	ldr	r2, [sp, #12]
 8012236:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801223a:	9902      	ldr	r1, [sp, #8]
 801223c:	6818      	ldr	r0, [r3, #0]
 801223e:	47d0      	blx	sl
 8012240:	4643      	mov	r3, r8
 8012242:	463a      	mov	r2, r7
 8012244:	4631      	mov	r1, r6
 8012246:	4628      	mov	r0, r5
 8012248:	f004 ff52 	bl	80170f0 <uxr_prepare_next_reliable_buffer_to_send>
 801224c:	4603      	mov	r3, r0
 801224e:	4620      	mov	r0, r4
 8012250:	2b00      	cmp	r3, #0
 8012252:	d1e7      	bne.n	8012224 <uxr_flash_output_streams+0xa4>
 8012254:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012258:	f109 0901 	add.w	r9, r9, #1
 801225c:	fa5f f089 	uxtb.w	r0, r9
 8012260:	4283      	cmp	r3, r0
 8012262:	d8d4      	bhi.n	801220e <uxr_flash_output_streams+0x8e>
 8012264:	b004      	add	sp, #16
 8012266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801226a:	bf00      	nop

0801226c <read_submessage_info>:
 801226c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012270:	460d      	mov	r5, r1
 8012272:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8012276:	4669      	mov	r1, sp
 8012278:	4607      	mov	r7, r0
 801227a:	4628      	mov	r0, r5
 801227c:	f001 feee 	bl	801405c <uxr_deserialize_BaseObjectReply>
 8012280:	a902      	add	r1, sp, #8
 8012282:	4604      	mov	r4, r0
 8012284:	4628      	mov	r0, r5
 8012286:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801228a:	f7fe fc9d 	bl	8010bc8 <ucdr_deserialize_bool>
 801228e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012292:	4004      	ands	r4, r0
 8012294:	b2e4      	uxtb	r4, r4
 8012296:	b95b      	cbnz	r3, 80122b0 <read_submessage_info+0x44>
 8012298:	a987      	add	r1, sp, #540	@ 0x21c
 801229a:	4628      	mov	r0, r5
 801229c:	f7fe fc94 	bl	8010bc8 <ucdr_deserialize_bool>
 80122a0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80122a4:	4606      	mov	r6, r0
 80122a6:	b94b      	cbnz	r3, 80122bc <read_submessage_info+0x50>
 80122a8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80122ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122b0:	a903      	add	r1, sp, #12
 80122b2:	4628      	mov	r0, r5
 80122b4:	f001 fd7a 	bl	8013dac <uxr_deserialize_ObjectVariant>
 80122b8:	4004      	ands	r4, r0
 80122ba:	e7ed      	b.n	8012298 <read_submessage_info+0x2c>
 80122bc:	a988      	add	r1, sp, #544	@ 0x220
 80122be:	4628      	mov	r0, r5
 80122c0:	f7fe fcb0 	bl	8010c24 <ucdr_deserialize_uint8_t>
 80122c4:	4234      	tst	r4, r6
 80122c6:	d0ef      	beq.n	80122a8 <read_submessage_info+0x3c>
 80122c8:	2800      	cmp	r0, #0
 80122ca:	d0ed      	beq.n	80122a8 <read_submessage_info+0x3c>
 80122cc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80122d0:	2b0d      	cmp	r3, #13
 80122d2:	d1e9      	bne.n	80122a8 <read_submessage_info+0x3c>
 80122d4:	a98a      	add	r1, sp, #552	@ 0x228
 80122d6:	4628      	mov	r0, r5
 80122d8:	f7ff fa4a 	bl	8011770 <ucdr_deserialize_int16_t>
 80122dc:	b140      	cbz	r0, 80122f0 <read_submessage_info+0x84>
 80122de:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	dd07      	ble.n	80122f6 <read_submessage_info+0x8a>
 80122e6:	f1b8 0f00 	cmp.w	r8, #0
 80122ea:	bf14      	ite	ne
 80122ec:	2001      	movne	r0, #1
 80122ee:	2002      	moveq	r0, #2
 80122f0:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80122f4:	e7d8      	b.n	80122a8 <read_submessage_info+0x3c>
 80122f6:	2000      	movs	r0, #0
 80122f8:	e7fa      	b.n	80122f0 <read_submessage_info+0x84>
 80122fa:	bf00      	nop

080122fc <read_submessage_list>:
 80122fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012300:	b097      	sub	sp, #92	@ 0x5c
 8012302:	4ec1      	ldr	r6, [pc, #772]	@ (8012608 <read_submessage_list+0x30c>)
 8012304:	9209      	str	r2, [sp, #36]	@ 0x24
 8012306:	4604      	mov	r4, r0
 8012308:	460d      	mov	r5, r1
 801230a:	f04f 0801 	mov.w	r8, #1
 801230e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8012312:	aa0c      	add	r2, sp, #48	@ 0x30
 8012314:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8012318:	4628      	mov	r0, r5
 801231a:	f000 ffbd 	bl	8013298 <uxr_read_submessage_header>
 801231e:	2800      	cmp	r0, #0
 8012320:	f000 813e 	beq.w	80125a0 <read_submessage_list+0x2a4>
 8012324:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8012328:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 801232c:	3b02      	subs	r3, #2
 801232e:	2b0d      	cmp	r3, #13
 8012330:	d8ed      	bhi.n	801230e <read_submessage_list+0x12>
 8012332:	a101      	add	r1, pc, #4	@ (adr r1, 8012338 <read_submessage_list+0x3c>)
 8012334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012338:	08012597 	.word	0x08012597
 801233c:	0801230f 	.word	0x0801230f
 8012340:	08012587 	.word	0x08012587
 8012344:	08012525 	.word	0x08012525
 8012348:	0801251b 	.word	0x0801251b
 801234c:	0801230f 	.word	0x0801230f
 8012350:	0801230f 	.word	0x0801230f
 8012354:	0801247b 	.word	0x0801247b
 8012358:	0801240b 	.word	0x0801240b
 801235c:	080123cb 	.word	0x080123cb
 8012360:	0801230f 	.word	0x0801230f
 8012364:	0801230f 	.word	0x0801230f
 8012368:	0801230f 	.word	0x0801230f
 801236c:	08012371 	.word	0x08012371
 8012370:	a910      	add	r1, sp, #64	@ 0x40
 8012372:	4628      	mov	r0, r5
 8012374:	f002 f896 	bl	80144a4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012378:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 801237c:	f1b9 0f00 	cmp.w	r9, #0
 8012380:	f000 8116 	beq.w	80125b0 <read_submessage_list+0x2b4>
 8012384:	f000 ffce 	bl	8013324 <uxr_nanos>
 8012388:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801238a:	4602      	mov	r2, r0
 801238c:	460b      	mov	r3, r1
 801238e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8012390:	2100      	movs	r1, #0
 8012392:	468c      	mov	ip, r1
 8012394:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8012398:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 801239c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801239e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80123a0:	468c      	mov	ip, r1
 80123a2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80123a6:	46e2      	mov	sl, ip
 80123a8:	46bc      	mov	ip, r7
 80123aa:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80123ae:	fbc0 7106 	smlal	r7, r1, r0, r6
 80123b2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80123b6:	e9cd 7100 	strd	r7, r1, [sp]
 80123ba:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80123be:	9106      	str	r1, [sp, #24]
 80123c0:	4620      	mov	r0, r4
 80123c2:	47c8      	blx	r9
 80123c4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 80123c8:	e7a1      	b.n	801230e <read_submessage_list+0x12>
 80123ca:	a910      	add	r1, sp, #64	@ 0x40
 80123cc:	4628      	mov	r0, r5
 80123ce:	f002 f857 	bl	8014480 <uxr_deserialize_HEARTBEAT_Payload>
 80123d2:	2100      	movs	r1, #0
 80123d4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80123d8:	f000 fe36 	bl	8013048 <uxr_stream_id_from_raw>
 80123dc:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80123e0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80123e2:	4639      	mov	r1, r7
 80123e4:	f104 0008 	add.w	r0, r4, #8
 80123e8:	f000 ff1c 	bl	8013224 <uxr_get_input_reliable_stream>
 80123ec:	2800      	cmp	r0, #0
 80123ee:	d08e      	beq.n	801230e <read_submessage_list+0x12>
 80123f0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80123f4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80123f8:	f004 fbca 	bl	8016b90 <uxr_process_heartbeat>
 80123fc:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8012400:	463a      	mov	r2, r7
 8012402:	4620      	mov	r0, r4
 8012404:	f7ff fdf6 	bl	8011ff4 <write_submessage_acknack.isra.0>
 8012408:	e781      	b.n	801230e <read_submessage_list+0x12>
 801240a:	a910      	add	r1, sp, #64	@ 0x40
 801240c:	4628      	mov	r0, r5
 801240e:	f002 f80f 	bl	8014430 <uxr_deserialize_ACKNACK_Payload>
 8012412:	2100      	movs	r1, #0
 8012414:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012418:	f000 fe16 	bl	8013048 <uxr_stream_id_from_raw>
 801241c:	900d      	str	r0, [sp, #52]	@ 0x34
 801241e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8012422:	f104 0008 	add.w	r0, r4, #8
 8012426:	f000 fee9 	bl	80131fc <uxr_get_output_reliable_stream>
 801242a:	4607      	mov	r7, r0
 801242c:	2800      	cmp	r0, #0
 801242e:	f43f af6e 	beq.w	801230e <read_submessage_list+0x12>
 8012432:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8012436:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801243a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801243e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012442:	b289      	uxth	r1, r1
 8012444:	f004 fefe 	bl	8017244 <uxr_process_acknack>
 8012448:	4638      	mov	r0, r7
 801244a:	f004 febb 	bl	80171c4 <uxr_begin_output_nack_buffer_it>
 801244e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012452:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8012456:	e006      	b.n	8012466 <read_submessage_list+0x16a>
 8012458:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801245a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801245c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8012460:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012462:	6818      	ldr	r0, [r3, #0]
 8012464:	47c8      	blx	r9
 8012466:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801246a:	aa0f      	add	r2, sp, #60	@ 0x3c
 801246c:	4651      	mov	r1, sl
 801246e:	4638      	mov	r0, r7
 8012470:	f004 feaa 	bl	80171c8 <uxr_next_reliable_nack_buffer_to_send>
 8012474:	2800      	cmp	r0, #0
 8012476:	d1ef      	bne.n	8012458 <read_submessage_list+0x15c>
 8012478:	e749      	b.n	801230e <read_submessage_list+0x12>
 801247a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 801247e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8012482:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012486:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801248a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 801248e:	4651      	mov	r1, sl
 8012490:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012494:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8012498:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801249c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80124a0:	4628      	mov	r0, r5
 80124a2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80124a6:	f001 fd23 	bl	8013ef0 <uxr_deserialize_BaseObjectRequest>
 80124aa:	4650      	mov	r0, sl
 80124ac:	a90f      	add	r1, sp, #60	@ 0x3c
 80124ae:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80124b2:	f000 fd8d 	bl	8012fd0 <uxr_parse_base_object_request>
 80124b6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80124ba:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80124bc:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80124c0:	9110      	str	r1, [sp, #64]	@ 0x40
 80124c2:	3f04      	subs	r7, #4
 80124c4:	f009 090e 	and.w	r9, r9, #14
 80124c8:	b2bf      	uxth	r7, r7
 80124ca:	f1bb 0f00 	cmp.w	fp, #0
 80124ce:	d006      	beq.n	80124de <read_submessage_list+0x1e2>
 80124d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80124d4:	9300      	str	r3, [sp, #0]
 80124d6:	4652      	mov	r2, sl
 80124d8:	2300      	movs	r3, #0
 80124da:	4620      	mov	r0, r4
 80124dc:	47d8      	blx	fp
 80124de:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80124e0:	b16a      	cbz	r2, 80124fe <read_submessage_list+0x202>
 80124e2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80124e4:	2100      	movs	r1, #0
 80124e6:	3802      	subs	r0, #2
 80124e8:	e002      	b.n	80124f0 <read_submessage_list+0x1f4>
 80124ea:	3101      	adds	r1, #1
 80124ec:	4291      	cmp	r1, r2
 80124ee:	d006      	beq.n	80124fe <read_submessage_list+0x202>
 80124f0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80124f4:	4553      	cmp	r3, sl
 80124f6:	d1f8      	bne.n	80124ea <read_submessage_list+0x1ee>
 80124f8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80124fa:	2200      	movs	r2, #0
 80124fc:	545a      	strb	r2, [r3, r1]
 80124fe:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8012502:	9102      	str	r1, [sp, #8]
 8012504:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012506:	9101      	str	r1, [sp, #4]
 8012508:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801250a:	9100      	str	r1, [sp, #0]
 801250c:	464b      	mov	r3, r9
 801250e:	463a      	mov	r2, r7
 8012510:	4629      	mov	r1, r5
 8012512:	4620      	mov	r0, r4
 8012514:	f004 ff1a 	bl	801734c <read_submessage_format>
 8012518:	e6f9      	b.n	801230e <read_submessage_list+0x12>
 801251a:	4629      	mov	r1, r5
 801251c:	4620      	mov	r0, r4
 801251e:	f7ff fea5 	bl	801226c <read_submessage_info>
 8012522:	e6f4      	b.n	801230e <read_submessage_list+0x12>
 8012524:	2a00      	cmp	r2, #0
 8012526:	d03e      	beq.n	80125a6 <read_submessage_list+0x2aa>
 8012528:	a910      	add	r1, sp, #64	@ 0x40
 801252a:	4628      	mov	r0, r5
 801252c:	f001 fedc 	bl	80142e8 <uxr_deserialize_STATUS_Payload>
 8012530:	a90e      	add	r1, sp, #56	@ 0x38
 8012532:	aa0d      	add	r2, sp, #52	@ 0x34
 8012534:	a810      	add	r0, sp, #64	@ 0x40
 8012536:	f000 fd4b 	bl	8012fd0 <uxr_parse_base_object_request>
 801253a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801253e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012540:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8012544:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8012548:	910f      	str	r1, [sp, #60]	@ 0x3c
 801254a:	f1ba 0f00 	cmp.w	sl, #0
 801254e:	d006      	beq.n	801255e <read_submessage_list+0x262>
 8012550:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8012554:	9300      	str	r3, [sp, #0]
 8012556:	463a      	mov	r2, r7
 8012558:	464b      	mov	r3, r9
 801255a:	4620      	mov	r0, r4
 801255c:	47d0      	blx	sl
 801255e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012560:	2a00      	cmp	r2, #0
 8012562:	f43f aed4 	beq.w	801230e <read_submessage_list+0x12>
 8012566:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012568:	2100      	movs	r1, #0
 801256a:	3802      	subs	r0, #2
 801256c:	e003      	b.n	8012576 <read_submessage_list+0x27a>
 801256e:	3101      	adds	r1, #1
 8012570:	4291      	cmp	r1, r2
 8012572:	f43f aecc 	beq.w	801230e <read_submessage_list+0x12>
 8012576:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801257a:	42bb      	cmp	r3, r7
 801257c:	d1f7      	bne.n	801256e <read_submessage_list+0x272>
 801257e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012580:	f803 9001 	strb.w	r9, [r3, r1]
 8012584:	e6c3      	b.n	801230e <read_submessage_list+0x12>
 8012586:	2a00      	cmp	r2, #0
 8012588:	f47f aec1 	bne.w	801230e <read_submessage_list+0x12>
 801258c:	4629      	mov	r1, r5
 801258e:	4620      	mov	r0, r4
 8012590:	f000 fc64 	bl	8012e5c <uxr_read_create_session_status>
 8012594:	e6bb      	b.n	801230e <read_submessage_list+0x12>
 8012596:	4629      	mov	r1, r5
 8012598:	4620      	mov	r0, r4
 801259a:	f7ff fcf5 	bl	8011f88 <read_submessage_get_info>
 801259e:	e6b6      	b.n	801230e <read_submessage_list+0x12>
 80125a0:	b017      	add	sp, #92	@ 0x5c
 80125a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125a6:	4629      	mov	r1, r5
 80125a8:	4620      	mov	r0, r4
 80125aa:	f000 fc63 	bl	8012e74 <uxr_read_delete_session_status>
 80125ae:	e6ae      	b.n	801230e <read_submessage_list+0x12>
 80125b0:	f000 feb8 	bl	8013324 <uxr_nanos>
 80125b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80125b6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80125b8:	464f      	mov	r7, r9
 80125ba:	fbc3 2706 	smlal	r2, r7, r3, r6
 80125be:	1812      	adds	r2, r2, r0
 80125c0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80125c2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80125c4:	eb47 0101 	adc.w	r1, r7, r1
 80125c8:	464f      	mov	r7, r9
 80125ca:	fbc3 0706 	smlal	r0, r7, r3, r6
 80125ce:	463b      	mov	r3, r7
 80125d0:	4684      	mov	ip, r0
 80125d2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80125d6:	fbc7 0906 	smlal	r0, r9, r7, r6
 80125da:	eb1c 0c00 	adds.w	ip, ip, r0
 80125de:	464f      	mov	r7, r9
 80125e0:	eb43 0307 	adc.w	r3, r3, r7
 80125e4:	ebb2 0c0c 	subs.w	ip, r2, ip
 80125e8:	eb61 0303 	sbc.w	r3, r1, r3
 80125ec:	0fda      	lsrs	r2, r3, #31
 80125ee:	eb12 020c 	adds.w	r2, r2, ip
 80125f2:	f143 0300 	adc.w	r3, r3, #0
 80125f6:	0852      	lsrs	r2, r2, #1
 80125f8:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80125fc:	105b      	asrs	r3, r3, #1
 80125fe:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8012602:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8012606:	e6dd      	b.n	80123c4 <read_submessage_list+0xc8>
 8012608:	3b9aca00 	.word	0x3b9aca00

0801260c <listen_message_reliably>:
 801260c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012610:	1e0b      	subs	r3, r1, #0
 8012612:	b09d      	sub	sp, #116	@ 0x74
 8012614:	bfb8      	it	lt
 8012616:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801261a:	4680      	mov	r8, r0
 801261c:	9305      	str	r3, [sp, #20]
 801261e:	f000 fe67 	bl	80132f0 <uxr_millis>
 8012622:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8012626:	4681      	mov	r9, r0
 8012628:	2a00      	cmp	r2, #0
 801262a:	f000 80a1 	beq.w	8012770 <listen_message_reliably+0x164>
 801262e:	2600      	movs	r6, #0
 8012630:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012634:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012638:	9303      	str	r3, [sp, #12]
 801263a:	4630      	mov	r0, r6
 801263c:	460f      	mov	r7, r1
 801263e:	e00f      	b.n	8012660 <listen_message_reliably+0x54>
 8012640:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8012644:	9903      	ldr	r1, [sp, #12]
 8012646:	455a      	cmp	r2, fp
 8012648:	f106 0601 	add.w	r6, r6, #1
 801264c:	eb73 0101 	sbcs.w	r1, r3, r1
 8012650:	b2f0      	uxtb	r0, r6
 8012652:	da01      	bge.n	8012658 <listen_message_reliably+0x4c>
 8012654:	4693      	mov	fp, r2
 8012656:	9303      	str	r3, [sp, #12]
 8012658:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801265c:	4283      	cmp	r3, r0
 801265e:	d960      	bls.n	8012722 <listen_message_reliably+0x116>
 8012660:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8012664:	2102      	movs	r1, #2
 8012666:	2201      	movs	r2, #1
 8012668:	f000 fcc4 	bl	8012ff4 <uxr_stream_id>
 801266c:	00e4      	lsls	r4, r4, #3
 801266e:	f104 0520 	add.w	r5, r4, #32
 8012672:	4445      	add	r5, r8
 8012674:	4601      	mov	r1, r0
 8012676:	463b      	mov	r3, r7
 8012678:	464a      	mov	r2, r9
 801267a:	4628      	mov	r0, r5
 801267c:	9109      	str	r1, [sp, #36]	@ 0x24
 801267e:	f004 fd77 	bl	8017170 <uxr_update_output_stream_heartbeat_timestamp>
 8012682:	eb08 0304 	add.w	r3, r8, r4
 8012686:	2800      	cmp	r0, #0
 8012688:	d0da      	beq.n	8012640 <listen_message_reliably+0x34>
 801268a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801268e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8012692:	9304      	str	r3, [sp, #16]
 8012694:	4640      	mov	r0, r8
 8012696:	f000 fc75 	bl	8012f84 <uxr_session_header_offset>
 801269a:	3501      	adds	r5, #1
 801269c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80126a0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80126a4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80126a8:	2300      	movs	r3, #0
 80126aa:	2211      	movs	r2, #17
 80126ac:	9000      	str	r0, [sp, #0]
 80126ae:	a90c      	add	r1, sp, #48	@ 0x30
 80126b0:	4650      	mov	r0, sl
 80126b2:	f7ff fa3b 	bl	8011b2c <ucdr_init_buffer_origin_offset>
 80126b6:	2300      	movs	r3, #0
 80126b8:	2205      	movs	r2, #5
 80126ba:	210b      	movs	r1, #11
 80126bc:	4650      	mov	r0, sl
 80126be:	f000 fdd1 	bl	8013264 <uxr_buffer_submessage_header>
 80126c2:	8968      	ldrh	r0, [r5, #10]
 80126c4:	2101      	movs	r1, #1
 80126c6:	f004 ff0b 	bl	80174e0 <uxr_seq_num_add>
 80126ca:	892b      	ldrh	r3, [r5, #8]
 80126cc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80126d0:	4602      	mov	r2, r0
 80126d2:	9b04      	ldr	r3, [sp, #16]
 80126d4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80126d8:	a90a      	add	r1, sp, #40	@ 0x28
 80126da:	4650      	mov	r0, sl
 80126dc:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80126e0:	f001 feba 	bl	8014458 <uxr_serialize_HEARTBEAT_Payload>
 80126e4:	2200      	movs	r2, #0
 80126e6:	4611      	mov	r1, r2
 80126e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80126ea:	4640      	mov	r0, r8
 80126ec:	f000 fbf4 	bl	8012ed8 <uxr_stamp_session_header>
 80126f0:	4650      	mov	r0, sl
 80126f2:	f7ff fa59 	bl	8011ba8 <ucdr_buffer_length>
 80126f6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80126fa:	4602      	mov	r2, r0
 80126fc:	a90c      	add	r1, sp, #48	@ 0x30
 80126fe:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012702:	4444      	add	r4, r8
 8012704:	47a8      	blx	r5
 8012706:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801270a:	9903      	ldr	r1, [sp, #12]
 801270c:	455a      	cmp	r2, fp
 801270e:	f106 0601 	add.w	r6, r6, #1
 8012712:	eb73 0101 	sbcs.w	r1, r3, r1
 8012716:	b2f0      	uxtb	r0, r6
 8012718:	db9c      	blt.n	8012654 <listen_message_reliably+0x48>
 801271a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801271e:	4283      	cmp	r3, r0
 8012720:	d89e      	bhi.n	8012660 <listen_message_reliably+0x54>
 8012722:	9a03      	ldr	r2, [sp, #12]
 8012724:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012728:	429a      	cmp	r2, r3
 801272a:	bf08      	it	eq
 801272c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8012730:	d01e      	beq.n	8012770 <listen_message_reliably+0x164>
 8012732:	ebab 0309 	sub.w	r3, fp, r9
 8012736:	9905      	ldr	r1, [sp, #20]
 8012738:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 801273c:	2b00      	cmp	r3, #0
 801273e:	bf08      	it	eq
 8012740:	2301      	moveq	r3, #1
 8012742:	4299      	cmp	r1, r3
 8012744:	bfa8      	it	ge
 8012746:	4619      	movge	r1, r3
 8012748:	6894      	ldr	r4, [r2, #8]
 801274a:	6810      	ldr	r0, [r2, #0]
 801274c:	4689      	mov	r9, r1
 801274e:	460b      	mov	r3, r1
 8012750:	aa08      	add	r2, sp, #32
 8012752:	a907      	add	r1, sp, #28
 8012754:	47a0      	blx	r4
 8012756:	b968      	cbnz	r0, 8012774 <listen_message_reliably+0x168>
 8012758:	9b05      	ldr	r3, [sp, #20]
 801275a:	eba3 0309 	sub.w	r3, r3, r9
 801275e:	2b00      	cmp	r3, #0
 8012760:	9305      	str	r3, [sp, #20]
 8012762:	f73f af5c 	bgt.w	801261e <listen_message_reliably+0x12>
 8012766:	4604      	mov	r4, r0
 8012768:	4620      	mov	r0, r4
 801276a:	b01d      	add	sp, #116	@ 0x74
 801276c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012770:	9b05      	ldr	r3, [sp, #20]
 8012772:	e7e0      	b.n	8012736 <listen_message_reliably+0x12a>
 8012774:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012778:	4604      	mov	r4, r0
 801277a:	a80c      	add	r0, sp, #48	@ 0x30
 801277c:	f7ff f9e8 	bl	8011b50 <ucdr_init_buffer>
 8012780:	2500      	movs	r5, #0
 8012782:	f10d 031a 	add.w	r3, sp, #26
 8012786:	aa06      	add	r2, sp, #24
 8012788:	a90c      	add	r1, sp, #48	@ 0x30
 801278a:	4640      	mov	r0, r8
 801278c:	f88d 5018 	strb.w	r5, [sp, #24]
 8012790:	f000 fbb6 	bl	8012f00 <uxr_read_session_header>
 8012794:	b918      	cbnz	r0, 801279e <listen_message_reliably+0x192>
 8012796:	4620      	mov	r0, r4
 8012798:	b01d      	add	sp, #116	@ 0x74
 801279a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801279e:	4629      	mov	r1, r5
 80127a0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80127a4:	f000 fc50 	bl	8013048 <uxr_stream_id_from_raw>
 80127a8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80127ac:	2d01      	cmp	r5, #1
 80127ae:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80127b2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80127b6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80127ba:	d04b      	beq.n	8012854 <listen_message_reliably+0x248>
 80127bc:	2d02      	cmp	r5, #2
 80127be:	d00f      	beq.n	80127e0 <listen_message_reliably+0x1d4>
 80127c0:	2d00      	cmp	r5, #0
 80127c2:	d1e8      	bne.n	8012796 <listen_message_reliably+0x18a>
 80127c4:	4629      	mov	r1, r5
 80127c6:	4628      	mov	r0, r5
 80127c8:	f000 fc3e 	bl	8013048 <uxr_stream_id_from_raw>
 80127cc:	a90c      	add	r1, sp, #48	@ 0x30
 80127ce:	4602      	mov	r2, r0
 80127d0:	4640      	mov	r0, r8
 80127d2:	920a      	str	r2, [sp, #40]	@ 0x28
 80127d4:	f7ff fd92 	bl	80122fc <read_submessage_list>
 80127d8:	4620      	mov	r0, r4
 80127da:	b01d      	add	sp, #116	@ 0x74
 80127dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127e0:	4631      	mov	r1, r6
 80127e2:	f108 0008 	add.w	r0, r8, #8
 80127e6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80127ea:	f000 fd1b 	bl	8013224 <uxr_get_input_reliable_stream>
 80127ee:	4607      	mov	r7, r0
 80127f0:	b338      	cbz	r0, 8012842 <listen_message_reliably+0x236>
 80127f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80127f4:	9203      	str	r2, [sp, #12]
 80127f6:	a80c      	add	r0, sp, #48	@ 0x30
 80127f8:	f7ff f9da 	bl	8011bb0 <ucdr_buffer_remaining>
 80127fc:	4603      	mov	r3, r0
 80127fe:	f10d 0019 	add.w	r0, sp, #25
 8012802:	9000      	str	r0, [sp, #0]
 8012804:	9a03      	ldr	r2, [sp, #12]
 8012806:	4651      	mov	r1, sl
 8012808:	4638      	mov	r0, r7
 801280a:	f004 f8c7 	bl	801699c <uxr_receive_reliable_message>
 801280e:	b1c0      	cbz	r0, 8012842 <listen_message_reliably+0x236>
 8012810:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012814:	b393      	cbz	r3, 801287c <listen_message_reliably+0x270>
 8012816:	ad14      	add	r5, sp, #80	@ 0x50
 8012818:	f04f 0a02 	mov.w	sl, #2
 801281c:	e00a      	b.n	8012834 <listen_message_reliably+0x228>
 801281e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8012822:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8012826:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801282a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801282c:	4629      	mov	r1, r5
 801282e:	4640      	mov	r0, r8
 8012830:	f7ff fd64 	bl	80122fc <read_submessage_list>
 8012834:	2204      	movs	r2, #4
 8012836:	4629      	mov	r1, r5
 8012838:	4638      	mov	r0, r7
 801283a:	f004 f92f 	bl	8016a9c <uxr_next_input_reliable_buffer_available>
 801283e:	2800      	cmp	r0, #0
 8012840:	d1ed      	bne.n	801281e <listen_message_reliably+0x212>
 8012842:	4640      	mov	r0, r8
 8012844:	4632      	mov	r2, r6
 8012846:	4649      	mov	r1, r9
 8012848:	f7ff fbd4 	bl	8011ff4 <write_submessage_acknack.isra.0>
 801284c:	4620      	mov	r0, r4
 801284e:	b01d      	add	sp, #116	@ 0x74
 8012850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012854:	4631      	mov	r1, r6
 8012856:	f108 0008 	add.w	r0, r8, #8
 801285a:	f000 fcd9 	bl	8013210 <uxr_get_input_best_effort_stream>
 801285e:	2800      	cmp	r0, #0
 8012860:	d099      	beq.n	8012796 <listen_message_reliably+0x18a>
 8012862:	4651      	mov	r1, sl
 8012864:	f004 f806 	bl	8016874 <uxr_receive_best_effort_message>
 8012868:	2800      	cmp	r0, #0
 801286a:	d094      	beq.n	8012796 <listen_message_reliably+0x18a>
 801286c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8012870:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012872:	a90c      	add	r1, sp, #48	@ 0x30
 8012874:	4640      	mov	r0, r8
 8012876:	f7ff fd41 	bl	80122fc <read_submessage_list>
 801287a:	e78c      	b.n	8012796 <listen_message_reliably+0x18a>
 801287c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8012880:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012882:	a90c      	add	r1, sp, #48	@ 0x30
 8012884:	4640      	mov	r0, r8
 8012886:	f7ff fd39 	bl	80122fc <read_submessage_list>
 801288a:	e7c4      	b.n	8012816 <listen_message_reliably+0x20a>

0801288c <uxr_run_session_until_confirm_delivery>:
 801288c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012890:	4606      	mov	r6, r0
 8012892:	460d      	mov	r5, r1
 8012894:	f000 fd2c 	bl	80132f0 <uxr_millis>
 8012898:	4607      	mov	r7, r0
 801289a:	4630      	mov	r0, r6
 801289c:	f7ff fc70 	bl	8012180 <uxr_flash_output_streams>
 80128a0:	2d00      	cmp	r5, #0
 80128a2:	f106 0808 	add.w	r8, r6, #8
 80128a6:	bfa8      	it	ge
 80128a8:	462c      	movge	r4, r5
 80128aa:	da07      	bge.n	80128bc <uxr_run_session_until_confirm_delivery+0x30>
 80128ac:	e00e      	b.n	80128cc <uxr_run_session_until_confirm_delivery+0x40>
 80128ae:	f7ff fead 	bl	801260c <listen_message_reliably>
 80128b2:	f000 fd1d 	bl	80132f0 <uxr_millis>
 80128b6:	1bc3      	subs	r3, r0, r7
 80128b8:	1aec      	subs	r4, r5, r3
 80128ba:	d407      	bmi.n	80128cc <uxr_run_session_until_confirm_delivery+0x40>
 80128bc:	4640      	mov	r0, r8
 80128be:	f000 fcbb 	bl	8013238 <uxr_output_streams_confirmed>
 80128c2:	4603      	mov	r3, r0
 80128c4:	4621      	mov	r1, r4
 80128c6:	4630      	mov	r0, r6
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d0f0      	beq.n	80128ae <uxr_run_session_until_confirm_delivery+0x22>
 80128cc:	4640      	mov	r0, r8
 80128ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128d2:	f000 bcb1 	b.w	8013238 <uxr_output_streams_confirmed>
 80128d6:	bf00      	nop

080128d8 <uxr_run_session_until_all_status>:
 80128d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128dc:	9c08      	ldr	r4, [sp, #32]
 80128de:	4606      	mov	r6, r0
 80128e0:	460f      	mov	r7, r1
 80128e2:	4691      	mov	r9, r2
 80128e4:	461d      	mov	r5, r3
 80128e6:	f7ff fc4b 	bl	8012180 <uxr_flash_output_streams>
 80128ea:	b124      	cbz	r4, 80128f6 <uxr_run_session_until_all_status+0x1e>
 80128ec:	4622      	mov	r2, r4
 80128ee:	21ff      	movs	r1, #255	@ 0xff
 80128f0:	4628      	mov	r0, r5
 80128f2:	f006 fbe3 	bl	80190bc <memset>
 80128f6:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 80128fa:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80128fc:	f000 fcf8 	bl	80132f0 <uxr_millis>
 8012900:	3d01      	subs	r5, #1
 8012902:	f1a9 0902 	sub.w	r9, r9, #2
 8012906:	4680      	mov	r8, r0
 8012908:	4639      	mov	r1, r7
 801290a:	4630      	mov	r0, r6
 801290c:	f7ff fe7e 	bl	801260c <listen_message_reliably>
 8012910:	f000 fcee 	bl	80132f0 <uxr_millis>
 8012914:	eba0 0008 	sub.w	r0, r0, r8
 8012918:	1a39      	subs	r1, r7, r0
 801291a:	b344      	cbz	r4, 801296e <uxr_run_session_until_all_status+0x96>
 801291c:	4628      	mov	r0, r5
 801291e:	46ac      	mov	ip, r5
 8012920:	2301      	movs	r3, #1
 8012922:	e002      	b.n	801292a <uxr_run_session_until_all_status+0x52>
 8012924:	42a3      	cmp	r3, r4
 8012926:	d20d      	bcs.n	8012944 <uxr_run_session_until_all_status+0x6c>
 8012928:	3301      	adds	r3, #1
 801292a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801292e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8012932:	d1f7      	bne.n	8012924 <uxr_run_session_until_all_status+0x4c>
 8012934:	42a3      	cmp	r3, r4
 8012936:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 801293a:	d213      	bcs.n	8012964 <uxr_run_session_until_all_status+0x8c>
 801293c:	2a00      	cmp	r2, #0
 801293e:	d0f3      	beq.n	8012928 <uxr_run_session_until_all_status+0x50>
 8012940:	2900      	cmp	r1, #0
 8012942:	dce2      	bgt.n	801290a <uxr_run_session_until_all_status+0x32>
 8012944:	2300      	movs	r3, #0
 8012946:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8012948:	442c      	add	r4, r5
 801294a:	e001      	b.n	8012950 <uxr_run_session_until_all_status+0x78>
 801294c:	2b01      	cmp	r3, #1
 801294e:	d812      	bhi.n	8012976 <uxr_run_session_until_all_status+0x9e>
 8012950:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8012954:	4284      	cmp	r4, r0
 8012956:	d1f9      	bne.n	801294c <uxr_run_session_until_all_status+0x74>
 8012958:	2b01      	cmp	r3, #1
 801295a:	bf8c      	ite	hi
 801295c:	2000      	movhi	r0, #0
 801295e:	2001      	movls	r0, #1
 8012960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012964:	2900      	cmp	r1, #0
 8012966:	dded      	ble.n	8012944 <uxr_run_session_until_all_status+0x6c>
 8012968:	2a00      	cmp	r2, #0
 801296a:	d1ce      	bne.n	801290a <uxr_run_session_until_all_status+0x32>
 801296c:	e7ea      	b.n	8012944 <uxr_run_session_until_all_status+0x6c>
 801296e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8012970:	2001      	movs	r0, #1
 8012972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012976:	2000      	movs	r0, #0
 8012978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801297c <wait_session_status>:
 801297c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012980:	4604      	mov	r4, r0
 8012982:	b09d      	sub	sp, #116	@ 0x74
 8012984:	20ff      	movs	r0, #255	@ 0xff
 8012986:	7160      	strb	r0, [r4, #5]
 8012988:	9303      	str	r3, [sp, #12]
 801298a:	2b00      	cmp	r3, #0
 801298c:	f000 80b6 	beq.w	8012afc <wait_session_status+0x180>
 8012990:	468a      	mov	sl, r1
 8012992:	4691      	mov	r9, r2
 8012994:	f04f 0b00 	mov.w	fp, #0
 8012998:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801299a:	464a      	mov	r2, r9
 801299c:	e9d3 0500 	ldrd	r0, r5, [r3]
 80129a0:	4651      	mov	r1, sl
 80129a2:	47a8      	blx	r5
 80129a4:	f000 fca4 	bl	80132f0 <uxr_millis>
 80129a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80129ac:	4605      	mov	r5, r0
 80129ae:	e009      	b.n	80129c4 <wait_session_status+0x48>
 80129b0:	f000 fc9e 	bl	80132f0 <uxr_millis>
 80129b4:	1b40      	subs	r0, r0, r5
 80129b6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	dd40      	ble.n	8012a40 <wait_session_status+0xc4>
 80129be:	7960      	ldrb	r0, [r4, #5]
 80129c0:	28ff      	cmp	r0, #255	@ 0xff
 80129c2:	d145      	bne.n	8012a50 <wait_session_status+0xd4>
 80129c4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80129c6:	a908      	add	r1, sp, #32
 80129c8:	6896      	ldr	r6, [r2, #8]
 80129ca:	6810      	ldr	r0, [r2, #0]
 80129cc:	aa09      	add	r2, sp, #36	@ 0x24
 80129ce:	47b0      	blx	r6
 80129d0:	2800      	cmp	r0, #0
 80129d2:	d0ed      	beq.n	80129b0 <wait_session_status+0x34>
 80129d4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80129d8:	a80c      	add	r0, sp, #48	@ 0x30
 80129da:	f7ff f8b9 	bl	8011b50 <ucdr_init_buffer>
 80129de:	2600      	movs	r6, #0
 80129e0:	f10d 031e 	add.w	r3, sp, #30
 80129e4:	aa07      	add	r2, sp, #28
 80129e6:	a90c      	add	r1, sp, #48	@ 0x30
 80129e8:	4620      	mov	r0, r4
 80129ea:	f88d 601c 	strb.w	r6, [sp, #28]
 80129ee:	f000 fa87 	bl	8012f00 <uxr_read_session_header>
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d0dc      	beq.n	80129b0 <wait_session_status+0x34>
 80129f6:	4631      	mov	r1, r6
 80129f8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80129fc:	f000 fb24 	bl	8013048 <uxr_stream_id_from_raw>
 8012a00:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012a04:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012a08:	9302      	str	r3, [sp, #8]
 8012a0a:	2f01      	cmp	r7, #1
 8012a0c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8012a10:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012a14:	d05c      	beq.n	8012ad0 <wait_session_status+0x154>
 8012a16:	2f02      	cmp	r7, #2
 8012a18:	d020      	beq.n	8012a5c <wait_session_status+0xe0>
 8012a1a:	2f00      	cmp	r7, #0
 8012a1c:	d1c8      	bne.n	80129b0 <wait_session_status+0x34>
 8012a1e:	4639      	mov	r1, r7
 8012a20:	4638      	mov	r0, r7
 8012a22:	f000 fb11 	bl	8013048 <uxr_stream_id_from_raw>
 8012a26:	a90c      	add	r1, sp, #48	@ 0x30
 8012a28:	4602      	mov	r2, r0
 8012a2a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012a2c:	4620      	mov	r0, r4
 8012a2e:	f7ff fc65 	bl	80122fc <read_submessage_list>
 8012a32:	f000 fc5d 	bl	80132f0 <uxr_millis>
 8012a36:	1b40      	subs	r0, r0, r5
 8012a38:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	dcbe      	bgt.n	80129be <wait_session_status+0x42>
 8012a40:	9b03      	ldr	r3, [sp, #12]
 8012a42:	7960      	ldrb	r0, [r4, #5]
 8012a44:	f10b 0b01 	add.w	fp, fp, #1
 8012a48:	455b      	cmp	r3, fp
 8012a4a:	d001      	beq.n	8012a50 <wait_session_status+0xd4>
 8012a4c:	28ff      	cmp	r0, #255	@ 0xff
 8012a4e:	d0a3      	beq.n	8012998 <wait_session_status+0x1c>
 8012a50:	38ff      	subs	r0, #255	@ 0xff
 8012a52:	bf18      	it	ne
 8012a54:	2001      	movne	r0, #1
 8012a56:	b01d      	add	sp, #116	@ 0x74
 8012a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a5c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8012a60:	9304      	str	r3, [sp, #16]
 8012a62:	4631      	mov	r1, r6
 8012a64:	f104 0008 	add.w	r0, r4, #8
 8012a68:	f000 fbdc 	bl	8013224 <uxr_get_input_reliable_stream>
 8012a6c:	4680      	mov	r8, r0
 8012a6e:	b348      	cbz	r0, 8012ac4 <wait_session_status+0x148>
 8012a70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a72:	9205      	str	r2, [sp, #20]
 8012a74:	a80c      	add	r0, sp, #48	@ 0x30
 8012a76:	f7ff f89b 	bl	8011bb0 <ucdr_buffer_remaining>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	f10d 001d 	add.w	r0, sp, #29
 8012a80:	9000      	str	r0, [sp, #0]
 8012a82:	9a05      	ldr	r2, [sp, #20]
 8012a84:	9902      	ldr	r1, [sp, #8]
 8012a86:	4640      	mov	r0, r8
 8012a88:	f003 ff88 	bl	801699c <uxr_receive_reliable_message>
 8012a8c:	b1d0      	cbz	r0, 8012ac4 <wait_session_status+0x148>
 8012a8e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d03a      	beq.n	8012b0c <wait_session_status+0x190>
 8012a96:	9f04      	ldr	r7, [sp, #16]
 8012a98:	e00a      	b.n	8012ab0 <wait_session_status+0x134>
 8012a9a:	f04f 0302 	mov.w	r3, #2
 8012a9e:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8012aa2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8012aa6:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8012aaa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012aac:	f7ff fc26 	bl	80122fc <read_submessage_list>
 8012ab0:	a914      	add	r1, sp, #80	@ 0x50
 8012ab2:	2204      	movs	r2, #4
 8012ab4:	4640      	mov	r0, r8
 8012ab6:	f003 fff1 	bl	8016a9c <uxr_next_input_reliable_buffer_available>
 8012aba:	4603      	mov	r3, r0
 8012abc:	a914      	add	r1, sp, #80	@ 0x50
 8012abe:	4620      	mov	r0, r4
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d1ea      	bne.n	8012a9a <wait_session_status+0x11e>
 8012ac4:	9904      	ldr	r1, [sp, #16]
 8012ac6:	4632      	mov	r2, r6
 8012ac8:	4620      	mov	r0, r4
 8012aca:	f7ff fa93 	bl	8011ff4 <write_submessage_acknack.isra.0>
 8012ace:	e76f      	b.n	80129b0 <wait_session_status+0x34>
 8012ad0:	4631      	mov	r1, r6
 8012ad2:	f104 0008 	add.w	r0, r4, #8
 8012ad6:	f000 fb9b 	bl	8013210 <uxr_get_input_best_effort_stream>
 8012ada:	2800      	cmp	r0, #0
 8012adc:	f43f af68 	beq.w	80129b0 <wait_session_status+0x34>
 8012ae0:	9902      	ldr	r1, [sp, #8]
 8012ae2:	f003 fec7 	bl	8016874 <uxr_receive_best_effort_message>
 8012ae6:	2800      	cmp	r0, #0
 8012ae8:	f43f af62 	beq.w	80129b0 <wait_session_status+0x34>
 8012aec:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8012af0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012af2:	a90c      	add	r1, sp, #48	@ 0x30
 8012af4:	4620      	mov	r0, r4
 8012af6:	f7ff fc01 	bl	80122fc <read_submessage_list>
 8012afa:	e759      	b.n	80129b0 <wait_session_status+0x34>
 8012afc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012afe:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012b02:	47a0      	blx	r4
 8012b04:	2001      	movs	r0, #1
 8012b06:	b01d      	add	sp, #116	@ 0x74
 8012b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b0c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8012b10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012b12:	a90c      	add	r1, sp, #48	@ 0x30
 8012b14:	4620      	mov	r0, r4
 8012b16:	f7ff fbf1 	bl	80122fc <read_submessage_list>
 8012b1a:	e7bc      	b.n	8012a96 <wait_session_status+0x11a>

08012b1c <uxr_delete_session_retries>:
 8012b1c:	b530      	push	{r4, r5, lr}
 8012b1e:	b08f      	sub	sp, #60	@ 0x3c
 8012b20:	4604      	mov	r4, r0
 8012b22:	460d      	mov	r5, r1
 8012b24:	f000 fa2e 	bl	8012f84 <uxr_session_header_offset>
 8012b28:	2300      	movs	r3, #0
 8012b2a:	2210      	movs	r2, #16
 8012b2c:	9000      	str	r0, [sp, #0]
 8012b2e:	a902      	add	r1, sp, #8
 8012b30:	a806      	add	r0, sp, #24
 8012b32:	f7fe fffb 	bl	8011b2c <ucdr_init_buffer_origin_offset>
 8012b36:	a906      	add	r1, sp, #24
 8012b38:	4620      	mov	r0, r4
 8012b3a:	f000 f973 	bl	8012e24 <uxr_buffer_delete_session>
 8012b3e:	2200      	movs	r2, #0
 8012b40:	4611      	mov	r1, r2
 8012b42:	9b06      	ldr	r3, [sp, #24]
 8012b44:	4620      	mov	r0, r4
 8012b46:	f000 f9c7 	bl	8012ed8 <uxr_stamp_session_header>
 8012b4a:	a806      	add	r0, sp, #24
 8012b4c:	f7ff f82c 	bl	8011ba8 <ucdr_buffer_length>
 8012b50:	462b      	mov	r3, r5
 8012b52:	4602      	mov	r2, r0
 8012b54:	a902      	add	r1, sp, #8
 8012b56:	4620      	mov	r0, r4
 8012b58:	f7ff ff10 	bl	801297c <wait_session_status>
 8012b5c:	b118      	cbz	r0, 8012b66 <uxr_delete_session_retries+0x4a>
 8012b5e:	7960      	ldrb	r0, [r4, #5]
 8012b60:	fab0 f080 	clz	r0, r0
 8012b64:	0940      	lsrs	r0, r0, #5
 8012b66:	b00f      	add	sp, #60	@ 0x3c
 8012b68:	bd30      	pop	{r4, r5, pc}
 8012b6a:	bf00      	nop

08012b6c <uxr_create_session>:
 8012b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b70:	f100 0b08 	add.w	fp, r0, #8
 8012b74:	b0ab      	sub	sp, #172	@ 0xac
 8012b76:	4604      	mov	r4, r0
 8012b78:	4658      	mov	r0, fp
 8012b7a:	f000 fa99 	bl	80130b0 <uxr_reset_stream_storage>
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f000 fa00 	bl	8012f84 <uxr_session_header_offset>
 8012b84:	2300      	movs	r3, #0
 8012b86:	9000      	str	r0, [sp, #0]
 8012b88:	221c      	movs	r2, #28
 8012b8a:	a90b      	add	r1, sp, #44	@ 0x2c
 8012b8c:	a812      	add	r0, sp, #72	@ 0x48
 8012b8e:	f7fe ffcd 	bl	8011b2c <ucdr_init_buffer_origin_offset>
 8012b92:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012b94:	8a1a      	ldrh	r2, [r3, #16]
 8012b96:	3a04      	subs	r2, #4
 8012b98:	b292      	uxth	r2, r2
 8012b9a:	a912      	add	r1, sp, #72	@ 0x48
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f000 f917 	bl	8012dd0 <uxr_buffer_create_session>
 8012ba2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	f000 f983 	bl	8012eb0 <uxr_stamp_create_session_header>
 8012baa:	a812      	add	r0, sp, #72	@ 0x48
 8012bac:	f7fe fffc 	bl	8011ba8 <ucdr_buffer_length>
 8012bb0:	23ff      	movs	r3, #255	@ 0xff
 8012bb2:	7163      	strb	r3, [r4, #5]
 8012bb4:	230a      	movs	r3, #10
 8012bb6:	46da      	mov	sl, fp
 8012bb8:	9303      	str	r3, [sp, #12]
 8012bba:	4683      	mov	fp, r0
 8012bbc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012bbe:	465a      	mov	r2, fp
 8012bc0:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012bc4:	a90b      	add	r1, sp, #44	@ 0x2c
 8012bc6:	47a8      	blx	r5
 8012bc8:	f000 fb92 	bl	80132f0 <uxr_millis>
 8012bcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012bd0:	4605      	mov	r5, r0
 8012bd2:	e009      	b.n	8012be8 <uxr_create_session+0x7c>
 8012bd4:	f000 fb8c 	bl	80132f0 <uxr_millis>
 8012bd8:	1b40      	subs	r0, r0, r5
 8012bda:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	7962      	ldrb	r2, [r4, #5]
 8012be2:	dd38      	ble.n	8012c56 <uxr_create_session+0xea>
 8012be4:	2aff      	cmp	r2, #255	@ 0xff
 8012be6:	d13c      	bne.n	8012c62 <uxr_create_session+0xf6>
 8012be8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8012bea:	a907      	add	r1, sp, #28
 8012bec:	6896      	ldr	r6, [r2, #8]
 8012bee:	6810      	ldr	r0, [r2, #0]
 8012bf0:	aa08      	add	r2, sp, #32
 8012bf2:	47b0      	blx	r6
 8012bf4:	2800      	cmp	r0, #0
 8012bf6:	d0ed      	beq.n	8012bd4 <uxr_create_session+0x68>
 8012bf8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012bfc:	a81a      	add	r0, sp, #104	@ 0x68
 8012bfe:	f7fe ffa7 	bl	8011b50 <ucdr_init_buffer>
 8012c02:	2600      	movs	r6, #0
 8012c04:	f10d 031a 	add.w	r3, sp, #26
 8012c08:	aa06      	add	r2, sp, #24
 8012c0a:	a91a      	add	r1, sp, #104	@ 0x68
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	f88d 6018 	strb.w	r6, [sp, #24]
 8012c12:	f000 f975 	bl	8012f00 <uxr_read_session_header>
 8012c16:	2800      	cmp	r0, #0
 8012c18:	d0dc      	beq.n	8012bd4 <uxr_create_session+0x68>
 8012c1a:	4631      	mov	r1, r6
 8012c1c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012c20:	f000 fa12 	bl	8013048 <uxr_stream_id_from_raw>
 8012c24:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012c28:	2e01      	cmp	r6, #1
 8012c2a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8012c2e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8012c32:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8012c36:	d053      	beq.n	8012ce0 <uxr_create_session+0x174>
 8012c38:	2e02      	cmp	r6, #2
 8012c3a:	d018      	beq.n	8012c6e <uxr_create_session+0x102>
 8012c3c:	2e00      	cmp	r6, #0
 8012c3e:	d1c9      	bne.n	8012bd4 <uxr_create_session+0x68>
 8012c40:	4631      	mov	r1, r6
 8012c42:	4630      	mov	r0, r6
 8012c44:	f000 fa00 	bl	8013048 <uxr_stream_id_from_raw>
 8012c48:	a91a      	add	r1, sp, #104	@ 0x68
 8012c4a:	4602      	mov	r2, r0
 8012c4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8012c4e:	4620      	mov	r0, r4
 8012c50:	f7ff fb54 	bl	80122fc <read_submessage_list>
 8012c54:	e7be      	b.n	8012bd4 <uxr_create_session+0x68>
 8012c56:	9b03      	ldr	r3, [sp, #12]
 8012c58:	3b01      	subs	r3, #1
 8012c5a:	9303      	str	r3, [sp, #12]
 8012c5c:	d001      	beq.n	8012c62 <uxr_create_session+0xf6>
 8012c5e:	2aff      	cmp	r2, #255	@ 0xff
 8012c60:	d0ac      	beq.n	8012bbc <uxr_create_session+0x50>
 8012c62:	2a00      	cmp	r2, #0
 8012c64:	d051      	beq.n	8012d0a <uxr_create_session+0x19e>
 8012c66:	2000      	movs	r0, #0
 8012c68:	b02b      	add	sp, #172	@ 0xac
 8012c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012c72:	9304      	str	r3, [sp, #16]
 8012c74:	4639      	mov	r1, r7
 8012c76:	4650      	mov	r0, sl
 8012c78:	f000 fad4 	bl	8013224 <uxr_get_input_reliable_stream>
 8012c7c:	4680      	mov	r8, r0
 8012c7e:	b348      	cbz	r0, 8012cd4 <uxr_create_session+0x168>
 8012c80:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012c82:	9205      	str	r2, [sp, #20]
 8012c84:	a81a      	add	r0, sp, #104	@ 0x68
 8012c86:	f7fe ff93 	bl	8011bb0 <ucdr_buffer_remaining>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	f10d 0019 	add.w	r0, sp, #25
 8012c90:	9000      	str	r0, [sp, #0]
 8012c92:	9a05      	ldr	r2, [sp, #20]
 8012c94:	4649      	mov	r1, r9
 8012c96:	4640      	mov	r0, r8
 8012c98:	f003 fe80 	bl	801699c <uxr_receive_reliable_message>
 8012c9c:	b1d0      	cbz	r0, 8012cd4 <uxr_create_session+0x168>
 8012c9e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d038      	beq.n	8012d18 <uxr_create_session+0x1ac>
 8012ca6:	9e04      	ldr	r6, [sp, #16]
 8012ca8:	e00a      	b.n	8012cc0 <uxr_create_session+0x154>
 8012caa:	f04f 0302 	mov.w	r3, #2
 8012cae:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8012cb2:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8012cb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012cba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012cbc:	f7ff fb1e 	bl	80122fc <read_submessage_list>
 8012cc0:	a922      	add	r1, sp, #136	@ 0x88
 8012cc2:	2204      	movs	r2, #4
 8012cc4:	4640      	mov	r0, r8
 8012cc6:	f003 fee9 	bl	8016a9c <uxr_next_input_reliable_buffer_available>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	a922      	add	r1, sp, #136	@ 0x88
 8012cce:	4620      	mov	r0, r4
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d1ea      	bne.n	8012caa <uxr_create_session+0x13e>
 8012cd4:	9904      	ldr	r1, [sp, #16]
 8012cd6:	463a      	mov	r2, r7
 8012cd8:	4620      	mov	r0, r4
 8012cda:	f7ff f98b 	bl	8011ff4 <write_submessage_acknack.isra.0>
 8012cde:	e779      	b.n	8012bd4 <uxr_create_session+0x68>
 8012ce0:	4639      	mov	r1, r7
 8012ce2:	4650      	mov	r0, sl
 8012ce4:	f000 fa94 	bl	8013210 <uxr_get_input_best_effort_stream>
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	f43f af73 	beq.w	8012bd4 <uxr_create_session+0x68>
 8012cee:	4649      	mov	r1, r9
 8012cf0:	f003 fdc0 	bl	8016874 <uxr_receive_best_effort_message>
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	f43f af6d 	beq.w	8012bd4 <uxr_create_session+0x68>
 8012cfa:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8012cfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d00:	a91a      	add	r1, sp, #104	@ 0x68
 8012d02:	4620      	mov	r0, r4
 8012d04:	f7ff fafa 	bl	80122fc <read_submessage_list>
 8012d08:	e764      	b.n	8012bd4 <uxr_create_session+0x68>
 8012d0a:	4650      	mov	r0, sl
 8012d0c:	f000 f9d0 	bl	80130b0 <uxr_reset_stream_storage>
 8012d10:	2001      	movs	r0, #1
 8012d12:	b02b      	add	sp, #172	@ 0xac
 8012d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d18:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8012d1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d1e:	a91a      	add	r1, sp, #104	@ 0x68
 8012d20:	4620      	mov	r0, r4
 8012d22:	f7ff faeb 	bl	80122fc <read_submessage_list>
 8012d26:	e7be      	b.n	8012ca6 <uxr_create_session+0x13a>

08012d28 <uxr_prepare_stream_to_write_submessage>:
 8012d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d2c:	b082      	sub	sp, #8
 8012d2e:	4682      	mov	sl, r0
 8012d30:	4610      	mov	r0, r2
 8012d32:	4615      	mov	r5, r2
 8012d34:	461e      	mov	r6, r3
 8012d36:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8012d3a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8012d3e:	9101      	str	r1, [sp, #4]
 8012d40:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012d44:	f000 face 	bl	80132e4 <uxr_submessage_padding>
 8012d48:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d4c:	f105 0904 	add.w	r9, r5, #4
 8012d50:	2b01      	cmp	r3, #1
 8012d52:	4481      	add	r9, r0
 8012d54:	d01d      	beq.n	8012d92 <uxr_prepare_stream_to_write_submessage+0x6a>
 8012d56:	2b02      	cmp	r3, #2
 8012d58:	d116      	bne.n	8012d88 <uxr_prepare_stream_to_write_submessage+0x60>
 8012d5a:	4621      	mov	r1, r4
 8012d5c:	f10a 0008 	add.w	r0, sl, #8
 8012d60:	f000 fa4c 	bl	80131fc <uxr_get_output_reliable_stream>
 8012d64:	4604      	mov	r4, r0
 8012d66:	b158      	cbz	r0, 8012d80 <uxr_prepare_stream_to_write_submessage+0x58>
 8012d68:	4649      	mov	r1, r9
 8012d6a:	4632      	mov	r2, r6
 8012d6c:	f004 f852 	bl	8016e14 <uxr_prepare_reliable_buffer_to_write>
 8012d70:	4604      	mov	r4, r0
 8012d72:	b12c      	cbz	r4, 8012d80 <uxr_prepare_stream_to_write_submessage+0x58>
 8012d74:	4643      	mov	r3, r8
 8012d76:	b2aa      	uxth	r2, r5
 8012d78:	4639      	mov	r1, r7
 8012d7a:	4630      	mov	r0, r6
 8012d7c:	f000 fa72 	bl	8013264 <uxr_buffer_submessage_header>
 8012d80:	4620      	mov	r0, r4
 8012d82:	b002      	add	sp, #8
 8012d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d88:	2400      	movs	r4, #0
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	b002      	add	sp, #8
 8012d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d92:	4621      	mov	r1, r4
 8012d94:	f10a 0008 	add.w	r0, sl, #8
 8012d98:	f000 fa28 	bl	80131ec <uxr_get_output_best_effort_stream>
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	2800      	cmp	r0, #0
 8012da0:	d0ee      	beq.n	8012d80 <uxr_prepare_stream_to_write_submessage+0x58>
 8012da2:	4649      	mov	r1, r9
 8012da4:	4632      	mov	r2, r6
 8012da6:	f003 ff65 	bl	8016c74 <uxr_prepare_best_effort_buffer_to_write>
 8012daa:	4604      	mov	r4, r0
 8012dac:	e7e1      	b.n	8012d72 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012dae:	bf00      	nop

08012db0 <uxr_init_session_info>:
 8012db0:	0e13      	lsrs	r3, r2, #24
 8012db2:	7043      	strb	r3, [r0, #1]
 8012db4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8012db8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012dbc:	7001      	strb	r1, [r0, #0]
 8012dbe:	70c3      	strb	r3, [r0, #3]
 8012dc0:	2109      	movs	r1, #9
 8012dc2:	23ff      	movs	r3, #255	@ 0xff
 8012dc4:	f880 c002 	strb.w	ip, [r0, #2]
 8012dc8:	7102      	strb	r2, [r0, #4]
 8012dca:	80c1      	strh	r1, [r0, #6]
 8012dcc:	7143      	strb	r3, [r0, #5]
 8012dce:	4770      	bx	lr

08012dd0 <uxr_buffer_create_session>:
 8012dd0:	b530      	push	{r4, r5, lr}
 8012dd2:	b089      	sub	sp, #36	@ 0x24
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	4d12      	ldr	r5, [pc, #72]	@ (8012e20 <uxr_buffer_create_session+0x50>)
 8012dd8:	9307      	str	r3, [sp, #28]
 8012dda:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012dde:	2201      	movs	r2, #1
 8012de0:	9301      	str	r3, [sp, #4]
 8012de2:	80c2      	strh	r2, [r0, #6]
 8012de4:	f88d 2004 	strb.w	r2, [sp, #4]
 8012de8:	682a      	ldr	r2, [r5, #0]
 8012dea:	9200      	str	r2, [sp, #0]
 8012dec:	88aa      	ldrh	r2, [r5, #4]
 8012dee:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012df2:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8012df6:	9202      	str	r2, [sp, #8]
 8012df8:	460c      	mov	r4, r1
 8012dfa:	7802      	ldrb	r2, [r0, #0]
 8012dfc:	9303      	str	r3, [sp, #12]
 8012dfe:	4619      	mov	r1, r3
 8012e00:	f88d 200c 	strb.w	r2, [sp, #12]
 8012e04:	4620      	mov	r0, r4
 8012e06:	2210      	movs	r2, #16
 8012e08:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012e0c:	9306      	str	r3, [sp, #24]
 8012e0e:	f000 fa29 	bl	8013264 <uxr_buffer_submessage_header>
 8012e12:	4669      	mov	r1, sp
 8012e14:	4620      	mov	r0, r4
 8012e16:	f001 f981 	bl	801411c <uxr_serialize_CREATE_CLIENT_Payload>
 8012e1a:	b009      	add	sp, #36	@ 0x24
 8012e1c:	bd30      	pop	{r4, r5, pc}
 8012e1e:	bf00      	nop
 8012e20:	0801a090 	.word	0x0801a090

08012e24 <uxr_buffer_delete_session>:
 8012e24:	b510      	push	{r4, lr}
 8012e26:	4b0c      	ldr	r3, [pc, #48]	@ (8012e58 <uxr_buffer_delete_session+0x34>)
 8012e28:	b082      	sub	sp, #8
 8012e2a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8012e2e:	f8ad c006 	strh.w	ip, [sp, #6]
 8012e32:	460c      	mov	r4, r1
 8012e34:	2202      	movs	r2, #2
 8012e36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012e3a:	80c2      	strh	r2, [r0, #6]
 8012e3c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012e40:	2204      	movs	r2, #4
 8012e42:	2300      	movs	r3, #0
 8012e44:	2103      	movs	r1, #3
 8012e46:	4620      	mov	r0, r4
 8012e48:	f000 fa0c 	bl	8013264 <uxr_buffer_submessage_header>
 8012e4c:	a901      	add	r1, sp, #4
 8012e4e:	4620      	mov	r0, r4
 8012e50:	f001 fa0a 	bl	8014268 <uxr_serialize_DELETE_Payload>
 8012e54:	b002      	add	sp, #8
 8012e56:	bd10      	pop	{r4, pc}
 8012e58:	0801a090 	.word	0x0801a090

08012e5c <uxr_read_create_session_status>:
 8012e5c:	b510      	push	{r4, lr}
 8012e5e:	b088      	sub	sp, #32
 8012e60:	4604      	mov	r4, r0
 8012e62:	4608      	mov	r0, r1
 8012e64:	a901      	add	r1, sp, #4
 8012e66:	f001 fa0f 	bl	8014288 <uxr_deserialize_STATUS_AGENT_Payload>
 8012e6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012e6e:	7163      	strb	r3, [r4, #5]
 8012e70:	b008      	add	sp, #32
 8012e72:	bd10      	pop	{r4, pc}

08012e74 <uxr_read_delete_session_status>:
 8012e74:	b510      	push	{r4, lr}
 8012e76:	4604      	mov	r4, r0
 8012e78:	b084      	sub	sp, #16
 8012e7a:	4608      	mov	r0, r1
 8012e7c:	a902      	add	r1, sp, #8
 8012e7e:	f001 fa33 	bl	80142e8 <uxr_deserialize_STATUS_Payload>
 8012e82:	88e3      	ldrh	r3, [r4, #6]
 8012e84:	2b02      	cmp	r3, #2
 8012e86:	d001      	beq.n	8012e8c <uxr_read_delete_session_status+0x18>
 8012e88:	b004      	add	sp, #16
 8012e8a:	bd10      	pop	{r4, pc}
 8012e8c:	f10d 000a 	add.w	r0, sp, #10
 8012e90:	f7ff f836 	bl	8011f00 <uxr_object_id_from_raw>
 8012e94:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012e98:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012e9c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012ea0:	b29b      	uxth	r3, r3
 8012ea2:	2b02      	cmp	r3, #2
 8012ea4:	bf04      	itt	eq
 8012ea6:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8012eaa:	7163      	strbeq	r3, [r4, #5]
 8012eac:	b004      	add	sp, #16
 8012eae:	bd10      	pop	{r4, pc}

08012eb0 <uxr_stamp_create_session_header>:
 8012eb0:	b510      	push	{r4, lr}
 8012eb2:	2208      	movs	r2, #8
 8012eb4:	b08a      	sub	sp, #40	@ 0x28
 8012eb6:	4604      	mov	r4, r0
 8012eb8:	eb0d 0002 	add.w	r0, sp, r2
 8012ebc:	f7fe fe48 	bl	8011b50 <ucdr_init_buffer>
 8012ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ec4:	9400      	str	r4, [sp, #0]
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	461a      	mov	r2, r3
 8012eca:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8012ece:	a802      	add	r0, sp, #8
 8012ed0:	f000 fbc2 	bl	8013658 <uxr_serialize_message_header>
 8012ed4:	b00a      	add	sp, #40	@ 0x28
 8012ed6:	bd10      	pop	{r4, pc}

08012ed8 <uxr_stamp_session_header>:
 8012ed8:	b530      	push	{r4, r5, lr}
 8012eda:	b08d      	sub	sp, #52	@ 0x34
 8012edc:	4604      	mov	r4, r0
 8012ede:	460d      	mov	r5, r1
 8012ee0:	9203      	str	r2, [sp, #12]
 8012ee2:	4619      	mov	r1, r3
 8012ee4:	a804      	add	r0, sp, #16
 8012ee6:	2208      	movs	r2, #8
 8012ee8:	f7fe fe32 	bl	8011b50 <ucdr_init_buffer>
 8012eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ef0:	9b03      	ldr	r3, [sp, #12]
 8012ef2:	9400      	str	r4, [sp, #0]
 8012ef4:	462a      	mov	r2, r5
 8012ef6:	a804      	add	r0, sp, #16
 8012ef8:	f000 fbae 	bl	8013658 <uxr_serialize_message_header>
 8012efc:	b00d      	add	sp, #52	@ 0x34
 8012efe:	bd30      	pop	{r4, r5, pc}

08012f00 <uxr_read_session_header>:
 8012f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f04:	4607      	mov	r7, r0
 8012f06:	b084      	sub	sp, #16
 8012f08:	4608      	mov	r0, r1
 8012f0a:	460c      	mov	r4, r1
 8012f0c:	4615      	mov	r5, r2
 8012f0e:	461e      	mov	r6, r3
 8012f10:	f7fe fe4e 	bl	8011bb0 <ucdr_buffer_remaining>
 8012f14:	2808      	cmp	r0, #8
 8012f16:	d803      	bhi.n	8012f20 <uxr_read_session_header+0x20>
 8012f18:	2000      	movs	r0, #0
 8012f1a:	b004      	add	sp, #16
 8012f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f20:	f10d 080c 	add.w	r8, sp, #12
 8012f24:	4633      	mov	r3, r6
 8012f26:	462a      	mov	r2, r5
 8012f28:	f8cd 8000 	str.w	r8, [sp]
 8012f2c:	4620      	mov	r0, r4
 8012f2e:	f10d 010b 	add.w	r1, sp, #11
 8012f32:	f000 fbaf 	bl	8013694 <uxr_deserialize_message_header>
 8012f36:	783a      	ldrb	r2, [r7, #0]
 8012f38:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012f3c:	4293      	cmp	r3, r2
 8012f3e:	d1eb      	bne.n	8012f18 <uxr_read_session_header+0x18>
 8012f40:	061b      	lsls	r3, r3, #24
 8012f42:	d41c      	bmi.n	8012f7e <uxr_read_session_header+0x7e>
 8012f44:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012f48:	787b      	ldrb	r3, [r7, #1]
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d003      	beq.n	8012f56 <uxr_read_session_header+0x56>
 8012f4e:	2001      	movs	r0, #1
 8012f50:	f080 0001 	eor.w	r0, r0, #1
 8012f54:	e7e1      	b.n	8012f1a <uxr_read_session_header+0x1a>
 8012f56:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8012f5a:	78bb      	ldrb	r3, [r7, #2]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	f107 0102 	add.w	r1, r7, #2
 8012f62:	d1f4      	bne.n	8012f4e <uxr_read_session_header+0x4e>
 8012f64:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012f68:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d1ee      	bne.n	8012f4e <uxr_read_session_header+0x4e>
 8012f70:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012f74:	784b      	ldrb	r3, [r1, #1]
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d1e9      	bne.n	8012f4e <uxr_read_session_header+0x4e>
 8012f7a:	2000      	movs	r0, #0
 8012f7c:	e7e8      	b.n	8012f50 <uxr_read_session_header+0x50>
 8012f7e:	2001      	movs	r0, #1
 8012f80:	e7cb      	b.n	8012f1a <uxr_read_session_header+0x1a>
 8012f82:	bf00      	nop

08012f84 <uxr_session_header_offset>:
 8012f84:	f990 3000 	ldrsb.w	r3, [r0]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	bfac      	ite	ge
 8012f8c:	2008      	movge	r0, #8
 8012f8e:	2004      	movlt	r0, #4
 8012f90:	4770      	bx	lr
 8012f92:	bf00      	nop

08012f94 <uxr_init_base_object_request>:
 8012f94:	b510      	push	{r4, lr}
 8012f96:	88c3      	ldrh	r3, [r0, #6]
 8012f98:	b082      	sub	sp, #8
 8012f9a:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8012f9e:	9101      	str	r1, [sp, #4]
 8012fa0:	f1a3 010a 	sub.w	r1, r3, #10
 8012fa4:	b289      	uxth	r1, r1
 8012fa6:	42a1      	cmp	r1, r4
 8012fa8:	d80e      	bhi.n	8012fc8 <uxr_init_base_object_request+0x34>
 8012faa:	3301      	adds	r3, #1
 8012fac:	b29c      	uxth	r4, r3
 8012fae:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012fb2:	b2db      	uxtb	r3, r3
 8012fb4:	80c4      	strh	r4, [r0, #6]
 8012fb6:	9801      	ldr	r0, [sp, #4]
 8012fb8:	7011      	strb	r1, [r2, #0]
 8012fba:	7053      	strb	r3, [r2, #1]
 8012fbc:	1c91      	adds	r1, r2, #2
 8012fbe:	f7fe ffb3 	bl	8011f28 <uxr_object_id_to_raw>
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	b002      	add	sp, #8
 8012fc6:	bd10      	pop	{r4, pc}
 8012fc8:	230a      	movs	r3, #10
 8012fca:	2100      	movs	r1, #0
 8012fcc:	461c      	mov	r4, r3
 8012fce:	e7f1      	b.n	8012fb4 <uxr_init_base_object_request+0x20>

08012fd0 <uxr_parse_base_object_request>:
 8012fd0:	b570      	push	{r4, r5, r6, lr}
 8012fd2:	4604      	mov	r4, r0
 8012fd4:	3002      	adds	r0, #2
 8012fd6:	460d      	mov	r5, r1
 8012fd8:	4616      	mov	r6, r2
 8012fda:	f7fe ff91 	bl	8011f00 <uxr_object_id_from_raw>
 8012fde:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012fe2:	8028      	strh	r0, [r5, #0]
 8012fe4:	806b      	strh	r3, [r5, #2]
 8012fe6:	7822      	ldrb	r2, [r4, #0]
 8012fe8:	7863      	ldrb	r3, [r4, #1]
 8012fea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012fee:	8033      	strh	r3, [r6, #0]
 8012ff0:	bd70      	pop	{r4, r5, r6, pc}
 8012ff2:	bf00      	nop

08012ff4 <uxr_stream_id>:
 8012ff4:	2901      	cmp	r1, #1
 8012ff6:	b082      	sub	sp, #8
 8012ff8:	d01d      	beq.n	8013036 <uxr_stream_id+0x42>
 8012ffa:	2902      	cmp	r1, #2
 8012ffc:	f04f 0c00 	mov.w	ip, #0
 8013000:	d01e      	beq.n	8013040 <uxr_stream_id+0x4c>
 8013002:	2300      	movs	r3, #0
 8013004:	f36c 0307 	bfi	r3, ip, #0, #8
 8013008:	f360 230f 	bfi	r3, r0, #8, #8
 801300c:	f361 4317 	bfi	r3, r1, #16, #8
 8013010:	f362 631f 	bfi	r3, r2, #24, #8
 8013014:	b2da      	uxtb	r2, r3
 8013016:	2000      	movs	r0, #0
 8013018:	f362 0007 	bfi	r0, r2, #0, #8
 801301c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013020:	f362 200f 	bfi	r0, r2, #8, #8
 8013024:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013028:	f362 4017 	bfi	r0, r2, #16, #8
 801302c:	0e1b      	lsrs	r3, r3, #24
 801302e:	f363 601f 	bfi	r0, r3, #24, #8
 8013032:	b002      	add	sp, #8
 8013034:	4770      	bx	lr
 8013036:	f100 0c01 	add.w	ip, r0, #1
 801303a:	fa5f fc8c 	uxtb.w	ip, ip
 801303e:	e7e0      	b.n	8013002 <uxr_stream_id+0xe>
 8013040:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8013044:	e7dd      	b.n	8013002 <uxr_stream_id+0xe>
 8013046:	bf00      	nop

08013048 <uxr_stream_id_from_raw>:
 8013048:	b082      	sub	sp, #8
 801304a:	b130      	cbz	r0, 801305a <uxr_stream_id_from_raw+0x12>
 801304c:	0603      	lsls	r3, r0, #24
 801304e:	d420      	bmi.n	8013092 <uxr_stream_id_from_raw+0x4a>
 8013050:	1e42      	subs	r2, r0, #1
 8013052:	b2d2      	uxtb	r2, r2
 8013054:	f04f 0c01 	mov.w	ip, #1
 8013058:	e001      	b.n	801305e <uxr_stream_id_from_raw+0x16>
 801305a:	4684      	mov	ip, r0
 801305c:	4602      	mov	r2, r0
 801305e:	2300      	movs	r3, #0
 8013060:	f360 0307 	bfi	r3, r0, #0, #8
 8013064:	f362 230f 	bfi	r3, r2, #8, #8
 8013068:	f36c 4317 	bfi	r3, ip, #16, #8
 801306c:	f361 631f 	bfi	r3, r1, #24, #8
 8013070:	b2da      	uxtb	r2, r3
 8013072:	2000      	movs	r0, #0
 8013074:	f362 0007 	bfi	r0, r2, #0, #8
 8013078:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801307c:	f362 200f 	bfi	r0, r2, #8, #8
 8013080:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013084:	f362 4017 	bfi	r0, r2, #16, #8
 8013088:	0e1b      	lsrs	r3, r3, #24
 801308a:	f363 601f 	bfi	r0, r3, #24, #8
 801308e:	b002      	add	sp, #8
 8013090:	4770      	bx	lr
 8013092:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8013096:	f04f 0c02 	mov.w	ip, #2
 801309a:	e7e0      	b.n	801305e <uxr_stream_id_from_raw+0x16>

0801309c <uxr_init_stream_storage>:
 801309c:	2300      	movs	r3, #0
 801309e:	7403      	strb	r3, [r0, #16]
 80130a0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80130a4:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80130a8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80130ac:	4770      	bx	lr
 80130ae:	bf00      	nop

080130b0 <uxr_reset_stream_storage>:
 80130b0:	b570      	push	{r4, r5, r6, lr}
 80130b2:	7c03      	ldrb	r3, [r0, #16]
 80130b4:	4604      	mov	r4, r0
 80130b6:	b153      	cbz	r3, 80130ce <uxr_reset_stream_storage+0x1e>
 80130b8:	4606      	mov	r6, r0
 80130ba:	2500      	movs	r5, #0
 80130bc:	4630      	mov	r0, r6
 80130be:	f003 fdd3 	bl	8016c68 <uxr_reset_output_best_effort_stream>
 80130c2:	7c23      	ldrb	r3, [r4, #16]
 80130c4:	3501      	adds	r5, #1
 80130c6:	42ab      	cmp	r3, r5
 80130c8:	f106 0610 	add.w	r6, r6, #16
 80130cc:	d8f6      	bhi.n	80130bc <uxr_reset_stream_storage+0xc>
 80130ce:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80130d2:	b163      	cbz	r3, 80130ee <uxr_reset_stream_storage+0x3e>
 80130d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80130d8:	2500      	movs	r5, #0
 80130da:	4630      	mov	r0, r6
 80130dc:	f003 fbc6 	bl	801686c <uxr_reset_input_best_effort_stream>
 80130e0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80130e4:	3501      	adds	r5, #1
 80130e6:	42ab      	cmp	r3, r5
 80130e8:	f106 0602 	add.w	r6, r6, #2
 80130ec:	d8f5      	bhi.n	80130da <uxr_reset_stream_storage+0x2a>
 80130ee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80130f2:	b163      	cbz	r3, 801310e <uxr_reset_stream_storage+0x5e>
 80130f4:	f104 0618 	add.w	r6, r4, #24
 80130f8:	2500      	movs	r5, #0
 80130fa:	4630      	mov	r0, r6
 80130fc:	f003 fe60 	bl	8016dc0 <uxr_reset_output_reliable_stream>
 8013100:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013104:	3501      	adds	r5, #1
 8013106:	42ab      	cmp	r3, r5
 8013108:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 801310c:	d8f5      	bhi.n	80130fa <uxr_reset_stream_storage+0x4a>
 801310e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013112:	b163      	cbz	r3, 801312e <uxr_reset_stream_storage+0x7e>
 8013114:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8013118:	2500      	movs	r5, #0
 801311a:	4630      	mov	r0, r6
 801311c:	f003 fc1a 	bl	8016954 <uxr_reset_input_reliable_stream>
 8013120:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013124:	3501      	adds	r5, #1
 8013126:	42ab      	cmp	r3, r5
 8013128:	f106 0618 	add.w	r6, r6, #24
 801312c:	d8f5      	bhi.n	801311a <uxr_reset_stream_storage+0x6a>
 801312e:	bd70      	pop	{r4, r5, r6, pc}

08013130 <uxr_add_output_best_effort_buffer>:
 8013130:	b510      	push	{r4, lr}
 8013132:	7c04      	ldrb	r4, [r0, #16]
 8013134:	f104 0c01 	add.w	ip, r4, #1
 8013138:	b082      	sub	sp, #8
 801313a:	f880 c010 	strb.w	ip, [r0, #16]
 801313e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013142:	f003 fd87 	bl	8016c54 <uxr_init_output_best_effort_stream>
 8013146:	2201      	movs	r2, #1
 8013148:	4611      	mov	r1, r2
 801314a:	4620      	mov	r0, r4
 801314c:	b002      	add	sp, #8
 801314e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013152:	f7ff bf4f 	b.w	8012ff4 <uxr_stream_id>
 8013156:	bf00      	nop

08013158 <uxr_add_output_reliable_buffer>:
 8013158:	b510      	push	{r4, lr}
 801315a:	b084      	sub	sp, #16
 801315c:	4684      	mov	ip, r0
 801315e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013162:	9000      	str	r0, [sp, #0]
 8013164:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8013168:	2028      	movs	r0, #40	@ 0x28
 801316a:	fb00 c004 	mla	r0, r0, r4, ip
 801316e:	f104 0e01 	add.w	lr, r4, #1
 8013172:	3018      	adds	r0, #24
 8013174:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8013178:	f003 fdea 	bl	8016d50 <uxr_init_output_reliable_stream>
 801317c:	2201      	movs	r2, #1
 801317e:	2102      	movs	r1, #2
 8013180:	4620      	mov	r0, r4
 8013182:	b004      	add	sp, #16
 8013184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013188:	f7ff bf34 	b.w	8012ff4 <uxr_stream_id>

0801318c <uxr_add_input_best_effort_buffer>:
 801318c:	b510      	push	{r4, lr}
 801318e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8013192:	4603      	mov	r3, r0
 8013194:	1c62      	adds	r2, r4, #1
 8013196:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801319a:	b082      	sub	sp, #8
 801319c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80131a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80131a4:	f003 fb5e 	bl	8016864 <uxr_init_input_best_effort_stream>
 80131a8:	2200      	movs	r2, #0
 80131aa:	2101      	movs	r1, #1
 80131ac:	4620      	mov	r0, r4
 80131ae:	b002      	add	sp, #8
 80131b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131b4:	f7ff bf1e 	b.w	8012ff4 <uxr_stream_id>

080131b8 <uxr_add_input_reliable_buffer>:
 80131b8:	b510      	push	{r4, lr}
 80131ba:	b084      	sub	sp, #16
 80131bc:	4684      	mov	ip, r0
 80131be:	9806      	ldr	r0, [sp, #24]
 80131c0:	9000      	str	r0, [sp, #0]
 80131c2:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80131c6:	2018      	movs	r0, #24
 80131c8:	fb00 c004 	mla	r0, r0, r4, ip
 80131cc:	f104 0e01 	add.w	lr, r4, #1
 80131d0:	3048      	adds	r0, #72	@ 0x48
 80131d2:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80131d6:	f003 fb91 	bl	80168fc <uxr_init_input_reliable_stream>
 80131da:	2200      	movs	r2, #0
 80131dc:	2102      	movs	r1, #2
 80131de:	4620      	mov	r0, r4
 80131e0:	b004      	add	sp, #16
 80131e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131e6:	f7ff bf05 	b.w	8012ff4 <uxr_stream_id>
 80131ea:	bf00      	nop

080131ec <uxr_get_output_best_effort_stream>:
 80131ec:	7c03      	ldrb	r3, [r0, #16]
 80131ee:	428b      	cmp	r3, r1
 80131f0:	bf8c      	ite	hi
 80131f2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80131f6:	2000      	movls	r0, #0
 80131f8:	4770      	bx	lr
 80131fa:	bf00      	nop

080131fc <uxr_get_output_reliable_stream>:
 80131fc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013200:	428b      	cmp	r3, r1
 8013202:	bf83      	ittte	hi
 8013204:	2328      	movhi	r3, #40	@ 0x28
 8013206:	fb03 0001 	mlahi	r0, r3, r1, r0
 801320a:	3018      	addhi	r0, #24
 801320c:	2000      	movls	r0, #0
 801320e:	4770      	bx	lr

08013210 <uxr_get_input_best_effort_stream>:
 8013210:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8013214:	428b      	cmp	r3, r1
 8013216:	bf86      	itte	hi
 8013218:	3121      	addhi	r1, #33	@ 0x21
 801321a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801321e:	2000      	movls	r0, #0
 8013220:	4770      	bx	lr
 8013222:	bf00      	nop

08013224 <uxr_get_input_reliable_stream>:
 8013224:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8013228:	428b      	cmp	r3, r1
 801322a:	bf83      	ittte	hi
 801322c:	2318      	movhi	r3, #24
 801322e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013232:	3048      	addhi	r0, #72	@ 0x48
 8013234:	2000      	movls	r0, #0
 8013236:	4770      	bx	lr

08013238 <uxr_output_streams_confirmed>:
 8013238:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801323c:	b183      	cbz	r3, 8013260 <uxr_output_streams_confirmed+0x28>
 801323e:	b570      	push	{r4, r5, r6, lr}
 8013240:	4606      	mov	r6, r0
 8013242:	f100 0518 	add.w	r5, r0, #24
 8013246:	2400      	movs	r4, #0
 8013248:	e001      	b.n	801324e <uxr_output_streams_confirmed+0x16>
 801324a:	3528      	adds	r5, #40	@ 0x28
 801324c:	b138      	cbz	r0, 801325e <uxr_output_streams_confirmed+0x26>
 801324e:	4628      	mov	r0, r5
 8013250:	f004 f826 	bl	80172a0 <uxr_is_output_up_to_date>
 8013254:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8013258:	3401      	adds	r4, #1
 801325a:	42a3      	cmp	r3, r4
 801325c:	d8f5      	bhi.n	801324a <uxr_output_streams_confirmed+0x12>
 801325e:	bd70      	pop	{r4, r5, r6, pc}
 8013260:	2001      	movs	r0, #1
 8013262:	4770      	bx	lr

08013264 <uxr_buffer_submessage_header>:
 8013264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013266:	4604      	mov	r4, r0
 8013268:	460e      	mov	r6, r1
 801326a:	2104      	movs	r1, #4
 801326c:	4615      	mov	r5, r2
 801326e:	461f      	mov	r7, r3
 8013270:	f7fe fc88 	bl	8011b84 <ucdr_align_to>
 8013274:	2301      	movs	r3, #1
 8013276:	ea47 0203 	orr.w	r2, r7, r3
 801327a:	4631      	mov	r1, r6
 801327c:	7523      	strb	r3, [r4, #20]
 801327e:	4620      	mov	r0, r4
 8013280:	462b      	mov	r3, r5
 8013282:	f000 fa27 	bl	80136d4 <uxr_serialize_submessage_header>
 8013286:	4620      	mov	r0, r4
 8013288:	f7fe fc92 	bl	8011bb0 <ucdr_buffer_remaining>
 801328c:	42a8      	cmp	r0, r5
 801328e:	bf34      	ite	cc
 8013290:	2000      	movcc	r0, #0
 8013292:	2001      	movcs	r0, #1
 8013294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013296:	bf00      	nop

08013298 <uxr_read_submessage_header>:
 8013298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801329c:	4604      	mov	r4, r0
 801329e:	460d      	mov	r5, r1
 80132a0:	2104      	movs	r1, #4
 80132a2:	4616      	mov	r6, r2
 80132a4:	4698      	mov	r8, r3
 80132a6:	f7fe fc6d 	bl	8011b84 <ucdr_align_to>
 80132aa:	4620      	mov	r0, r4
 80132ac:	f7fe fc80 	bl	8011bb0 <ucdr_buffer_remaining>
 80132b0:	2803      	cmp	r0, #3
 80132b2:	bf8c      	ite	hi
 80132b4:	2701      	movhi	r7, #1
 80132b6:	2700      	movls	r7, #0
 80132b8:	d802      	bhi.n	80132c0 <uxr_read_submessage_header+0x28>
 80132ba:	4638      	mov	r0, r7
 80132bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132c0:	4633      	mov	r3, r6
 80132c2:	4642      	mov	r2, r8
 80132c4:	4620      	mov	r0, r4
 80132c6:	4629      	mov	r1, r5
 80132c8:	f000 fa18 	bl	80136fc <uxr_deserialize_submessage_header>
 80132cc:	f898 3000 	ldrb.w	r3, [r8]
 80132d0:	f003 0201 	and.w	r2, r3, #1
 80132d4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80132d8:	f888 3000 	strb.w	r3, [r8]
 80132dc:	7522      	strb	r2, [r4, #20]
 80132de:	4638      	mov	r0, r7
 80132e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132e4 <uxr_submessage_padding>:
 80132e4:	f010 0003 	ands.w	r0, r0, #3
 80132e8:	bf18      	it	ne
 80132ea:	f1c0 0004 	rsbne	r0, r0, #4
 80132ee:	4770      	bx	lr

080132f0 <uxr_millis>:
 80132f0:	b510      	push	{r4, lr}
 80132f2:	b084      	sub	sp, #16
 80132f4:	4669      	mov	r1, sp
 80132f6:	2001      	movs	r0, #1
 80132f8:	f7ee fa96 	bl	8001828 <clock_gettime>
 80132fc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8013300:	4906      	ldr	r1, [pc, #24]	@ (801331c <uxr_millis+0x2c>)
 8013302:	fba0 0301 	umull	r0, r3, r0, r1
 8013306:	1900      	adds	r0, r0, r4
 8013308:	fb01 3102 	mla	r1, r1, r2, r3
 801330c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8013310:	4a03      	ldr	r2, [pc, #12]	@ (8013320 <uxr_millis+0x30>)
 8013312:	2300      	movs	r3, #0
 8013314:	f7ec ffc4 	bl	80002a0 <__aeabi_ldivmod>
 8013318:	b004      	add	sp, #16
 801331a:	bd10      	pop	{r4, pc}
 801331c:	3b9aca00 	.word	0x3b9aca00
 8013320:	000f4240 	.word	0x000f4240

08013324 <uxr_nanos>:
 8013324:	b510      	push	{r4, lr}
 8013326:	b084      	sub	sp, #16
 8013328:	4669      	mov	r1, sp
 801332a:	2001      	movs	r0, #1
 801332c:	f7ee fa7c 	bl	8001828 <clock_gettime>
 8013330:	4a06      	ldr	r2, [pc, #24]	@ (801334c <uxr_nanos+0x28>)
 8013332:	9800      	ldr	r0, [sp, #0]
 8013334:	9902      	ldr	r1, [sp, #8]
 8013336:	9c01      	ldr	r4, [sp, #4]
 8013338:	fba0 0302 	umull	r0, r3, r0, r2
 801333c:	1840      	adds	r0, r0, r1
 801333e:	fb02 3304 	mla	r3, r2, r4, r3
 8013342:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013346:	b004      	add	sp, #16
 8013348:	bd10      	pop	{r4, pc}
 801334a:	bf00      	nop
 801334c:	3b9aca00 	.word	0x3b9aca00

08013350 <on_full_output_buffer_fragmented>:
 8013350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013354:	460c      	mov	r4, r1
 8013356:	b08a      	sub	sp, #40	@ 0x28
 8013358:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801335c:	4606      	mov	r6, r0
 801335e:	f104 0008 	add.w	r0, r4, #8
 8013362:	f7ff ff4b 	bl	80131fc <uxr_get_output_reliable_stream>
 8013366:	4605      	mov	r5, r0
 8013368:	f003 ffa4 	bl	80172b4 <get_available_free_slots>
 801336c:	b968      	cbnz	r0, 801338a <on_full_output_buffer_fragmented+0x3a>
 801336e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8013372:	4620      	mov	r0, r4
 8013374:	4798      	blx	r3
 8013376:	b918      	cbnz	r0, 8013380 <on_full_output_buffer_fragmented+0x30>
 8013378:	2001      	movs	r0, #1
 801337a:	b00a      	add	sp, #40	@ 0x28
 801337c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013380:	4628      	mov	r0, r5
 8013382:	f003 ff97 	bl	80172b4 <get_available_free_slots>
 8013386:	2800      	cmp	r0, #0
 8013388:	d0f6      	beq.n	8013378 <on_full_output_buffer_fragmented+0x28>
 801338a:	8929      	ldrh	r1, [r5, #8]
 801338c:	89eb      	ldrh	r3, [r5, #14]
 801338e:	7b28      	ldrb	r0, [r5, #12]
 8013390:	686a      	ldr	r2, [r5, #4]
 8013392:	fbb2 f8f1 	udiv	r8, r2, r1
 8013396:	fbb3 f2f1 	udiv	r2, r3, r1
 801339a:	fb01 3112 	mls	r1, r1, r2, r3
 801339e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 80133a2:	b289      	uxth	r1, r1
 80133a4:	fb08 f101 	mul.w	r1, r8, r1
 80133a8:	30fc      	adds	r0, #252	@ 0xfc
 80133aa:	f1a8 0804 	sub.w	r8, r8, #4
 80133ae:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80133b2:	4440      	add	r0, r8
 80133b4:	b287      	uxth	r7, r0
 80133b6:	1bdb      	subs	r3, r3, r7
 80133b8:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80133bc:	682b      	ldr	r3, [r5, #0]
 80133be:	3104      	adds	r1, #4
 80133c0:	4419      	add	r1, r3
 80133c2:	4642      	mov	r2, r8
 80133c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80133c8:	9300      	str	r3, [sp, #0]
 80133ca:	a802      	add	r0, sp, #8
 80133cc:	2300      	movs	r3, #0
 80133ce:	f7fe fbad 	bl	8011b2c <ucdr_init_buffer_origin_offset>
 80133d2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80133d6:	f102 0308 	add.w	r3, r2, #8
 80133da:	4543      	cmp	r3, r8
 80133dc:	d928      	bls.n	8013430 <on_full_output_buffer_fragmented+0xe0>
 80133de:	463a      	mov	r2, r7
 80133e0:	2300      	movs	r3, #0
 80133e2:	210d      	movs	r1, #13
 80133e4:	a802      	add	r0, sp, #8
 80133e6:	f7ff ff3d 	bl	8013264 <uxr_buffer_submessage_header>
 80133ea:	8929      	ldrh	r1, [r5, #8]
 80133ec:	89eb      	ldrh	r3, [r5, #14]
 80133ee:	fbb3 f2f1 	udiv	r2, r3, r1
 80133f2:	fb01 3312 	mls	r3, r1, r2, r3
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	686a      	ldr	r2, [r5, #4]
 80133fa:	fbb2 f2f1 	udiv	r2, r2, r1
 80133fe:	fb02 f303 	mul.w	r3, r2, r3
 8013402:	682a      	ldr	r2, [r5, #0]
 8013404:	f842 8003 	str.w	r8, [r2, r3]
 8013408:	89e8      	ldrh	r0, [r5, #14]
 801340a:	2101      	movs	r1, #1
 801340c:	f004 f868 	bl	80174e0 <uxr_seq_num_add>
 8013410:	9904      	ldr	r1, [sp, #16]
 8013412:	9a03      	ldr	r2, [sp, #12]
 8013414:	81e8      	strh	r0, [r5, #14]
 8013416:	1a52      	subs	r2, r2, r1
 8013418:	4630      	mov	r0, r6
 801341a:	f7fe fb99 	bl	8011b50 <ucdr_init_buffer>
 801341e:	4630      	mov	r0, r6
 8013420:	490f      	ldr	r1, [pc, #60]	@ (8013460 <on_full_output_buffer_fragmented+0x110>)
 8013422:	4622      	mov	r2, r4
 8013424:	f7fe fb68 	bl	8011af8 <ucdr_set_on_full_buffer_callback>
 8013428:	2000      	movs	r0, #0
 801342a:	b00a      	add	sp, #40	@ 0x28
 801342c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013430:	b292      	uxth	r2, r2
 8013432:	2302      	movs	r3, #2
 8013434:	210d      	movs	r1, #13
 8013436:	a802      	add	r0, sp, #8
 8013438:	f7ff ff14 	bl	8013264 <uxr_buffer_submessage_header>
 801343c:	8928      	ldrh	r0, [r5, #8]
 801343e:	89eb      	ldrh	r3, [r5, #14]
 8013440:	fbb3 f1f0 	udiv	r1, r3, r0
 8013444:	fb00 3311 	mls	r3, r0, r1, r3
 8013448:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801344c:	6869      	ldr	r1, [r5, #4]
 801344e:	fbb1 f1f0 	udiv	r1, r1, r0
 8013452:	b29b      	uxth	r3, r3
 8013454:	fb01 f303 	mul.w	r3, r1, r3
 8013458:	6829      	ldr	r1, [r5, #0]
 801345a:	3208      	adds	r2, #8
 801345c:	50ca      	str	r2, [r1, r3]
 801345e:	e7d3      	b.n	8013408 <on_full_output_buffer_fragmented+0xb8>
 8013460:	08013351 	.word	0x08013351

08013464 <uxr_prepare_output_stream>:
 8013464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013466:	b087      	sub	sp, #28
 8013468:	2707      	movs	r7, #7
 801346a:	9202      	str	r2, [sp, #8]
 801346c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801346e:	9103      	str	r1, [sp, #12]
 8013470:	2500      	movs	r5, #0
 8013472:	3204      	adds	r2, #4
 8013474:	e9cd 7500 	strd	r7, r5, [sp]
 8013478:	461c      	mov	r4, r3
 801347a:	4606      	mov	r6, r0
 801347c:	f7ff fc54 	bl	8012d28 <uxr_prepare_stream_to_write_submessage>
 8013480:	f080 0201 	eor.w	r2, r0, #1
 8013484:	b2d2      	uxtb	r2, r2
 8013486:	75a2      	strb	r2, [r4, #22]
 8013488:	b112      	cbz	r2, 8013490 <uxr_prepare_output_stream+0x2c>
 801348a:	4628      	mov	r0, r5
 801348c:	b007      	add	sp, #28
 801348e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013490:	aa05      	add	r2, sp, #20
 8013492:	9902      	ldr	r1, [sp, #8]
 8013494:	4630      	mov	r0, r6
 8013496:	f7ff fd7d 	bl	8012f94 <uxr_init_base_object_request>
 801349a:	a905      	add	r1, sp, #20
 801349c:	4605      	mov	r5, r0
 801349e:	4620      	mov	r0, r4
 80134a0:	f000 ffa0 	bl	80143e4 <uxr_serialize_WRITE_DATA_Payload_Data>
 80134a4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80134a8:	69a6      	ldr	r6, [r4, #24]
 80134aa:	69e7      	ldr	r7, [r4, #28]
 80134ac:	1a52      	subs	r2, r2, r1
 80134ae:	4620      	mov	r0, r4
 80134b0:	f7fe fb4e 	bl	8011b50 <ucdr_init_buffer>
 80134b4:	4620      	mov	r0, r4
 80134b6:	463a      	mov	r2, r7
 80134b8:	4631      	mov	r1, r6
 80134ba:	f7fe fb1d 	bl	8011af8 <ucdr_set_on_full_buffer_callback>
 80134be:	4628      	mov	r0, r5
 80134c0:	b007      	add	sp, #28
 80134c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080134c4 <uxr_prepare_output_stream_fragmented>:
 80134c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134c8:	b091      	sub	sp, #68	@ 0x44
 80134ca:	4605      	mov	r5, r0
 80134cc:	9105      	str	r1, [sp, #20]
 80134ce:	3008      	adds	r0, #8
 80134d0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80134d4:	461e      	mov	r6, r3
 80134d6:	9204      	str	r2, [sp, #16]
 80134d8:	f7ff fe90 	bl	80131fc <uxr_get_output_reliable_stream>
 80134dc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80134e0:	2b01      	cmp	r3, #1
 80134e2:	f000 8091 	beq.w	8013608 <uxr_prepare_output_stream_fragmented+0x144>
 80134e6:	4604      	mov	r4, r0
 80134e8:	2800      	cmp	r0, #0
 80134ea:	f000 808d 	beq.w	8013608 <uxr_prepare_output_stream_fragmented+0x144>
 80134ee:	f003 fee1 	bl	80172b4 <get_available_free_slots>
 80134f2:	2800      	cmp	r0, #0
 80134f4:	f000 8083 	beq.w	80135fe <uxr_prepare_output_stream_fragmented+0x13a>
 80134f8:	8922      	ldrh	r2, [r4, #8]
 80134fa:	89e7      	ldrh	r7, [r4, #14]
 80134fc:	fbb7 f9f2 	udiv	r9, r7, r2
 8013500:	fb02 7919 	mls	r9, r2, r9, r7
 8013504:	fa1f f989 	uxth.w	r9, r9
 8013508:	6863      	ldr	r3, [r4, #4]
 801350a:	fbb3 f2f2 	udiv	r2, r3, r2
 801350e:	6823      	ldr	r3, [r4, #0]
 8013510:	9203      	str	r2, [sp, #12]
 8013512:	fb02 f909 	mul.w	r9, r2, r9
 8013516:	f109 0904 	add.w	r9, r9, #4
 801351a:	4499      	add	r9, r3
 801351c:	7b23      	ldrb	r3, [r4, #12]
 801351e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013522:	4543      	cmp	r3, r8
 8013524:	f1a2 0b04 	sub.w	fp, r2, #4
 8013528:	d37a      	bcc.n	8013620 <uxr_prepare_output_stream_fragmented+0x15c>
 801352a:	f1ab 0a04 	sub.w	sl, fp, #4
 801352e:	ebaa 0a03 	sub.w	sl, sl, r3
 8013532:	465a      	mov	r2, fp
 8013534:	2300      	movs	r3, #0
 8013536:	4649      	mov	r1, r9
 8013538:	a808      	add	r0, sp, #32
 801353a:	f8cd 8000 	str.w	r8, [sp]
 801353e:	f7fe faf5 	bl	8011b2c <ucdr_init_buffer_origin_offset>
 8013542:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013544:	fa1f fa8a 	uxth.w	sl, sl
 8013548:	4652      	mov	r2, sl
 801354a:	f103 0a08 	add.w	sl, r3, #8
 801354e:	45da      	cmp	sl, fp
 8013550:	bf34      	ite	cc
 8013552:	2302      	movcc	r3, #2
 8013554:	2300      	movcs	r3, #0
 8013556:	210d      	movs	r1, #13
 8013558:	a808      	add	r0, sp, #32
 801355a:	f7ff fe83 	bl	8013264 <uxr_buffer_submessage_header>
 801355e:	8921      	ldrh	r1, [r4, #8]
 8013560:	fbb7 f2f1 	udiv	r2, r7, r1
 8013564:	fb01 7212 	mls	r2, r1, r2, r7
 8013568:	b292      	uxth	r2, r2
 801356a:	6863      	ldr	r3, [r4, #4]
 801356c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013570:	fb02 f303 	mul.w	r3, r2, r3
 8013574:	6822      	ldr	r2, [r4, #0]
 8013576:	4638      	mov	r0, r7
 8013578:	f842 b003 	str.w	fp, [r2, r3]
 801357c:	2101      	movs	r1, #1
 801357e:	f003 ffaf 	bl	80174e0 <uxr_seq_num_add>
 8013582:	9b03      	ldr	r3, [sp, #12]
 8013584:	f108 0104 	add.w	r1, r8, #4
 8013588:	f1a3 0208 	sub.w	r2, r3, #8
 801358c:	eba2 0208 	sub.w	r2, r2, r8
 8013590:	4449      	add	r1, r9
 8013592:	4607      	mov	r7, r0
 8013594:	4630      	mov	r0, r6
 8013596:	f7fe fadb 	bl	8011b50 <ucdr_init_buffer>
 801359a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801359c:	81e7      	strh	r7, [r4, #14]
 801359e:	1d1a      	adds	r2, r3, #4
 80135a0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80135a4:	bf28      	it	cs
 80135a6:	2200      	movcs	r2, #0
 80135a8:	2300      	movs	r3, #0
 80135aa:	b292      	uxth	r2, r2
 80135ac:	2107      	movs	r1, #7
 80135ae:	4630      	mov	r0, r6
 80135b0:	f7ff fe58 	bl	8013264 <uxr_buffer_submessage_header>
 80135b4:	9904      	ldr	r1, [sp, #16]
 80135b6:	aa07      	add	r2, sp, #28
 80135b8:	4628      	mov	r0, r5
 80135ba:	f7ff fceb 	bl	8012f94 <uxr_init_base_object_request>
 80135be:	4604      	mov	r4, r0
 80135c0:	b318      	cbz	r0, 801360a <uxr_prepare_output_stream_fragmented+0x146>
 80135c2:	a907      	add	r1, sp, #28
 80135c4:	4630      	mov	r0, r6
 80135c6:	f000 ff0d 	bl	80143e4 <uxr_serialize_WRITE_DATA_Payload_Data>
 80135ca:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80135ce:	4630      	mov	r0, r6
 80135d0:	1a52      	subs	r2, r2, r1
 80135d2:	f7fe fabd 	bl	8011b50 <ucdr_init_buffer>
 80135d6:	9b05      	ldr	r3, [sp, #20]
 80135d8:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80135dc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80135de:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80135e2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80135e4:	491b      	ldr	r1, [pc, #108]	@ (8013654 <uxr_prepare_output_stream_fragmented+0x190>)
 80135e6:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80135ea:	4630      	mov	r0, r6
 80135ec:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80135f0:	462a      	mov	r2, r5
 80135f2:	f7fe fa81 	bl	8011af8 <ucdr_set_on_full_buffer_callback>
 80135f6:	4620      	mov	r0, r4
 80135f8:	b011      	add	sp, #68	@ 0x44
 80135fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135fe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8013600:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013602:	4628      	mov	r0, r5
 8013604:	4798      	blx	r3
 8013606:	b920      	cbnz	r0, 8013612 <uxr_prepare_output_stream_fragmented+0x14e>
 8013608:	2400      	movs	r4, #0
 801360a:	4620      	mov	r0, r4
 801360c:	b011      	add	sp, #68	@ 0x44
 801360e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013612:	4620      	mov	r0, r4
 8013614:	f003 fe4e 	bl	80172b4 <get_available_free_slots>
 8013618:	2800      	cmp	r0, #0
 801361a:	f47f af6d 	bne.w	80134f8 <uxr_prepare_output_stream_fragmented+0x34>
 801361e:	e7f3      	b.n	8013608 <uxr_prepare_output_stream_fragmented+0x144>
 8013620:	4638      	mov	r0, r7
 8013622:	2101      	movs	r1, #1
 8013624:	f003 ff5c 	bl	80174e0 <uxr_seq_num_add>
 8013628:	8921      	ldrh	r1, [r4, #8]
 801362a:	fbb0 f2f1 	udiv	r2, r0, r1
 801362e:	fb01 0912 	mls	r9, r1, r2, r0
 8013632:	fa1f f289 	uxth.w	r2, r9
 8013636:	6863      	ldr	r3, [r4, #4]
 8013638:	fbb3 f9f1 	udiv	r9, r3, r1
 801363c:	6823      	ldr	r3, [r4, #0]
 801363e:	fb02 f909 	mul.w	r9, r2, r9
 8013642:	f109 0904 	add.w	r9, r9, #4
 8013646:	4499      	add	r9, r3
 8013648:	4607      	mov	r7, r0
 801364a:	7b23      	ldrb	r3, [r4, #12]
 801364c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013650:	e76b      	b.n	801352a <uxr_prepare_output_stream_fragmented+0x66>
 8013652:	bf00      	nop
 8013654:	08013351 	.word	0x08013351

08013658 <uxr_serialize_message_header>:
 8013658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801365a:	b083      	sub	sp, #12
 801365c:	4616      	mov	r6, r2
 801365e:	4604      	mov	r4, r0
 8013660:	9301      	str	r3, [sp, #4]
 8013662:	460d      	mov	r5, r1
 8013664:	9f08      	ldr	r7, [sp, #32]
 8013666:	f7fd fac7 	bl	8010bf8 <ucdr_serialize_uint8_t>
 801366a:	4631      	mov	r1, r6
 801366c:	4620      	mov	r0, r4
 801366e:	f7fd fac3 	bl	8010bf8 <ucdr_serialize_uint8_t>
 8013672:	9a01      	ldr	r2, [sp, #4]
 8013674:	2101      	movs	r1, #1
 8013676:	4620      	mov	r0, r4
 8013678:	f7fd fb6a 	bl	8010d50 <ucdr_serialize_endian_uint16_t>
 801367c:	062b      	lsls	r3, r5, #24
 801367e:	d501      	bpl.n	8013684 <uxr_serialize_message_header+0x2c>
 8013680:	b003      	add	sp, #12
 8013682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013684:	2204      	movs	r2, #4
 8013686:	4639      	mov	r1, r7
 8013688:	4620      	mov	r0, r4
 801368a:	b003      	add	sp, #12
 801368c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013690:	f002 beee 	b.w	8016470 <ucdr_serialize_array_uint8_t>

08013694 <uxr_deserialize_message_header>:
 8013694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013696:	b083      	sub	sp, #12
 8013698:	4616      	mov	r6, r2
 801369a:	4604      	mov	r4, r0
 801369c:	9301      	str	r3, [sp, #4]
 801369e:	460d      	mov	r5, r1
 80136a0:	9f08      	ldr	r7, [sp, #32]
 80136a2:	f7fd fabf 	bl	8010c24 <ucdr_deserialize_uint8_t>
 80136a6:	4631      	mov	r1, r6
 80136a8:	4620      	mov	r0, r4
 80136aa:	f7fd fabb 	bl	8010c24 <ucdr_deserialize_uint8_t>
 80136ae:	9a01      	ldr	r2, [sp, #4]
 80136b0:	2101      	movs	r1, #1
 80136b2:	4620      	mov	r0, r4
 80136b4:	f7fd fc40 	bl	8010f38 <ucdr_deserialize_endian_uint16_t>
 80136b8:	f995 3000 	ldrsb.w	r3, [r5]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	da01      	bge.n	80136c4 <uxr_deserialize_message_header+0x30>
 80136c0:	b003      	add	sp, #12
 80136c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136c4:	2204      	movs	r2, #4
 80136c6:	4639      	mov	r1, r7
 80136c8:	4620      	mov	r0, r4
 80136ca:	b003      	add	sp, #12
 80136cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80136d0:	f002 bf32 	b.w	8016538 <ucdr_deserialize_array_uint8_t>

080136d4 <uxr_serialize_submessage_header>:
 80136d4:	b530      	push	{r4, r5, lr}
 80136d6:	b083      	sub	sp, #12
 80136d8:	4615      	mov	r5, r2
 80136da:	4604      	mov	r4, r0
 80136dc:	9301      	str	r3, [sp, #4]
 80136de:	f7fd fa8b 	bl	8010bf8 <ucdr_serialize_uint8_t>
 80136e2:	4629      	mov	r1, r5
 80136e4:	4620      	mov	r0, r4
 80136e6:	f7fd fa87 	bl	8010bf8 <ucdr_serialize_uint8_t>
 80136ea:	9a01      	ldr	r2, [sp, #4]
 80136ec:	2101      	movs	r1, #1
 80136ee:	4620      	mov	r0, r4
 80136f0:	b003      	add	sp, #12
 80136f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136f6:	f7fd bb2b 	b.w	8010d50 <ucdr_serialize_endian_uint16_t>
 80136fa:	bf00      	nop

080136fc <uxr_deserialize_submessage_header>:
 80136fc:	b530      	push	{r4, r5, lr}
 80136fe:	b083      	sub	sp, #12
 8013700:	4615      	mov	r5, r2
 8013702:	4604      	mov	r4, r0
 8013704:	9301      	str	r3, [sp, #4]
 8013706:	f7fd fa8d 	bl	8010c24 <ucdr_deserialize_uint8_t>
 801370a:	4629      	mov	r1, r5
 801370c:	4620      	mov	r0, r4
 801370e:	f7fd fa89 	bl	8010c24 <ucdr_deserialize_uint8_t>
 8013712:	9a01      	ldr	r2, [sp, #4]
 8013714:	2101      	movs	r1, #1
 8013716:	4620      	mov	r0, r4
 8013718:	b003      	add	sp, #12
 801371a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801371e:	f7fd bc0b 	b.w	8010f38 <ucdr_deserialize_endian_uint16_t>
 8013722:	bf00      	nop

08013724 <uxr_serialize_CLIENT_Representation>:
 8013724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013728:	2204      	movs	r2, #4
 801372a:	460e      	mov	r6, r1
 801372c:	4605      	mov	r5, r0
 801372e:	f002 fe9f 	bl	8016470 <ucdr_serialize_array_uint8_t>
 8013732:	2202      	movs	r2, #2
 8013734:	4607      	mov	r7, r0
 8013736:	1d31      	adds	r1, r6, #4
 8013738:	4628      	mov	r0, r5
 801373a:	f002 fe99 	bl	8016470 <ucdr_serialize_array_uint8_t>
 801373e:	4038      	ands	r0, r7
 8013740:	2202      	movs	r2, #2
 8013742:	1db1      	adds	r1, r6, #6
 8013744:	b2c7      	uxtb	r7, r0
 8013746:	4628      	mov	r0, r5
 8013748:	f002 fe92 	bl	8016470 <ucdr_serialize_array_uint8_t>
 801374c:	2204      	movs	r2, #4
 801374e:	4007      	ands	r7, r0
 8013750:	f106 0108 	add.w	r1, r6, #8
 8013754:	4628      	mov	r0, r5
 8013756:	f002 fe8b 	bl	8016470 <ucdr_serialize_array_uint8_t>
 801375a:	7b31      	ldrb	r1, [r6, #12]
 801375c:	4007      	ands	r7, r0
 801375e:	4628      	mov	r0, r5
 8013760:	f7fd fa4a 	bl	8010bf8 <ucdr_serialize_uint8_t>
 8013764:	7b71      	ldrb	r1, [r6, #13]
 8013766:	4007      	ands	r7, r0
 8013768:	4628      	mov	r0, r5
 801376a:	f7fd fa17 	bl	8010b9c <ucdr_serialize_bool>
 801376e:	7b73      	ldrb	r3, [r6, #13]
 8013770:	ea07 0800 	and.w	r8, r7, r0
 8013774:	b93b      	cbnz	r3, 8013786 <uxr_serialize_CLIENT_Representation+0x62>
 8013776:	8bb1      	ldrh	r1, [r6, #28]
 8013778:	4628      	mov	r0, r5
 801377a:	f7fd fa69 	bl	8010c50 <ucdr_serialize_uint16_t>
 801377e:	ea08 0000 	and.w	r0, r8, r0
 8013782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013786:	6931      	ldr	r1, [r6, #16]
 8013788:	4628      	mov	r0, r5
 801378a:	f7fd fc4b 	bl	8011024 <ucdr_serialize_uint32_t>
 801378e:	6933      	ldr	r3, [r6, #16]
 8013790:	b1e3      	cbz	r3, 80137cc <uxr_serialize_CLIENT_Representation+0xa8>
 8013792:	b1c0      	cbz	r0, 80137c6 <uxr_serialize_CLIENT_Representation+0xa2>
 8013794:	4637      	mov	r7, r6
 8013796:	f04f 0900 	mov.w	r9, #0
 801379a:	e001      	b.n	80137a0 <uxr_serialize_CLIENT_Representation+0x7c>
 801379c:	3708      	adds	r7, #8
 801379e:	b194      	cbz	r4, 80137c6 <uxr_serialize_CLIENT_Representation+0xa2>
 80137a0:	6979      	ldr	r1, [r7, #20]
 80137a2:	4628      	mov	r0, r5
 80137a4:	f002 ff84 	bl	80166b0 <ucdr_serialize_string>
 80137a8:	69b9      	ldr	r1, [r7, #24]
 80137aa:	4604      	mov	r4, r0
 80137ac:	4628      	mov	r0, r5
 80137ae:	f002 ff7f 	bl	80166b0 <ucdr_serialize_string>
 80137b2:	6933      	ldr	r3, [r6, #16]
 80137b4:	f109 0901 	add.w	r9, r9, #1
 80137b8:	4004      	ands	r4, r0
 80137ba:	4599      	cmp	r9, r3
 80137bc:	b2e4      	uxtb	r4, r4
 80137be:	d3ed      	bcc.n	801379c <uxr_serialize_CLIENT_Representation+0x78>
 80137c0:	ea08 0804 	and.w	r8, r8, r4
 80137c4:	e7d7      	b.n	8013776 <uxr_serialize_CLIENT_Representation+0x52>
 80137c6:	f04f 0800 	mov.w	r8, #0
 80137ca:	e7d4      	b.n	8013776 <uxr_serialize_CLIENT_Representation+0x52>
 80137cc:	ea08 0800 	and.w	r8, r8, r0
 80137d0:	e7d1      	b.n	8013776 <uxr_serialize_CLIENT_Representation+0x52>
 80137d2:	bf00      	nop

080137d4 <uxr_deserialize_CLIENT_Representation>:
 80137d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137d8:	2204      	movs	r2, #4
 80137da:	460c      	mov	r4, r1
 80137dc:	4605      	mov	r5, r0
 80137de:	f002 feab 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 80137e2:	2202      	movs	r2, #2
 80137e4:	4607      	mov	r7, r0
 80137e6:	1d21      	adds	r1, r4, #4
 80137e8:	4628      	mov	r0, r5
 80137ea:	f002 fea5 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 80137ee:	4038      	ands	r0, r7
 80137f0:	2202      	movs	r2, #2
 80137f2:	1da1      	adds	r1, r4, #6
 80137f4:	b2c6      	uxtb	r6, r0
 80137f6:	4628      	mov	r0, r5
 80137f8:	f002 fe9e 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 80137fc:	2204      	movs	r2, #4
 80137fe:	4006      	ands	r6, r0
 8013800:	f104 0108 	add.w	r1, r4, #8
 8013804:	4628      	mov	r0, r5
 8013806:	f002 fe97 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 801380a:	f104 010c 	add.w	r1, r4, #12
 801380e:	4006      	ands	r6, r0
 8013810:	4628      	mov	r0, r5
 8013812:	f7fd fa07 	bl	8010c24 <ucdr_deserialize_uint8_t>
 8013816:	f104 010d 	add.w	r1, r4, #13
 801381a:	ea06 0700 	and.w	r7, r6, r0
 801381e:	4628      	mov	r0, r5
 8013820:	f7fd f9d2 	bl	8010bc8 <ucdr_deserialize_bool>
 8013824:	7b63      	ldrb	r3, [r4, #13]
 8013826:	4007      	ands	r7, r0
 8013828:	b93b      	cbnz	r3, 801383a <uxr_deserialize_CLIENT_Representation+0x66>
 801382a:	f104 011c 	add.w	r1, r4, #28
 801382e:	4628      	mov	r0, r5
 8013830:	f7fd fb0e 	bl	8010e50 <ucdr_deserialize_uint16_t>
 8013834:	4038      	ands	r0, r7
 8013836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801383a:	f104 0110 	add.w	r1, r4, #16
 801383e:	4628      	mov	r0, r5
 8013840:	f7fd fd20 	bl	8011284 <ucdr_deserialize_uint32_t>
 8013844:	6923      	ldr	r3, [r4, #16]
 8013846:	2b01      	cmp	r3, #1
 8013848:	d903      	bls.n	8013852 <uxr_deserialize_CLIENT_Representation+0x7e>
 801384a:	2301      	movs	r3, #1
 801384c:	75ab      	strb	r3, [r5, #22]
 801384e:	2700      	movs	r7, #0
 8013850:	e7eb      	b.n	801382a <uxr_deserialize_CLIENT_Representation+0x56>
 8013852:	b30b      	cbz	r3, 8013898 <uxr_deserialize_CLIENT_Representation+0xc4>
 8013854:	2800      	cmp	r0, #0
 8013856:	d0fa      	beq.n	801384e <uxr_deserialize_CLIENT_Representation+0x7a>
 8013858:	46a0      	mov	r8, r4
 801385a:	f04f 0900 	mov.w	r9, #0
 801385e:	e001      	b.n	8013864 <uxr_deserialize_CLIENT_Representation+0x90>
 8013860:	2e00      	cmp	r6, #0
 8013862:	d0f4      	beq.n	801384e <uxr_deserialize_CLIENT_Representation+0x7a>
 8013864:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801386c:	4628      	mov	r0, r5
 801386e:	f002 ff2f 	bl	80166d0 <ucdr_deserialize_string>
 8013872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013876:	4606      	mov	r6, r0
 8013878:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801387c:	4628      	mov	r0, r5
 801387e:	f002 ff27 	bl	80166d0 <ucdr_deserialize_string>
 8013882:	6923      	ldr	r3, [r4, #16]
 8013884:	f109 0901 	add.w	r9, r9, #1
 8013888:	4006      	ands	r6, r0
 801388a:	4599      	cmp	r9, r3
 801388c:	f108 0808 	add.w	r8, r8, #8
 8013890:	b2f6      	uxtb	r6, r6
 8013892:	d3e5      	bcc.n	8013860 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013894:	4037      	ands	r7, r6
 8013896:	e7c8      	b.n	801382a <uxr_deserialize_CLIENT_Representation+0x56>
 8013898:	4007      	ands	r7, r0
 801389a:	e7c6      	b.n	801382a <uxr_deserialize_CLIENT_Representation+0x56>

0801389c <uxr_serialize_AGENT_Representation>:
 801389c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138a0:	2204      	movs	r2, #4
 80138a2:	460f      	mov	r7, r1
 80138a4:	4605      	mov	r5, r0
 80138a6:	f002 fde3 	bl	8016470 <ucdr_serialize_array_uint8_t>
 80138aa:	2202      	movs	r2, #2
 80138ac:	4604      	mov	r4, r0
 80138ae:	1d39      	adds	r1, r7, #4
 80138b0:	4628      	mov	r0, r5
 80138b2:	f002 fddd 	bl	8016470 <ucdr_serialize_array_uint8_t>
 80138b6:	4020      	ands	r0, r4
 80138b8:	2202      	movs	r2, #2
 80138ba:	1db9      	adds	r1, r7, #6
 80138bc:	b2c4      	uxtb	r4, r0
 80138be:	4628      	mov	r0, r5
 80138c0:	f002 fdd6 	bl	8016470 <ucdr_serialize_array_uint8_t>
 80138c4:	7a39      	ldrb	r1, [r7, #8]
 80138c6:	4004      	ands	r4, r0
 80138c8:	4628      	mov	r0, r5
 80138ca:	f7fd f967 	bl	8010b9c <ucdr_serialize_bool>
 80138ce:	7a3b      	ldrb	r3, [r7, #8]
 80138d0:	ea00 0804 	and.w	r8, r0, r4
 80138d4:	b913      	cbnz	r3, 80138dc <uxr_serialize_AGENT_Representation+0x40>
 80138d6:	4640      	mov	r0, r8
 80138d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138dc:	68f9      	ldr	r1, [r7, #12]
 80138de:	4628      	mov	r0, r5
 80138e0:	f7fd fba0 	bl	8011024 <ucdr_serialize_uint32_t>
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	b303      	cbz	r3, 801392a <uxr_serialize_AGENT_Representation+0x8e>
 80138e8:	b1d0      	cbz	r0, 8013920 <uxr_serialize_AGENT_Representation+0x84>
 80138ea:	463e      	mov	r6, r7
 80138ec:	f04f 0900 	mov.w	r9, #0
 80138f0:	e001      	b.n	80138f6 <uxr_serialize_AGENT_Representation+0x5a>
 80138f2:	3608      	adds	r6, #8
 80138f4:	b1a4      	cbz	r4, 8013920 <uxr_serialize_AGENT_Representation+0x84>
 80138f6:	6931      	ldr	r1, [r6, #16]
 80138f8:	4628      	mov	r0, r5
 80138fa:	f002 fed9 	bl	80166b0 <ucdr_serialize_string>
 80138fe:	6971      	ldr	r1, [r6, #20]
 8013900:	4604      	mov	r4, r0
 8013902:	4628      	mov	r0, r5
 8013904:	f002 fed4 	bl	80166b0 <ucdr_serialize_string>
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	f109 0901 	add.w	r9, r9, #1
 801390e:	4004      	ands	r4, r0
 8013910:	4599      	cmp	r9, r3
 8013912:	b2e4      	uxtb	r4, r4
 8013914:	d3ed      	bcc.n	80138f2 <uxr_serialize_AGENT_Representation+0x56>
 8013916:	ea08 0804 	and.w	r8, r8, r4
 801391a:	4640      	mov	r0, r8
 801391c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013920:	f04f 0800 	mov.w	r8, #0
 8013924:	4640      	mov	r0, r8
 8013926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801392a:	ea08 0800 	and.w	r8, r8, r0
 801392e:	e7d2      	b.n	80138d6 <uxr_serialize_AGENT_Representation+0x3a>

08013930 <uxr_serialize_DATAWRITER_Representation>:
 8013930:	b570      	push	{r4, r5, r6, lr}
 8013932:	460d      	mov	r5, r1
 8013934:	7809      	ldrb	r1, [r1, #0]
 8013936:	4606      	mov	r6, r0
 8013938:	f7fd f95e 	bl	8010bf8 <ucdr_serialize_uint8_t>
 801393c:	4604      	mov	r4, r0
 801393e:	b130      	cbz	r0, 801394e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013940:	782b      	ldrb	r3, [r5, #0]
 8013942:	2b02      	cmp	r3, #2
 8013944:	d00c      	beq.n	8013960 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013946:	2b03      	cmp	r3, #3
 8013948:	d010      	beq.n	801396c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801394a:	2b01      	cmp	r3, #1
 801394c:	d008      	beq.n	8013960 <uxr_serialize_DATAWRITER_Representation+0x30>
 801394e:	2202      	movs	r2, #2
 8013950:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013954:	4630      	mov	r0, r6
 8013956:	f002 fd8b 	bl	8016470 <ucdr_serialize_array_uint8_t>
 801395a:	4020      	ands	r0, r4
 801395c:	b2c0      	uxtb	r0, r0
 801395e:	bd70      	pop	{r4, r5, r6, pc}
 8013960:	6869      	ldr	r1, [r5, #4]
 8013962:	4630      	mov	r0, r6
 8013964:	f002 fea4 	bl	80166b0 <ucdr_serialize_string>
 8013968:	4604      	mov	r4, r0
 801396a:	e7f0      	b.n	801394e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801396c:	4629      	mov	r1, r5
 801396e:	4630      	mov	r0, r6
 8013970:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013974:	3104      	adds	r1, #4
 8013976:	f002 fe6f 	bl	8016658 <ucdr_serialize_sequence_uint8_t>
 801397a:	4604      	mov	r4, r0
 801397c:	e7e7      	b.n	801394e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801397e:	bf00      	nop

08013980 <uxr_serialize_ObjectVariant.part.0>:
 8013980:	b570      	push	{r4, r5, r6, lr}
 8013982:	780b      	ldrb	r3, [r1, #0]
 8013984:	3b01      	subs	r3, #1
 8013986:	460c      	mov	r4, r1
 8013988:	4605      	mov	r5, r0
 801398a:	2b0d      	cmp	r3, #13
 801398c:	d854      	bhi.n	8013a38 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801398e:	e8df f003 	tbb	[pc, r3]
 8013992:	0730      	.short	0x0730
 8013994:	07071b1b 	.word	0x07071b1b
 8013998:	0c530707 	.word	0x0c530707
 801399c:	494e0c0c 	.word	0x494e0c0c
 80139a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139a4:	3104      	adds	r1, #4
 80139a6:	f7ff bfc3 	b.w	8013930 <uxr_serialize_DATAWRITER_Representation>
 80139aa:	7909      	ldrb	r1, [r1, #4]
 80139ac:	f7fd f924 	bl	8010bf8 <ucdr_serialize_uint8_t>
 80139b0:	b1e8      	cbz	r0, 80139ee <uxr_serialize_ObjectVariant.part.0+0x6e>
 80139b2:	7923      	ldrb	r3, [r4, #4]
 80139b4:	2b01      	cmp	r3, #1
 80139b6:	d001      	beq.n	80139bc <uxr_serialize_ObjectVariant.part.0+0x3c>
 80139b8:	2b02      	cmp	r3, #2
 80139ba:	d13d      	bne.n	8013a38 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80139bc:	68a1      	ldr	r1, [r4, #8]
 80139be:	4628      	mov	r0, r5
 80139c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139c4:	f002 be74 	b.w	80166b0 <ucdr_serialize_string>
 80139c8:	7909      	ldrb	r1, [r1, #4]
 80139ca:	f7fd f915 	bl	8010bf8 <ucdr_serialize_uint8_t>
 80139ce:	4606      	mov	r6, r0
 80139d0:	b120      	cbz	r0, 80139dc <uxr_serialize_ObjectVariant.part.0+0x5c>
 80139d2:	7923      	ldrb	r3, [r4, #4]
 80139d4:	2b02      	cmp	r3, #2
 80139d6:	d039      	beq.n	8013a4c <uxr_serialize_ObjectVariant.part.0+0xcc>
 80139d8:	2b03      	cmp	r3, #3
 80139da:	d02f      	beq.n	8013a3c <uxr_serialize_ObjectVariant.part.0+0xbc>
 80139dc:	2202      	movs	r2, #2
 80139de:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80139e2:	4628      	mov	r0, r5
 80139e4:	f002 fd44 	bl	8016470 <ucdr_serialize_array_uint8_t>
 80139e8:	4030      	ands	r0, r6
 80139ea:	b2c0      	uxtb	r0, r0
 80139ec:	bd70      	pop	{r4, r5, r6, pc}
 80139ee:	2000      	movs	r0, #0
 80139f0:	bd70      	pop	{r4, r5, r6, pc}
 80139f2:	7909      	ldrb	r1, [r1, #4]
 80139f4:	f7fd f900 	bl	8010bf8 <ucdr_serialize_uint8_t>
 80139f8:	4606      	mov	r6, r0
 80139fa:	b158      	cbz	r0, 8013a14 <uxr_serialize_ObjectVariant.part.0+0x94>
 80139fc:	7923      	ldrb	r3, [r4, #4]
 80139fe:	2b02      	cmp	r3, #2
 8013a00:	d003      	beq.n	8013a0a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8013a02:	2b03      	cmp	r3, #3
 8013a04:	d028      	beq.n	8013a58 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8013a06:	2b01      	cmp	r3, #1
 8013a08:	d104      	bne.n	8013a14 <uxr_serialize_ObjectVariant.part.0+0x94>
 8013a0a:	68a1      	ldr	r1, [r4, #8]
 8013a0c:	4628      	mov	r0, r5
 8013a0e:	f002 fe4f 	bl	80166b0 <ucdr_serialize_string>
 8013a12:	4606      	mov	r6, r0
 8013a14:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8013a18:	4628      	mov	r0, r5
 8013a1a:	f7fd fe29 	bl	8011670 <ucdr_serialize_int16_t>
 8013a1e:	4030      	ands	r0, r6
 8013a20:	b2c0      	uxtb	r0, r0
 8013a22:	bd70      	pop	{r4, r5, r6, pc}
 8013a24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a28:	3104      	adds	r1, #4
 8013a2a:	f7ff be7b 	b.w	8013724 <uxr_serialize_CLIENT_Representation>
 8013a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a32:	3104      	adds	r1, #4
 8013a34:	f7ff bf32 	b.w	801389c <uxr_serialize_AGENT_Representation>
 8013a38:	2001      	movs	r0, #1
 8013a3a:	bd70      	pop	{r4, r5, r6, pc}
 8013a3c:	68a2      	ldr	r2, [r4, #8]
 8013a3e:	f104 010c 	add.w	r1, r4, #12
 8013a42:	4628      	mov	r0, r5
 8013a44:	f002 fe08 	bl	8016658 <ucdr_serialize_sequence_uint8_t>
 8013a48:	4606      	mov	r6, r0
 8013a4a:	e7c7      	b.n	80139dc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013a4c:	68a1      	ldr	r1, [r4, #8]
 8013a4e:	4628      	mov	r0, r5
 8013a50:	f002 fe2e 	bl	80166b0 <ucdr_serialize_string>
 8013a54:	4606      	mov	r6, r0
 8013a56:	e7c1      	b.n	80139dc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013a58:	68a2      	ldr	r2, [r4, #8]
 8013a5a:	f104 010c 	add.w	r1, r4, #12
 8013a5e:	4628      	mov	r0, r5
 8013a60:	f002 fdfa 	bl	8016658 <ucdr_serialize_sequence_uint8_t>
 8013a64:	4606      	mov	r6, r0
 8013a66:	e7d5      	b.n	8013a14 <uxr_serialize_ObjectVariant.part.0+0x94>

08013a68 <uxr_deserialize_DATAWRITER_Representation>:
 8013a68:	b570      	push	{r4, r5, r6, lr}
 8013a6a:	4606      	mov	r6, r0
 8013a6c:	460d      	mov	r5, r1
 8013a6e:	f7fd f8d9 	bl	8010c24 <ucdr_deserialize_uint8_t>
 8013a72:	4604      	mov	r4, r0
 8013a74:	b130      	cbz	r0, 8013a84 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013a76:	782b      	ldrb	r3, [r5, #0]
 8013a78:	2b02      	cmp	r3, #2
 8013a7a:	d00c      	beq.n	8013a96 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013a7c:	2b03      	cmp	r3, #3
 8013a7e:	d012      	beq.n	8013aa6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013a80:	2b01      	cmp	r3, #1
 8013a82:	d008      	beq.n	8013a96 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013a84:	2202      	movs	r2, #2
 8013a86:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013a8a:	4630      	mov	r0, r6
 8013a8c:	f002 fd54 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 8013a90:	4020      	ands	r0, r4
 8013a92:	b2c0      	uxtb	r0, r0
 8013a94:	bd70      	pop	{r4, r5, r6, pc}
 8013a96:	6869      	ldr	r1, [r5, #4]
 8013a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a9c:	4630      	mov	r0, r6
 8013a9e:	f002 fe17 	bl	80166d0 <ucdr_deserialize_string>
 8013aa2:	4604      	mov	r4, r0
 8013aa4:	e7ee      	b.n	8013a84 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013aa6:	1d2b      	adds	r3, r5, #4
 8013aa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013aac:	f105 0108 	add.w	r1, r5, #8
 8013ab0:	4630      	mov	r0, r6
 8013ab2:	f002 fde3 	bl	801667c <ucdr_deserialize_sequence_uint8_t>
 8013ab6:	4604      	mov	r4, r0
 8013ab8:	e7e4      	b.n	8013a84 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013aba:	bf00      	nop

08013abc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013abc:	b570      	push	{r4, r5, r6, lr}
 8013abe:	460d      	mov	r5, r1
 8013ac0:	7809      	ldrb	r1, [r1, #0]
 8013ac2:	4606      	mov	r6, r0
 8013ac4:	f7fd f86a 	bl	8010b9c <ucdr_serialize_bool>
 8013ac8:	782b      	ldrb	r3, [r5, #0]
 8013aca:	4604      	mov	r4, r0
 8013acc:	b94b      	cbnz	r3, 8013ae2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013ace:	7a29      	ldrb	r1, [r5, #8]
 8013ad0:	4630      	mov	r0, r6
 8013ad2:	f7fd f863 	bl	8010b9c <ucdr_serialize_bool>
 8013ad6:	7a2b      	ldrb	r3, [r5, #8]
 8013ad8:	4004      	ands	r4, r0
 8013ada:	b2e4      	uxtb	r4, r4
 8013adc:	b943      	cbnz	r3, 8013af0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013ade:	4620      	mov	r0, r4
 8013ae0:	bd70      	pop	{r4, r5, r6, pc}
 8013ae2:	6869      	ldr	r1, [r5, #4]
 8013ae4:	4630      	mov	r0, r6
 8013ae6:	f002 fde3 	bl	80166b0 <ucdr_serialize_string>
 8013aea:	4004      	ands	r4, r0
 8013aec:	b2e4      	uxtb	r4, r4
 8013aee:	e7ee      	b.n	8013ace <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013af0:	68e9      	ldr	r1, [r5, #12]
 8013af2:	4630      	mov	r0, r6
 8013af4:	f002 fddc 	bl	80166b0 <ucdr_serialize_string>
 8013af8:	4004      	ands	r4, r0
 8013afa:	4620      	mov	r0, r4
 8013afc:	bd70      	pop	{r4, r5, r6, pc}
 8013afe:	bf00      	nop

08013b00 <uxr_serialize_OBJK_Topic_Binary>:
 8013b00:	b570      	push	{r4, r5, r6, lr}
 8013b02:	460d      	mov	r5, r1
 8013b04:	6809      	ldr	r1, [r1, #0]
 8013b06:	4606      	mov	r6, r0
 8013b08:	f002 fdd2 	bl	80166b0 <ucdr_serialize_string>
 8013b0c:	7929      	ldrb	r1, [r5, #4]
 8013b0e:	4604      	mov	r4, r0
 8013b10:	4630      	mov	r0, r6
 8013b12:	f7fd f843 	bl	8010b9c <ucdr_serialize_bool>
 8013b16:	792b      	ldrb	r3, [r5, #4]
 8013b18:	4004      	ands	r4, r0
 8013b1a:	b2e4      	uxtb	r4, r4
 8013b1c:	b943      	cbnz	r3, 8013b30 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013b1e:	7b29      	ldrb	r1, [r5, #12]
 8013b20:	4630      	mov	r0, r6
 8013b22:	f7fd f83b 	bl	8010b9c <ucdr_serialize_bool>
 8013b26:	7b2b      	ldrb	r3, [r5, #12]
 8013b28:	4004      	ands	r4, r0
 8013b2a:	b93b      	cbnz	r3, 8013b3c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	bd70      	pop	{r4, r5, r6, pc}
 8013b30:	68a9      	ldr	r1, [r5, #8]
 8013b32:	4630      	mov	r0, r6
 8013b34:	f002 fdbc 	bl	80166b0 <ucdr_serialize_string>
 8013b38:	4004      	ands	r4, r0
 8013b3a:	e7f0      	b.n	8013b1e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013b3c:	6929      	ldr	r1, [r5, #16]
 8013b3e:	4630      	mov	r0, r6
 8013b40:	f002 fdb6 	bl	80166b0 <ucdr_serialize_string>
 8013b44:	4004      	ands	r4, r0
 8013b46:	b2e4      	uxtb	r4, r4
 8013b48:	4620      	mov	r0, r4
 8013b4a:	bd70      	pop	{r4, r5, r6, pc}

08013b4c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b50:	460c      	mov	r4, r1
 8013b52:	7809      	ldrb	r1, [r1, #0]
 8013b54:	4606      	mov	r6, r0
 8013b56:	f7fd f821 	bl	8010b9c <ucdr_serialize_bool>
 8013b5a:	7823      	ldrb	r3, [r4, #0]
 8013b5c:	4605      	mov	r5, r0
 8013b5e:	b96b      	cbnz	r3, 8013b7c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013b60:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013b64:	4630      	mov	r0, r6
 8013b66:	f7fd f819 	bl	8010b9c <ucdr_serialize_bool>
 8013b6a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013b6e:	4005      	ands	r5, r0
 8013b70:	b2ed      	uxtb	r5, r5
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d169      	bne.n	8013c4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013b76:	4628      	mov	r0, r5
 8013b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b7c:	6861      	ldr	r1, [r4, #4]
 8013b7e:	4630      	mov	r0, r6
 8013b80:	f7fd fa50 	bl	8011024 <ucdr_serialize_uint32_t>
 8013b84:	6863      	ldr	r3, [r4, #4]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d06b      	beq.n	8013c62 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013b8a:	2800      	cmp	r0, #0
 8013b8c:	d067      	beq.n	8013c5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013b8e:	68a1      	ldr	r1, [r4, #8]
 8013b90:	4630      	mov	r0, r6
 8013b92:	f002 fd8d 	bl	80166b0 <ucdr_serialize_string>
 8013b96:	6863      	ldr	r3, [r4, #4]
 8013b98:	2b01      	cmp	r3, #1
 8013b9a:	d953      	bls.n	8013c44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	d05e      	beq.n	8013c5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ba0:	68e1      	ldr	r1, [r4, #12]
 8013ba2:	4630      	mov	r0, r6
 8013ba4:	f002 fd84 	bl	80166b0 <ucdr_serialize_string>
 8013ba8:	6863      	ldr	r3, [r4, #4]
 8013baa:	2b02      	cmp	r3, #2
 8013bac:	d94a      	bls.n	8013c44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bae:	2800      	cmp	r0, #0
 8013bb0:	d055      	beq.n	8013c5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bb2:	6921      	ldr	r1, [r4, #16]
 8013bb4:	4630      	mov	r0, r6
 8013bb6:	f002 fd7b 	bl	80166b0 <ucdr_serialize_string>
 8013bba:	6863      	ldr	r3, [r4, #4]
 8013bbc:	2b03      	cmp	r3, #3
 8013bbe:	d941      	bls.n	8013c44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bc0:	2800      	cmp	r0, #0
 8013bc2:	d04c      	beq.n	8013c5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bc4:	6961      	ldr	r1, [r4, #20]
 8013bc6:	4630      	mov	r0, r6
 8013bc8:	f002 fd72 	bl	80166b0 <ucdr_serialize_string>
 8013bcc:	6863      	ldr	r3, [r4, #4]
 8013bce:	2b04      	cmp	r3, #4
 8013bd0:	d938      	bls.n	8013c44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bd2:	2800      	cmp	r0, #0
 8013bd4:	d043      	beq.n	8013c5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bd6:	69a1      	ldr	r1, [r4, #24]
 8013bd8:	4630      	mov	r0, r6
 8013bda:	f002 fd69 	bl	80166b0 <ucdr_serialize_string>
 8013bde:	6863      	ldr	r3, [r4, #4]
 8013be0:	2b05      	cmp	r3, #5
 8013be2:	d92f      	bls.n	8013c44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013be4:	2800      	cmp	r0, #0
 8013be6:	d03a      	beq.n	8013c5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013be8:	69e1      	ldr	r1, [r4, #28]
 8013bea:	4630      	mov	r0, r6
 8013bec:	f002 fd60 	bl	80166b0 <ucdr_serialize_string>
 8013bf0:	6863      	ldr	r3, [r4, #4]
 8013bf2:	2b06      	cmp	r3, #6
 8013bf4:	d926      	bls.n	8013c44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013bf6:	b390      	cbz	r0, 8013c5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013bf8:	6a21      	ldr	r1, [r4, #32]
 8013bfa:	4630      	mov	r0, r6
 8013bfc:	f002 fd58 	bl	80166b0 <ucdr_serialize_string>
 8013c00:	6863      	ldr	r3, [r4, #4]
 8013c02:	2b07      	cmp	r3, #7
 8013c04:	d91e      	bls.n	8013c44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c06:	b350      	cbz	r0, 8013c5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c08:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013c0a:	4630      	mov	r0, r6
 8013c0c:	f002 fd50 	bl	80166b0 <ucdr_serialize_string>
 8013c10:	6863      	ldr	r3, [r4, #4]
 8013c12:	2b08      	cmp	r3, #8
 8013c14:	d916      	bls.n	8013c44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c16:	b310      	cbz	r0, 8013c5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c18:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013c1a:	4630      	mov	r0, r6
 8013c1c:	f002 fd48 	bl	80166b0 <ucdr_serialize_string>
 8013c20:	6863      	ldr	r3, [r4, #4]
 8013c22:	2b09      	cmp	r3, #9
 8013c24:	d90e      	bls.n	8013c44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c26:	b1d0      	cbz	r0, 8013c5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c28:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8013c2c:	2709      	movs	r7, #9
 8013c2e:	e000      	b.n	8013c32 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013c30:	b1a8      	cbz	r0, 8013c5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c32:	f858 1b04 	ldr.w	r1, [r8], #4
 8013c36:	4630      	mov	r0, r6
 8013c38:	f002 fd3a 	bl	80166b0 <ucdr_serialize_string>
 8013c3c:	6862      	ldr	r2, [r4, #4]
 8013c3e:	3701      	adds	r7, #1
 8013c40:	4297      	cmp	r7, r2
 8013c42:	d3f5      	bcc.n	8013c30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013c44:	4005      	ands	r5, r0
 8013c46:	b2ed      	uxtb	r5, r5
 8013c48:	e78a      	b.n	8013b60 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013c4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013c4c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013c50:	4630      	mov	r0, r6
 8013c52:	f002 fd01 	bl	8016658 <ucdr_serialize_sequence_uint8_t>
 8013c56:	4005      	ands	r5, r0
 8013c58:	4628      	mov	r0, r5
 8013c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c5e:	2500      	movs	r5, #0
 8013c60:	e77e      	b.n	8013b60 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013c62:	4028      	ands	r0, r5
 8013c64:	b2c5      	uxtb	r5, r0
 8013c66:	e77b      	b.n	8013b60 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013c68 <uxr_serialize_OBJK_Publisher_Binary>:
 8013c68:	b570      	push	{r4, r5, r6, lr}
 8013c6a:	460d      	mov	r5, r1
 8013c6c:	7809      	ldrb	r1, [r1, #0]
 8013c6e:	4606      	mov	r6, r0
 8013c70:	f7fc ff94 	bl	8010b9c <ucdr_serialize_bool>
 8013c74:	782b      	ldrb	r3, [r5, #0]
 8013c76:	4604      	mov	r4, r0
 8013c78:	b94b      	cbnz	r3, 8013c8e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013c7a:	7a29      	ldrb	r1, [r5, #8]
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	f7fc ff8d 	bl	8010b9c <ucdr_serialize_bool>
 8013c82:	7a2b      	ldrb	r3, [r5, #8]
 8013c84:	4004      	ands	r4, r0
 8013c86:	b2e4      	uxtb	r4, r4
 8013c88:	b943      	cbnz	r3, 8013c9c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013c8a:	4620      	mov	r0, r4
 8013c8c:	bd70      	pop	{r4, r5, r6, pc}
 8013c8e:	6869      	ldr	r1, [r5, #4]
 8013c90:	4630      	mov	r0, r6
 8013c92:	f002 fd0d 	bl	80166b0 <ucdr_serialize_string>
 8013c96:	4004      	ands	r4, r0
 8013c98:	b2e4      	uxtb	r4, r4
 8013c9a:	e7ee      	b.n	8013c7a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013c9c:	f105 010c 	add.w	r1, r5, #12
 8013ca0:	4630      	mov	r0, r6
 8013ca2:	f7ff ff53 	bl	8013b4c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013ca6:	4004      	ands	r4, r0
 8013ca8:	4620      	mov	r0, r4
 8013caa:	bd70      	pop	{r4, r5, r6, pc}

08013cac <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013cac:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013cb0:	4688      	mov	r8, r1
 8013cb2:	8809      	ldrh	r1, [r1, #0]
 8013cb4:	4681      	mov	r9, r0
 8013cb6:	f7fc ffcb 	bl	8010c50 <ucdr_serialize_uint16_t>
 8013cba:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013cbe:	4606      	mov	r6, r0
 8013cc0:	4648      	mov	r0, r9
 8013cc2:	f7fc ff6b 	bl	8010b9c <ucdr_serialize_bool>
 8013cc6:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013cca:	4006      	ands	r6, r0
 8013ccc:	b2f5      	uxtb	r5, r6
 8013cce:	b9eb      	cbnz	r3, 8013d0c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013cd0:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013cd4:	4648      	mov	r0, r9
 8013cd6:	f7fc ff61 	bl	8010b9c <ucdr_serialize_bool>
 8013cda:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013cde:	4005      	ands	r5, r0
 8013ce0:	bb7b      	cbnz	r3, 8013d42 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013ce2:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013ce6:	4648      	mov	r0, r9
 8013ce8:	f7fc ff58 	bl	8010b9c <ucdr_serialize_bool>
 8013cec:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013cf0:	4005      	ands	r5, r0
 8013cf2:	b9f3      	cbnz	r3, 8013d32 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013cf4:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013cf8:	4648      	mov	r0, r9
 8013cfa:	f7fc ff4f 	bl	8010b9c <ucdr_serialize_bool>
 8013cfe:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013d02:	4005      	ands	r5, r0
 8013d04:	b94b      	cbnz	r3, 8013d1a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013d06:	4628      	mov	r0, r5
 8013d08:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013d0c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013d10:	4648      	mov	r0, r9
 8013d12:	f7fc ff9d 	bl	8010c50 <ucdr_serialize_uint16_t>
 8013d16:	4005      	ands	r5, r0
 8013d18:	e7da      	b.n	8013cd0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013d1a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013d1e:	f108 011c 	add.w	r1, r8, #28
 8013d22:	4648      	mov	r0, r9
 8013d24:	f002 fc98 	bl	8016658 <ucdr_serialize_sequence_uint8_t>
 8013d28:	4028      	ands	r0, r5
 8013d2a:	b2c5      	uxtb	r5, r0
 8013d2c:	4628      	mov	r0, r5
 8013d2e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013d32:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013d36:	4648      	mov	r0, r9
 8013d38:	f7fd f974 	bl	8011024 <ucdr_serialize_uint32_t>
 8013d3c:	4028      	ands	r0, r5
 8013d3e:	b2c5      	uxtb	r5, r0
 8013d40:	e7d8      	b.n	8013cf4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013d42:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013d46:	4648      	mov	r0, r9
 8013d48:	f7fd f96c 	bl	8011024 <ucdr_serialize_uint32_t>
 8013d4c:	4028      	ands	r0, r5
 8013d4e:	b2c5      	uxtb	r5, r0
 8013d50:	e7c7      	b.n	8013ce2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013d52:	bf00      	nop

08013d54 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d56:	2202      	movs	r2, #2
 8013d58:	460d      	mov	r5, r1
 8013d5a:	4606      	mov	r6, r0
 8013d5c:	f002 fb88 	bl	8016470 <ucdr_serialize_array_uint8_t>
 8013d60:	78a9      	ldrb	r1, [r5, #2]
 8013d62:	4604      	mov	r4, r0
 8013d64:	4630      	mov	r0, r6
 8013d66:	f7fc ff19 	bl	8010b9c <ucdr_serialize_bool>
 8013d6a:	78ab      	ldrb	r3, [r5, #2]
 8013d6c:	4004      	ands	r4, r0
 8013d6e:	b2e4      	uxtb	r4, r4
 8013d70:	b90b      	cbnz	r3, 8013d76 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8013d72:	4620      	mov	r0, r4
 8013d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d76:	f105 0108 	add.w	r1, r5, #8
 8013d7a:	4630      	mov	r0, r6
 8013d7c:	f7ff ff96 	bl	8013cac <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013d80:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8013d84:	4607      	mov	r7, r0
 8013d86:	4630      	mov	r0, r6
 8013d88:	f7fc ff08 	bl	8010b9c <ucdr_serialize_bool>
 8013d8c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013d90:	4038      	ands	r0, r7
 8013d92:	b2c7      	uxtb	r7, r0
 8013d94:	b913      	cbnz	r3, 8013d9c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8013d96:	403c      	ands	r4, r7
 8013d98:	4620      	mov	r0, r4
 8013d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d9c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013da0:	4630      	mov	r0, r6
 8013da2:	f7fd fb95 	bl	80114d0 <ucdr_serialize_uint64_t>
 8013da6:	4007      	ands	r7, r0
 8013da8:	e7f5      	b.n	8013d96 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013daa:	bf00      	nop

08013dac <uxr_deserialize_ObjectVariant>:
 8013dac:	b570      	push	{r4, r5, r6, lr}
 8013dae:	4605      	mov	r5, r0
 8013db0:	460e      	mov	r6, r1
 8013db2:	f7fc ff37 	bl	8010c24 <ucdr_deserialize_uint8_t>
 8013db6:	b168      	cbz	r0, 8013dd4 <uxr_deserialize_ObjectVariant+0x28>
 8013db8:	7833      	ldrb	r3, [r6, #0]
 8013dba:	3b01      	subs	r3, #1
 8013dbc:	4604      	mov	r4, r0
 8013dbe:	2b0d      	cmp	r3, #13
 8013dc0:	d809      	bhi.n	8013dd6 <uxr_deserialize_ObjectVariant+0x2a>
 8013dc2:	e8df f003 	tbb	[pc, r3]
 8013dc6:	0a41      	.short	0x0a41
 8013dc8:	0a0a2323 	.word	0x0a0a2323
 8013dcc:	10080a0a 	.word	0x10080a0a
 8013dd0:	565c1010 	.word	0x565c1010
 8013dd4:	2400      	movs	r4, #0
 8013dd6:	4620      	mov	r0, r4
 8013dd8:	bd70      	pop	{r4, r5, r6, pc}
 8013dda:	1d31      	adds	r1, r6, #4
 8013ddc:	4628      	mov	r0, r5
 8013dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013de2:	f7ff be41 	b.w	8013a68 <uxr_deserialize_DATAWRITER_Representation>
 8013de6:	1d31      	adds	r1, r6, #4
 8013de8:	4628      	mov	r0, r5
 8013dea:	f7fc ff1b 	bl	8010c24 <ucdr_deserialize_uint8_t>
 8013dee:	2800      	cmp	r0, #0
 8013df0:	d0f0      	beq.n	8013dd4 <uxr_deserialize_ObjectVariant+0x28>
 8013df2:	7933      	ldrb	r3, [r6, #4]
 8013df4:	2b01      	cmp	r3, #1
 8013df6:	d001      	beq.n	8013dfc <uxr_deserialize_ObjectVariant+0x50>
 8013df8:	2b02      	cmp	r3, #2
 8013dfa:	d1ec      	bne.n	8013dd6 <uxr_deserialize_ObjectVariant+0x2a>
 8013dfc:	68b1      	ldr	r1, [r6, #8]
 8013dfe:	4628      	mov	r0, r5
 8013e00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e08:	f002 bc62 	b.w	80166d0 <ucdr_deserialize_string>
 8013e0c:	1d31      	adds	r1, r6, #4
 8013e0e:	4628      	mov	r0, r5
 8013e10:	f7fc ff08 	bl	8010c24 <ucdr_deserialize_uint8_t>
 8013e14:	4604      	mov	r4, r0
 8013e16:	b170      	cbz	r0, 8013e36 <uxr_deserialize_ObjectVariant+0x8a>
 8013e18:	7933      	ldrb	r3, [r6, #4]
 8013e1a:	2b02      	cmp	r3, #2
 8013e1c:	d04c      	beq.n	8013eb8 <uxr_deserialize_ObjectVariant+0x10c>
 8013e1e:	2b03      	cmp	r3, #3
 8013e20:	d109      	bne.n	8013e36 <uxr_deserialize_ObjectVariant+0x8a>
 8013e22:	f106 0308 	add.w	r3, r6, #8
 8013e26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013e2a:	f106 010c 	add.w	r1, r6, #12
 8013e2e:	4628      	mov	r0, r5
 8013e30:	f002 fc24 	bl	801667c <ucdr_deserialize_sequence_uint8_t>
 8013e34:	4604      	mov	r4, r0
 8013e36:	2202      	movs	r2, #2
 8013e38:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013e3c:	4628      	mov	r0, r5
 8013e3e:	f002 fb7b 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 8013e42:	4020      	ands	r0, r4
 8013e44:	b2c4      	uxtb	r4, r0
 8013e46:	e7c6      	b.n	8013dd6 <uxr_deserialize_ObjectVariant+0x2a>
 8013e48:	1d31      	adds	r1, r6, #4
 8013e4a:	4628      	mov	r0, r5
 8013e4c:	f7fc feea 	bl	8010c24 <ucdr_deserialize_uint8_t>
 8013e50:	4604      	mov	r4, r0
 8013e52:	b130      	cbz	r0, 8013e62 <uxr_deserialize_ObjectVariant+0xb6>
 8013e54:	7933      	ldrb	r3, [r6, #4]
 8013e56:	2b02      	cmp	r3, #2
 8013e58:	d036      	beq.n	8013ec8 <uxr_deserialize_ObjectVariant+0x11c>
 8013e5a:	2b03      	cmp	r3, #3
 8013e5c:	d03c      	beq.n	8013ed8 <uxr_deserialize_ObjectVariant+0x12c>
 8013e5e:	2b01      	cmp	r3, #1
 8013e60:	d032      	beq.n	8013ec8 <uxr_deserialize_ObjectVariant+0x11c>
 8013e62:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013e66:	4628      	mov	r0, r5
 8013e68:	f7fd fc82 	bl	8011770 <ucdr_deserialize_int16_t>
 8013e6c:	4020      	ands	r0, r4
 8013e6e:	b2c4      	uxtb	r4, r0
 8013e70:	e7b1      	b.n	8013dd6 <uxr_deserialize_ObjectVariant+0x2a>
 8013e72:	1d31      	adds	r1, r6, #4
 8013e74:	4628      	mov	r0, r5
 8013e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e7a:	f7ff bcab 	b.w	80137d4 <uxr_deserialize_CLIENT_Representation>
 8013e7e:	2204      	movs	r2, #4
 8013e80:	18b1      	adds	r1, r6, r2
 8013e82:	4628      	mov	r0, r5
 8013e84:	f002 fb58 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 8013e88:	2202      	movs	r2, #2
 8013e8a:	f106 0108 	add.w	r1, r6, #8
 8013e8e:	4604      	mov	r4, r0
 8013e90:	4628      	mov	r0, r5
 8013e92:	f002 fb51 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 8013e96:	2202      	movs	r2, #2
 8013e98:	4004      	ands	r4, r0
 8013e9a:	f106 010a 	add.w	r1, r6, #10
 8013e9e:	4628      	mov	r0, r5
 8013ea0:	f002 fb4a 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 8013ea4:	b2e4      	uxtb	r4, r4
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	f106 010c 	add.w	r1, r6, #12
 8013eac:	4628      	mov	r0, r5
 8013eae:	401c      	ands	r4, r3
 8013eb0:	f7fc fe8a 	bl	8010bc8 <ucdr_deserialize_bool>
 8013eb4:	4004      	ands	r4, r0
 8013eb6:	e78e      	b.n	8013dd6 <uxr_deserialize_ObjectVariant+0x2a>
 8013eb8:	68b1      	ldr	r1, [r6, #8]
 8013eba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ebe:	4628      	mov	r0, r5
 8013ec0:	f002 fc06 	bl	80166d0 <ucdr_deserialize_string>
 8013ec4:	4604      	mov	r4, r0
 8013ec6:	e7b6      	b.n	8013e36 <uxr_deserialize_ObjectVariant+0x8a>
 8013ec8:	68b1      	ldr	r1, [r6, #8]
 8013eca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ece:	4628      	mov	r0, r5
 8013ed0:	f002 fbfe 	bl	80166d0 <ucdr_deserialize_string>
 8013ed4:	4604      	mov	r4, r0
 8013ed6:	e7c4      	b.n	8013e62 <uxr_deserialize_ObjectVariant+0xb6>
 8013ed8:	f106 0308 	add.w	r3, r6, #8
 8013edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ee0:	f106 010c 	add.w	r1, r6, #12
 8013ee4:	4628      	mov	r0, r5
 8013ee6:	f002 fbc9 	bl	801667c <ucdr_deserialize_sequence_uint8_t>
 8013eea:	4604      	mov	r4, r0
 8013eec:	e7b9      	b.n	8013e62 <uxr_deserialize_ObjectVariant+0xb6>
 8013eee:	bf00      	nop

08013ef0 <uxr_deserialize_BaseObjectRequest>:
 8013ef0:	b570      	push	{r4, r5, r6, lr}
 8013ef2:	2202      	movs	r2, #2
 8013ef4:	4605      	mov	r5, r0
 8013ef6:	460e      	mov	r6, r1
 8013ef8:	f002 fb1e 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 8013efc:	2202      	movs	r2, #2
 8013efe:	4604      	mov	r4, r0
 8013f00:	18b1      	adds	r1, r6, r2
 8013f02:	4628      	mov	r0, r5
 8013f04:	f002 fb18 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 8013f08:	4020      	ands	r0, r4
 8013f0a:	b2c0      	uxtb	r0, r0
 8013f0c:	bd70      	pop	{r4, r5, r6, pc}
 8013f0e:	bf00      	nop

08013f10 <uxr_serialize_ActivityInfoVariant>:
 8013f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f14:	460d      	mov	r5, r1
 8013f16:	7809      	ldrb	r1, [r1, #0]
 8013f18:	4607      	mov	r7, r0
 8013f1a:	f7fc fe6d 	bl	8010bf8 <ucdr_serialize_uint8_t>
 8013f1e:	4681      	mov	r9, r0
 8013f20:	b138      	cbz	r0, 8013f32 <uxr_serialize_ActivityInfoVariant+0x22>
 8013f22:	782b      	ldrb	r3, [r5, #0]
 8013f24:	2b06      	cmp	r3, #6
 8013f26:	f000 8082 	beq.w	801402e <uxr_serialize_ActivityInfoVariant+0x11e>
 8013f2a:	2b0d      	cmp	r3, #13
 8013f2c:	d016      	beq.n	8013f5c <uxr_serialize_ActivityInfoVariant+0x4c>
 8013f2e:	2b05      	cmp	r3, #5
 8013f30:	d002      	beq.n	8013f38 <uxr_serialize_ActivityInfoVariant+0x28>
 8013f32:	4648      	mov	r0, r9
 8013f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f38:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013f3c:	4638      	mov	r0, r7
 8013f3e:	f7fd fb97 	bl	8011670 <ucdr_serialize_int16_t>
 8013f42:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013f46:	4681      	mov	r9, r0
 8013f48:	4638      	mov	r0, r7
 8013f4a:	f7fd fac1 	bl	80114d0 <ucdr_serialize_uint64_t>
 8013f4e:	ea09 0000 	and.w	r0, r9, r0
 8013f52:	fa5f f980 	uxtb.w	r9, r0
 8013f56:	4648      	mov	r0, r9
 8013f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f5c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013f60:	4638      	mov	r0, r7
 8013f62:	f7fd fb85 	bl	8011670 <ucdr_serialize_int16_t>
 8013f66:	68e9      	ldr	r1, [r5, #12]
 8013f68:	4681      	mov	r9, r0
 8013f6a:	4638      	mov	r0, r7
 8013f6c:	f7fd f85a 	bl	8011024 <ucdr_serialize_uint32_t>
 8013f70:	68eb      	ldr	r3, [r5, #12]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d0eb      	beq.n	8013f4e <uxr_serialize_ActivityInfoVariant+0x3e>
 8013f76:	b320      	cbz	r0, 8013fc2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8013f78:	f105 080c 	add.w	r8, r5, #12
 8013f7c:	2600      	movs	r6, #0
 8013f7e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8013f82:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8013f86:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8013f8a:	4638      	mov	r0, r7
 8013f8c:	f7fc fe34 	bl	8010bf8 <ucdr_serialize_uint8_t>
 8013f90:	2800      	cmp	r0, #0
 8013f92:	d053      	beq.n	801403c <uxr_serialize_ActivityInfoVariant+0x12c>
 8013f94:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8013f98:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8013f9c:	0074      	lsls	r4, r6, #1
 8013f9e:	00c9      	lsls	r1, r1, #3
 8013fa0:	2b03      	cmp	r3, #3
 8013fa2:	d854      	bhi.n	801404e <uxr_serialize_ActivityInfoVariant+0x13e>
 8013fa4:	e8df f003 	tbb	[pc, r3]
 8013fa8:	02102132 	.word	0x02102132
 8013fac:	4441      	add	r1, r8
 8013fae:	4638      	mov	r0, r7
 8013fb0:	6889      	ldr	r1, [r1, #8]
 8013fb2:	f002 fb7d 	bl	80166b0 <ucdr_serialize_string>
 8013fb6:	68ea      	ldr	r2, [r5, #12]
 8013fb8:	3601      	adds	r6, #1
 8013fba:	4296      	cmp	r6, r2
 8013fbc:	d242      	bcs.n	8014044 <uxr_serialize_ActivityInfoVariant+0x134>
 8013fbe:	2800      	cmp	r0, #0
 8013fc0:	d1dd      	bne.n	8013f7e <uxr_serialize_ActivityInfoVariant+0x6e>
 8013fc2:	f04f 0900 	mov.w	r9, #0
 8013fc6:	e7b4      	b.n	8013f32 <uxr_serialize_ActivityInfoVariant+0x22>
 8013fc8:	3108      	adds	r1, #8
 8013fca:	4441      	add	r1, r8
 8013fcc:	2210      	movs	r2, #16
 8013fce:	4638      	mov	r0, r7
 8013fd0:	f002 fa4e 	bl	8016470 <ucdr_serialize_array_uint8_t>
 8013fd4:	4434      	add	r4, r6
 8013fd6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013fda:	4604      	mov	r4, r0
 8013fdc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013fde:	4638      	mov	r0, r7
 8013fe0:	f7fd f820 	bl	8011024 <ucdr_serialize_uint32_t>
 8013fe4:	4020      	ands	r0, r4
 8013fe6:	b2c0      	uxtb	r0, r0
 8013fe8:	e7e5      	b.n	8013fb6 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013fea:	3108      	adds	r1, #8
 8013fec:	4441      	add	r1, r8
 8013fee:	2204      	movs	r2, #4
 8013ff0:	4638      	mov	r0, r7
 8013ff2:	f002 fa3d 	bl	8016470 <ucdr_serialize_array_uint8_t>
 8013ff6:	4434      	add	r4, r6
 8013ff8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013ffc:	4604      	mov	r4, r0
 8013ffe:	8b19      	ldrh	r1, [r3, #24]
 8014000:	4638      	mov	r0, r7
 8014002:	f7fc fe25 	bl	8010c50 <ucdr_serialize_uint16_t>
 8014006:	4020      	ands	r0, r4
 8014008:	b2c0      	uxtb	r0, r0
 801400a:	e7d4      	b.n	8013fb6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801400c:	3108      	adds	r1, #8
 801400e:	4441      	add	r1, r8
 8014010:	2202      	movs	r2, #2
 8014012:	4638      	mov	r0, r7
 8014014:	f002 fa2c 	bl	8016470 <ucdr_serialize_array_uint8_t>
 8014018:	4434      	add	r4, r6
 801401a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801401e:	4604      	mov	r4, r0
 8014020:	7d99      	ldrb	r1, [r3, #22]
 8014022:	4638      	mov	r0, r7
 8014024:	f7fc fde8 	bl	8010bf8 <ucdr_serialize_uint8_t>
 8014028:	4020      	ands	r0, r4
 801402a:	b2c0      	uxtb	r0, r0
 801402c:	e7c3      	b.n	8013fb6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801402e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014032:	4638      	mov	r0, r7
 8014034:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014038:	f7fd bb1a 	b.w	8011670 <ucdr_serialize_int16_t>
 801403c:	68ea      	ldr	r2, [r5, #12]
 801403e:	3601      	adds	r6, #1
 8014040:	42b2      	cmp	r2, r6
 8014042:	d8be      	bhi.n	8013fc2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8014044:	ea09 0900 	and.w	r9, r9, r0
 8014048:	fa5f f989 	uxtb.w	r9, r9
 801404c:	e771      	b.n	8013f32 <uxr_serialize_ActivityInfoVariant+0x22>
 801404e:	68eb      	ldr	r3, [r5, #12]
 8014050:	3601      	adds	r6, #1
 8014052:	429e      	cmp	r6, r3
 8014054:	f10a 0a18 	add.w	sl, sl, #24
 8014058:	d395      	bcc.n	8013f86 <uxr_serialize_ActivityInfoVariant+0x76>
 801405a:	e76a      	b.n	8013f32 <uxr_serialize_ActivityInfoVariant+0x22>

0801405c <uxr_deserialize_BaseObjectReply>:
 801405c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014060:	2202      	movs	r2, #2
 8014062:	4606      	mov	r6, r0
 8014064:	460f      	mov	r7, r1
 8014066:	f002 fa67 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 801406a:	2202      	movs	r2, #2
 801406c:	18b9      	adds	r1, r7, r2
 801406e:	4605      	mov	r5, r0
 8014070:	4630      	mov	r0, r6
 8014072:	f002 fa61 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 8014076:	1d39      	adds	r1, r7, #4
 8014078:	4680      	mov	r8, r0
 801407a:	4630      	mov	r0, r6
 801407c:	f7fc fdd2 	bl	8010c24 <ucdr_deserialize_uint8_t>
 8014080:	1d79      	adds	r1, r7, #5
 8014082:	4604      	mov	r4, r0
 8014084:	4630      	mov	r0, r6
 8014086:	f7fc fdcd 	bl	8010c24 <ucdr_deserialize_uint8_t>
 801408a:	ea05 0508 	and.w	r5, r5, r8
 801408e:	402c      	ands	r4, r5
 8014090:	4020      	ands	r0, r4
 8014092:	b2c0      	uxtb	r0, r0
 8014094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014098 <uxr_serialize_ReadSpecification>:
 8014098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801409c:	460e      	mov	r6, r1
 801409e:	7809      	ldrb	r1, [r1, #0]
 80140a0:	4607      	mov	r7, r0
 80140a2:	f7fc fda9 	bl	8010bf8 <ucdr_serialize_uint8_t>
 80140a6:	7871      	ldrb	r1, [r6, #1]
 80140a8:	4604      	mov	r4, r0
 80140aa:	4638      	mov	r0, r7
 80140ac:	f7fc fda4 	bl	8010bf8 <ucdr_serialize_uint8_t>
 80140b0:	78b1      	ldrb	r1, [r6, #2]
 80140b2:	4004      	ands	r4, r0
 80140b4:	4638      	mov	r0, r7
 80140b6:	f7fc fd71 	bl	8010b9c <ucdr_serialize_bool>
 80140ba:	78b3      	ldrb	r3, [r6, #2]
 80140bc:	b2e4      	uxtb	r4, r4
 80140be:	4004      	ands	r4, r0
 80140c0:	b94b      	cbnz	r3, 80140d6 <uxr_serialize_ReadSpecification+0x3e>
 80140c2:	7a31      	ldrb	r1, [r6, #8]
 80140c4:	4638      	mov	r0, r7
 80140c6:	f7fc fd69 	bl	8010b9c <ucdr_serialize_bool>
 80140ca:	7a33      	ldrb	r3, [r6, #8]
 80140cc:	4004      	ands	r4, r0
 80140ce:	b943      	cbnz	r3, 80140e2 <uxr_serialize_ReadSpecification+0x4a>
 80140d0:	4620      	mov	r0, r4
 80140d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140d6:	6871      	ldr	r1, [r6, #4]
 80140d8:	4638      	mov	r0, r7
 80140da:	f002 fae9 	bl	80166b0 <ucdr_serialize_string>
 80140de:	4004      	ands	r4, r0
 80140e0:	e7ef      	b.n	80140c2 <uxr_serialize_ReadSpecification+0x2a>
 80140e2:	8971      	ldrh	r1, [r6, #10]
 80140e4:	4638      	mov	r0, r7
 80140e6:	f7fc fdb3 	bl	8010c50 <ucdr_serialize_uint16_t>
 80140ea:	89b1      	ldrh	r1, [r6, #12]
 80140ec:	4605      	mov	r5, r0
 80140ee:	4638      	mov	r0, r7
 80140f0:	f7fc fdae 	bl	8010c50 <ucdr_serialize_uint16_t>
 80140f4:	89f1      	ldrh	r1, [r6, #14]
 80140f6:	4005      	ands	r5, r0
 80140f8:	4638      	mov	r0, r7
 80140fa:	f7fc fda9 	bl	8010c50 <ucdr_serialize_uint16_t>
 80140fe:	8a31      	ldrh	r1, [r6, #16]
 8014100:	4680      	mov	r8, r0
 8014102:	4638      	mov	r0, r7
 8014104:	f7fc fda4 	bl	8010c50 <ucdr_serialize_uint16_t>
 8014108:	b2ed      	uxtb	r5, r5
 801410a:	4025      	ands	r5, r4
 801410c:	ea08 0505 	and.w	r5, r8, r5
 8014110:	ea00 0405 	and.w	r4, r0, r5
 8014114:	4620      	mov	r0, r4
 8014116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801411a:	bf00      	nop

0801411c <uxr_serialize_CREATE_CLIENT_Payload>:
 801411c:	f7ff bb02 	b.w	8013724 <uxr_serialize_CLIENT_Representation>

08014120 <uxr_serialize_CREATE_Payload>:
 8014120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014122:	2202      	movs	r2, #2
 8014124:	4607      	mov	r7, r0
 8014126:	460e      	mov	r6, r1
 8014128:	f002 f9a2 	bl	8016470 <ucdr_serialize_array_uint8_t>
 801412c:	2202      	movs	r2, #2
 801412e:	18b1      	adds	r1, r6, r2
 8014130:	4605      	mov	r5, r0
 8014132:	4638      	mov	r0, r7
 8014134:	f002 f99c 	bl	8016470 <ucdr_serialize_array_uint8_t>
 8014138:	7931      	ldrb	r1, [r6, #4]
 801413a:	4604      	mov	r4, r0
 801413c:	4638      	mov	r0, r7
 801413e:	f7fc fd5b 	bl	8010bf8 <ucdr_serialize_uint8_t>
 8014142:	b170      	cbz	r0, 8014162 <uxr_serialize_CREATE_Payload+0x42>
 8014144:	7933      	ldrb	r3, [r6, #4]
 8014146:	402c      	ands	r4, r5
 8014148:	3b01      	subs	r3, #1
 801414a:	b2e4      	uxtb	r4, r4
 801414c:	2b0d      	cmp	r3, #13
 801414e:	d809      	bhi.n	8014164 <uxr_serialize_CREATE_Payload+0x44>
 8014150:	e8df f003 	tbb	[pc, r3]
 8014154:	23230a4c 	.word	0x23230a4c
 8014158:	0a0a0a0a 	.word	0x0a0a0a0a
 801415c:	12121208 	.word	0x12121208
 8014160:	3e45      	.short	0x3e45
 8014162:	2400      	movs	r4, #0
 8014164:	4620      	mov	r0, r4
 8014166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014168:	f106 0108 	add.w	r1, r6, #8
 801416c:	4638      	mov	r0, r7
 801416e:	f7ff fbdf 	bl	8013930 <uxr_serialize_DATAWRITER_Representation>
 8014172:	4004      	ands	r4, r0
 8014174:	4620      	mov	r0, r4
 8014176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014178:	7a31      	ldrb	r1, [r6, #8]
 801417a:	4638      	mov	r0, r7
 801417c:	f7fc fd3c 	bl	8010bf8 <ucdr_serialize_uint8_t>
 8014180:	2800      	cmp	r0, #0
 8014182:	d0ee      	beq.n	8014162 <uxr_serialize_CREATE_Payload+0x42>
 8014184:	7a33      	ldrb	r3, [r6, #8]
 8014186:	2b01      	cmp	r3, #1
 8014188:	d001      	beq.n	801418e <uxr_serialize_CREATE_Payload+0x6e>
 801418a:	2b02      	cmp	r3, #2
 801418c:	d1ea      	bne.n	8014164 <uxr_serialize_CREATE_Payload+0x44>
 801418e:	68f1      	ldr	r1, [r6, #12]
 8014190:	4638      	mov	r0, r7
 8014192:	f002 fa8d 	bl	80166b0 <ucdr_serialize_string>
 8014196:	4004      	ands	r4, r0
 8014198:	e7e4      	b.n	8014164 <uxr_serialize_CREATE_Payload+0x44>
 801419a:	7a31      	ldrb	r1, [r6, #8]
 801419c:	4638      	mov	r0, r7
 801419e:	f7fc fd2b 	bl	8010bf8 <ucdr_serialize_uint8_t>
 80141a2:	4605      	mov	r5, r0
 80141a4:	b158      	cbz	r0, 80141be <uxr_serialize_CREATE_Payload+0x9e>
 80141a6:	7a33      	ldrb	r3, [r6, #8]
 80141a8:	2b02      	cmp	r3, #2
 80141aa:	d034      	beq.n	8014216 <uxr_serialize_CREATE_Payload+0xf6>
 80141ac:	2b03      	cmp	r3, #3
 80141ae:	d106      	bne.n	80141be <uxr_serialize_CREATE_Payload+0x9e>
 80141b0:	68f2      	ldr	r2, [r6, #12]
 80141b2:	f106 0110 	add.w	r1, r6, #16
 80141b6:	4638      	mov	r0, r7
 80141b8:	f002 fa4e 	bl	8016658 <ucdr_serialize_sequence_uint8_t>
 80141bc:	4605      	mov	r5, r0
 80141be:	2202      	movs	r2, #2
 80141c0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80141c4:	4638      	mov	r0, r7
 80141c6:	f002 f953 	bl	8016470 <ucdr_serialize_array_uint8_t>
 80141ca:	4028      	ands	r0, r5
 80141cc:	4004      	ands	r4, r0
 80141ce:	e7c9      	b.n	8014164 <uxr_serialize_CREATE_Payload+0x44>
 80141d0:	f106 0108 	add.w	r1, r6, #8
 80141d4:	4638      	mov	r0, r7
 80141d6:	f7ff faa5 	bl	8013724 <uxr_serialize_CLIENT_Representation>
 80141da:	4004      	ands	r4, r0
 80141dc:	e7c2      	b.n	8014164 <uxr_serialize_CREATE_Payload+0x44>
 80141de:	f106 0108 	add.w	r1, r6, #8
 80141e2:	4638      	mov	r0, r7
 80141e4:	f7ff fb5a 	bl	801389c <uxr_serialize_AGENT_Representation>
 80141e8:	4004      	ands	r4, r0
 80141ea:	e7bb      	b.n	8014164 <uxr_serialize_CREATE_Payload+0x44>
 80141ec:	7a31      	ldrb	r1, [r6, #8]
 80141ee:	4638      	mov	r0, r7
 80141f0:	f7fc fd02 	bl	8010bf8 <ucdr_serialize_uint8_t>
 80141f4:	4605      	mov	r5, r0
 80141f6:	b130      	cbz	r0, 8014206 <uxr_serialize_CREATE_Payload+0xe6>
 80141f8:	7a33      	ldrb	r3, [r6, #8]
 80141fa:	2b02      	cmp	r3, #2
 80141fc:	d011      	beq.n	8014222 <uxr_serialize_CREATE_Payload+0x102>
 80141fe:	2b03      	cmp	r3, #3
 8014200:	d015      	beq.n	801422e <uxr_serialize_CREATE_Payload+0x10e>
 8014202:	2b01      	cmp	r3, #1
 8014204:	d00d      	beq.n	8014222 <uxr_serialize_CREATE_Payload+0x102>
 8014206:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801420a:	4638      	mov	r0, r7
 801420c:	f7fd fa30 	bl	8011670 <ucdr_serialize_int16_t>
 8014210:	4028      	ands	r0, r5
 8014212:	4004      	ands	r4, r0
 8014214:	e7a6      	b.n	8014164 <uxr_serialize_CREATE_Payload+0x44>
 8014216:	68f1      	ldr	r1, [r6, #12]
 8014218:	4638      	mov	r0, r7
 801421a:	f002 fa49 	bl	80166b0 <ucdr_serialize_string>
 801421e:	4605      	mov	r5, r0
 8014220:	e7cd      	b.n	80141be <uxr_serialize_CREATE_Payload+0x9e>
 8014222:	68f1      	ldr	r1, [r6, #12]
 8014224:	4638      	mov	r0, r7
 8014226:	f002 fa43 	bl	80166b0 <ucdr_serialize_string>
 801422a:	4605      	mov	r5, r0
 801422c:	e7eb      	b.n	8014206 <uxr_serialize_CREATE_Payload+0xe6>
 801422e:	68f2      	ldr	r2, [r6, #12]
 8014230:	f106 0110 	add.w	r1, r6, #16
 8014234:	4638      	mov	r0, r7
 8014236:	f002 fa0f 	bl	8016658 <ucdr_serialize_sequence_uint8_t>
 801423a:	4605      	mov	r5, r0
 801423c:	e7e3      	b.n	8014206 <uxr_serialize_CREATE_Payload+0xe6>
 801423e:	bf00      	nop

08014240 <uxr_deserialize_GET_INFO_Payload>:
 8014240:	b570      	push	{r4, r5, r6, lr}
 8014242:	2202      	movs	r2, #2
 8014244:	4605      	mov	r5, r0
 8014246:	460e      	mov	r6, r1
 8014248:	f002 f976 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 801424c:	2202      	movs	r2, #2
 801424e:	18b1      	adds	r1, r6, r2
 8014250:	4604      	mov	r4, r0
 8014252:	4628      	mov	r0, r5
 8014254:	f002 f970 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 8014258:	1d31      	adds	r1, r6, #4
 801425a:	4004      	ands	r4, r0
 801425c:	4628      	mov	r0, r5
 801425e:	f7fd f811 	bl	8011284 <ucdr_deserialize_uint32_t>
 8014262:	b2e4      	uxtb	r4, r4
 8014264:	4020      	ands	r0, r4
 8014266:	bd70      	pop	{r4, r5, r6, pc}

08014268 <uxr_serialize_DELETE_Payload>:
 8014268:	b570      	push	{r4, r5, r6, lr}
 801426a:	2202      	movs	r2, #2
 801426c:	4605      	mov	r5, r0
 801426e:	460e      	mov	r6, r1
 8014270:	f002 f8fe 	bl	8016470 <ucdr_serialize_array_uint8_t>
 8014274:	2202      	movs	r2, #2
 8014276:	4604      	mov	r4, r0
 8014278:	18b1      	adds	r1, r6, r2
 801427a:	4628      	mov	r0, r5
 801427c:	f002 f8f8 	bl	8016470 <ucdr_serialize_array_uint8_t>
 8014280:	4020      	ands	r0, r4
 8014282:	b2c0      	uxtb	r0, r0
 8014284:	bd70      	pop	{r4, r5, r6, pc}
 8014286:	bf00      	nop

08014288 <uxr_deserialize_STATUS_AGENT_Payload>:
 8014288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801428c:	4605      	mov	r5, r0
 801428e:	460e      	mov	r6, r1
 8014290:	f7fc fcc8 	bl	8010c24 <ucdr_deserialize_uint8_t>
 8014294:	1c71      	adds	r1, r6, #1
 8014296:	4604      	mov	r4, r0
 8014298:	4628      	mov	r0, r5
 801429a:	f7fc fcc3 	bl	8010c24 <ucdr_deserialize_uint8_t>
 801429e:	2204      	movs	r2, #4
 80142a0:	18b1      	adds	r1, r6, r2
 80142a2:	4680      	mov	r8, r0
 80142a4:	4628      	mov	r0, r5
 80142a6:	f002 f947 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 80142aa:	f106 0108 	add.w	r1, r6, #8
 80142ae:	4607      	mov	r7, r0
 80142b0:	2202      	movs	r2, #2
 80142b2:	4628      	mov	r0, r5
 80142b4:	f002 f940 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 80142b8:	ea04 0308 	and.w	r3, r4, r8
 80142bc:	b2db      	uxtb	r3, r3
 80142be:	ea03 0407 	and.w	r4, r3, r7
 80142c2:	2202      	movs	r2, #2
 80142c4:	4607      	mov	r7, r0
 80142c6:	f106 010a 	add.w	r1, r6, #10
 80142ca:	4628      	mov	r0, r5
 80142cc:	f002 f934 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 80142d0:	f106 010c 	add.w	r1, r6, #12
 80142d4:	4603      	mov	r3, r0
 80142d6:	4628      	mov	r0, r5
 80142d8:	461d      	mov	r5, r3
 80142da:	f7fc fc75 	bl	8010bc8 <ucdr_deserialize_bool>
 80142de:	403c      	ands	r4, r7
 80142e0:	4025      	ands	r5, r4
 80142e2:	4028      	ands	r0, r5
 80142e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080142e8 <uxr_deserialize_STATUS_Payload>:
 80142e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142ec:	2202      	movs	r2, #2
 80142ee:	4606      	mov	r6, r0
 80142f0:	460f      	mov	r7, r1
 80142f2:	f002 f921 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 80142f6:	2202      	movs	r2, #2
 80142f8:	18b9      	adds	r1, r7, r2
 80142fa:	4605      	mov	r5, r0
 80142fc:	4630      	mov	r0, r6
 80142fe:	f002 f91b 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 8014302:	1d39      	adds	r1, r7, #4
 8014304:	4680      	mov	r8, r0
 8014306:	4630      	mov	r0, r6
 8014308:	f7fc fc8c 	bl	8010c24 <ucdr_deserialize_uint8_t>
 801430c:	1d79      	adds	r1, r7, #5
 801430e:	4604      	mov	r4, r0
 8014310:	4630      	mov	r0, r6
 8014312:	f7fc fc87 	bl	8010c24 <ucdr_deserialize_uint8_t>
 8014316:	ea05 0508 	and.w	r5, r5, r8
 801431a:	402c      	ands	r4, r5
 801431c:	4020      	ands	r0, r4
 801431e:	b2c0      	uxtb	r0, r0
 8014320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014324 <uxr_serialize_INFO_Payload>:
 8014324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014328:	2202      	movs	r2, #2
 801432a:	460c      	mov	r4, r1
 801432c:	4605      	mov	r5, r0
 801432e:	f002 f89f 	bl	8016470 <ucdr_serialize_array_uint8_t>
 8014332:	2202      	movs	r2, #2
 8014334:	18a1      	adds	r1, r4, r2
 8014336:	4680      	mov	r8, r0
 8014338:	4628      	mov	r0, r5
 801433a:	f002 f899 	bl	8016470 <ucdr_serialize_array_uint8_t>
 801433e:	7921      	ldrb	r1, [r4, #4]
 8014340:	4607      	mov	r7, r0
 8014342:	4628      	mov	r0, r5
 8014344:	f7fc fc58 	bl	8010bf8 <ucdr_serialize_uint8_t>
 8014348:	7961      	ldrb	r1, [r4, #5]
 801434a:	4606      	mov	r6, r0
 801434c:	4628      	mov	r0, r5
 801434e:	f7fc fc53 	bl	8010bf8 <ucdr_serialize_uint8_t>
 8014352:	ea08 0807 	and.w	r8, r8, r7
 8014356:	ea06 0608 	and.w	r6, r6, r8
 801435a:	4006      	ands	r6, r0
 801435c:	7a21      	ldrb	r1, [r4, #8]
 801435e:	4628      	mov	r0, r5
 8014360:	f7fc fc1c 	bl	8010b9c <ucdr_serialize_bool>
 8014364:	7a23      	ldrb	r3, [r4, #8]
 8014366:	b2f7      	uxtb	r7, r6
 8014368:	4606      	mov	r6, r0
 801436a:	b96b      	cbnz	r3, 8014388 <uxr_serialize_INFO_Payload+0x64>
 801436c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014370:	4628      	mov	r0, r5
 8014372:	f7fc fc13 	bl	8010b9c <ucdr_serialize_bool>
 8014376:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801437a:	4030      	ands	r0, r6
 801437c:	b2c6      	uxtb	r6, r0
 801437e:	b983      	cbnz	r3, 80143a2 <uxr_serialize_INFO_Payload+0x7e>
 8014380:	ea06 0007 	and.w	r0, r6, r7
 8014384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014388:	7b21      	ldrb	r1, [r4, #12]
 801438a:	4628      	mov	r0, r5
 801438c:	f7fc fc34 	bl	8010bf8 <ucdr_serialize_uint8_t>
 8014390:	b188      	cbz	r0, 80143b6 <uxr_serialize_INFO_Payload+0x92>
 8014392:	f104 010c 	add.w	r1, r4, #12
 8014396:	4628      	mov	r0, r5
 8014398:	f7ff faf2 	bl	8013980 <uxr_serialize_ObjectVariant.part.0>
 801439c:	4030      	ands	r0, r6
 801439e:	b2c6      	uxtb	r6, r0
 80143a0:	e7e4      	b.n	801436c <uxr_serialize_INFO_Payload+0x48>
 80143a2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80143a6:	4628      	mov	r0, r5
 80143a8:	f7ff fdb2 	bl	8013f10 <uxr_serialize_ActivityInfoVariant>
 80143ac:	4006      	ands	r6, r0
 80143ae:	ea06 0007 	and.w	r0, r6, r7
 80143b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143b6:	4606      	mov	r6, r0
 80143b8:	e7d8      	b.n	801436c <uxr_serialize_INFO_Payload+0x48>
 80143ba:	bf00      	nop

080143bc <uxr_serialize_READ_DATA_Payload>:
 80143bc:	b570      	push	{r4, r5, r6, lr}
 80143be:	2202      	movs	r2, #2
 80143c0:	4605      	mov	r5, r0
 80143c2:	460e      	mov	r6, r1
 80143c4:	f002 f854 	bl	8016470 <ucdr_serialize_array_uint8_t>
 80143c8:	2202      	movs	r2, #2
 80143ca:	18b1      	adds	r1, r6, r2
 80143cc:	4604      	mov	r4, r0
 80143ce:	4628      	mov	r0, r5
 80143d0:	f002 f84e 	bl	8016470 <ucdr_serialize_array_uint8_t>
 80143d4:	1d31      	adds	r1, r6, #4
 80143d6:	4004      	ands	r4, r0
 80143d8:	4628      	mov	r0, r5
 80143da:	f7ff fe5d 	bl	8014098 <uxr_serialize_ReadSpecification>
 80143de:	b2e4      	uxtb	r4, r4
 80143e0:	4020      	ands	r0, r4
 80143e2:	bd70      	pop	{r4, r5, r6, pc}

080143e4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80143e4:	b570      	push	{r4, r5, r6, lr}
 80143e6:	2202      	movs	r2, #2
 80143e8:	4605      	mov	r5, r0
 80143ea:	460e      	mov	r6, r1
 80143ec:	f002 f840 	bl	8016470 <ucdr_serialize_array_uint8_t>
 80143f0:	2202      	movs	r2, #2
 80143f2:	4604      	mov	r4, r0
 80143f4:	18b1      	adds	r1, r6, r2
 80143f6:	4628      	mov	r0, r5
 80143f8:	f002 f83a 	bl	8016470 <ucdr_serialize_array_uint8_t>
 80143fc:	4020      	ands	r0, r4
 80143fe:	b2c0      	uxtb	r0, r0
 8014400:	bd70      	pop	{r4, r5, r6, pc}
 8014402:	bf00      	nop

08014404 <uxr_serialize_ACKNACK_Payload>:
 8014404:	b570      	push	{r4, r5, r6, lr}
 8014406:	460c      	mov	r4, r1
 8014408:	460e      	mov	r6, r1
 801440a:	f834 1b02 	ldrh.w	r1, [r4], #2
 801440e:	4605      	mov	r5, r0
 8014410:	f7fc fc1e 	bl	8010c50 <ucdr_serialize_uint16_t>
 8014414:	2202      	movs	r2, #2
 8014416:	4621      	mov	r1, r4
 8014418:	4604      	mov	r4, r0
 801441a:	4628      	mov	r0, r5
 801441c:	f002 f828 	bl	8016470 <ucdr_serialize_array_uint8_t>
 8014420:	7931      	ldrb	r1, [r6, #4]
 8014422:	4004      	ands	r4, r0
 8014424:	4628      	mov	r0, r5
 8014426:	f7fc fbe7 	bl	8010bf8 <ucdr_serialize_uint8_t>
 801442a:	b2e4      	uxtb	r4, r4
 801442c:	4020      	ands	r0, r4
 801442e:	bd70      	pop	{r4, r5, r6, pc}

08014430 <uxr_deserialize_ACKNACK_Payload>:
 8014430:	b570      	push	{r4, r5, r6, lr}
 8014432:	4605      	mov	r5, r0
 8014434:	460e      	mov	r6, r1
 8014436:	f7fc fd0b 	bl	8010e50 <ucdr_deserialize_uint16_t>
 801443a:	2202      	movs	r2, #2
 801443c:	18b1      	adds	r1, r6, r2
 801443e:	4604      	mov	r4, r0
 8014440:	4628      	mov	r0, r5
 8014442:	f002 f879 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 8014446:	1d31      	adds	r1, r6, #4
 8014448:	4004      	ands	r4, r0
 801444a:	4628      	mov	r0, r5
 801444c:	f7fc fbea 	bl	8010c24 <ucdr_deserialize_uint8_t>
 8014450:	b2e4      	uxtb	r4, r4
 8014452:	4020      	ands	r0, r4
 8014454:	bd70      	pop	{r4, r5, r6, pc}
 8014456:	bf00      	nop

08014458 <uxr_serialize_HEARTBEAT_Payload>:
 8014458:	b570      	push	{r4, r5, r6, lr}
 801445a:	460d      	mov	r5, r1
 801445c:	8809      	ldrh	r1, [r1, #0]
 801445e:	4606      	mov	r6, r0
 8014460:	f7fc fbf6 	bl	8010c50 <ucdr_serialize_uint16_t>
 8014464:	8869      	ldrh	r1, [r5, #2]
 8014466:	4604      	mov	r4, r0
 8014468:	4630      	mov	r0, r6
 801446a:	f7fc fbf1 	bl	8010c50 <ucdr_serialize_uint16_t>
 801446e:	7929      	ldrb	r1, [r5, #4]
 8014470:	4004      	ands	r4, r0
 8014472:	4630      	mov	r0, r6
 8014474:	f7fc fbc0 	bl	8010bf8 <ucdr_serialize_uint8_t>
 8014478:	b2e4      	uxtb	r4, r4
 801447a:	4020      	ands	r0, r4
 801447c:	bd70      	pop	{r4, r5, r6, pc}
 801447e:	bf00      	nop

08014480 <uxr_deserialize_HEARTBEAT_Payload>:
 8014480:	b570      	push	{r4, r5, r6, lr}
 8014482:	4605      	mov	r5, r0
 8014484:	460e      	mov	r6, r1
 8014486:	f7fc fce3 	bl	8010e50 <ucdr_deserialize_uint16_t>
 801448a:	1cb1      	adds	r1, r6, #2
 801448c:	4604      	mov	r4, r0
 801448e:	4628      	mov	r0, r5
 8014490:	f7fc fcde 	bl	8010e50 <ucdr_deserialize_uint16_t>
 8014494:	1d31      	adds	r1, r6, #4
 8014496:	4004      	ands	r4, r0
 8014498:	4628      	mov	r0, r5
 801449a:	f7fc fbc3 	bl	8010c24 <ucdr_deserialize_uint8_t>
 801449e:	b2e4      	uxtb	r4, r4
 80144a0:	4020      	ands	r0, r4
 80144a2:	bd70      	pop	{r4, r5, r6, pc}

080144a4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80144a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144a8:	4605      	mov	r5, r0
 80144aa:	460e      	mov	r6, r1
 80144ac:	f7fd fa6c 	bl	8011988 <ucdr_deserialize_int32_t>
 80144b0:	1d31      	adds	r1, r6, #4
 80144b2:	4607      	mov	r7, r0
 80144b4:	4628      	mov	r0, r5
 80144b6:	f7fc fee5 	bl	8011284 <ucdr_deserialize_uint32_t>
 80144ba:	f106 0108 	add.w	r1, r6, #8
 80144be:	4680      	mov	r8, r0
 80144c0:	4628      	mov	r0, r5
 80144c2:	f7fd fa61 	bl	8011988 <ucdr_deserialize_int32_t>
 80144c6:	f106 010c 	add.w	r1, r6, #12
 80144ca:	4604      	mov	r4, r0
 80144cc:	4628      	mov	r0, r5
 80144ce:	f7fc fed9 	bl	8011284 <ucdr_deserialize_uint32_t>
 80144d2:	ea07 0708 	and.w	r7, r7, r8
 80144d6:	403c      	ands	r4, r7
 80144d8:	f106 0110 	add.w	r1, r6, #16
 80144dc:	4004      	ands	r4, r0
 80144de:	4628      	mov	r0, r5
 80144e0:	f7fd fa52 	bl	8011988 <ucdr_deserialize_int32_t>
 80144e4:	f106 0114 	add.w	r1, r6, #20
 80144e8:	4607      	mov	r7, r0
 80144ea:	4628      	mov	r0, r5
 80144ec:	f7fc feca 	bl	8011284 <ucdr_deserialize_uint32_t>
 80144f0:	b2e4      	uxtb	r4, r4
 80144f2:	403c      	ands	r4, r7
 80144f4:	4020      	ands	r0, r4
 80144f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144fa:	bf00      	nop

080144fc <uxr_deserialize_SampleIdentity>:
 80144fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014500:	220c      	movs	r2, #12
 8014502:	4604      	mov	r4, r0
 8014504:	460d      	mov	r5, r1
 8014506:	f002 f817 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 801450a:	2203      	movs	r2, #3
 801450c:	f105 010c 	add.w	r1, r5, #12
 8014510:	4607      	mov	r7, r0
 8014512:	4620      	mov	r0, r4
 8014514:	f002 f810 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 8014518:	f105 010f 	add.w	r1, r5, #15
 801451c:	4680      	mov	r8, r0
 801451e:	4620      	mov	r0, r4
 8014520:	f7fc fb80 	bl	8010c24 <ucdr_deserialize_uint8_t>
 8014524:	f105 0110 	add.w	r1, r5, #16
 8014528:	4606      	mov	r6, r0
 801452a:	4620      	mov	r0, r4
 801452c:	f7fd fa2c 	bl	8011988 <ucdr_deserialize_int32_t>
 8014530:	f105 0114 	add.w	r1, r5, #20
 8014534:	4603      	mov	r3, r0
 8014536:	4620      	mov	r0, r4
 8014538:	ea07 0708 	and.w	r7, r7, r8
 801453c:	461c      	mov	r4, r3
 801453e:	f7fc fea1 	bl	8011284 <ucdr_deserialize_uint32_t>
 8014542:	403e      	ands	r6, r7
 8014544:	4034      	ands	r4, r6
 8014546:	4020      	ands	r0, r4
 8014548:	b2c0      	uxtb	r0, r0
 801454a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801454e:	bf00      	nop

08014550 <rcl_convert_rmw_ret_to_rcl_ret>:
 8014550:	280b      	cmp	r0, #11
 8014552:	dc0d      	bgt.n	8014570 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014554:	2800      	cmp	r0, #0
 8014556:	db09      	blt.n	801456c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014558:	280b      	cmp	r0, #11
 801455a:	d807      	bhi.n	801456c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801455c:	e8df f000 	tbb	[pc, r0]
 8014560:	07060607 	.word	0x07060607
 8014564:	06060606 	.word	0x06060606
 8014568:	07070606 	.word	0x07070606
 801456c:	2001      	movs	r0, #1
 801456e:	4770      	bx	lr
 8014570:	28cb      	cmp	r0, #203	@ 0xcb
 8014572:	bf18      	it	ne
 8014574:	2001      	movne	r0, #1
 8014576:	4770      	bx	lr

08014578 <rcl_get_zero_initialized_context>:
 8014578:	4a03      	ldr	r2, [pc, #12]	@ (8014588 <rcl_get_zero_initialized_context+0x10>)
 801457a:	4603      	mov	r3, r0
 801457c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014580:	e883 0003 	stmia.w	r3, {r0, r1}
 8014584:	4618      	mov	r0, r3
 8014586:	4770      	bx	lr
 8014588:	0801a33c 	.word	0x0801a33c

0801458c <rcl_context_is_valid>:
 801458c:	b118      	cbz	r0, 8014596 <rcl_context_is_valid+0xa>
 801458e:	6840      	ldr	r0, [r0, #4]
 8014590:	3800      	subs	r0, #0
 8014592:	bf18      	it	ne
 8014594:	2001      	movne	r0, #1
 8014596:	4770      	bx	lr

08014598 <__cleanup_context>:
 8014598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801459c:	4606      	mov	r6, r0
 801459e:	6800      	ldr	r0, [r0, #0]
 80145a0:	2300      	movs	r3, #0
 80145a2:	6073      	str	r3, [r6, #4]
 80145a4:	2800      	cmp	r0, #0
 80145a6:	d049      	beq.n	801463c <__cleanup_context+0xa4>
 80145a8:	6947      	ldr	r7, [r0, #20]
 80145aa:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80145ae:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80145b2:	b137      	cbz	r7, 80145c2 <__cleanup_context+0x2a>
 80145b4:	3014      	adds	r0, #20
 80145b6:	f000 f9a5 	bl	8014904 <rcl_init_options_fini>
 80145ba:	4607      	mov	r7, r0
 80145bc:	2800      	cmp	r0, #0
 80145be:	d144      	bne.n	801464a <__cleanup_context+0xb2>
 80145c0:	6830      	ldr	r0, [r6, #0]
 80145c2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80145c4:	b143      	cbz	r3, 80145d8 <__cleanup_context+0x40>
 80145c6:	3028      	adds	r0, #40	@ 0x28
 80145c8:	f001 fc38 	bl	8015e3c <rmw_context_fini>
 80145cc:	b118      	cbz	r0, 80145d6 <__cleanup_context+0x3e>
 80145ce:	2f00      	cmp	r7, #0
 80145d0:	d03e      	beq.n	8014650 <__cleanup_context+0xb8>
 80145d2:	f7fb fde5 	bl	80101a0 <rcutils_reset_error>
 80145d6:	6830      	ldr	r0, [r6, #0]
 80145d8:	6a03      	ldr	r3, [r0, #32]
 80145da:	b1db      	cbz	r3, 8014614 <__cleanup_context+0x7c>
 80145dc:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80145e0:	2a01      	cmp	r2, #1
 80145e2:	f17c 0100 	sbcs.w	r1, ip, #0
 80145e6:	db11      	blt.n	801460c <__cleanup_context+0x74>
 80145e8:	2400      	movs	r4, #0
 80145ea:	4625      	mov	r5, r4
 80145ec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80145f0:	4649      	mov	r1, r9
 80145f2:	b1b8      	cbz	r0, 8014624 <__cleanup_context+0x8c>
 80145f4:	47c0      	blx	r8
 80145f6:	6833      	ldr	r3, [r6, #0]
 80145f8:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80145fc:	3401      	adds	r4, #1
 80145fe:	f145 0500 	adc.w	r5, r5, #0
 8014602:	4294      	cmp	r4, r2
 8014604:	eb75 010c 	sbcs.w	r1, r5, ip
 8014608:	6a1b      	ldr	r3, [r3, #32]
 801460a:	dbef      	blt.n	80145ec <__cleanup_context+0x54>
 801460c:	4618      	mov	r0, r3
 801460e:	4649      	mov	r1, r9
 8014610:	47c0      	blx	r8
 8014612:	6830      	ldr	r0, [r6, #0]
 8014614:	4649      	mov	r1, r9
 8014616:	47c0      	blx	r8
 8014618:	2300      	movs	r3, #0
 801461a:	e9c6 3300 	strd	r3, r3, [r6]
 801461e:	4638      	mov	r0, r7
 8014620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014624:	3401      	adds	r4, #1
 8014626:	f145 0500 	adc.w	r5, r5, #0
 801462a:	4294      	cmp	r4, r2
 801462c:	eb75 010c 	sbcs.w	r1, r5, ip
 8014630:	dbdc      	blt.n	80145ec <__cleanup_context+0x54>
 8014632:	4618      	mov	r0, r3
 8014634:	4649      	mov	r1, r9
 8014636:	47c0      	blx	r8
 8014638:	6830      	ldr	r0, [r6, #0]
 801463a:	e7eb      	b.n	8014614 <__cleanup_context+0x7c>
 801463c:	4607      	mov	r7, r0
 801463e:	2300      	movs	r3, #0
 8014640:	e9c6 3300 	strd	r3, r3, [r6]
 8014644:	4638      	mov	r0, r7
 8014646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801464a:	f7fb fda9 	bl	80101a0 <rcutils_reset_error>
 801464e:	e7b7      	b.n	80145c0 <__cleanup_context+0x28>
 8014650:	f7ff ff7e 	bl	8014550 <rcl_convert_rmw_ret_to_rcl_ret>
 8014654:	4607      	mov	r7, r0
 8014656:	e7bc      	b.n	80145d2 <__cleanup_context+0x3a>

08014658 <rcl_init>:
 8014658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801465c:	1e05      	subs	r5, r0, #0
 801465e:	b09c      	sub	sp, #112	@ 0x70
 8014660:	460e      	mov	r6, r1
 8014662:	4690      	mov	r8, r2
 8014664:	461f      	mov	r7, r3
 8014666:	f340 8099 	ble.w	801479c <rcl_init+0x144>
 801466a:	2900      	cmp	r1, #0
 801466c:	f000 8099 	beq.w	80147a2 <rcl_init+0x14a>
 8014670:	f1a1 0e04 	sub.w	lr, r1, #4
 8014674:	f04f 0c00 	mov.w	ip, #0
 8014678:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801467c:	f10c 0c01 	add.w	ip, ip, #1
 8014680:	2c00      	cmp	r4, #0
 8014682:	f000 808e 	beq.w	80147a2 <rcl_init+0x14a>
 8014686:	4565      	cmp	r5, ip
 8014688:	d1f6      	bne.n	8014678 <rcl_init+0x20>
 801468a:	f1b8 0f00 	cmp.w	r8, #0
 801468e:	f000 8088 	beq.w	80147a2 <rcl_init+0x14a>
 8014692:	f8d8 4000 	ldr.w	r4, [r8]
 8014696:	2c00      	cmp	r4, #0
 8014698:	f000 8083 	beq.w	80147a2 <rcl_init+0x14a>
 801469c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801469e:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80146a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146a6:	6823      	ldr	r3, [r4, #0]
 80146a8:	f8cc 3000 	str.w	r3, [ip]
 80146ac:	a817      	add	r0, sp, #92	@ 0x5c
 80146ae:	f7fb fd51 	bl	8010154 <rcutils_allocator_is_valid>
 80146b2:	2800      	cmp	r0, #0
 80146b4:	d075      	beq.n	80147a2 <rcl_init+0x14a>
 80146b6:	2f00      	cmp	r7, #0
 80146b8:	d073      	beq.n	80147a2 <rcl_init+0x14a>
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d175      	bne.n	80147ac <rcl_init+0x154>
 80146c0:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 80146c4:	2178      	movs	r1, #120	@ 0x78
 80146c6:	2001      	movs	r0, #1
 80146c8:	4798      	blx	r3
 80146ca:	4604      	mov	r4, r0
 80146cc:	6038      	str	r0, [r7, #0]
 80146ce:	2800      	cmp	r0, #0
 80146d0:	f000 80a0 	beq.w	8014814 <rcl_init+0x1bc>
 80146d4:	a802      	add	r0, sp, #8
 80146d6:	f000 ffcb 	bl	8015670 <rmw_get_zero_initialized_context>
 80146da:	a902      	add	r1, sp, #8
 80146dc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80146e0:	2250      	movs	r2, #80	@ 0x50
 80146e2:	ac17      	add	r4, sp, #92	@ 0x5c
 80146e4:	f004 fdb3 	bl	801924e <memcpy>
 80146e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146ea:	f8d7 e000 	ldr.w	lr, [r7]
 80146ee:	46f4      	mov	ip, lr
 80146f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146f4:	6823      	ldr	r3, [r4, #0]
 80146f6:	f8cc 3000 	str.w	r3, [ip]
 80146fa:	f10e 0114 	add.w	r1, lr, #20
 80146fe:	4640      	mov	r0, r8
 8014700:	f000 f92a 	bl	8014958 <rcl_init_options_copy>
 8014704:	4604      	mov	r4, r0
 8014706:	2800      	cmp	r0, #0
 8014708:	d144      	bne.n	8014794 <rcl_init+0x13c>
 801470a:	f8d7 9000 	ldr.w	r9, [r7]
 801470e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8014712:	f8c9 0020 	str.w	r0, [r9, #32]
 8014716:	f8c9 5018 	str.w	r5, [r9, #24]
 801471a:	f8c9 801c 	str.w	r8, [r9, #28]
 801471e:	2d00      	cmp	r5, #0
 8014720:	d04b      	beq.n	80147ba <rcl_init+0x162>
 8014722:	2e00      	cmp	r6, #0
 8014724:	d049      	beq.n	80147ba <rcl_init+0x162>
 8014726:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 801472a:	2104      	movs	r1, #4
 801472c:	4628      	mov	r0, r5
 801472e:	4798      	blx	r3
 8014730:	f8c9 0020 	str.w	r0, [r9, #32]
 8014734:	f8d7 9000 	ldr.w	r9, [r7]
 8014738:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801473c:	46ca      	mov	sl, r9
 801473e:	b343      	cbz	r3, 8014792 <rcl_init+0x13a>
 8014740:	2d01      	cmp	r5, #1
 8014742:	f178 0300 	sbcs.w	r3, r8, #0
 8014746:	db38      	blt.n	80147ba <rcl_init+0x162>
 8014748:	2400      	movs	r4, #0
 801474a:	3e04      	subs	r6, #4
 801474c:	46a1      	mov	r9, r4
 801474e:	e00b      	b.n	8014768 <rcl_init+0x110>
 8014750:	6831      	ldr	r1, [r6, #0]
 8014752:	f004 fd7c 	bl	801924e <memcpy>
 8014756:	3401      	adds	r4, #1
 8014758:	f149 0900 	adc.w	r9, r9, #0
 801475c:	45c8      	cmp	r8, r9
 801475e:	bf08      	it	eq
 8014760:	42a5      	cmpeq	r5, r4
 8014762:	d028      	beq.n	80147b6 <rcl_init+0x15e>
 8014764:	f8d7 a000 	ldr.w	sl, [r7]
 8014768:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801476c:	f7eb fd3a 	bl	80001e4 <strlen>
 8014770:	1c42      	adds	r2, r0, #1
 8014772:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014774:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8014776:	f8da a020 	ldr.w	sl, [sl, #32]
 801477a:	9201      	str	r2, [sp, #4]
 801477c:	4610      	mov	r0, r2
 801477e:	4798      	blx	r3
 8014780:	683b      	ldr	r3, [r7, #0]
 8014782:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8014786:	6a1b      	ldr	r3, [r3, #32]
 8014788:	9a01      	ldr	r2, [sp, #4]
 801478a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801478e:	2800      	cmp	r0, #0
 8014790:	d1de      	bne.n	8014750 <rcl_init+0xf8>
 8014792:	240a      	movs	r4, #10
 8014794:	4638      	mov	r0, r7
 8014796:	f7ff feff 	bl	8014598 <__cleanup_context>
 801479a:	e003      	b.n	80147a4 <rcl_init+0x14c>
 801479c:	2900      	cmp	r1, #0
 801479e:	f43f af74 	beq.w	801468a <rcl_init+0x32>
 80147a2:	240b      	movs	r4, #11
 80147a4:	4620      	mov	r0, r4
 80147a6:	b01c      	add	sp, #112	@ 0x70
 80147a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147ac:	2464      	movs	r4, #100	@ 0x64
 80147ae:	4620      	mov	r0, r4
 80147b0:	b01c      	add	sp, #112	@ 0x70
 80147b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147b6:	f8d7 9000 	ldr.w	r9, [r7]
 80147ba:	491d      	ldr	r1, [pc, #116]	@ (8014830 <rcl_init+0x1d8>)
 80147bc:	680b      	ldr	r3, [r1, #0]
 80147be:	3301      	adds	r3, #1
 80147c0:	d023      	beq.n	801480a <rcl_init+0x1b2>
 80147c2:	600b      	str	r3, [r1, #0]
 80147c4:	461a      	mov	r2, r3
 80147c6:	2400      	movs	r4, #0
 80147c8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80147cc:	607b      	str	r3, [r7, #4]
 80147ce:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80147d0:	6182      	str	r2, [r0, #24]
 80147d2:	3301      	adds	r3, #1
 80147d4:	61c4      	str	r4, [r0, #28]
 80147d6:	d01f      	beq.n	8014818 <rcl_init+0x1c0>
 80147d8:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80147dc:	b94b      	cbnz	r3, 80147f2 <rcl_init+0x19a>
 80147de:	3030      	adds	r0, #48	@ 0x30
 80147e0:	f000 f926 	bl	8014a30 <rcl_get_localhost_only>
 80147e4:	4604      	mov	r4, r0
 80147e6:	2800      	cmp	r0, #0
 80147e8:	d1d4      	bne.n	8014794 <rcl_init+0x13c>
 80147ea:	f8d7 9000 	ldr.w	r9, [r7]
 80147ee:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80147f2:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 80147f6:	3018      	adds	r0, #24
 80147f8:	f001 f9ea 	bl	8015bd0 <rmw_init>
 80147fc:	4604      	mov	r4, r0
 80147fe:	2800      	cmp	r0, #0
 8014800:	d0d0      	beq.n	80147a4 <rcl_init+0x14c>
 8014802:	f7ff fea5 	bl	8014550 <rcl_convert_rmw_ret_to_rcl_ret>
 8014806:	4604      	mov	r4, r0
 8014808:	e7c4      	b.n	8014794 <rcl_init+0x13c>
 801480a:	2201      	movs	r2, #1
 801480c:	461c      	mov	r4, r3
 801480e:	600a      	str	r2, [r1, #0]
 8014810:	4613      	mov	r3, r2
 8014812:	e7d9      	b.n	80147c8 <rcl_init+0x170>
 8014814:	240a      	movs	r4, #10
 8014816:	e7c5      	b.n	80147a4 <rcl_init+0x14c>
 8014818:	3024      	adds	r0, #36	@ 0x24
 801481a:	f003 fb13 	bl	8017e44 <rcl_get_default_domain_id>
 801481e:	4604      	mov	r4, r0
 8014820:	2800      	cmp	r0, #0
 8014822:	d1b7      	bne.n	8014794 <rcl_init+0x13c>
 8014824:	f8d7 9000 	ldr.w	r9, [r7]
 8014828:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801482c:	e7d4      	b.n	80147d8 <rcl_init+0x180>
 801482e:	bf00      	nop
 8014830:	2000ab7c 	.word	0x2000ab7c

08014834 <rcl_get_zero_initialized_init_options>:
 8014834:	2000      	movs	r0, #0
 8014836:	4770      	bx	lr

08014838 <rcl_init_options_init>:
 8014838:	b084      	sub	sp, #16
 801483a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801483c:	b097      	sub	sp, #92	@ 0x5c
 801483e:	ae1d      	add	r6, sp, #116	@ 0x74
 8014840:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8014844:	2800      	cmp	r0, #0
 8014846:	d058      	beq.n	80148fa <rcl_init_options_init+0xc2>
 8014848:	6803      	ldr	r3, [r0, #0]
 801484a:	4605      	mov	r5, r0
 801484c:	b133      	cbz	r3, 801485c <rcl_init_options_init+0x24>
 801484e:	2464      	movs	r4, #100	@ 0x64
 8014850:	4620      	mov	r0, r4
 8014852:	b017      	add	sp, #92	@ 0x5c
 8014854:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014858:	b004      	add	sp, #16
 801485a:	4770      	bx	lr
 801485c:	4630      	mov	r0, r6
 801485e:	f7fb fc79 	bl	8010154 <rcutils_allocator_is_valid>
 8014862:	2800      	cmp	r0, #0
 8014864:	d049      	beq.n	80148fa <rcl_init_options_init+0xc2>
 8014866:	46b4      	mov	ip, r6
 8014868:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801486c:	ac11      	add	r4, sp, #68	@ 0x44
 801486e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014870:	f8dc 3000 	ldr.w	r3, [ip]
 8014874:	6023      	str	r3, [r4, #0]
 8014876:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8014878:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801487a:	2050      	movs	r0, #80	@ 0x50
 801487c:	4798      	blx	r3
 801487e:	4604      	mov	r4, r0
 8014880:	6028      	str	r0, [r5, #0]
 8014882:	2800      	cmp	r0, #0
 8014884:	d03b      	beq.n	80148fe <rcl_init_options_init+0xc6>
 8014886:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801488a:	4686      	mov	lr, r0
 801488c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014890:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014894:	f8dc 3000 	ldr.w	r3, [ip]
 8014898:	f8ce 3000 	str.w	r3, [lr]
 801489c:	a802      	add	r0, sp, #8
 801489e:	f000 fef7 	bl	8015690 <rmw_get_zero_initialized_init_options>
 80148a2:	f10d 0e08 	add.w	lr, sp, #8
 80148a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80148aa:	f104 0c18 	add.w	ip, r4, #24
 80148ae:	682f      	ldr	r7, [r5, #0]
 80148b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80148b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80148c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148c4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80148c8:	ac20      	add	r4, sp, #128	@ 0x80
 80148ca:	e88c 0003 	stmia.w	ip, {r0, r1}
 80148ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80148d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80148d6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80148da:	f107 0018 	add.w	r0, r7, #24
 80148de:	f001 f855 	bl	801598c <rmw_init_options_init>
 80148e2:	4604      	mov	r4, r0
 80148e4:	2800      	cmp	r0, #0
 80148e6:	d0b3      	beq.n	8014850 <rcl_init_options_init+0x18>
 80148e8:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80148ea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80148ec:	6828      	ldr	r0, [r5, #0]
 80148ee:	4798      	blx	r3
 80148f0:	4620      	mov	r0, r4
 80148f2:	f7ff fe2d 	bl	8014550 <rcl_convert_rmw_ret_to_rcl_ret>
 80148f6:	4604      	mov	r4, r0
 80148f8:	e7aa      	b.n	8014850 <rcl_init_options_init+0x18>
 80148fa:	240b      	movs	r4, #11
 80148fc:	e7a8      	b.n	8014850 <rcl_init_options_init+0x18>
 80148fe:	240a      	movs	r4, #10
 8014900:	e7a6      	b.n	8014850 <rcl_init_options_init+0x18>
 8014902:	bf00      	nop

08014904 <rcl_init_options_fini>:
 8014904:	b530      	push	{r4, r5, lr}
 8014906:	b087      	sub	sp, #28
 8014908:	b1f0      	cbz	r0, 8014948 <rcl_init_options_fini+0x44>
 801490a:	6803      	ldr	r3, [r0, #0]
 801490c:	4604      	mov	r4, r0
 801490e:	b1db      	cbz	r3, 8014948 <rcl_init_options_fini+0x44>
 8014910:	469c      	mov	ip, r3
 8014912:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014916:	f10d 0e04 	add.w	lr, sp, #4
 801491a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801491e:	f8dc 3000 	ldr.w	r3, [ip]
 8014922:	f8ce 3000 	str.w	r3, [lr]
 8014926:	a801      	add	r0, sp, #4
 8014928:	f7fb fc14 	bl	8010154 <rcutils_allocator_is_valid>
 801492c:	b160      	cbz	r0, 8014948 <rcl_init_options_fini+0x44>
 801492e:	6820      	ldr	r0, [r4, #0]
 8014930:	3018      	adds	r0, #24
 8014932:	f001 f901 	bl	8015b38 <rmw_init_options_fini>
 8014936:	4605      	mov	r5, r0
 8014938:	b950      	cbnz	r0, 8014950 <rcl_init_options_fini+0x4c>
 801493a:	6820      	ldr	r0, [r4, #0]
 801493c:	9b02      	ldr	r3, [sp, #8]
 801493e:	9905      	ldr	r1, [sp, #20]
 8014940:	4798      	blx	r3
 8014942:	4628      	mov	r0, r5
 8014944:	b007      	add	sp, #28
 8014946:	bd30      	pop	{r4, r5, pc}
 8014948:	250b      	movs	r5, #11
 801494a:	4628      	mov	r0, r5
 801494c:	b007      	add	sp, #28
 801494e:	bd30      	pop	{r4, r5, pc}
 8014950:	f7ff fdfe 	bl	8014550 <rcl_convert_rmw_ret_to_rcl_ret>
 8014954:	4605      	mov	r5, r0
 8014956:	e7f8      	b.n	801494a <rcl_init_options_fini+0x46>

08014958 <rcl_init_options_copy>:
 8014958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801495c:	b094      	sub	sp, #80	@ 0x50
 801495e:	2800      	cmp	r0, #0
 8014960:	d058      	beq.n	8014a14 <rcl_init_options_copy+0xbc>
 8014962:	4604      	mov	r4, r0
 8014964:	6800      	ldr	r0, [r0, #0]
 8014966:	2800      	cmp	r0, #0
 8014968:	d054      	beq.n	8014a14 <rcl_init_options_copy+0xbc>
 801496a:	460e      	mov	r6, r1
 801496c:	f7fb fbf2 	bl	8010154 <rcutils_allocator_is_valid>
 8014970:	2800      	cmp	r0, #0
 8014972:	d04f      	beq.n	8014a14 <rcl_init_options_copy+0xbc>
 8014974:	2e00      	cmp	r6, #0
 8014976:	d04d      	beq.n	8014a14 <rcl_init_options_copy+0xbc>
 8014978:	6833      	ldr	r3, [r6, #0]
 801497a:	b123      	cbz	r3, 8014986 <rcl_init_options_copy+0x2e>
 801497c:	2464      	movs	r4, #100	@ 0x64
 801497e:	4620      	mov	r0, r4
 8014980:	b014      	add	sp, #80	@ 0x50
 8014982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014986:	6827      	ldr	r7, [r4, #0]
 8014988:	46bc      	mov	ip, r7
 801498a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801498e:	ad0f      	add	r5, sp, #60	@ 0x3c
 8014990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014992:	f8dc 3000 	ldr.w	r3, [ip]
 8014996:	f8d7 8000 	ldr.w	r8, [r7]
 801499a:	602b      	str	r3, [r5, #0]
 801499c:	4619      	mov	r1, r3
 801499e:	2050      	movs	r0, #80	@ 0x50
 80149a0:	47c0      	blx	r8
 80149a2:	4605      	mov	r5, r0
 80149a4:	6030      	str	r0, [r6, #0]
 80149a6:	b3d0      	cbz	r0, 8014a1e <rcl_init_options_copy+0xc6>
 80149a8:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80149ac:	4686      	mov	lr, r0
 80149ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149b6:	f8dc 3000 	ldr.w	r3, [ip]
 80149ba:	f8ce 3000 	str.w	r3, [lr]
 80149be:	4668      	mov	r0, sp
 80149c0:	f000 fe66 	bl	8015690 <rmw_get_zero_initialized_init_options>
 80149c4:	46ee      	mov	lr, sp
 80149c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80149ca:	f105 0c18 	add.w	ip, r5, #24
 80149ce:	6824      	ldr	r4, [r4, #0]
 80149d0:	6835      	ldr	r5, [r6, #0]
 80149d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80149da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80149e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149e6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80149ea:	e88c 0003 	stmia.w	ip, {r0, r1}
 80149ee:	f104 0018 	add.w	r0, r4, #24
 80149f2:	f105 0118 	add.w	r1, r5, #24
 80149f6:	f001 f82b 	bl	8015a50 <rmw_init_options_copy>
 80149fa:	4604      	mov	r4, r0
 80149fc:	2800      	cmp	r0, #0
 80149fe:	d0be      	beq.n	801497e <rcl_init_options_copy+0x26>
 8014a00:	f7fb fbb6 	bl	8010170 <rcutils_get_error_string>
 8014a04:	f7fb fbcc 	bl	80101a0 <rcutils_reset_error>
 8014a08:	4630      	mov	r0, r6
 8014a0a:	f7ff ff7b 	bl	8014904 <rcl_init_options_fini>
 8014a0e:	b140      	cbz	r0, 8014a22 <rcl_init_options_copy+0xca>
 8014a10:	4604      	mov	r4, r0
 8014a12:	e7b4      	b.n	801497e <rcl_init_options_copy+0x26>
 8014a14:	240b      	movs	r4, #11
 8014a16:	4620      	mov	r0, r4
 8014a18:	b014      	add	sp, #80	@ 0x50
 8014a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a1e:	240a      	movs	r4, #10
 8014a20:	e7ad      	b.n	801497e <rcl_init_options_copy+0x26>
 8014a22:	4620      	mov	r0, r4
 8014a24:	b014      	add	sp, #80	@ 0x50
 8014a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a2a:	f7ff bd91 	b.w	8014550 <rcl_convert_rmw_ret_to_rcl_ret>
 8014a2e:	bf00      	nop

08014a30 <rcl_get_localhost_only>:
 8014a30:	b510      	push	{r4, lr}
 8014a32:	b082      	sub	sp, #8
 8014a34:	2300      	movs	r3, #0
 8014a36:	9301      	str	r3, [sp, #4]
 8014a38:	b1b8      	cbz	r0, 8014a6a <rcl_get_localhost_only+0x3a>
 8014a3a:	4604      	mov	r4, r0
 8014a3c:	a901      	add	r1, sp, #4
 8014a3e:	480c      	ldr	r0, [pc, #48]	@ (8014a70 <rcl_get_localhost_only+0x40>)
 8014a40:	f000 fb2a 	bl	8015098 <rcutils_get_env>
 8014a44:	b110      	cbz	r0, 8014a4c <rcl_get_localhost_only+0x1c>
 8014a46:	2001      	movs	r0, #1
 8014a48:	b002      	add	sp, #8
 8014a4a:	bd10      	pop	{r4, pc}
 8014a4c:	9b01      	ldr	r3, [sp, #4]
 8014a4e:	b113      	cbz	r3, 8014a56 <rcl_get_localhost_only+0x26>
 8014a50:	781a      	ldrb	r2, [r3, #0]
 8014a52:	2a31      	cmp	r2, #49	@ 0x31
 8014a54:	d004      	beq.n	8014a60 <rcl_get_localhost_only+0x30>
 8014a56:	2302      	movs	r3, #2
 8014a58:	2000      	movs	r0, #0
 8014a5a:	7023      	strb	r3, [r4, #0]
 8014a5c:	b002      	add	sp, #8
 8014a5e:	bd10      	pop	{r4, pc}
 8014a60:	785b      	ldrb	r3, [r3, #1]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d1f7      	bne.n	8014a56 <rcl_get_localhost_only+0x26>
 8014a66:	2301      	movs	r3, #1
 8014a68:	e7f6      	b.n	8014a58 <rcl_get_localhost_only+0x28>
 8014a6a:	200b      	movs	r0, #11
 8014a6c:	b002      	add	sp, #8
 8014a6e:	bd10      	pop	{r4, pc}
 8014a70:	0801a344 	.word	0x0801a344

08014a74 <rcl_get_zero_initialized_node>:
 8014a74:	4a03      	ldr	r2, [pc, #12]	@ (8014a84 <rcl_get_zero_initialized_node+0x10>)
 8014a76:	4603      	mov	r3, r0
 8014a78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014a80:	4618      	mov	r0, r3
 8014a82:	4770      	bx	lr
 8014a84:	0801a36c 	.word	0x0801a36c

08014a88 <rcl_node_init>:
 8014a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a8c:	b0a9      	sub	sp, #164	@ 0xa4
 8014a8e:	4604      	mov	r4, r0
 8014a90:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8014a94:	a823      	add	r0, sp, #140	@ 0x8c
 8014a96:	460e      	mov	r6, r1
 8014a98:	4615      	mov	r5, r2
 8014a9a:	461f      	mov	r7, r3
 8014a9c:	f003 fbfa 	bl	8018294 <rcl_guard_condition_get_default_options>
 8014aa0:	f1b8 0f00 	cmp.w	r8, #0
 8014aa4:	f000 80e6 	beq.w	8014c74 <rcl_node_init+0x1ec>
 8014aa8:	4640      	mov	r0, r8
 8014aaa:	f7fb fb53 	bl	8010154 <rcutils_allocator_is_valid>
 8014aae:	2800      	cmp	r0, #0
 8014ab0:	f000 80e0 	beq.w	8014c74 <rcl_node_init+0x1ec>
 8014ab4:	2e00      	cmp	r6, #0
 8014ab6:	f000 80dd 	beq.w	8014c74 <rcl_node_init+0x1ec>
 8014aba:	2d00      	cmp	r5, #0
 8014abc:	f000 80da 	beq.w	8014c74 <rcl_node_init+0x1ec>
 8014ac0:	2c00      	cmp	r4, #0
 8014ac2:	f000 80d7 	beq.w	8014c74 <rcl_node_init+0x1ec>
 8014ac6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014aca:	f1b9 0f00 	cmp.w	r9, #0
 8014ace:	f040 80fd 	bne.w	8014ccc <rcl_node_init+0x244>
 8014ad2:	2f00      	cmp	r7, #0
 8014ad4:	f000 80ce 	beq.w	8014c74 <rcl_node_init+0x1ec>
 8014ad8:	4638      	mov	r0, r7
 8014ada:	f7ff fd57 	bl	801458c <rcl_context_is_valid>
 8014ade:	4682      	mov	sl, r0
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	f000 80cd 	beq.w	8014c80 <rcl_node_init+0x1f8>
 8014ae6:	464a      	mov	r2, r9
 8014ae8:	a922      	add	r1, sp, #136	@ 0x88
 8014aea:	4630      	mov	r0, r6
 8014aec:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8014af0:	f000 fec4 	bl	801587c <rmw_validate_node_name>
 8014af4:	4681      	mov	r9, r0
 8014af6:	2800      	cmp	r0, #0
 8014af8:	f040 80be 	bne.w	8014c78 <rcl_node_init+0x1f0>
 8014afc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014afe:	2800      	cmp	r0, #0
 8014b00:	f040 80f0 	bne.w	8014ce4 <rcl_node_init+0x25c>
 8014b04:	4628      	mov	r0, r5
 8014b06:	f7eb fb6d 	bl	80001e4 <strlen>
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	f040 80bb 	bne.w	8014c86 <rcl_node_init+0x1fe>
 8014b10:	4d7c      	ldr	r5, [pc, #496]	@ (8014d04 <rcl_node_init+0x27c>)
 8014b12:	a922      	add	r1, sp, #136	@ 0x88
 8014b14:	2200      	movs	r2, #0
 8014b16:	4628      	mov	r0, r5
 8014b18:	f000 fe92 	bl	8015840 <rmw_validate_namespace>
 8014b1c:	4681      	mov	r9, r0
 8014b1e:	2800      	cmp	r0, #0
 8014b20:	f040 80aa 	bne.w	8014c78 <rcl_node_init+0x1f0>
 8014b24:	4682      	mov	sl, r0
 8014b26:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014b28:	2800      	cmp	r0, #0
 8014b2a:	f040 80e0 	bne.w	8014cee <rcl_node_init+0x266>
 8014b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8014b32:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014b36:	2078      	movs	r0, #120	@ 0x78
 8014b38:	4798      	blx	r3
 8014b3a:	4681      	mov	r9, r0
 8014b3c:	6060      	str	r0, [r4, #4]
 8014b3e:	2800      	cmp	r0, #0
 8014b40:	f000 80ca 	beq.w	8014cd8 <rcl_node_init+0x250>
 8014b44:	2200      	movs	r2, #0
 8014b46:	2300      	movs	r3, #0
 8014b48:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8014b4c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8014b50:	a808      	add	r0, sp, #32
 8014b52:	f000 f907 	bl	8014d64 <rcl_node_get_default_options>
 8014b56:	a908      	add	r1, sp, #32
 8014b58:	4648      	mov	r0, r9
 8014b5a:	2268      	movs	r2, #104	@ 0x68
 8014b5c:	f004 fb77 	bl	801924e <memcpy>
 8014b60:	6861      	ldr	r1, [r4, #4]
 8014b62:	6027      	str	r7, [r4, #0]
 8014b64:	4640      	mov	r0, r8
 8014b66:	f000 f90b 	bl	8014d80 <rcl_node_options_copy>
 8014b6a:	2800      	cmp	r0, #0
 8014b6c:	d158      	bne.n	8014c20 <rcl_node_init+0x198>
 8014b6e:	4628      	mov	r0, r5
 8014b70:	f7eb fb38 	bl	80001e4 <strlen>
 8014b74:	4428      	add	r0, r5
 8014b76:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8014b7a:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8014b7e:	2b2f      	cmp	r3, #47	@ 0x2f
 8014b80:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014b84:	9300      	str	r3, [sp, #0]
 8014b86:	bf0c      	ite	eq
 8014b88:	4b5f      	ldreq	r3, [pc, #380]	@ (8014d08 <rcl_node_init+0x280>)
 8014b8a:	4b60      	ldrne	r3, [pc, #384]	@ (8014d0c <rcl_node_init+0x284>)
 8014b8c:	9302      	str	r3, [sp, #8]
 8014b8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014b92:	9301      	str	r3, [sp, #4]
 8014b94:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014b98:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014b9c:	f000 fa94 	bl	80150c8 <rcutils_format_string_limit>
 8014ba0:	6823      	ldr	r3, [r4, #0]
 8014ba2:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8014ba6:	6818      	ldr	r0, [r3, #0]
 8014ba8:	4631      	mov	r1, r6
 8014baa:	3028      	adds	r0, #40	@ 0x28
 8014bac:	462a      	mov	r2, r5
 8014bae:	6866      	ldr	r6, [r4, #4]
 8014bb0:	f001 fa62 	bl	8016078 <rmw_create_node>
 8014bb4:	6863      	ldr	r3, [r4, #4]
 8014bb6:	66b0      	str	r0, [r6, #104]	@ 0x68
 8014bb8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014bba:	2800      	cmp	r0, #0
 8014bbc:	d032      	beq.n	8014c24 <rcl_node_init+0x19c>
 8014bbe:	f001 faef 	bl	80161a0 <rmw_node_get_graph_guard_condition>
 8014bc2:	4681      	mov	r9, r0
 8014bc4:	b360      	cbz	r0, 8014c20 <rcl_node_init+0x198>
 8014bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8014bca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014bce:	6866      	ldr	r6, [r4, #4]
 8014bd0:	2008      	movs	r0, #8
 8014bd2:	4798      	blx	r3
 8014bd4:	6863      	ldr	r3, [r4, #4]
 8014bd6:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8014bd8:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8014bdc:	f1bb 0f00 	cmp.w	fp, #0
 8014be0:	d020      	beq.n	8014c24 <rcl_node_init+0x19c>
 8014be2:	a806      	add	r0, sp, #24
 8014be4:	f003 fac6 	bl	8018174 <rcl_get_zero_initialized_guard_condition>
 8014be8:	a806      	add	r0, sp, #24
 8014bea:	c803      	ldmia	r0, {r0, r1}
 8014bec:	6863      	ldr	r3, [r4, #4]
 8014bee:	46c4      	mov	ip, r8
 8014bf0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8014bf4:	e88b 0003 	stmia.w	fp, {r0, r1}
 8014bf8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bfc:	ae23      	add	r6, sp, #140	@ 0x8c
 8014bfe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014c00:	f8dc 3000 	ldr.w	r3, [ip]
 8014c04:	6033      	str	r3, [r6, #0]
 8014c06:	ab28      	add	r3, sp, #160	@ 0xa0
 8014c08:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014c0c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014c10:	4649      	mov	r1, r9
 8014c12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014c14:	463a      	mov	r2, r7
 8014c16:	4670      	mov	r0, lr
 8014c18:	f003 fab6 	bl	8018188 <rcl_guard_condition_init_from_rmw>
 8014c1c:	4681      	mov	r9, r0
 8014c1e:	b328      	cbz	r0, 8014c6c <rcl_node_init+0x1e4>
 8014c20:	6863      	ldr	r3, [r4, #4]
 8014c22:	b1f3      	cbz	r3, 8014c62 <rcl_node_init+0x1da>
 8014c24:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014c26:	b128      	cbz	r0, 8014c34 <rcl_node_init+0x1ac>
 8014c28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c2c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c30:	4798      	blx	r3
 8014c32:	6863      	ldr	r3, [r4, #4]
 8014c34:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014c36:	b110      	cbz	r0, 8014c3e <rcl_node_init+0x1b6>
 8014c38:	f001 fa36 	bl	80160a8 <rmw_destroy_node>
 8014c3c:	6863      	ldr	r3, [r4, #4]
 8014c3e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014c40:	b148      	cbz	r0, 8014c56 <rcl_node_init+0x1ce>
 8014c42:	f003 fb01 	bl	8018248 <rcl_guard_condition_fini>
 8014c46:	6863      	ldr	r3, [r4, #4]
 8014c48:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c4c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014c4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c52:	4798      	blx	r3
 8014c54:	6863      	ldr	r3, [r4, #4]
 8014c56:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c60:	4798      	blx	r3
 8014c62:	2300      	movs	r3, #0
 8014c64:	e9c4 3300 	strd	r3, r3, [r4]
 8014c68:	f04f 0901 	mov.w	r9, #1
 8014c6c:	f1ba 0f00 	cmp.w	sl, #0
 8014c70:	d125      	bne.n	8014cbe <rcl_node_init+0x236>
 8014c72:	e001      	b.n	8014c78 <rcl_node_init+0x1f0>
 8014c74:	f04f 090b 	mov.w	r9, #11
 8014c78:	4648      	mov	r0, r9
 8014c7a:	b029      	add	sp, #164	@ 0xa4
 8014c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c80:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8014c84:	e7f8      	b.n	8014c78 <rcl_node_init+0x1f0>
 8014c86:	782b      	ldrb	r3, [r5, #0]
 8014c88:	2b2f      	cmp	r3, #47	@ 0x2f
 8014c8a:	f43f af42 	beq.w	8014b12 <rcl_node_init+0x8a>
 8014c8e:	9503      	str	r5, [sp, #12]
 8014c90:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014c94:	9300      	str	r3, [sp, #0]
 8014c96:	4b1e      	ldr	r3, [pc, #120]	@ (8014d10 <rcl_node_init+0x288>)
 8014c98:	9302      	str	r3, [sp, #8]
 8014c9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014c9e:	9301      	str	r3, [sp, #4]
 8014ca0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014ca4:	f000 fa10 	bl	80150c8 <rcutils_format_string_limit>
 8014ca8:	4605      	mov	r5, r0
 8014caa:	b340      	cbz	r0, 8014cfe <rcl_node_init+0x276>
 8014cac:	2200      	movs	r2, #0
 8014cae:	a922      	add	r1, sp, #136	@ 0x88
 8014cb0:	9222      	str	r2, [sp, #136]	@ 0x88
 8014cb2:	f000 fdc5 	bl	8015840 <rmw_validate_namespace>
 8014cb6:	4681      	mov	r9, r0
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	f43f af34 	beq.w	8014b26 <rcl_node_init+0x9e>
 8014cbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014cc2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014cc6:	4628      	mov	r0, r5
 8014cc8:	4798      	blx	r3
 8014cca:	e7d5      	b.n	8014c78 <rcl_node_init+0x1f0>
 8014ccc:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8014cd0:	4648      	mov	r0, r9
 8014cd2:	b029      	add	sp, #164	@ 0xa4
 8014cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cd8:	f04f 090a 	mov.w	r9, #10
 8014cdc:	f1ba 0f00 	cmp.w	sl, #0
 8014ce0:	d1ed      	bne.n	8014cbe <rcl_node_init+0x236>
 8014ce2:	e7c9      	b.n	8014c78 <rcl_node_init+0x1f0>
 8014ce4:	f000 fe1c 	bl	8015920 <rmw_node_name_validation_result_string>
 8014ce8:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8014cec:	e7c4      	b.n	8014c78 <rcl_node_init+0x1f0>
 8014cee:	f000 fdb9 	bl	8015864 <rmw_namespace_validation_result_string>
 8014cf2:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8014cf6:	f1ba 0f00 	cmp.w	sl, #0
 8014cfa:	d1e0      	bne.n	8014cbe <rcl_node_init+0x236>
 8014cfc:	e7bc      	b.n	8014c78 <rcl_node_init+0x1f0>
 8014cfe:	f04f 090a 	mov.w	r9, #10
 8014d02:	e7b9      	b.n	8014c78 <rcl_node_init+0x1f0>
 8014d04:	0801a35c 	.word	0x0801a35c
 8014d08:	0801a1e0 	.word	0x0801a1e0
 8014d0c:	0801a364 	.word	0x0801a364
 8014d10:	0801a360 	.word	0x0801a360

08014d14 <rcl_node_is_valid>:
 8014d14:	b130      	cbz	r0, 8014d24 <rcl_node_is_valid+0x10>
 8014d16:	6843      	ldr	r3, [r0, #4]
 8014d18:	b123      	cbz	r3, 8014d24 <rcl_node_is_valid+0x10>
 8014d1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014d1c:	b113      	cbz	r3, 8014d24 <rcl_node_is_valid+0x10>
 8014d1e:	6800      	ldr	r0, [r0, #0]
 8014d20:	f7ff bc34 	b.w	801458c <rcl_context_is_valid>
 8014d24:	2000      	movs	r0, #0
 8014d26:	4770      	bx	lr

08014d28 <rcl_node_get_name>:
 8014d28:	b120      	cbz	r0, 8014d34 <rcl_node_get_name+0xc>
 8014d2a:	6840      	ldr	r0, [r0, #4]
 8014d2c:	b110      	cbz	r0, 8014d34 <rcl_node_get_name+0xc>
 8014d2e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014d30:	b100      	cbz	r0, 8014d34 <rcl_node_get_name+0xc>
 8014d32:	6880      	ldr	r0, [r0, #8]
 8014d34:	4770      	bx	lr
 8014d36:	bf00      	nop

08014d38 <rcl_node_get_namespace>:
 8014d38:	b120      	cbz	r0, 8014d44 <rcl_node_get_namespace+0xc>
 8014d3a:	6840      	ldr	r0, [r0, #4]
 8014d3c:	b110      	cbz	r0, 8014d44 <rcl_node_get_namespace+0xc>
 8014d3e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014d40:	b100      	cbz	r0, 8014d44 <rcl_node_get_namespace+0xc>
 8014d42:	68c0      	ldr	r0, [r0, #12]
 8014d44:	4770      	bx	lr
 8014d46:	bf00      	nop

08014d48 <rcl_node_get_options>:
 8014d48:	b128      	cbz	r0, 8014d56 <rcl_node_get_options+0xe>
 8014d4a:	6840      	ldr	r0, [r0, #4]
 8014d4c:	b118      	cbz	r0, 8014d56 <rcl_node_get_options+0xe>
 8014d4e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	bf08      	it	eq
 8014d54:	2000      	moveq	r0, #0
 8014d56:	4770      	bx	lr

08014d58 <rcl_node_get_rmw_handle>:
 8014d58:	b110      	cbz	r0, 8014d60 <rcl_node_get_rmw_handle+0x8>
 8014d5a:	6840      	ldr	r0, [r0, #4]
 8014d5c:	b100      	cbz	r0, 8014d60 <rcl_node_get_rmw_handle+0x8>
 8014d5e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014d60:	4770      	bx	lr
 8014d62:	bf00      	nop

08014d64 <rcl_node_get_default_options>:
 8014d64:	b510      	push	{r4, lr}
 8014d66:	2268      	movs	r2, #104	@ 0x68
 8014d68:	4604      	mov	r4, r0
 8014d6a:	2100      	movs	r1, #0
 8014d6c:	f004 f9a6 	bl	80190bc <memset>
 8014d70:	4620      	mov	r0, r4
 8014d72:	f7fb f9e1 	bl	8010138 <rcutils_get_default_allocator>
 8014d76:	2301      	movs	r3, #1
 8014d78:	7523      	strb	r3, [r4, #20]
 8014d7a:	4620      	mov	r0, r4
 8014d7c:	bd10      	pop	{r4, pc}
 8014d7e:	bf00      	nop

08014d80 <rcl_node_options_copy>:
 8014d80:	b1d0      	cbz	r0, 8014db8 <rcl_node_options_copy+0x38>
 8014d82:	b570      	push	{r4, r5, r6, lr}
 8014d84:	460c      	mov	r4, r1
 8014d86:	b1a9      	cbz	r1, 8014db4 <rcl_node_options_copy+0x34>
 8014d88:	4288      	cmp	r0, r1
 8014d8a:	4684      	mov	ip, r0
 8014d8c:	d012      	beq.n	8014db4 <rcl_node_options_copy+0x34>
 8014d8e:	4605      	mov	r5, r0
 8014d90:	8a86      	ldrh	r6, [r0, #20]
 8014d92:	468e      	mov	lr, r1
 8014d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d9a:	682b      	ldr	r3, [r5, #0]
 8014d9c:	f8ce 3000 	str.w	r3, [lr]
 8014da0:	f10c 0118 	add.w	r1, ip, #24
 8014da4:	2250      	movs	r2, #80	@ 0x50
 8014da6:	82a6      	strh	r6, [r4, #20]
 8014da8:	f104 0018 	add.w	r0, r4, #24
 8014dac:	f004 fa4f 	bl	801924e <memcpy>
 8014db0:	2000      	movs	r0, #0
 8014db2:	bd70      	pop	{r4, r5, r6, pc}
 8014db4:	200b      	movs	r0, #11
 8014db6:	bd70      	pop	{r4, r5, r6, pc}
 8014db8:	200b      	movs	r0, #11
 8014dba:	4770      	bx	lr

08014dbc <rcl_node_resolve_name>:
 8014dbc:	b082      	sub	sp, #8
 8014dbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dc2:	b091      	sub	sp, #68	@ 0x44
 8014dc4:	ac1a      	add	r4, sp, #104	@ 0x68
 8014dc6:	e884 000c 	stmia.w	r4, {r2, r3}
 8014dca:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	d03b      	beq.n	8014e4a <rcl_node_resolve_name+0x8e>
 8014dd2:	460c      	mov	r4, r1
 8014dd4:	4605      	mov	r5, r0
 8014dd6:	f7ff ffb7 	bl	8014d48 <rcl_node_get_options>
 8014dda:	2800      	cmp	r0, #0
 8014ddc:	d037      	beq.n	8014e4e <rcl_node_resolve_name+0x92>
 8014dde:	4628      	mov	r0, r5
 8014de0:	f7ff ffa2 	bl	8014d28 <rcl_node_get_name>
 8014de4:	4606      	mov	r6, r0
 8014de6:	4628      	mov	r0, r5
 8014de8:	f7ff ffa6 	bl	8014d38 <rcl_node_get_namespace>
 8014dec:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8014df0:	4681      	mov	r9, r0
 8014df2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014df6:	ad0b      	add	r5, sp, #44	@ 0x2c
 8014df8:	46ac      	mov	ip, r5
 8014dfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014dfe:	f8de 3000 	ldr.w	r3, [lr]
 8014e02:	f8cc 3000 	str.w	r3, [ip]
 8014e06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014e08:	b1fb      	cbz	r3, 8014e4a <rcl_node_resolve_name+0x8e>
 8014e0a:	468a      	mov	sl, r1
 8014e0c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8014e10:	f000 fab2 	bl	8015378 <rcutils_get_zero_initialized_string_map>
 8014e14:	ab10      	add	r3, sp, #64	@ 0x40
 8014e16:	9008      	str	r0, [sp, #32]
 8014e18:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014e1c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014e20:	2100      	movs	r1, #0
 8014e22:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014e26:	a808      	add	r0, sp, #32
 8014e28:	f000 fb1e 	bl	8015468 <rcutils_string_map_init>
 8014e2c:	4607      	mov	r7, r0
 8014e2e:	b180      	cbz	r0, 8014e52 <rcl_node_resolve_name+0x96>
 8014e30:	f7fb f99e 	bl	8010170 <rcutils_get_error_string>
 8014e34:	f7fb f9b4 	bl	80101a0 <rcutils_reset_error>
 8014e38:	2f0a      	cmp	r7, #10
 8014e3a:	bf18      	it	ne
 8014e3c:	2701      	movne	r7, #1
 8014e3e:	4638      	mov	r0, r7
 8014e40:	b011      	add	sp, #68	@ 0x44
 8014e42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e46:	b002      	add	sp, #8
 8014e48:	4770      	bx	lr
 8014e4a:	270b      	movs	r7, #11
 8014e4c:	e7f7      	b.n	8014e3e <rcl_node_resolve_name+0x82>
 8014e4e:	2701      	movs	r7, #1
 8014e50:	e7f5      	b.n	8014e3e <rcl_node_resolve_name+0x82>
 8014e52:	9009      	str	r0, [sp, #36]	@ 0x24
 8014e54:	9007      	str	r0, [sp, #28]
 8014e56:	a808      	add	r0, sp, #32
 8014e58:	f003 f986 	bl	8018168 <rcl_get_default_topic_name_substitutions>
 8014e5c:	4607      	mov	r7, r0
 8014e5e:	b1a8      	cbz	r0, 8014e8c <rcl_node_resolve_name+0xd0>
 8014e60:	280a      	cmp	r0, #10
 8014e62:	9c07      	ldr	r4, [sp, #28]
 8014e64:	d000      	beq.n	8014e68 <rcl_node_resolve_name+0xac>
 8014e66:	2701      	movs	r7, #1
 8014e68:	a808      	add	r0, sp, #32
 8014e6a:	f000 fb3d 	bl	80154e8 <rcutils_string_map_fini>
 8014e6e:	2800      	cmp	r0, #0
 8014e70:	d13d      	bne.n	8014eee <rcl_node_resolve_name+0x132>
 8014e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014e74:	4659      	mov	r1, fp
 8014e76:	47d0      	blx	sl
 8014e78:	4659      	mov	r1, fp
 8014e7a:	4620      	mov	r0, r4
 8014e7c:	47d0      	blx	sl
 8014e7e:	f1b8 0f00 	cmp.w	r8, #0
 8014e82:	d0dc      	beq.n	8014e3e <rcl_node_resolve_name+0x82>
 8014e84:	2f67      	cmp	r7, #103	@ 0x67
 8014e86:	bf08      	it	eq
 8014e88:	2768      	moveq	r7, #104	@ 0x68
 8014e8a:	e7d8      	b.n	8014e3e <rcl_node_resolve_name+0x82>
 8014e8c:	ab09      	add	r3, sp, #36	@ 0x24
 8014e8e:	9305      	str	r3, [sp, #20]
 8014e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e92:	46ec      	mov	ip, sp
 8014e94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e98:	682b      	ldr	r3, [r5, #0]
 8014e9a:	f8cc 3000 	str.w	r3, [ip]
 8014e9e:	464a      	mov	r2, r9
 8014ea0:	4631      	mov	r1, r6
 8014ea2:	4620      	mov	r0, r4
 8014ea4:	ab08      	add	r3, sp, #32
 8014ea6:	f003 f801 	bl	8017eac <rcl_expand_topic_name>
 8014eaa:	4607      	mov	r7, r0
 8014eac:	b9b8      	cbnz	r0, 8014ede <rcl_node_resolve_name+0x122>
 8014eae:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014eb0:	9009      	str	r0, [sp, #36]	@ 0x24
 8014eb2:	4602      	mov	r2, r0
 8014eb4:	a90a      	add	r1, sp, #40	@ 0x28
 8014eb6:	4620      	mov	r0, r4
 8014eb8:	f000 fbfe 	bl	80156b8 <rmw_validate_full_topic_name>
 8014ebc:	b988      	cbnz	r0, 8014ee2 <rcl_node_resolve_name+0x126>
 8014ebe:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014ec0:	b9d5      	cbnz	r5, 8014ef8 <rcl_node_resolve_name+0x13c>
 8014ec2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014ec4:	a808      	add	r0, sp, #32
 8014ec6:	601c      	str	r4, [r3, #0]
 8014ec8:	f000 fb0e 	bl	80154e8 <rcutils_string_map_fini>
 8014ecc:	4607      	mov	r7, r0
 8014ece:	b1a8      	cbz	r0, 8014efc <rcl_node_resolve_name+0x140>
 8014ed0:	f7fb f94e 	bl	8010170 <rcutils_get_error_string>
 8014ed4:	462c      	mov	r4, r5
 8014ed6:	f7fb f963 	bl	80101a0 <rcutils_reset_error>
 8014eda:	2701      	movs	r7, #1
 8014edc:	e7c9      	b.n	8014e72 <rcl_node_resolve_name+0xb6>
 8014ede:	9c07      	ldr	r4, [sp, #28]
 8014ee0:	e7c2      	b.n	8014e68 <rcl_node_resolve_name+0xac>
 8014ee2:	f7fb f945 	bl	8010170 <rcutils_get_error_string>
 8014ee6:	2701      	movs	r7, #1
 8014ee8:	f7fb f95a 	bl	80101a0 <rcutils_reset_error>
 8014eec:	e7bc      	b.n	8014e68 <rcl_node_resolve_name+0xac>
 8014eee:	f7fb f93f 	bl	8010170 <rcutils_get_error_string>
 8014ef2:	f7fb f955 	bl	80101a0 <rcutils_reset_error>
 8014ef6:	e7bc      	b.n	8014e72 <rcl_node_resolve_name+0xb6>
 8014ef8:	2767      	movs	r7, #103	@ 0x67
 8014efa:	e7b5      	b.n	8014e68 <rcl_node_resolve_name+0xac>
 8014efc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014efe:	4659      	mov	r1, fp
 8014f00:	47d0      	blx	sl
 8014f02:	4659      	mov	r1, fp
 8014f04:	4638      	mov	r0, r7
 8014f06:	47d0      	blx	sl
 8014f08:	e799      	b.n	8014e3e <rcl_node_resolve_name+0x82>
 8014f0a:	bf00      	nop

08014f0c <rcl_get_system_time>:
 8014f0c:	4608      	mov	r0, r1
 8014f0e:	f000 bb5f 	b.w	80155d0 <rcutils_system_time_now>
 8014f12:	bf00      	nop

08014f14 <rcl_get_steady_time>:
 8014f14:	4608      	mov	r0, r1
 8014f16:	f000 bb83 	b.w	8015620 <rcutils_steady_time_now>
 8014f1a:	bf00      	nop

08014f1c <rcl_get_ros_time>:
 8014f1c:	7a03      	ldrb	r3, [r0, #8]
 8014f1e:	b510      	push	{r4, lr}
 8014f20:	460c      	mov	r4, r1
 8014f22:	b133      	cbz	r3, 8014f32 <rcl_get_ros_time+0x16>
 8014f24:	2105      	movs	r1, #5
 8014f26:	f000 f881 	bl	801502c <__atomic_load_8>
 8014f2a:	e9c4 0100 	strd	r0, r1, [r4]
 8014f2e:	2000      	movs	r0, #0
 8014f30:	bd10      	pop	{r4, pc}
 8014f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f36:	4608      	mov	r0, r1
 8014f38:	f000 bb4a 	b.w	80155d0 <rcutils_system_time_now>

08014f3c <rcl_clock_init>:
 8014f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f3e:	4605      	mov	r5, r0
 8014f40:	4610      	mov	r0, r2
 8014f42:	4614      	mov	r4, r2
 8014f44:	460e      	mov	r6, r1
 8014f46:	f7fb f905 	bl	8010154 <rcutils_allocator_is_valid>
 8014f4a:	b128      	cbz	r0, 8014f58 <rcl_clock_init+0x1c>
 8014f4c:	2d03      	cmp	r5, #3
 8014f4e:	d803      	bhi.n	8014f58 <rcl_clock_init+0x1c>
 8014f50:	e8df f005 	tbb	[pc, r5]
 8014f54:	06532e1d 	.word	0x06532e1d
 8014f58:	f04f 0c0b 	mov.w	ip, #11
 8014f5c:	4660      	mov	r0, ip
 8014f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f60:	2e00      	cmp	r6, #0
 8014f62:	d0f9      	beq.n	8014f58 <rcl_clock_init+0x1c>
 8014f64:	2c00      	cmp	r4, #0
 8014f66:	d0f7      	beq.n	8014f58 <rcl_clock_init+0x1c>
 8014f68:	2300      	movs	r3, #0
 8014f6a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014f6e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8015024 <rcl_clock_init+0xe8>
 8014f72:	6133      	str	r3, [r6, #16]
 8014f74:	f106 0514 	add.w	r5, r6, #20
 8014f78:	469c      	mov	ip, r3
 8014f7a:	2703      	movs	r7, #3
 8014f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014f80:	6823      	ldr	r3, [r4, #0]
 8014f82:	602b      	str	r3, [r5, #0]
 8014f84:	7037      	strb	r7, [r6, #0]
 8014f86:	f8c6 e00c 	str.w	lr, [r6, #12]
 8014f8a:	4660      	mov	r0, ip
 8014f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f8e:	2e00      	cmp	r6, #0
 8014f90:	d0e2      	beq.n	8014f58 <rcl_clock_init+0x1c>
 8014f92:	2300      	movs	r3, #0
 8014f94:	7033      	strb	r3, [r6, #0]
 8014f96:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014f9a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014f9e:	469c      	mov	ip, r3
 8014fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014fa2:	f106 0514 	add.w	r5, r6, #20
 8014fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014fa8:	6823      	ldr	r3, [r4, #0]
 8014faa:	602b      	str	r3, [r5, #0]
 8014fac:	4660      	mov	r0, ip
 8014fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fb0:	2e00      	cmp	r6, #0
 8014fb2:	d0d1      	beq.n	8014f58 <rcl_clock_init+0x1c>
 8014fb4:	2c00      	cmp	r4, #0
 8014fb6:	d0cf      	beq.n	8014f58 <rcl_clock_init+0x1c>
 8014fb8:	2700      	movs	r7, #0
 8014fba:	7037      	strb	r7, [r6, #0]
 8014fbc:	46a4      	mov	ip, r4
 8014fbe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014fc2:	f106 0514 	add.w	r5, r6, #20
 8014fc6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014fca:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014fd0:	f8dc 3000 	ldr.w	r3, [ip]
 8014fd4:	602b      	str	r3, [r5, #0]
 8014fd6:	6921      	ldr	r1, [r4, #16]
 8014fd8:	6823      	ldr	r3, [r4, #0]
 8014fda:	2010      	movs	r0, #16
 8014fdc:	4798      	blx	r3
 8014fde:	6130      	str	r0, [r6, #16]
 8014fe0:	b1d0      	cbz	r0, 8015018 <rcl_clock_init+0xdc>
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	e9c0 2300 	strd	r2, r3, [r0]
 8014fea:	2301      	movs	r3, #1
 8014fec:	7207      	strb	r7, [r0, #8]
 8014fee:	4a0c      	ldr	r2, [pc, #48]	@ (8015020 <rcl_clock_init+0xe4>)
 8014ff0:	7033      	strb	r3, [r6, #0]
 8014ff2:	46bc      	mov	ip, r7
 8014ff4:	60f2      	str	r2, [r6, #12]
 8014ff6:	4660      	mov	r0, ip
 8014ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ffa:	2e00      	cmp	r6, #0
 8014ffc:	d0ac      	beq.n	8014f58 <rcl_clock_init+0x1c>
 8014ffe:	2c00      	cmp	r4, #0
 8015000:	d0aa      	beq.n	8014f58 <rcl_clock_init+0x1c>
 8015002:	2300      	movs	r3, #0
 8015004:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015008:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8015028 <rcl_clock_init+0xec>
 801500c:	6133      	str	r3, [r6, #16]
 801500e:	f106 0514 	add.w	r5, r6, #20
 8015012:	469c      	mov	ip, r3
 8015014:	2702      	movs	r7, #2
 8015016:	e7b1      	b.n	8014f7c <rcl_clock_init+0x40>
 8015018:	f04f 0c0a 	mov.w	ip, #10
 801501c:	e79e      	b.n	8014f5c <rcl_clock_init+0x20>
 801501e:	bf00      	nop
 8015020:	08014f1d 	.word	0x08014f1d
 8015024:	08014f15 	.word	0x08014f15
 8015028:	08014f0d 	.word	0x08014f0d

0801502c <__atomic_load_8>:
 801502c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015030:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015034:	4a15      	ldr	r2, [pc, #84]	@ (801508c <__atomic_load_8+0x60>)
 8015036:	4b16      	ldr	r3, [pc, #88]	@ (8015090 <__atomic_load_8+0x64>)
 8015038:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801503c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015040:	fb02 f101 	mul.w	r1, r2, r1
 8015044:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015048:	fba3 2301 	umull	r2, r3, r3, r1
 801504c:	091b      	lsrs	r3, r3, #4
 801504e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015052:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8015056:	b4d0      	push	{r4, r6, r7}
 8015058:	4c0e      	ldr	r4, [pc, #56]	@ (8015094 <__atomic_load_8+0x68>)
 801505a:	1ac9      	subs	r1, r1, r3
 801505c:	1862      	adds	r2, r4, r1
 801505e:	f04f 0c01 	mov.w	ip, #1
 8015062:	e8d2 3f4f 	ldrexb	r3, [r2]
 8015066:	e8c2 cf46 	strexb	r6, ip, [r2]
 801506a:	2e00      	cmp	r6, #0
 801506c:	d1f9      	bne.n	8015062 <__atomic_load_8+0x36>
 801506e:	f3bf 8f5b 	dmb	ish
 8015072:	b2db      	uxtb	r3, r3
 8015074:	2b00      	cmp	r3, #0
 8015076:	d1f4      	bne.n	8015062 <__atomic_load_8+0x36>
 8015078:	e9d0 6700 	ldrd	r6, r7, [r0]
 801507c:	f3bf 8f5b 	dmb	ish
 8015080:	5463      	strb	r3, [r4, r1]
 8015082:	4630      	mov	r0, r6
 8015084:	4639      	mov	r1, r7
 8015086:	bcd0      	pop	{r4, r6, r7}
 8015088:	4770      	bx	lr
 801508a:	bf00      	nop
 801508c:	27d4eb2d 	.word	0x27d4eb2d
 8015090:	b21642c9 	.word	0xb21642c9
 8015094:	2000ab80 	.word	0x2000ab80

08015098 <rcutils_get_env>:
 8015098:	b168      	cbz	r0, 80150b6 <rcutils_get_env+0x1e>
 801509a:	b510      	push	{r4, lr}
 801509c:	460c      	mov	r4, r1
 801509e:	b129      	cbz	r1, 80150ac <rcutils_get_env+0x14>
 80150a0:	f003 fb56 	bl	8018750 <getenv>
 80150a4:	b120      	cbz	r0, 80150b0 <rcutils_get_env+0x18>
 80150a6:	6020      	str	r0, [r4, #0]
 80150a8:	2000      	movs	r0, #0
 80150aa:	bd10      	pop	{r4, pc}
 80150ac:	4803      	ldr	r0, [pc, #12]	@ (80150bc <rcutils_get_env+0x24>)
 80150ae:	bd10      	pop	{r4, pc}
 80150b0:	4b03      	ldr	r3, [pc, #12]	@ (80150c0 <rcutils_get_env+0x28>)
 80150b2:	6023      	str	r3, [r4, #0]
 80150b4:	bd10      	pop	{r4, pc}
 80150b6:	4803      	ldr	r0, [pc, #12]	@ (80150c4 <rcutils_get_env+0x2c>)
 80150b8:	4770      	bx	lr
 80150ba:	bf00      	nop
 80150bc:	0801a390 	.word	0x0801a390
 80150c0:	0801a4b4 	.word	0x0801a4b4
 80150c4:	0801a374 	.word	0x0801a374

080150c8 <rcutils_format_string_limit>:
 80150c8:	b40f      	push	{r0, r1, r2, r3}
 80150ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150cc:	b083      	sub	sp, #12
 80150ce:	ac08      	add	r4, sp, #32
 80150d0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80150d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80150d6:	b34e      	cbz	r6, 801512c <rcutils_format_string_limit+0x64>
 80150d8:	a808      	add	r0, sp, #32
 80150da:	f7fb f83b 	bl	8010154 <rcutils_allocator_is_valid>
 80150de:	b328      	cbz	r0, 801512c <rcutils_format_string_limit+0x64>
 80150e0:	2100      	movs	r1, #0
 80150e2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80150e4:	4632      	mov	r2, r6
 80150e6:	4608      	mov	r0, r1
 80150e8:	e9cd 3300 	strd	r3, r3, [sp]
 80150ec:	f000 f8f4 	bl	80152d8 <rcutils_vsnprintf>
 80150f0:	1c43      	adds	r3, r0, #1
 80150f2:	4605      	mov	r5, r0
 80150f4:	d01a      	beq.n	801512c <rcutils_format_string_limit+0x64>
 80150f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80150f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80150fa:	1c47      	adds	r7, r0, #1
 80150fc:	429f      	cmp	r7, r3
 80150fe:	bf84      	itt	hi
 8015100:	461f      	movhi	r7, r3
 8015102:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8015106:	4638      	mov	r0, r7
 8015108:	9b08      	ldr	r3, [sp, #32]
 801510a:	4798      	blx	r3
 801510c:	4604      	mov	r4, r0
 801510e:	b168      	cbz	r0, 801512c <rcutils_format_string_limit+0x64>
 8015110:	9b01      	ldr	r3, [sp, #4]
 8015112:	4632      	mov	r2, r6
 8015114:	4639      	mov	r1, r7
 8015116:	f000 f8df 	bl	80152d8 <rcutils_vsnprintf>
 801511a:	2800      	cmp	r0, #0
 801511c:	db02      	blt.n	8015124 <rcutils_format_string_limit+0x5c>
 801511e:	2300      	movs	r3, #0
 8015120:	5563      	strb	r3, [r4, r5]
 8015122:	e004      	b.n	801512e <rcutils_format_string_limit+0x66>
 8015124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015126:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015128:	4620      	mov	r0, r4
 801512a:	4798      	blx	r3
 801512c:	2400      	movs	r4, #0
 801512e:	4620      	mov	r0, r4
 8015130:	b003      	add	sp, #12
 8015132:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015136:	b004      	add	sp, #16
 8015138:	4770      	bx	lr
 801513a:	bf00      	nop

0801513c <rcutils_repl_str>:
 801513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015140:	ed2d 8b02 	vpush	{d8}
 8015144:	b087      	sub	sp, #28
 8015146:	4680      	mov	r8, r0
 8015148:	4608      	mov	r0, r1
 801514a:	f8cd 8004 	str.w	r8, [sp, #4]
 801514e:	ee08 2a10 	vmov	s16, r2
 8015152:	468a      	mov	sl, r1
 8015154:	4699      	mov	r9, r3
 8015156:	f7eb f845 	bl	80001e4 <strlen>
 801515a:	2600      	movs	r6, #0
 801515c:	4647      	mov	r7, r8
 801515e:	9002      	str	r0, [sp, #8]
 8015160:	46b3      	mov	fp, r6
 8015162:	2510      	movs	r5, #16
 8015164:	46b0      	mov	r8, r6
 8015166:	e01d      	b.n	80151a4 <rcutils_repl_str+0x68>
 8015168:	f10b 0b01 	add.w	fp, fp, #1
 801516c:	455e      	cmp	r6, fp
 801516e:	d211      	bcs.n	8015194 <rcutils_repl_str+0x58>
 8015170:	442e      	add	r6, r5
 8015172:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015176:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801517a:	00b1      	lsls	r1, r6, #2
 801517c:	4798      	blx	r3
 801517e:	2800      	cmp	r0, #0
 8015180:	f000 8088 	beq.w	8015294 <rcutils_repl_str+0x158>
 8015184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015188:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801518c:	4680      	mov	r8, r0
 801518e:	bf28      	it	cs
 8015190:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8015194:	9a01      	ldr	r2, [sp, #4]
 8015196:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801519a:	1aa2      	subs	r2, r4, r2
 801519c:	f843 2c04 	str.w	r2, [r3, #-4]
 80151a0:	9b02      	ldr	r3, [sp, #8]
 80151a2:	18e7      	adds	r7, r4, r3
 80151a4:	4651      	mov	r1, sl
 80151a6:	4638      	mov	r0, r7
 80151a8:	f003 ffaf 	bl	801910a <strstr>
 80151ac:	4604      	mov	r4, r0
 80151ae:	4640      	mov	r0, r8
 80151b0:	2c00      	cmp	r4, #0
 80151b2:	d1d9      	bne.n	8015168 <rcutils_repl_str+0x2c>
 80151b4:	46b8      	mov	r8, r7
 80151b6:	4607      	mov	r7, r0
 80151b8:	4640      	mov	r0, r8
 80151ba:	f7eb f813 	bl	80001e4 <strlen>
 80151be:	9b01      	ldr	r3, [sp, #4]
 80151c0:	eba8 0303 	sub.w	r3, r8, r3
 80151c4:	181c      	adds	r4, r3, r0
 80151c6:	9404      	str	r4, [sp, #16]
 80151c8:	f1bb 0f00 	cmp.w	fp, #0
 80151cc:	d04a      	beq.n	8015264 <rcutils_repl_str+0x128>
 80151ce:	ee18 0a10 	vmov	r0, s16
 80151d2:	f7eb f807 	bl	80001e4 <strlen>
 80151d6:	9b02      	ldr	r3, [sp, #8]
 80151d8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80151dc:	1ac3      	subs	r3, r0, r3
 80151de:	fb0b 4303 	mla	r3, fp, r3, r4
 80151e2:	461a      	mov	r2, r3
 80151e4:	9305      	str	r3, [sp, #20]
 80151e6:	4606      	mov	r6, r0
 80151e8:	f8d9 3000 	ldr.w	r3, [r9]
 80151ec:	1c50      	adds	r0, r2, #1
 80151ee:	4798      	blx	r3
 80151f0:	9003      	str	r0, [sp, #12]
 80151f2:	2800      	cmp	r0, #0
 80151f4:	d04f      	beq.n	8015296 <rcutils_repl_str+0x15a>
 80151f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80151fa:	683a      	ldr	r2, [r7, #0]
 80151fc:	4641      	mov	r1, r8
 80151fe:	f004 f826 	bl	801924e <memcpy>
 8015202:	683d      	ldr	r5, [r7, #0]
 8015204:	9b03      	ldr	r3, [sp, #12]
 8015206:	9701      	str	r7, [sp, #4]
 8015208:	46ba      	mov	sl, r7
 801520a:	441d      	add	r5, r3
 801520c:	9f02      	ldr	r7, [sp, #8]
 801520e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015212:	2401      	movs	r4, #1
 8015214:	46d1      	mov	r9, sl
 8015216:	ee18 aa10 	vmov	sl, s16
 801521a:	e00a      	b.n	8015232 <rcutils_repl_str+0xf6>
 801521c:	f8d9 5000 	ldr.w	r5, [r9]
 8015220:	1aaa      	subs	r2, r5, r2
 8015222:	1885      	adds	r5, r0, r2
 8015224:	f004 f813 	bl	801924e <memcpy>
 8015228:	45a3      	cmp	fp, r4
 801522a:	f104 0201 	add.w	r2, r4, #1
 801522e:	d935      	bls.n	801529c <rcutils_repl_str+0x160>
 8015230:	4614      	mov	r4, r2
 8015232:	4632      	mov	r2, r6
 8015234:	4651      	mov	r1, sl
 8015236:	4628      	mov	r0, r5
 8015238:	f004 f809 	bl	801924e <memcpy>
 801523c:	f859 2b04 	ldr.w	r2, [r9], #4
 8015240:	45a3      	cmp	fp, r4
 8015242:	443a      	add	r2, r7
 8015244:	eb05 0006 	add.w	r0, r5, r6
 8015248:	eb08 0102 	add.w	r1, r8, r2
 801524c:	d1e6      	bne.n	801521c <rcutils_repl_str+0xe0>
 801524e:	9b04      	ldr	r3, [sp, #16]
 8015250:	1a9a      	subs	r2, r3, r2
 8015252:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8015256:	f003 fffa 	bl	801924e <memcpy>
 801525a:	9a03      	ldr	r2, [sp, #12]
 801525c:	9905      	ldr	r1, [sp, #20]
 801525e:	2300      	movs	r3, #0
 8015260:	5453      	strb	r3, [r2, r1]
 8015262:	e00b      	b.n	801527c <rcutils_repl_str+0x140>
 8015264:	4620      	mov	r0, r4
 8015266:	f8d9 3000 	ldr.w	r3, [r9]
 801526a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801526e:	3001      	adds	r0, #1
 8015270:	4798      	blx	r3
 8015272:	9003      	str	r0, [sp, #12]
 8015274:	b110      	cbz	r0, 801527c <rcutils_repl_str+0x140>
 8015276:	9901      	ldr	r1, [sp, #4]
 8015278:	f003 ffe1 	bl	801923e <strcpy>
 801527c:	4638      	mov	r0, r7
 801527e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015282:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015286:	4798      	blx	r3
 8015288:	9803      	ldr	r0, [sp, #12]
 801528a:	b007      	add	sp, #28
 801528c:	ecbd 8b02 	vpop	{d8}
 8015290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015294:	4647      	mov	r7, r8
 8015296:	2300      	movs	r3, #0
 8015298:	9303      	str	r3, [sp, #12]
 801529a:	e7ef      	b.n	801527c <rcutils_repl_str+0x140>
 801529c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80152a0:	e7db      	b.n	801525a <rcutils_repl_str+0x11e>
 80152a2:	bf00      	nop

080152a4 <rcutils_snprintf>:
 80152a4:	b40c      	push	{r2, r3}
 80152a6:	b530      	push	{r4, r5, lr}
 80152a8:	b083      	sub	sp, #12
 80152aa:	ab06      	add	r3, sp, #24
 80152ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80152b0:	9301      	str	r3, [sp, #4]
 80152b2:	b152      	cbz	r2, 80152ca <rcutils_snprintf+0x26>
 80152b4:	b138      	cbz	r0, 80152c6 <rcutils_snprintf+0x22>
 80152b6:	b141      	cbz	r1, 80152ca <rcutils_snprintf+0x26>
 80152b8:	f003 fe5e 	bl	8018f78 <vsniprintf>
 80152bc:	b003      	add	sp, #12
 80152be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80152c2:	b002      	add	sp, #8
 80152c4:	4770      	bx	lr
 80152c6:	2900      	cmp	r1, #0
 80152c8:	d0f6      	beq.n	80152b8 <rcutils_snprintf+0x14>
 80152ca:	f003 ff8b 	bl	80191e4 <__errno>
 80152ce:	2316      	movs	r3, #22
 80152d0:	6003      	str	r3, [r0, #0]
 80152d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80152d6:	e7f1      	b.n	80152bc <rcutils_snprintf+0x18>

080152d8 <rcutils_vsnprintf>:
 80152d8:	b570      	push	{r4, r5, r6, lr}
 80152da:	b13a      	cbz	r2, 80152ec <rcutils_vsnprintf+0x14>
 80152dc:	b120      	cbz	r0, 80152e8 <rcutils_vsnprintf+0x10>
 80152de:	b129      	cbz	r1, 80152ec <rcutils_vsnprintf+0x14>
 80152e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80152e4:	f003 be48 	b.w	8018f78 <vsniprintf>
 80152e8:	2900      	cmp	r1, #0
 80152ea:	d0f9      	beq.n	80152e0 <rcutils_vsnprintf+0x8>
 80152ec:	f003 ff7a 	bl	80191e4 <__errno>
 80152f0:	2316      	movs	r3, #22
 80152f2:	6003      	str	r3, [r0, #0]
 80152f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80152f8:	bd70      	pop	{r4, r5, r6, pc}
 80152fa:	bf00      	nop

080152fc <rcutils_strdup>:
 80152fc:	b084      	sub	sp, #16
 80152fe:	b570      	push	{r4, r5, r6, lr}
 8015300:	b082      	sub	sp, #8
 8015302:	ac07      	add	r4, sp, #28
 8015304:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015308:	4605      	mov	r5, r0
 801530a:	b1b0      	cbz	r0, 801533a <rcutils_strdup+0x3e>
 801530c:	f7ea ff6a 	bl	80001e4 <strlen>
 8015310:	1c42      	adds	r2, r0, #1
 8015312:	9b07      	ldr	r3, [sp, #28]
 8015314:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015316:	9201      	str	r2, [sp, #4]
 8015318:	4606      	mov	r6, r0
 801531a:	4610      	mov	r0, r2
 801531c:	4798      	blx	r3
 801531e:	4604      	mov	r4, r0
 8015320:	b128      	cbz	r0, 801532e <rcutils_strdup+0x32>
 8015322:	9a01      	ldr	r2, [sp, #4]
 8015324:	4629      	mov	r1, r5
 8015326:	f003 ff92 	bl	801924e <memcpy>
 801532a:	2300      	movs	r3, #0
 801532c:	55a3      	strb	r3, [r4, r6]
 801532e:	4620      	mov	r0, r4
 8015330:	b002      	add	sp, #8
 8015332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015336:	b004      	add	sp, #16
 8015338:	4770      	bx	lr
 801533a:	4604      	mov	r4, r0
 801533c:	e7f7      	b.n	801532e <rcutils_strdup+0x32>
 801533e:	bf00      	nop

08015340 <rcutils_strndup>:
 8015340:	b082      	sub	sp, #8
 8015342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015344:	ac06      	add	r4, sp, #24
 8015346:	e884 000c 	stmia.w	r4, {r2, r3}
 801534a:	4605      	mov	r5, r0
 801534c:	b188      	cbz	r0, 8015372 <rcutils_strndup+0x32>
 801534e:	1c4f      	adds	r7, r1, #1
 8015350:	460e      	mov	r6, r1
 8015352:	4638      	mov	r0, r7
 8015354:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015356:	4790      	blx	r2
 8015358:	4604      	mov	r4, r0
 801535a:	b128      	cbz	r0, 8015368 <rcutils_strndup+0x28>
 801535c:	463a      	mov	r2, r7
 801535e:	4629      	mov	r1, r5
 8015360:	f003 ff75 	bl	801924e <memcpy>
 8015364:	2300      	movs	r3, #0
 8015366:	55a3      	strb	r3, [r4, r6]
 8015368:	4620      	mov	r0, r4
 801536a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801536e:	b002      	add	sp, #8
 8015370:	4770      	bx	lr
 8015372:	4604      	mov	r4, r0
 8015374:	e7f8      	b.n	8015368 <rcutils_strndup+0x28>
 8015376:	bf00      	nop

08015378 <rcutils_get_zero_initialized_string_map>:
 8015378:	4b01      	ldr	r3, [pc, #4]	@ (8015380 <rcutils_get_zero_initialized_string_map+0x8>)
 801537a:	2000      	movs	r0, #0
 801537c:	6018      	str	r0, [r3, #0]
 801537e:	4770      	bx	lr
 8015380:	2000ab98 	.word	0x2000ab98

08015384 <rcutils_string_map_reserve>:
 8015384:	2800      	cmp	r0, #0
 8015386:	d05f      	beq.n	8015448 <rcutils_string_map_reserve+0xc4>
 8015388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801538c:	460c      	mov	r4, r1
 801538e:	6801      	ldr	r1, [r0, #0]
 8015390:	b082      	sub	sp, #8
 8015392:	4605      	mov	r5, r0
 8015394:	b129      	cbz	r1, 80153a2 <rcutils_string_map_reserve+0x1e>
 8015396:	68cb      	ldr	r3, [r1, #12]
 8015398:	42a3      	cmp	r3, r4
 801539a:	d906      	bls.n	80153aa <rcutils_string_map_reserve+0x26>
 801539c:	461c      	mov	r4, r3
 801539e:	2900      	cmp	r1, #0
 80153a0:	d1f9      	bne.n	8015396 <rcutils_string_map_reserve+0x12>
 80153a2:	201f      	movs	r0, #31
 80153a4:	b002      	add	sp, #8
 80153a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153aa:	688b      	ldr	r3, [r1, #8]
 80153ac:	42a3      	cmp	r3, r4
 80153ae:	d047      	beq.n	8015440 <rcutils_string_map_reserve+0xbc>
 80153b0:	6a0e      	ldr	r6, [r1, #32]
 80153b2:	2c00      	cmp	r4, #0
 80153b4:	d034      	beq.n	8015420 <rcutils_string_map_reserve+0x9c>
 80153b6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80153ba:	d243      	bcs.n	8015444 <rcutils_string_map_reserve+0xc0>
 80153bc:	00a7      	lsls	r7, r4, #2
 80153be:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80153c2:	6808      	ldr	r0, [r1, #0]
 80153c4:	4632      	mov	r2, r6
 80153c6:	4639      	mov	r1, r7
 80153c8:	47c0      	blx	r8
 80153ca:	2800      	cmp	r0, #0
 80153cc:	d03a      	beq.n	8015444 <rcutils_string_map_reserve+0xc0>
 80153ce:	682b      	ldr	r3, [r5, #0]
 80153d0:	4632      	mov	r2, r6
 80153d2:	6018      	str	r0, [r3, #0]
 80153d4:	4639      	mov	r1, r7
 80153d6:	6858      	ldr	r0, [r3, #4]
 80153d8:	47c0      	blx	r8
 80153da:	2800      	cmp	r0, #0
 80153dc:	d032      	beq.n	8015444 <rcutils_string_map_reserve+0xc0>
 80153de:	682d      	ldr	r5, [r5, #0]
 80153e0:	68ab      	ldr	r3, [r5, #8]
 80153e2:	6068      	str	r0, [r5, #4]
 80153e4:	42a3      	cmp	r3, r4
 80153e6:	d226      	bcs.n	8015436 <rcutils_string_map_reserve+0xb2>
 80153e8:	682a      	ldr	r2, [r5, #0]
 80153ea:	eb00 0c07 	add.w	ip, r0, r7
 80153ee:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80153f2:	45e6      	cmp	lr, ip
 80153f4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80153f8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80153fc:	d203      	bcs.n	8015406 <rcutils_string_map_reserve+0x82>
 80153fe:	eb02 0c07 	add.w	ip, r2, r7
 8015402:	4566      	cmp	r6, ip
 8015404:	d322      	bcc.n	801544c <rcutils_string_map_reserve+0xc8>
 8015406:	1ae3      	subs	r3, r4, r3
 8015408:	009a      	lsls	r2, r3, #2
 801540a:	4670      	mov	r0, lr
 801540c:	2100      	movs	r1, #0
 801540e:	9201      	str	r2, [sp, #4]
 8015410:	f003 fe54 	bl	80190bc <memset>
 8015414:	9a01      	ldr	r2, [sp, #4]
 8015416:	2100      	movs	r1, #0
 8015418:	4630      	mov	r0, r6
 801541a:	f003 fe4f 	bl	80190bc <memset>
 801541e:	e00a      	b.n	8015436 <rcutils_string_map_reserve+0xb2>
 8015420:	694f      	ldr	r7, [r1, #20]
 8015422:	6808      	ldr	r0, [r1, #0]
 8015424:	4631      	mov	r1, r6
 8015426:	47b8      	blx	r7
 8015428:	682b      	ldr	r3, [r5, #0]
 801542a:	4631      	mov	r1, r6
 801542c:	6858      	ldr	r0, [r3, #4]
 801542e:	601c      	str	r4, [r3, #0]
 8015430:	47b8      	blx	r7
 8015432:	682d      	ldr	r5, [r5, #0]
 8015434:	606c      	str	r4, [r5, #4]
 8015436:	2000      	movs	r0, #0
 8015438:	60ac      	str	r4, [r5, #8]
 801543a:	b002      	add	sp, #8
 801543c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015440:	2000      	movs	r0, #0
 8015442:	e7af      	b.n	80153a4 <rcutils_string_map_reserve+0x20>
 8015444:	200a      	movs	r0, #10
 8015446:	e7ad      	b.n	80153a4 <rcutils_string_map_reserve+0x20>
 8015448:	200b      	movs	r0, #11
 801544a:	4770      	bx	lr
 801544c:	1f0b      	subs	r3, r1, #4
 801544e:	4418      	add	r0, r3
 8015450:	4413      	add	r3, r2
 8015452:	3a04      	subs	r2, #4
 8015454:	4417      	add	r7, r2
 8015456:	2200      	movs	r2, #0
 8015458:	f843 2f04 	str.w	r2, [r3, #4]!
 801545c:	42bb      	cmp	r3, r7
 801545e:	f840 2f04 	str.w	r2, [r0, #4]!
 8015462:	d1f9      	bne.n	8015458 <rcutils_string_map_reserve+0xd4>
 8015464:	e7e7      	b.n	8015436 <rcutils_string_map_reserve+0xb2>
 8015466:	bf00      	nop

08015468 <rcutils_string_map_init>:
 8015468:	b082      	sub	sp, #8
 801546a:	b570      	push	{r4, r5, r6, lr}
 801546c:	ac04      	add	r4, sp, #16
 801546e:	e884 000c 	stmia.w	r4, {r2, r3}
 8015472:	b380      	cbz	r0, 80154d6 <rcutils_string_map_init+0x6e>
 8015474:	6806      	ldr	r6, [r0, #0]
 8015476:	4604      	mov	r4, r0
 8015478:	b12e      	cbz	r6, 8015486 <rcutils_string_map_init+0x1e>
 801547a:	251e      	movs	r5, #30
 801547c:	4628      	mov	r0, r5
 801547e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015482:	b002      	add	sp, #8
 8015484:	4770      	bx	lr
 8015486:	a804      	add	r0, sp, #16
 8015488:	460d      	mov	r5, r1
 801548a:	f7fa fe63 	bl	8010154 <rcutils_allocator_is_valid>
 801548e:	b310      	cbz	r0, 80154d6 <rcutils_string_map_init+0x6e>
 8015490:	9b04      	ldr	r3, [sp, #16]
 8015492:	9908      	ldr	r1, [sp, #32]
 8015494:	2024      	movs	r0, #36	@ 0x24
 8015496:	4798      	blx	r3
 8015498:	6020      	str	r0, [r4, #0]
 801549a:	b310      	cbz	r0, 80154e2 <rcutils_string_map_init+0x7a>
 801549c:	f10d 0e10 	add.w	lr, sp, #16
 80154a0:	e9c0 6600 	strd	r6, r6, [r0]
 80154a4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80154a8:	f100 0c10 	add.w	ip, r0, #16
 80154ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80154b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154b4:	f8de 3000 	ldr.w	r3, [lr]
 80154b8:	f8cc 3000 	str.w	r3, [ip]
 80154bc:	4629      	mov	r1, r5
 80154be:	4620      	mov	r0, r4
 80154c0:	f7ff ff60 	bl	8015384 <rcutils_string_map_reserve>
 80154c4:	4605      	mov	r5, r0
 80154c6:	2800      	cmp	r0, #0
 80154c8:	d0d8      	beq.n	801547c <rcutils_string_map_init+0x14>
 80154ca:	9b05      	ldr	r3, [sp, #20]
 80154cc:	9908      	ldr	r1, [sp, #32]
 80154ce:	6820      	ldr	r0, [r4, #0]
 80154d0:	4798      	blx	r3
 80154d2:	6026      	str	r6, [r4, #0]
 80154d4:	e7d2      	b.n	801547c <rcutils_string_map_init+0x14>
 80154d6:	250b      	movs	r5, #11
 80154d8:	4628      	mov	r0, r5
 80154da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154de:	b002      	add	sp, #8
 80154e0:	4770      	bx	lr
 80154e2:	250a      	movs	r5, #10
 80154e4:	e7ca      	b.n	801547c <rcutils_string_map_init+0x14>
 80154e6:	bf00      	nop

080154e8 <rcutils_string_map_fini>:
 80154e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154ec:	b082      	sub	sp, #8
 80154ee:	2800      	cmp	r0, #0
 80154f0:	d03a      	beq.n	8015568 <rcutils_string_map_fini+0x80>
 80154f2:	6804      	ldr	r4, [r0, #0]
 80154f4:	4606      	mov	r6, r0
 80154f6:	2c00      	cmp	r4, #0
 80154f8:	d032      	beq.n	8015560 <rcutils_string_map_fini+0x78>
 80154fa:	68a3      	ldr	r3, [r4, #8]
 80154fc:	b32b      	cbz	r3, 801554a <rcutils_string_map_fini+0x62>
 80154fe:	2500      	movs	r5, #0
 8015500:	6822      	ldr	r2, [r4, #0]
 8015502:	462f      	mov	r7, r5
 8015504:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015508:	b1e0      	cbz	r0, 8015544 <rcutils_string_map_fini+0x5c>
 801550a:	6a21      	ldr	r1, [r4, #32]
 801550c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8015510:	9101      	str	r1, [sp, #4]
 8015512:	47c0      	blx	r8
 8015514:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015518:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801551c:	9901      	ldr	r1, [sp, #4]
 801551e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015522:	47c0      	blx	r8
 8015524:	68e3      	ldr	r3, [r4, #12]
 8015526:	6862      	ldr	r2, [r4, #4]
 8015528:	3b01      	subs	r3, #1
 801552a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801552e:	60e3      	str	r3, [r4, #12]
 8015530:	6834      	ldr	r4, [r6, #0]
 8015532:	68a3      	ldr	r3, [r4, #8]
 8015534:	3501      	adds	r5, #1
 8015536:	429d      	cmp	r5, r3
 8015538:	d207      	bcs.n	801554a <rcutils_string_map_fini+0x62>
 801553a:	6822      	ldr	r2, [r4, #0]
 801553c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015540:	2800      	cmp	r0, #0
 8015542:	d1e2      	bne.n	801550a <rcutils_string_map_fini+0x22>
 8015544:	3501      	adds	r5, #1
 8015546:	429d      	cmp	r5, r3
 8015548:	d3dc      	bcc.n	8015504 <rcutils_string_map_fini+0x1c>
 801554a:	2100      	movs	r1, #0
 801554c:	4630      	mov	r0, r6
 801554e:	f7ff ff19 	bl	8015384 <rcutils_string_map_reserve>
 8015552:	4604      	mov	r4, r0
 8015554:	b920      	cbnz	r0, 8015560 <rcutils_string_map_fini+0x78>
 8015556:	6830      	ldr	r0, [r6, #0]
 8015558:	6943      	ldr	r3, [r0, #20]
 801555a:	6a01      	ldr	r1, [r0, #32]
 801555c:	4798      	blx	r3
 801555e:	6034      	str	r4, [r6, #0]
 8015560:	4620      	mov	r0, r4
 8015562:	b002      	add	sp, #8
 8015564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015568:	240b      	movs	r4, #11
 801556a:	4620      	mov	r0, r4
 801556c:	b002      	add	sp, #8
 801556e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015572:	bf00      	nop

08015574 <rcutils_string_map_getn>:
 8015574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015578:	b300      	cbz	r0, 80155bc <rcutils_string_map_getn+0x48>
 801557a:	6807      	ldr	r7, [r0, #0]
 801557c:	b1ff      	cbz	r7, 80155be <rcutils_string_map_getn+0x4a>
 801557e:	4688      	mov	r8, r1
 8015580:	b1e1      	cbz	r1, 80155bc <rcutils_string_map_getn+0x48>
 8015582:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8015586:	683e      	ldr	r6, [r7, #0]
 8015588:	f1ba 0f00 	cmp.w	sl, #0
 801558c:	d016      	beq.n	80155bc <rcutils_string_map_getn+0x48>
 801558e:	4691      	mov	r9, r2
 8015590:	3e04      	subs	r6, #4
 8015592:	2400      	movs	r4, #0
 8015594:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8015598:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801559c:	4628      	mov	r0, r5
 801559e:	3401      	adds	r4, #1
 80155a0:	b155      	cbz	r5, 80155b8 <rcutils_string_map_getn+0x44>
 80155a2:	f7ea fe1f 	bl	80001e4 <strlen>
 80155a6:	4548      	cmp	r0, r9
 80155a8:	4602      	mov	r2, r0
 80155aa:	4629      	mov	r1, r5
 80155ac:	bf38      	it	cc
 80155ae:	464a      	movcc	r2, r9
 80155b0:	4640      	mov	r0, r8
 80155b2:	f003 fd98 	bl	80190e6 <strncmp>
 80155b6:	b128      	cbz	r0, 80155c4 <rcutils_string_map_getn+0x50>
 80155b8:	45a2      	cmp	sl, r4
 80155ba:	d1eb      	bne.n	8015594 <rcutils_string_map_getn+0x20>
 80155bc:	2700      	movs	r7, #0
 80155be:	4638      	mov	r0, r7
 80155c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f853 700b 	ldr.w	r7, [r3, fp]
 80155ca:	4638      	mov	r0, r7
 80155cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080155d0 <rcutils_system_time_now>:
 80155d0:	b308      	cbz	r0, 8015616 <rcutils_system_time_now+0x46>
 80155d2:	b570      	push	{r4, r5, r6, lr}
 80155d4:	b084      	sub	sp, #16
 80155d6:	4604      	mov	r4, r0
 80155d8:	4669      	mov	r1, sp
 80155da:	2001      	movs	r0, #1
 80155dc:	f7ec f924 	bl	8001828 <clock_gettime>
 80155e0:	e9dd 3500 	ldrd	r3, r5, [sp]
 80155e4:	2d00      	cmp	r5, #0
 80155e6:	db13      	blt.n	8015610 <rcutils_system_time_now+0x40>
 80155e8:	9902      	ldr	r1, [sp, #8]
 80155ea:	2900      	cmp	r1, #0
 80155ec:	db0d      	blt.n	801560a <rcutils_system_time_now+0x3a>
 80155ee:	4e0b      	ldr	r6, [pc, #44]	@ (801561c <rcutils_system_time_now+0x4c>)
 80155f0:	fba3 3206 	umull	r3, r2, r3, r6
 80155f4:	185b      	adds	r3, r3, r1
 80155f6:	fb06 2205 	mla	r2, r6, r5, r2
 80155fa:	f04f 0000 	mov.w	r0, #0
 80155fe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8015602:	e9c4 3200 	strd	r3, r2, [r4]
 8015606:	b004      	add	sp, #16
 8015608:	bd70      	pop	{r4, r5, r6, pc}
 801560a:	ea53 0205 	orrs.w	r2, r3, r5
 801560e:	d1ee      	bne.n	80155ee <rcutils_system_time_now+0x1e>
 8015610:	2002      	movs	r0, #2
 8015612:	b004      	add	sp, #16
 8015614:	bd70      	pop	{r4, r5, r6, pc}
 8015616:	200b      	movs	r0, #11
 8015618:	4770      	bx	lr
 801561a:	bf00      	nop
 801561c:	3b9aca00 	.word	0x3b9aca00

08015620 <rcutils_steady_time_now>:
 8015620:	b308      	cbz	r0, 8015666 <rcutils_steady_time_now+0x46>
 8015622:	b570      	push	{r4, r5, r6, lr}
 8015624:	b084      	sub	sp, #16
 8015626:	4604      	mov	r4, r0
 8015628:	4669      	mov	r1, sp
 801562a:	2000      	movs	r0, #0
 801562c:	f7ec f8fc 	bl	8001828 <clock_gettime>
 8015630:	e9dd 3500 	ldrd	r3, r5, [sp]
 8015634:	2d00      	cmp	r5, #0
 8015636:	db13      	blt.n	8015660 <rcutils_steady_time_now+0x40>
 8015638:	9902      	ldr	r1, [sp, #8]
 801563a:	2900      	cmp	r1, #0
 801563c:	db0d      	blt.n	801565a <rcutils_steady_time_now+0x3a>
 801563e:	4e0b      	ldr	r6, [pc, #44]	@ (801566c <rcutils_steady_time_now+0x4c>)
 8015640:	fba3 3206 	umull	r3, r2, r3, r6
 8015644:	185b      	adds	r3, r3, r1
 8015646:	fb06 2205 	mla	r2, r6, r5, r2
 801564a:	f04f 0000 	mov.w	r0, #0
 801564e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8015652:	e9c4 3200 	strd	r3, r2, [r4]
 8015656:	b004      	add	sp, #16
 8015658:	bd70      	pop	{r4, r5, r6, pc}
 801565a:	ea53 0205 	orrs.w	r2, r3, r5
 801565e:	d1ee      	bne.n	801563e <rcutils_steady_time_now+0x1e>
 8015660:	2002      	movs	r0, #2
 8015662:	b004      	add	sp, #16
 8015664:	bd70      	pop	{r4, r5, r6, pc}
 8015666:	200b      	movs	r0, #11
 8015668:	4770      	bx	lr
 801566a:	bf00      	nop
 801566c:	3b9aca00 	.word	0x3b9aca00

08015670 <rmw_get_zero_initialized_context>:
 8015670:	b510      	push	{r4, lr}
 8015672:	4604      	mov	r4, r0
 8015674:	3010      	adds	r0, #16
 8015676:	f000 f80b 	bl	8015690 <rmw_get_zero_initialized_init_options>
 801567a:	2300      	movs	r3, #0
 801567c:	2000      	movs	r0, #0
 801567e:	2100      	movs	r1, #0
 8015680:	e9c4 0100 	strd	r0, r1, [r4]
 8015684:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8015688:	60a3      	str	r3, [r4, #8]
 801568a:	4620      	mov	r0, r4
 801568c:	bd10      	pop	{r4, pc}
 801568e:	bf00      	nop

08015690 <rmw_get_zero_initialized_init_options>:
 8015690:	b510      	push	{r4, lr}
 8015692:	2238      	movs	r2, #56	@ 0x38
 8015694:	4604      	mov	r4, r0
 8015696:	2100      	movs	r1, #0
 8015698:	f003 fd10 	bl	80190bc <memset>
 801569c:	f104 0010 	add.w	r0, r4, #16
 80156a0:	f000 f806 	bl	80156b0 <rmw_get_default_security_options>
 80156a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80156a8:	60e3      	str	r3, [r4, #12]
 80156aa:	4620      	mov	r0, r4
 80156ac:	bd10      	pop	{r4, pc}
 80156ae:	bf00      	nop

080156b0 <rmw_get_default_security_options>:
 80156b0:	2200      	movs	r2, #0
 80156b2:	7002      	strb	r2, [r0, #0]
 80156b4:	6042      	str	r2, [r0, #4]
 80156b6:	4770      	bx	lr

080156b8 <rmw_validate_full_topic_name>:
 80156b8:	2800      	cmp	r0, #0
 80156ba:	d057      	beq.n	801576c <rmw_validate_full_topic_name+0xb4>
 80156bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156c0:	460d      	mov	r5, r1
 80156c2:	2900      	cmp	r1, #0
 80156c4:	d054      	beq.n	8015770 <rmw_validate_full_topic_name+0xb8>
 80156c6:	4616      	mov	r6, r2
 80156c8:	4604      	mov	r4, r0
 80156ca:	f7ea fd8b 	bl	80001e4 <strlen>
 80156ce:	b148      	cbz	r0, 80156e4 <rmw_validate_full_topic_name+0x2c>
 80156d0:	7823      	ldrb	r3, [r4, #0]
 80156d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80156d4:	d00d      	beq.n	80156f2 <rmw_validate_full_topic_name+0x3a>
 80156d6:	2302      	movs	r3, #2
 80156d8:	602b      	str	r3, [r5, #0]
 80156da:	b13e      	cbz	r6, 80156ec <rmw_validate_full_topic_name+0x34>
 80156dc:	2000      	movs	r0, #0
 80156de:	6030      	str	r0, [r6, #0]
 80156e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156e4:	2301      	movs	r3, #1
 80156e6:	602b      	str	r3, [r5, #0]
 80156e8:	2e00      	cmp	r6, #0
 80156ea:	d1f7      	bne.n	80156dc <rmw_validate_full_topic_name+0x24>
 80156ec:	2000      	movs	r0, #0
 80156ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156f2:	1e43      	subs	r3, r0, #1
 80156f4:	5ce2      	ldrb	r2, [r4, r3]
 80156f6:	2a2f      	cmp	r2, #47	@ 0x2f
 80156f8:	d03c      	beq.n	8015774 <rmw_validate_full_topic_name+0xbc>
 80156fa:	1e63      	subs	r3, r4, #1
 80156fc:	eb03 0800 	add.w	r8, r3, r0
 8015700:	f1c4 0e01 	rsb	lr, r4, #1
 8015704:	eb0e 0703 	add.w	r7, lr, r3
 8015708:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801570c:	f021 0220 	bic.w	r2, r1, #32
 8015710:	3a41      	subs	r2, #65	@ 0x41
 8015712:	2a19      	cmp	r2, #25
 8015714:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8015718:	d90b      	bls.n	8015732 <rmw_validate_full_topic_name+0x7a>
 801571a:	295f      	cmp	r1, #95	@ 0x5f
 801571c:	d009      	beq.n	8015732 <rmw_validate_full_topic_name+0x7a>
 801571e:	f1bc 0f0a 	cmp.w	ip, #10
 8015722:	d906      	bls.n	8015732 <rmw_validate_full_topic_name+0x7a>
 8015724:	2304      	movs	r3, #4
 8015726:	602b      	str	r3, [r5, #0]
 8015728:	2e00      	cmp	r6, #0
 801572a:	d0df      	beq.n	80156ec <rmw_validate_full_topic_name+0x34>
 801572c:	6037      	str	r7, [r6, #0]
 801572e:	2000      	movs	r0, #0
 8015730:	e7d6      	b.n	80156e0 <rmw_validate_full_topic_name+0x28>
 8015732:	4543      	cmp	r3, r8
 8015734:	d1e6      	bne.n	8015704 <rmw_validate_full_topic_name+0x4c>
 8015736:	4f1a      	ldr	r7, [pc, #104]	@ (80157a0 <rmw_validate_full_topic_name+0xe8>)
 8015738:	2301      	movs	r3, #1
 801573a:	e004      	b.n	8015746 <rmw_validate_full_topic_name+0x8e>
 801573c:	4298      	cmp	r0, r3
 801573e:	f104 0401 	add.w	r4, r4, #1
 8015742:	d91c      	bls.n	801577e <rmw_validate_full_topic_name+0xc6>
 8015744:	4613      	mov	r3, r2
 8015746:	4298      	cmp	r0, r3
 8015748:	f103 0201 	add.w	r2, r3, #1
 801574c:	d0f6      	beq.n	801573c <rmw_validate_full_topic_name+0x84>
 801574e:	7821      	ldrb	r1, [r4, #0]
 8015750:	292f      	cmp	r1, #47	@ 0x2f
 8015752:	d1f3      	bne.n	801573c <rmw_validate_full_topic_name+0x84>
 8015754:	7861      	ldrb	r1, [r4, #1]
 8015756:	292f      	cmp	r1, #47	@ 0x2f
 8015758:	d01c      	beq.n	8015794 <rmw_validate_full_topic_name+0xdc>
 801575a:	5dc9      	ldrb	r1, [r1, r7]
 801575c:	0749      	lsls	r1, r1, #29
 801575e:	d5ed      	bpl.n	801573c <rmw_validate_full_topic_name+0x84>
 8015760:	2206      	movs	r2, #6
 8015762:	602a      	str	r2, [r5, #0]
 8015764:	2e00      	cmp	r6, #0
 8015766:	d0c1      	beq.n	80156ec <rmw_validate_full_topic_name+0x34>
 8015768:	6033      	str	r3, [r6, #0]
 801576a:	e7bf      	b.n	80156ec <rmw_validate_full_topic_name+0x34>
 801576c:	200b      	movs	r0, #11
 801576e:	4770      	bx	lr
 8015770:	200b      	movs	r0, #11
 8015772:	e7b5      	b.n	80156e0 <rmw_validate_full_topic_name+0x28>
 8015774:	2203      	movs	r2, #3
 8015776:	602a      	str	r2, [r5, #0]
 8015778:	2e00      	cmp	r6, #0
 801577a:	d1f5      	bne.n	8015768 <rmw_validate_full_topic_name+0xb0>
 801577c:	e7b6      	b.n	80156ec <rmw_validate_full_topic_name+0x34>
 801577e:	28f7      	cmp	r0, #247	@ 0xf7
 8015780:	d802      	bhi.n	8015788 <rmw_validate_full_topic_name+0xd0>
 8015782:	2000      	movs	r0, #0
 8015784:	6028      	str	r0, [r5, #0]
 8015786:	e7ab      	b.n	80156e0 <rmw_validate_full_topic_name+0x28>
 8015788:	2307      	movs	r3, #7
 801578a:	602b      	str	r3, [r5, #0]
 801578c:	2e00      	cmp	r6, #0
 801578e:	d0ad      	beq.n	80156ec <rmw_validate_full_topic_name+0x34>
 8015790:	23f6      	movs	r3, #246	@ 0xf6
 8015792:	e7e9      	b.n	8015768 <rmw_validate_full_topic_name+0xb0>
 8015794:	2205      	movs	r2, #5
 8015796:	602a      	str	r2, [r5, #0]
 8015798:	2e00      	cmp	r6, #0
 801579a:	d1e5      	bne.n	8015768 <rmw_validate_full_topic_name+0xb0>
 801579c:	e7a6      	b.n	80156ec <rmw_validate_full_topic_name+0x34>
 801579e:	bf00      	nop
 80157a0:	0801a9a4 	.word	0x0801a9a4

080157a4 <rmw_validate_namespace_with_size>:
 80157a4:	b340      	cbz	r0, 80157f8 <rmw_validate_namespace_with_size+0x54>
 80157a6:	b570      	push	{r4, r5, r6, lr}
 80157a8:	4614      	mov	r4, r2
 80157aa:	b0c2      	sub	sp, #264	@ 0x108
 80157ac:	b332      	cbz	r2, 80157fc <rmw_validate_namespace_with_size+0x58>
 80157ae:	2901      	cmp	r1, #1
 80157b0:	460d      	mov	r5, r1
 80157b2:	461e      	mov	r6, r3
 80157b4:	d102      	bne.n	80157bc <rmw_validate_namespace_with_size+0x18>
 80157b6:	7803      	ldrb	r3, [r0, #0]
 80157b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80157ba:	d012      	beq.n	80157e2 <rmw_validate_namespace_with_size+0x3e>
 80157bc:	aa01      	add	r2, sp, #4
 80157be:	4669      	mov	r1, sp
 80157c0:	f7ff ff7a 	bl	80156b8 <rmw_validate_full_topic_name>
 80157c4:	b978      	cbnz	r0, 80157e6 <rmw_validate_namespace_with_size+0x42>
 80157c6:	9b00      	ldr	r3, [sp, #0]
 80157c8:	b14b      	cbz	r3, 80157de <rmw_validate_namespace_with_size+0x3a>
 80157ca:	2b07      	cmp	r3, #7
 80157cc:	d007      	beq.n	80157de <rmw_validate_namespace_with_size+0x3a>
 80157ce:	1e5a      	subs	r2, r3, #1
 80157d0:	2a05      	cmp	r2, #5
 80157d2:	d82b      	bhi.n	801582c <rmw_validate_namespace_with_size+0x88>
 80157d4:	e8df f002 	tbb	[pc, r2]
 80157d8:	1e212427 	.word	0x1e212427
 80157dc:	141b      	.short	0x141b
 80157de:	2df5      	cmp	r5, #245	@ 0xf5
 80157e0:	d803      	bhi.n	80157ea <rmw_validate_namespace_with_size+0x46>
 80157e2:	2000      	movs	r0, #0
 80157e4:	6020      	str	r0, [r4, #0]
 80157e6:	b042      	add	sp, #264	@ 0x108
 80157e8:	bd70      	pop	{r4, r5, r6, pc}
 80157ea:	2307      	movs	r3, #7
 80157ec:	6023      	str	r3, [r4, #0]
 80157ee:	2e00      	cmp	r6, #0
 80157f0:	d0f9      	beq.n	80157e6 <rmw_validate_namespace_with_size+0x42>
 80157f2:	23f4      	movs	r3, #244	@ 0xf4
 80157f4:	6033      	str	r3, [r6, #0]
 80157f6:	e7f6      	b.n	80157e6 <rmw_validate_namespace_with_size+0x42>
 80157f8:	200b      	movs	r0, #11
 80157fa:	4770      	bx	lr
 80157fc:	200b      	movs	r0, #11
 80157fe:	e7f2      	b.n	80157e6 <rmw_validate_namespace_with_size+0x42>
 8015800:	2306      	movs	r3, #6
 8015802:	6023      	str	r3, [r4, #0]
 8015804:	2e00      	cmp	r6, #0
 8015806:	d0ee      	beq.n	80157e6 <rmw_validate_namespace_with_size+0x42>
 8015808:	9b01      	ldr	r3, [sp, #4]
 801580a:	6033      	str	r3, [r6, #0]
 801580c:	e7eb      	b.n	80157e6 <rmw_validate_namespace_with_size+0x42>
 801580e:	2305      	movs	r3, #5
 8015810:	6023      	str	r3, [r4, #0]
 8015812:	e7f7      	b.n	8015804 <rmw_validate_namespace_with_size+0x60>
 8015814:	2304      	movs	r3, #4
 8015816:	6023      	str	r3, [r4, #0]
 8015818:	e7f4      	b.n	8015804 <rmw_validate_namespace_with_size+0x60>
 801581a:	2303      	movs	r3, #3
 801581c:	6023      	str	r3, [r4, #0]
 801581e:	e7f1      	b.n	8015804 <rmw_validate_namespace_with_size+0x60>
 8015820:	2302      	movs	r3, #2
 8015822:	6023      	str	r3, [r4, #0]
 8015824:	e7ee      	b.n	8015804 <rmw_validate_namespace_with_size+0x60>
 8015826:	2301      	movs	r3, #1
 8015828:	6023      	str	r3, [r4, #0]
 801582a:	e7eb      	b.n	8015804 <rmw_validate_namespace_with_size+0x60>
 801582c:	4a03      	ldr	r2, [pc, #12]	@ (801583c <rmw_validate_namespace_with_size+0x98>)
 801582e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015832:	a802      	add	r0, sp, #8
 8015834:	f7ff fd36 	bl	80152a4 <rcutils_snprintf>
 8015838:	2001      	movs	r0, #1
 801583a:	e7d4      	b.n	80157e6 <rmw_validate_namespace_with_size+0x42>
 801583c:	0801a3ac 	.word	0x0801a3ac

08015840 <rmw_validate_namespace>:
 8015840:	b168      	cbz	r0, 801585e <rmw_validate_namespace+0x1e>
 8015842:	b570      	push	{r4, r5, r6, lr}
 8015844:	460d      	mov	r5, r1
 8015846:	4616      	mov	r6, r2
 8015848:	4604      	mov	r4, r0
 801584a:	f7ea fccb 	bl	80001e4 <strlen>
 801584e:	4633      	mov	r3, r6
 8015850:	4601      	mov	r1, r0
 8015852:	462a      	mov	r2, r5
 8015854:	4620      	mov	r0, r4
 8015856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801585a:	f7ff bfa3 	b.w	80157a4 <rmw_validate_namespace_with_size>
 801585e:	200b      	movs	r0, #11
 8015860:	4770      	bx	lr
 8015862:	bf00      	nop

08015864 <rmw_namespace_validation_result_string>:
 8015864:	2807      	cmp	r0, #7
 8015866:	bf9a      	itte	ls
 8015868:	4b02      	ldrls	r3, [pc, #8]	@ (8015874 <rmw_namespace_validation_result_string+0x10>)
 801586a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801586e:	4802      	ldrhi	r0, [pc, #8]	@ (8015878 <rmw_namespace_validation_result_string+0x14>)
 8015870:	4770      	bx	lr
 8015872:	bf00      	nop
 8015874:	0801a5a4 	.word	0x0801a5a4
 8015878:	0801a3fc 	.word	0x0801a3fc

0801587c <rmw_validate_node_name>:
 801587c:	2800      	cmp	r0, #0
 801587e:	d03b      	beq.n	80158f8 <rmw_validate_node_name+0x7c>
 8015880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015884:	460d      	mov	r5, r1
 8015886:	2900      	cmp	r1, #0
 8015888:	d038      	beq.n	80158fc <rmw_validate_node_name+0x80>
 801588a:	4616      	mov	r6, r2
 801588c:	4604      	mov	r4, r0
 801588e:	f7ea fca9 	bl	80001e4 <strlen>
 8015892:	b1e0      	cbz	r0, 80158ce <rmw_validate_node_name+0x52>
 8015894:	1e63      	subs	r3, r4, #1
 8015896:	eb03 0800 	add.w	r8, r3, r0
 801589a:	f1c4 0101 	rsb	r1, r4, #1
 801589e:	18cf      	adds	r7, r1, r3
 80158a0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80158a4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80158a8:	f02e 0c20 	bic.w	ip, lr, #32
 80158ac:	2a09      	cmp	r2, #9
 80158ae:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80158b2:	d914      	bls.n	80158de <rmw_validate_node_name+0x62>
 80158b4:	f1bc 0f19 	cmp.w	ip, #25
 80158b8:	d911      	bls.n	80158de <rmw_validate_node_name+0x62>
 80158ba:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80158be:	d00e      	beq.n	80158de <rmw_validate_node_name+0x62>
 80158c0:	2302      	movs	r3, #2
 80158c2:	602b      	str	r3, [r5, #0]
 80158c4:	b106      	cbz	r6, 80158c8 <rmw_validate_node_name+0x4c>
 80158c6:	6037      	str	r7, [r6, #0]
 80158c8:	2000      	movs	r0, #0
 80158ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158ce:	2301      	movs	r3, #1
 80158d0:	602b      	str	r3, [r5, #0]
 80158d2:	2e00      	cmp	r6, #0
 80158d4:	d0f8      	beq.n	80158c8 <rmw_validate_node_name+0x4c>
 80158d6:	2000      	movs	r0, #0
 80158d8:	6030      	str	r0, [r6, #0]
 80158da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158de:	4543      	cmp	r3, r8
 80158e0:	d1dd      	bne.n	801589e <rmw_validate_node_name+0x22>
 80158e2:	7822      	ldrb	r2, [r4, #0]
 80158e4:	4b0d      	ldr	r3, [pc, #52]	@ (801591c <rmw_validate_node_name+0xa0>)
 80158e6:	5cd3      	ldrb	r3, [r2, r3]
 80158e8:	f013 0304 	ands.w	r3, r3, #4
 80158ec:	d110      	bne.n	8015910 <rmw_validate_node_name+0x94>
 80158ee:	28ff      	cmp	r0, #255	@ 0xff
 80158f0:	d806      	bhi.n	8015900 <rmw_validate_node_name+0x84>
 80158f2:	602b      	str	r3, [r5, #0]
 80158f4:	4618      	mov	r0, r3
 80158f6:	e7e8      	b.n	80158ca <rmw_validate_node_name+0x4e>
 80158f8:	200b      	movs	r0, #11
 80158fa:	4770      	bx	lr
 80158fc:	200b      	movs	r0, #11
 80158fe:	e7e4      	b.n	80158ca <rmw_validate_node_name+0x4e>
 8015900:	2204      	movs	r2, #4
 8015902:	602a      	str	r2, [r5, #0]
 8015904:	2e00      	cmp	r6, #0
 8015906:	d0df      	beq.n	80158c8 <rmw_validate_node_name+0x4c>
 8015908:	22fe      	movs	r2, #254	@ 0xfe
 801590a:	6032      	str	r2, [r6, #0]
 801590c:	4618      	mov	r0, r3
 801590e:	e7dc      	b.n	80158ca <rmw_validate_node_name+0x4e>
 8015910:	2303      	movs	r3, #3
 8015912:	602b      	str	r3, [r5, #0]
 8015914:	2e00      	cmp	r6, #0
 8015916:	d1de      	bne.n	80158d6 <rmw_validate_node_name+0x5a>
 8015918:	e7d6      	b.n	80158c8 <rmw_validate_node_name+0x4c>
 801591a:	bf00      	nop
 801591c:	0801a9a4 	.word	0x0801a9a4

08015920 <rmw_node_name_validation_result_string>:
 8015920:	2804      	cmp	r0, #4
 8015922:	bf9a      	itte	ls
 8015924:	4b02      	ldrls	r3, [pc, #8]	@ (8015930 <rmw_node_name_validation_result_string+0x10>)
 8015926:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801592a:	4802      	ldrhi	r0, [pc, #8]	@ (8015934 <rmw_node_name_validation_result_string+0x14>)
 801592c:	4770      	bx	lr
 801592e:	bf00      	nop
 8015930:	0801a6b0 	.word	0x0801a6b0
 8015934:	0801a5c4 	.word	0x0801a5c4

08015938 <get_memory>:
 8015938:	4603      	mov	r3, r0
 801593a:	6840      	ldr	r0, [r0, #4]
 801593c:	b158      	cbz	r0, 8015956 <get_memory+0x1e>
 801593e:	6842      	ldr	r2, [r0, #4]
 8015940:	605a      	str	r2, [r3, #4]
 8015942:	b10a      	cbz	r2, 8015948 <get_memory+0x10>
 8015944:	2100      	movs	r1, #0
 8015946:	6011      	str	r1, [r2, #0]
 8015948:	681a      	ldr	r2, [r3, #0]
 801594a:	6042      	str	r2, [r0, #4]
 801594c:	b102      	cbz	r2, 8015950 <get_memory+0x18>
 801594e:	6010      	str	r0, [r2, #0]
 8015950:	2200      	movs	r2, #0
 8015952:	6002      	str	r2, [r0, #0]
 8015954:	6018      	str	r0, [r3, #0]
 8015956:	4770      	bx	lr

08015958 <put_memory>:
 8015958:	680b      	ldr	r3, [r1, #0]
 801595a:	b10b      	cbz	r3, 8015960 <put_memory+0x8>
 801595c:	684a      	ldr	r2, [r1, #4]
 801595e:	605a      	str	r2, [r3, #4]
 8015960:	684a      	ldr	r2, [r1, #4]
 8015962:	b102      	cbz	r2, 8015966 <put_memory+0xe>
 8015964:	6013      	str	r3, [r2, #0]
 8015966:	6803      	ldr	r3, [r0, #0]
 8015968:	428b      	cmp	r3, r1
 801596a:	6843      	ldr	r3, [r0, #4]
 801596c:	bf08      	it	eq
 801596e:	6002      	streq	r2, [r0, #0]
 8015970:	604b      	str	r3, [r1, #4]
 8015972:	b103      	cbz	r3, 8015976 <put_memory+0x1e>
 8015974:	6019      	str	r1, [r3, #0]
 8015976:	2300      	movs	r3, #0
 8015978:	600b      	str	r3, [r1, #0]
 801597a:	6041      	str	r1, [r0, #4]
 801597c:	4770      	bx	lr
 801597e:	bf00      	nop

08015980 <rmw_get_implementation_identifier>:
 8015980:	4b01      	ldr	r3, [pc, #4]	@ (8015988 <rmw_get_implementation_identifier+0x8>)
 8015982:	6818      	ldr	r0, [r3, #0]
 8015984:	4770      	bx	lr
 8015986:	bf00      	nop
 8015988:	0801a6dc 	.word	0x0801a6dc

0801598c <rmw_init_options_init>:
 801598c:	b084      	sub	sp, #16
 801598e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015990:	b083      	sub	sp, #12
 8015992:	ad09      	add	r5, sp, #36	@ 0x24
 8015994:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015998:	b130      	cbz	r0, 80159a8 <rmw_init_options_init+0x1c>
 801599a:	4604      	mov	r4, r0
 801599c:	4628      	mov	r0, r5
 801599e:	f7fa fbd9 	bl	8010154 <rcutils_allocator_is_valid>
 80159a2:	b108      	cbz	r0, 80159a8 <rmw_init_options_init+0x1c>
 80159a4:	68a6      	ldr	r6, [r4, #8]
 80159a6:	b12e      	cbz	r6, 80159b4 <rmw_init_options_init+0x28>
 80159a8:	200b      	movs	r0, #11
 80159aa:	b003      	add	sp, #12
 80159ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80159b0:	b004      	add	sp, #16
 80159b2:	4770      	bx	lr
 80159b4:	2200      	movs	r2, #0
 80159b6:	2300      	movs	r3, #0
 80159b8:	e9c4 2300 	strd	r2, r3, [r4]
 80159bc:	4b20      	ldr	r3, [pc, #128]	@ (8015a40 <rmw_init_options_init+0xb4>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	60a3      	str	r3, [r4, #8]
 80159c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159c4:	f104 0c20 	add.w	ip, r4, #32
 80159c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159cc:	466f      	mov	r7, sp
 80159ce:	682b      	ldr	r3, [r5, #0]
 80159d0:	f8cc 3000 	str.w	r3, [ip]
 80159d4:	4638      	mov	r0, r7
 80159d6:	61e6      	str	r6, [r4, #28]
 80159d8:	60e6      	str	r6, [r4, #12]
 80159da:	f7ff fe69 	bl	80156b0 <rmw_get_default_security_options>
 80159de:	e897 0003 	ldmia.w	r7, {r0, r1}
 80159e2:	f104 0310 	add.w	r3, r4, #16
 80159e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80159ea:	2203      	movs	r2, #3
 80159ec:	4815      	ldr	r0, [pc, #84]	@ (8015a44 <rmw_init_options_init+0xb8>)
 80159ee:	4916      	ldr	r1, [pc, #88]	@ (8015a48 <rmw_init_options_init+0xbc>)
 80159f0:	7626      	strb	r6, [r4, #24]
 80159f2:	f7fa feaf 	bl	8010754 <rmw_uxrce_init_init_options_impl_memory>
 80159f6:	4813      	ldr	r0, [pc, #76]	@ (8015a44 <rmw_init_options_init+0xb8>)
 80159f8:	f7ff ff9e 	bl	8015938 <get_memory>
 80159fc:	b1f0      	cbz	r0, 8015a3c <rmw_init_options_init+0xb0>
 80159fe:	4a13      	ldr	r2, [pc, #76]	@ (8015a4c <rmw_init_options_init+0xc0>)
 8015a00:	6883      	ldr	r3, [r0, #8]
 8015a02:	6851      	ldr	r1, [r2, #4]
 8015a04:	7810      	ldrb	r0, [r2, #0]
 8015a06:	6363      	str	r3, [r4, #52]	@ 0x34
 8015a08:	7418      	strb	r0, [r3, #16]
 8015a0a:	6159      	str	r1, [r3, #20]
 8015a0c:	68d1      	ldr	r1, [r2, #12]
 8015a0e:	61d9      	str	r1, [r3, #28]
 8015a10:	6911      	ldr	r1, [r2, #16]
 8015a12:	6219      	str	r1, [r3, #32]
 8015a14:	6951      	ldr	r1, [r2, #20]
 8015a16:	6892      	ldr	r2, [r2, #8]
 8015a18:	619a      	str	r2, [r3, #24]
 8015a1a:	6259      	str	r1, [r3, #36]	@ 0x24
 8015a1c:	f7fd fc82 	bl	8013324 <uxr_nanos>
 8015a20:	f002 ff9c 	bl	801895c <srand>
 8015a24:	f002 ffc8 	bl	80189b8 <rand>
 8015a28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015a2a:	6298      	str	r0, [r3, #40]	@ 0x28
 8015a2c:	2800      	cmp	r0, #0
 8015a2e:	d0f9      	beq.n	8015a24 <rmw_init_options_init+0x98>
 8015a30:	2000      	movs	r0, #0
 8015a32:	b003      	add	sp, #12
 8015a34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015a38:	b004      	add	sp, #16
 8015a3a:	4770      	bx	lr
 8015a3c:	2001      	movs	r0, #1
 8015a3e:	e7b4      	b.n	80159aa <rmw_init_options_init+0x1e>
 8015a40:	0801a6dc 	.word	0x0801a6dc
 8015a44:	2000aaec 	.word	0x2000aaec
 8015a48:	20006388 	.word	0x20006388
 8015a4c:	20006214 	.word	0x20006214

08015a50 <rmw_init_options_copy>:
 8015a50:	b570      	push	{r4, r5, r6, lr}
 8015a52:	b088      	sub	sp, #32
 8015a54:	b160      	cbz	r0, 8015a70 <rmw_init_options_copy+0x20>
 8015a56:	460d      	mov	r5, r1
 8015a58:	b151      	cbz	r1, 8015a70 <rmw_init_options_copy+0x20>
 8015a5a:	4604      	mov	r4, r0
 8015a5c:	6880      	ldr	r0, [r0, #8]
 8015a5e:	b128      	cbz	r0, 8015a6c <rmw_init_options_copy+0x1c>
 8015a60:	4b33      	ldr	r3, [pc, #204]	@ (8015b30 <rmw_init_options_copy+0xe0>)
 8015a62:	6819      	ldr	r1, [r3, #0]
 8015a64:	f7ea fbb4 	bl	80001d0 <strcmp>
 8015a68:	2800      	cmp	r0, #0
 8015a6a:	d154      	bne.n	8015b16 <rmw_init_options_copy+0xc6>
 8015a6c:	68ab      	ldr	r3, [r5, #8]
 8015a6e:	b11b      	cbz	r3, 8015a78 <rmw_init_options_copy+0x28>
 8015a70:	240b      	movs	r4, #11
 8015a72:	4620      	mov	r0, r4
 8015a74:	b008      	add	sp, #32
 8015a76:	bd70      	pop	{r4, r5, r6, pc}
 8015a78:	4623      	mov	r3, r4
 8015a7a:	462a      	mov	r2, r5
 8015a7c:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8015a80:	f8d3 c000 	ldr.w	ip, [r3]
 8015a84:	6858      	ldr	r0, [r3, #4]
 8015a86:	6899      	ldr	r1, [r3, #8]
 8015a88:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8015a8c:	f8c2 e00c 	str.w	lr, [r2, #12]
 8015a90:	3310      	adds	r3, #16
 8015a92:	42b3      	cmp	r3, r6
 8015a94:	f8c2 c000 	str.w	ip, [r2]
 8015a98:	6050      	str	r0, [r2, #4]
 8015a9a:	6091      	str	r1, [r2, #8]
 8015a9c:	f102 0210 	add.w	r2, r2, #16
 8015aa0:	d1ee      	bne.n	8015a80 <rmw_init_options_copy+0x30>
 8015aa2:	6819      	ldr	r1, [r3, #0]
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	6053      	str	r3, [r2, #4]
 8015aa8:	6011      	str	r1, [r2, #0]
 8015aaa:	f104 0e20 	add.w	lr, r4, #32
 8015aae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015ab2:	f10d 0c0c 	add.w	ip, sp, #12
 8015ab6:	4666      	mov	r6, ip
 8015ab8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015abc:	f8de 3000 	ldr.w	r3, [lr]
 8015ac0:	f8cc 3000 	str.w	r3, [ip]
 8015ac4:	4630      	mov	r0, r6
 8015ac6:	f7fa fb45 	bl	8010154 <rcutils_allocator_is_valid>
 8015aca:	2800      	cmp	r0, #0
 8015acc:	d0d0      	beq.n	8015a70 <rmw_init_options_copy+0x20>
 8015ace:	ab08      	add	r3, sp, #32
 8015ad0:	e913 0003 	ldmdb	r3, {r0, r1}
 8015ad4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015ad8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8015adc:	69e0      	ldr	r0, [r4, #28]
 8015ade:	f7ff fc0d 	bl	80152fc <rcutils_strdup>
 8015ae2:	61e8      	str	r0, [r5, #28]
 8015ae4:	69e3      	ldr	r3, [r4, #28]
 8015ae6:	b103      	cbz	r3, 8015aea <rmw_init_options_copy+0x9a>
 8015ae8:	b1f8      	cbz	r0, 8015b2a <rmw_init_options_copy+0xda>
 8015aea:	4812      	ldr	r0, [pc, #72]	@ (8015b34 <rmw_init_options_copy+0xe4>)
 8015aec:	f7ff ff24 	bl	8015938 <get_memory>
 8015af0:	b1a8      	cbz	r0, 8015b1e <rmw_init_options_copy+0xce>
 8015af2:	6883      	ldr	r3, [r0, #8]
 8015af4:	636b      	str	r3, [r5, #52]	@ 0x34
 8015af6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8015af8:	f102 0c10 	add.w	ip, r2, #16
 8015afc:	f103 0510 	add.w	r5, r3, #16
 8015b00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015b06:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8015b0a:	2400      	movs	r4, #0
 8015b0c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8015b10:	4620      	mov	r0, r4
 8015b12:	b008      	add	sp, #32
 8015b14:	bd70      	pop	{r4, r5, r6, pc}
 8015b16:	240c      	movs	r4, #12
 8015b18:	4620      	mov	r0, r4
 8015b1a:	b008      	add	sp, #32
 8015b1c:	bd70      	pop	{r4, r5, r6, pc}
 8015b1e:	9b04      	ldr	r3, [sp, #16]
 8015b20:	9907      	ldr	r1, [sp, #28]
 8015b22:	69e8      	ldr	r0, [r5, #28]
 8015b24:	4798      	blx	r3
 8015b26:	2401      	movs	r4, #1
 8015b28:	e7a3      	b.n	8015a72 <rmw_init_options_copy+0x22>
 8015b2a:	240a      	movs	r4, #10
 8015b2c:	e7a1      	b.n	8015a72 <rmw_init_options_copy+0x22>
 8015b2e:	bf00      	nop
 8015b30:	0801a6dc 	.word	0x0801a6dc
 8015b34:	2000aaec 	.word	0x2000aaec

08015b38 <rmw_init_options_fini>:
 8015b38:	2800      	cmp	r0, #0
 8015b3a:	d041      	beq.n	8015bc0 <rmw_init_options_fini+0x88>
 8015b3c:	b510      	push	{r4, lr}
 8015b3e:	4604      	mov	r4, r0
 8015b40:	b08e      	sub	sp, #56	@ 0x38
 8015b42:	3020      	adds	r0, #32
 8015b44:	f7fa fb06 	bl	8010154 <rcutils_allocator_is_valid>
 8015b48:	b380      	cbz	r0, 8015bac <rmw_init_options_fini+0x74>
 8015b4a:	68a0      	ldr	r0, [r4, #8]
 8015b4c:	b120      	cbz	r0, 8015b58 <rmw_init_options_fini+0x20>
 8015b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8015bc8 <rmw_init_options_fini+0x90>)
 8015b50:	6819      	ldr	r1, [r3, #0]
 8015b52:	f7ea fb3d 	bl	80001d0 <strcmp>
 8015b56:	bb88      	cbnz	r0, 8015bbc <rmw_init_options_fini+0x84>
 8015b58:	4b1c      	ldr	r3, [pc, #112]	@ (8015bcc <rmw_init_options_fini+0x94>)
 8015b5a:	6819      	ldr	r1, [r3, #0]
 8015b5c:	b351      	cbz	r1, 8015bb4 <rmw_init_options_fini+0x7c>
 8015b5e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8015b60:	e001      	b.n	8015b66 <rmw_init_options_fini+0x2e>
 8015b62:	6849      	ldr	r1, [r1, #4]
 8015b64:	b331      	cbz	r1, 8015bb4 <rmw_init_options_fini+0x7c>
 8015b66:	688b      	ldr	r3, [r1, #8]
 8015b68:	429a      	cmp	r2, r3
 8015b6a:	d1fa      	bne.n	8015b62 <rmw_init_options_fini+0x2a>
 8015b6c:	4817      	ldr	r0, [pc, #92]	@ (8015bcc <rmw_init_options_fini+0x94>)
 8015b6e:	f7ff fef3 	bl	8015958 <put_memory>
 8015b72:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015b74:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015b76:	69e0      	ldr	r0, [r4, #28]
 8015b78:	4798      	blx	r3
 8015b7a:	4668      	mov	r0, sp
 8015b7c:	f7ff fd88 	bl	8015690 <rmw_get_zero_initialized_init_options>
 8015b80:	46ee      	mov	lr, sp
 8015b82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015b86:	46a4      	mov	ip, r4
 8015b88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b8c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015b90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015b98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b9c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015ba0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	b00e      	add	sp, #56	@ 0x38
 8015baa:	bd10      	pop	{r4, pc}
 8015bac:	230b      	movs	r3, #11
 8015bae:	4618      	mov	r0, r3
 8015bb0:	b00e      	add	sp, #56	@ 0x38
 8015bb2:	bd10      	pop	{r4, pc}
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	b00e      	add	sp, #56	@ 0x38
 8015bba:	bd10      	pop	{r4, pc}
 8015bbc:	230c      	movs	r3, #12
 8015bbe:	e7f2      	b.n	8015ba6 <rmw_init_options_fini+0x6e>
 8015bc0:	230b      	movs	r3, #11
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	4770      	bx	lr
 8015bc6:	bf00      	nop
 8015bc8:	0801a6dc 	.word	0x0801a6dc
 8015bcc:	2000aaec 	.word	0x2000aaec

08015bd0 <rmw_init>:
 8015bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bd4:	b083      	sub	sp, #12
 8015bd6:	2800      	cmp	r0, #0
 8015bd8:	f000 80d3 	beq.w	8015d82 <rmw_init+0x1b2>
 8015bdc:	460e      	mov	r6, r1
 8015bde:	2900      	cmp	r1, #0
 8015be0:	f000 80cf 	beq.w	8015d82 <rmw_init+0x1b2>
 8015be4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8015be6:	4605      	mov	r5, r0
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	f000 80ca 	beq.w	8015d82 <rmw_init+0x1b2>
 8015bee:	4b78      	ldr	r3, [pc, #480]	@ (8015dd0 <rmw_init+0x200>)
 8015bf0:	6880      	ldr	r0, [r0, #8]
 8015bf2:	681f      	ldr	r7, [r3, #0]
 8015bf4:	b128      	cbz	r0, 8015c02 <rmw_init+0x32>
 8015bf6:	4639      	mov	r1, r7
 8015bf8:	f7ea faea 	bl	80001d0 <strcmp>
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	f040 80ca 	bne.w	8015d96 <rmw_init+0x1c6>
 8015c02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015c06:	4c73      	ldr	r4, [pc, #460]	@ (8015dd4 <rmw_init+0x204>)
 8015c08:	4973      	ldr	r1, [pc, #460]	@ (8015dd8 <rmw_init+0x208>)
 8015c0a:	4874      	ldr	r0, [pc, #464]	@ (8015ddc <rmw_init+0x20c>)
 8015c0c:	60b7      	str	r7, [r6, #8]
 8015c0e:	e9c6 2300 	strd	r2, r3, [r6]
 8015c12:	68eb      	ldr	r3, [r5, #12]
 8015c14:	64b3      	str	r3, [r6, #72]	@ 0x48
 8015c16:	2201      	movs	r2, #1
 8015c18:	f7fa fd3c 	bl	8010694 <rmw_uxrce_init_session_memory>
 8015c1c:	4620      	mov	r0, r4
 8015c1e:	4970      	ldr	r1, [pc, #448]	@ (8015de0 <rmw_init+0x210>)
 8015c20:	2204      	movs	r2, #4
 8015c22:	f7fa fd77 	bl	8010714 <rmw_uxrce_init_static_input_buffer_memory>
 8015c26:	f04f 0800 	mov.w	r8, #0
 8015c2a:	486c      	ldr	r0, [pc, #432]	@ (8015ddc <rmw_init+0x20c>)
 8015c2c:	f884 800d 	strb.w	r8, [r4, #13]
 8015c30:	f7ff fe82 	bl	8015938 <get_memory>
 8015c34:	2800      	cmp	r0, #0
 8015c36:	f000 80a9 	beq.w	8015d8c <rmw_init+0x1bc>
 8015c3a:	6884      	ldr	r4, [r0, #8]
 8015c3c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8015c3e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8015c40:	f890 c010 	ldrb.w	ip, [r0, #16]
 8015c44:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8015c48:	9101      	str	r1, [sp, #4]
 8015c4a:	6a00      	ldr	r0, [r0, #32]
 8015c4c:	9000      	str	r0, [sp, #0]
 8015c4e:	f104 0910 	add.w	r9, r4, #16
 8015c52:	4661      	mov	r1, ip
 8015c54:	4648      	mov	r0, r9
 8015c56:	f000 fdbf 	bl	80167d8 <uxr_set_custom_transport_callbacks>
 8015c5a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8015c5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015c62:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8015c66:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8015c6a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8015c6e:	495d      	ldr	r1, [pc, #372]	@ (8015de4 <rmw_init+0x214>)
 8015c70:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8015c74:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8015c78:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8015c7c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8015c80:	4859      	ldr	r0, [pc, #356]	@ (8015de8 <rmw_init+0x218>)
 8015c82:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8015c86:	2201      	movs	r2, #1
 8015c88:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8015c8a:	f7fa fce3 	bl	8010654 <rmw_uxrce_init_node_memory>
 8015c8e:	4957      	ldr	r1, [pc, #348]	@ (8015dec <rmw_init+0x21c>)
 8015c90:	4857      	ldr	r0, [pc, #348]	@ (8015df0 <rmw_init+0x220>)
 8015c92:	2205      	movs	r2, #5
 8015c94:	f7fa fcbe 	bl	8010614 <rmw_uxrce_init_subscription_memory>
 8015c98:	4956      	ldr	r1, [pc, #344]	@ (8015df4 <rmw_init+0x224>)
 8015c9a:	4857      	ldr	r0, [pc, #348]	@ (8015df8 <rmw_init+0x228>)
 8015c9c:	220a      	movs	r2, #10
 8015c9e:	f7fa fc99 	bl	80105d4 <rmw_uxrce_init_publisher_memory>
 8015ca2:	4956      	ldr	r1, [pc, #344]	@ (8015dfc <rmw_init+0x22c>)
 8015ca4:	4856      	ldr	r0, [pc, #344]	@ (8015e00 <rmw_init+0x230>)
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	f7fa fc54 	bl	8010554 <rmw_uxrce_init_service_memory>
 8015cac:	4955      	ldr	r1, [pc, #340]	@ (8015e04 <rmw_init+0x234>)
 8015cae:	4856      	ldr	r0, [pc, #344]	@ (8015e08 <rmw_init+0x238>)
 8015cb0:	2201      	movs	r2, #1
 8015cb2:	f7fa fc6f 	bl	8010594 <rmw_uxrce_init_client_memory>
 8015cb6:	4955      	ldr	r1, [pc, #340]	@ (8015e0c <rmw_init+0x23c>)
 8015cb8:	4855      	ldr	r0, [pc, #340]	@ (8015e10 <rmw_init+0x240>)
 8015cba:	220f      	movs	r2, #15
 8015cbc:	f7fa fd0a 	bl	80106d4 <rmw_uxrce_init_topic_memory>
 8015cc0:	4954      	ldr	r1, [pc, #336]	@ (8015e14 <rmw_init+0x244>)
 8015cc2:	4855      	ldr	r0, [pc, #340]	@ (8015e18 <rmw_init+0x248>)
 8015cc4:	2203      	movs	r2, #3
 8015cc6:	f7fa fd45 	bl	8010754 <rmw_uxrce_init_init_options_impl_memory>
 8015cca:	4954      	ldr	r1, [pc, #336]	@ (8015e1c <rmw_init+0x24c>)
 8015ccc:	4854      	ldr	r0, [pc, #336]	@ (8015e20 <rmw_init+0x250>)
 8015cce:	2204      	movs	r2, #4
 8015cd0:	f7fa fd60 	bl	8010794 <rmw_uxrce_init_wait_set_memory>
 8015cd4:	4953      	ldr	r1, [pc, #332]	@ (8015e24 <rmw_init+0x254>)
 8015cd6:	4854      	ldr	r0, [pc, #336]	@ (8015e28 <rmw_init+0x258>)
 8015cd8:	2204      	movs	r2, #4
 8015cda:	f7fa fd7b 	bl	80107d4 <rmw_uxrce_init_guard_condition_memory>
 8015cde:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8015ce0:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8015ce2:	4642      	mov	r2, r8
 8015ce4:	f000 fb06 	bl	80162f4 <rmw_uxrce_transport_init>
 8015ce8:	4607      	mov	r7, r0
 8015cea:	2800      	cmp	r0, #0
 8015cec:	d158      	bne.n	8015da0 <rmw_init+0x1d0>
 8015cee:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8015cf0:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8015cf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015cf6:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8015cfa:	4628      	mov	r0, r5
 8015cfc:	f7fc f9b0 	bl	8012060 <uxr_init_session>
 8015d00:	494a      	ldr	r1, [pc, #296]	@ (8015e2c <rmw_init+0x25c>)
 8015d02:	4622      	mov	r2, r4
 8015d04:	4628      	mov	r0, r5
 8015d06:	f7fc f9cf 	bl	80120a8 <uxr_set_topic_callback>
 8015d0a:	4949      	ldr	r1, [pc, #292]	@ (8015e30 <rmw_init+0x260>)
 8015d0c:	463a      	mov	r2, r7
 8015d0e:	4628      	mov	r0, r5
 8015d10:	f7fc f9c6 	bl	80120a0 <uxr_set_status_callback>
 8015d14:	4947      	ldr	r1, [pc, #284]	@ (8015e34 <rmw_init+0x264>)
 8015d16:	463a      	mov	r2, r7
 8015d18:	4628      	mov	r0, r5
 8015d1a:	f7fc f9c9 	bl	80120b0 <uxr_set_request_callback>
 8015d1e:	4946      	ldr	r1, [pc, #280]	@ (8015e38 <rmw_init+0x268>)
 8015d20:	463a      	mov	r2, r7
 8015d22:	4628      	mov	r0, r5
 8015d24:	f7fc f9c8 	bl	80120b8 <uxr_set_reply_callback>
 8015d28:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015d2c:	2304      	movs	r3, #4
 8015d2e:	0092      	lsls	r2, r2, #2
 8015d30:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8015d34:	4628      	mov	r0, r5
 8015d36:	f7fc f9fd 	bl	8012134 <uxr_create_input_reliable_stream>
 8015d3a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015d3e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8015d42:	0092      	lsls	r2, r2, #2
 8015d44:	2304      	movs	r3, #4
 8015d46:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8015d4a:	4628      	mov	r0, r5
 8015d4c:	f7fc f9ca 	bl	80120e4 <uxr_create_output_reliable_stream>
 8015d50:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8015d54:	4628      	mov	r0, r5
 8015d56:	f7fc f9e7 	bl	8012128 <uxr_create_input_best_effort_stream>
 8015d5a:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8015d5e:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8015d62:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015d66:	3114      	adds	r1, #20
 8015d68:	4628      	mov	r0, r5
 8015d6a:	f7fc f9a9 	bl	80120c0 <uxr_create_output_best_effort_stream>
 8015d6e:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8015d72:	4628      	mov	r0, r5
 8015d74:	f7fc fefa 	bl	8012b6c <uxr_create_session>
 8015d78:	b1f8      	cbz	r0, 8015dba <rmw_init+0x1ea>
 8015d7a:	4638      	mov	r0, r7
 8015d7c:	b003      	add	sp, #12
 8015d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d82:	270b      	movs	r7, #11
 8015d84:	4638      	mov	r0, r7
 8015d86:	b003      	add	sp, #12
 8015d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d8c:	2701      	movs	r7, #1
 8015d8e:	4638      	mov	r0, r7
 8015d90:	b003      	add	sp, #12
 8015d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d96:	270c      	movs	r7, #12
 8015d98:	4638      	mov	r0, r7
 8015d9a:	b003      	add	sp, #12
 8015d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015da0:	4648      	mov	r0, r9
 8015da2:	f000 fd5b 	bl	801685c <uxr_close_custom_transport>
 8015da6:	480d      	ldr	r0, [pc, #52]	@ (8015ddc <rmw_init+0x20c>)
 8015da8:	4621      	mov	r1, r4
 8015daa:	f7ff fdd5 	bl	8015958 <put_memory>
 8015dae:	4638      	mov	r0, r7
 8015db0:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8015db4:	b003      	add	sp, #12
 8015db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015dba:	4648      	mov	r0, r9
 8015dbc:	f000 fd4e 	bl	801685c <uxr_close_custom_transport>
 8015dc0:	4806      	ldr	r0, [pc, #24]	@ (8015ddc <rmw_init+0x20c>)
 8015dc2:	4621      	mov	r1, r4
 8015dc4:	f7ff fdc8 	bl	8015958 <put_memory>
 8015dc8:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8015dca:	2701      	movs	r7, #1
 8015dcc:	e7d5      	b.n	8015d7a <rmw_init+0x1aa>
 8015dce:	bf00      	nop
 8015dd0:	0801a6dc 	.word	0x0801a6dc
 8015dd4:	2000ab3c 	.word	0x2000ab3c
 8015dd8:	20006de8 	.word	0x20006de8
 8015ddc:	2000ab2c 	.word	0x2000ab2c
 8015de0:	20008390 	.word	0x20008390
 8015de4:	2000640c 	.word	0x2000640c
 8015de8:	2000aafc 	.word	0x2000aafc
 8015dec:	2000a490 	.word	0x2000a490
 8015df0:	2000ab4c 	.word	0x2000ab4c
 8015df4:	200064b0 	.word	0x200064b0
 8015df8:	2000ab0c 	.word	0x2000ab0c
 8015dfc:	20006d20 	.word	0x20006d20
 8015e00:	2000ab1c 	.word	0x2000ab1c
 8015e04:	20006240 	.word	0x20006240
 8015e08:	20006230 	.word	0x20006230
 8015e0c:	2000a8c8 	.word	0x2000a8c8
 8015e10:	2000ab5c 	.word	0x2000ab5c
 8015e14:	20006388 	.word	0x20006388
 8015e18:	2000aaec 	.word	0x2000aaec
 8015e1c:	2000aa6c 	.word	0x2000aa6c
 8015e20:	2000ab6c 	.word	0x2000ab6c
 8015e24:	20006308 	.word	0x20006308
 8015e28:	2000aadc 	.word	0x2000aadc
 8015e2c:	08018479 	.word	0x08018479
 8015e30:	08018471 	.word	0x08018471
 8015e34:	08018511 	.word	0x08018511
 8015e38:	080185ad 	.word	0x080185ad

08015e3c <rmw_context_fini>:
 8015e3c:	4b17      	ldr	r3, [pc, #92]	@ (8015e9c <rmw_context_fini+0x60>)
 8015e3e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8015e40:	b570      	push	{r4, r5, r6, lr}
 8015e42:	681c      	ldr	r4, [r3, #0]
 8015e44:	4605      	mov	r5, r0
 8015e46:	b334      	cbz	r4, 8015e96 <rmw_context_fini+0x5a>
 8015e48:	2600      	movs	r6, #0
 8015e4a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015e4e:	6902      	ldr	r2, [r0, #16]
 8015e50:	428a      	cmp	r2, r1
 8015e52:	d018      	beq.n	8015e86 <rmw_context_fini+0x4a>
 8015e54:	2c00      	cmp	r4, #0
 8015e56:	d1f8      	bne.n	8015e4a <rmw_context_fini+0xe>
 8015e58:	b189      	cbz	r1, 8015e7e <rmw_context_fini+0x42>
 8015e5a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8015e5e:	789b      	ldrb	r3, [r3, #2]
 8015e60:	2b01      	cmp	r3, #1
 8015e62:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8015e66:	bf14      	ite	ne
 8015e68:	210a      	movne	r1, #10
 8015e6a:	2100      	moveq	r1, #0
 8015e6c:	f7fc fe56 	bl	8012b1c <uxr_delete_session_retries>
 8015e70:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8015e72:	f7fa fccf 	bl	8010814 <rmw_uxrce_fini_session_memory>
 8015e76:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8015e78:	3010      	adds	r0, #16
 8015e7a:	f000 fcef 	bl	801685c <uxr_close_custom_transport>
 8015e7e:	2300      	movs	r3, #0
 8015e80:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8015e82:	4630      	mov	r0, r6
 8015e84:	bd70      	pop	{r4, r5, r6, pc}
 8015e86:	3018      	adds	r0, #24
 8015e88:	f000 f90e 	bl	80160a8 <rmw_destroy_node>
 8015e8c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8015e8e:	4606      	mov	r6, r0
 8015e90:	2c00      	cmp	r4, #0
 8015e92:	d1da      	bne.n	8015e4a <rmw_context_fini+0xe>
 8015e94:	e7e0      	b.n	8015e58 <rmw_context_fini+0x1c>
 8015e96:	4626      	mov	r6, r4
 8015e98:	e7de      	b.n	8015e58 <rmw_context_fini+0x1c>
 8015e9a:	bf00      	nop
 8015e9c:	2000aafc 	.word	0x2000aafc

08015ea0 <create_topic>:
 8015ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ea4:	4605      	mov	r5, r0
 8015ea6:	b084      	sub	sp, #16
 8015ea8:	4822      	ldr	r0, [pc, #136]	@ (8015f34 <create_topic+0x94>)
 8015eaa:	460f      	mov	r7, r1
 8015eac:	4616      	mov	r6, r2
 8015eae:	f7ff fd43 	bl	8015938 <get_memory>
 8015eb2:	4604      	mov	r4, r0
 8015eb4:	2800      	cmp	r0, #0
 8015eb6:	d039      	beq.n	8015f2c <create_topic+0x8c>
 8015eb8:	692b      	ldr	r3, [r5, #16]
 8015eba:	6884      	ldr	r4, [r0, #8]
 8015ebc:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015f3c <create_topic+0x9c>
 8015ec0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015ec4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8015ec8:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8015ecc:	1c42      	adds	r2, r0, #1
 8015ece:	2102      	movs	r1, #2
 8015ed0:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8015ed4:	f7fc f806 	bl	8011ee4 <uxr_object_id>
 8015ed8:	223c      	movs	r2, #60	@ 0x3c
 8015eda:	6120      	str	r0, [r4, #16]
 8015edc:	4641      	mov	r1, r8
 8015ede:	4638      	mov	r0, r7
 8015ee0:	f7fa fdd0 	bl	8010a84 <generate_topic_name>
 8015ee4:	b1f0      	cbz	r0, 8015f24 <create_topic+0x84>
 8015ee6:	4f14      	ldr	r7, [pc, #80]	@ (8015f38 <create_topic+0x98>)
 8015ee8:	4630      	mov	r0, r6
 8015eea:	2264      	movs	r2, #100	@ 0x64
 8015eec:	4639      	mov	r1, r7
 8015eee:	f7fa fd99 	bl	8010a24 <generate_type_name>
 8015ef2:	b1b8      	cbz	r0, 8015f24 <create_topic+0x84>
 8015ef4:	6928      	ldr	r0, [r5, #16]
 8015ef6:	2306      	movs	r3, #6
 8015ef8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015efc:	f8cd 8000 	str.w	r8, [sp]
 8015f00:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015f04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f08:	6811      	ldr	r1, [r2, #0]
 8015f0a:	696b      	ldr	r3, [r5, #20]
 8015f0c:	6922      	ldr	r2, [r4, #16]
 8015f0e:	f7fb ff0d 	bl	8011d2c <uxr_buffer_create_topic_bin>
 8015f12:	4602      	mov	r2, r0
 8015f14:	6928      	ldr	r0, [r5, #16]
 8015f16:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015f1a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015f1e:	f7fa fd4b 	bl	80109b8 <run_xrce_session>
 8015f22:	b918      	cbnz	r0, 8015f2c <create_topic+0x8c>
 8015f24:	4620      	mov	r0, r4
 8015f26:	f7fa fceb 	bl	8010900 <rmw_uxrce_fini_topic_memory>
 8015f2a:	2400      	movs	r4, #0
 8015f2c:	4620      	mov	r0, r4
 8015f2e:	b004      	add	sp, #16
 8015f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f34:	2000ab5c 	.word	0x2000ab5c
 8015f38:	2000abd8 	.word	0x2000abd8
 8015f3c:	2000ab9c 	.word	0x2000ab9c

08015f40 <destroy_topic>:
 8015f40:	b538      	push	{r3, r4, r5, lr}
 8015f42:	6985      	ldr	r5, [r0, #24]
 8015f44:	b1d5      	cbz	r5, 8015f7c <destroy_topic+0x3c>
 8015f46:	4604      	mov	r4, r0
 8015f48:	6928      	ldr	r0, [r5, #16]
 8015f4a:	6922      	ldr	r2, [r4, #16]
 8015f4c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015f50:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f54:	6819      	ldr	r1, [r3, #0]
 8015f56:	f7fb fe6b 	bl	8011c30 <uxr_buffer_delete_entity>
 8015f5a:	4602      	mov	r2, r0
 8015f5c:	6928      	ldr	r0, [r5, #16]
 8015f5e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015f62:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015f66:	f7fa fd27 	bl	80109b8 <run_xrce_session>
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	4620      	mov	r0, r4
 8015f6e:	bf14      	ite	ne
 8015f70:	2400      	movne	r4, #0
 8015f72:	2402      	moveq	r4, #2
 8015f74:	f7fa fcc4 	bl	8010900 <rmw_uxrce_fini_topic_memory>
 8015f78:	4620      	mov	r0, r4
 8015f7a:	bd38      	pop	{r3, r4, r5, pc}
 8015f7c:	2401      	movs	r4, #1
 8015f7e:	4620      	mov	r0, r4
 8015f80:	bd38      	pop	{r3, r4, r5, pc}
 8015f82:	bf00      	nop

08015f84 <create_node>:
 8015f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f88:	b083      	sub	sp, #12
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d05f      	beq.n	801604e <create_node+0xca>
 8015f8e:	4606      	mov	r6, r0
 8015f90:	4835      	ldr	r0, [pc, #212]	@ (8016068 <create_node+0xe4>)
 8015f92:	460f      	mov	r7, r1
 8015f94:	4690      	mov	r8, r2
 8015f96:	461d      	mov	r5, r3
 8015f98:	f7ff fcce 	bl	8015938 <get_memory>
 8015f9c:	2800      	cmp	r0, #0
 8015f9e:	d056      	beq.n	801604e <create_node+0xca>
 8015fa0:	6884      	ldr	r4, [r0, #8]
 8015fa2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015fa4:	6123      	str	r3, [r4, #16]
 8015fa6:	f7ff fceb 	bl	8015980 <rmw_get_implementation_identifier>
 8015faa:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8015fae:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015fb2:	f8c4 9020 	str.w	r9, [r4, #32]
 8015fb6:	4630      	mov	r0, r6
 8015fb8:	f7ea f914 	bl	80001e4 <strlen>
 8015fbc:	1c42      	adds	r2, r0, #1
 8015fbe:	2a3c      	cmp	r2, #60	@ 0x3c
 8015fc0:	f104 0518 	add.w	r5, r4, #24
 8015fc4:	d840      	bhi.n	8016048 <create_node+0xc4>
 8015fc6:	4648      	mov	r0, r9
 8015fc8:	4631      	mov	r1, r6
 8015fca:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8015fce:	f003 f93e 	bl	801924e <memcpy>
 8015fd2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8015fd6:	4638      	mov	r0, r7
 8015fd8:	f7ea f904 	bl	80001e4 <strlen>
 8015fdc:	1c42      	adds	r2, r0, #1
 8015fde:	2a3c      	cmp	r2, #60	@ 0x3c
 8015fe0:	d832      	bhi.n	8016048 <create_node+0xc4>
 8015fe2:	4639      	mov	r1, r7
 8015fe4:	4648      	mov	r0, r9
 8015fe6:	f003 f932 	bl	801924e <memcpy>
 8015fea:	6923      	ldr	r3, [r4, #16]
 8015fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015ff0:	2101      	movs	r1, #1
 8015ff2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8015ff6:	1842      	adds	r2, r0, r1
 8015ff8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8015ffc:	f7fb ff72 	bl	8011ee4 <uxr_object_id>
 8016000:	6160      	str	r0, [r4, #20]
 8016002:	783b      	ldrb	r3, [r7, #0]
 8016004:	2b2f      	cmp	r3, #47	@ 0x2f
 8016006:	d127      	bne.n	8016058 <create_node+0xd4>
 8016008:	787b      	ldrb	r3, [r7, #1]
 801600a:	bb2b      	cbnz	r3, 8016058 <create_node+0xd4>
 801600c:	4a17      	ldr	r2, [pc, #92]	@ (801606c <create_node+0xe8>)
 801600e:	4818      	ldr	r0, [pc, #96]	@ (8016070 <create_node+0xec>)
 8016010:	4633      	mov	r3, r6
 8016012:	213c      	movs	r1, #60	@ 0x3c
 8016014:	f002 feee 	bl	8018df4 <sniprintf>
 8016018:	6920      	ldr	r0, [r4, #16]
 801601a:	4915      	ldr	r1, [pc, #84]	@ (8016070 <create_node+0xec>)
 801601c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016020:	9100      	str	r1, [sp, #0]
 8016022:	2106      	movs	r1, #6
 8016024:	9101      	str	r1, [sp, #4]
 8016026:	6811      	ldr	r1, [r2, #0]
 8016028:	6962      	ldr	r2, [r4, #20]
 801602a:	fa1f f388 	uxth.w	r3, r8
 801602e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016032:	f7fb fe49 	bl	8011cc8 <uxr_buffer_create_participant_bin>
 8016036:	4602      	mov	r2, r0
 8016038:	6920      	ldr	r0, [r4, #16]
 801603a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801603e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016042:	f7fa fcb9 	bl	80109b8 <run_xrce_session>
 8016046:	b918      	cbnz	r0, 8016050 <create_node+0xcc>
 8016048:	4628      	mov	r0, r5
 801604a:	f7fa fbe9 	bl	8010820 <rmw_uxrce_fini_node_memory>
 801604e:	2500      	movs	r5, #0
 8016050:	4628      	mov	r0, r5
 8016052:	b003      	add	sp, #12
 8016054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016058:	4a06      	ldr	r2, [pc, #24]	@ (8016074 <create_node+0xf0>)
 801605a:	9600      	str	r6, [sp, #0]
 801605c:	463b      	mov	r3, r7
 801605e:	213c      	movs	r1, #60	@ 0x3c
 8016060:	4803      	ldr	r0, [pc, #12]	@ (8016070 <create_node+0xec>)
 8016062:	f002 fec7 	bl	8018df4 <sniprintf>
 8016066:	e7d7      	b.n	8016018 <create_node+0x94>
 8016068:	2000aafc 	.word	0x2000aafc
 801606c:	0801a1d4 	.word	0x0801a1d4
 8016070:	2000ac3c 	.word	0x2000ac3c
 8016074:	0801a364 	.word	0x0801a364

08016078 <rmw_create_node>:
 8016078:	b199      	cbz	r1, 80160a2 <rmw_create_node+0x2a>
 801607a:	780b      	ldrb	r3, [r1, #0]
 801607c:	468c      	mov	ip, r1
 801607e:	b183      	cbz	r3, 80160a2 <rmw_create_node+0x2a>
 8016080:	b410      	push	{r4}
 8016082:	4614      	mov	r4, r2
 8016084:	b14a      	cbz	r2, 801609a <rmw_create_node+0x22>
 8016086:	7813      	ldrb	r3, [r2, #0]
 8016088:	b13b      	cbz	r3, 801609a <rmw_create_node+0x22>
 801608a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801608c:	4603      	mov	r3, r0
 801608e:	4621      	mov	r1, r4
 8016090:	4660      	mov	r0, ip
 8016092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016096:	f7ff bf75 	b.w	8015f84 <create_node>
 801609a:	2000      	movs	r0, #0
 801609c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160a0:	4770      	bx	lr
 80160a2:	2000      	movs	r0, #0
 80160a4:	4770      	bx	lr
 80160a6:	bf00      	nop

080160a8 <rmw_destroy_node>:
 80160a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160aa:	b328      	cbz	r0, 80160f8 <rmw_destroy_node+0x50>
 80160ac:	4607      	mov	r7, r0
 80160ae:	6800      	ldr	r0, [r0, #0]
 80160b0:	b120      	cbz	r0, 80160bc <rmw_destroy_node+0x14>
 80160b2:	4b36      	ldr	r3, [pc, #216]	@ (801618c <rmw_destroy_node+0xe4>)
 80160b4:	6819      	ldr	r1, [r3, #0]
 80160b6:	f7ea f88b 	bl	80001d0 <strcmp>
 80160ba:	b9e8      	cbnz	r0, 80160f8 <rmw_destroy_node+0x50>
 80160bc:	687d      	ldr	r5, [r7, #4]
 80160be:	b1dd      	cbz	r5, 80160f8 <rmw_destroy_node+0x50>
 80160c0:	4b33      	ldr	r3, [pc, #204]	@ (8016190 <rmw_destroy_node+0xe8>)
 80160c2:	681c      	ldr	r4, [r3, #0]
 80160c4:	2c00      	cmp	r4, #0
 80160c6:	d05f      	beq.n	8016188 <rmw_destroy_node+0xe0>
 80160c8:	2600      	movs	r6, #0
 80160ca:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80160ce:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80160d2:	429d      	cmp	r5, r3
 80160d4:	d013      	beq.n	80160fe <rmw_destroy_node+0x56>
 80160d6:	2c00      	cmp	r4, #0
 80160d8:	d1f7      	bne.n	80160ca <rmw_destroy_node+0x22>
 80160da:	4b2e      	ldr	r3, [pc, #184]	@ (8016194 <rmw_destroy_node+0xec>)
 80160dc:	681c      	ldr	r4, [r3, #0]
 80160de:	b1c4      	cbz	r4, 8016112 <rmw_destroy_node+0x6a>
 80160e0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80160e4:	6a0b      	ldr	r3, [r1, #32]
 80160e6:	429d      	cmp	r5, r3
 80160e8:	d1f9      	bne.n	80160de <rmw_destroy_node+0x36>
 80160ea:	317c      	adds	r1, #124	@ 0x7c
 80160ec:	4638      	mov	r0, r7
 80160ee:	f000 f8a1 	bl	8016234 <rmw_destroy_subscription>
 80160f2:	2801      	cmp	r0, #1
 80160f4:	4606      	mov	r6, r0
 80160f6:	d1f2      	bne.n	80160de <rmw_destroy_node+0x36>
 80160f8:	2601      	movs	r6, #1
 80160fa:	4630      	mov	r0, r6
 80160fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160fe:	3184      	adds	r1, #132	@ 0x84
 8016100:	4638      	mov	r0, r7
 8016102:	f7fa f9d5 	bl	80104b0 <rmw_destroy_publisher>
 8016106:	2801      	cmp	r0, #1
 8016108:	4606      	mov	r6, r0
 801610a:	d0f5      	beq.n	80160f8 <rmw_destroy_node+0x50>
 801610c:	2c00      	cmp	r4, #0
 801610e:	d1dc      	bne.n	80160ca <rmw_destroy_node+0x22>
 8016110:	e7e3      	b.n	80160da <rmw_destroy_node+0x32>
 8016112:	4b21      	ldr	r3, [pc, #132]	@ (8016198 <rmw_destroy_node+0xf0>)
 8016114:	681c      	ldr	r4, [r3, #0]
 8016116:	b16c      	cbz	r4, 8016134 <rmw_destroy_node+0x8c>
 8016118:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801611c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801611e:	429d      	cmp	r5, r3
 8016120:	d1f9      	bne.n	8016116 <rmw_destroy_node+0x6e>
 8016122:	317c      	adds	r1, #124	@ 0x7c
 8016124:	4638      	mov	r0, r7
 8016126:	f000 f841 	bl	80161ac <rmw_destroy_service>
 801612a:	2801      	cmp	r0, #1
 801612c:	4606      	mov	r6, r0
 801612e:	d0e3      	beq.n	80160f8 <rmw_destroy_node+0x50>
 8016130:	2c00      	cmp	r4, #0
 8016132:	d1f1      	bne.n	8016118 <rmw_destroy_node+0x70>
 8016134:	4b19      	ldr	r3, [pc, #100]	@ (801619c <rmw_destroy_node+0xf4>)
 8016136:	681c      	ldr	r4, [r3, #0]
 8016138:	b16c      	cbz	r4, 8016156 <rmw_destroy_node+0xae>
 801613a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801613e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8016140:	429d      	cmp	r5, r3
 8016142:	d1f9      	bne.n	8016138 <rmw_destroy_node+0x90>
 8016144:	317c      	adds	r1, #124	@ 0x7c
 8016146:	4638      	mov	r0, r7
 8016148:	f002 fa7a 	bl	8018640 <rmw_destroy_client>
 801614c:	2801      	cmp	r0, #1
 801614e:	4606      	mov	r6, r0
 8016150:	d0d2      	beq.n	80160f8 <rmw_destroy_node+0x50>
 8016152:	2c00      	cmp	r4, #0
 8016154:	d1f1      	bne.n	801613a <rmw_destroy_node+0x92>
 8016156:	6928      	ldr	r0, [r5, #16]
 8016158:	696a      	ldr	r2, [r5, #20]
 801615a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801615e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016162:	6819      	ldr	r1, [r3, #0]
 8016164:	f7fb fd64 	bl	8011c30 <uxr_buffer_delete_entity>
 8016168:	4602      	mov	r2, r0
 801616a:	6928      	ldr	r0, [r5, #16]
 801616c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016170:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016174:	f7fa fc20 	bl	80109b8 <run_xrce_session>
 8016178:	2800      	cmp	r0, #0
 801617a:	bf08      	it	eq
 801617c:	2602      	moveq	r6, #2
 801617e:	4638      	mov	r0, r7
 8016180:	f7fa fb4e 	bl	8010820 <rmw_uxrce_fini_node_memory>
 8016184:	4630      	mov	r0, r6
 8016186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016188:	4626      	mov	r6, r4
 801618a:	e7a6      	b.n	80160da <rmw_destroy_node+0x32>
 801618c:	0801a6dc 	.word	0x0801a6dc
 8016190:	2000ab0c 	.word	0x2000ab0c
 8016194:	2000ab4c 	.word	0x2000ab4c
 8016198:	2000ab1c 	.word	0x2000ab1c
 801619c:	20006230 	.word	0x20006230

080161a0 <rmw_node_get_graph_guard_condition>:
 80161a0:	6843      	ldr	r3, [r0, #4]
 80161a2:	6918      	ldr	r0, [r3, #16]
 80161a4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80161a8:	4770      	bx	lr
 80161aa:	bf00      	nop

080161ac <rmw_destroy_service>:
 80161ac:	b570      	push	{r4, r5, r6, lr}
 80161ae:	b128      	cbz	r0, 80161bc <rmw_destroy_service+0x10>
 80161b0:	4604      	mov	r4, r0
 80161b2:	6800      	ldr	r0, [r0, #0]
 80161b4:	460d      	mov	r5, r1
 80161b6:	f7fa fc7f 	bl	8010ab8 <is_uxrce_rmw_identifier_valid>
 80161ba:	b910      	cbnz	r0, 80161c2 <rmw_destroy_service+0x16>
 80161bc:	2401      	movs	r4, #1
 80161be:	4620      	mov	r0, r4
 80161c0:	bd70      	pop	{r4, r5, r6, pc}
 80161c2:	6863      	ldr	r3, [r4, #4]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d0f9      	beq.n	80161bc <rmw_destroy_service+0x10>
 80161c8:	2d00      	cmp	r5, #0
 80161ca:	d0f7      	beq.n	80161bc <rmw_destroy_service+0x10>
 80161cc:	6828      	ldr	r0, [r5, #0]
 80161ce:	f7fa fc73 	bl	8010ab8 <is_uxrce_rmw_identifier_valid>
 80161d2:	2800      	cmp	r0, #0
 80161d4:	d0f2      	beq.n	80161bc <rmw_destroy_service+0x10>
 80161d6:	686e      	ldr	r6, [r5, #4]
 80161d8:	2e00      	cmp	r6, #0
 80161da:	d0ef      	beq.n	80161bc <rmw_destroy_service+0x10>
 80161dc:	6864      	ldr	r4, [r4, #4]
 80161de:	6932      	ldr	r2, [r6, #16]
 80161e0:	6920      	ldr	r0, [r4, #16]
 80161e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80161e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80161ea:	6819      	ldr	r1, [r3, #0]
 80161ec:	f001 f882 	bl	80172f4 <uxr_buffer_cancel_data>
 80161f0:	4602      	mov	r2, r0
 80161f2:	6920      	ldr	r0, [r4, #16]
 80161f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80161f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80161fc:	f7fa fbdc 	bl	80109b8 <run_xrce_session>
 8016200:	6920      	ldr	r0, [r4, #16]
 8016202:	6932      	ldr	r2, [r6, #16]
 8016204:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016208:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801620c:	6819      	ldr	r1, [r3, #0]
 801620e:	f7fb fd0f 	bl	8011c30 <uxr_buffer_delete_entity>
 8016212:	4602      	mov	r2, r0
 8016214:	6920      	ldr	r0, [r4, #16]
 8016216:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801621a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801621e:	f7fa fbcb 	bl	80109b8 <run_xrce_session>
 8016222:	2800      	cmp	r0, #0
 8016224:	4628      	mov	r0, r5
 8016226:	bf14      	ite	ne
 8016228:	2400      	movne	r4, #0
 801622a:	2402      	moveq	r4, #2
 801622c:	f7fa fb3c 	bl	80108a8 <rmw_uxrce_fini_service_memory>
 8016230:	e7c5      	b.n	80161be <rmw_destroy_service+0x12>
 8016232:	bf00      	nop

08016234 <rmw_destroy_subscription>:
 8016234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016236:	b128      	cbz	r0, 8016244 <rmw_destroy_subscription+0x10>
 8016238:	4604      	mov	r4, r0
 801623a:	6800      	ldr	r0, [r0, #0]
 801623c:	460d      	mov	r5, r1
 801623e:	f7fa fc3b 	bl	8010ab8 <is_uxrce_rmw_identifier_valid>
 8016242:	b910      	cbnz	r0, 801624a <rmw_destroy_subscription+0x16>
 8016244:	2401      	movs	r4, #1
 8016246:	4620      	mov	r0, r4
 8016248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801624a:	6863      	ldr	r3, [r4, #4]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d0f9      	beq.n	8016244 <rmw_destroy_subscription+0x10>
 8016250:	2d00      	cmp	r5, #0
 8016252:	d0f7      	beq.n	8016244 <rmw_destroy_subscription+0x10>
 8016254:	6828      	ldr	r0, [r5, #0]
 8016256:	f7fa fc2f 	bl	8010ab8 <is_uxrce_rmw_identifier_valid>
 801625a:	2800      	cmp	r0, #0
 801625c:	d0f2      	beq.n	8016244 <rmw_destroy_subscription+0x10>
 801625e:	686c      	ldr	r4, [r5, #4]
 8016260:	2c00      	cmp	r4, #0
 8016262:	d0ef      	beq.n	8016244 <rmw_destroy_subscription+0x10>
 8016264:	6a26      	ldr	r6, [r4, #32]
 8016266:	6962      	ldr	r2, [r4, #20]
 8016268:	6930      	ldr	r0, [r6, #16]
 801626a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801626e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016272:	6819      	ldr	r1, [r3, #0]
 8016274:	f001 f83e 	bl	80172f4 <uxr_buffer_cancel_data>
 8016278:	4602      	mov	r2, r0
 801627a:	6930      	ldr	r0, [r6, #16]
 801627c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016280:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016284:	f7fa fb98 	bl	80109b8 <run_xrce_session>
 8016288:	69e0      	ldr	r0, [r4, #28]
 801628a:	f7ff fe59 	bl	8015f40 <destroy_topic>
 801628e:	6a23      	ldr	r3, [r4, #32]
 8016290:	6962      	ldr	r2, [r4, #20]
 8016292:	6918      	ldr	r0, [r3, #16]
 8016294:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016298:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801629c:	6819      	ldr	r1, [r3, #0]
 801629e:	f7fb fcc7 	bl	8011c30 <uxr_buffer_delete_entity>
 80162a2:	6a23      	ldr	r3, [r4, #32]
 80162a4:	6922      	ldr	r2, [r4, #16]
 80162a6:	691b      	ldr	r3, [r3, #16]
 80162a8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80162ac:	4604      	mov	r4, r0
 80162ae:	6809      	ldr	r1, [r1, #0]
 80162b0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80162b4:	f7fb fcbc 	bl	8011c30 <uxr_buffer_delete_entity>
 80162b8:	6937      	ldr	r7, [r6, #16]
 80162ba:	4622      	mov	r2, r4
 80162bc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80162c0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80162c4:	4604      	mov	r4, r0
 80162c6:	4638      	mov	r0, r7
 80162c8:	f7fa fb76 	bl	80109b8 <run_xrce_session>
 80162cc:	6936      	ldr	r6, [r6, #16]
 80162ce:	4622      	mov	r2, r4
 80162d0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80162d4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80162d8:	4604      	mov	r4, r0
 80162da:	4630      	mov	r0, r6
 80162dc:	f7fa fb6c 	bl	80109b8 <run_xrce_session>
 80162e0:	b12c      	cbz	r4, 80162ee <rmw_destroy_subscription+0xba>
 80162e2:	b120      	cbz	r0, 80162ee <rmw_destroy_subscription+0xba>
 80162e4:	2400      	movs	r4, #0
 80162e6:	4628      	mov	r0, r5
 80162e8:	f7fa fac8 	bl	801087c <rmw_uxrce_fini_subscription_memory>
 80162ec:	e7ab      	b.n	8016246 <rmw_destroy_subscription+0x12>
 80162ee:	2402      	movs	r4, #2
 80162f0:	e7f9      	b.n	80162e6 <rmw_destroy_subscription+0xb2>
 80162f2:	bf00      	nop

080162f4 <rmw_uxrce_transport_init>:
 80162f4:	b508      	push	{r3, lr}
 80162f6:	b108      	cbz	r0, 80162fc <rmw_uxrce_transport_init+0x8>
 80162f8:	f100 0210 	add.w	r2, r0, #16
 80162fc:	b139      	cbz	r1, 801630e <rmw_uxrce_transport_init+0x1a>
 80162fe:	6949      	ldr	r1, [r1, #20]
 8016300:	4610      	mov	r0, r2
 8016302:	f000 fa77 	bl	80167f4 <uxr_init_custom_transport>
 8016306:	f080 0001 	eor.w	r0, r0, #1
 801630a:	b2c0      	uxtb	r0, r0
 801630c:	bd08      	pop	{r3, pc}
 801630e:	4b04      	ldr	r3, [pc, #16]	@ (8016320 <rmw_uxrce_transport_init+0x2c>)
 8016310:	4610      	mov	r0, r2
 8016312:	6859      	ldr	r1, [r3, #4]
 8016314:	f000 fa6e 	bl	80167f4 <uxr_init_custom_transport>
 8016318:	f080 0001 	eor.w	r0, r0, #1
 801631c:	b2c0      	uxtb	r0, r0
 801631e:	bd08      	pop	{r3, pc}
 8016320:	20006214 	.word	0x20006214

08016324 <rmw_uros_epoch_nanos>:
 8016324:	4b05      	ldr	r3, [pc, #20]	@ (801633c <rmw_uros_epoch_nanos+0x18>)
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	b123      	cbz	r3, 8016334 <rmw_uros_epoch_nanos+0x10>
 801632a:	6898      	ldr	r0, [r3, #8]
 801632c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016330:	f7fb bf1c 	b.w	801216c <uxr_epoch_nanos>
 8016334:	2000      	movs	r0, #0
 8016336:	2100      	movs	r1, #0
 8016338:	4770      	bx	lr
 801633a:	bf00      	nop
 801633c:	2000ab2c 	.word	0x2000ab2c

08016340 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8016340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016344:	6805      	ldr	r5, [r0, #0]
 8016346:	4604      	mov	r4, r0
 8016348:	4628      	mov	r0, r5
 801634a:	460e      	mov	r6, r1
 801634c:	f7e9 ff40 	bl	80001d0 <strcmp>
 8016350:	b1c8      	cbz	r0, 8016386 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8016352:	4b11      	ldr	r3, [pc, #68]	@ (8016398 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	429d      	cmp	r5, r3
 8016358:	d112      	bne.n	8016380 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801635a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801635e:	f8d8 4000 	ldr.w	r4, [r8]
 8016362:	b16c      	cbz	r4, 8016380 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8016364:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016368:	2700      	movs	r7, #0
 801636a:	3d04      	subs	r5, #4
 801636c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8016370:	4631      	mov	r1, r6
 8016372:	f7e9 ff2d 	bl	80001d0 <strcmp>
 8016376:	00bb      	lsls	r3, r7, #2
 8016378:	b140      	cbz	r0, 801638c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801637a:	3701      	adds	r7, #1
 801637c:	42bc      	cmp	r4, r7
 801637e:	d1f5      	bne.n	801636c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8016380:	2000      	movs	r0, #0
 8016382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016386:	4620      	mov	r0, r4
 8016388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801638c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016394:	58d3      	ldr	r3, [r2, r3]
 8016396:	4718      	bx	r3
 8016398:	200000d0 	.word	0x200000d0

0801639c <std_msgs__msg__Int32__init>:
 801639c:	3800      	subs	r0, #0
 801639e:	bf18      	it	ne
 80163a0:	2001      	movne	r0, #1
 80163a2:	4770      	bx	lr

080163a4 <std_msgs__msg__Int32__fini>:
 80163a4:	4770      	bx	lr
 80163a6:	bf00      	nop

080163a8 <ucdr_serialize_endian_array_char>:
 80163a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163ac:	4619      	mov	r1, r3
 80163ae:	461f      	mov	r7, r3
 80163b0:	4605      	mov	r5, r0
 80163b2:	4690      	mov	r8, r2
 80163b4:	f7fb fb78 	bl	8011aa8 <ucdr_check_buffer_available_for>
 80163b8:	b9e0      	cbnz	r0, 80163f4 <ucdr_serialize_endian_array_char+0x4c>
 80163ba:	463e      	mov	r6, r7
 80163bc:	e009      	b.n	80163d2 <ucdr_serialize_endian_array_char+0x2a>
 80163be:	68a8      	ldr	r0, [r5, #8]
 80163c0:	f002 ff45 	bl	801924e <memcpy>
 80163c4:	68ab      	ldr	r3, [r5, #8]
 80163c6:	6928      	ldr	r0, [r5, #16]
 80163c8:	4423      	add	r3, r4
 80163ca:	4420      	add	r0, r4
 80163cc:	1b36      	subs	r6, r6, r4
 80163ce:	60ab      	str	r3, [r5, #8]
 80163d0:	6128      	str	r0, [r5, #16]
 80163d2:	4631      	mov	r1, r6
 80163d4:	2201      	movs	r2, #1
 80163d6:	4628      	mov	r0, r5
 80163d8:	f7fb fbee 	bl	8011bb8 <ucdr_check_final_buffer_behavior_array>
 80163dc:	1bb9      	subs	r1, r7, r6
 80163de:	4441      	add	r1, r8
 80163e0:	4604      	mov	r4, r0
 80163e2:	4602      	mov	r2, r0
 80163e4:	2800      	cmp	r0, #0
 80163e6:	d1ea      	bne.n	80163be <ucdr_serialize_endian_array_char+0x16>
 80163e8:	2301      	movs	r3, #1
 80163ea:	7da8      	ldrb	r0, [r5, #22]
 80163ec:	756b      	strb	r3, [r5, #21]
 80163ee:	4058      	eors	r0, r3
 80163f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163f4:	463a      	mov	r2, r7
 80163f6:	68a8      	ldr	r0, [r5, #8]
 80163f8:	4641      	mov	r1, r8
 80163fa:	f002 ff28 	bl	801924e <memcpy>
 80163fe:	68aa      	ldr	r2, [r5, #8]
 8016400:	692b      	ldr	r3, [r5, #16]
 8016402:	443a      	add	r2, r7
 8016404:	443b      	add	r3, r7
 8016406:	60aa      	str	r2, [r5, #8]
 8016408:	612b      	str	r3, [r5, #16]
 801640a:	e7ed      	b.n	80163e8 <ucdr_serialize_endian_array_char+0x40>

0801640c <ucdr_deserialize_endian_array_char>:
 801640c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016410:	4619      	mov	r1, r3
 8016412:	461f      	mov	r7, r3
 8016414:	4605      	mov	r5, r0
 8016416:	4690      	mov	r8, r2
 8016418:	f7fb fb46 	bl	8011aa8 <ucdr_check_buffer_available_for>
 801641c:	b9e0      	cbnz	r0, 8016458 <ucdr_deserialize_endian_array_char+0x4c>
 801641e:	463e      	mov	r6, r7
 8016420:	e009      	b.n	8016436 <ucdr_deserialize_endian_array_char+0x2a>
 8016422:	68a9      	ldr	r1, [r5, #8]
 8016424:	f002 ff13 	bl	801924e <memcpy>
 8016428:	68ab      	ldr	r3, [r5, #8]
 801642a:	6928      	ldr	r0, [r5, #16]
 801642c:	4423      	add	r3, r4
 801642e:	4420      	add	r0, r4
 8016430:	1b36      	subs	r6, r6, r4
 8016432:	60ab      	str	r3, [r5, #8]
 8016434:	6128      	str	r0, [r5, #16]
 8016436:	2201      	movs	r2, #1
 8016438:	4631      	mov	r1, r6
 801643a:	4628      	mov	r0, r5
 801643c:	f7fb fbbc 	bl	8011bb8 <ucdr_check_final_buffer_behavior_array>
 8016440:	4604      	mov	r4, r0
 8016442:	1bb8      	subs	r0, r7, r6
 8016444:	4440      	add	r0, r8
 8016446:	4622      	mov	r2, r4
 8016448:	2c00      	cmp	r4, #0
 801644a:	d1ea      	bne.n	8016422 <ucdr_deserialize_endian_array_char+0x16>
 801644c:	2301      	movs	r3, #1
 801644e:	7da8      	ldrb	r0, [r5, #22]
 8016450:	756b      	strb	r3, [r5, #21]
 8016452:	4058      	eors	r0, r3
 8016454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016458:	463a      	mov	r2, r7
 801645a:	68a9      	ldr	r1, [r5, #8]
 801645c:	4640      	mov	r0, r8
 801645e:	f002 fef6 	bl	801924e <memcpy>
 8016462:	68aa      	ldr	r2, [r5, #8]
 8016464:	692b      	ldr	r3, [r5, #16]
 8016466:	443a      	add	r2, r7
 8016468:	443b      	add	r3, r7
 801646a:	60aa      	str	r2, [r5, #8]
 801646c:	612b      	str	r3, [r5, #16]
 801646e:	e7ed      	b.n	801644c <ucdr_deserialize_endian_array_char+0x40>

08016470 <ucdr_serialize_array_uint8_t>:
 8016470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016474:	4688      	mov	r8, r1
 8016476:	4611      	mov	r1, r2
 8016478:	4617      	mov	r7, r2
 801647a:	4605      	mov	r5, r0
 801647c:	f7fb fb14 	bl	8011aa8 <ucdr_check_buffer_available_for>
 8016480:	b9e0      	cbnz	r0, 80164bc <ucdr_serialize_array_uint8_t+0x4c>
 8016482:	463e      	mov	r6, r7
 8016484:	e009      	b.n	801649a <ucdr_serialize_array_uint8_t+0x2a>
 8016486:	68a8      	ldr	r0, [r5, #8]
 8016488:	f002 fee1 	bl	801924e <memcpy>
 801648c:	68aa      	ldr	r2, [r5, #8]
 801648e:	692b      	ldr	r3, [r5, #16]
 8016490:	4422      	add	r2, r4
 8016492:	4423      	add	r3, r4
 8016494:	1b36      	subs	r6, r6, r4
 8016496:	60aa      	str	r2, [r5, #8]
 8016498:	612b      	str	r3, [r5, #16]
 801649a:	4631      	mov	r1, r6
 801649c:	2201      	movs	r2, #1
 801649e:	4628      	mov	r0, r5
 80164a0:	f7fb fb8a 	bl	8011bb8 <ucdr_check_final_buffer_behavior_array>
 80164a4:	1bb9      	subs	r1, r7, r6
 80164a6:	4441      	add	r1, r8
 80164a8:	4604      	mov	r4, r0
 80164aa:	4602      	mov	r2, r0
 80164ac:	2800      	cmp	r0, #0
 80164ae:	d1ea      	bne.n	8016486 <ucdr_serialize_array_uint8_t+0x16>
 80164b0:	2301      	movs	r3, #1
 80164b2:	7da8      	ldrb	r0, [r5, #22]
 80164b4:	756b      	strb	r3, [r5, #21]
 80164b6:	4058      	eors	r0, r3
 80164b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164bc:	463a      	mov	r2, r7
 80164be:	68a8      	ldr	r0, [r5, #8]
 80164c0:	4641      	mov	r1, r8
 80164c2:	f002 fec4 	bl	801924e <memcpy>
 80164c6:	68aa      	ldr	r2, [r5, #8]
 80164c8:	692b      	ldr	r3, [r5, #16]
 80164ca:	443a      	add	r2, r7
 80164cc:	443b      	add	r3, r7
 80164ce:	60aa      	str	r2, [r5, #8]
 80164d0:	612b      	str	r3, [r5, #16]
 80164d2:	e7ed      	b.n	80164b0 <ucdr_serialize_array_uint8_t+0x40>

080164d4 <ucdr_serialize_endian_array_uint8_t>:
 80164d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164d8:	4619      	mov	r1, r3
 80164da:	461f      	mov	r7, r3
 80164dc:	4605      	mov	r5, r0
 80164de:	4690      	mov	r8, r2
 80164e0:	f7fb fae2 	bl	8011aa8 <ucdr_check_buffer_available_for>
 80164e4:	b9e0      	cbnz	r0, 8016520 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80164e6:	463e      	mov	r6, r7
 80164e8:	e009      	b.n	80164fe <ucdr_serialize_endian_array_uint8_t+0x2a>
 80164ea:	68a8      	ldr	r0, [r5, #8]
 80164ec:	f002 feaf 	bl	801924e <memcpy>
 80164f0:	68ab      	ldr	r3, [r5, #8]
 80164f2:	6928      	ldr	r0, [r5, #16]
 80164f4:	4423      	add	r3, r4
 80164f6:	4420      	add	r0, r4
 80164f8:	1b36      	subs	r6, r6, r4
 80164fa:	60ab      	str	r3, [r5, #8]
 80164fc:	6128      	str	r0, [r5, #16]
 80164fe:	4631      	mov	r1, r6
 8016500:	2201      	movs	r2, #1
 8016502:	4628      	mov	r0, r5
 8016504:	f7fb fb58 	bl	8011bb8 <ucdr_check_final_buffer_behavior_array>
 8016508:	1bb9      	subs	r1, r7, r6
 801650a:	4441      	add	r1, r8
 801650c:	4604      	mov	r4, r0
 801650e:	4602      	mov	r2, r0
 8016510:	2800      	cmp	r0, #0
 8016512:	d1ea      	bne.n	80164ea <ucdr_serialize_endian_array_uint8_t+0x16>
 8016514:	2301      	movs	r3, #1
 8016516:	7da8      	ldrb	r0, [r5, #22]
 8016518:	756b      	strb	r3, [r5, #21]
 801651a:	4058      	eors	r0, r3
 801651c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016520:	463a      	mov	r2, r7
 8016522:	68a8      	ldr	r0, [r5, #8]
 8016524:	4641      	mov	r1, r8
 8016526:	f002 fe92 	bl	801924e <memcpy>
 801652a:	68aa      	ldr	r2, [r5, #8]
 801652c:	692b      	ldr	r3, [r5, #16]
 801652e:	443a      	add	r2, r7
 8016530:	443b      	add	r3, r7
 8016532:	60aa      	str	r2, [r5, #8]
 8016534:	612b      	str	r3, [r5, #16]
 8016536:	e7ed      	b.n	8016514 <ucdr_serialize_endian_array_uint8_t+0x40>

08016538 <ucdr_deserialize_array_uint8_t>:
 8016538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801653c:	4688      	mov	r8, r1
 801653e:	4611      	mov	r1, r2
 8016540:	4617      	mov	r7, r2
 8016542:	4605      	mov	r5, r0
 8016544:	f7fb fab0 	bl	8011aa8 <ucdr_check_buffer_available_for>
 8016548:	b9e0      	cbnz	r0, 8016584 <ucdr_deserialize_array_uint8_t+0x4c>
 801654a:	463e      	mov	r6, r7
 801654c:	e009      	b.n	8016562 <ucdr_deserialize_array_uint8_t+0x2a>
 801654e:	68a9      	ldr	r1, [r5, #8]
 8016550:	f002 fe7d 	bl	801924e <memcpy>
 8016554:	68aa      	ldr	r2, [r5, #8]
 8016556:	692b      	ldr	r3, [r5, #16]
 8016558:	4422      	add	r2, r4
 801655a:	4423      	add	r3, r4
 801655c:	1b36      	subs	r6, r6, r4
 801655e:	60aa      	str	r2, [r5, #8]
 8016560:	612b      	str	r3, [r5, #16]
 8016562:	2201      	movs	r2, #1
 8016564:	4631      	mov	r1, r6
 8016566:	4628      	mov	r0, r5
 8016568:	f7fb fb26 	bl	8011bb8 <ucdr_check_final_buffer_behavior_array>
 801656c:	4604      	mov	r4, r0
 801656e:	1bb8      	subs	r0, r7, r6
 8016570:	4440      	add	r0, r8
 8016572:	4622      	mov	r2, r4
 8016574:	2c00      	cmp	r4, #0
 8016576:	d1ea      	bne.n	801654e <ucdr_deserialize_array_uint8_t+0x16>
 8016578:	2301      	movs	r3, #1
 801657a:	7da8      	ldrb	r0, [r5, #22]
 801657c:	756b      	strb	r3, [r5, #21]
 801657e:	4058      	eors	r0, r3
 8016580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016584:	463a      	mov	r2, r7
 8016586:	68a9      	ldr	r1, [r5, #8]
 8016588:	4640      	mov	r0, r8
 801658a:	f002 fe60 	bl	801924e <memcpy>
 801658e:	68aa      	ldr	r2, [r5, #8]
 8016590:	692b      	ldr	r3, [r5, #16]
 8016592:	443a      	add	r2, r7
 8016594:	443b      	add	r3, r7
 8016596:	60aa      	str	r2, [r5, #8]
 8016598:	612b      	str	r3, [r5, #16]
 801659a:	e7ed      	b.n	8016578 <ucdr_deserialize_array_uint8_t+0x40>

0801659c <ucdr_deserialize_endian_array_uint8_t>:
 801659c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165a0:	4619      	mov	r1, r3
 80165a2:	461f      	mov	r7, r3
 80165a4:	4605      	mov	r5, r0
 80165a6:	4690      	mov	r8, r2
 80165a8:	f7fb fa7e 	bl	8011aa8 <ucdr_check_buffer_available_for>
 80165ac:	b9e0      	cbnz	r0, 80165e8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80165ae:	463e      	mov	r6, r7
 80165b0:	e009      	b.n	80165c6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80165b2:	68a9      	ldr	r1, [r5, #8]
 80165b4:	f002 fe4b 	bl	801924e <memcpy>
 80165b8:	68ab      	ldr	r3, [r5, #8]
 80165ba:	6928      	ldr	r0, [r5, #16]
 80165bc:	4423      	add	r3, r4
 80165be:	4420      	add	r0, r4
 80165c0:	1b36      	subs	r6, r6, r4
 80165c2:	60ab      	str	r3, [r5, #8]
 80165c4:	6128      	str	r0, [r5, #16]
 80165c6:	2201      	movs	r2, #1
 80165c8:	4631      	mov	r1, r6
 80165ca:	4628      	mov	r0, r5
 80165cc:	f7fb faf4 	bl	8011bb8 <ucdr_check_final_buffer_behavior_array>
 80165d0:	4604      	mov	r4, r0
 80165d2:	1bb8      	subs	r0, r7, r6
 80165d4:	4440      	add	r0, r8
 80165d6:	4622      	mov	r2, r4
 80165d8:	2c00      	cmp	r4, #0
 80165da:	d1ea      	bne.n	80165b2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80165dc:	2301      	movs	r3, #1
 80165de:	7da8      	ldrb	r0, [r5, #22]
 80165e0:	756b      	strb	r3, [r5, #21]
 80165e2:	4058      	eors	r0, r3
 80165e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165e8:	463a      	mov	r2, r7
 80165ea:	68a9      	ldr	r1, [r5, #8]
 80165ec:	4640      	mov	r0, r8
 80165ee:	f002 fe2e 	bl	801924e <memcpy>
 80165f2:	68aa      	ldr	r2, [r5, #8]
 80165f4:	692b      	ldr	r3, [r5, #16]
 80165f6:	443a      	add	r2, r7
 80165f8:	443b      	add	r3, r7
 80165fa:	60aa      	str	r2, [r5, #8]
 80165fc:	612b      	str	r3, [r5, #16]
 80165fe:	e7ed      	b.n	80165dc <ucdr_deserialize_endian_array_uint8_t+0x40>

08016600 <ucdr_serialize_sequence_char>:
 8016600:	b570      	push	{r4, r5, r6, lr}
 8016602:	4615      	mov	r5, r2
 8016604:	460e      	mov	r6, r1
 8016606:	7d01      	ldrb	r1, [r0, #20]
 8016608:	4604      	mov	r4, r0
 801660a:	f7fa fda3 	bl	8011154 <ucdr_serialize_endian_uint32_t>
 801660e:	b90d      	cbnz	r5, 8016614 <ucdr_serialize_sequence_char+0x14>
 8016610:	2001      	movs	r0, #1
 8016612:	bd70      	pop	{r4, r5, r6, pc}
 8016614:	7d21      	ldrb	r1, [r4, #20]
 8016616:	462b      	mov	r3, r5
 8016618:	4632      	mov	r2, r6
 801661a:	4620      	mov	r0, r4
 801661c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016620:	f7ff bec2 	b.w	80163a8 <ucdr_serialize_endian_array_char>

08016624 <ucdr_deserialize_sequence_char>:
 8016624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016628:	461d      	mov	r5, r3
 801662a:	4616      	mov	r6, r2
 801662c:	460f      	mov	r7, r1
 801662e:	461a      	mov	r2, r3
 8016630:	7d01      	ldrb	r1, [r0, #20]
 8016632:	4604      	mov	r4, r0
 8016634:	f7fa feb6 	bl	80113a4 <ucdr_deserialize_endian_uint32_t>
 8016638:	682b      	ldr	r3, [r5, #0]
 801663a:	429e      	cmp	r6, r3
 801663c:	bf3c      	itt	cc
 801663e:	2201      	movcc	r2, #1
 8016640:	75a2      	strbcc	r2, [r4, #22]
 8016642:	b913      	cbnz	r3, 801664a <ucdr_deserialize_sequence_char+0x26>
 8016644:	2001      	movs	r0, #1
 8016646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801664a:	7d21      	ldrb	r1, [r4, #20]
 801664c:	463a      	mov	r2, r7
 801664e:	4620      	mov	r0, r4
 8016650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016654:	f7ff beda 	b.w	801640c <ucdr_deserialize_endian_array_char>

08016658 <ucdr_serialize_sequence_uint8_t>:
 8016658:	b570      	push	{r4, r5, r6, lr}
 801665a:	4615      	mov	r5, r2
 801665c:	460e      	mov	r6, r1
 801665e:	7d01      	ldrb	r1, [r0, #20]
 8016660:	4604      	mov	r4, r0
 8016662:	f7fa fd77 	bl	8011154 <ucdr_serialize_endian_uint32_t>
 8016666:	b90d      	cbnz	r5, 801666c <ucdr_serialize_sequence_uint8_t+0x14>
 8016668:	2001      	movs	r0, #1
 801666a:	bd70      	pop	{r4, r5, r6, pc}
 801666c:	7d21      	ldrb	r1, [r4, #20]
 801666e:	462b      	mov	r3, r5
 8016670:	4632      	mov	r2, r6
 8016672:	4620      	mov	r0, r4
 8016674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016678:	f7ff bf2c 	b.w	80164d4 <ucdr_serialize_endian_array_uint8_t>

0801667c <ucdr_deserialize_sequence_uint8_t>:
 801667c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016680:	461d      	mov	r5, r3
 8016682:	4616      	mov	r6, r2
 8016684:	460f      	mov	r7, r1
 8016686:	461a      	mov	r2, r3
 8016688:	7d01      	ldrb	r1, [r0, #20]
 801668a:	4604      	mov	r4, r0
 801668c:	f7fa fe8a 	bl	80113a4 <ucdr_deserialize_endian_uint32_t>
 8016690:	682b      	ldr	r3, [r5, #0]
 8016692:	429e      	cmp	r6, r3
 8016694:	bf3c      	itt	cc
 8016696:	2201      	movcc	r2, #1
 8016698:	75a2      	strbcc	r2, [r4, #22]
 801669a:	b913      	cbnz	r3, 80166a2 <ucdr_deserialize_sequence_uint8_t+0x26>
 801669c:	2001      	movs	r0, #1
 801669e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166a2:	7d21      	ldrb	r1, [r4, #20]
 80166a4:	463a      	mov	r2, r7
 80166a6:	4620      	mov	r0, r4
 80166a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80166ac:	f7ff bf76 	b.w	801659c <ucdr_deserialize_endian_array_uint8_t>

080166b0 <ucdr_serialize_string>:
 80166b0:	b510      	push	{r4, lr}
 80166b2:	b082      	sub	sp, #8
 80166b4:	4604      	mov	r4, r0
 80166b6:	4608      	mov	r0, r1
 80166b8:	9101      	str	r1, [sp, #4]
 80166ba:	f7e9 fd93 	bl	80001e4 <strlen>
 80166be:	9901      	ldr	r1, [sp, #4]
 80166c0:	1c42      	adds	r2, r0, #1
 80166c2:	4620      	mov	r0, r4
 80166c4:	b002      	add	sp, #8
 80166c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166ca:	f7ff bf99 	b.w	8016600 <ucdr_serialize_sequence_char>
 80166ce:	bf00      	nop

080166d0 <ucdr_deserialize_string>:
 80166d0:	b500      	push	{lr}
 80166d2:	b083      	sub	sp, #12
 80166d4:	ab01      	add	r3, sp, #4
 80166d6:	f7ff ffa5 	bl	8016624 <ucdr_deserialize_sequence_char>
 80166da:	b003      	add	sp, #12
 80166dc:	f85d fb04 	ldr.w	pc, [sp], #4

080166e0 <get_custom_error>:
 80166e0:	4b01      	ldr	r3, [pc, #4]	@ (80166e8 <get_custom_error+0x8>)
 80166e2:	7818      	ldrb	r0, [r3, #0]
 80166e4:	4770      	bx	lr
 80166e6:	bf00      	nop
 80166e8:	2000ac78 	.word	0x2000ac78

080166ec <recv_custom_msg>:
 80166ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166f0:	4693      	mov	fp, r2
 80166f2:	b089      	sub	sp, #36	@ 0x24
 80166f4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80166f8:	9305      	str	r3, [sp, #20]
 80166fa:	468a      	mov	sl, r1
 80166fc:	2100      	movs	r1, #0
 80166fe:	4604      	mov	r4, r0
 8016700:	f88d 101e 	strb.w	r1, [sp, #30]
 8016704:	b322      	cbz	r2, 8016750 <recv_custom_msg+0x64>
 8016706:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801670a:	f10d 081f 	add.w	r8, sp, #31
 801670e:	af05      	add	r7, sp, #20
 8016710:	f10d 061e 	add.w	r6, sp, #30
 8016714:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8016718:	e002      	b.n	8016720 <recv_custom_msg+0x34>
 801671a:	9b05      	ldr	r3, [sp, #20]
 801671c:	2b00      	cmp	r3, #0
 801671e:	dd0f      	ble.n	8016740 <recv_custom_msg+0x54>
 8016720:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8016724:	4623      	mov	r3, r4
 8016726:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801672a:	e9cd 5600 	strd	r5, r6, [sp]
 801672e:	4622      	mov	r2, r4
 8016730:	4648      	mov	r0, r9
 8016732:	f001 f8f3 	bl	801791c <uxr_read_framed_msg>
 8016736:	2800      	cmp	r0, #0
 8016738:	d0ef      	beq.n	801671a <recv_custom_msg+0x2e>
 801673a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801673e:	b1b3      	cbz	r3, 801676e <recv_custom_msg+0x82>
 8016740:	4b0f      	ldr	r3, [pc, #60]	@ (8016780 <recv_custom_msg+0x94>)
 8016742:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8016746:	701a      	strb	r2, [r3, #0]
 8016748:	2000      	movs	r0, #0
 801674a:	b009      	add	sp, #36	@ 0x24
 801674c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016750:	f10d 021f 	add.w	r2, sp, #31
 8016754:	9200      	str	r2, [sp, #0]
 8016756:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801675a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801675e:	4601      	mov	r1, r0
 8016760:	47a8      	blx	r5
 8016762:	2800      	cmp	r0, #0
 8016764:	d0ec      	beq.n	8016740 <recv_custom_msg+0x54>
 8016766:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d1e8      	bne.n	8016740 <recv_custom_msg+0x54>
 801676e:	f8cb 0000 	str.w	r0, [fp]
 8016772:	2001      	movs	r0, #1
 8016774:	f8ca 4000 	str.w	r4, [sl]
 8016778:	b009      	add	sp, #36	@ 0x24
 801677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801677e:	bf00      	nop
 8016780:	2000ac78 	.word	0x2000ac78

08016784 <send_custom_msg>:
 8016784:	b530      	push	{r4, r5, lr}
 8016786:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801678a:	b087      	sub	sp, #28
 801678c:	4615      	mov	r5, r2
 801678e:	b974      	cbnz	r4, 80167ae <send_custom_msg+0x2a>
 8016790:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8016794:	f10d 0317 	add.w	r3, sp, #23
 8016798:	47a0      	blx	r4
 801679a:	b108      	cbz	r0, 80167a0 <send_custom_msg+0x1c>
 801679c:	42a8      	cmp	r0, r5
 801679e:	d015      	beq.n	80167cc <send_custom_msg+0x48>
 80167a0:	4b0c      	ldr	r3, [pc, #48]	@ (80167d4 <send_custom_msg+0x50>)
 80167a2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80167a6:	701a      	strb	r2, [r3, #0]
 80167a8:	2000      	movs	r0, #0
 80167aa:	b007      	add	sp, #28
 80167ac:	bd30      	pop	{r4, r5, pc}
 80167ae:	460b      	mov	r3, r1
 80167b0:	2200      	movs	r2, #0
 80167b2:	f10d 0117 	add.w	r1, sp, #23
 80167b6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80167ba:	4602      	mov	r2, r0
 80167bc:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80167c0:	9500      	str	r5, [sp, #0]
 80167c2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80167c6:	f000 feb1 	bl	801752c <uxr_write_framed_msg>
 80167ca:	e7e6      	b.n	801679a <send_custom_msg+0x16>
 80167cc:	2001      	movs	r0, #1
 80167ce:	b007      	add	sp, #28
 80167d0:	bd30      	pop	{r4, r5, pc}
 80167d2:	bf00      	nop
 80167d4:	2000ac78 	.word	0x2000ac78

080167d8 <uxr_set_custom_transport_callbacks>:
 80167d8:	b410      	push	{r4}
 80167da:	9c01      	ldr	r4, [sp, #4]
 80167dc:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80167e0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80167e4:	9b02      	ldr	r3, [sp, #8]
 80167e6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80167ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167ee:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80167f2:	4770      	bx	lr

080167f4 <uxr_init_custom_transport>:
 80167f4:	b538      	push	{r3, r4, r5, lr}
 80167f6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80167fa:	b303      	cbz	r3, 801683e <uxr_init_custom_transport+0x4a>
 80167fc:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8016800:	4604      	mov	r4, r0
 8016802:	b1e2      	cbz	r2, 801683e <uxr_init_custom_transport+0x4a>
 8016804:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8016808:	b1ca      	cbz	r2, 801683e <uxr_init_custom_transport+0x4a>
 801680a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801680e:	b1b2      	cbz	r2, 801683e <uxr_init_custom_transport+0x4a>
 8016810:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8016814:	4798      	blx	r3
 8016816:	4605      	mov	r5, r0
 8016818:	b188      	cbz	r0, 801683e <uxr_init_custom_transport+0x4a>
 801681a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801681e:	b98b      	cbnz	r3, 8016844 <uxr_init_custom_transport+0x50>
 8016820:	490b      	ldr	r1, [pc, #44]	@ (8016850 <uxr_init_custom_transport+0x5c>)
 8016822:	4b0c      	ldr	r3, [pc, #48]	@ (8016854 <uxr_init_custom_transport+0x60>)
 8016824:	4a0c      	ldr	r2, [pc, #48]	@ (8016858 <uxr_init_custom_transport+0x64>)
 8016826:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801682a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801682e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8016832:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8016836:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801683a:	4628      	mov	r0, r5
 801683c:	bd38      	pop	{r3, r4, r5, pc}
 801683e:	2500      	movs	r5, #0
 8016840:	4628      	mov	r0, r5
 8016842:	bd38      	pop	{r3, r4, r5, pc}
 8016844:	2100      	movs	r1, #0
 8016846:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801684a:	f000 fe69 	bl	8017520 <uxr_init_framing_io>
 801684e:	e7e7      	b.n	8016820 <uxr_init_custom_transport+0x2c>
 8016850:	08016785 	.word	0x08016785
 8016854:	080166ed 	.word	0x080166ed
 8016858:	080166e1 	.word	0x080166e1

0801685c <uxr_close_custom_transport>:
 801685c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8016860:	4718      	bx	r3
 8016862:	bf00      	nop

08016864 <uxr_init_input_best_effort_stream>:
 8016864:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016868:	8003      	strh	r3, [r0, #0]
 801686a:	4770      	bx	lr

0801686c <uxr_reset_input_best_effort_stream>:
 801686c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016870:	8003      	strh	r3, [r0, #0]
 8016872:	4770      	bx	lr

08016874 <uxr_receive_best_effort_message>:
 8016874:	b538      	push	{r3, r4, r5, lr}
 8016876:	4604      	mov	r4, r0
 8016878:	8800      	ldrh	r0, [r0, #0]
 801687a:	460d      	mov	r5, r1
 801687c:	f000 fe38 	bl	80174f0 <uxr_seq_num_cmp>
 8016880:	4603      	mov	r3, r0
 8016882:	2b00      	cmp	r3, #0
 8016884:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016888:	bfb8      	it	lt
 801688a:	8025      	strhlt	r5, [r4, #0]
 801688c:	bd38      	pop	{r3, r4, r5, pc}
 801688e:	bf00      	nop

08016890 <on_full_input_buffer>:
 8016890:	b570      	push	{r4, r5, r6, lr}
 8016892:	4605      	mov	r5, r0
 8016894:	460c      	mov	r4, r1
 8016896:	682b      	ldr	r3, [r5, #0]
 8016898:	6809      	ldr	r1, [r1, #0]
 801689a:	8920      	ldrh	r0, [r4, #8]
 801689c:	6862      	ldr	r2, [r4, #4]
 801689e:	fbb2 f2f0 	udiv	r2, r2, r0
 80168a2:	eba3 0c01 	sub.w	ip, r3, r1
 80168a6:	fbbc fcf2 	udiv	ip, ip, r2
 80168aa:	f10c 0c01 	add.w	ip, ip, #1
 80168ae:	fa1f f38c 	uxth.w	r3, ip
 80168b2:	fbb3 f6f0 	udiv	r6, r3, r0
 80168b6:	fb00 3316 	mls	r3, r0, r6, r3
 80168ba:	b29b      	uxth	r3, r3
 80168bc:	fb02 f303 	mul.w	r3, r2, r3
 80168c0:	1d18      	adds	r0, r3, #4
 80168c2:	4408      	add	r0, r1
 80168c4:	7d26      	ldrb	r6, [r4, #20]
 80168c6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80168ca:	b116      	cbz	r6, 80168d2 <on_full_input_buffer+0x42>
 80168cc:	2600      	movs	r6, #0
 80168ce:	f840 6c04 	str.w	r6, [r0, #-4]
 80168d2:	2a03      	cmp	r2, #3
 80168d4:	d801      	bhi.n	80168da <on_full_input_buffer+0x4a>
 80168d6:	2001      	movs	r0, #1
 80168d8:	bd70      	pop	{r4, r5, r6, pc}
 80168da:	3308      	adds	r3, #8
 80168dc:	4419      	add	r1, r3
 80168de:	4628      	mov	r0, r5
 80168e0:	692b      	ldr	r3, [r5, #16]
 80168e2:	3a04      	subs	r2, #4
 80168e4:	f7fb f92c 	bl	8011b40 <ucdr_init_buffer_origin>
 80168e8:	4628      	mov	r0, r5
 80168ea:	4903      	ldr	r1, [pc, #12]	@ (80168f8 <on_full_input_buffer+0x68>)
 80168ec:	4622      	mov	r2, r4
 80168ee:	f7fb f903 	bl	8011af8 <ucdr_set_on_full_buffer_callback>
 80168f2:	2000      	movs	r0, #0
 80168f4:	bd70      	pop	{r4, r5, r6, pc}
 80168f6:	bf00      	nop
 80168f8:	08016891 	.word	0x08016891

080168fc <uxr_init_input_reliable_stream>:
 80168fc:	b500      	push	{lr}
 80168fe:	e9c0 1200 	strd	r1, r2, [r0]
 8016902:	f04f 0e00 	mov.w	lr, #0
 8016906:	9a01      	ldr	r2, [sp, #4]
 8016908:	8103      	strh	r3, [r0, #8]
 801690a:	6102      	str	r2, [r0, #16]
 801690c:	f880 e014 	strb.w	lr, [r0, #20]
 8016910:	b1d3      	cbz	r3, 8016948 <uxr_init_input_reliable_stream+0x4c>
 8016912:	f8c1 e000 	str.w	lr, [r1]
 8016916:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801691a:	f1bc 0f01 	cmp.w	ip, #1
 801691e:	d913      	bls.n	8016948 <uxr_init_input_reliable_stream+0x4c>
 8016920:	2301      	movs	r3, #1
 8016922:	fbb3 f1fc 	udiv	r1, r3, ip
 8016926:	fb0c 3111 	mls	r1, ip, r1, r3
 801692a:	b289      	uxth	r1, r1
 801692c:	6842      	ldr	r2, [r0, #4]
 801692e:	fbb2 f2fc 	udiv	r2, r2, ip
 8016932:	fb01 f202 	mul.w	r2, r1, r2
 8016936:	6801      	ldr	r1, [r0, #0]
 8016938:	f841 e002 	str.w	lr, [r1, r2]
 801693c:	3301      	adds	r3, #1
 801693e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016942:	b29b      	uxth	r3, r3
 8016944:	459c      	cmp	ip, r3
 8016946:	d8ec      	bhi.n	8016922 <uxr_init_input_reliable_stream+0x26>
 8016948:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801694c:	60c3      	str	r3, [r0, #12]
 801694e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016952:	bf00      	nop

08016954 <uxr_reset_input_reliable_stream>:
 8016954:	8901      	ldrh	r1, [r0, #8]
 8016956:	b1e9      	cbz	r1, 8016994 <uxr_reset_input_reliable_stream+0x40>
 8016958:	f04f 0c00 	mov.w	ip, #0
 801695c:	b500      	push	{lr}
 801695e:	4663      	mov	r3, ip
 8016960:	46e6      	mov	lr, ip
 8016962:	fbb3 f2f1 	udiv	r2, r3, r1
 8016966:	fb01 3312 	mls	r3, r1, r2, r3
 801696a:	b29b      	uxth	r3, r3
 801696c:	6842      	ldr	r2, [r0, #4]
 801696e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016972:	fb02 f303 	mul.w	r3, r2, r3
 8016976:	6802      	ldr	r2, [r0, #0]
 8016978:	f842 e003 	str.w	lr, [r2, r3]
 801697c:	f10c 0c01 	add.w	ip, ip, #1
 8016980:	8901      	ldrh	r1, [r0, #8]
 8016982:	fa1f f38c 	uxth.w	r3, ip
 8016986:	4299      	cmp	r1, r3
 8016988:	d8eb      	bhi.n	8016962 <uxr_reset_input_reliable_stream+0xe>
 801698a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801698e:	60c3      	str	r3, [r0, #12]
 8016990:	f85d fb04 	ldr.w	pc, [sp], #4
 8016994:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016998:	60c3      	str	r3, [r0, #12]
 801699a:	4770      	bx	lr

0801699c <uxr_receive_reliable_message>:
 801699c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169a0:	4604      	mov	r4, r0
 80169a2:	460d      	mov	r5, r1
 80169a4:	8901      	ldrh	r1, [r0, #8]
 80169a6:	8980      	ldrh	r0, [r0, #12]
 80169a8:	4690      	mov	r8, r2
 80169aa:	461f      	mov	r7, r3
 80169ac:	f000 fd98 	bl	80174e0 <uxr_seq_num_add>
 80169b0:	4629      	mov	r1, r5
 80169b2:	4606      	mov	r6, r0
 80169b4:	89a0      	ldrh	r0, [r4, #12]
 80169b6:	f000 fd9b 	bl	80174f0 <uxr_seq_num_cmp>
 80169ba:	2800      	cmp	r0, #0
 80169bc:	db0a      	blt.n	80169d4 <uxr_receive_reliable_message+0x38>
 80169be:	2600      	movs	r6, #0
 80169c0:	89e0      	ldrh	r0, [r4, #14]
 80169c2:	4629      	mov	r1, r5
 80169c4:	f000 fd94 	bl	80174f0 <uxr_seq_num_cmp>
 80169c8:	2800      	cmp	r0, #0
 80169ca:	da00      	bge.n	80169ce <uxr_receive_reliable_message+0x32>
 80169cc:	81e5      	strh	r5, [r4, #14]
 80169ce:	4630      	mov	r0, r6
 80169d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169d4:	4630      	mov	r0, r6
 80169d6:	4629      	mov	r1, r5
 80169d8:	f000 fd8a 	bl	80174f0 <uxr_seq_num_cmp>
 80169dc:	2800      	cmp	r0, #0
 80169de:	dbee      	blt.n	80169be <uxr_receive_reliable_message+0x22>
 80169e0:	6923      	ldr	r3, [r4, #16]
 80169e2:	4640      	mov	r0, r8
 80169e4:	4798      	blx	r3
 80169e6:	2101      	movs	r1, #1
 80169e8:	4681      	mov	r9, r0
 80169ea:	89a0      	ldrh	r0, [r4, #12]
 80169ec:	f000 fd78 	bl	80174e0 <uxr_seq_num_add>
 80169f0:	f1b9 0f00 	cmp.w	r9, #0
 80169f4:	d101      	bne.n	80169fa <uxr_receive_reliable_message+0x5e>
 80169f6:	4285      	cmp	r5, r0
 80169f8:	d047      	beq.n	8016a8a <uxr_receive_reliable_message+0xee>
 80169fa:	8922      	ldrh	r2, [r4, #8]
 80169fc:	fbb5 f0f2 	udiv	r0, r5, r2
 8016a00:	fb02 5010 	mls	r0, r2, r0, r5
 8016a04:	b280      	uxth	r0, r0
 8016a06:	6863      	ldr	r3, [r4, #4]
 8016a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8016a0c:	fb00 f303 	mul.w	r3, r0, r3
 8016a10:	6820      	ldr	r0, [r4, #0]
 8016a12:	3304      	adds	r3, #4
 8016a14:	4418      	add	r0, r3
 8016a16:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d1cf      	bne.n	80169be <uxr_receive_reliable_message+0x22>
 8016a1e:	4641      	mov	r1, r8
 8016a20:	463a      	mov	r2, r7
 8016a22:	f002 fc14 	bl	801924e <memcpy>
 8016a26:	8921      	ldrh	r1, [r4, #8]
 8016a28:	fbb5 f2f1 	udiv	r2, r5, r1
 8016a2c:	fb01 5212 	mls	r2, r1, r2, r5
 8016a30:	b292      	uxth	r2, r2
 8016a32:	6863      	ldr	r3, [r4, #4]
 8016a34:	fbb3 f3f1 	udiv	r3, r3, r1
 8016a38:	fb02 f303 	mul.w	r3, r2, r3
 8016a3c:	6822      	ldr	r2, [r4, #0]
 8016a3e:	50d7      	str	r7, [r2, r3]
 8016a40:	9a08      	ldr	r2, [sp, #32]
 8016a42:	2301      	movs	r3, #1
 8016a44:	7013      	strb	r3, [r2, #0]
 8016a46:	f1b9 0f00 	cmp.w	r9, #0
 8016a4a:	d0b8      	beq.n	80169be <uxr_receive_reliable_message+0x22>
 8016a4c:	89a6      	ldrh	r6, [r4, #12]
 8016a4e:	4630      	mov	r0, r6
 8016a50:	2101      	movs	r1, #1
 8016a52:	f000 fd45 	bl	80174e0 <uxr_seq_num_add>
 8016a56:	8922      	ldrh	r2, [r4, #8]
 8016a58:	6863      	ldr	r3, [r4, #4]
 8016a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8016a5e:	4606      	mov	r6, r0
 8016a60:	fbb0 f0f2 	udiv	r0, r0, r2
 8016a64:	fb02 6010 	mls	r0, r2, r0, r6
 8016a68:	b280      	uxth	r0, r0
 8016a6a:	fb00 f303 	mul.w	r3, r0, r3
 8016a6e:	6820      	ldr	r0, [r4, #0]
 8016a70:	3304      	adds	r3, #4
 8016a72:	4418      	add	r0, r3
 8016a74:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d0a0      	beq.n	80169be <uxr_receive_reliable_message+0x22>
 8016a7c:	6923      	ldr	r3, [r4, #16]
 8016a7e:	4798      	blx	r3
 8016a80:	2802      	cmp	r0, #2
 8016a82:	d008      	beq.n	8016a96 <uxr_receive_reliable_message+0xfa>
 8016a84:	2801      	cmp	r0, #1
 8016a86:	d0e2      	beq.n	8016a4e <uxr_receive_reliable_message+0xb2>
 8016a88:	e799      	b.n	80169be <uxr_receive_reliable_message+0x22>
 8016a8a:	9b08      	ldr	r3, [sp, #32]
 8016a8c:	81a5      	strh	r5, [r4, #12]
 8016a8e:	2601      	movs	r6, #1
 8016a90:	f883 9000 	strb.w	r9, [r3]
 8016a94:	e794      	b.n	80169c0 <uxr_receive_reliable_message+0x24>
 8016a96:	2601      	movs	r6, #1
 8016a98:	e792      	b.n	80169c0 <uxr_receive_reliable_message+0x24>
 8016a9a:	bf00      	nop

08016a9c <uxr_next_input_reliable_buffer_available>:
 8016a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016aa0:	4604      	mov	r4, r0
 8016aa2:	460f      	mov	r7, r1
 8016aa4:	8980      	ldrh	r0, [r0, #12]
 8016aa6:	2101      	movs	r1, #1
 8016aa8:	4690      	mov	r8, r2
 8016aaa:	f000 fd19 	bl	80174e0 <uxr_seq_num_add>
 8016aae:	8922      	ldrh	r2, [r4, #8]
 8016ab0:	fbb0 f6f2 	udiv	r6, r0, r2
 8016ab4:	fb02 0616 	mls	r6, r2, r6, r0
 8016ab8:	b2b6      	uxth	r6, r6
 8016aba:	6863      	ldr	r3, [r4, #4]
 8016abc:	fbb3 f3f2 	udiv	r3, r3, r2
 8016ac0:	fb06 f303 	mul.w	r3, r6, r3
 8016ac4:	6826      	ldr	r6, [r4, #0]
 8016ac6:	3304      	adds	r3, #4
 8016ac8:	441e      	add	r6, r3
 8016aca:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8016ace:	f1b9 0f00 	cmp.w	r9, #0
 8016ad2:	d023      	beq.n	8016b1c <uxr_next_input_reliable_buffer_available+0x80>
 8016ad4:	6923      	ldr	r3, [r4, #16]
 8016ad6:	4605      	mov	r5, r0
 8016ad8:	4630      	mov	r0, r6
 8016ada:	4798      	blx	r3
 8016adc:	4682      	mov	sl, r0
 8016ade:	b300      	cbz	r0, 8016b22 <uxr_next_input_reliable_buffer_available+0x86>
 8016ae0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016ae4:	2101      	movs	r1, #1
 8016ae6:	4650      	mov	r0, sl
 8016ae8:	f000 fcfa 	bl	80174e0 <uxr_seq_num_add>
 8016aec:	8921      	ldrh	r1, [r4, #8]
 8016aee:	fbb0 f2f1 	udiv	r2, r0, r1
 8016af2:	4682      	mov	sl, r0
 8016af4:	fb01 0212 	mls	r2, r1, r2, r0
 8016af8:	e9d4 0300 	ldrd	r0, r3, [r4]
 8016afc:	b292      	uxth	r2, r2
 8016afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8016b02:	fb02 f303 	mul.w	r3, r2, r3
 8016b06:	3304      	adds	r3, #4
 8016b08:	4418      	add	r0, r3
 8016b0a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016b0e:	b12b      	cbz	r3, 8016b1c <uxr_next_input_reliable_buffer_available+0x80>
 8016b10:	6923      	ldr	r3, [r4, #16]
 8016b12:	4798      	blx	r3
 8016b14:	2802      	cmp	r0, #2
 8016b16:	d01b      	beq.n	8016b50 <uxr_next_input_reliable_buffer_available+0xb4>
 8016b18:	2801      	cmp	r0, #1
 8016b1a:	d0e3      	beq.n	8016ae4 <uxr_next_input_reliable_buffer_available+0x48>
 8016b1c:	2000      	movs	r0, #0
 8016b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b22:	464a      	mov	r2, r9
 8016b24:	4631      	mov	r1, r6
 8016b26:	4638      	mov	r0, r7
 8016b28:	f7fb f812 	bl	8011b50 <ucdr_init_buffer>
 8016b2c:	8921      	ldrh	r1, [r4, #8]
 8016b2e:	fbb5 f2f1 	udiv	r2, r5, r1
 8016b32:	fb01 5212 	mls	r2, r1, r2, r5
 8016b36:	b292      	uxth	r2, r2
 8016b38:	6863      	ldr	r3, [r4, #4]
 8016b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8016b3e:	fb02 f303 	mul.w	r3, r2, r3
 8016b42:	6822      	ldr	r2, [r4, #0]
 8016b44:	f842 a003 	str.w	sl, [r2, r3]
 8016b48:	2001      	movs	r0, #1
 8016b4a:	81a5      	strh	r5, [r4, #12]
 8016b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b50:	8920      	ldrh	r0, [r4, #8]
 8016b52:	fbb5 f3f0 	udiv	r3, r5, r0
 8016b56:	fb00 5513 	mls	r5, r0, r3, r5
 8016b5a:	b2ad      	uxth	r5, r5
 8016b5c:	6863      	ldr	r3, [r4, #4]
 8016b5e:	fbb3 f3f0 	udiv	r3, r3, r0
 8016b62:	fb03 f505 	mul.w	r5, r3, r5
 8016b66:	6823      	ldr	r3, [r4, #0]
 8016b68:	2000      	movs	r0, #0
 8016b6a:	5158      	str	r0, [r3, r5]
 8016b6c:	eb06 0108 	add.w	r1, r6, r8
 8016b70:	eba9 0208 	sub.w	r2, r9, r8
 8016b74:	4638      	mov	r0, r7
 8016b76:	f7fa ffeb 	bl	8011b50 <ucdr_init_buffer>
 8016b7a:	4638      	mov	r0, r7
 8016b7c:	4903      	ldr	r1, [pc, #12]	@ (8016b8c <uxr_next_input_reliable_buffer_available+0xf0>)
 8016b7e:	4622      	mov	r2, r4
 8016b80:	f7fa ffba 	bl	8011af8 <ucdr_set_on_full_buffer_callback>
 8016b84:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016b88:	2001      	movs	r0, #1
 8016b8a:	e7c8      	b.n	8016b1e <uxr_next_input_reliable_buffer_available+0x82>
 8016b8c:	08016891 	.word	0x08016891

08016b90 <uxr_process_heartbeat>:
 8016b90:	b538      	push	{r3, r4, r5, lr}
 8016b92:	4611      	mov	r1, r2
 8016b94:	4604      	mov	r4, r0
 8016b96:	89c0      	ldrh	r0, [r0, #14]
 8016b98:	4615      	mov	r5, r2
 8016b9a:	f000 fca9 	bl	80174f0 <uxr_seq_num_cmp>
 8016b9e:	2800      	cmp	r0, #0
 8016ba0:	bfb8      	it	lt
 8016ba2:	81e5      	strhlt	r5, [r4, #14]
 8016ba4:	bd38      	pop	{r3, r4, r5, pc}
 8016ba6:	bf00      	nop

08016ba8 <uxr_compute_acknack>:
 8016ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bac:	8903      	ldrh	r3, [r0, #8]
 8016bae:	8985      	ldrh	r5, [r0, #12]
 8016bb0:	4604      	mov	r4, r0
 8016bb2:	460e      	mov	r6, r1
 8016bb4:	b1d3      	cbz	r3, 8016bec <uxr_compute_acknack+0x44>
 8016bb6:	4628      	mov	r0, r5
 8016bb8:	2701      	movs	r7, #1
 8016bba:	e003      	b.n	8016bc4 <uxr_compute_acknack+0x1c>
 8016bbc:	4567      	cmp	r7, ip
 8016bbe:	d215      	bcs.n	8016bec <uxr_compute_acknack+0x44>
 8016bc0:	89a0      	ldrh	r0, [r4, #12]
 8016bc2:	3701      	adds	r7, #1
 8016bc4:	b2b9      	uxth	r1, r7
 8016bc6:	f000 fc8b 	bl	80174e0 <uxr_seq_num_add>
 8016bca:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016bce:	fbb0 f3fc 	udiv	r3, r0, ip
 8016bd2:	fb0c 0313 	mls	r3, ip, r3, r0
 8016bd6:	b29a      	uxth	r2, r3
 8016bd8:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016bdc:	fbb3 f3fc 	udiv	r3, r3, ip
 8016be0:	fb02 f303 	mul.w	r3, r2, r3
 8016be4:	58cb      	ldr	r3, [r1, r3]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d1e8      	bne.n	8016bbc <uxr_compute_acknack+0x14>
 8016bea:	4605      	mov	r5, r0
 8016bec:	8035      	strh	r5, [r6, #0]
 8016bee:	2101      	movs	r1, #1
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	89e7      	ldrh	r7, [r4, #14]
 8016bf4:	f000 fc78 	bl	80174e8 <uxr_seq_num_sub>
 8016bf8:	4601      	mov	r1, r0
 8016bfa:	4638      	mov	r0, r7
 8016bfc:	f000 fc74 	bl	80174e8 <uxr_seq_num_sub>
 8016c00:	4605      	mov	r5, r0
 8016c02:	b318      	cbz	r0, 8016c4c <uxr_compute_acknack+0xa4>
 8016c04:	f04f 0900 	mov.w	r9, #0
 8016c08:	464f      	mov	r7, r9
 8016c0a:	f04f 0801 	mov.w	r8, #1
 8016c0e:	fa1f f189 	uxth.w	r1, r9
 8016c12:	8830      	ldrh	r0, [r6, #0]
 8016c14:	f000 fc64 	bl	80174e0 <uxr_seq_num_add>
 8016c18:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016c1c:	fbb0 f3fc 	udiv	r3, r0, ip
 8016c20:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016c24:	fb03 001c 	mls	r0, r3, ip, r0
 8016c28:	b283      	uxth	r3, r0
 8016c2a:	fbb2 f2fc 	udiv	r2, r2, ip
 8016c2e:	fb02 f303 	mul.w	r3, r2, r3
 8016c32:	fa08 f209 	lsl.w	r2, r8, r9
 8016c36:	58cb      	ldr	r3, [r1, r3]
 8016c38:	f109 0901 	add.w	r9, r9, #1
 8016c3c:	b90b      	cbnz	r3, 8016c42 <uxr_compute_acknack+0x9a>
 8016c3e:	4317      	orrs	r7, r2
 8016c40:	b2bf      	uxth	r7, r7
 8016c42:	454d      	cmp	r5, r9
 8016c44:	d1e3      	bne.n	8016c0e <uxr_compute_acknack+0x66>
 8016c46:	4638      	mov	r0, r7
 8016c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c4c:	4607      	mov	r7, r0
 8016c4e:	4638      	mov	r0, r7
 8016c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016c54 <uxr_init_output_best_effort_stream>:
 8016c54:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8016c58:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016c5c:	6001      	str	r1, [r0, #0]
 8016c5e:	7303      	strb	r3, [r0, #12]
 8016c60:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016c64:	4770      	bx	lr
 8016c66:	bf00      	nop

08016c68 <uxr_reset_output_best_effort_stream>:
 8016c68:	7b02      	ldrb	r2, [r0, #12]
 8016c6a:	6042      	str	r2, [r0, #4]
 8016c6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016c70:	81c3      	strh	r3, [r0, #14]
 8016c72:	4770      	bx	lr

08016c74 <uxr_prepare_best_effort_buffer_to_write>:
 8016c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c76:	4604      	mov	r4, r0
 8016c78:	b083      	sub	sp, #12
 8016c7a:	6840      	ldr	r0, [r0, #4]
 8016c7c:	460d      	mov	r5, r1
 8016c7e:	4616      	mov	r6, r2
 8016c80:	f7fc fb30 	bl	80132e4 <uxr_submessage_padding>
 8016c84:	6863      	ldr	r3, [r4, #4]
 8016c86:	4418      	add	r0, r3
 8016c88:	68a3      	ldr	r3, [r4, #8]
 8016c8a:	1942      	adds	r2, r0, r5
 8016c8c:	4293      	cmp	r3, r2
 8016c8e:	bf2c      	ite	cs
 8016c90:	2701      	movcs	r7, #1
 8016c92:	2700      	movcc	r7, #0
 8016c94:	d202      	bcs.n	8016c9c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016c96:	4638      	mov	r0, r7
 8016c98:	b003      	add	sp, #12
 8016c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c9c:	9000      	str	r0, [sp, #0]
 8016c9e:	6821      	ldr	r1, [r4, #0]
 8016ca0:	4630      	mov	r0, r6
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	f7fa ff42 	bl	8011b2c <ucdr_init_buffer_origin_offset>
 8016ca8:	6861      	ldr	r1, [r4, #4]
 8016caa:	4638      	mov	r0, r7
 8016cac:	4429      	add	r1, r5
 8016cae:	6061      	str	r1, [r4, #4]
 8016cb0:	b003      	add	sp, #12
 8016cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016cb4 <uxr_prepare_best_effort_buffer_to_send>:
 8016cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cb8:	4604      	mov	r4, r0
 8016cba:	461d      	mov	r5, r3
 8016cbc:	6840      	ldr	r0, [r0, #4]
 8016cbe:	7b23      	ldrb	r3, [r4, #12]
 8016cc0:	4298      	cmp	r0, r3
 8016cc2:	bf8c      	ite	hi
 8016cc4:	2601      	movhi	r6, #1
 8016cc6:	2600      	movls	r6, #0
 8016cc8:	d802      	bhi.n	8016cd0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8016cca:	4630      	mov	r0, r6
 8016ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cd0:	4688      	mov	r8, r1
 8016cd2:	89e0      	ldrh	r0, [r4, #14]
 8016cd4:	2101      	movs	r1, #1
 8016cd6:	4617      	mov	r7, r2
 8016cd8:	f000 fc02 	bl	80174e0 <uxr_seq_num_add>
 8016cdc:	6823      	ldr	r3, [r4, #0]
 8016cde:	81e0      	strh	r0, [r4, #14]
 8016ce0:	8028      	strh	r0, [r5, #0]
 8016ce2:	f8c8 3000 	str.w	r3, [r8]
 8016ce6:	6863      	ldr	r3, [r4, #4]
 8016ce8:	603b      	str	r3, [r7, #0]
 8016cea:	7b23      	ldrb	r3, [r4, #12]
 8016cec:	6063      	str	r3, [r4, #4]
 8016cee:	4630      	mov	r0, r6
 8016cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016cf4 <on_full_output_buffer>:
 8016cf4:	b538      	push	{r3, r4, r5, lr}
 8016cf6:	6802      	ldr	r2, [r0, #0]
 8016cf8:	460c      	mov	r4, r1
 8016cfa:	6809      	ldr	r1, [r1, #0]
 8016cfc:	8923      	ldrh	r3, [r4, #8]
 8016cfe:	eba2 0c01 	sub.w	ip, r2, r1
 8016d02:	6862      	ldr	r2, [r4, #4]
 8016d04:	fbb2 f2f3 	udiv	r2, r2, r3
 8016d08:	fbbc fcf2 	udiv	ip, ip, r2
 8016d0c:	f10c 0c01 	add.w	ip, ip, #1
 8016d10:	fa1f fc8c 	uxth.w	ip, ip
 8016d14:	fbbc fef3 	udiv	lr, ip, r3
 8016d18:	fb03 c31e 	mls	r3, r3, lr, ip
 8016d1c:	b29b      	uxth	r3, r3
 8016d1e:	fb02 f303 	mul.w	r3, r2, r3
 8016d22:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016d26:	58ca      	ldr	r2, [r1, r3]
 8016d28:	4463      	add	r3, ip
 8016d2a:	eba2 020c 	sub.w	r2, r2, ip
 8016d2e:	3308      	adds	r3, #8
 8016d30:	4605      	mov	r5, r0
 8016d32:	4419      	add	r1, r3
 8016d34:	3a04      	subs	r2, #4
 8016d36:	6903      	ldr	r3, [r0, #16]
 8016d38:	f7fa ff02 	bl	8011b40 <ucdr_init_buffer_origin>
 8016d3c:	4628      	mov	r0, r5
 8016d3e:	4903      	ldr	r1, [pc, #12]	@ (8016d4c <on_full_output_buffer+0x58>)
 8016d40:	4622      	mov	r2, r4
 8016d42:	f7fa fed9 	bl	8011af8 <ucdr_set_on_full_buffer_callback>
 8016d46:	2000      	movs	r0, #0
 8016d48:	bd38      	pop	{r3, r4, r5, pc}
 8016d4a:	bf00      	nop
 8016d4c:	08016cf5 	.word	0x08016cf5

08016d50 <uxr_init_output_reliable_stream>:
 8016d50:	b410      	push	{r4}
 8016d52:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016d56:	8103      	strh	r3, [r0, #8]
 8016d58:	e9c0 1200 	strd	r1, r2, [r0]
 8016d5c:	f880 c00c 	strb.w	ip, [r0, #12]
 8016d60:	b1d3      	cbz	r3, 8016d98 <uxr_init_output_reliable_stream+0x48>
 8016d62:	f8c1 c000 	str.w	ip, [r1]
 8016d66:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016d6a:	f1bc 0f01 	cmp.w	ip, #1
 8016d6e:	d913      	bls.n	8016d98 <uxr_init_output_reliable_stream+0x48>
 8016d70:	2301      	movs	r3, #1
 8016d72:	fbb3 f1fc 	udiv	r1, r3, ip
 8016d76:	fb0c 3111 	mls	r1, ip, r1, r3
 8016d7a:	b289      	uxth	r1, r1
 8016d7c:	6842      	ldr	r2, [r0, #4]
 8016d7e:	6804      	ldr	r4, [r0, #0]
 8016d80:	fbb2 f2fc 	udiv	r2, r2, ip
 8016d84:	fb01 f202 	mul.w	r2, r1, r2
 8016d88:	7b01      	ldrb	r1, [r0, #12]
 8016d8a:	50a1      	str	r1, [r4, r2]
 8016d8c:	3301      	adds	r3, #1
 8016d8e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016d92:	b29b      	uxth	r3, r3
 8016d94:	459c      	cmp	ip, r3
 8016d96:	d8ec      	bhi.n	8016d72 <uxr_init_output_reliable_stream+0x22>
 8016d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016d9c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016da0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016da4:	4905      	ldr	r1, [pc, #20]	@ (8016dbc <uxr_init_output_reliable_stream+0x6c>)
 8016da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016daa:	f8c0 100e 	str.w	r1, [r0, #14]
 8016dae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016db2:	2300      	movs	r3, #0
 8016db4:	8242      	strh	r2, [r0, #18]
 8016db6:	8403      	strh	r3, [r0, #32]
 8016db8:	4770      	bx	lr
 8016dba:	bf00      	nop
 8016dbc:	ffff0000 	.word	0xffff0000

08016dc0 <uxr_reset_output_reliable_stream>:
 8016dc0:	8901      	ldrh	r1, [r0, #8]
 8016dc2:	b1b1      	cbz	r1, 8016df2 <uxr_reset_output_reliable_stream+0x32>
 8016dc4:	f04f 0c00 	mov.w	ip, #0
 8016dc8:	4663      	mov	r3, ip
 8016dca:	fbb3 f2f1 	udiv	r2, r3, r1
 8016dce:	fb01 3312 	mls	r3, r1, r2, r3
 8016dd2:	b29b      	uxth	r3, r3
 8016dd4:	6842      	ldr	r2, [r0, #4]
 8016dd6:	fbb2 f2f1 	udiv	r2, r2, r1
 8016dda:	6801      	ldr	r1, [r0, #0]
 8016ddc:	fb02 f303 	mul.w	r3, r2, r3
 8016de0:	7b02      	ldrb	r2, [r0, #12]
 8016de2:	50ca      	str	r2, [r1, r3]
 8016de4:	f10c 0c01 	add.w	ip, ip, #1
 8016de8:	8901      	ldrh	r1, [r0, #8]
 8016dea:	fa1f f38c 	uxth.w	r3, ip
 8016dee:	4299      	cmp	r1, r3
 8016df0:	d8eb      	bhi.n	8016dca <uxr_reset_output_reliable_stream+0xa>
 8016df2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016df6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016dfa:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016dfe:	4904      	ldr	r1, [pc, #16]	@ (8016e10 <uxr_reset_output_reliable_stream+0x50>)
 8016e00:	f8c0 100e 	str.w	r1, [r0, #14]
 8016e04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016e08:	2300      	movs	r3, #0
 8016e0a:	8242      	strh	r2, [r0, #18]
 8016e0c:	8403      	strh	r3, [r0, #32]
 8016e0e:	4770      	bx	lr
 8016e10:	ffff0000 	.word	0xffff0000

08016e14 <uxr_prepare_reliable_buffer_to_write>:
 8016e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e18:	4604      	mov	r4, r0
 8016e1a:	b091      	sub	sp, #68	@ 0x44
 8016e1c:	8900      	ldrh	r0, [r0, #8]
 8016e1e:	89e6      	ldrh	r6, [r4, #14]
 8016e20:	6823      	ldr	r3, [r4, #0]
 8016e22:	9204      	str	r2, [sp, #16]
 8016e24:	fbb6 f2f0 	udiv	r2, r6, r0
 8016e28:	fb00 6212 	mls	r2, r0, r2, r6
 8016e2c:	b292      	uxth	r2, r2
 8016e2e:	6865      	ldr	r5, [r4, #4]
 8016e30:	fbb5 f5f0 	udiv	r5, r5, r0
 8016e34:	fb05 3202 	mla	r2, r5, r2, r3
 8016e38:	3204      	adds	r2, #4
 8016e3a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8016e3e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8016e42:	9203      	str	r2, [sp, #12]
 8016e44:	468b      	mov	fp, r1
 8016e46:	1f2f      	subs	r7, r5, #4
 8016e48:	2800      	cmp	r0, #0
 8016e4a:	f000 814c 	beq.w	80170e6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8016e4e:	f04f 0c00 	mov.w	ip, #0
 8016e52:	46e2      	mov	sl, ip
 8016e54:	4661      	mov	r1, ip
 8016e56:	fbb1 f2f0 	udiv	r2, r1, r0
 8016e5a:	fb00 1212 	mls	r2, r0, r2, r1
 8016e5e:	b292      	uxth	r2, r2
 8016e60:	fb05 f202 	mul.w	r2, r5, r2
 8016e64:	f10c 0c01 	add.w	ip, ip, #1
 8016e68:	589a      	ldr	r2, [r3, r2]
 8016e6a:	454a      	cmp	r2, r9
 8016e6c:	bf08      	it	eq
 8016e6e:	f10a 0a01 	addeq.w	sl, sl, #1
 8016e72:	fa1f f18c 	uxth.w	r1, ip
 8016e76:	bf08      	it	eq
 8016e78:	fa1f fa8a 	uxtheq.w	sl, sl
 8016e7c:	4281      	cmp	r1, r0
 8016e7e:	d3ea      	bcc.n	8016e56 <uxr_prepare_reliable_buffer_to_write+0x42>
 8016e80:	4640      	mov	r0, r8
 8016e82:	2104      	movs	r1, #4
 8016e84:	f8cd a014 	str.w	sl, [sp, #20]
 8016e88:	f7fa fe66 	bl	8011b58 <ucdr_alignment>
 8016e8c:	4480      	add	r8, r0
 8016e8e:	eb08 020b 	add.w	r2, r8, fp
 8016e92:	42ba      	cmp	r2, r7
 8016e94:	f240 80cd 	bls.w	8017032 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8016e98:	7b22      	ldrb	r2, [r4, #12]
 8016e9a:	445a      	add	r2, fp
 8016e9c:	42ba      	cmp	r2, r7
 8016e9e:	f240 80b5 	bls.w	801700c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8016ea2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8016ea6:	33fc      	adds	r3, #252	@ 0xfc
 8016ea8:	b2ba      	uxth	r2, r7
 8016eaa:	4413      	add	r3, r2
 8016eac:	b29b      	uxth	r3, r3
 8016eae:	fb0a f903 	mul.w	r9, sl, r3
 8016eb2:	45d9      	cmp	r9, fp
 8016eb4:	9305      	str	r3, [sp, #20]
 8016eb6:	9306      	str	r3, [sp, #24]
 8016eb8:	f0c0 80b7 	bcc.w	801702a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016ebc:	f108 0304 	add.w	r3, r8, #4
 8016ec0:	42bb      	cmp	r3, r7
 8016ec2:	f080 80db 	bcs.w	801707c <uxr_prepare_reliable_buffer_to_write+0x268>
 8016ec6:	f1a2 0904 	sub.w	r9, r2, #4
 8016eca:	eba9 0908 	sub.w	r9, r9, r8
 8016ece:	9b05      	ldr	r3, [sp, #20]
 8016ed0:	fa1f f989 	uxth.w	r9, r9
 8016ed4:	ebab 0b09 	sub.w	fp, fp, r9
 8016ed8:	fbbb f2f3 	udiv	r2, fp, r3
 8016edc:	fb03 b312 	mls	r3, r3, r2, fp
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	f000 80c8 	beq.w	8017076 <uxr_prepare_reliable_buffer_to_write+0x262>
 8016ee6:	3201      	adds	r2, #1
 8016ee8:	b292      	uxth	r2, r2
 8016eea:	9306      	str	r3, [sp, #24]
 8016eec:	4552      	cmp	r2, sl
 8016eee:	f200 809c 	bhi.w	801702a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016ef2:	f10d 0b20 	add.w	fp, sp, #32
 8016ef6:	2a00      	cmp	r2, #0
 8016ef8:	d042      	beq.n	8016f80 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8016efa:	f8cd 801c 	str.w	r8, [sp, #28]
 8016efe:	f04f 0a00 	mov.w	sl, #0
 8016f02:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016f06:	9505      	str	r5, [sp, #20]
 8016f08:	f10d 0b20 	add.w	fp, sp, #32
 8016f0c:	4615      	mov	r5, r2
 8016f0e:	e000      	b.n	8016f12 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016f10:	46c1      	mov	r9, r8
 8016f12:	8920      	ldrh	r0, [r4, #8]
 8016f14:	fbb6 f2f0 	udiv	r2, r6, r0
 8016f18:	fb00 6112 	mls	r1, r0, r2, r6
 8016f1c:	b28a      	uxth	r2, r1
 8016f1e:	6863      	ldr	r3, [r4, #4]
 8016f20:	fbb3 f1f0 	udiv	r1, r3, r0
 8016f24:	6823      	ldr	r3, [r4, #0]
 8016f26:	fb02 f101 	mul.w	r1, r2, r1
 8016f2a:	3104      	adds	r1, #4
 8016f2c:	4419      	add	r1, r3
 8016f2e:	4658      	mov	r0, fp
 8016f30:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016f34:	9200      	str	r2, [sp, #0]
 8016f36:	2300      	movs	r3, #0
 8016f38:	463a      	mov	r2, r7
 8016f3a:	f7fa fdf7 	bl	8011b2c <ucdr_init_buffer_origin_offset>
 8016f3e:	464a      	mov	r2, r9
 8016f40:	2300      	movs	r3, #0
 8016f42:	210d      	movs	r1, #13
 8016f44:	4658      	mov	r0, fp
 8016f46:	f7fc f98d 	bl	8013264 <uxr_buffer_submessage_header>
 8016f4a:	8921      	ldrh	r1, [r4, #8]
 8016f4c:	fbb6 f2f1 	udiv	r2, r6, r1
 8016f50:	fb01 6212 	mls	r2, r1, r2, r6
 8016f54:	b292      	uxth	r2, r2
 8016f56:	6863      	ldr	r3, [r4, #4]
 8016f58:	fbb3 f3f1 	udiv	r3, r3, r1
 8016f5c:	fb02 f303 	mul.w	r3, r2, r3
 8016f60:	6822      	ldr	r2, [r4, #0]
 8016f62:	4630      	mov	r0, r6
 8016f64:	50d7      	str	r7, [r2, r3]
 8016f66:	2101      	movs	r1, #1
 8016f68:	f000 faba 	bl	80174e0 <uxr_seq_num_add>
 8016f6c:	f10a 0a01 	add.w	sl, sl, #1
 8016f70:	fa1f f38a 	uxth.w	r3, sl
 8016f74:	429d      	cmp	r5, r3
 8016f76:	4606      	mov	r6, r0
 8016f78:	d8ca      	bhi.n	8016f10 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8016f7a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016f7e:	9d05      	ldr	r5, [sp, #20]
 8016f80:	8920      	ldrh	r0, [r4, #8]
 8016f82:	fbb6 f3f0 	udiv	r3, r6, r0
 8016f86:	fb00 6313 	mls	r3, r0, r3, r6
 8016f8a:	b299      	uxth	r1, r3
 8016f8c:	6863      	ldr	r3, [r4, #4]
 8016f8e:	fbb3 f3f0 	udiv	r3, r3, r0
 8016f92:	fb01 f303 	mul.w	r3, r1, r3
 8016f96:	6821      	ldr	r1, [r4, #0]
 8016f98:	3304      	adds	r3, #4
 8016f9a:	4419      	add	r1, r3
 8016f9c:	463a      	mov	r2, r7
 8016f9e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016fa2:	9000      	str	r0, [sp, #0]
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	4658      	mov	r0, fp
 8016fa8:	f7fa fdc0 	bl	8011b2c <ucdr_init_buffer_origin_offset>
 8016fac:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016fb0:	4658      	mov	r0, fp
 8016fb2:	fa1f f289 	uxth.w	r2, r9
 8016fb6:	2302      	movs	r3, #2
 8016fb8:	210d      	movs	r1, #13
 8016fba:	f7fc f953 	bl	8013264 <uxr_buffer_submessage_header>
 8016fbe:	9b03      	ldr	r3, [sp, #12]
 8016fc0:	8927      	ldrh	r7, [r4, #8]
 8016fc2:	7b20      	ldrb	r0, [r4, #12]
 8016fc4:	f108 0104 	add.w	r1, r8, #4
 8016fc8:	440b      	add	r3, r1
 8016fca:	4619      	mov	r1, r3
 8016fcc:	fbb6 f3f7 	udiv	r3, r6, r7
 8016fd0:	fb07 6313 	mls	r3, r7, r3, r6
 8016fd4:	f1a5 0208 	sub.w	r2, r5, #8
 8016fd8:	b29d      	uxth	r5, r3
 8016fda:	3004      	adds	r0, #4
 8016fdc:	6863      	ldr	r3, [r4, #4]
 8016fde:	fbb3 f3f7 	udiv	r3, r3, r7
 8016fe2:	fb05 f303 	mul.w	r3, r5, r3
 8016fe6:	6825      	ldr	r5, [r4, #0]
 8016fe8:	4448      	add	r0, r9
 8016fea:	50e8      	str	r0, [r5, r3]
 8016fec:	9d04      	ldr	r5, [sp, #16]
 8016fee:	eba2 0208 	sub.w	r2, r2, r8
 8016ff2:	4628      	mov	r0, r5
 8016ff4:	f7fa fdac 	bl	8011b50 <ucdr_init_buffer>
 8016ff8:	4628      	mov	r0, r5
 8016ffa:	493c      	ldr	r1, [pc, #240]	@ (80170ec <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8016ffc:	4622      	mov	r2, r4
 8016ffe:	f7fa fd7b 	bl	8011af8 <ucdr_set_on_full_buffer_callback>
 8017002:	2001      	movs	r0, #1
 8017004:	81e6      	strh	r6, [r4, #14]
 8017006:	b011      	add	sp, #68	@ 0x44
 8017008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801700c:	2101      	movs	r1, #1
 801700e:	89e0      	ldrh	r0, [r4, #14]
 8017010:	f000 fa66 	bl	80174e0 <uxr_seq_num_add>
 8017014:	8921      	ldrh	r1, [r4, #8]
 8017016:	4605      	mov	r5, r0
 8017018:	8a60      	ldrh	r0, [r4, #18]
 801701a:	f000 fa61 	bl	80174e0 <uxr_seq_num_add>
 801701e:	4601      	mov	r1, r0
 8017020:	4628      	mov	r0, r5
 8017022:	f000 fa65 	bl	80174f0 <uxr_seq_num_cmp>
 8017026:	2800      	cmp	r0, #0
 8017028:	dd42      	ble.n	80170b0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801702a:	2000      	movs	r0, #0
 801702c:	b011      	add	sp, #68	@ 0x44
 801702e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017032:	8921      	ldrh	r1, [r4, #8]
 8017034:	8a60      	ldrh	r0, [r4, #18]
 8017036:	9205      	str	r2, [sp, #20]
 8017038:	f000 fa52 	bl	80174e0 <uxr_seq_num_add>
 801703c:	4601      	mov	r1, r0
 801703e:	4630      	mov	r0, r6
 8017040:	f000 fa56 	bl	80174f0 <uxr_seq_num_cmp>
 8017044:	2800      	cmp	r0, #0
 8017046:	9a05      	ldr	r2, [sp, #20]
 8017048:	dcef      	bgt.n	801702a <uxr_prepare_reliable_buffer_to_write+0x216>
 801704a:	8927      	ldrh	r7, [r4, #8]
 801704c:	fbb6 f3f7 	udiv	r3, r6, r7
 8017050:	fb07 6313 	mls	r3, r7, r3, r6
 8017054:	b29d      	uxth	r5, r3
 8017056:	6863      	ldr	r3, [r4, #4]
 8017058:	6824      	ldr	r4, [r4, #0]
 801705a:	fbb3 f3f7 	udiv	r3, r3, r7
 801705e:	fb05 f303 	mul.w	r3, r5, r3
 8017062:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8017066:	50e2      	str	r2, [r4, r3]
 8017068:	2300      	movs	r3, #0
 801706a:	f8cd 8000 	str.w	r8, [sp]
 801706e:	f7fa fd5d 	bl	8011b2c <ucdr_init_buffer_origin_offset>
 8017072:	2001      	movs	r0, #1
 8017074:	e7da      	b.n	801702c <uxr_prepare_reliable_buffer_to_write+0x218>
 8017076:	b293      	uxth	r3, r2
 8017078:	461a      	mov	r2, r3
 801707a:	e737      	b.n	8016eec <uxr_prepare_reliable_buffer_to_write+0xd8>
 801707c:	4630      	mov	r0, r6
 801707e:	2101      	movs	r1, #1
 8017080:	9207      	str	r2, [sp, #28]
 8017082:	f000 fa2d 	bl	80174e0 <uxr_seq_num_add>
 8017086:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801708a:	fbb0 f1fc 	udiv	r1, r0, ip
 801708e:	fb0c 0111 	mls	r1, ip, r1, r0
 8017092:	4606      	mov	r6, r0
 8017094:	b288      	uxth	r0, r1
 8017096:	6863      	ldr	r3, [r4, #4]
 8017098:	fbb3 f1fc 	udiv	r1, r3, ip
 801709c:	6823      	ldr	r3, [r4, #0]
 801709e:	9a07      	ldr	r2, [sp, #28]
 80170a0:	fb00 f101 	mul.w	r1, r0, r1
 80170a4:	3104      	adds	r1, #4
 80170a6:	440b      	add	r3, r1
 80170a8:	9303      	str	r3, [sp, #12]
 80170aa:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80170ae:	e70a      	b.n	8016ec6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80170b0:	8921      	ldrh	r1, [r4, #8]
 80170b2:	fbb5 f3f1 	udiv	r3, r5, r1
 80170b6:	fb01 5313 	mls	r3, r1, r3, r5
 80170ba:	b29a      	uxth	r2, r3
 80170bc:	6863      	ldr	r3, [r4, #4]
 80170be:	fbb3 f3f1 	udiv	r3, r3, r1
 80170c2:	6821      	ldr	r1, [r4, #0]
 80170c4:	9804      	ldr	r0, [sp, #16]
 80170c6:	fb02 f303 	mul.w	r3, r2, r3
 80170ca:	3304      	adds	r3, #4
 80170cc:	7b22      	ldrb	r2, [r4, #12]
 80170ce:	4419      	add	r1, r3
 80170d0:	445a      	add	r2, fp
 80170d2:	f841 2c04 	str.w	r2, [r1, #-4]
 80170d6:	7b23      	ldrb	r3, [r4, #12]
 80170d8:	9300      	str	r3, [sp, #0]
 80170da:	2300      	movs	r3, #0
 80170dc:	f7fa fd26 	bl	8011b2c <ucdr_init_buffer_origin_offset>
 80170e0:	81e5      	strh	r5, [r4, #14]
 80170e2:	2001      	movs	r0, #1
 80170e4:	e7a2      	b.n	801702c <uxr_prepare_reliable_buffer_to_write+0x218>
 80170e6:	4682      	mov	sl, r0
 80170e8:	e6ca      	b.n	8016e80 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80170ea:	bf00      	nop
 80170ec:	08016cf5 	.word	0x08016cf5

080170f0 <uxr_prepare_next_reliable_buffer_to_send>:
 80170f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170f2:	4604      	mov	r4, r0
 80170f4:	460f      	mov	r7, r1
 80170f6:	8a00      	ldrh	r0, [r0, #16]
 80170f8:	2101      	movs	r1, #1
 80170fa:	4616      	mov	r6, r2
 80170fc:	461d      	mov	r5, r3
 80170fe:	f000 f9ef 	bl	80174e0 <uxr_seq_num_add>
 8017102:	8028      	strh	r0, [r5, #0]
 8017104:	8922      	ldrh	r2, [r4, #8]
 8017106:	fbb0 f3f2 	udiv	r3, r0, r2
 801710a:	fb02 0c13 	mls	ip, r2, r3, r0
 801710e:	fa1f fc8c 	uxth.w	ip, ip
 8017112:	6863      	ldr	r3, [r4, #4]
 8017114:	fbb3 f3f2 	udiv	r3, r3, r2
 8017118:	fb0c fc03 	mul.w	ip, ip, r3
 801711c:	6823      	ldr	r3, [r4, #0]
 801711e:	89e1      	ldrh	r1, [r4, #14]
 8017120:	f10c 0c04 	add.w	ip, ip, #4
 8017124:	4463      	add	r3, ip
 8017126:	603b      	str	r3, [r7, #0]
 8017128:	6823      	ldr	r3, [r4, #0]
 801712a:	449c      	add	ip, r3
 801712c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8017130:	6033      	str	r3, [r6, #0]
 8017132:	f000 f9dd 	bl	80174f0 <uxr_seq_num_cmp>
 8017136:	2800      	cmp	r0, #0
 8017138:	dd01      	ble.n	801713e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801713a:	2000      	movs	r0, #0
 801713c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801713e:	7b23      	ldrb	r3, [r4, #12]
 8017140:	6832      	ldr	r2, [r6, #0]
 8017142:	429a      	cmp	r2, r3
 8017144:	d9f9      	bls.n	801713a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017146:	8a61      	ldrh	r1, [r4, #18]
 8017148:	8a20      	ldrh	r0, [r4, #16]
 801714a:	f000 f9cd 	bl	80174e8 <uxr_seq_num_sub>
 801714e:	8923      	ldrh	r3, [r4, #8]
 8017150:	4283      	cmp	r3, r0
 8017152:	d0f2      	beq.n	801713a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017154:	8828      	ldrh	r0, [r5, #0]
 8017156:	89e3      	ldrh	r3, [r4, #14]
 8017158:	8220      	strh	r0, [r4, #16]
 801715a:	4298      	cmp	r0, r3
 801715c:	d001      	beq.n	8017162 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801715e:	2001      	movs	r0, #1
 8017160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017162:	2101      	movs	r1, #1
 8017164:	f000 f9bc 	bl	80174e0 <uxr_seq_num_add>
 8017168:	81e0      	strh	r0, [r4, #14]
 801716a:	2001      	movs	r0, #1
 801716c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801716e:	bf00      	nop

08017170 <uxr_update_output_stream_heartbeat_timestamp>:
 8017170:	b570      	push	{r4, r5, r6, lr}
 8017172:	8a01      	ldrh	r1, [r0, #16]
 8017174:	4604      	mov	r4, r0
 8017176:	8a40      	ldrh	r0, [r0, #18]
 8017178:	4615      	mov	r5, r2
 801717a:	461e      	mov	r6, r3
 801717c:	f000 f9b8 	bl	80174f0 <uxr_seq_num_cmp>
 8017180:	2800      	cmp	r0, #0
 8017182:	db07      	blt.n	8017194 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8017184:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017188:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801718c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8017190:	2000      	movs	r0, #0
 8017192:	bd70      	pop	{r4, r5, r6, pc}
 8017194:	f894 0020 	ldrb.w	r0, [r4, #32]
 8017198:	b940      	cbnz	r0, 80171ac <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801719a:	2301      	movs	r3, #1
 801719c:	f884 3020 	strb.w	r3, [r4, #32]
 80171a0:	3564      	adds	r5, #100	@ 0x64
 80171a2:	f146 0600 	adc.w	r6, r6, #0
 80171a6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80171aa:	bd70      	pop	{r4, r5, r6, pc}
 80171ac:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80171b0:	4295      	cmp	r5, r2
 80171b2:	eb76 0303 	sbcs.w	r3, r6, r3
 80171b6:	bfa5      	ittet	ge
 80171b8:	3001      	addge	r0, #1
 80171ba:	f884 0020 	strbge.w	r0, [r4, #32]
 80171be:	2000      	movlt	r0, #0
 80171c0:	2001      	movge	r0, #1
 80171c2:	e7ed      	b.n	80171a0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080171c4 <uxr_begin_output_nack_buffer_it>:
 80171c4:	8a40      	ldrh	r0, [r0, #18]
 80171c6:	4770      	bx	lr

080171c8 <uxr_next_reliable_nack_buffer_to_send>:
 80171c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171cc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80171d0:	b082      	sub	sp, #8
 80171d2:	f1b8 0f00 	cmp.w	r8, #0
 80171d6:	d011      	beq.n	80171fc <uxr_next_reliable_nack_buffer_to_send+0x34>
 80171d8:	4604      	mov	r4, r0
 80171da:	8818      	ldrh	r0, [r3, #0]
 80171dc:	460e      	mov	r6, r1
 80171de:	4617      	mov	r7, r2
 80171e0:	461d      	mov	r5, r3
 80171e2:	2101      	movs	r1, #1
 80171e4:	f000 f97c 	bl	80174e0 <uxr_seq_num_add>
 80171e8:	8028      	strh	r0, [r5, #0]
 80171ea:	8a21      	ldrh	r1, [r4, #16]
 80171ec:	f000 f980 	bl	80174f0 <uxr_seq_num_cmp>
 80171f0:	2800      	cmp	r0, #0
 80171f2:	dd07      	ble.n	8017204 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80171f4:	f04f 0800 	mov.w	r8, #0
 80171f8:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80171fc:	4640      	mov	r0, r8
 80171fe:	b002      	add	sp, #8
 8017200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017204:	8921      	ldrh	r1, [r4, #8]
 8017206:	8828      	ldrh	r0, [r5, #0]
 8017208:	6823      	ldr	r3, [r4, #0]
 801720a:	fbb0 f2f1 	udiv	r2, r0, r1
 801720e:	fb01 0c12 	mls	ip, r1, r2, r0
 8017212:	fa1f f28c 	uxth.w	r2, ip
 8017216:	9301      	str	r3, [sp, #4]
 8017218:	6863      	ldr	r3, [r4, #4]
 801721a:	fbb3 fcf1 	udiv	ip, r3, r1
 801721e:	9b01      	ldr	r3, [sp, #4]
 8017220:	fb02 fc0c 	mul.w	ip, r2, ip
 8017224:	f10c 0c04 	add.w	ip, ip, #4
 8017228:	4463      	add	r3, ip
 801722a:	6033      	str	r3, [r6, #0]
 801722c:	6823      	ldr	r3, [r4, #0]
 801722e:	4463      	add	r3, ip
 8017230:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8017234:	603b      	str	r3, [r7, #0]
 8017236:	7b22      	ldrb	r2, [r4, #12]
 8017238:	429a      	cmp	r2, r3
 801723a:	d0d2      	beq.n	80171e2 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801723c:	4640      	mov	r0, r8
 801723e:	b002      	add	sp, #8
 8017240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017244 <uxr_process_acknack>:
 8017244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017246:	4604      	mov	r4, r0
 8017248:	460e      	mov	r6, r1
 801724a:	4610      	mov	r0, r2
 801724c:	2101      	movs	r1, #1
 801724e:	f000 f94b 	bl	80174e8 <uxr_seq_num_sub>
 8017252:	8a61      	ldrh	r1, [r4, #18]
 8017254:	f000 f948 	bl	80174e8 <uxr_seq_num_sub>
 8017258:	b1c0      	cbz	r0, 801728c <uxr_process_acknack+0x48>
 801725a:	4605      	mov	r5, r0
 801725c:	2700      	movs	r7, #0
 801725e:	2101      	movs	r1, #1
 8017260:	8a60      	ldrh	r0, [r4, #18]
 8017262:	f000 f93d 	bl	80174e0 <uxr_seq_num_add>
 8017266:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801726a:	fbb0 f1fc 	udiv	r1, r0, ip
 801726e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017272:	fb0c 0111 	mls	r1, ip, r1, r0
 8017276:	b289      	uxth	r1, r1
 8017278:	3701      	adds	r7, #1
 801727a:	fbb3 f3fc 	udiv	r3, r3, ip
 801727e:	fb01 f303 	mul.w	r3, r1, r3
 8017282:	42bd      	cmp	r5, r7
 8017284:	7b21      	ldrb	r1, [r4, #12]
 8017286:	8260      	strh	r0, [r4, #18]
 8017288:	50d1      	str	r1, [r2, r3]
 801728a:	d1e8      	bne.n	801725e <uxr_process_acknack+0x1a>
 801728c:	3e00      	subs	r6, #0
 801728e:	f04f 0300 	mov.w	r3, #0
 8017292:	bf18      	it	ne
 8017294:	2601      	movne	r6, #1
 8017296:	f884 3020 	strb.w	r3, [r4, #32]
 801729a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801729e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080172a0 <uxr_is_output_up_to_date>:
 80172a0:	8a01      	ldrh	r1, [r0, #16]
 80172a2:	8a40      	ldrh	r0, [r0, #18]
 80172a4:	b508      	push	{r3, lr}
 80172a6:	f000 f923 	bl	80174f0 <uxr_seq_num_cmp>
 80172aa:	fab0 f080 	clz	r0, r0
 80172ae:	0940      	lsrs	r0, r0, #5
 80172b0:	bd08      	pop	{r3, pc}
 80172b2:	bf00      	nop

080172b4 <get_available_free_slots>:
 80172b4:	8902      	ldrh	r2, [r0, #8]
 80172b6:	b1da      	cbz	r2, 80172f0 <get_available_free_slots+0x3c>
 80172b8:	b530      	push	{r4, r5, lr}
 80172ba:	2100      	movs	r1, #0
 80172bc:	6843      	ldr	r3, [r0, #4]
 80172be:	6805      	ldr	r5, [r0, #0]
 80172c0:	7b04      	ldrb	r4, [r0, #12]
 80172c2:	fbb3 fef2 	udiv	lr, r3, r2
 80172c6:	4608      	mov	r0, r1
 80172c8:	460b      	mov	r3, r1
 80172ca:	fbb3 fcf2 	udiv	ip, r3, r2
 80172ce:	fb02 331c 	mls	r3, r2, ip, r3
 80172d2:	b29b      	uxth	r3, r3
 80172d4:	fb0e f303 	mul.w	r3, lr, r3
 80172d8:	3101      	adds	r1, #1
 80172da:	f855 c003 	ldr.w	ip, [r5, r3]
 80172de:	4564      	cmp	r4, ip
 80172e0:	bf08      	it	eq
 80172e2:	3001      	addeq	r0, #1
 80172e4:	b28b      	uxth	r3, r1
 80172e6:	bf08      	it	eq
 80172e8:	b280      	uxtheq	r0, r0
 80172ea:	4293      	cmp	r3, r2
 80172ec:	d3ed      	bcc.n	80172ca <get_available_free_slots+0x16>
 80172ee:	bd30      	pop	{r4, r5, pc}
 80172f0:	4610      	mov	r0, r2
 80172f2:	4770      	bx	lr

080172f4 <uxr_buffer_cancel_data>:
 80172f4:	b510      	push	{r4, lr}
 80172f6:	b094      	sub	sp, #80	@ 0x50
 80172f8:	2300      	movs	r3, #0
 80172fa:	9202      	str	r2, [sp, #8]
 80172fc:	9205      	str	r2, [sp, #20]
 80172fe:	9301      	str	r3, [sp, #4]
 8017300:	2201      	movs	r2, #1
 8017302:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017306:	f88d 301e 	strb.w	r3, [sp, #30]
 801730a:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801730e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8017312:	2308      	movs	r3, #8
 8017314:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8017318:	9300      	str	r3, [sp, #0]
 801731a:	2210      	movs	r2, #16
 801731c:	ab0c      	add	r3, sp, #48	@ 0x30
 801731e:	4604      	mov	r4, r0
 8017320:	9103      	str	r1, [sp, #12]
 8017322:	f7fb fd01 	bl	8012d28 <uxr_prepare_stream_to_write_submessage>
 8017326:	b918      	cbnz	r0, 8017330 <uxr_buffer_cancel_data+0x3c>
 8017328:	4604      	mov	r4, r0
 801732a:	4620      	mov	r0, r4
 801732c:	b014      	add	sp, #80	@ 0x50
 801732e:	bd10      	pop	{r4, pc}
 8017330:	9905      	ldr	r1, [sp, #20]
 8017332:	aa06      	add	r2, sp, #24
 8017334:	4620      	mov	r0, r4
 8017336:	f7fb fe2d 	bl	8012f94 <uxr_init_base_object_request>
 801733a:	a906      	add	r1, sp, #24
 801733c:	4604      	mov	r4, r0
 801733e:	a80c      	add	r0, sp, #48	@ 0x30
 8017340:	f7fd f83c 	bl	80143bc <uxr_serialize_READ_DATA_Payload>
 8017344:	4620      	mov	r0, r4
 8017346:	b014      	add	sp, #80	@ 0x50
 8017348:	bd10      	pop	{r4, pc}
 801734a:	bf00      	nop

0801734c <read_submessage_format>:
 801734c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017350:	b095      	sub	sp, #84	@ 0x54
 8017352:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8017356:	b113      	cbz	r3, 801735e <read_submessage_format+0x12>
 8017358:	b015      	add	sp, #84	@ 0x54
 801735a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801735e:	460c      	mov	r4, r1
 8017360:	4615      	mov	r5, r2
 8017362:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8017366:	4607      	mov	r7, r0
 8017368:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801736a:	9004      	str	r0, [sp, #16]
 801736c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801736e:	9005      	str	r0, [sp, #20]
 8017370:	1a52      	subs	r2, r2, r1
 8017372:	a80c      	add	r0, sp, #48	@ 0x30
 8017374:	4699      	mov	r9, r3
 8017376:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801737a:	f7fa fbe9 	bl	8011b50 <ucdr_init_buffer>
 801737e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017382:	a80c      	add	r0, sp, #48	@ 0x30
 8017384:	f7fa fbb8 	bl	8011af8 <ucdr_set_on_full_buffer_callback>
 8017388:	69e2      	ldr	r2, [r4, #28]
 801738a:	b19a      	cbz	r2, 80173b4 <read_submessage_format+0x68>
 801738c:	f1b8 0f07 	cmp.w	r8, #7
 8017390:	f882 9014 	strb.w	r9, [r2, #20]
 8017394:	d040      	beq.n	8017418 <read_submessage_format+0xcc>
 8017396:	f1b8 0f08 	cmp.w	r8, #8
 801739a:	d02e      	beq.n	80173fa <read_submessage_format+0xae>
 801739c:	f1b8 0f06 	cmp.w	r8, #6
 80173a0:	d011      	beq.n	80173c6 <read_submessage_format+0x7a>
 80173a2:	2301      	movs	r3, #1
 80173a4:	7513      	strb	r3, [r2, #20]
 80173a6:	4629      	mov	r1, r5
 80173a8:	4620      	mov	r0, r4
 80173aa:	f7fa fc21 	bl	8011bf0 <ucdr_advance_buffer>
 80173ae:	b015      	add	sp, #84	@ 0x54
 80173b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173b4:	f1b8 0f07 	cmp.w	r8, #7
 80173b8:	d02e      	beq.n	8017418 <read_submessage_format+0xcc>
 80173ba:	f1b8 0f08 	cmp.w	r8, #8
 80173be:	d01c      	beq.n	80173fa <read_submessage_format+0xae>
 80173c0:	f1b8 0f06 	cmp.w	r8, #6
 80173c4:	d1ef      	bne.n	80173a6 <read_submessage_format+0x5a>
 80173c6:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80173ca:	f1b8 0f00 	cmp.w	r8, #0
 80173ce:	d011      	beq.n	80173f4 <read_submessage_format+0xa8>
 80173d0:	ab0c      	add	r3, sp, #48	@ 0x30
 80173d2:	e9cd 3500 	strd	r3, r5, [sp]
 80173d6:	2306      	movs	r3, #6
 80173d8:	f88d 3016 	strb.w	r3, [sp, #22]
 80173dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80173e0:	9302      	str	r3, [sp, #8]
 80173e2:	4632      	mov	r2, r6
 80173e4:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80173e8:	4638      	mov	r0, r7
 80173ea:	47c0      	blx	r8
 80173ec:	2301      	movs	r3, #1
 80173ee:	69e2      	ldr	r2, [r4, #28]
 80173f0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80173f4:	2a00      	cmp	r2, #0
 80173f6:	d1d4      	bne.n	80173a2 <read_submessage_format+0x56>
 80173f8:	e7d5      	b.n	80173a6 <read_submessage_format+0x5a>
 80173fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d0f8      	beq.n	80173f4 <read_submessage_format+0xa8>
 8017402:	a906      	add	r1, sp, #24
 8017404:	a80c      	add	r0, sp, #48	@ 0x30
 8017406:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801740a:	f7fd f877 	bl	80144fc <uxr_deserialize_SampleIdentity>
 801740e:	b9a0      	cbnz	r0, 801743a <read_submessage_format+0xee>
 8017410:	69e2      	ldr	r2, [r4, #28]
 8017412:	2a00      	cmp	r2, #0
 8017414:	d1c5      	bne.n	80173a2 <read_submessage_format+0x56>
 8017416:	e7c6      	b.n	80173a6 <read_submessage_format+0x5a>
 8017418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801741c:	b13b      	cbz	r3, 801742e <read_submessage_format+0xe2>
 801741e:	a906      	add	r1, sp, #24
 8017420:	a80c      	add	r0, sp, #48	@ 0x30
 8017422:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8017426:	f7fc fd63 	bl	8013ef0 <uxr_deserialize_BaseObjectRequest>
 801742a:	bb60      	cbnz	r0, 8017486 <read_submessage_format+0x13a>
 801742c:	69e2      	ldr	r2, [r4, #28]
 801742e:	68a3      	ldr	r3, [r4, #8]
 8017430:	442b      	add	r3, r5
 8017432:	60a3      	str	r3, [r4, #8]
 8017434:	2a00      	cmp	r2, #0
 8017436:	d1b4      	bne.n	80173a2 <read_submessage_format+0x56>
 8017438:	e7b5      	b.n	80173a6 <read_submessage_format+0x5a>
 801743a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801743e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017440:	1a52      	subs	r2, r2, r1
 8017442:	eba8 0803 	sub.w	r8, r8, r3
 8017446:	a80c      	add	r0, sp, #48	@ 0x30
 8017448:	f7fa fb82 	bl	8011b50 <ucdr_init_buffer>
 801744c:	44a8      	add	r8, r5
 801744e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017452:	a80c      	add	r0, sp, #48	@ 0x30
 8017454:	f7fa fb50 	bl	8011af8 <ucdr_set_on_full_buffer_callback>
 8017458:	fa1f f888 	uxth.w	r8, r8
 801745c:	ab0c      	add	r3, sp, #48	@ 0x30
 801745e:	9300      	str	r3, [sp, #0]
 8017460:	f8cd 8004 	str.w	r8, [sp, #4]
 8017464:	2108      	movs	r1, #8
 8017466:	f88d 1016 	strb.w	r1, [sp, #22]
 801746a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801746e:	9102      	str	r1, [sp, #8]
 8017470:	ab06      	add	r3, sp, #24
 8017472:	4632      	mov	r2, r6
 8017474:	9905      	ldr	r1, [sp, #20]
 8017476:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801747a:	4638      	mov	r0, r7
 801747c:	47b0      	blx	r6
 801747e:	2301      	movs	r3, #1
 8017480:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8017484:	e7c4      	b.n	8017410 <read_submessage_format+0xc4>
 8017486:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801748a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801748c:	1a52      	subs	r2, r2, r1
 801748e:	a80c      	add	r0, sp, #48	@ 0x30
 8017490:	eba8 0803 	sub.w	r8, r8, r3
 8017494:	f7fa fb5c 	bl	8011b50 <ucdr_init_buffer>
 8017498:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801749c:	a80c      	add	r0, sp, #48	@ 0x30
 801749e:	f7fa fb2b 	bl	8011af8 <ucdr_set_on_full_buffer_callback>
 80174a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80174a4:	9300      	str	r3, [sp, #0]
 80174a6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80174aa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80174ae:	44a8      	add	r8, r5
 80174b0:	fa1f f888 	uxth.w	r8, r8
 80174b4:	f8cd 8004 	str.w	r8, [sp, #4]
 80174b8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80174bc:	2107      	movs	r1, #7
 80174be:	f88d 1016 	strb.w	r1, [sp, #22]
 80174c2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80174c6:	9102      	str	r1, [sp, #8]
 80174c8:	4632      	mov	r2, r6
 80174ca:	b29b      	uxth	r3, r3
 80174cc:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80174d0:	9905      	ldr	r1, [sp, #20]
 80174d2:	4638      	mov	r0, r7
 80174d4:	47b0      	blx	r6
 80174d6:	2301      	movs	r3, #1
 80174d8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80174dc:	e7a6      	b.n	801742c <read_submessage_format+0xe0>
 80174de:	bf00      	nop

080174e0 <uxr_seq_num_add>:
 80174e0:	4408      	add	r0, r1
 80174e2:	b280      	uxth	r0, r0
 80174e4:	4770      	bx	lr
 80174e6:	bf00      	nop

080174e8 <uxr_seq_num_sub>:
 80174e8:	1a40      	subs	r0, r0, r1
 80174ea:	b280      	uxth	r0, r0
 80174ec:	4770      	bx	lr
 80174ee:	bf00      	nop

080174f0 <uxr_seq_num_cmp>:
 80174f0:	4288      	cmp	r0, r1
 80174f2:	d011      	beq.n	8017518 <uxr_seq_num_cmp+0x28>
 80174f4:	d309      	bcc.n	801750a <uxr_seq_num_cmp+0x1a>
 80174f6:	4288      	cmp	r0, r1
 80174f8:	d910      	bls.n	801751c <uxr_seq_num_cmp+0x2c>
 80174fa:	1a40      	subs	r0, r0, r1
 80174fc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8017500:	bfd4      	ite	le
 8017502:	2001      	movle	r0, #1
 8017504:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8017508:	4770      	bx	lr
 801750a:	1a0b      	subs	r3, r1, r0
 801750c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017510:	daf1      	bge.n	80174f6 <uxr_seq_num_cmp+0x6>
 8017512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017516:	4770      	bx	lr
 8017518:	2000      	movs	r0, #0
 801751a:	4770      	bx	lr
 801751c:	2001      	movs	r0, #1
 801751e:	4770      	bx	lr

08017520 <uxr_init_framing_io>:
 8017520:	2300      	movs	r3, #0
 8017522:	7041      	strb	r1, [r0, #1]
 8017524:	7003      	strb	r3, [r0, #0]
 8017526:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8017528:	4770      	bx	lr
 801752a:	bf00      	nop

0801752c <uxr_write_framed_msg>:
 801752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017530:	4617      	mov	r7, r2
 8017532:	7842      	ldrb	r2, [r0, #1]
 8017534:	b083      	sub	sp, #12
 8017536:	460e      	mov	r6, r1
 8017538:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801753c:	469a      	mov	sl, r3
 801753e:	2901      	cmp	r1, #1
 8017540:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8017544:	4604      	mov	r4, r0
 8017546:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801754a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801754e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8017552:	f240 8137 	bls.w	80177c4 <uxr_write_framed_msg+0x298>
 8017556:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801755a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801755e:	2901      	cmp	r1, #1
 8017560:	f04f 0202 	mov.w	r2, #2
 8017564:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017568:	f240 808f 	bls.w	801768a <uxr_write_framed_msg+0x15e>
 801756c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801756e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8017572:	b2dd      	uxtb	r5, r3
 8017574:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017578:	2203      	movs	r2, #3
 801757a:	2901      	cmp	r1, #1
 801757c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017580:	f240 809a 	bls.w	80176b8 <uxr_write_framed_msg+0x18c>
 8017584:	18a1      	adds	r1, r4, r2
 8017586:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017588:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801758c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8017590:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8017594:	3201      	adds	r2, #1
 8017596:	2801      	cmp	r0, #1
 8017598:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801759c:	f240 80a0 	bls.w	80176e0 <uxr_write_framed_msg+0x1b4>
 80175a0:	18a0      	adds	r0, r4, r2
 80175a2:	3201      	adds	r2, #1
 80175a4:	b2d2      	uxtb	r2, r2
 80175a6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80175aa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	f000 80a9 	beq.w	8017706 <uxr_write_framed_msg+0x1da>
 80175b4:	f04f 0900 	mov.w	r9, #0
 80175b8:	46c8      	mov	r8, r9
 80175ba:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80175be:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80175c2:	2901      	cmp	r1, #1
 80175c4:	f240 80c3 	bls.w	801774e <uxr_write_framed_msg+0x222>
 80175c8:	2a29      	cmp	r2, #41	@ 0x29
 80175ca:	f200 809f 	bhi.w	801770c <uxr_write_framed_msg+0x1e0>
 80175ce:	18a1      	adds	r1, r4, r2
 80175d0:	3201      	adds	r2, #1
 80175d2:	b2d2      	uxtb	r2, r2
 80175d4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80175d8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80175dc:	ea89 0303 	eor.w	r3, r9, r3
 80175e0:	498c      	ldr	r1, [pc, #560]	@ (8017814 <uxr_write_framed_msg+0x2e8>)
 80175e2:	b2db      	uxtb	r3, r3
 80175e4:	f108 0801 	add.w	r8, r8, #1
 80175e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80175ec:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80175f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80175f2:	4543      	cmp	r3, r8
 80175f4:	d8e1      	bhi.n	80175ba <uxr_write_framed_msg+0x8e>
 80175f6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80175fa:	fa5f f889 	uxtb.w	r8, r9
 80175fe:	9301      	str	r3, [sp, #4]
 8017600:	f04f 0900 	mov.w	r9, #0
 8017604:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8017608:	fa5f f18a 	uxtb.w	r1, sl
 801760c:	2901      	cmp	r1, #1
 801760e:	d921      	bls.n	8017654 <uxr_write_framed_msg+0x128>
 8017610:	2a29      	cmp	r2, #41	@ 0x29
 8017612:	f240 80af 	bls.w	8017774 <uxr_write_framed_msg+0x248>
 8017616:	2500      	movs	r5, #0
 8017618:	e000      	b.n	801761c <uxr_write_framed_msg+0xf0>
 801761a:	b160      	cbz	r0, 8017636 <uxr_write_framed_msg+0x10a>
 801761c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017620:	1b52      	subs	r2, r2, r5
 8017622:	465b      	mov	r3, fp
 8017624:	4421      	add	r1, r4
 8017626:	4638      	mov	r0, r7
 8017628:	47b0      	blx	r6
 801762a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801762e:	4405      	add	r5, r0
 8017630:	4295      	cmp	r5, r2
 8017632:	d3f2      	bcc.n	801761a <uxr_write_framed_msg+0xee>
 8017634:	d003      	beq.n	801763e <uxr_write_framed_msg+0x112>
 8017636:	2000      	movs	r0, #0
 8017638:	b003      	add	sp, #12
 801763a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801763e:	fa5f f18a 	uxtb.w	r1, sl
 8017642:	f04f 0300 	mov.w	r3, #0
 8017646:	2901      	cmp	r1, #1
 8017648:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801764c:	f04f 0200 	mov.w	r2, #0
 8017650:	f200 8090 	bhi.w	8017774 <uxr_write_framed_msg+0x248>
 8017654:	1c51      	adds	r1, r2, #1
 8017656:	b2c9      	uxtb	r1, r1
 8017658:	2929      	cmp	r1, #41	@ 0x29
 801765a:	d8dc      	bhi.n	8017616 <uxr_write_framed_msg+0xea>
 801765c:	18a5      	adds	r5, r4, r2
 801765e:	4421      	add	r1, r4
 8017660:	3202      	adds	r2, #2
 8017662:	f088 0820 	eor.w	r8, r8, #32
 8017666:	4648      	mov	r0, r9
 8017668:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801766c:	b2d2      	uxtb	r2, r2
 801766e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8017672:	f04f 0901 	mov.w	r9, #1
 8017676:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801767a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801767e:	2800      	cmp	r0, #0
 8017680:	f040 8085 	bne.w	801778e <uxr_write_framed_msg+0x262>
 8017684:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017688:	e7bc      	b.n	8017604 <uxr_write_framed_msg+0xd8>
 801768a:	4611      	mov	r1, r2
 801768c:	f04f 0c03 	mov.w	ip, #3
 8017690:	2204      	movs	r2, #4
 8017692:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017694:	4421      	add	r1, r4
 8017696:	b2dd      	uxtb	r5, r3
 8017698:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801769c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80176a0:	44a4      	add	ip, r4
 80176a2:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80176a6:	f080 0020 	eor.w	r0, r0, #32
 80176aa:	2901      	cmp	r1, #1
 80176ac:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80176b0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80176b4:	f63f af66 	bhi.w	8017584 <uxr_write_framed_msg+0x58>
 80176b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80176ba:	18a0      	adds	r0, r4, r2
 80176bc:	f085 0520 	eor.w	r5, r5, #32
 80176c0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80176c4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80176c8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80176cc:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80176d0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80176d4:	3202      	adds	r2, #2
 80176d6:	2801      	cmp	r0, #1
 80176d8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80176dc:	f63f af60 	bhi.w	80175a0 <uxr_write_framed_msg+0x74>
 80176e0:	1c50      	adds	r0, r2, #1
 80176e2:	18a5      	adds	r5, r4, r2
 80176e4:	fa54 f080 	uxtab	r0, r4, r0
 80176e8:	3202      	adds	r2, #2
 80176ea:	f081 0120 	eor.w	r1, r1, #32
 80176ee:	b2d2      	uxtb	r2, r2
 80176f0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80176f4:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 80176f8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80176fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017700:	2b00      	cmp	r3, #0
 8017702:	f47f af57 	bne.w	80175b4 <uxr_write_framed_msg+0x88>
 8017706:	9301      	str	r3, [sp, #4]
 8017708:	4698      	mov	r8, r3
 801770a:	e779      	b.n	8017600 <uxr_write_framed_msg+0xd4>
 801770c:	2500      	movs	r5, #0
 801770e:	e001      	b.n	8017714 <uxr_write_framed_msg+0x1e8>
 8017710:	2800      	cmp	r0, #0
 8017712:	d090      	beq.n	8017636 <uxr_write_framed_msg+0x10a>
 8017714:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017718:	1b52      	subs	r2, r2, r5
 801771a:	465b      	mov	r3, fp
 801771c:	4421      	add	r1, r4
 801771e:	4638      	mov	r0, r7
 8017720:	47b0      	blx	r6
 8017722:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017726:	4405      	add	r5, r0
 8017728:	4295      	cmp	r5, r2
 801772a:	d3f1      	bcc.n	8017710 <uxr_write_framed_msg+0x1e4>
 801772c:	d183      	bne.n	8017636 <uxr_write_framed_msg+0x10a>
 801772e:	f04f 0300 	mov.w	r3, #0
 8017732:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017736:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017738:	4543      	cmp	r3, r8
 801773a:	d964      	bls.n	8017806 <uxr_write_framed_msg+0x2da>
 801773c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8017740:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8017744:	2901      	cmp	r1, #1
 8017746:	f04f 0200 	mov.w	r2, #0
 801774a:	f63f af3d 	bhi.w	80175c8 <uxr_write_framed_msg+0x9c>
 801774e:	1c51      	adds	r1, r2, #1
 8017750:	b2c9      	uxtb	r1, r1
 8017752:	2929      	cmp	r1, #41	@ 0x29
 8017754:	d8da      	bhi.n	801770c <uxr_write_framed_msg+0x1e0>
 8017756:	18a0      	adds	r0, r4, r2
 8017758:	4421      	add	r1, r4
 801775a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 801775e:	3202      	adds	r2, #2
 8017760:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8017764:	b2d2      	uxtb	r2, r2
 8017766:	f083 0020 	eor.w	r0, r3, #32
 801776a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801776e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017772:	e733      	b.n	80175dc <uxr_write_framed_msg+0xb0>
 8017774:	18a1      	adds	r1, r4, r2
 8017776:	3201      	adds	r2, #1
 8017778:	4648      	mov	r0, r9
 801777a:	b2d2      	uxtb	r2, r2
 801777c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8017780:	f04f 0901 	mov.w	r9, #1
 8017784:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017788:	2800      	cmp	r0, #0
 801778a:	f43f af7b 	beq.w	8017684 <uxr_write_framed_msg+0x158>
 801778e:	2500      	movs	r5, #0
 8017790:	e002      	b.n	8017798 <uxr_write_framed_msg+0x26c>
 8017792:	2800      	cmp	r0, #0
 8017794:	f43f af4f 	beq.w	8017636 <uxr_write_framed_msg+0x10a>
 8017798:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801779c:	1b52      	subs	r2, r2, r5
 801779e:	465b      	mov	r3, fp
 80177a0:	4421      	add	r1, r4
 80177a2:	4638      	mov	r0, r7
 80177a4:	47b0      	blx	r6
 80177a6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80177aa:	4405      	add	r5, r0
 80177ac:	4295      	cmp	r5, r2
 80177ae:	d3f0      	bcc.n	8017792 <uxr_write_framed_msg+0x266>
 80177b0:	f47f af41 	bne.w	8017636 <uxr_write_framed_msg+0x10a>
 80177b4:	2300      	movs	r3, #0
 80177b6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80177ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80177bc:	b298      	uxth	r0, r3
 80177be:	b003      	add	sp, #12
 80177c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177c4:	217d      	movs	r1, #125	@ 0x7d
 80177c6:	f082 0220 	eor.w	r2, r2, #32
 80177ca:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80177ce:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80177d2:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80177d6:	2901      	cmp	r1, #1
 80177d8:	f04f 0203 	mov.w	r2, #3
 80177dc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80177e0:	d804      	bhi.n	80177ec <uxr_write_framed_msg+0x2c0>
 80177e2:	4611      	mov	r1, r2
 80177e4:	f04f 0c04 	mov.w	ip, #4
 80177e8:	2205      	movs	r2, #5
 80177ea:	e752      	b.n	8017692 <uxr_write_framed_msg+0x166>
 80177ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80177ee:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80177f2:	b2dd      	uxtb	r5, r3
 80177f4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80177f8:	2204      	movs	r2, #4
 80177fa:	2901      	cmp	r1, #1
 80177fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017800:	f63f aec0 	bhi.w	8017584 <uxr_write_framed_msg+0x58>
 8017804:	e758      	b.n	80176b8 <uxr_write_framed_msg+0x18c>
 8017806:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801780a:	fa5f f889 	uxtb.w	r8, r9
 801780e:	9301      	str	r3, [sp, #4]
 8017810:	2200      	movs	r2, #0
 8017812:	e6f5      	b.n	8017600 <uxr_write_framed_msg+0xd4>
 8017814:	0801a6f8 	.word	0x0801a6f8

08017818 <uxr_framing_read_transport>:
 8017818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801781c:	4604      	mov	r4, r0
 801781e:	b083      	sub	sp, #12
 8017820:	461f      	mov	r7, r3
 8017822:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8017826:	4689      	mov	r9, r1
 8017828:	4692      	mov	sl, r2
 801782a:	f7fb fd61 	bl	80132f0 <uxr_millis>
 801782e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017832:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8017836:	42b3      	cmp	r3, r6
 8017838:	4680      	mov	r8, r0
 801783a:	d061      	beq.n	8017900 <uxr_framing_read_transport+0xe8>
 801783c:	d81c      	bhi.n	8017878 <uxr_framing_read_transport+0x60>
 801783e:	1e75      	subs	r5, r6, #1
 8017840:	1aed      	subs	r5, r5, r3
 8017842:	b2ed      	uxtb	r5, r5
 8017844:	2600      	movs	r6, #0
 8017846:	455d      	cmp	r5, fp
 8017848:	d81f      	bhi.n	801788a <uxr_framing_read_transport+0x72>
 801784a:	19ab      	adds	r3, r5, r6
 801784c:	455b      	cmp	r3, fp
 801784e:	bf84      	itt	hi
 8017850:	ebab 0605 	subhi.w	r6, fp, r5
 8017854:	b2f6      	uxtbhi	r6, r6
 8017856:	b9ed      	cbnz	r5, 8017894 <uxr_framing_read_transport+0x7c>
 8017858:	f04f 0b00 	mov.w	fp, #0
 801785c:	f7fb fd48 	bl	80132f0 <uxr_millis>
 8017860:	683b      	ldr	r3, [r7, #0]
 8017862:	eba0 0808 	sub.w	r8, r0, r8
 8017866:	eba3 0308 	sub.w	r3, r3, r8
 801786a:	4658      	mov	r0, fp
 801786c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017870:	603b      	str	r3, [r7, #0]
 8017872:	b003      	add	sp, #12
 8017874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017878:	2e00      	cmp	r6, #0
 801787a:	d049      	beq.n	8017910 <uxr_framing_read_transport+0xf8>
 801787c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8017880:	b2ed      	uxtb	r5, r5
 8017882:	3e01      	subs	r6, #1
 8017884:	455d      	cmp	r5, fp
 8017886:	b2f6      	uxtb	r6, r6
 8017888:	d9df      	bls.n	801784a <uxr_framing_read_transport+0x32>
 801788a:	fa5f f58b 	uxtb.w	r5, fp
 801788e:	2600      	movs	r6, #0
 8017890:	2d00      	cmp	r5, #0
 8017892:	d0e1      	beq.n	8017858 <uxr_framing_read_transport+0x40>
 8017894:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017898:	3102      	adds	r1, #2
 801789a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801789c:	9300      	str	r3, [sp, #0]
 801789e:	683b      	ldr	r3, [r7, #0]
 80178a0:	4421      	add	r1, r4
 80178a2:	462a      	mov	r2, r5
 80178a4:	4650      	mov	r0, sl
 80178a6:	47c8      	blx	r9
 80178a8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80178ac:	4a1a      	ldr	r2, [pc, #104]	@ (8017918 <uxr_framing_read_transport+0x100>)
 80178ae:	4403      	add	r3, r0
 80178b0:	0859      	lsrs	r1, r3, #1
 80178b2:	fba2 2101 	umull	r2, r1, r2, r1
 80178b6:	0889      	lsrs	r1, r1, #2
 80178b8:	222a      	movs	r2, #42	@ 0x2a
 80178ba:	fb02 3111 	mls	r1, r2, r1, r3
 80178be:	4683      	mov	fp, r0
 80178c0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80178c4:	2800      	cmp	r0, #0
 80178c6:	d0c7      	beq.n	8017858 <uxr_framing_read_transport+0x40>
 80178c8:	42a8      	cmp	r0, r5
 80178ca:	d1c7      	bne.n	801785c <uxr_framing_read_transport+0x44>
 80178cc:	2e00      	cmp	r6, #0
 80178ce:	d0c5      	beq.n	801785c <uxr_framing_read_transport+0x44>
 80178d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80178d2:	9300      	str	r3, [sp, #0]
 80178d4:	3102      	adds	r1, #2
 80178d6:	4632      	mov	r2, r6
 80178d8:	4421      	add	r1, r4
 80178da:	2300      	movs	r3, #0
 80178dc:	4650      	mov	r0, sl
 80178de:	47c8      	blx	r9
 80178e0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80178e4:	4a0c      	ldr	r2, [pc, #48]	@ (8017918 <uxr_framing_read_transport+0x100>)
 80178e6:	180b      	adds	r3, r1, r0
 80178e8:	0859      	lsrs	r1, r3, #1
 80178ea:	fba2 1201 	umull	r1, r2, r2, r1
 80178ee:	0892      	lsrs	r2, r2, #2
 80178f0:	212a      	movs	r1, #42	@ 0x2a
 80178f2:	fb01 3312 	mls	r3, r1, r2, r3
 80178f6:	eb00 0b05 	add.w	fp, r0, r5
 80178fa:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80178fe:	e7ad      	b.n	801785c <uxr_framing_read_transport+0x44>
 8017900:	2600      	movs	r6, #0
 8017902:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8017906:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8017908:	d9bf      	bls.n	801788a <uxr_framing_read_transport+0x72>
 801790a:	2102      	movs	r1, #2
 801790c:	2529      	movs	r5, #41	@ 0x29
 801790e:	e7c4      	b.n	801789a <uxr_framing_read_transport+0x82>
 8017910:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8017914:	b2ed      	uxtb	r5, r5
 8017916:	e796      	b.n	8017846 <uxr_framing_read_transport+0x2e>
 8017918:	30c30c31 	.word	0x30c30c31

0801791c <uxr_read_framed_msg>:
 801791c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017920:	461e      	mov	r6, r3
 8017922:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8017926:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801792a:	429d      	cmp	r5, r3
 801792c:	b083      	sub	sp, #12
 801792e:	4604      	mov	r4, r0
 8017930:	4688      	mov	r8, r1
 8017932:	4691      	mov	r9, r2
 8017934:	f000 8188 	beq.w	8017c48 <uxr_read_framed_msg+0x32c>
 8017938:	7823      	ldrb	r3, [r4, #0]
 801793a:	4dc1      	ldr	r5, [pc, #772]	@ (8017c40 <uxr_read_framed_msg+0x324>)
 801793c:	4fc1      	ldr	r7, [pc, #772]	@ (8017c44 <uxr_read_framed_msg+0x328>)
 801793e:	2b07      	cmp	r3, #7
 8017940:	d8fd      	bhi.n	801793e <uxr_read_framed_msg+0x22>
 8017942:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017946:	0115      	.short	0x0115
 8017948:	00d600f6 	.word	0x00d600f6
 801794c:	009000b9 	.word	0x009000b9
 8017950:	0030004d 	.word	0x0030004d
 8017954:	0008      	.short	0x0008
 8017956:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801795a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801795e:	4299      	cmp	r1, r3
 8017960:	f000 814a 	beq.w	8017bf8 <uxr_read_framed_msg+0x2dc>
 8017964:	18e2      	adds	r2, r4, r3
 8017966:	7892      	ldrb	r2, [r2, #2]
 8017968:	2a7d      	cmp	r2, #125	@ 0x7d
 801796a:	f000 8199 	beq.w	8017ca0 <uxr_read_framed_msg+0x384>
 801796e:	3301      	adds	r3, #1
 8017970:	0858      	lsrs	r0, r3, #1
 8017972:	fba5 1000 	umull	r1, r0, r5, r0
 8017976:	0880      	lsrs	r0, r0, #2
 8017978:	212a      	movs	r1, #42	@ 0x2a
 801797a:	fb01 3310 	mls	r3, r1, r0, r3
 801797e:	2a7e      	cmp	r2, #126	@ 0x7e
 8017980:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017984:	f000 8252 	beq.w	8017e2c <uxr_read_framed_msg+0x510>
 8017988:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801798a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801798c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017990:	b29b      	uxth	r3, r3
 8017992:	2200      	movs	r2, #0
 8017994:	4299      	cmp	r1, r3
 8017996:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8017998:	7022      	strb	r2, [r4, #0]
 801799a:	f000 8179 	beq.w	8017c90 <uxr_read_framed_msg+0x374>
 801799e:	2000      	movs	r0, #0
 80179a0:	b003      	add	sp, #12
 80179a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179a6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80179aa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80179ae:	4299      	cmp	r1, r3
 80179b0:	f000 8131 	beq.w	8017c16 <uxr_read_framed_msg+0x2fa>
 80179b4:	18e2      	adds	r2, r4, r3
 80179b6:	7890      	ldrb	r0, [r2, #2]
 80179b8:	287d      	cmp	r0, #125	@ 0x7d
 80179ba:	f000 8190 	beq.w	8017cde <uxr_read_framed_msg+0x3c2>
 80179be:	3301      	adds	r3, #1
 80179c0:	085a      	lsrs	r2, r3, #1
 80179c2:	fba5 1202 	umull	r1, r2, r5, r2
 80179c6:	0892      	lsrs	r2, r2, #2
 80179c8:	212a      	movs	r1, #42	@ 0x2a
 80179ca:	fb01 3312 	mls	r3, r1, r2, r3
 80179ce:	287e      	cmp	r0, #126	@ 0x7e
 80179d0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80179d4:	f000 821a 	beq.w	8017e0c <uxr_read_framed_msg+0x4f0>
 80179d8:	2307      	movs	r3, #7
 80179da:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80179dc:	7023      	strb	r3, [r4, #0]
 80179de:	e7ae      	b.n	801793e <uxr_read_framed_msg+0x22>
 80179e0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80179e2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80179e6:	459e      	cmp	lr, r3
 80179e8:	d938      	bls.n	8017a5c <uxr_read_framed_msg+0x140>
 80179ea:	ee07 8a90 	vmov	s15, r8
 80179ee:	212a      	movs	r1, #42	@ 0x2a
 80179f0:	e020      	b.n	8017a34 <uxr_read_framed_msg+0x118>
 80179f2:	f89b c002 	ldrb.w	ip, [fp, #2]
 80179f6:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80179fa:	f000 80d4 	beq.w	8017ba6 <uxr_read_framed_msg+0x28a>
 80179fe:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017a02:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017a06:	f000 8219 	beq.w	8017e3c <uxr_read_framed_msg+0x520>
 8017a0a:	f806 c003 	strb.w	ip, [r6, r3]
 8017a0e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8017a12:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017a14:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8017a18:	ea8a 000c 	eor.w	r0, sl, ip
 8017a1c:	b2c0      	uxtb	r0, r0
 8017a1e:	3301      	adds	r3, #1
 8017a20:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8017a24:	b29b      	uxth	r3, r3
 8017a26:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8017a2a:	4573      	cmp	r3, lr
 8017a2c:	8663      	strh	r3, [r4, #50]	@ 0x32
 8017a2e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8017a30:	f080 8120 	bcs.w	8017c74 <uxr_read_framed_msg+0x358>
 8017a34:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8017a38:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017a3c:	f100 0c01 	add.w	ip, r0, #1
 8017a40:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017a44:	fba5 8202 	umull	r8, r2, r5, r2
 8017a48:	0892      	lsrs	r2, r2, #2
 8017a4a:	4582      	cmp	sl, r0
 8017a4c:	eb04 0b00 	add.w	fp, r4, r0
 8017a50:	fb01 c212 	mls	r2, r1, r2, ip
 8017a54:	d1cd      	bne.n	80179f2 <uxr_read_framed_msg+0xd6>
 8017a56:	ee17 8a90 	vmov	r8, s15
 8017a5a:	459e      	cmp	lr, r3
 8017a5c:	f040 8111 	bne.w	8017c82 <uxr_read_framed_msg+0x366>
 8017a60:	2306      	movs	r3, #6
 8017a62:	7023      	strb	r3, [r4, #0]
 8017a64:	e76b      	b.n	801793e <uxr_read_framed_msg+0x22>
 8017a66:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8017a6a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017a6e:	4298      	cmp	r0, r3
 8017a70:	f000 80c2 	beq.w	8017bf8 <uxr_read_framed_msg+0x2dc>
 8017a74:	18e2      	adds	r2, r4, r3
 8017a76:	7891      	ldrb	r1, [r2, #2]
 8017a78:	297d      	cmp	r1, #125	@ 0x7d
 8017a7a:	f000 814c 	beq.w	8017d16 <uxr_read_framed_msg+0x3fa>
 8017a7e:	3301      	adds	r3, #1
 8017a80:	085a      	lsrs	r2, r3, #1
 8017a82:	fba5 0202 	umull	r0, r2, r5, r2
 8017a86:	0892      	lsrs	r2, r2, #2
 8017a88:	202a      	movs	r0, #42	@ 0x2a
 8017a8a:	fb00 3312 	mls	r3, r0, r2, r3
 8017a8e:	297e      	cmp	r1, #126	@ 0x7e
 8017a90:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017a94:	f000 81ca 	beq.w	8017e2c <uxr_read_framed_msg+0x510>
 8017a98:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8017a9a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017a9e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017aa0:	b29b      	uxth	r3, r3
 8017aa2:	2000      	movs	r0, #0
 8017aa4:	428b      	cmp	r3, r1
 8017aa6:	8623      	strh	r3, [r4, #48]	@ 0x30
 8017aa8:	8660      	strh	r0, [r4, #50]	@ 0x32
 8017aaa:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8017aac:	f240 80df 	bls.w	8017c6e <uxr_read_framed_msg+0x352>
 8017ab0:	7020      	strb	r0, [r4, #0]
 8017ab2:	b003      	add	sp, #12
 8017ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017abc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017ac0:	4299      	cmp	r1, r3
 8017ac2:	f000 80a8 	beq.w	8017c16 <uxr_read_framed_msg+0x2fa>
 8017ac6:	18e2      	adds	r2, r4, r3
 8017ac8:	7890      	ldrb	r0, [r2, #2]
 8017aca:	287d      	cmp	r0, #125	@ 0x7d
 8017acc:	f000 8164 	beq.w	8017d98 <uxr_read_framed_msg+0x47c>
 8017ad0:	3301      	adds	r3, #1
 8017ad2:	085a      	lsrs	r2, r3, #1
 8017ad4:	fba5 1202 	umull	r1, r2, r5, r2
 8017ad8:	0892      	lsrs	r2, r2, #2
 8017ada:	212a      	movs	r1, #42	@ 0x2a
 8017adc:	fb01 3312 	mls	r3, r1, r2, r3
 8017ae0:	287e      	cmp	r0, #126	@ 0x7e
 8017ae2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017ae6:	f000 8191 	beq.w	8017e0c <uxr_read_framed_msg+0x4f0>
 8017aea:	2304      	movs	r3, #4
 8017aec:	8620      	strh	r0, [r4, #48]	@ 0x30
 8017aee:	7023      	strb	r3, [r4, #0]
 8017af0:	e725      	b.n	801793e <uxr_read_framed_msg+0x22>
 8017af2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8017af6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017afa:	4290      	cmp	r0, r2
 8017afc:	f000 80b3 	beq.w	8017c66 <uxr_read_framed_msg+0x34a>
 8017b00:	18a3      	adds	r3, r4, r2
 8017b02:	7899      	ldrb	r1, [r3, #2]
 8017b04:	297d      	cmp	r1, #125	@ 0x7d
 8017b06:	f000 8164 	beq.w	8017dd2 <uxr_read_framed_msg+0x4b6>
 8017b0a:	3201      	adds	r2, #1
 8017b0c:	0850      	lsrs	r0, r2, #1
 8017b0e:	fba5 3000 	umull	r3, r0, r5, r0
 8017b12:	0880      	lsrs	r0, r0, #2
 8017b14:	232a      	movs	r3, #42	@ 0x2a
 8017b16:	fb03 2210 	mls	r2, r3, r0, r2
 8017b1a:	297e      	cmp	r1, #126	@ 0x7e
 8017b1c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017b20:	f000 8188 	beq.w	8017e34 <uxr_read_framed_msg+0x518>
 8017b24:	7863      	ldrb	r3, [r4, #1]
 8017b26:	428b      	cmp	r3, r1
 8017b28:	bf0c      	ite	eq
 8017b2a:	2303      	moveq	r3, #3
 8017b2c:	2300      	movne	r3, #0
 8017b2e:	7023      	strb	r3, [r4, #0]
 8017b30:	e705      	b.n	801793e <uxr_read_framed_msg+0x22>
 8017b32:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017b36:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	4299      	cmp	r1, r3
 8017b3e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8017b42:	d06c      	beq.n	8017c1e <uxr_read_framed_msg+0x302>
 8017b44:	18e2      	adds	r2, r4, r3
 8017b46:	7890      	ldrb	r0, [r2, #2]
 8017b48:	287d      	cmp	r0, #125	@ 0x7d
 8017b4a:	f000 8101 	beq.w	8017d50 <uxr_read_framed_msg+0x434>
 8017b4e:	3301      	adds	r3, #1
 8017b50:	085a      	lsrs	r2, r3, #1
 8017b52:	fba5 1202 	umull	r1, r2, r5, r2
 8017b56:	0892      	lsrs	r2, r2, #2
 8017b58:	212a      	movs	r1, #42	@ 0x2a
 8017b5a:	fb01 3312 	mls	r3, r1, r2, r3
 8017b5e:	287e      	cmp	r0, #126	@ 0x7e
 8017b60:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8017b64:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017b68:	d059      	beq.n	8017c1e <uxr_read_framed_msg+0x302>
 8017b6a:	2302      	movs	r3, #2
 8017b6c:	7023      	strb	r3, [r4, #0]
 8017b6e:	e6e6      	b.n	801793e <uxr_read_framed_msg+0x22>
 8017b70:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017b74:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017b78:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8017b7c:	1c51      	adds	r1, r2, #1
 8017b7e:	084b      	lsrs	r3, r1, #1
 8017b80:	fba5 c303 	umull	ip, r3, r5, r3
 8017b84:	089b      	lsrs	r3, r3, #2
 8017b86:	fb0e 1313 	mls	r3, lr, r3, r1
 8017b8a:	4592      	cmp	sl, r2
 8017b8c:	eb04 0002 	add.w	r0, r4, r2
 8017b90:	b2da      	uxtb	r2, r3
 8017b92:	f43f af04 	beq.w	801799e <uxr_read_framed_msg+0x82>
 8017b96:	7883      	ldrb	r3, [r0, #2]
 8017b98:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017b9c:	2b7e      	cmp	r3, #126	@ 0x7e
 8017b9e:	d1ed      	bne.n	8017b7c <uxr_read_framed_msg+0x260>
 8017ba0:	2301      	movs	r3, #1
 8017ba2:	7023      	strb	r3, [r4, #0]
 8017ba4:	e6cb      	b.n	801793e <uxr_read_framed_msg+0x22>
 8017ba6:	f100 0c01 	add.w	ip, r0, #1
 8017baa:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017bae:	fba5 8202 	umull	r8, r2, r5, r2
 8017bb2:	0892      	lsrs	r2, r2, #2
 8017bb4:	fb01 c212 	mls	r2, r1, r2, ip
 8017bb8:	eb04 0c02 	add.w	ip, r4, r2
 8017bbc:	b2d2      	uxtb	r2, r2
 8017bbe:	4592      	cmp	sl, r2
 8017bc0:	f100 0002 	add.w	r0, r0, #2
 8017bc4:	f43f af47 	beq.w	8017a56 <uxr_read_framed_msg+0x13a>
 8017bc8:	0842      	lsrs	r2, r0, #1
 8017bca:	f89c a002 	ldrb.w	sl, [ip, #2]
 8017bce:	fba5 8202 	umull	r8, r2, r5, r2
 8017bd2:	0892      	lsrs	r2, r2, #2
 8017bd4:	fb01 0012 	mls	r0, r1, r2, r0
 8017bd8:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8017bdc:	f08a 0c20 	eor.w	ip, sl, #32
 8017be0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8017be4:	f47f af11 	bne.w	8017a0a <uxr_read_framed_msg+0xee>
 8017be8:	459e      	cmp	lr, r3
 8017bea:	ee17 8a90 	vmov	r8, s15
 8017bee:	f43f af37 	beq.w	8017a60 <uxr_read_framed_msg+0x144>
 8017bf2:	2301      	movs	r3, #1
 8017bf4:	7023      	strb	r3, [r4, #0]
 8017bf6:	e6a2      	b.n	801793e <uxr_read_framed_msg+0x22>
 8017bf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017bfa:	9300      	str	r3, [sp, #0]
 8017bfc:	2301      	movs	r3, #1
 8017bfe:	9301      	str	r3, [sp, #4]
 8017c00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017c02:	464a      	mov	r2, r9
 8017c04:	4641      	mov	r1, r8
 8017c06:	4620      	mov	r0, r4
 8017c08:	f7ff fe06 	bl	8017818 <uxr_framing_read_transport>
 8017c0c:	2800      	cmp	r0, #0
 8017c0e:	f43f aec6 	beq.w	801799e <uxr_read_framed_msg+0x82>
 8017c12:	7823      	ldrb	r3, [r4, #0]
 8017c14:	e693      	b.n	801793e <uxr_read_framed_msg+0x22>
 8017c16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c18:	9300      	str	r3, [sp, #0]
 8017c1a:	2302      	movs	r3, #2
 8017c1c:	e7ef      	b.n	8017bfe <uxr_read_framed_msg+0x2e2>
 8017c1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c20:	9300      	str	r3, [sp, #0]
 8017c22:	2304      	movs	r3, #4
 8017c24:	9301      	str	r3, [sp, #4]
 8017c26:	464a      	mov	r2, r9
 8017c28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017c2a:	4641      	mov	r1, r8
 8017c2c:	4620      	mov	r0, r4
 8017c2e:	f7ff fdf3 	bl	8017818 <uxr_framing_read_transport>
 8017c32:	2800      	cmp	r0, #0
 8017c34:	d1ed      	bne.n	8017c12 <uxr_read_framed_msg+0x2f6>
 8017c36:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8017c3a:	2b7e      	cmp	r3, #126	@ 0x7e
 8017c3c:	d0e9      	beq.n	8017c12 <uxr_read_framed_msg+0x2f6>
 8017c3e:	e6ae      	b.n	801799e <uxr_read_framed_msg+0x82>
 8017c40:	30c30c31 	.word	0x30c30c31
 8017c44:	0801a6f8 	.word	0x0801a6f8
 8017c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c4a:	9300      	str	r3, [sp, #0]
 8017c4c:	2305      	movs	r3, #5
 8017c4e:	9301      	str	r3, [sp, #4]
 8017c50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017c52:	f7ff fde1 	bl	8017818 <uxr_framing_read_transport>
 8017c56:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017c5a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017c5e:	429a      	cmp	r2, r3
 8017c60:	f43f ae9d 	beq.w	801799e <uxr_read_framed_msg+0x82>
 8017c64:	e668      	b.n	8017938 <uxr_read_framed_msg+0x1c>
 8017c66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c68:	9300      	str	r3, [sp, #0]
 8017c6a:	2303      	movs	r3, #3
 8017c6c:	e7c7      	b.n	8017bfe <uxr_read_framed_msg+0x2e2>
 8017c6e:	2305      	movs	r3, #5
 8017c70:	7023      	strb	r3, [r4, #0]
 8017c72:	e664      	b.n	801793e <uxr_read_framed_msg+0x22>
 8017c74:	ee17 8a90 	vmov	r8, s15
 8017c78:	f43f aef2 	beq.w	8017a60 <uxr_read_framed_msg+0x144>
 8017c7c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017c80:	d08e      	beq.n	8017ba0 <uxr_read_framed_msg+0x284>
 8017c82:	ebae 0303 	sub.w	r3, lr, r3
 8017c86:	3302      	adds	r3, #2
 8017c88:	9301      	str	r3, [sp, #4]
 8017c8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c8c:	9300      	str	r3, [sp, #0]
 8017c8e:	e7b7      	b.n	8017c00 <uxr_read_framed_msg+0x2e4>
 8017c90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017c92:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8017c96:	7013      	strb	r3, [r2, #0]
 8017c98:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8017c9a:	b003      	add	sp, #12
 8017c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ca0:	f103 0c01 	add.w	ip, r3, #1
 8017ca4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017ca8:	fba5 0202 	umull	r0, r2, r5, r2
 8017cac:	0892      	lsrs	r2, r2, #2
 8017cae:	202a      	movs	r0, #42	@ 0x2a
 8017cb0:	fb00 c212 	mls	r2, r0, r2, ip
 8017cb4:	fa5f fc82 	uxtb.w	ip, r2
 8017cb8:	4561      	cmp	r1, ip
 8017cba:	d09d      	beq.n	8017bf8 <uxr_read_framed_msg+0x2dc>
 8017cbc:	3302      	adds	r3, #2
 8017cbe:	4422      	add	r2, r4
 8017cc0:	0859      	lsrs	r1, r3, #1
 8017cc2:	7892      	ldrb	r2, [r2, #2]
 8017cc4:	fba5 c101 	umull	ip, r1, r5, r1
 8017cc8:	0889      	lsrs	r1, r1, #2
 8017cca:	fb00 3311 	mls	r3, r0, r1, r3
 8017cce:	2a7e      	cmp	r2, #126	@ 0x7e
 8017cd0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017cd4:	f000 80aa 	beq.w	8017e2c <uxr_read_framed_msg+0x510>
 8017cd8:	f082 0220 	eor.w	r2, r2, #32
 8017cdc:	e654      	b.n	8017988 <uxr_read_framed_msg+0x6c>
 8017cde:	1c58      	adds	r0, r3, #1
 8017ce0:	0842      	lsrs	r2, r0, #1
 8017ce2:	fba5 c202 	umull	ip, r2, r5, r2
 8017ce6:	0892      	lsrs	r2, r2, #2
 8017ce8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017cec:	fb0c 0212 	mls	r2, ip, r2, r0
 8017cf0:	b2d0      	uxtb	r0, r2
 8017cf2:	4281      	cmp	r1, r0
 8017cf4:	d08f      	beq.n	8017c16 <uxr_read_framed_msg+0x2fa>
 8017cf6:	4422      	add	r2, r4
 8017cf8:	3302      	adds	r3, #2
 8017cfa:	7890      	ldrb	r0, [r2, #2]
 8017cfc:	085a      	lsrs	r2, r3, #1
 8017cfe:	fba5 1202 	umull	r1, r2, r5, r2
 8017d02:	0892      	lsrs	r2, r2, #2
 8017d04:	fb0c 3312 	mls	r3, ip, r2, r3
 8017d08:	287e      	cmp	r0, #126	@ 0x7e
 8017d0a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017d0e:	d07d      	beq.n	8017e0c <uxr_read_framed_msg+0x4f0>
 8017d10:	f080 0020 	eor.w	r0, r0, #32
 8017d14:	e660      	b.n	80179d8 <uxr_read_framed_msg+0xbc>
 8017d16:	1c59      	adds	r1, r3, #1
 8017d18:	084a      	lsrs	r2, r1, #1
 8017d1a:	fba5 c202 	umull	ip, r2, r5, r2
 8017d1e:	0892      	lsrs	r2, r2, #2
 8017d20:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017d24:	fb0c 1212 	mls	r2, ip, r2, r1
 8017d28:	b2d1      	uxtb	r1, r2
 8017d2a:	4288      	cmp	r0, r1
 8017d2c:	f43f af64 	beq.w	8017bf8 <uxr_read_framed_msg+0x2dc>
 8017d30:	4422      	add	r2, r4
 8017d32:	3302      	adds	r3, #2
 8017d34:	7891      	ldrb	r1, [r2, #2]
 8017d36:	085a      	lsrs	r2, r3, #1
 8017d38:	fba5 0202 	umull	r0, r2, r5, r2
 8017d3c:	0892      	lsrs	r2, r2, #2
 8017d3e:	fb0c 3312 	mls	r3, ip, r2, r3
 8017d42:	297e      	cmp	r1, #126	@ 0x7e
 8017d44:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017d48:	d070      	beq.n	8017e2c <uxr_read_framed_msg+0x510>
 8017d4a:	f081 0120 	eor.w	r1, r1, #32
 8017d4e:	e6a3      	b.n	8017a98 <uxr_read_framed_msg+0x17c>
 8017d50:	f103 0c01 	add.w	ip, r3, #1
 8017d54:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017d58:	fba5 0202 	umull	r0, r2, r5, r2
 8017d5c:	0892      	lsrs	r2, r2, #2
 8017d5e:	202a      	movs	r0, #42	@ 0x2a
 8017d60:	fb00 c212 	mls	r2, r0, r2, ip
 8017d64:	fa5f fc82 	uxtb.w	ip, r2
 8017d68:	4561      	cmp	r1, ip
 8017d6a:	f43f af58 	beq.w	8017c1e <uxr_read_framed_msg+0x302>
 8017d6e:	4422      	add	r2, r4
 8017d70:	3302      	adds	r3, #2
 8017d72:	7891      	ldrb	r1, [r2, #2]
 8017d74:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8017d78:	085a      	lsrs	r2, r3, #1
 8017d7a:	fba5 c202 	umull	ip, r2, r5, r2
 8017d7e:	0892      	lsrs	r2, r2, #2
 8017d80:	fb00 3312 	mls	r3, r0, r2, r3
 8017d84:	297e      	cmp	r1, #126	@ 0x7e
 8017d86:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017d8a:	f43f af48 	beq.w	8017c1e <uxr_read_framed_msg+0x302>
 8017d8e:	f081 0120 	eor.w	r1, r1, #32
 8017d92:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8017d96:	e6e8      	b.n	8017b6a <uxr_read_framed_msg+0x24e>
 8017d98:	1c58      	adds	r0, r3, #1
 8017d9a:	0842      	lsrs	r2, r0, #1
 8017d9c:	fba5 c202 	umull	ip, r2, r5, r2
 8017da0:	0892      	lsrs	r2, r2, #2
 8017da2:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017da6:	fb0c 0212 	mls	r2, ip, r2, r0
 8017daa:	b2d0      	uxtb	r0, r2
 8017dac:	4281      	cmp	r1, r0
 8017dae:	f43f af32 	beq.w	8017c16 <uxr_read_framed_msg+0x2fa>
 8017db2:	4422      	add	r2, r4
 8017db4:	3302      	adds	r3, #2
 8017db6:	7890      	ldrb	r0, [r2, #2]
 8017db8:	085a      	lsrs	r2, r3, #1
 8017dba:	fba5 1202 	umull	r1, r2, r5, r2
 8017dbe:	0892      	lsrs	r2, r2, #2
 8017dc0:	fb0c 3312 	mls	r3, ip, r2, r3
 8017dc4:	287e      	cmp	r0, #126	@ 0x7e
 8017dc6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017dca:	d01f      	beq.n	8017e0c <uxr_read_framed_msg+0x4f0>
 8017dcc:	f080 0020 	eor.w	r0, r0, #32
 8017dd0:	e68b      	b.n	8017aea <uxr_read_framed_msg+0x1ce>
 8017dd2:	1c51      	adds	r1, r2, #1
 8017dd4:	084b      	lsrs	r3, r1, #1
 8017dd6:	fba5 c303 	umull	ip, r3, r5, r3
 8017dda:	089b      	lsrs	r3, r3, #2
 8017ddc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017de0:	fb0c 1313 	mls	r3, ip, r3, r1
 8017de4:	b2d9      	uxtb	r1, r3
 8017de6:	4288      	cmp	r0, r1
 8017de8:	f43f af3d 	beq.w	8017c66 <uxr_read_framed_msg+0x34a>
 8017dec:	3202      	adds	r2, #2
 8017dee:	4423      	add	r3, r4
 8017df0:	0850      	lsrs	r0, r2, #1
 8017df2:	789b      	ldrb	r3, [r3, #2]
 8017df4:	fba5 1000 	umull	r1, r0, r5, r0
 8017df8:	0880      	lsrs	r0, r0, #2
 8017dfa:	fb0c 2210 	mls	r2, ip, r0, r2
 8017dfe:	2b7e      	cmp	r3, #126	@ 0x7e
 8017e00:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017e04:	d016      	beq.n	8017e34 <uxr_read_framed_msg+0x518>
 8017e06:	f083 0120 	eor.w	r1, r3, #32
 8017e0a:	e68b      	b.n	8017b24 <uxr_read_framed_msg+0x208>
 8017e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e0e:	9300      	str	r3, [sp, #0]
 8017e10:	2302      	movs	r3, #2
 8017e12:	9301      	str	r3, [sp, #4]
 8017e14:	464a      	mov	r2, r9
 8017e16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017e18:	4641      	mov	r1, r8
 8017e1a:	4620      	mov	r0, r4
 8017e1c:	f7ff fcfc 	bl	8017818 <uxr_framing_read_transport>
 8017e20:	2800      	cmp	r0, #0
 8017e22:	f47f aef6 	bne.w	8017c12 <uxr_read_framed_msg+0x2f6>
 8017e26:	2301      	movs	r3, #1
 8017e28:	7023      	strb	r3, [r4, #0]
 8017e2a:	e588      	b.n	801793e <uxr_read_framed_msg+0x22>
 8017e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e2e:	9300      	str	r3, [sp, #0]
 8017e30:	2301      	movs	r3, #1
 8017e32:	e7ee      	b.n	8017e12 <uxr_read_framed_msg+0x4f6>
 8017e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e36:	9300      	str	r3, [sp, #0]
 8017e38:	2303      	movs	r3, #3
 8017e3a:	e7ea      	b.n	8017e12 <uxr_read_framed_msg+0x4f6>
 8017e3c:	ee17 8a90 	vmov	r8, s15
 8017e40:	e6ae      	b.n	8017ba0 <uxr_read_framed_msg+0x284>
 8017e42:	bf00      	nop

08017e44 <rcl_get_default_domain_id>:
 8017e44:	b530      	push	{r4, r5, lr}
 8017e46:	b083      	sub	sp, #12
 8017e48:	2300      	movs	r3, #0
 8017e4a:	9300      	str	r3, [sp, #0]
 8017e4c:	b1d0      	cbz	r0, 8017e84 <rcl_get_default_domain_id+0x40>
 8017e4e:	4604      	mov	r4, r0
 8017e50:	4669      	mov	r1, sp
 8017e52:	4815      	ldr	r0, [pc, #84]	@ (8017ea8 <rcl_get_default_domain_id+0x64>)
 8017e54:	f7fd f920 	bl	8015098 <rcutils_get_env>
 8017e58:	4602      	mov	r2, r0
 8017e5a:	b110      	cbz	r0, 8017e62 <rcl_get_default_domain_id+0x1e>
 8017e5c:	2001      	movs	r0, #1
 8017e5e:	b003      	add	sp, #12
 8017e60:	bd30      	pop	{r4, r5, pc}
 8017e62:	9b00      	ldr	r3, [sp, #0]
 8017e64:	b18b      	cbz	r3, 8017e8a <rcl_get_default_domain_id+0x46>
 8017e66:	7818      	ldrb	r0, [r3, #0]
 8017e68:	2800      	cmp	r0, #0
 8017e6a:	d0f8      	beq.n	8017e5e <rcl_get_default_domain_id+0x1a>
 8017e6c:	a901      	add	r1, sp, #4
 8017e6e:	4618      	mov	r0, r3
 8017e70:	9201      	str	r2, [sp, #4]
 8017e72:	f000 fe83 	bl	8018b7c <strtoul>
 8017e76:	4605      	mov	r5, r0
 8017e78:	b150      	cbz	r0, 8017e90 <rcl_get_default_domain_id+0x4c>
 8017e7a:	1c43      	adds	r3, r0, #1
 8017e7c:	d00d      	beq.n	8017e9a <rcl_get_default_domain_id+0x56>
 8017e7e:	6025      	str	r5, [r4, #0]
 8017e80:	2000      	movs	r0, #0
 8017e82:	e7ec      	b.n	8017e5e <rcl_get_default_domain_id+0x1a>
 8017e84:	200b      	movs	r0, #11
 8017e86:	b003      	add	sp, #12
 8017e88:	bd30      	pop	{r4, r5, pc}
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	b003      	add	sp, #12
 8017e8e:	bd30      	pop	{r4, r5, pc}
 8017e90:	9b01      	ldr	r3, [sp, #4]
 8017e92:	781b      	ldrb	r3, [r3, #0]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d0f2      	beq.n	8017e7e <rcl_get_default_domain_id+0x3a>
 8017e98:	e7e0      	b.n	8017e5c <rcl_get_default_domain_id+0x18>
 8017e9a:	f001 f9a3 	bl	80191e4 <__errno>
 8017e9e:	6803      	ldr	r3, [r0, #0]
 8017ea0:	2b22      	cmp	r3, #34	@ 0x22
 8017ea2:	d1ec      	bne.n	8017e7e <rcl_get_default_domain_id+0x3a>
 8017ea4:	e7da      	b.n	8017e5c <rcl_get_default_domain_id+0x18>
 8017ea6:	bf00      	nop
 8017ea8:	0801a8f8 	.word	0x0801a8f8

08017eac <rcl_expand_topic_name>:
 8017eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb0:	b08b      	sub	sp, #44	@ 0x2c
 8017eb2:	9306      	str	r3, [sp, #24]
 8017eb4:	2800      	cmp	r0, #0
 8017eb6:	f000 80ad 	beq.w	8018014 <rcl_expand_topic_name+0x168>
 8017eba:	460e      	mov	r6, r1
 8017ebc:	2900      	cmp	r1, #0
 8017ebe:	f000 80a9 	beq.w	8018014 <rcl_expand_topic_name+0x168>
 8017ec2:	4617      	mov	r7, r2
 8017ec4:	2a00      	cmp	r2, #0
 8017ec6:	f000 80a5 	beq.w	8018014 <rcl_expand_topic_name+0x168>
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	f000 80a2 	beq.w	8018014 <rcl_expand_topic_name+0x168>
 8017ed0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	f000 809e 	beq.w	8018014 <rcl_expand_topic_name+0x168>
 8017ed8:	2200      	movs	r2, #0
 8017eda:	a909      	add	r1, sp, #36	@ 0x24
 8017edc:	4680      	mov	r8, r0
 8017ede:	f000 f9f5 	bl	80182cc <rcl_validate_topic_name>
 8017ee2:	4604      	mov	r4, r0
 8017ee4:	2800      	cmp	r0, #0
 8017ee6:	f040 8096 	bne.w	8018016 <rcl_expand_topic_name+0x16a>
 8017eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	f040 809a 	bne.w	8018026 <rcl_expand_topic_name+0x17a>
 8017ef2:	4602      	mov	r2, r0
 8017ef4:	a909      	add	r1, sp, #36	@ 0x24
 8017ef6:	4630      	mov	r0, r6
 8017ef8:	f7fd fcc0 	bl	801587c <rmw_validate_node_name>
 8017efc:	2800      	cmp	r0, #0
 8017efe:	f040 808e 	bne.w	801801e <rcl_expand_topic_name+0x172>
 8017f02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f04:	2a00      	cmp	r2, #0
 8017f06:	f040 8093 	bne.w	8018030 <rcl_expand_topic_name+0x184>
 8017f0a:	a909      	add	r1, sp, #36	@ 0x24
 8017f0c:	4638      	mov	r0, r7
 8017f0e:	f7fd fc97 	bl	8015840 <rmw_validate_namespace>
 8017f12:	2800      	cmp	r0, #0
 8017f14:	f040 8083 	bne.w	801801e <rcl_expand_topic_name+0x172>
 8017f18:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8017f1a:	2c00      	cmp	r4, #0
 8017f1c:	f040 80ed 	bne.w	80180fa <rcl_expand_topic_name+0x24e>
 8017f20:	217b      	movs	r1, #123	@ 0x7b
 8017f22:	4640      	mov	r0, r8
 8017f24:	f001 f8d2 	bl	80190cc <strchr>
 8017f28:	f898 3000 	ldrb.w	r3, [r8]
 8017f2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8017f2e:	4605      	mov	r5, r0
 8017f30:	f000 809e 	beq.w	8018070 <rcl_expand_topic_name+0x1c4>
 8017f34:	2b7e      	cmp	r3, #126	@ 0x7e
 8017f36:	f040 80a2 	bne.w	801807e <rcl_expand_topic_name+0x1d2>
 8017f3a:	4638      	mov	r0, r7
 8017f3c:	f7e8 f952 	bl	80001e4 <strlen>
 8017f40:	4a82      	ldr	r2, [pc, #520]	@ (801814c <rcl_expand_topic_name+0x2a0>)
 8017f42:	4b83      	ldr	r3, [pc, #524]	@ (8018150 <rcl_expand_topic_name+0x2a4>)
 8017f44:	2801      	cmp	r0, #1
 8017f46:	bf18      	it	ne
 8017f48:	4613      	movne	r3, r2
 8017f4a:	9302      	str	r3, [sp, #8]
 8017f4c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017f4e:	9300      	str	r3, [sp, #0]
 8017f50:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8017f54:	f108 0301 	add.w	r3, r8, #1
 8017f58:	9305      	str	r3, [sp, #20]
 8017f5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017f5e:	9301      	str	r3, [sp, #4]
 8017f60:	ab14      	add	r3, sp, #80	@ 0x50
 8017f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017f64:	f7fd f8b0 	bl	80150c8 <rcutils_format_string_limit>
 8017f68:	4682      	mov	sl, r0
 8017f6a:	2800      	cmp	r0, #0
 8017f6c:	f000 80c7 	beq.w	80180fe <rcl_expand_topic_name+0x252>
 8017f70:	2d00      	cmp	r5, #0
 8017f72:	f000 80a2 	beq.w	80180ba <rcl_expand_topic_name+0x20e>
 8017f76:	217b      	movs	r1, #123	@ 0x7b
 8017f78:	f001 f8a8 	bl	80190cc <strchr>
 8017f7c:	46d1      	mov	r9, sl
 8017f7e:	4605      	mov	r5, r0
 8017f80:	9407      	str	r4, [sp, #28]
 8017f82:	46d3      	mov	fp, sl
 8017f84:	464c      	mov	r4, r9
 8017f86:	2d00      	cmp	r5, #0
 8017f88:	f000 80be 	beq.w	8018108 <rcl_expand_topic_name+0x25c>
 8017f8c:	217d      	movs	r1, #125	@ 0x7d
 8017f8e:	4620      	mov	r0, r4
 8017f90:	f001 f89c 	bl	80190cc <strchr>
 8017f94:	eba0 0905 	sub.w	r9, r0, r5
 8017f98:	f109 0a01 	add.w	sl, r9, #1
 8017f9c:	486d      	ldr	r0, [pc, #436]	@ (8018154 <rcl_expand_topic_name+0x2a8>)
 8017f9e:	4652      	mov	r2, sl
 8017fa0:	4629      	mov	r1, r5
 8017fa2:	f001 f8a0 	bl	80190e6 <strncmp>
 8017fa6:	2800      	cmp	r0, #0
 8017fa8:	d067      	beq.n	801807a <rcl_expand_topic_name+0x1ce>
 8017faa:	486b      	ldr	r0, [pc, #428]	@ (8018158 <rcl_expand_topic_name+0x2ac>)
 8017fac:	4652      	mov	r2, sl
 8017fae:	4629      	mov	r1, r5
 8017fb0:	f001 f899 	bl	80190e6 <strncmp>
 8017fb4:	b130      	cbz	r0, 8017fc4 <rcl_expand_topic_name+0x118>
 8017fb6:	4869      	ldr	r0, [pc, #420]	@ (801815c <rcl_expand_topic_name+0x2b0>)
 8017fb8:	4652      	mov	r2, sl
 8017fba:	4629      	mov	r1, r5
 8017fbc:	f001 f893 	bl	80190e6 <strncmp>
 8017fc0:	2800      	cmp	r0, #0
 8017fc2:	d137      	bne.n	8018034 <rcl_expand_topic_name+0x188>
 8017fc4:	46b9      	mov	r9, r7
 8017fc6:	ab16      	add	r3, sp, #88	@ 0x58
 8017fc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017fcc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017fd0:	ab14      	add	r3, sp, #80	@ 0x50
 8017fd2:	4628      	mov	r0, r5
 8017fd4:	cb0c      	ldmia	r3, {r2, r3}
 8017fd6:	4651      	mov	r1, sl
 8017fd8:	f7fd f9b2 	bl	8015340 <rcutils_strndup>
 8017fdc:	4605      	mov	r5, r0
 8017fde:	2800      	cmp	r0, #0
 8017fe0:	f000 809c 	beq.w	801811c <rcl_expand_topic_name+0x270>
 8017fe4:	464a      	mov	r2, r9
 8017fe6:	4620      	mov	r0, r4
 8017fe8:	ab14      	add	r3, sp, #80	@ 0x50
 8017fea:	4629      	mov	r1, r5
 8017fec:	f7fd f8a6 	bl	801513c <rcutils_repl_str>
 8017ff0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017ff2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017ff4:	4604      	mov	r4, r0
 8017ff6:	4628      	mov	r0, r5
 8017ff8:	4798      	blx	r3
 8017ffa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017ffc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017ffe:	4658      	mov	r0, fp
 8018000:	4798      	blx	r3
 8018002:	2c00      	cmp	r4, #0
 8018004:	d07b      	beq.n	80180fe <rcl_expand_topic_name+0x252>
 8018006:	217b      	movs	r1, #123	@ 0x7b
 8018008:	4620      	mov	r0, r4
 801800a:	f001 f85f 	bl	80190cc <strchr>
 801800e:	46a3      	mov	fp, r4
 8018010:	4605      	mov	r5, r0
 8018012:	e7b8      	b.n	8017f86 <rcl_expand_topic_name+0xda>
 8018014:	240b      	movs	r4, #11
 8018016:	4620      	mov	r0, r4
 8018018:	b00b      	add	sp, #44	@ 0x2c
 801801a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801801e:	f7fc fa97 	bl	8014550 <rcl_convert_rmw_ret_to_rcl_ret>
 8018022:	4604      	mov	r4, r0
 8018024:	e7f7      	b.n	8018016 <rcl_expand_topic_name+0x16a>
 8018026:	2467      	movs	r4, #103	@ 0x67
 8018028:	4620      	mov	r0, r4
 801802a:	b00b      	add	sp, #44	@ 0x2c
 801802c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018030:	24c9      	movs	r4, #201	@ 0xc9
 8018032:	e7f0      	b.n	8018016 <rcl_expand_topic_name+0x16a>
 8018034:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018038:	9806      	ldr	r0, [sp, #24]
 801803a:	1c69      	adds	r1, r5, #1
 801803c:	f7fd fa9a 	bl	8015574 <rcutils_string_map_getn>
 8018040:	4681      	mov	r9, r0
 8018042:	2800      	cmp	r0, #0
 8018044:	d1bf      	bne.n	8017fc6 <rcl_expand_topic_name+0x11a>
 8018046:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018048:	aa16      	add	r2, sp, #88	@ 0x58
 801804a:	6018      	str	r0, [r3, #0]
 801804c:	ca07      	ldmia	r2, {r0, r1, r2}
 801804e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018052:	ab14      	add	r3, sp, #80	@ 0x50
 8018054:	cb0c      	ldmia	r3, {r2, r3}
 8018056:	4651      	mov	r1, sl
 8018058:	4628      	mov	r0, r5
 801805a:	f7fd f971 	bl	8015340 <rcutils_strndup>
 801805e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018060:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018062:	4798      	blx	r3
 8018064:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018066:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018068:	4658      	mov	r0, fp
 801806a:	2469      	movs	r4, #105	@ 0x69
 801806c:	4798      	blx	r3
 801806e:	e7d2      	b.n	8018016 <rcl_expand_topic_name+0x16a>
 8018070:	2800      	cmp	r0, #0
 8018072:	d05b      	beq.n	801812c <rcl_expand_topic_name+0x280>
 8018074:	46c1      	mov	r9, r8
 8018076:	46a2      	mov	sl, r4
 8018078:	e782      	b.n	8017f80 <rcl_expand_topic_name+0xd4>
 801807a:	46b1      	mov	r9, r6
 801807c:	e7a3      	b.n	8017fc6 <rcl_expand_topic_name+0x11a>
 801807e:	2800      	cmp	r0, #0
 8018080:	d1f8      	bne.n	8018074 <rcl_expand_topic_name+0x1c8>
 8018082:	4638      	mov	r0, r7
 8018084:	f7e8 f8ae 	bl	80001e4 <strlen>
 8018088:	4a35      	ldr	r2, [pc, #212]	@ (8018160 <rcl_expand_topic_name+0x2b4>)
 801808a:	4b36      	ldr	r3, [pc, #216]	@ (8018164 <rcl_expand_topic_name+0x2b8>)
 801808c:	f8cd 8010 	str.w	r8, [sp, #16]
 8018090:	2801      	cmp	r0, #1
 8018092:	bf18      	it	ne
 8018094:	4613      	movne	r3, r2
 8018096:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801809a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801809e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80180a0:	9703      	str	r7, [sp, #12]
 80180a2:	9200      	str	r2, [sp, #0]
 80180a4:	ab14      	add	r3, sp, #80	@ 0x50
 80180a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80180a8:	f7fd f80e 	bl	80150c8 <rcutils_format_string_limit>
 80180ac:	4682      	mov	sl, r0
 80180ae:	4653      	mov	r3, sl
 80180b0:	b32b      	cbz	r3, 80180fe <rcl_expand_topic_name+0x252>
 80180b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80180b4:	f8c3 a000 	str.w	sl, [r3]
 80180b8:	e7ad      	b.n	8018016 <rcl_expand_topic_name+0x16a>
 80180ba:	f89a 3000 	ldrb.w	r3, [sl]
 80180be:	2b2f      	cmp	r3, #47	@ 0x2f
 80180c0:	d0f7      	beq.n	80180b2 <rcl_expand_topic_name+0x206>
 80180c2:	4638      	mov	r0, r7
 80180c4:	f7e8 f88e 	bl	80001e4 <strlen>
 80180c8:	4a25      	ldr	r2, [pc, #148]	@ (8018160 <rcl_expand_topic_name+0x2b4>)
 80180ca:	4b26      	ldr	r3, [pc, #152]	@ (8018164 <rcl_expand_topic_name+0x2b8>)
 80180cc:	f8cd a010 	str.w	sl, [sp, #16]
 80180d0:	2801      	cmp	r0, #1
 80180d2:	bf18      	it	ne
 80180d4:	4613      	movne	r3, r2
 80180d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80180da:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80180de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80180e0:	9703      	str	r7, [sp, #12]
 80180e2:	9200      	str	r2, [sp, #0]
 80180e4:	ab14      	add	r3, sp, #80	@ 0x50
 80180e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80180e8:	f7fc ffee 	bl	80150c8 <rcutils_format_string_limit>
 80180ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80180ee:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80180f0:	4605      	mov	r5, r0
 80180f2:	4650      	mov	r0, sl
 80180f4:	4798      	blx	r3
 80180f6:	46aa      	mov	sl, r5
 80180f8:	e7d9      	b.n	80180ae <rcl_expand_topic_name+0x202>
 80180fa:	24ca      	movs	r4, #202	@ 0xca
 80180fc:	e78b      	b.n	8018016 <rcl_expand_topic_name+0x16a>
 80180fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018100:	2300      	movs	r3, #0
 8018102:	6013      	str	r3, [r2, #0]
 8018104:	240a      	movs	r4, #10
 8018106:	e786      	b.n	8018016 <rcl_expand_topic_name+0x16a>
 8018108:	465b      	mov	r3, fp
 801810a:	9c07      	ldr	r4, [sp, #28]
 801810c:	46da      	mov	sl, fp
 801810e:	2b00      	cmp	r3, #0
 8018110:	d1d3      	bne.n	80180ba <rcl_expand_topic_name+0x20e>
 8018112:	f898 3000 	ldrb.w	r3, [r8]
 8018116:	2b2f      	cmp	r3, #47	@ 0x2f
 8018118:	d0cb      	beq.n	80180b2 <rcl_expand_topic_name+0x206>
 801811a:	e7b2      	b.n	8018082 <rcl_expand_topic_name+0x1d6>
 801811c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8018120:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018122:	6015      	str	r5, [r2, #0]
 8018124:	4658      	mov	r0, fp
 8018126:	4798      	blx	r3
 8018128:	240a      	movs	r4, #10
 801812a:	e774      	b.n	8018016 <rcl_expand_topic_name+0x16a>
 801812c:	ab17      	add	r3, sp, #92	@ 0x5c
 801812e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018132:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018136:	ab14      	add	r3, sp, #80	@ 0x50
 8018138:	cb0e      	ldmia	r3, {r1, r2, r3}
 801813a:	4640      	mov	r0, r8
 801813c:	f7fd f8de 	bl	80152fc <rcutils_strdup>
 8018140:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018142:	2800      	cmp	r0, #0
 8018144:	6018      	str	r0, [r3, #0]
 8018146:	bf08      	it	eq
 8018148:	240a      	moveq	r4, #10
 801814a:	e764      	b.n	8018016 <rcl_expand_topic_name+0x16a>
 801814c:	0801a908 	.word	0x0801a908
 8018150:	0801a1d0 	.word	0x0801a1d0
 8018154:	0801a910 	.word	0x0801a910
 8018158:	0801a918 	.word	0x0801a918
 801815c:	0801a920 	.word	0x0801a920
 8018160:	0801a364 	.word	0x0801a364
 8018164:	0801a1e0 	.word	0x0801a1e0

08018168 <rcl_get_default_topic_name_substitutions>:
 8018168:	2800      	cmp	r0, #0
 801816a:	bf0c      	ite	eq
 801816c:	200b      	moveq	r0, #11
 801816e:	2000      	movne	r0, #0
 8018170:	4770      	bx	lr
 8018172:	bf00      	nop

08018174 <rcl_get_zero_initialized_guard_condition>:
 8018174:	4a03      	ldr	r2, [pc, #12]	@ (8018184 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018176:	4603      	mov	r3, r0
 8018178:	e892 0003 	ldmia.w	r2, {r0, r1}
 801817c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018180:	4618      	mov	r0, r3
 8018182:	4770      	bx	lr
 8018184:	0801a92c 	.word	0x0801a92c

08018188 <rcl_guard_condition_init_from_rmw>:
 8018188:	b082      	sub	sp, #8
 801818a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801818e:	b086      	sub	sp, #24
 8018190:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018194:	4604      	mov	r4, r0
 8018196:	f84c 3f04 	str.w	r3, [ip, #4]!
 801819a:	460e      	mov	r6, r1
 801819c:	4617      	mov	r7, r2
 801819e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80181a2:	f10d 0e04 	add.w	lr, sp, #4
 80181a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80181aa:	f8dc 3000 	ldr.w	r3, [ip]
 80181ae:	f8ce 3000 	str.w	r3, [lr]
 80181b2:	a801      	add	r0, sp, #4
 80181b4:	f7f7 ffce 	bl	8010154 <rcutils_allocator_is_valid>
 80181b8:	b350      	cbz	r0, 8018210 <rcl_guard_condition_init_from_rmw+0x88>
 80181ba:	b34c      	cbz	r4, 8018210 <rcl_guard_condition_init_from_rmw+0x88>
 80181bc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80181c0:	f1b8 0f00 	cmp.w	r8, #0
 80181c4:	d11e      	bne.n	8018204 <rcl_guard_condition_init_from_rmw+0x7c>
 80181c6:	b31f      	cbz	r7, 8018210 <rcl_guard_condition_init_from_rmw+0x88>
 80181c8:	4638      	mov	r0, r7
 80181ca:	f7fc f9df 	bl	801458c <rcl_context_is_valid>
 80181ce:	b328      	cbz	r0, 801821c <rcl_guard_condition_init_from_rmw+0x94>
 80181d0:	9b01      	ldr	r3, [sp, #4]
 80181d2:	9905      	ldr	r1, [sp, #20]
 80181d4:	201c      	movs	r0, #28
 80181d6:	4798      	blx	r3
 80181d8:	4605      	mov	r5, r0
 80181da:	6060      	str	r0, [r4, #4]
 80181dc:	b358      	cbz	r0, 8018236 <rcl_guard_condition_init_from_rmw+0xae>
 80181de:	b1fe      	cbz	r6, 8018220 <rcl_guard_condition_init_from_rmw+0x98>
 80181e0:	6006      	str	r6, [r0, #0]
 80181e2:	f880 8004 	strb.w	r8, [r0, #4]
 80181e6:	ac01      	add	r4, sp, #4
 80181e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80181ea:	f105 0c08 	add.w	ip, r5, #8
 80181ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80181f2:	6823      	ldr	r3, [r4, #0]
 80181f4:	f8cc 3000 	str.w	r3, [ip]
 80181f8:	2000      	movs	r0, #0
 80181fa:	b006      	add	sp, #24
 80181fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018200:	b002      	add	sp, #8
 8018202:	4770      	bx	lr
 8018204:	2064      	movs	r0, #100	@ 0x64
 8018206:	b006      	add	sp, #24
 8018208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801820c:	b002      	add	sp, #8
 801820e:	4770      	bx	lr
 8018210:	200b      	movs	r0, #11
 8018212:	b006      	add	sp, #24
 8018214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018218:	b002      	add	sp, #8
 801821a:	4770      	bx	lr
 801821c:	2065      	movs	r0, #101	@ 0x65
 801821e:	e7f2      	b.n	8018206 <rcl_guard_condition_init_from_rmw+0x7e>
 8018220:	6838      	ldr	r0, [r7, #0]
 8018222:	3028      	adds	r0, #40	@ 0x28
 8018224:	f000 fa50 	bl	80186c8 <rmw_create_guard_condition>
 8018228:	6028      	str	r0, [r5, #0]
 801822a:	6865      	ldr	r5, [r4, #4]
 801822c:	682e      	ldr	r6, [r5, #0]
 801822e:	b126      	cbz	r6, 801823a <rcl_guard_condition_init_from_rmw+0xb2>
 8018230:	2301      	movs	r3, #1
 8018232:	712b      	strb	r3, [r5, #4]
 8018234:	e7d7      	b.n	80181e6 <rcl_guard_condition_init_from_rmw+0x5e>
 8018236:	200a      	movs	r0, #10
 8018238:	e7e5      	b.n	8018206 <rcl_guard_condition_init_from_rmw+0x7e>
 801823a:	4628      	mov	r0, r5
 801823c:	9b02      	ldr	r3, [sp, #8]
 801823e:	9905      	ldr	r1, [sp, #20]
 8018240:	4798      	blx	r3
 8018242:	6066      	str	r6, [r4, #4]
 8018244:	2001      	movs	r0, #1
 8018246:	e7de      	b.n	8018206 <rcl_guard_condition_init_from_rmw+0x7e>

08018248 <rcl_guard_condition_fini>:
 8018248:	b570      	push	{r4, r5, r6, lr}
 801824a:	b082      	sub	sp, #8
 801824c:	b1f0      	cbz	r0, 801828c <rcl_guard_condition_fini+0x44>
 801824e:	6843      	ldr	r3, [r0, #4]
 8018250:	4604      	mov	r4, r0
 8018252:	b163      	cbz	r3, 801826e <rcl_guard_condition_fini+0x26>
 8018254:	6818      	ldr	r0, [r3, #0]
 8018256:	68de      	ldr	r6, [r3, #12]
 8018258:	6999      	ldr	r1, [r3, #24]
 801825a:	b160      	cbz	r0, 8018276 <rcl_guard_condition_fini+0x2e>
 801825c:	791d      	ldrb	r5, [r3, #4]
 801825e:	b965      	cbnz	r5, 801827a <rcl_guard_condition_fini+0x32>
 8018260:	4618      	mov	r0, r3
 8018262:	47b0      	blx	r6
 8018264:	2300      	movs	r3, #0
 8018266:	4628      	mov	r0, r5
 8018268:	6063      	str	r3, [r4, #4]
 801826a:	b002      	add	sp, #8
 801826c:	bd70      	pop	{r4, r5, r6, pc}
 801826e:	461d      	mov	r5, r3
 8018270:	4628      	mov	r0, r5
 8018272:	b002      	add	sp, #8
 8018274:	bd70      	pop	{r4, r5, r6, pc}
 8018276:	4605      	mov	r5, r0
 8018278:	e7f2      	b.n	8018260 <rcl_guard_condition_fini+0x18>
 801827a:	9101      	str	r1, [sp, #4]
 801827c:	f000 fa38 	bl	80186f0 <rmw_destroy_guard_condition>
 8018280:	1e05      	subs	r5, r0, #0
 8018282:	6863      	ldr	r3, [r4, #4]
 8018284:	9901      	ldr	r1, [sp, #4]
 8018286:	bf18      	it	ne
 8018288:	2501      	movne	r5, #1
 801828a:	e7e9      	b.n	8018260 <rcl_guard_condition_fini+0x18>
 801828c:	250b      	movs	r5, #11
 801828e:	4628      	mov	r0, r5
 8018290:	b002      	add	sp, #8
 8018292:	bd70      	pop	{r4, r5, r6, pc}

08018294 <rcl_guard_condition_get_default_options>:
 8018294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018296:	b087      	sub	sp, #28
 8018298:	4606      	mov	r6, r0
 801829a:	4668      	mov	r0, sp
 801829c:	f7f7 ff4c 	bl	8010138 <rcutils_get_default_allocator>
 80182a0:	4b09      	ldr	r3, [pc, #36]	@ (80182c8 <rcl_guard_condition_get_default_options+0x34>)
 80182a2:	46ee      	mov	lr, sp
 80182a4:	469c      	mov	ip, r3
 80182a6:	461d      	mov	r5, r3
 80182a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80182ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80182b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80182b2:	4634      	mov	r4, r6
 80182b4:	f8de 7000 	ldr.w	r7, [lr]
 80182b8:	f8cc 7000 	str.w	r7, [ip]
 80182bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80182be:	4630      	mov	r0, r6
 80182c0:	6027      	str	r7, [r4, #0]
 80182c2:	b007      	add	sp, #28
 80182c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182c6:	bf00      	nop
 80182c8:	2000ac7c 	.word	0x2000ac7c

080182cc <rcl_validate_topic_name>:
 80182cc:	2800      	cmp	r0, #0
 80182ce:	d07a      	beq.n	80183c6 <rcl_validate_topic_name+0xfa>
 80182d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182d4:	460e      	mov	r6, r1
 80182d6:	2900      	cmp	r1, #0
 80182d8:	d07c      	beq.n	80183d4 <rcl_validate_topic_name+0x108>
 80182da:	4617      	mov	r7, r2
 80182dc:	4605      	mov	r5, r0
 80182de:	f7e7 ff81 	bl	80001e4 <strlen>
 80182e2:	b1b0      	cbz	r0, 8018312 <rcl_validate_topic_name+0x46>
 80182e4:	f895 9000 	ldrb.w	r9, [r5]
 80182e8:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801846c <rcl_validate_topic_name+0x1a0>
 80182ec:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80182f0:	f013 0304 	ands.w	r3, r3, #4
 80182f4:	d169      	bne.n	80183ca <rcl_validate_topic_name+0xfe>
 80182f6:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80182fa:	f815 2008 	ldrb.w	r2, [r5, r8]
 80182fe:	2a2f      	cmp	r2, #47	@ 0x2f
 8018300:	d10e      	bne.n	8018320 <rcl_validate_topic_name+0x54>
 8018302:	2202      	movs	r2, #2
 8018304:	6032      	str	r2, [r6, #0]
 8018306:	b36f      	cbz	r7, 8018364 <rcl_validate_topic_name+0x98>
 8018308:	f8c7 8000 	str.w	r8, [r7]
 801830c:	4618      	mov	r0, r3
 801830e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018312:	2301      	movs	r3, #1
 8018314:	6033      	str	r3, [r6, #0]
 8018316:	b32f      	cbz	r7, 8018364 <rcl_validate_topic_name+0x98>
 8018318:	2000      	movs	r0, #0
 801831a:	6038      	str	r0, [r7, #0]
 801831c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018320:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8018324:	461c      	mov	r4, r3
 8018326:	4619      	mov	r1, r3
 8018328:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801832c:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018330:	f1be 0f09 	cmp.w	lr, #9
 8018334:	d919      	bls.n	801836a <rcl_validate_topic_name+0x9e>
 8018336:	f022 0e20 	bic.w	lr, r2, #32
 801833a:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801833e:	f1be 0f19 	cmp.w	lr, #25
 8018342:	d912      	bls.n	801836a <rcl_validate_topic_name+0x9e>
 8018344:	2a5f      	cmp	r2, #95	@ 0x5f
 8018346:	d019      	beq.n	801837c <rcl_validate_topic_name+0xb0>
 8018348:	2a2f      	cmp	r2, #47	@ 0x2f
 801834a:	d051      	beq.n	80183f0 <rcl_validate_topic_name+0x124>
 801834c:	2a7e      	cmp	r2, #126	@ 0x7e
 801834e:	d048      	beq.n	80183e2 <rcl_validate_topic_name+0x116>
 8018350:	2a7b      	cmp	r2, #123	@ 0x7b
 8018352:	d054      	beq.n	80183fe <rcl_validate_topic_name+0x132>
 8018354:	2a7d      	cmp	r2, #125	@ 0x7d
 8018356:	d161      	bne.n	801841c <rcl_validate_topic_name+0x150>
 8018358:	2c00      	cmp	r4, #0
 801835a:	d155      	bne.n	8018408 <rcl_validate_topic_name+0x13c>
 801835c:	2305      	movs	r3, #5
 801835e:	6033      	str	r3, [r6, #0]
 8018360:	b107      	cbz	r7, 8018364 <rcl_validate_topic_name+0x98>
 8018362:	6039      	str	r1, [r7, #0]
 8018364:	2000      	movs	r0, #0
 8018366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801836a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801836e:	0752      	lsls	r2, r2, #29
 8018370:	d504      	bpl.n	801837c <rcl_validate_topic_name+0xb0>
 8018372:	b11c      	cbz	r4, 801837c <rcl_validate_topic_name+0xb0>
 8018374:	b111      	cbz	r1, 801837c <rcl_validate_topic_name+0xb0>
 8018376:	1e4a      	subs	r2, r1, #1
 8018378:	429a      	cmp	r2, r3
 801837a:	d02d      	beq.n	80183d8 <rcl_validate_topic_name+0x10c>
 801837c:	3101      	adds	r1, #1
 801837e:	4288      	cmp	r0, r1
 8018380:	d1d2      	bne.n	8018328 <rcl_validate_topic_name+0x5c>
 8018382:	2c00      	cmp	r4, #0
 8018384:	d145      	bne.n	8018412 <rcl_validate_topic_name+0x146>
 8018386:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801838a:	d04f      	beq.n	801842c <rcl_validate_topic_name+0x160>
 801838c:	4620      	mov	r0, r4
 801838e:	2301      	movs	r3, #1
 8018390:	e006      	b.n	80183a0 <rcl_validate_topic_name+0xd4>
 8018392:	428b      	cmp	r3, r1
 8018394:	f105 0501 	add.w	r5, r5, #1
 8018398:	f103 0201 	add.w	r2, r3, #1
 801839c:	d236      	bcs.n	801840c <rcl_validate_topic_name+0x140>
 801839e:	4613      	mov	r3, r2
 80183a0:	4580      	cmp	r8, r0
 80183a2:	f100 0001 	add.w	r0, r0, #1
 80183a6:	d0f4      	beq.n	8018392 <rcl_validate_topic_name+0xc6>
 80183a8:	782a      	ldrb	r2, [r5, #0]
 80183aa:	2a2f      	cmp	r2, #47	@ 0x2f
 80183ac:	d1f1      	bne.n	8018392 <rcl_validate_topic_name+0xc6>
 80183ae:	786a      	ldrb	r2, [r5, #1]
 80183b0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80183b4:	0754      	lsls	r4, r2, #29
 80183b6:	d5ec      	bpl.n	8018392 <rcl_validate_topic_name+0xc6>
 80183b8:	2204      	movs	r2, #4
 80183ba:	6032      	str	r2, [r6, #0]
 80183bc:	2f00      	cmp	r7, #0
 80183be:	d0d1      	beq.n	8018364 <rcl_validate_topic_name+0x98>
 80183c0:	603b      	str	r3, [r7, #0]
 80183c2:	2000      	movs	r0, #0
 80183c4:	e7aa      	b.n	801831c <rcl_validate_topic_name+0x50>
 80183c6:	200b      	movs	r0, #11
 80183c8:	4770      	bx	lr
 80183ca:	2304      	movs	r3, #4
 80183cc:	6033      	str	r3, [r6, #0]
 80183ce:	2f00      	cmp	r7, #0
 80183d0:	d1a2      	bne.n	8018318 <rcl_validate_topic_name+0x4c>
 80183d2:	e7c7      	b.n	8018364 <rcl_validate_topic_name+0x98>
 80183d4:	200b      	movs	r0, #11
 80183d6:	e7a1      	b.n	801831c <rcl_validate_topic_name+0x50>
 80183d8:	2309      	movs	r3, #9
 80183da:	6033      	str	r3, [r6, #0]
 80183dc:	2f00      	cmp	r7, #0
 80183de:	d1c0      	bne.n	8018362 <rcl_validate_topic_name+0x96>
 80183e0:	e7c0      	b.n	8018364 <rcl_validate_topic_name+0x98>
 80183e2:	2900      	cmp	r1, #0
 80183e4:	d0ca      	beq.n	801837c <rcl_validate_topic_name+0xb0>
 80183e6:	2306      	movs	r3, #6
 80183e8:	6033      	str	r3, [r6, #0]
 80183ea:	2f00      	cmp	r7, #0
 80183ec:	d1b9      	bne.n	8018362 <rcl_validate_topic_name+0x96>
 80183ee:	e7b9      	b.n	8018364 <rcl_validate_topic_name+0x98>
 80183f0:	2c00      	cmp	r4, #0
 80183f2:	d0c3      	beq.n	801837c <rcl_validate_topic_name+0xb0>
 80183f4:	2308      	movs	r3, #8
 80183f6:	6033      	str	r3, [r6, #0]
 80183f8:	2f00      	cmp	r7, #0
 80183fa:	d1b2      	bne.n	8018362 <rcl_validate_topic_name+0x96>
 80183fc:	e7b2      	b.n	8018364 <rcl_validate_topic_name+0x98>
 80183fe:	2c00      	cmp	r4, #0
 8018400:	d1f8      	bne.n	80183f4 <rcl_validate_topic_name+0x128>
 8018402:	460b      	mov	r3, r1
 8018404:	2401      	movs	r4, #1
 8018406:	e7b9      	b.n	801837c <rcl_validate_topic_name+0xb0>
 8018408:	2400      	movs	r4, #0
 801840a:	e7b7      	b.n	801837c <rcl_validate_topic_name+0xb0>
 801840c:	2000      	movs	r0, #0
 801840e:	6030      	str	r0, [r6, #0]
 8018410:	e784      	b.n	801831c <rcl_validate_topic_name+0x50>
 8018412:	2205      	movs	r2, #5
 8018414:	6032      	str	r2, [r6, #0]
 8018416:	2f00      	cmp	r7, #0
 8018418:	d1d2      	bne.n	80183c0 <rcl_validate_topic_name+0xf4>
 801841a:	e7a3      	b.n	8018364 <rcl_validate_topic_name+0x98>
 801841c:	2c00      	cmp	r4, #0
 801841e:	bf14      	ite	ne
 8018420:	2308      	movne	r3, #8
 8018422:	2303      	moveq	r3, #3
 8018424:	6033      	str	r3, [r6, #0]
 8018426:	2f00      	cmp	r7, #0
 8018428:	d19b      	bne.n	8018362 <rcl_validate_topic_name+0x96>
 801842a:	e79b      	b.n	8018364 <rcl_validate_topic_name+0x98>
 801842c:	2301      	movs	r3, #1
 801842e:	e00a      	b.n	8018446 <rcl_validate_topic_name+0x17a>
 8018430:	2c01      	cmp	r4, #1
 8018432:	d013      	beq.n	801845c <rcl_validate_topic_name+0x190>
 8018434:	4299      	cmp	r1, r3
 8018436:	f104 0401 	add.w	r4, r4, #1
 801843a:	f105 0501 	add.w	r5, r5, #1
 801843e:	f103 0201 	add.w	r2, r3, #1
 8018442:	d9e3      	bls.n	801840c <rcl_validate_topic_name+0x140>
 8018444:	4613      	mov	r3, r2
 8018446:	45a0      	cmp	r8, r4
 8018448:	d0f4      	beq.n	8018434 <rcl_validate_topic_name+0x168>
 801844a:	782a      	ldrb	r2, [r5, #0]
 801844c:	2a2f      	cmp	r2, #47	@ 0x2f
 801844e:	d1ef      	bne.n	8018430 <rcl_validate_topic_name+0x164>
 8018450:	786a      	ldrb	r2, [r5, #1]
 8018452:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018456:	0752      	lsls	r2, r2, #29
 8018458:	d5ec      	bpl.n	8018434 <rcl_validate_topic_name+0x168>
 801845a:	e7ad      	b.n	80183b8 <rcl_validate_topic_name+0xec>
 801845c:	2307      	movs	r3, #7
 801845e:	6033      	str	r3, [r6, #0]
 8018460:	2f00      	cmp	r7, #0
 8018462:	f43f af7f 	beq.w	8018364 <rcl_validate_topic_name+0x98>
 8018466:	603c      	str	r4, [r7, #0]
 8018468:	2000      	movs	r0, #0
 801846a:	e757      	b.n	801831c <rcl_validate_topic_name+0x50>
 801846c:	0801a9a4 	.word	0x0801a9a4

08018470 <on_status>:
 8018470:	b082      	sub	sp, #8
 8018472:	b002      	add	sp, #8
 8018474:	4770      	bx	lr
 8018476:	bf00      	nop

08018478 <on_topic>:
 8018478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801847c:	4a22      	ldr	r2, [pc, #136]	@ (8018508 <on_topic+0x90>)
 801847e:	b094      	sub	sp, #80	@ 0x50
 8018480:	6812      	ldr	r2, [r2, #0]
 8018482:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8018484:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018488:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801848c:	b3c2      	cbz	r2, 8018500 <on_topic+0x88>
 801848e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8018492:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8018496:	e001      	b.n	801849c <on_topic+0x24>
 8018498:	6852      	ldr	r2, [r2, #4]
 801849a:	b38a      	cbz	r2, 8018500 <on_topic+0x88>
 801849c:	6894      	ldr	r4, [r2, #8]
 801849e:	8aa3      	ldrh	r3, [r4, #20]
 80184a0:	428b      	cmp	r3, r1
 80184a2:	d1f9      	bne.n	8018498 <on_topic+0x20>
 80184a4:	7da3      	ldrb	r3, [r4, #22]
 80184a6:	4283      	cmp	r3, r0
 80184a8:	d1f6      	bne.n	8018498 <on_topic+0x20>
 80184aa:	2248      	movs	r2, #72	@ 0x48
 80184ac:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80184b0:	4668      	mov	r0, sp
 80184b2:	f000 fecc 	bl	801924e <memcpy>
 80184b6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80184ba:	cb0c      	ldmia	r3, {r2, r3}
 80184bc:	4620      	mov	r0, r4
 80184be:	f7f8 fa2b 	bl	8010918 <rmw_uxrce_get_static_input_buffer_for_entity>
 80184c2:	4607      	mov	r7, r0
 80184c4:	b1e0      	cbz	r0, 8018500 <on_topic+0x88>
 80184c6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80184ca:	4632      	mov	r2, r6
 80184cc:	4628      	mov	r0, r5
 80184ce:	f108 0110 	add.w	r1, r8, #16
 80184d2:	f7fe f831 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 80184d6:	b930      	cbnz	r0, 80184e6 <on_topic+0x6e>
 80184d8:	480c      	ldr	r0, [pc, #48]	@ (801850c <on_topic+0x94>)
 80184da:	4639      	mov	r1, r7
 80184dc:	b014      	add	sp, #80	@ 0x50
 80184de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184e2:	f7fd ba39 	b.w	8015958 <put_memory>
 80184e6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80184ea:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80184ee:	f7fd ff19 	bl	8016324 <rmw_uros_epoch_nanos>
 80184f2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80184f6:	2305      	movs	r3, #5
 80184f8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80184fc:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8018500:	b014      	add	sp, #80	@ 0x50
 8018502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018506:	bf00      	nop
 8018508:	2000ab4c 	.word	0x2000ab4c
 801850c:	2000ab3c 	.word	0x2000ab3c

08018510 <on_request>:
 8018510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018514:	4823      	ldr	r0, [pc, #140]	@ (80185a4 <on_request+0x94>)
 8018516:	b094      	sub	sp, #80	@ 0x50
 8018518:	6800      	ldr	r0, [r0, #0]
 801851a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801851c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018520:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018522:	2800      	cmp	r0, #0
 8018524:	d03b      	beq.n	801859e <on_request+0x8e>
 8018526:	461d      	mov	r5, r3
 8018528:	e001      	b.n	801852e <on_request+0x1e>
 801852a:	6840      	ldr	r0, [r0, #4]
 801852c:	b3b8      	cbz	r0, 801859e <on_request+0x8e>
 801852e:	6884      	ldr	r4, [r0, #8]
 8018530:	8b21      	ldrh	r1, [r4, #24]
 8018532:	4291      	cmp	r1, r2
 8018534:	d1f9      	bne.n	801852a <on_request+0x1a>
 8018536:	2248      	movs	r2, #72	@ 0x48
 8018538:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801853c:	4668      	mov	r0, sp
 801853e:	f000 fe86 	bl	801924e <memcpy>
 8018542:	f104 0320 	add.w	r3, r4, #32
 8018546:	cb0c      	ldmia	r3, {r2, r3}
 8018548:	4620      	mov	r0, r4
 801854a:	f7f8 f9e5 	bl	8010918 <rmw_uxrce_get_static_input_buffer_for_entity>
 801854e:	4680      	mov	r8, r0
 8018550:	b328      	cbz	r0, 801859e <on_request+0x8e>
 8018552:	4638      	mov	r0, r7
 8018554:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8018558:	4632      	mov	r2, r6
 801855a:	f107 0110 	add.w	r1, r7, #16
 801855e:	f7fd ffeb 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 8018562:	b930      	cbnz	r0, 8018572 <on_request+0x62>
 8018564:	4810      	ldr	r0, [pc, #64]	@ (80185a8 <on_request+0x98>)
 8018566:	4641      	mov	r1, r8
 8018568:	b014      	add	sp, #80	@ 0x50
 801856a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801856e:	f7fd b9f3 	b.w	8015958 <put_memory>
 8018572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018574:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8018578:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801857c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8018580:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018584:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018588:	e88c 0003 	stmia.w	ip, {r0, r1}
 801858c:	f7fd feca 	bl	8016324 <rmw_uros_epoch_nanos>
 8018590:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8018594:	2303      	movs	r3, #3
 8018596:	e942 0102 	strd	r0, r1, [r2, #-8]
 801859a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801859e:	b014      	add	sp, #80	@ 0x50
 80185a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185a4:	2000ab1c 	.word	0x2000ab1c
 80185a8:	2000ab3c 	.word	0x2000ab3c

080185ac <on_reply>:
 80185ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185b0:	4821      	ldr	r0, [pc, #132]	@ (8018638 <on_reply+0x8c>)
 80185b2:	b094      	sub	sp, #80	@ 0x50
 80185b4:	6800      	ldr	r0, [r0, #0]
 80185b6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80185b8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80185bc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80185be:	b3b8      	cbz	r0, 8018630 <on_reply+0x84>
 80185c0:	461d      	mov	r5, r3
 80185c2:	e001      	b.n	80185c8 <on_reply+0x1c>
 80185c4:	6840      	ldr	r0, [r0, #4]
 80185c6:	b398      	cbz	r0, 8018630 <on_reply+0x84>
 80185c8:	6884      	ldr	r4, [r0, #8]
 80185ca:	8b21      	ldrh	r1, [r4, #24]
 80185cc:	4291      	cmp	r1, r2
 80185ce:	d1f9      	bne.n	80185c4 <on_reply+0x18>
 80185d0:	2248      	movs	r2, #72	@ 0x48
 80185d2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80185d6:	4668      	mov	r0, sp
 80185d8:	f000 fe39 	bl	801924e <memcpy>
 80185dc:	f104 0320 	add.w	r3, r4, #32
 80185e0:	cb0c      	ldmia	r3, {r2, r3}
 80185e2:	4620      	mov	r0, r4
 80185e4:	f7f8 f998 	bl	8010918 <rmw_uxrce_get_static_input_buffer_for_entity>
 80185e8:	4680      	mov	r8, r0
 80185ea:	b308      	cbz	r0, 8018630 <on_reply+0x84>
 80185ec:	4638      	mov	r0, r7
 80185ee:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80185f2:	4632      	mov	r2, r6
 80185f4:	f107 0110 	add.w	r1, r7, #16
 80185f8:	f7fd ff9e 	bl	8016538 <ucdr_deserialize_array_uint8_t>
 80185fc:	b930      	cbnz	r0, 801860c <on_reply+0x60>
 80185fe:	480f      	ldr	r0, [pc, #60]	@ (801863c <on_reply+0x90>)
 8018600:	4641      	mov	r1, r8
 8018602:	b014      	add	sp, #80	@ 0x50
 8018604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018608:	f7fd b9a6 	b.w	8015958 <put_memory>
 801860c:	2200      	movs	r2, #0
 801860e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8018612:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8018616:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801861a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801861e:	f7fd fe81 	bl	8016324 <rmw_uros_epoch_nanos>
 8018622:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8018626:	2304      	movs	r3, #4
 8018628:	e942 0102 	strd	r0, r1, [r2, #-8]
 801862c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8018630:	b014      	add	sp, #80	@ 0x50
 8018632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018636:	bf00      	nop
 8018638:	20006230 	.word	0x20006230
 801863c:	2000ab3c 	.word	0x2000ab3c

08018640 <rmw_destroy_client>:
 8018640:	b570      	push	{r4, r5, r6, lr}
 8018642:	b128      	cbz	r0, 8018650 <rmw_destroy_client+0x10>
 8018644:	4604      	mov	r4, r0
 8018646:	6800      	ldr	r0, [r0, #0]
 8018648:	460d      	mov	r5, r1
 801864a:	f7f8 fa35 	bl	8010ab8 <is_uxrce_rmw_identifier_valid>
 801864e:	b910      	cbnz	r0, 8018656 <rmw_destroy_client+0x16>
 8018650:	2401      	movs	r4, #1
 8018652:	4620      	mov	r0, r4
 8018654:	bd70      	pop	{r4, r5, r6, pc}
 8018656:	6863      	ldr	r3, [r4, #4]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d0f9      	beq.n	8018650 <rmw_destroy_client+0x10>
 801865c:	2d00      	cmp	r5, #0
 801865e:	d0f7      	beq.n	8018650 <rmw_destroy_client+0x10>
 8018660:	6828      	ldr	r0, [r5, #0]
 8018662:	f7f8 fa29 	bl	8010ab8 <is_uxrce_rmw_identifier_valid>
 8018666:	2800      	cmp	r0, #0
 8018668:	d0f2      	beq.n	8018650 <rmw_destroy_client+0x10>
 801866a:	686e      	ldr	r6, [r5, #4]
 801866c:	2e00      	cmp	r6, #0
 801866e:	d0ef      	beq.n	8018650 <rmw_destroy_client+0x10>
 8018670:	6864      	ldr	r4, [r4, #4]
 8018672:	6932      	ldr	r2, [r6, #16]
 8018674:	6920      	ldr	r0, [r4, #16]
 8018676:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801867a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801867e:	6819      	ldr	r1, [r3, #0]
 8018680:	f7fe fe38 	bl	80172f4 <uxr_buffer_cancel_data>
 8018684:	4602      	mov	r2, r0
 8018686:	6920      	ldr	r0, [r4, #16]
 8018688:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801868c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018690:	f7f8 f992 	bl	80109b8 <run_xrce_session>
 8018694:	6920      	ldr	r0, [r4, #16]
 8018696:	6932      	ldr	r2, [r6, #16]
 8018698:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801869c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80186a0:	6819      	ldr	r1, [r3, #0]
 80186a2:	f7f9 fac5 	bl	8011c30 <uxr_buffer_delete_entity>
 80186a6:	4602      	mov	r2, r0
 80186a8:	6920      	ldr	r0, [r4, #16]
 80186aa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80186ae:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80186b2:	f7f8 f981 	bl	80109b8 <run_xrce_session>
 80186b6:	2800      	cmp	r0, #0
 80186b8:	4628      	mov	r0, r5
 80186ba:	bf14      	ite	ne
 80186bc:	2400      	movne	r4, #0
 80186be:	2402      	moveq	r4, #2
 80186c0:	f7f8 f908 	bl	80108d4 <rmw_uxrce_fini_client_memory>
 80186c4:	e7c5      	b.n	8018652 <rmw_destroy_client+0x12>
 80186c6:	bf00      	nop

080186c8 <rmw_create_guard_condition>:
 80186c8:	b538      	push	{r3, r4, r5, lr}
 80186ca:	4605      	mov	r5, r0
 80186cc:	4807      	ldr	r0, [pc, #28]	@ (80186ec <rmw_create_guard_condition+0x24>)
 80186ce:	f7fd f933 	bl	8015938 <get_memory>
 80186d2:	b148      	cbz	r0, 80186e8 <rmw_create_guard_condition+0x20>
 80186d4:	6884      	ldr	r4, [r0, #8]
 80186d6:	2300      	movs	r3, #0
 80186d8:	7423      	strb	r3, [r4, #16]
 80186da:	61e5      	str	r5, [r4, #28]
 80186dc:	f7fd f950 	bl	8015980 <rmw_get_implementation_identifier>
 80186e0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80186e4:	f104 0014 	add.w	r0, r4, #20
 80186e8:	bd38      	pop	{r3, r4, r5, pc}
 80186ea:	bf00      	nop
 80186ec:	2000aadc 	.word	0x2000aadc

080186f0 <rmw_destroy_guard_condition>:
 80186f0:	b508      	push	{r3, lr}
 80186f2:	4b08      	ldr	r3, [pc, #32]	@ (8018714 <rmw_destroy_guard_condition+0x24>)
 80186f4:	6819      	ldr	r1, [r3, #0]
 80186f6:	b911      	cbnz	r1, 80186fe <rmw_destroy_guard_condition+0xe>
 80186f8:	e00a      	b.n	8018710 <rmw_destroy_guard_condition+0x20>
 80186fa:	6849      	ldr	r1, [r1, #4]
 80186fc:	b141      	cbz	r1, 8018710 <rmw_destroy_guard_condition+0x20>
 80186fe:	688b      	ldr	r3, [r1, #8]
 8018700:	3314      	adds	r3, #20
 8018702:	4298      	cmp	r0, r3
 8018704:	d1f9      	bne.n	80186fa <rmw_destroy_guard_condition+0xa>
 8018706:	4803      	ldr	r0, [pc, #12]	@ (8018714 <rmw_destroy_guard_condition+0x24>)
 8018708:	f7fd f926 	bl	8015958 <put_memory>
 801870c:	2000      	movs	r0, #0
 801870e:	bd08      	pop	{r3, pc}
 8018710:	2001      	movs	r0, #1
 8018712:	bd08      	pop	{r3, pc}
 8018714:	2000aadc 	.word	0x2000aadc

08018718 <calloc>:
 8018718:	4b02      	ldr	r3, [pc, #8]	@ (8018724 <calloc+0xc>)
 801871a:	460a      	mov	r2, r1
 801871c:	4601      	mov	r1, r0
 801871e:	6818      	ldr	r0, [r3, #0]
 8018720:	f000 b802 	b.w	8018728 <_calloc_r>
 8018724:	200000e4 	.word	0x200000e4

08018728 <_calloc_r>:
 8018728:	b570      	push	{r4, r5, r6, lr}
 801872a:	fba1 5402 	umull	r5, r4, r1, r2
 801872e:	b93c      	cbnz	r4, 8018740 <_calloc_r+0x18>
 8018730:	4629      	mov	r1, r5
 8018732:	f000 f887 	bl	8018844 <_malloc_r>
 8018736:	4606      	mov	r6, r0
 8018738:	b928      	cbnz	r0, 8018746 <_calloc_r+0x1e>
 801873a:	2600      	movs	r6, #0
 801873c:	4630      	mov	r0, r6
 801873e:	bd70      	pop	{r4, r5, r6, pc}
 8018740:	220c      	movs	r2, #12
 8018742:	6002      	str	r2, [r0, #0]
 8018744:	e7f9      	b.n	801873a <_calloc_r+0x12>
 8018746:	462a      	mov	r2, r5
 8018748:	4621      	mov	r1, r4
 801874a:	f000 fcb7 	bl	80190bc <memset>
 801874e:	e7f5      	b.n	801873c <_calloc_r+0x14>

08018750 <getenv>:
 8018750:	b507      	push	{r0, r1, r2, lr}
 8018752:	4b04      	ldr	r3, [pc, #16]	@ (8018764 <getenv+0x14>)
 8018754:	4601      	mov	r1, r0
 8018756:	aa01      	add	r2, sp, #4
 8018758:	6818      	ldr	r0, [r3, #0]
 801875a:	f000 f805 	bl	8018768 <_findenv_r>
 801875e:	b003      	add	sp, #12
 8018760:	f85d fb04 	ldr.w	pc, [sp], #4
 8018764:	200000e4 	.word	0x200000e4

08018768 <_findenv_r>:
 8018768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801876c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80187dc <_findenv_r+0x74>
 8018770:	4606      	mov	r6, r0
 8018772:	4689      	mov	r9, r1
 8018774:	4617      	mov	r7, r2
 8018776:	f000 fd97 	bl	80192a8 <__env_lock>
 801877a:	f8da 4000 	ldr.w	r4, [sl]
 801877e:	b134      	cbz	r4, 801878e <_findenv_r+0x26>
 8018780:	464b      	mov	r3, r9
 8018782:	4698      	mov	r8, r3
 8018784:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018788:	b13a      	cbz	r2, 801879a <_findenv_r+0x32>
 801878a:	2a3d      	cmp	r2, #61	@ 0x3d
 801878c:	d1f9      	bne.n	8018782 <_findenv_r+0x1a>
 801878e:	4630      	mov	r0, r6
 8018790:	f000 fd90 	bl	80192b4 <__env_unlock>
 8018794:	2000      	movs	r0, #0
 8018796:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801879a:	eba8 0809 	sub.w	r8, r8, r9
 801879e:	46a3      	mov	fp, r4
 80187a0:	f854 0b04 	ldr.w	r0, [r4], #4
 80187a4:	2800      	cmp	r0, #0
 80187a6:	d0f2      	beq.n	801878e <_findenv_r+0x26>
 80187a8:	4642      	mov	r2, r8
 80187aa:	4649      	mov	r1, r9
 80187ac:	f000 fc9b 	bl	80190e6 <strncmp>
 80187b0:	2800      	cmp	r0, #0
 80187b2:	d1f4      	bne.n	801879e <_findenv_r+0x36>
 80187b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80187b8:	eb03 0508 	add.w	r5, r3, r8
 80187bc:	f813 3008 	ldrb.w	r3, [r3, r8]
 80187c0:	2b3d      	cmp	r3, #61	@ 0x3d
 80187c2:	d1ec      	bne.n	801879e <_findenv_r+0x36>
 80187c4:	f8da 3000 	ldr.w	r3, [sl]
 80187c8:	ebab 0303 	sub.w	r3, fp, r3
 80187cc:	109b      	asrs	r3, r3, #2
 80187ce:	4630      	mov	r0, r6
 80187d0:	603b      	str	r3, [r7, #0]
 80187d2:	f000 fd6f 	bl	80192b4 <__env_unlock>
 80187d6:	1c68      	adds	r0, r5, #1
 80187d8:	e7dd      	b.n	8018796 <_findenv_r+0x2e>
 80187da:	bf00      	nop
 80187dc:	20000004 	.word	0x20000004

080187e0 <malloc>:
 80187e0:	4b02      	ldr	r3, [pc, #8]	@ (80187ec <malloc+0xc>)
 80187e2:	4601      	mov	r1, r0
 80187e4:	6818      	ldr	r0, [r3, #0]
 80187e6:	f000 b82d 	b.w	8018844 <_malloc_r>
 80187ea:	bf00      	nop
 80187ec:	200000e4 	.word	0x200000e4

080187f0 <free>:
 80187f0:	4b02      	ldr	r3, [pc, #8]	@ (80187fc <free+0xc>)
 80187f2:	4601      	mov	r1, r0
 80187f4:	6818      	ldr	r0, [r3, #0]
 80187f6:	f000 bd63 	b.w	80192c0 <_free_r>
 80187fa:	bf00      	nop
 80187fc:	200000e4 	.word	0x200000e4

08018800 <sbrk_aligned>:
 8018800:	b570      	push	{r4, r5, r6, lr}
 8018802:	4e0f      	ldr	r6, [pc, #60]	@ (8018840 <sbrk_aligned+0x40>)
 8018804:	460c      	mov	r4, r1
 8018806:	6831      	ldr	r1, [r6, #0]
 8018808:	4605      	mov	r5, r0
 801880a:	b911      	cbnz	r1, 8018812 <sbrk_aligned+0x12>
 801880c:	f000 fcc8 	bl	80191a0 <_sbrk_r>
 8018810:	6030      	str	r0, [r6, #0]
 8018812:	4621      	mov	r1, r4
 8018814:	4628      	mov	r0, r5
 8018816:	f000 fcc3 	bl	80191a0 <_sbrk_r>
 801881a:	1c43      	adds	r3, r0, #1
 801881c:	d103      	bne.n	8018826 <sbrk_aligned+0x26>
 801881e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018822:	4620      	mov	r0, r4
 8018824:	bd70      	pop	{r4, r5, r6, pc}
 8018826:	1cc4      	adds	r4, r0, #3
 8018828:	f024 0403 	bic.w	r4, r4, #3
 801882c:	42a0      	cmp	r0, r4
 801882e:	d0f8      	beq.n	8018822 <sbrk_aligned+0x22>
 8018830:	1a21      	subs	r1, r4, r0
 8018832:	4628      	mov	r0, r5
 8018834:	f000 fcb4 	bl	80191a0 <_sbrk_r>
 8018838:	3001      	adds	r0, #1
 801883a:	d1f2      	bne.n	8018822 <sbrk_aligned+0x22>
 801883c:	e7ef      	b.n	801881e <sbrk_aligned+0x1e>
 801883e:	bf00      	nop
 8018840:	2000ac90 	.word	0x2000ac90

08018844 <_malloc_r>:
 8018844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018848:	1ccd      	adds	r5, r1, #3
 801884a:	f025 0503 	bic.w	r5, r5, #3
 801884e:	3508      	adds	r5, #8
 8018850:	2d0c      	cmp	r5, #12
 8018852:	bf38      	it	cc
 8018854:	250c      	movcc	r5, #12
 8018856:	2d00      	cmp	r5, #0
 8018858:	4606      	mov	r6, r0
 801885a:	db01      	blt.n	8018860 <_malloc_r+0x1c>
 801885c:	42a9      	cmp	r1, r5
 801885e:	d904      	bls.n	801886a <_malloc_r+0x26>
 8018860:	230c      	movs	r3, #12
 8018862:	6033      	str	r3, [r6, #0]
 8018864:	2000      	movs	r0, #0
 8018866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801886a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018940 <_malloc_r+0xfc>
 801886e:	f000 f869 	bl	8018944 <__malloc_lock>
 8018872:	f8d8 3000 	ldr.w	r3, [r8]
 8018876:	461c      	mov	r4, r3
 8018878:	bb44      	cbnz	r4, 80188cc <_malloc_r+0x88>
 801887a:	4629      	mov	r1, r5
 801887c:	4630      	mov	r0, r6
 801887e:	f7ff ffbf 	bl	8018800 <sbrk_aligned>
 8018882:	1c43      	adds	r3, r0, #1
 8018884:	4604      	mov	r4, r0
 8018886:	d158      	bne.n	801893a <_malloc_r+0xf6>
 8018888:	f8d8 4000 	ldr.w	r4, [r8]
 801888c:	4627      	mov	r7, r4
 801888e:	2f00      	cmp	r7, #0
 8018890:	d143      	bne.n	801891a <_malloc_r+0xd6>
 8018892:	2c00      	cmp	r4, #0
 8018894:	d04b      	beq.n	801892e <_malloc_r+0xea>
 8018896:	6823      	ldr	r3, [r4, #0]
 8018898:	4639      	mov	r1, r7
 801889a:	4630      	mov	r0, r6
 801889c:	eb04 0903 	add.w	r9, r4, r3
 80188a0:	f000 fc7e 	bl	80191a0 <_sbrk_r>
 80188a4:	4581      	cmp	r9, r0
 80188a6:	d142      	bne.n	801892e <_malloc_r+0xea>
 80188a8:	6821      	ldr	r1, [r4, #0]
 80188aa:	1a6d      	subs	r5, r5, r1
 80188ac:	4629      	mov	r1, r5
 80188ae:	4630      	mov	r0, r6
 80188b0:	f7ff ffa6 	bl	8018800 <sbrk_aligned>
 80188b4:	3001      	adds	r0, #1
 80188b6:	d03a      	beq.n	801892e <_malloc_r+0xea>
 80188b8:	6823      	ldr	r3, [r4, #0]
 80188ba:	442b      	add	r3, r5
 80188bc:	6023      	str	r3, [r4, #0]
 80188be:	f8d8 3000 	ldr.w	r3, [r8]
 80188c2:	685a      	ldr	r2, [r3, #4]
 80188c4:	bb62      	cbnz	r2, 8018920 <_malloc_r+0xdc>
 80188c6:	f8c8 7000 	str.w	r7, [r8]
 80188ca:	e00f      	b.n	80188ec <_malloc_r+0xa8>
 80188cc:	6822      	ldr	r2, [r4, #0]
 80188ce:	1b52      	subs	r2, r2, r5
 80188d0:	d420      	bmi.n	8018914 <_malloc_r+0xd0>
 80188d2:	2a0b      	cmp	r2, #11
 80188d4:	d917      	bls.n	8018906 <_malloc_r+0xc2>
 80188d6:	1961      	adds	r1, r4, r5
 80188d8:	42a3      	cmp	r3, r4
 80188da:	6025      	str	r5, [r4, #0]
 80188dc:	bf18      	it	ne
 80188de:	6059      	strne	r1, [r3, #4]
 80188e0:	6863      	ldr	r3, [r4, #4]
 80188e2:	bf08      	it	eq
 80188e4:	f8c8 1000 	streq.w	r1, [r8]
 80188e8:	5162      	str	r2, [r4, r5]
 80188ea:	604b      	str	r3, [r1, #4]
 80188ec:	4630      	mov	r0, r6
 80188ee:	f000 f82f 	bl	8018950 <__malloc_unlock>
 80188f2:	f104 000b 	add.w	r0, r4, #11
 80188f6:	1d23      	adds	r3, r4, #4
 80188f8:	f020 0007 	bic.w	r0, r0, #7
 80188fc:	1ac2      	subs	r2, r0, r3
 80188fe:	bf1c      	itt	ne
 8018900:	1a1b      	subne	r3, r3, r0
 8018902:	50a3      	strne	r3, [r4, r2]
 8018904:	e7af      	b.n	8018866 <_malloc_r+0x22>
 8018906:	6862      	ldr	r2, [r4, #4]
 8018908:	42a3      	cmp	r3, r4
 801890a:	bf0c      	ite	eq
 801890c:	f8c8 2000 	streq.w	r2, [r8]
 8018910:	605a      	strne	r2, [r3, #4]
 8018912:	e7eb      	b.n	80188ec <_malloc_r+0xa8>
 8018914:	4623      	mov	r3, r4
 8018916:	6864      	ldr	r4, [r4, #4]
 8018918:	e7ae      	b.n	8018878 <_malloc_r+0x34>
 801891a:	463c      	mov	r4, r7
 801891c:	687f      	ldr	r7, [r7, #4]
 801891e:	e7b6      	b.n	801888e <_malloc_r+0x4a>
 8018920:	461a      	mov	r2, r3
 8018922:	685b      	ldr	r3, [r3, #4]
 8018924:	42a3      	cmp	r3, r4
 8018926:	d1fb      	bne.n	8018920 <_malloc_r+0xdc>
 8018928:	2300      	movs	r3, #0
 801892a:	6053      	str	r3, [r2, #4]
 801892c:	e7de      	b.n	80188ec <_malloc_r+0xa8>
 801892e:	230c      	movs	r3, #12
 8018930:	6033      	str	r3, [r6, #0]
 8018932:	4630      	mov	r0, r6
 8018934:	f000 f80c 	bl	8018950 <__malloc_unlock>
 8018938:	e794      	b.n	8018864 <_malloc_r+0x20>
 801893a:	6005      	str	r5, [r0, #0]
 801893c:	e7d6      	b.n	80188ec <_malloc_r+0xa8>
 801893e:	bf00      	nop
 8018940:	2000ac94 	.word	0x2000ac94

08018944 <__malloc_lock>:
 8018944:	4801      	ldr	r0, [pc, #4]	@ (801894c <__malloc_lock+0x8>)
 8018946:	f000 bc78 	b.w	801923a <__retarget_lock_acquire_recursive>
 801894a:	bf00      	nop
 801894c:	2000add9 	.word	0x2000add9

08018950 <__malloc_unlock>:
 8018950:	4801      	ldr	r0, [pc, #4]	@ (8018958 <__malloc_unlock+0x8>)
 8018952:	f000 bc73 	b.w	801923c <__retarget_lock_release_recursive>
 8018956:	bf00      	nop
 8018958:	2000add9 	.word	0x2000add9

0801895c <srand>:
 801895c:	b538      	push	{r3, r4, r5, lr}
 801895e:	4b10      	ldr	r3, [pc, #64]	@ (80189a0 <srand+0x44>)
 8018960:	681d      	ldr	r5, [r3, #0]
 8018962:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018964:	4604      	mov	r4, r0
 8018966:	b9b3      	cbnz	r3, 8018996 <srand+0x3a>
 8018968:	2018      	movs	r0, #24
 801896a:	f7ff ff39 	bl	80187e0 <malloc>
 801896e:	4602      	mov	r2, r0
 8018970:	6328      	str	r0, [r5, #48]	@ 0x30
 8018972:	b920      	cbnz	r0, 801897e <srand+0x22>
 8018974:	4b0b      	ldr	r3, [pc, #44]	@ (80189a4 <srand+0x48>)
 8018976:	480c      	ldr	r0, [pc, #48]	@ (80189a8 <srand+0x4c>)
 8018978:	2146      	movs	r1, #70	@ 0x46
 801897a:	f000 fc77 	bl	801926c <__assert_func>
 801897e:	490b      	ldr	r1, [pc, #44]	@ (80189ac <srand+0x50>)
 8018980:	4b0b      	ldr	r3, [pc, #44]	@ (80189b0 <srand+0x54>)
 8018982:	e9c0 1300 	strd	r1, r3, [r0]
 8018986:	4b0b      	ldr	r3, [pc, #44]	@ (80189b4 <srand+0x58>)
 8018988:	6083      	str	r3, [r0, #8]
 801898a:	230b      	movs	r3, #11
 801898c:	8183      	strh	r3, [r0, #12]
 801898e:	2100      	movs	r1, #0
 8018990:	2001      	movs	r0, #1
 8018992:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018996:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018998:	2200      	movs	r2, #0
 801899a:	611c      	str	r4, [r3, #16]
 801899c:	615a      	str	r2, [r3, #20]
 801899e:	bd38      	pop	{r3, r4, r5, pc}
 80189a0:	200000e4 	.word	0x200000e4
 80189a4:	0801a934 	.word	0x0801a934
 80189a8:	0801a94b 	.word	0x0801a94b
 80189ac:	abcd330e 	.word	0xabcd330e
 80189b0:	e66d1234 	.word	0xe66d1234
 80189b4:	0005deec 	.word	0x0005deec

080189b8 <rand>:
 80189b8:	4b16      	ldr	r3, [pc, #88]	@ (8018a14 <rand+0x5c>)
 80189ba:	b510      	push	{r4, lr}
 80189bc:	681c      	ldr	r4, [r3, #0]
 80189be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80189c0:	b9b3      	cbnz	r3, 80189f0 <rand+0x38>
 80189c2:	2018      	movs	r0, #24
 80189c4:	f7ff ff0c 	bl	80187e0 <malloc>
 80189c8:	4602      	mov	r2, r0
 80189ca:	6320      	str	r0, [r4, #48]	@ 0x30
 80189cc:	b920      	cbnz	r0, 80189d8 <rand+0x20>
 80189ce:	4b12      	ldr	r3, [pc, #72]	@ (8018a18 <rand+0x60>)
 80189d0:	4812      	ldr	r0, [pc, #72]	@ (8018a1c <rand+0x64>)
 80189d2:	2152      	movs	r1, #82	@ 0x52
 80189d4:	f000 fc4a 	bl	801926c <__assert_func>
 80189d8:	4911      	ldr	r1, [pc, #68]	@ (8018a20 <rand+0x68>)
 80189da:	4b12      	ldr	r3, [pc, #72]	@ (8018a24 <rand+0x6c>)
 80189dc:	e9c0 1300 	strd	r1, r3, [r0]
 80189e0:	4b11      	ldr	r3, [pc, #68]	@ (8018a28 <rand+0x70>)
 80189e2:	6083      	str	r3, [r0, #8]
 80189e4:	230b      	movs	r3, #11
 80189e6:	8183      	strh	r3, [r0, #12]
 80189e8:	2100      	movs	r1, #0
 80189ea:	2001      	movs	r0, #1
 80189ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80189f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80189f2:	480e      	ldr	r0, [pc, #56]	@ (8018a2c <rand+0x74>)
 80189f4:	690b      	ldr	r3, [r1, #16]
 80189f6:	694c      	ldr	r4, [r1, #20]
 80189f8:	4a0d      	ldr	r2, [pc, #52]	@ (8018a30 <rand+0x78>)
 80189fa:	4358      	muls	r0, r3
 80189fc:	fb02 0004 	mla	r0, r2, r4, r0
 8018a00:	fba3 3202 	umull	r3, r2, r3, r2
 8018a04:	3301      	adds	r3, #1
 8018a06:	eb40 0002 	adc.w	r0, r0, r2
 8018a0a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018a0e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018a12:	bd10      	pop	{r4, pc}
 8018a14:	200000e4 	.word	0x200000e4
 8018a18:	0801a934 	.word	0x0801a934
 8018a1c:	0801a94b 	.word	0x0801a94b
 8018a20:	abcd330e 	.word	0xabcd330e
 8018a24:	e66d1234 	.word	0xe66d1234
 8018a28:	0005deec 	.word	0x0005deec
 8018a2c:	5851f42d 	.word	0x5851f42d
 8018a30:	4c957f2d 	.word	0x4c957f2d

08018a34 <realloc>:
 8018a34:	4b02      	ldr	r3, [pc, #8]	@ (8018a40 <realloc+0xc>)
 8018a36:	460a      	mov	r2, r1
 8018a38:	4601      	mov	r1, r0
 8018a3a:	6818      	ldr	r0, [r3, #0]
 8018a3c:	f000 b802 	b.w	8018a44 <_realloc_r>
 8018a40:	200000e4 	.word	0x200000e4

08018a44 <_realloc_r>:
 8018a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a48:	4680      	mov	r8, r0
 8018a4a:	4615      	mov	r5, r2
 8018a4c:	460c      	mov	r4, r1
 8018a4e:	b921      	cbnz	r1, 8018a5a <_realloc_r+0x16>
 8018a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a54:	4611      	mov	r1, r2
 8018a56:	f7ff bef5 	b.w	8018844 <_malloc_r>
 8018a5a:	b92a      	cbnz	r2, 8018a68 <_realloc_r+0x24>
 8018a5c:	f000 fc30 	bl	80192c0 <_free_r>
 8018a60:	2400      	movs	r4, #0
 8018a62:	4620      	mov	r0, r4
 8018a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a68:	f000 fc74 	bl	8019354 <_malloc_usable_size_r>
 8018a6c:	4285      	cmp	r5, r0
 8018a6e:	4606      	mov	r6, r0
 8018a70:	d802      	bhi.n	8018a78 <_realloc_r+0x34>
 8018a72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018a76:	d8f4      	bhi.n	8018a62 <_realloc_r+0x1e>
 8018a78:	4629      	mov	r1, r5
 8018a7a:	4640      	mov	r0, r8
 8018a7c:	f7ff fee2 	bl	8018844 <_malloc_r>
 8018a80:	4607      	mov	r7, r0
 8018a82:	2800      	cmp	r0, #0
 8018a84:	d0ec      	beq.n	8018a60 <_realloc_r+0x1c>
 8018a86:	42b5      	cmp	r5, r6
 8018a88:	462a      	mov	r2, r5
 8018a8a:	4621      	mov	r1, r4
 8018a8c:	bf28      	it	cs
 8018a8e:	4632      	movcs	r2, r6
 8018a90:	f000 fbdd 	bl	801924e <memcpy>
 8018a94:	4621      	mov	r1, r4
 8018a96:	4640      	mov	r0, r8
 8018a98:	f000 fc12 	bl	80192c0 <_free_r>
 8018a9c:	463c      	mov	r4, r7
 8018a9e:	e7e0      	b.n	8018a62 <_realloc_r+0x1e>

08018aa0 <_strtoul_l.constprop.0>:
 8018aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018aa4:	4e34      	ldr	r6, [pc, #208]	@ (8018b78 <_strtoul_l.constprop.0+0xd8>)
 8018aa6:	4686      	mov	lr, r0
 8018aa8:	460d      	mov	r5, r1
 8018aaa:	4628      	mov	r0, r5
 8018aac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018ab0:	5d37      	ldrb	r7, [r6, r4]
 8018ab2:	f017 0708 	ands.w	r7, r7, #8
 8018ab6:	d1f8      	bne.n	8018aaa <_strtoul_l.constprop.0+0xa>
 8018ab8:	2c2d      	cmp	r4, #45	@ 0x2d
 8018aba:	d12f      	bne.n	8018b1c <_strtoul_l.constprop.0+0x7c>
 8018abc:	782c      	ldrb	r4, [r5, #0]
 8018abe:	2701      	movs	r7, #1
 8018ac0:	1c85      	adds	r5, r0, #2
 8018ac2:	f033 0010 	bics.w	r0, r3, #16
 8018ac6:	d109      	bne.n	8018adc <_strtoul_l.constprop.0+0x3c>
 8018ac8:	2c30      	cmp	r4, #48	@ 0x30
 8018aca:	d12c      	bne.n	8018b26 <_strtoul_l.constprop.0+0x86>
 8018acc:	7828      	ldrb	r0, [r5, #0]
 8018ace:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018ad2:	2858      	cmp	r0, #88	@ 0x58
 8018ad4:	d127      	bne.n	8018b26 <_strtoul_l.constprop.0+0x86>
 8018ad6:	786c      	ldrb	r4, [r5, #1]
 8018ad8:	2310      	movs	r3, #16
 8018ada:	3502      	adds	r5, #2
 8018adc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018ae0:	2600      	movs	r6, #0
 8018ae2:	fbb8 f8f3 	udiv	r8, r8, r3
 8018ae6:	fb03 f908 	mul.w	r9, r3, r8
 8018aea:	ea6f 0909 	mvn.w	r9, r9
 8018aee:	4630      	mov	r0, r6
 8018af0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8018af4:	f1bc 0f09 	cmp.w	ip, #9
 8018af8:	d81c      	bhi.n	8018b34 <_strtoul_l.constprop.0+0x94>
 8018afa:	4664      	mov	r4, ip
 8018afc:	42a3      	cmp	r3, r4
 8018afe:	dd2a      	ble.n	8018b56 <_strtoul_l.constprop.0+0xb6>
 8018b00:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8018b04:	d007      	beq.n	8018b16 <_strtoul_l.constprop.0+0x76>
 8018b06:	4580      	cmp	r8, r0
 8018b08:	d322      	bcc.n	8018b50 <_strtoul_l.constprop.0+0xb0>
 8018b0a:	d101      	bne.n	8018b10 <_strtoul_l.constprop.0+0x70>
 8018b0c:	45a1      	cmp	r9, r4
 8018b0e:	db1f      	blt.n	8018b50 <_strtoul_l.constprop.0+0xb0>
 8018b10:	fb00 4003 	mla	r0, r0, r3, r4
 8018b14:	2601      	movs	r6, #1
 8018b16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018b1a:	e7e9      	b.n	8018af0 <_strtoul_l.constprop.0+0x50>
 8018b1c:	2c2b      	cmp	r4, #43	@ 0x2b
 8018b1e:	bf04      	itt	eq
 8018b20:	782c      	ldrbeq	r4, [r5, #0]
 8018b22:	1c85      	addeq	r5, r0, #2
 8018b24:	e7cd      	b.n	8018ac2 <_strtoul_l.constprop.0+0x22>
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d1d8      	bne.n	8018adc <_strtoul_l.constprop.0+0x3c>
 8018b2a:	2c30      	cmp	r4, #48	@ 0x30
 8018b2c:	bf0c      	ite	eq
 8018b2e:	2308      	moveq	r3, #8
 8018b30:	230a      	movne	r3, #10
 8018b32:	e7d3      	b.n	8018adc <_strtoul_l.constprop.0+0x3c>
 8018b34:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018b38:	f1bc 0f19 	cmp.w	ip, #25
 8018b3c:	d801      	bhi.n	8018b42 <_strtoul_l.constprop.0+0xa2>
 8018b3e:	3c37      	subs	r4, #55	@ 0x37
 8018b40:	e7dc      	b.n	8018afc <_strtoul_l.constprop.0+0x5c>
 8018b42:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8018b46:	f1bc 0f19 	cmp.w	ip, #25
 8018b4a:	d804      	bhi.n	8018b56 <_strtoul_l.constprop.0+0xb6>
 8018b4c:	3c57      	subs	r4, #87	@ 0x57
 8018b4e:	e7d5      	b.n	8018afc <_strtoul_l.constprop.0+0x5c>
 8018b50:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8018b54:	e7df      	b.n	8018b16 <_strtoul_l.constprop.0+0x76>
 8018b56:	1c73      	adds	r3, r6, #1
 8018b58:	d106      	bne.n	8018b68 <_strtoul_l.constprop.0+0xc8>
 8018b5a:	2322      	movs	r3, #34	@ 0x22
 8018b5c:	f8ce 3000 	str.w	r3, [lr]
 8018b60:	4630      	mov	r0, r6
 8018b62:	b932      	cbnz	r2, 8018b72 <_strtoul_l.constprop.0+0xd2>
 8018b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b68:	b107      	cbz	r7, 8018b6c <_strtoul_l.constprop.0+0xcc>
 8018b6a:	4240      	negs	r0, r0
 8018b6c:	2a00      	cmp	r2, #0
 8018b6e:	d0f9      	beq.n	8018b64 <_strtoul_l.constprop.0+0xc4>
 8018b70:	b106      	cbz	r6, 8018b74 <_strtoul_l.constprop.0+0xd4>
 8018b72:	1e69      	subs	r1, r5, #1
 8018b74:	6011      	str	r1, [r2, #0]
 8018b76:	e7f5      	b.n	8018b64 <_strtoul_l.constprop.0+0xc4>
 8018b78:	0801a9a4 	.word	0x0801a9a4

08018b7c <strtoul>:
 8018b7c:	4613      	mov	r3, r2
 8018b7e:	460a      	mov	r2, r1
 8018b80:	4601      	mov	r1, r0
 8018b82:	4802      	ldr	r0, [pc, #8]	@ (8018b8c <strtoul+0x10>)
 8018b84:	6800      	ldr	r0, [r0, #0]
 8018b86:	f7ff bf8b 	b.w	8018aa0 <_strtoul_l.constprop.0>
 8018b8a:	bf00      	nop
 8018b8c:	200000e4 	.word	0x200000e4

08018b90 <std>:
 8018b90:	2300      	movs	r3, #0
 8018b92:	b510      	push	{r4, lr}
 8018b94:	4604      	mov	r4, r0
 8018b96:	e9c0 3300 	strd	r3, r3, [r0]
 8018b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018b9e:	6083      	str	r3, [r0, #8]
 8018ba0:	8181      	strh	r1, [r0, #12]
 8018ba2:	6643      	str	r3, [r0, #100]	@ 0x64
 8018ba4:	81c2      	strh	r2, [r0, #14]
 8018ba6:	6183      	str	r3, [r0, #24]
 8018ba8:	4619      	mov	r1, r3
 8018baa:	2208      	movs	r2, #8
 8018bac:	305c      	adds	r0, #92	@ 0x5c
 8018bae:	f000 fa85 	bl	80190bc <memset>
 8018bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8018be8 <std+0x58>)
 8018bb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8018bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8018bec <std+0x5c>)
 8018bb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018bba:	4b0d      	ldr	r3, [pc, #52]	@ (8018bf0 <std+0x60>)
 8018bbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8018bf4 <std+0x64>)
 8018bc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8018bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8018bf8 <std+0x68>)
 8018bc4:	6224      	str	r4, [r4, #32]
 8018bc6:	429c      	cmp	r4, r3
 8018bc8:	d006      	beq.n	8018bd8 <std+0x48>
 8018bca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018bce:	4294      	cmp	r4, r2
 8018bd0:	d002      	beq.n	8018bd8 <std+0x48>
 8018bd2:	33d0      	adds	r3, #208	@ 0xd0
 8018bd4:	429c      	cmp	r4, r3
 8018bd6:	d105      	bne.n	8018be4 <std+0x54>
 8018bd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018be0:	f000 bb2a 	b.w	8019238 <__retarget_lock_init_recursive>
 8018be4:	bd10      	pop	{r4, pc}
 8018be6:	bf00      	nop
 8018be8:	08018e9d 	.word	0x08018e9d
 8018bec:	08018ebf 	.word	0x08018ebf
 8018bf0:	08018ef7 	.word	0x08018ef7
 8018bf4:	08018f1b 	.word	0x08018f1b
 8018bf8:	2000ac98 	.word	0x2000ac98

08018bfc <stdio_exit_handler>:
 8018bfc:	4a02      	ldr	r2, [pc, #8]	@ (8018c08 <stdio_exit_handler+0xc>)
 8018bfe:	4903      	ldr	r1, [pc, #12]	@ (8018c0c <stdio_exit_handler+0x10>)
 8018c00:	4803      	ldr	r0, [pc, #12]	@ (8018c10 <stdio_exit_handler+0x14>)
 8018c02:	f000 b869 	b.w	8018cd8 <_fwalk_sglue>
 8018c06:	bf00      	nop
 8018c08:	200000d8 	.word	0x200000d8
 8018c0c:	08019cbd 	.word	0x08019cbd
 8018c10:	200000e8 	.word	0x200000e8

08018c14 <cleanup_stdio>:
 8018c14:	6841      	ldr	r1, [r0, #4]
 8018c16:	4b0c      	ldr	r3, [pc, #48]	@ (8018c48 <cleanup_stdio+0x34>)
 8018c18:	4299      	cmp	r1, r3
 8018c1a:	b510      	push	{r4, lr}
 8018c1c:	4604      	mov	r4, r0
 8018c1e:	d001      	beq.n	8018c24 <cleanup_stdio+0x10>
 8018c20:	f001 f84c 	bl	8019cbc <_fflush_r>
 8018c24:	68a1      	ldr	r1, [r4, #8]
 8018c26:	4b09      	ldr	r3, [pc, #36]	@ (8018c4c <cleanup_stdio+0x38>)
 8018c28:	4299      	cmp	r1, r3
 8018c2a:	d002      	beq.n	8018c32 <cleanup_stdio+0x1e>
 8018c2c:	4620      	mov	r0, r4
 8018c2e:	f001 f845 	bl	8019cbc <_fflush_r>
 8018c32:	68e1      	ldr	r1, [r4, #12]
 8018c34:	4b06      	ldr	r3, [pc, #24]	@ (8018c50 <cleanup_stdio+0x3c>)
 8018c36:	4299      	cmp	r1, r3
 8018c38:	d004      	beq.n	8018c44 <cleanup_stdio+0x30>
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c40:	f001 b83c 	b.w	8019cbc <_fflush_r>
 8018c44:	bd10      	pop	{r4, pc}
 8018c46:	bf00      	nop
 8018c48:	2000ac98 	.word	0x2000ac98
 8018c4c:	2000ad00 	.word	0x2000ad00
 8018c50:	2000ad68 	.word	0x2000ad68

08018c54 <global_stdio_init.part.0>:
 8018c54:	b510      	push	{r4, lr}
 8018c56:	4b0b      	ldr	r3, [pc, #44]	@ (8018c84 <global_stdio_init.part.0+0x30>)
 8018c58:	4c0b      	ldr	r4, [pc, #44]	@ (8018c88 <global_stdio_init.part.0+0x34>)
 8018c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8018c8c <global_stdio_init.part.0+0x38>)
 8018c5c:	601a      	str	r2, [r3, #0]
 8018c5e:	4620      	mov	r0, r4
 8018c60:	2200      	movs	r2, #0
 8018c62:	2104      	movs	r1, #4
 8018c64:	f7ff ff94 	bl	8018b90 <std>
 8018c68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018c6c:	2201      	movs	r2, #1
 8018c6e:	2109      	movs	r1, #9
 8018c70:	f7ff ff8e 	bl	8018b90 <std>
 8018c74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018c78:	2202      	movs	r2, #2
 8018c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c7e:	2112      	movs	r1, #18
 8018c80:	f7ff bf86 	b.w	8018b90 <std>
 8018c84:	2000add0 	.word	0x2000add0
 8018c88:	2000ac98 	.word	0x2000ac98
 8018c8c:	08018bfd 	.word	0x08018bfd

08018c90 <__sfp_lock_acquire>:
 8018c90:	4801      	ldr	r0, [pc, #4]	@ (8018c98 <__sfp_lock_acquire+0x8>)
 8018c92:	f000 bad2 	b.w	801923a <__retarget_lock_acquire_recursive>
 8018c96:	bf00      	nop
 8018c98:	2000adda 	.word	0x2000adda

08018c9c <__sfp_lock_release>:
 8018c9c:	4801      	ldr	r0, [pc, #4]	@ (8018ca4 <__sfp_lock_release+0x8>)
 8018c9e:	f000 bacd 	b.w	801923c <__retarget_lock_release_recursive>
 8018ca2:	bf00      	nop
 8018ca4:	2000adda 	.word	0x2000adda

08018ca8 <__sinit>:
 8018ca8:	b510      	push	{r4, lr}
 8018caa:	4604      	mov	r4, r0
 8018cac:	f7ff fff0 	bl	8018c90 <__sfp_lock_acquire>
 8018cb0:	6a23      	ldr	r3, [r4, #32]
 8018cb2:	b11b      	cbz	r3, 8018cbc <__sinit+0x14>
 8018cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018cb8:	f7ff bff0 	b.w	8018c9c <__sfp_lock_release>
 8018cbc:	4b04      	ldr	r3, [pc, #16]	@ (8018cd0 <__sinit+0x28>)
 8018cbe:	6223      	str	r3, [r4, #32]
 8018cc0:	4b04      	ldr	r3, [pc, #16]	@ (8018cd4 <__sinit+0x2c>)
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d1f5      	bne.n	8018cb4 <__sinit+0xc>
 8018cc8:	f7ff ffc4 	bl	8018c54 <global_stdio_init.part.0>
 8018ccc:	e7f2      	b.n	8018cb4 <__sinit+0xc>
 8018cce:	bf00      	nop
 8018cd0:	08018c15 	.word	0x08018c15
 8018cd4:	2000add0 	.word	0x2000add0

08018cd8 <_fwalk_sglue>:
 8018cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cdc:	4607      	mov	r7, r0
 8018cde:	4688      	mov	r8, r1
 8018ce0:	4614      	mov	r4, r2
 8018ce2:	2600      	movs	r6, #0
 8018ce4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018ce8:	f1b9 0901 	subs.w	r9, r9, #1
 8018cec:	d505      	bpl.n	8018cfa <_fwalk_sglue+0x22>
 8018cee:	6824      	ldr	r4, [r4, #0]
 8018cf0:	2c00      	cmp	r4, #0
 8018cf2:	d1f7      	bne.n	8018ce4 <_fwalk_sglue+0xc>
 8018cf4:	4630      	mov	r0, r6
 8018cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018cfa:	89ab      	ldrh	r3, [r5, #12]
 8018cfc:	2b01      	cmp	r3, #1
 8018cfe:	d907      	bls.n	8018d10 <_fwalk_sglue+0x38>
 8018d00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018d04:	3301      	adds	r3, #1
 8018d06:	d003      	beq.n	8018d10 <_fwalk_sglue+0x38>
 8018d08:	4629      	mov	r1, r5
 8018d0a:	4638      	mov	r0, r7
 8018d0c:	47c0      	blx	r8
 8018d0e:	4306      	orrs	r6, r0
 8018d10:	3568      	adds	r5, #104	@ 0x68
 8018d12:	e7e9      	b.n	8018ce8 <_fwalk_sglue+0x10>

08018d14 <iprintf>:
 8018d14:	b40f      	push	{r0, r1, r2, r3}
 8018d16:	b507      	push	{r0, r1, r2, lr}
 8018d18:	4906      	ldr	r1, [pc, #24]	@ (8018d34 <iprintf+0x20>)
 8018d1a:	ab04      	add	r3, sp, #16
 8018d1c:	6808      	ldr	r0, [r1, #0]
 8018d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d22:	6881      	ldr	r1, [r0, #8]
 8018d24:	9301      	str	r3, [sp, #4]
 8018d26:	f000 fc9f 	bl	8019668 <_vfiprintf_r>
 8018d2a:	b003      	add	sp, #12
 8018d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d30:	b004      	add	sp, #16
 8018d32:	4770      	bx	lr
 8018d34:	200000e4 	.word	0x200000e4

08018d38 <_puts_r>:
 8018d38:	6a03      	ldr	r3, [r0, #32]
 8018d3a:	b570      	push	{r4, r5, r6, lr}
 8018d3c:	6884      	ldr	r4, [r0, #8]
 8018d3e:	4605      	mov	r5, r0
 8018d40:	460e      	mov	r6, r1
 8018d42:	b90b      	cbnz	r3, 8018d48 <_puts_r+0x10>
 8018d44:	f7ff ffb0 	bl	8018ca8 <__sinit>
 8018d48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018d4a:	07db      	lsls	r3, r3, #31
 8018d4c:	d405      	bmi.n	8018d5a <_puts_r+0x22>
 8018d4e:	89a3      	ldrh	r3, [r4, #12]
 8018d50:	0598      	lsls	r0, r3, #22
 8018d52:	d402      	bmi.n	8018d5a <_puts_r+0x22>
 8018d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d56:	f000 fa70 	bl	801923a <__retarget_lock_acquire_recursive>
 8018d5a:	89a3      	ldrh	r3, [r4, #12]
 8018d5c:	0719      	lsls	r1, r3, #28
 8018d5e:	d502      	bpl.n	8018d66 <_puts_r+0x2e>
 8018d60:	6923      	ldr	r3, [r4, #16]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d135      	bne.n	8018dd2 <_puts_r+0x9a>
 8018d66:	4621      	mov	r1, r4
 8018d68:	4628      	mov	r0, r5
 8018d6a:	f000 f951 	bl	8019010 <__swsetup_r>
 8018d6e:	b380      	cbz	r0, 8018dd2 <_puts_r+0x9a>
 8018d70:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8018d74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018d76:	07da      	lsls	r2, r3, #31
 8018d78:	d405      	bmi.n	8018d86 <_puts_r+0x4e>
 8018d7a:	89a3      	ldrh	r3, [r4, #12]
 8018d7c:	059b      	lsls	r3, r3, #22
 8018d7e:	d402      	bmi.n	8018d86 <_puts_r+0x4e>
 8018d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d82:	f000 fa5b 	bl	801923c <__retarget_lock_release_recursive>
 8018d86:	4628      	mov	r0, r5
 8018d88:	bd70      	pop	{r4, r5, r6, pc}
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	da04      	bge.n	8018d98 <_puts_r+0x60>
 8018d8e:	69a2      	ldr	r2, [r4, #24]
 8018d90:	429a      	cmp	r2, r3
 8018d92:	dc17      	bgt.n	8018dc4 <_puts_r+0x8c>
 8018d94:	290a      	cmp	r1, #10
 8018d96:	d015      	beq.n	8018dc4 <_puts_r+0x8c>
 8018d98:	6823      	ldr	r3, [r4, #0]
 8018d9a:	1c5a      	adds	r2, r3, #1
 8018d9c:	6022      	str	r2, [r4, #0]
 8018d9e:	7019      	strb	r1, [r3, #0]
 8018da0:	68a3      	ldr	r3, [r4, #8]
 8018da2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018da6:	3b01      	subs	r3, #1
 8018da8:	60a3      	str	r3, [r4, #8]
 8018daa:	2900      	cmp	r1, #0
 8018dac:	d1ed      	bne.n	8018d8a <_puts_r+0x52>
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	da11      	bge.n	8018dd6 <_puts_r+0x9e>
 8018db2:	4622      	mov	r2, r4
 8018db4:	210a      	movs	r1, #10
 8018db6:	4628      	mov	r0, r5
 8018db8:	f000 f8ec 	bl	8018f94 <__swbuf_r>
 8018dbc:	3001      	adds	r0, #1
 8018dbe:	d0d7      	beq.n	8018d70 <_puts_r+0x38>
 8018dc0:	250a      	movs	r5, #10
 8018dc2:	e7d7      	b.n	8018d74 <_puts_r+0x3c>
 8018dc4:	4622      	mov	r2, r4
 8018dc6:	4628      	mov	r0, r5
 8018dc8:	f000 f8e4 	bl	8018f94 <__swbuf_r>
 8018dcc:	3001      	adds	r0, #1
 8018dce:	d1e7      	bne.n	8018da0 <_puts_r+0x68>
 8018dd0:	e7ce      	b.n	8018d70 <_puts_r+0x38>
 8018dd2:	3e01      	subs	r6, #1
 8018dd4:	e7e4      	b.n	8018da0 <_puts_r+0x68>
 8018dd6:	6823      	ldr	r3, [r4, #0]
 8018dd8:	1c5a      	adds	r2, r3, #1
 8018dda:	6022      	str	r2, [r4, #0]
 8018ddc:	220a      	movs	r2, #10
 8018dde:	701a      	strb	r2, [r3, #0]
 8018de0:	e7ee      	b.n	8018dc0 <_puts_r+0x88>
	...

08018de4 <puts>:
 8018de4:	4b02      	ldr	r3, [pc, #8]	@ (8018df0 <puts+0xc>)
 8018de6:	4601      	mov	r1, r0
 8018de8:	6818      	ldr	r0, [r3, #0]
 8018dea:	f7ff bfa5 	b.w	8018d38 <_puts_r>
 8018dee:	bf00      	nop
 8018df0:	200000e4 	.word	0x200000e4

08018df4 <sniprintf>:
 8018df4:	b40c      	push	{r2, r3}
 8018df6:	b530      	push	{r4, r5, lr}
 8018df8:	4b17      	ldr	r3, [pc, #92]	@ (8018e58 <sniprintf+0x64>)
 8018dfa:	1e0c      	subs	r4, r1, #0
 8018dfc:	681d      	ldr	r5, [r3, #0]
 8018dfe:	b09d      	sub	sp, #116	@ 0x74
 8018e00:	da08      	bge.n	8018e14 <sniprintf+0x20>
 8018e02:	238b      	movs	r3, #139	@ 0x8b
 8018e04:	602b      	str	r3, [r5, #0]
 8018e06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e0a:	b01d      	add	sp, #116	@ 0x74
 8018e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018e10:	b002      	add	sp, #8
 8018e12:	4770      	bx	lr
 8018e14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018e18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018e1c:	bf14      	ite	ne
 8018e1e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8018e22:	4623      	moveq	r3, r4
 8018e24:	9304      	str	r3, [sp, #16]
 8018e26:	9307      	str	r3, [sp, #28]
 8018e28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018e2c:	9002      	str	r0, [sp, #8]
 8018e2e:	9006      	str	r0, [sp, #24]
 8018e30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018e34:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018e36:	ab21      	add	r3, sp, #132	@ 0x84
 8018e38:	a902      	add	r1, sp, #8
 8018e3a:	4628      	mov	r0, r5
 8018e3c:	9301      	str	r3, [sp, #4]
 8018e3e:	f000 faed 	bl	801941c <_svfiprintf_r>
 8018e42:	1c43      	adds	r3, r0, #1
 8018e44:	bfbc      	itt	lt
 8018e46:	238b      	movlt	r3, #139	@ 0x8b
 8018e48:	602b      	strlt	r3, [r5, #0]
 8018e4a:	2c00      	cmp	r4, #0
 8018e4c:	d0dd      	beq.n	8018e0a <sniprintf+0x16>
 8018e4e:	9b02      	ldr	r3, [sp, #8]
 8018e50:	2200      	movs	r2, #0
 8018e52:	701a      	strb	r2, [r3, #0]
 8018e54:	e7d9      	b.n	8018e0a <sniprintf+0x16>
 8018e56:	bf00      	nop
 8018e58:	200000e4 	.word	0x200000e4

08018e5c <siprintf>:
 8018e5c:	b40e      	push	{r1, r2, r3}
 8018e5e:	b500      	push	{lr}
 8018e60:	b09c      	sub	sp, #112	@ 0x70
 8018e62:	ab1d      	add	r3, sp, #116	@ 0x74
 8018e64:	9002      	str	r0, [sp, #8]
 8018e66:	9006      	str	r0, [sp, #24]
 8018e68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018e6c:	4809      	ldr	r0, [pc, #36]	@ (8018e94 <siprintf+0x38>)
 8018e6e:	9107      	str	r1, [sp, #28]
 8018e70:	9104      	str	r1, [sp, #16]
 8018e72:	4909      	ldr	r1, [pc, #36]	@ (8018e98 <siprintf+0x3c>)
 8018e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e78:	9105      	str	r1, [sp, #20]
 8018e7a:	6800      	ldr	r0, [r0, #0]
 8018e7c:	9301      	str	r3, [sp, #4]
 8018e7e:	a902      	add	r1, sp, #8
 8018e80:	f000 facc 	bl	801941c <_svfiprintf_r>
 8018e84:	9b02      	ldr	r3, [sp, #8]
 8018e86:	2200      	movs	r2, #0
 8018e88:	701a      	strb	r2, [r3, #0]
 8018e8a:	b01c      	add	sp, #112	@ 0x70
 8018e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018e90:	b003      	add	sp, #12
 8018e92:	4770      	bx	lr
 8018e94:	200000e4 	.word	0x200000e4
 8018e98:	ffff0208 	.word	0xffff0208

08018e9c <__sread>:
 8018e9c:	b510      	push	{r4, lr}
 8018e9e:	460c      	mov	r4, r1
 8018ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ea4:	f000 f96a 	bl	801917c <_read_r>
 8018ea8:	2800      	cmp	r0, #0
 8018eaa:	bfab      	itete	ge
 8018eac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018eae:	89a3      	ldrhlt	r3, [r4, #12]
 8018eb0:	181b      	addge	r3, r3, r0
 8018eb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018eb6:	bfac      	ite	ge
 8018eb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018eba:	81a3      	strhlt	r3, [r4, #12]
 8018ebc:	bd10      	pop	{r4, pc}

08018ebe <__swrite>:
 8018ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ec2:	461f      	mov	r7, r3
 8018ec4:	898b      	ldrh	r3, [r1, #12]
 8018ec6:	05db      	lsls	r3, r3, #23
 8018ec8:	4605      	mov	r5, r0
 8018eca:	460c      	mov	r4, r1
 8018ecc:	4616      	mov	r6, r2
 8018ece:	d505      	bpl.n	8018edc <__swrite+0x1e>
 8018ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ed4:	2302      	movs	r3, #2
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	f000 f93e 	bl	8019158 <_lseek_r>
 8018edc:	89a3      	ldrh	r3, [r4, #12]
 8018ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018ee2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018ee6:	81a3      	strh	r3, [r4, #12]
 8018ee8:	4632      	mov	r2, r6
 8018eea:	463b      	mov	r3, r7
 8018eec:	4628      	mov	r0, r5
 8018eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ef2:	f000 b965 	b.w	80191c0 <_write_r>

08018ef6 <__sseek>:
 8018ef6:	b510      	push	{r4, lr}
 8018ef8:	460c      	mov	r4, r1
 8018efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018efe:	f000 f92b 	bl	8019158 <_lseek_r>
 8018f02:	1c43      	adds	r3, r0, #1
 8018f04:	89a3      	ldrh	r3, [r4, #12]
 8018f06:	bf15      	itete	ne
 8018f08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018f0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018f0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018f12:	81a3      	strheq	r3, [r4, #12]
 8018f14:	bf18      	it	ne
 8018f16:	81a3      	strhne	r3, [r4, #12]
 8018f18:	bd10      	pop	{r4, pc}

08018f1a <__sclose>:
 8018f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f1e:	f000 b90b 	b.w	8019138 <_close_r>

08018f22 <_vsniprintf_r>:
 8018f22:	b530      	push	{r4, r5, lr}
 8018f24:	4614      	mov	r4, r2
 8018f26:	2c00      	cmp	r4, #0
 8018f28:	b09b      	sub	sp, #108	@ 0x6c
 8018f2a:	4605      	mov	r5, r0
 8018f2c:	461a      	mov	r2, r3
 8018f2e:	da05      	bge.n	8018f3c <_vsniprintf_r+0x1a>
 8018f30:	238b      	movs	r3, #139	@ 0x8b
 8018f32:	6003      	str	r3, [r0, #0]
 8018f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018f38:	b01b      	add	sp, #108	@ 0x6c
 8018f3a:	bd30      	pop	{r4, r5, pc}
 8018f3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018f40:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018f44:	bf14      	ite	ne
 8018f46:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8018f4a:	4623      	moveq	r3, r4
 8018f4c:	9302      	str	r3, [sp, #8]
 8018f4e:	9305      	str	r3, [sp, #20]
 8018f50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018f54:	9100      	str	r1, [sp, #0]
 8018f56:	9104      	str	r1, [sp, #16]
 8018f58:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018f5c:	4669      	mov	r1, sp
 8018f5e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018f60:	f000 fa5c 	bl	801941c <_svfiprintf_r>
 8018f64:	1c43      	adds	r3, r0, #1
 8018f66:	bfbc      	itt	lt
 8018f68:	238b      	movlt	r3, #139	@ 0x8b
 8018f6a:	602b      	strlt	r3, [r5, #0]
 8018f6c:	2c00      	cmp	r4, #0
 8018f6e:	d0e3      	beq.n	8018f38 <_vsniprintf_r+0x16>
 8018f70:	9b00      	ldr	r3, [sp, #0]
 8018f72:	2200      	movs	r2, #0
 8018f74:	701a      	strb	r2, [r3, #0]
 8018f76:	e7df      	b.n	8018f38 <_vsniprintf_r+0x16>

08018f78 <vsniprintf>:
 8018f78:	b507      	push	{r0, r1, r2, lr}
 8018f7a:	9300      	str	r3, [sp, #0]
 8018f7c:	4613      	mov	r3, r2
 8018f7e:	460a      	mov	r2, r1
 8018f80:	4601      	mov	r1, r0
 8018f82:	4803      	ldr	r0, [pc, #12]	@ (8018f90 <vsniprintf+0x18>)
 8018f84:	6800      	ldr	r0, [r0, #0]
 8018f86:	f7ff ffcc 	bl	8018f22 <_vsniprintf_r>
 8018f8a:	b003      	add	sp, #12
 8018f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f90:	200000e4 	.word	0x200000e4

08018f94 <__swbuf_r>:
 8018f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f96:	460e      	mov	r6, r1
 8018f98:	4614      	mov	r4, r2
 8018f9a:	4605      	mov	r5, r0
 8018f9c:	b118      	cbz	r0, 8018fa6 <__swbuf_r+0x12>
 8018f9e:	6a03      	ldr	r3, [r0, #32]
 8018fa0:	b90b      	cbnz	r3, 8018fa6 <__swbuf_r+0x12>
 8018fa2:	f7ff fe81 	bl	8018ca8 <__sinit>
 8018fa6:	69a3      	ldr	r3, [r4, #24]
 8018fa8:	60a3      	str	r3, [r4, #8]
 8018faa:	89a3      	ldrh	r3, [r4, #12]
 8018fac:	071a      	lsls	r2, r3, #28
 8018fae:	d501      	bpl.n	8018fb4 <__swbuf_r+0x20>
 8018fb0:	6923      	ldr	r3, [r4, #16]
 8018fb2:	b943      	cbnz	r3, 8018fc6 <__swbuf_r+0x32>
 8018fb4:	4621      	mov	r1, r4
 8018fb6:	4628      	mov	r0, r5
 8018fb8:	f000 f82a 	bl	8019010 <__swsetup_r>
 8018fbc:	b118      	cbz	r0, 8018fc6 <__swbuf_r+0x32>
 8018fbe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018fc2:	4638      	mov	r0, r7
 8018fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fc6:	6823      	ldr	r3, [r4, #0]
 8018fc8:	6922      	ldr	r2, [r4, #16]
 8018fca:	1a98      	subs	r0, r3, r2
 8018fcc:	6963      	ldr	r3, [r4, #20]
 8018fce:	b2f6      	uxtb	r6, r6
 8018fd0:	4283      	cmp	r3, r0
 8018fd2:	4637      	mov	r7, r6
 8018fd4:	dc05      	bgt.n	8018fe2 <__swbuf_r+0x4e>
 8018fd6:	4621      	mov	r1, r4
 8018fd8:	4628      	mov	r0, r5
 8018fda:	f000 fe6f 	bl	8019cbc <_fflush_r>
 8018fde:	2800      	cmp	r0, #0
 8018fe0:	d1ed      	bne.n	8018fbe <__swbuf_r+0x2a>
 8018fe2:	68a3      	ldr	r3, [r4, #8]
 8018fe4:	3b01      	subs	r3, #1
 8018fe6:	60a3      	str	r3, [r4, #8]
 8018fe8:	6823      	ldr	r3, [r4, #0]
 8018fea:	1c5a      	adds	r2, r3, #1
 8018fec:	6022      	str	r2, [r4, #0]
 8018fee:	701e      	strb	r6, [r3, #0]
 8018ff0:	6962      	ldr	r2, [r4, #20]
 8018ff2:	1c43      	adds	r3, r0, #1
 8018ff4:	429a      	cmp	r2, r3
 8018ff6:	d004      	beq.n	8019002 <__swbuf_r+0x6e>
 8018ff8:	89a3      	ldrh	r3, [r4, #12]
 8018ffa:	07db      	lsls	r3, r3, #31
 8018ffc:	d5e1      	bpl.n	8018fc2 <__swbuf_r+0x2e>
 8018ffe:	2e0a      	cmp	r6, #10
 8019000:	d1df      	bne.n	8018fc2 <__swbuf_r+0x2e>
 8019002:	4621      	mov	r1, r4
 8019004:	4628      	mov	r0, r5
 8019006:	f000 fe59 	bl	8019cbc <_fflush_r>
 801900a:	2800      	cmp	r0, #0
 801900c:	d0d9      	beq.n	8018fc2 <__swbuf_r+0x2e>
 801900e:	e7d6      	b.n	8018fbe <__swbuf_r+0x2a>

08019010 <__swsetup_r>:
 8019010:	b538      	push	{r3, r4, r5, lr}
 8019012:	4b29      	ldr	r3, [pc, #164]	@ (80190b8 <__swsetup_r+0xa8>)
 8019014:	4605      	mov	r5, r0
 8019016:	6818      	ldr	r0, [r3, #0]
 8019018:	460c      	mov	r4, r1
 801901a:	b118      	cbz	r0, 8019024 <__swsetup_r+0x14>
 801901c:	6a03      	ldr	r3, [r0, #32]
 801901e:	b90b      	cbnz	r3, 8019024 <__swsetup_r+0x14>
 8019020:	f7ff fe42 	bl	8018ca8 <__sinit>
 8019024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019028:	0719      	lsls	r1, r3, #28
 801902a:	d422      	bmi.n	8019072 <__swsetup_r+0x62>
 801902c:	06da      	lsls	r2, r3, #27
 801902e:	d407      	bmi.n	8019040 <__swsetup_r+0x30>
 8019030:	2209      	movs	r2, #9
 8019032:	602a      	str	r2, [r5, #0]
 8019034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019038:	81a3      	strh	r3, [r4, #12]
 801903a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801903e:	e033      	b.n	80190a8 <__swsetup_r+0x98>
 8019040:	0758      	lsls	r0, r3, #29
 8019042:	d512      	bpl.n	801906a <__swsetup_r+0x5a>
 8019044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019046:	b141      	cbz	r1, 801905a <__swsetup_r+0x4a>
 8019048:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801904c:	4299      	cmp	r1, r3
 801904e:	d002      	beq.n	8019056 <__swsetup_r+0x46>
 8019050:	4628      	mov	r0, r5
 8019052:	f000 f935 	bl	80192c0 <_free_r>
 8019056:	2300      	movs	r3, #0
 8019058:	6363      	str	r3, [r4, #52]	@ 0x34
 801905a:	89a3      	ldrh	r3, [r4, #12]
 801905c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019060:	81a3      	strh	r3, [r4, #12]
 8019062:	2300      	movs	r3, #0
 8019064:	6063      	str	r3, [r4, #4]
 8019066:	6923      	ldr	r3, [r4, #16]
 8019068:	6023      	str	r3, [r4, #0]
 801906a:	89a3      	ldrh	r3, [r4, #12]
 801906c:	f043 0308 	orr.w	r3, r3, #8
 8019070:	81a3      	strh	r3, [r4, #12]
 8019072:	6923      	ldr	r3, [r4, #16]
 8019074:	b94b      	cbnz	r3, 801908a <__swsetup_r+0x7a>
 8019076:	89a3      	ldrh	r3, [r4, #12]
 8019078:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801907c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019080:	d003      	beq.n	801908a <__swsetup_r+0x7a>
 8019082:	4621      	mov	r1, r4
 8019084:	4628      	mov	r0, r5
 8019086:	f000 fe79 	bl	8019d7c <__smakebuf_r>
 801908a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801908e:	f013 0201 	ands.w	r2, r3, #1
 8019092:	d00a      	beq.n	80190aa <__swsetup_r+0x9a>
 8019094:	2200      	movs	r2, #0
 8019096:	60a2      	str	r2, [r4, #8]
 8019098:	6962      	ldr	r2, [r4, #20]
 801909a:	4252      	negs	r2, r2
 801909c:	61a2      	str	r2, [r4, #24]
 801909e:	6922      	ldr	r2, [r4, #16]
 80190a0:	b942      	cbnz	r2, 80190b4 <__swsetup_r+0xa4>
 80190a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80190a6:	d1c5      	bne.n	8019034 <__swsetup_r+0x24>
 80190a8:	bd38      	pop	{r3, r4, r5, pc}
 80190aa:	0799      	lsls	r1, r3, #30
 80190ac:	bf58      	it	pl
 80190ae:	6962      	ldrpl	r2, [r4, #20]
 80190b0:	60a2      	str	r2, [r4, #8]
 80190b2:	e7f4      	b.n	801909e <__swsetup_r+0x8e>
 80190b4:	2000      	movs	r0, #0
 80190b6:	e7f7      	b.n	80190a8 <__swsetup_r+0x98>
 80190b8:	200000e4 	.word	0x200000e4

080190bc <memset>:
 80190bc:	4402      	add	r2, r0
 80190be:	4603      	mov	r3, r0
 80190c0:	4293      	cmp	r3, r2
 80190c2:	d100      	bne.n	80190c6 <memset+0xa>
 80190c4:	4770      	bx	lr
 80190c6:	f803 1b01 	strb.w	r1, [r3], #1
 80190ca:	e7f9      	b.n	80190c0 <memset+0x4>

080190cc <strchr>:
 80190cc:	b2c9      	uxtb	r1, r1
 80190ce:	4603      	mov	r3, r0
 80190d0:	4618      	mov	r0, r3
 80190d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190d6:	b112      	cbz	r2, 80190de <strchr+0x12>
 80190d8:	428a      	cmp	r2, r1
 80190da:	d1f9      	bne.n	80190d0 <strchr+0x4>
 80190dc:	4770      	bx	lr
 80190de:	2900      	cmp	r1, #0
 80190e0:	bf18      	it	ne
 80190e2:	2000      	movne	r0, #0
 80190e4:	4770      	bx	lr

080190e6 <strncmp>:
 80190e6:	b510      	push	{r4, lr}
 80190e8:	b16a      	cbz	r2, 8019106 <strncmp+0x20>
 80190ea:	3901      	subs	r1, #1
 80190ec:	1884      	adds	r4, r0, r2
 80190ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80190f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80190f6:	429a      	cmp	r2, r3
 80190f8:	d103      	bne.n	8019102 <strncmp+0x1c>
 80190fa:	42a0      	cmp	r0, r4
 80190fc:	d001      	beq.n	8019102 <strncmp+0x1c>
 80190fe:	2a00      	cmp	r2, #0
 8019100:	d1f5      	bne.n	80190ee <strncmp+0x8>
 8019102:	1ad0      	subs	r0, r2, r3
 8019104:	bd10      	pop	{r4, pc}
 8019106:	4610      	mov	r0, r2
 8019108:	e7fc      	b.n	8019104 <strncmp+0x1e>

0801910a <strstr>:
 801910a:	780a      	ldrb	r2, [r1, #0]
 801910c:	b570      	push	{r4, r5, r6, lr}
 801910e:	b96a      	cbnz	r2, 801912c <strstr+0x22>
 8019110:	bd70      	pop	{r4, r5, r6, pc}
 8019112:	429a      	cmp	r2, r3
 8019114:	d109      	bne.n	801912a <strstr+0x20>
 8019116:	460c      	mov	r4, r1
 8019118:	4605      	mov	r5, r0
 801911a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801911e:	2b00      	cmp	r3, #0
 8019120:	d0f6      	beq.n	8019110 <strstr+0x6>
 8019122:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019126:	429e      	cmp	r6, r3
 8019128:	d0f7      	beq.n	801911a <strstr+0x10>
 801912a:	3001      	adds	r0, #1
 801912c:	7803      	ldrb	r3, [r0, #0]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d1ef      	bne.n	8019112 <strstr+0x8>
 8019132:	4618      	mov	r0, r3
 8019134:	e7ec      	b.n	8019110 <strstr+0x6>
	...

08019138 <_close_r>:
 8019138:	b538      	push	{r3, r4, r5, lr}
 801913a:	4d06      	ldr	r5, [pc, #24]	@ (8019154 <_close_r+0x1c>)
 801913c:	2300      	movs	r3, #0
 801913e:	4604      	mov	r4, r0
 8019140:	4608      	mov	r0, r1
 8019142:	602b      	str	r3, [r5, #0]
 8019144:	f7e8 fefa 	bl	8001f3c <_close>
 8019148:	1c43      	adds	r3, r0, #1
 801914a:	d102      	bne.n	8019152 <_close_r+0x1a>
 801914c:	682b      	ldr	r3, [r5, #0]
 801914e:	b103      	cbz	r3, 8019152 <_close_r+0x1a>
 8019150:	6023      	str	r3, [r4, #0]
 8019152:	bd38      	pop	{r3, r4, r5, pc}
 8019154:	2000add4 	.word	0x2000add4

08019158 <_lseek_r>:
 8019158:	b538      	push	{r3, r4, r5, lr}
 801915a:	4d07      	ldr	r5, [pc, #28]	@ (8019178 <_lseek_r+0x20>)
 801915c:	4604      	mov	r4, r0
 801915e:	4608      	mov	r0, r1
 8019160:	4611      	mov	r1, r2
 8019162:	2200      	movs	r2, #0
 8019164:	602a      	str	r2, [r5, #0]
 8019166:	461a      	mov	r2, r3
 8019168:	f7e8 ff0f 	bl	8001f8a <_lseek>
 801916c:	1c43      	adds	r3, r0, #1
 801916e:	d102      	bne.n	8019176 <_lseek_r+0x1e>
 8019170:	682b      	ldr	r3, [r5, #0]
 8019172:	b103      	cbz	r3, 8019176 <_lseek_r+0x1e>
 8019174:	6023      	str	r3, [r4, #0]
 8019176:	bd38      	pop	{r3, r4, r5, pc}
 8019178:	2000add4 	.word	0x2000add4

0801917c <_read_r>:
 801917c:	b538      	push	{r3, r4, r5, lr}
 801917e:	4d07      	ldr	r5, [pc, #28]	@ (801919c <_read_r+0x20>)
 8019180:	4604      	mov	r4, r0
 8019182:	4608      	mov	r0, r1
 8019184:	4611      	mov	r1, r2
 8019186:	2200      	movs	r2, #0
 8019188:	602a      	str	r2, [r5, #0]
 801918a:	461a      	mov	r2, r3
 801918c:	f7e8 fe9d 	bl	8001eca <_read>
 8019190:	1c43      	adds	r3, r0, #1
 8019192:	d102      	bne.n	801919a <_read_r+0x1e>
 8019194:	682b      	ldr	r3, [r5, #0]
 8019196:	b103      	cbz	r3, 801919a <_read_r+0x1e>
 8019198:	6023      	str	r3, [r4, #0]
 801919a:	bd38      	pop	{r3, r4, r5, pc}
 801919c:	2000add4 	.word	0x2000add4

080191a0 <_sbrk_r>:
 80191a0:	b538      	push	{r3, r4, r5, lr}
 80191a2:	4d06      	ldr	r5, [pc, #24]	@ (80191bc <_sbrk_r+0x1c>)
 80191a4:	2300      	movs	r3, #0
 80191a6:	4604      	mov	r4, r0
 80191a8:	4608      	mov	r0, r1
 80191aa:	602b      	str	r3, [r5, #0]
 80191ac:	f7e8 fefa 	bl	8001fa4 <_sbrk>
 80191b0:	1c43      	adds	r3, r0, #1
 80191b2:	d102      	bne.n	80191ba <_sbrk_r+0x1a>
 80191b4:	682b      	ldr	r3, [r5, #0]
 80191b6:	b103      	cbz	r3, 80191ba <_sbrk_r+0x1a>
 80191b8:	6023      	str	r3, [r4, #0]
 80191ba:	bd38      	pop	{r3, r4, r5, pc}
 80191bc:	2000add4 	.word	0x2000add4

080191c0 <_write_r>:
 80191c0:	b538      	push	{r3, r4, r5, lr}
 80191c2:	4d07      	ldr	r5, [pc, #28]	@ (80191e0 <_write_r+0x20>)
 80191c4:	4604      	mov	r4, r0
 80191c6:	4608      	mov	r0, r1
 80191c8:	4611      	mov	r1, r2
 80191ca:	2200      	movs	r2, #0
 80191cc:	602a      	str	r2, [r5, #0]
 80191ce:	461a      	mov	r2, r3
 80191d0:	f7e8 fe98 	bl	8001f04 <_write>
 80191d4:	1c43      	adds	r3, r0, #1
 80191d6:	d102      	bne.n	80191de <_write_r+0x1e>
 80191d8:	682b      	ldr	r3, [r5, #0]
 80191da:	b103      	cbz	r3, 80191de <_write_r+0x1e>
 80191dc:	6023      	str	r3, [r4, #0]
 80191de:	bd38      	pop	{r3, r4, r5, pc}
 80191e0:	2000add4 	.word	0x2000add4

080191e4 <__errno>:
 80191e4:	4b01      	ldr	r3, [pc, #4]	@ (80191ec <__errno+0x8>)
 80191e6:	6818      	ldr	r0, [r3, #0]
 80191e8:	4770      	bx	lr
 80191ea:	bf00      	nop
 80191ec:	200000e4 	.word	0x200000e4

080191f0 <__libc_init_array>:
 80191f0:	b570      	push	{r4, r5, r6, lr}
 80191f2:	4d0d      	ldr	r5, [pc, #52]	@ (8019228 <__libc_init_array+0x38>)
 80191f4:	4c0d      	ldr	r4, [pc, #52]	@ (801922c <__libc_init_array+0x3c>)
 80191f6:	1b64      	subs	r4, r4, r5
 80191f8:	10a4      	asrs	r4, r4, #2
 80191fa:	2600      	movs	r6, #0
 80191fc:	42a6      	cmp	r6, r4
 80191fe:	d109      	bne.n	8019214 <__libc_init_array+0x24>
 8019200:	4d0b      	ldr	r5, [pc, #44]	@ (8019230 <__libc_init_array+0x40>)
 8019202:	4c0c      	ldr	r4, [pc, #48]	@ (8019234 <__libc_init_array+0x44>)
 8019204:	f000 fe7e 	bl	8019f04 <_init>
 8019208:	1b64      	subs	r4, r4, r5
 801920a:	10a4      	asrs	r4, r4, #2
 801920c:	2600      	movs	r6, #0
 801920e:	42a6      	cmp	r6, r4
 8019210:	d105      	bne.n	801921e <__libc_init_array+0x2e>
 8019212:	bd70      	pop	{r4, r5, r6, pc}
 8019214:	f855 3b04 	ldr.w	r3, [r5], #4
 8019218:	4798      	blx	r3
 801921a:	3601      	adds	r6, #1
 801921c:	e7ee      	b.n	80191fc <__libc_init_array+0xc>
 801921e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019222:	4798      	blx	r3
 8019224:	3601      	adds	r6, #1
 8019226:	e7f2      	b.n	801920e <__libc_init_array+0x1e>
 8019228:	0801ab1c 	.word	0x0801ab1c
 801922c:	0801ab1c 	.word	0x0801ab1c
 8019230:	0801ab1c 	.word	0x0801ab1c
 8019234:	0801ab24 	.word	0x0801ab24

08019238 <__retarget_lock_init_recursive>:
 8019238:	4770      	bx	lr

0801923a <__retarget_lock_acquire_recursive>:
 801923a:	4770      	bx	lr

0801923c <__retarget_lock_release_recursive>:
 801923c:	4770      	bx	lr

0801923e <strcpy>:
 801923e:	4603      	mov	r3, r0
 8019240:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019244:	f803 2b01 	strb.w	r2, [r3], #1
 8019248:	2a00      	cmp	r2, #0
 801924a:	d1f9      	bne.n	8019240 <strcpy+0x2>
 801924c:	4770      	bx	lr

0801924e <memcpy>:
 801924e:	440a      	add	r2, r1
 8019250:	4291      	cmp	r1, r2
 8019252:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8019256:	d100      	bne.n	801925a <memcpy+0xc>
 8019258:	4770      	bx	lr
 801925a:	b510      	push	{r4, lr}
 801925c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019260:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019264:	4291      	cmp	r1, r2
 8019266:	d1f9      	bne.n	801925c <memcpy+0xe>
 8019268:	bd10      	pop	{r4, pc}
	...

0801926c <__assert_func>:
 801926c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801926e:	4614      	mov	r4, r2
 8019270:	461a      	mov	r2, r3
 8019272:	4b09      	ldr	r3, [pc, #36]	@ (8019298 <__assert_func+0x2c>)
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	4605      	mov	r5, r0
 8019278:	68d8      	ldr	r0, [r3, #12]
 801927a:	b954      	cbnz	r4, 8019292 <__assert_func+0x26>
 801927c:	4b07      	ldr	r3, [pc, #28]	@ (801929c <__assert_func+0x30>)
 801927e:	461c      	mov	r4, r3
 8019280:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019284:	9100      	str	r1, [sp, #0]
 8019286:	462b      	mov	r3, r5
 8019288:	4905      	ldr	r1, [pc, #20]	@ (80192a0 <__assert_func+0x34>)
 801928a:	f000 fd3f 	bl	8019d0c <fiprintf>
 801928e:	f000 fded 	bl	8019e6c <abort>
 8019292:	4b04      	ldr	r3, [pc, #16]	@ (80192a4 <__assert_func+0x38>)
 8019294:	e7f4      	b.n	8019280 <__assert_func+0x14>
 8019296:	bf00      	nop
 8019298:	200000e4 	.word	0x200000e4
 801929c:	0801aadf 	.word	0x0801aadf
 80192a0:	0801aab1 	.word	0x0801aab1
 80192a4:	0801aaa4 	.word	0x0801aaa4

080192a8 <__env_lock>:
 80192a8:	4801      	ldr	r0, [pc, #4]	@ (80192b0 <__env_lock+0x8>)
 80192aa:	f7ff bfc6 	b.w	801923a <__retarget_lock_acquire_recursive>
 80192ae:	bf00      	nop
 80192b0:	2000add8 	.word	0x2000add8

080192b4 <__env_unlock>:
 80192b4:	4801      	ldr	r0, [pc, #4]	@ (80192bc <__env_unlock+0x8>)
 80192b6:	f7ff bfc1 	b.w	801923c <__retarget_lock_release_recursive>
 80192ba:	bf00      	nop
 80192bc:	2000add8 	.word	0x2000add8

080192c0 <_free_r>:
 80192c0:	b538      	push	{r3, r4, r5, lr}
 80192c2:	4605      	mov	r5, r0
 80192c4:	2900      	cmp	r1, #0
 80192c6:	d041      	beq.n	801934c <_free_r+0x8c>
 80192c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80192cc:	1f0c      	subs	r4, r1, #4
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	bfb8      	it	lt
 80192d2:	18e4      	addlt	r4, r4, r3
 80192d4:	f7ff fb36 	bl	8018944 <__malloc_lock>
 80192d8:	4a1d      	ldr	r2, [pc, #116]	@ (8019350 <_free_r+0x90>)
 80192da:	6813      	ldr	r3, [r2, #0]
 80192dc:	b933      	cbnz	r3, 80192ec <_free_r+0x2c>
 80192de:	6063      	str	r3, [r4, #4]
 80192e0:	6014      	str	r4, [r2, #0]
 80192e2:	4628      	mov	r0, r5
 80192e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80192e8:	f7ff bb32 	b.w	8018950 <__malloc_unlock>
 80192ec:	42a3      	cmp	r3, r4
 80192ee:	d908      	bls.n	8019302 <_free_r+0x42>
 80192f0:	6820      	ldr	r0, [r4, #0]
 80192f2:	1821      	adds	r1, r4, r0
 80192f4:	428b      	cmp	r3, r1
 80192f6:	bf01      	itttt	eq
 80192f8:	6819      	ldreq	r1, [r3, #0]
 80192fa:	685b      	ldreq	r3, [r3, #4]
 80192fc:	1809      	addeq	r1, r1, r0
 80192fe:	6021      	streq	r1, [r4, #0]
 8019300:	e7ed      	b.n	80192de <_free_r+0x1e>
 8019302:	461a      	mov	r2, r3
 8019304:	685b      	ldr	r3, [r3, #4]
 8019306:	b10b      	cbz	r3, 801930c <_free_r+0x4c>
 8019308:	42a3      	cmp	r3, r4
 801930a:	d9fa      	bls.n	8019302 <_free_r+0x42>
 801930c:	6811      	ldr	r1, [r2, #0]
 801930e:	1850      	adds	r0, r2, r1
 8019310:	42a0      	cmp	r0, r4
 8019312:	d10b      	bne.n	801932c <_free_r+0x6c>
 8019314:	6820      	ldr	r0, [r4, #0]
 8019316:	4401      	add	r1, r0
 8019318:	1850      	adds	r0, r2, r1
 801931a:	4283      	cmp	r3, r0
 801931c:	6011      	str	r1, [r2, #0]
 801931e:	d1e0      	bne.n	80192e2 <_free_r+0x22>
 8019320:	6818      	ldr	r0, [r3, #0]
 8019322:	685b      	ldr	r3, [r3, #4]
 8019324:	6053      	str	r3, [r2, #4]
 8019326:	4408      	add	r0, r1
 8019328:	6010      	str	r0, [r2, #0]
 801932a:	e7da      	b.n	80192e2 <_free_r+0x22>
 801932c:	d902      	bls.n	8019334 <_free_r+0x74>
 801932e:	230c      	movs	r3, #12
 8019330:	602b      	str	r3, [r5, #0]
 8019332:	e7d6      	b.n	80192e2 <_free_r+0x22>
 8019334:	6820      	ldr	r0, [r4, #0]
 8019336:	1821      	adds	r1, r4, r0
 8019338:	428b      	cmp	r3, r1
 801933a:	bf04      	itt	eq
 801933c:	6819      	ldreq	r1, [r3, #0]
 801933e:	685b      	ldreq	r3, [r3, #4]
 8019340:	6063      	str	r3, [r4, #4]
 8019342:	bf04      	itt	eq
 8019344:	1809      	addeq	r1, r1, r0
 8019346:	6021      	streq	r1, [r4, #0]
 8019348:	6054      	str	r4, [r2, #4]
 801934a:	e7ca      	b.n	80192e2 <_free_r+0x22>
 801934c:	bd38      	pop	{r3, r4, r5, pc}
 801934e:	bf00      	nop
 8019350:	2000ac94 	.word	0x2000ac94

08019354 <_malloc_usable_size_r>:
 8019354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019358:	1f18      	subs	r0, r3, #4
 801935a:	2b00      	cmp	r3, #0
 801935c:	bfbc      	itt	lt
 801935e:	580b      	ldrlt	r3, [r1, r0]
 8019360:	18c0      	addlt	r0, r0, r3
 8019362:	4770      	bx	lr

08019364 <__ssputs_r>:
 8019364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019368:	688e      	ldr	r6, [r1, #8]
 801936a:	461f      	mov	r7, r3
 801936c:	42be      	cmp	r6, r7
 801936e:	680b      	ldr	r3, [r1, #0]
 8019370:	4682      	mov	sl, r0
 8019372:	460c      	mov	r4, r1
 8019374:	4690      	mov	r8, r2
 8019376:	d82d      	bhi.n	80193d4 <__ssputs_r+0x70>
 8019378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801937c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019380:	d026      	beq.n	80193d0 <__ssputs_r+0x6c>
 8019382:	6965      	ldr	r5, [r4, #20]
 8019384:	6909      	ldr	r1, [r1, #16]
 8019386:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801938a:	eba3 0901 	sub.w	r9, r3, r1
 801938e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019392:	1c7b      	adds	r3, r7, #1
 8019394:	444b      	add	r3, r9
 8019396:	106d      	asrs	r5, r5, #1
 8019398:	429d      	cmp	r5, r3
 801939a:	bf38      	it	cc
 801939c:	461d      	movcc	r5, r3
 801939e:	0553      	lsls	r3, r2, #21
 80193a0:	d527      	bpl.n	80193f2 <__ssputs_r+0x8e>
 80193a2:	4629      	mov	r1, r5
 80193a4:	f7ff fa4e 	bl	8018844 <_malloc_r>
 80193a8:	4606      	mov	r6, r0
 80193aa:	b360      	cbz	r0, 8019406 <__ssputs_r+0xa2>
 80193ac:	6921      	ldr	r1, [r4, #16]
 80193ae:	464a      	mov	r2, r9
 80193b0:	f7ff ff4d 	bl	801924e <memcpy>
 80193b4:	89a3      	ldrh	r3, [r4, #12]
 80193b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80193ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80193be:	81a3      	strh	r3, [r4, #12]
 80193c0:	6126      	str	r6, [r4, #16]
 80193c2:	6165      	str	r5, [r4, #20]
 80193c4:	444e      	add	r6, r9
 80193c6:	eba5 0509 	sub.w	r5, r5, r9
 80193ca:	6026      	str	r6, [r4, #0]
 80193cc:	60a5      	str	r5, [r4, #8]
 80193ce:	463e      	mov	r6, r7
 80193d0:	42be      	cmp	r6, r7
 80193d2:	d900      	bls.n	80193d6 <__ssputs_r+0x72>
 80193d4:	463e      	mov	r6, r7
 80193d6:	6820      	ldr	r0, [r4, #0]
 80193d8:	4632      	mov	r2, r6
 80193da:	4641      	mov	r1, r8
 80193dc:	f000 fd0a 	bl	8019df4 <memmove>
 80193e0:	68a3      	ldr	r3, [r4, #8]
 80193e2:	1b9b      	subs	r3, r3, r6
 80193e4:	60a3      	str	r3, [r4, #8]
 80193e6:	6823      	ldr	r3, [r4, #0]
 80193e8:	4433      	add	r3, r6
 80193ea:	6023      	str	r3, [r4, #0]
 80193ec:	2000      	movs	r0, #0
 80193ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193f2:	462a      	mov	r2, r5
 80193f4:	f7ff fb26 	bl	8018a44 <_realloc_r>
 80193f8:	4606      	mov	r6, r0
 80193fa:	2800      	cmp	r0, #0
 80193fc:	d1e0      	bne.n	80193c0 <__ssputs_r+0x5c>
 80193fe:	6921      	ldr	r1, [r4, #16]
 8019400:	4650      	mov	r0, sl
 8019402:	f7ff ff5d 	bl	80192c0 <_free_r>
 8019406:	230c      	movs	r3, #12
 8019408:	f8ca 3000 	str.w	r3, [sl]
 801940c:	89a3      	ldrh	r3, [r4, #12]
 801940e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019412:	81a3      	strh	r3, [r4, #12]
 8019414:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019418:	e7e9      	b.n	80193ee <__ssputs_r+0x8a>
	...

0801941c <_svfiprintf_r>:
 801941c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019420:	4698      	mov	r8, r3
 8019422:	898b      	ldrh	r3, [r1, #12]
 8019424:	061b      	lsls	r3, r3, #24
 8019426:	b09d      	sub	sp, #116	@ 0x74
 8019428:	4607      	mov	r7, r0
 801942a:	460d      	mov	r5, r1
 801942c:	4614      	mov	r4, r2
 801942e:	d510      	bpl.n	8019452 <_svfiprintf_r+0x36>
 8019430:	690b      	ldr	r3, [r1, #16]
 8019432:	b973      	cbnz	r3, 8019452 <_svfiprintf_r+0x36>
 8019434:	2140      	movs	r1, #64	@ 0x40
 8019436:	f7ff fa05 	bl	8018844 <_malloc_r>
 801943a:	6028      	str	r0, [r5, #0]
 801943c:	6128      	str	r0, [r5, #16]
 801943e:	b930      	cbnz	r0, 801944e <_svfiprintf_r+0x32>
 8019440:	230c      	movs	r3, #12
 8019442:	603b      	str	r3, [r7, #0]
 8019444:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019448:	b01d      	add	sp, #116	@ 0x74
 801944a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801944e:	2340      	movs	r3, #64	@ 0x40
 8019450:	616b      	str	r3, [r5, #20]
 8019452:	2300      	movs	r3, #0
 8019454:	9309      	str	r3, [sp, #36]	@ 0x24
 8019456:	2320      	movs	r3, #32
 8019458:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801945c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019460:	2330      	movs	r3, #48	@ 0x30
 8019462:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019600 <_svfiprintf_r+0x1e4>
 8019466:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801946a:	f04f 0901 	mov.w	r9, #1
 801946e:	4623      	mov	r3, r4
 8019470:	469a      	mov	sl, r3
 8019472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019476:	b10a      	cbz	r2, 801947c <_svfiprintf_r+0x60>
 8019478:	2a25      	cmp	r2, #37	@ 0x25
 801947a:	d1f9      	bne.n	8019470 <_svfiprintf_r+0x54>
 801947c:	ebba 0b04 	subs.w	fp, sl, r4
 8019480:	d00b      	beq.n	801949a <_svfiprintf_r+0x7e>
 8019482:	465b      	mov	r3, fp
 8019484:	4622      	mov	r2, r4
 8019486:	4629      	mov	r1, r5
 8019488:	4638      	mov	r0, r7
 801948a:	f7ff ff6b 	bl	8019364 <__ssputs_r>
 801948e:	3001      	adds	r0, #1
 8019490:	f000 80a7 	beq.w	80195e2 <_svfiprintf_r+0x1c6>
 8019494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019496:	445a      	add	r2, fp
 8019498:	9209      	str	r2, [sp, #36]	@ 0x24
 801949a:	f89a 3000 	ldrb.w	r3, [sl]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	f000 809f 	beq.w	80195e2 <_svfiprintf_r+0x1c6>
 80194a4:	2300      	movs	r3, #0
 80194a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80194aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80194ae:	f10a 0a01 	add.w	sl, sl, #1
 80194b2:	9304      	str	r3, [sp, #16]
 80194b4:	9307      	str	r3, [sp, #28]
 80194b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80194ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80194bc:	4654      	mov	r4, sl
 80194be:	2205      	movs	r2, #5
 80194c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194c4:	484e      	ldr	r0, [pc, #312]	@ (8019600 <_svfiprintf_r+0x1e4>)
 80194c6:	f7e6 fe9b 	bl	8000200 <memchr>
 80194ca:	9a04      	ldr	r2, [sp, #16]
 80194cc:	b9d8      	cbnz	r0, 8019506 <_svfiprintf_r+0xea>
 80194ce:	06d0      	lsls	r0, r2, #27
 80194d0:	bf44      	itt	mi
 80194d2:	2320      	movmi	r3, #32
 80194d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80194d8:	0711      	lsls	r1, r2, #28
 80194da:	bf44      	itt	mi
 80194dc:	232b      	movmi	r3, #43	@ 0x2b
 80194de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80194e2:	f89a 3000 	ldrb.w	r3, [sl]
 80194e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80194e8:	d015      	beq.n	8019516 <_svfiprintf_r+0xfa>
 80194ea:	9a07      	ldr	r2, [sp, #28]
 80194ec:	4654      	mov	r4, sl
 80194ee:	2000      	movs	r0, #0
 80194f0:	f04f 0c0a 	mov.w	ip, #10
 80194f4:	4621      	mov	r1, r4
 80194f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80194fa:	3b30      	subs	r3, #48	@ 0x30
 80194fc:	2b09      	cmp	r3, #9
 80194fe:	d94b      	bls.n	8019598 <_svfiprintf_r+0x17c>
 8019500:	b1b0      	cbz	r0, 8019530 <_svfiprintf_r+0x114>
 8019502:	9207      	str	r2, [sp, #28]
 8019504:	e014      	b.n	8019530 <_svfiprintf_r+0x114>
 8019506:	eba0 0308 	sub.w	r3, r0, r8
 801950a:	fa09 f303 	lsl.w	r3, r9, r3
 801950e:	4313      	orrs	r3, r2
 8019510:	9304      	str	r3, [sp, #16]
 8019512:	46a2      	mov	sl, r4
 8019514:	e7d2      	b.n	80194bc <_svfiprintf_r+0xa0>
 8019516:	9b03      	ldr	r3, [sp, #12]
 8019518:	1d19      	adds	r1, r3, #4
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	9103      	str	r1, [sp, #12]
 801951e:	2b00      	cmp	r3, #0
 8019520:	bfbb      	ittet	lt
 8019522:	425b      	neglt	r3, r3
 8019524:	f042 0202 	orrlt.w	r2, r2, #2
 8019528:	9307      	strge	r3, [sp, #28]
 801952a:	9307      	strlt	r3, [sp, #28]
 801952c:	bfb8      	it	lt
 801952e:	9204      	strlt	r2, [sp, #16]
 8019530:	7823      	ldrb	r3, [r4, #0]
 8019532:	2b2e      	cmp	r3, #46	@ 0x2e
 8019534:	d10a      	bne.n	801954c <_svfiprintf_r+0x130>
 8019536:	7863      	ldrb	r3, [r4, #1]
 8019538:	2b2a      	cmp	r3, #42	@ 0x2a
 801953a:	d132      	bne.n	80195a2 <_svfiprintf_r+0x186>
 801953c:	9b03      	ldr	r3, [sp, #12]
 801953e:	1d1a      	adds	r2, r3, #4
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	9203      	str	r2, [sp, #12]
 8019544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019548:	3402      	adds	r4, #2
 801954a:	9305      	str	r3, [sp, #20]
 801954c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019610 <_svfiprintf_r+0x1f4>
 8019550:	7821      	ldrb	r1, [r4, #0]
 8019552:	2203      	movs	r2, #3
 8019554:	4650      	mov	r0, sl
 8019556:	f7e6 fe53 	bl	8000200 <memchr>
 801955a:	b138      	cbz	r0, 801956c <_svfiprintf_r+0x150>
 801955c:	9b04      	ldr	r3, [sp, #16]
 801955e:	eba0 000a 	sub.w	r0, r0, sl
 8019562:	2240      	movs	r2, #64	@ 0x40
 8019564:	4082      	lsls	r2, r0
 8019566:	4313      	orrs	r3, r2
 8019568:	3401      	adds	r4, #1
 801956a:	9304      	str	r3, [sp, #16]
 801956c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019570:	4824      	ldr	r0, [pc, #144]	@ (8019604 <_svfiprintf_r+0x1e8>)
 8019572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019576:	2206      	movs	r2, #6
 8019578:	f7e6 fe42 	bl	8000200 <memchr>
 801957c:	2800      	cmp	r0, #0
 801957e:	d036      	beq.n	80195ee <_svfiprintf_r+0x1d2>
 8019580:	4b21      	ldr	r3, [pc, #132]	@ (8019608 <_svfiprintf_r+0x1ec>)
 8019582:	bb1b      	cbnz	r3, 80195cc <_svfiprintf_r+0x1b0>
 8019584:	9b03      	ldr	r3, [sp, #12]
 8019586:	3307      	adds	r3, #7
 8019588:	f023 0307 	bic.w	r3, r3, #7
 801958c:	3308      	adds	r3, #8
 801958e:	9303      	str	r3, [sp, #12]
 8019590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019592:	4433      	add	r3, r6
 8019594:	9309      	str	r3, [sp, #36]	@ 0x24
 8019596:	e76a      	b.n	801946e <_svfiprintf_r+0x52>
 8019598:	fb0c 3202 	mla	r2, ip, r2, r3
 801959c:	460c      	mov	r4, r1
 801959e:	2001      	movs	r0, #1
 80195a0:	e7a8      	b.n	80194f4 <_svfiprintf_r+0xd8>
 80195a2:	2300      	movs	r3, #0
 80195a4:	3401      	adds	r4, #1
 80195a6:	9305      	str	r3, [sp, #20]
 80195a8:	4619      	mov	r1, r3
 80195aa:	f04f 0c0a 	mov.w	ip, #10
 80195ae:	4620      	mov	r0, r4
 80195b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80195b4:	3a30      	subs	r2, #48	@ 0x30
 80195b6:	2a09      	cmp	r2, #9
 80195b8:	d903      	bls.n	80195c2 <_svfiprintf_r+0x1a6>
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d0c6      	beq.n	801954c <_svfiprintf_r+0x130>
 80195be:	9105      	str	r1, [sp, #20]
 80195c0:	e7c4      	b.n	801954c <_svfiprintf_r+0x130>
 80195c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80195c6:	4604      	mov	r4, r0
 80195c8:	2301      	movs	r3, #1
 80195ca:	e7f0      	b.n	80195ae <_svfiprintf_r+0x192>
 80195cc:	ab03      	add	r3, sp, #12
 80195ce:	9300      	str	r3, [sp, #0]
 80195d0:	462a      	mov	r2, r5
 80195d2:	4b0e      	ldr	r3, [pc, #56]	@ (801960c <_svfiprintf_r+0x1f0>)
 80195d4:	a904      	add	r1, sp, #16
 80195d6:	4638      	mov	r0, r7
 80195d8:	f3af 8000 	nop.w
 80195dc:	1c42      	adds	r2, r0, #1
 80195de:	4606      	mov	r6, r0
 80195e0:	d1d6      	bne.n	8019590 <_svfiprintf_r+0x174>
 80195e2:	89ab      	ldrh	r3, [r5, #12]
 80195e4:	065b      	lsls	r3, r3, #25
 80195e6:	f53f af2d 	bmi.w	8019444 <_svfiprintf_r+0x28>
 80195ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80195ec:	e72c      	b.n	8019448 <_svfiprintf_r+0x2c>
 80195ee:	ab03      	add	r3, sp, #12
 80195f0:	9300      	str	r3, [sp, #0]
 80195f2:	462a      	mov	r2, r5
 80195f4:	4b05      	ldr	r3, [pc, #20]	@ (801960c <_svfiprintf_r+0x1f0>)
 80195f6:	a904      	add	r1, sp, #16
 80195f8:	4638      	mov	r0, r7
 80195fa:	f000 f9bb 	bl	8019974 <_printf_i>
 80195fe:	e7ed      	b.n	80195dc <_svfiprintf_r+0x1c0>
 8019600:	0801aae0 	.word	0x0801aae0
 8019604:	0801aaea 	.word	0x0801aaea
 8019608:	00000000 	.word	0x00000000
 801960c:	08019365 	.word	0x08019365
 8019610:	0801aae6 	.word	0x0801aae6

08019614 <__sfputc_r>:
 8019614:	6893      	ldr	r3, [r2, #8]
 8019616:	3b01      	subs	r3, #1
 8019618:	2b00      	cmp	r3, #0
 801961a:	b410      	push	{r4}
 801961c:	6093      	str	r3, [r2, #8]
 801961e:	da08      	bge.n	8019632 <__sfputc_r+0x1e>
 8019620:	6994      	ldr	r4, [r2, #24]
 8019622:	42a3      	cmp	r3, r4
 8019624:	db01      	blt.n	801962a <__sfputc_r+0x16>
 8019626:	290a      	cmp	r1, #10
 8019628:	d103      	bne.n	8019632 <__sfputc_r+0x1e>
 801962a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801962e:	f7ff bcb1 	b.w	8018f94 <__swbuf_r>
 8019632:	6813      	ldr	r3, [r2, #0]
 8019634:	1c58      	adds	r0, r3, #1
 8019636:	6010      	str	r0, [r2, #0]
 8019638:	7019      	strb	r1, [r3, #0]
 801963a:	4608      	mov	r0, r1
 801963c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019640:	4770      	bx	lr

08019642 <__sfputs_r>:
 8019642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019644:	4606      	mov	r6, r0
 8019646:	460f      	mov	r7, r1
 8019648:	4614      	mov	r4, r2
 801964a:	18d5      	adds	r5, r2, r3
 801964c:	42ac      	cmp	r4, r5
 801964e:	d101      	bne.n	8019654 <__sfputs_r+0x12>
 8019650:	2000      	movs	r0, #0
 8019652:	e007      	b.n	8019664 <__sfputs_r+0x22>
 8019654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019658:	463a      	mov	r2, r7
 801965a:	4630      	mov	r0, r6
 801965c:	f7ff ffda 	bl	8019614 <__sfputc_r>
 8019660:	1c43      	adds	r3, r0, #1
 8019662:	d1f3      	bne.n	801964c <__sfputs_r+0xa>
 8019664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019668 <_vfiprintf_r>:
 8019668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801966c:	460d      	mov	r5, r1
 801966e:	b09d      	sub	sp, #116	@ 0x74
 8019670:	4614      	mov	r4, r2
 8019672:	4698      	mov	r8, r3
 8019674:	4606      	mov	r6, r0
 8019676:	b118      	cbz	r0, 8019680 <_vfiprintf_r+0x18>
 8019678:	6a03      	ldr	r3, [r0, #32]
 801967a:	b90b      	cbnz	r3, 8019680 <_vfiprintf_r+0x18>
 801967c:	f7ff fb14 	bl	8018ca8 <__sinit>
 8019680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019682:	07d9      	lsls	r1, r3, #31
 8019684:	d405      	bmi.n	8019692 <_vfiprintf_r+0x2a>
 8019686:	89ab      	ldrh	r3, [r5, #12]
 8019688:	059a      	lsls	r2, r3, #22
 801968a:	d402      	bmi.n	8019692 <_vfiprintf_r+0x2a>
 801968c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801968e:	f7ff fdd4 	bl	801923a <__retarget_lock_acquire_recursive>
 8019692:	89ab      	ldrh	r3, [r5, #12]
 8019694:	071b      	lsls	r3, r3, #28
 8019696:	d501      	bpl.n	801969c <_vfiprintf_r+0x34>
 8019698:	692b      	ldr	r3, [r5, #16]
 801969a:	b99b      	cbnz	r3, 80196c4 <_vfiprintf_r+0x5c>
 801969c:	4629      	mov	r1, r5
 801969e:	4630      	mov	r0, r6
 80196a0:	f7ff fcb6 	bl	8019010 <__swsetup_r>
 80196a4:	b170      	cbz	r0, 80196c4 <_vfiprintf_r+0x5c>
 80196a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80196a8:	07dc      	lsls	r4, r3, #31
 80196aa:	d504      	bpl.n	80196b6 <_vfiprintf_r+0x4e>
 80196ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80196b0:	b01d      	add	sp, #116	@ 0x74
 80196b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196b6:	89ab      	ldrh	r3, [r5, #12]
 80196b8:	0598      	lsls	r0, r3, #22
 80196ba:	d4f7      	bmi.n	80196ac <_vfiprintf_r+0x44>
 80196bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80196be:	f7ff fdbd 	bl	801923c <__retarget_lock_release_recursive>
 80196c2:	e7f3      	b.n	80196ac <_vfiprintf_r+0x44>
 80196c4:	2300      	movs	r3, #0
 80196c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80196c8:	2320      	movs	r3, #32
 80196ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80196ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80196d2:	2330      	movs	r3, #48	@ 0x30
 80196d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019884 <_vfiprintf_r+0x21c>
 80196d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80196dc:	f04f 0901 	mov.w	r9, #1
 80196e0:	4623      	mov	r3, r4
 80196e2:	469a      	mov	sl, r3
 80196e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80196e8:	b10a      	cbz	r2, 80196ee <_vfiprintf_r+0x86>
 80196ea:	2a25      	cmp	r2, #37	@ 0x25
 80196ec:	d1f9      	bne.n	80196e2 <_vfiprintf_r+0x7a>
 80196ee:	ebba 0b04 	subs.w	fp, sl, r4
 80196f2:	d00b      	beq.n	801970c <_vfiprintf_r+0xa4>
 80196f4:	465b      	mov	r3, fp
 80196f6:	4622      	mov	r2, r4
 80196f8:	4629      	mov	r1, r5
 80196fa:	4630      	mov	r0, r6
 80196fc:	f7ff ffa1 	bl	8019642 <__sfputs_r>
 8019700:	3001      	adds	r0, #1
 8019702:	f000 80a7 	beq.w	8019854 <_vfiprintf_r+0x1ec>
 8019706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019708:	445a      	add	r2, fp
 801970a:	9209      	str	r2, [sp, #36]	@ 0x24
 801970c:	f89a 3000 	ldrb.w	r3, [sl]
 8019710:	2b00      	cmp	r3, #0
 8019712:	f000 809f 	beq.w	8019854 <_vfiprintf_r+0x1ec>
 8019716:	2300      	movs	r3, #0
 8019718:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801971c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019720:	f10a 0a01 	add.w	sl, sl, #1
 8019724:	9304      	str	r3, [sp, #16]
 8019726:	9307      	str	r3, [sp, #28]
 8019728:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801972c:	931a      	str	r3, [sp, #104]	@ 0x68
 801972e:	4654      	mov	r4, sl
 8019730:	2205      	movs	r2, #5
 8019732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019736:	4853      	ldr	r0, [pc, #332]	@ (8019884 <_vfiprintf_r+0x21c>)
 8019738:	f7e6 fd62 	bl	8000200 <memchr>
 801973c:	9a04      	ldr	r2, [sp, #16]
 801973e:	b9d8      	cbnz	r0, 8019778 <_vfiprintf_r+0x110>
 8019740:	06d1      	lsls	r1, r2, #27
 8019742:	bf44      	itt	mi
 8019744:	2320      	movmi	r3, #32
 8019746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801974a:	0713      	lsls	r3, r2, #28
 801974c:	bf44      	itt	mi
 801974e:	232b      	movmi	r3, #43	@ 0x2b
 8019750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019754:	f89a 3000 	ldrb.w	r3, [sl]
 8019758:	2b2a      	cmp	r3, #42	@ 0x2a
 801975a:	d015      	beq.n	8019788 <_vfiprintf_r+0x120>
 801975c:	9a07      	ldr	r2, [sp, #28]
 801975e:	4654      	mov	r4, sl
 8019760:	2000      	movs	r0, #0
 8019762:	f04f 0c0a 	mov.w	ip, #10
 8019766:	4621      	mov	r1, r4
 8019768:	f811 3b01 	ldrb.w	r3, [r1], #1
 801976c:	3b30      	subs	r3, #48	@ 0x30
 801976e:	2b09      	cmp	r3, #9
 8019770:	d94b      	bls.n	801980a <_vfiprintf_r+0x1a2>
 8019772:	b1b0      	cbz	r0, 80197a2 <_vfiprintf_r+0x13a>
 8019774:	9207      	str	r2, [sp, #28]
 8019776:	e014      	b.n	80197a2 <_vfiprintf_r+0x13a>
 8019778:	eba0 0308 	sub.w	r3, r0, r8
 801977c:	fa09 f303 	lsl.w	r3, r9, r3
 8019780:	4313      	orrs	r3, r2
 8019782:	9304      	str	r3, [sp, #16]
 8019784:	46a2      	mov	sl, r4
 8019786:	e7d2      	b.n	801972e <_vfiprintf_r+0xc6>
 8019788:	9b03      	ldr	r3, [sp, #12]
 801978a:	1d19      	adds	r1, r3, #4
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	9103      	str	r1, [sp, #12]
 8019790:	2b00      	cmp	r3, #0
 8019792:	bfbb      	ittet	lt
 8019794:	425b      	neglt	r3, r3
 8019796:	f042 0202 	orrlt.w	r2, r2, #2
 801979a:	9307      	strge	r3, [sp, #28]
 801979c:	9307      	strlt	r3, [sp, #28]
 801979e:	bfb8      	it	lt
 80197a0:	9204      	strlt	r2, [sp, #16]
 80197a2:	7823      	ldrb	r3, [r4, #0]
 80197a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80197a6:	d10a      	bne.n	80197be <_vfiprintf_r+0x156>
 80197a8:	7863      	ldrb	r3, [r4, #1]
 80197aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80197ac:	d132      	bne.n	8019814 <_vfiprintf_r+0x1ac>
 80197ae:	9b03      	ldr	r3, [sp, #12]
 80197b0:	1d1a      	adds	r2, r3, #4
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	9203      	str	r2, [sp, #12]
 80197b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80197ba:	3402      	adds	r4, #2
 80197bc:	9305      	str	r3, [sp, #20]
 80197be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019894 <_vfiprintf_r+0x22c>
 80197c2:	7821      	ldrb	r1, [r4, #0]
 80197c4:	2203      	movs	r2, #3
 80197c6:	4650      	mov	r0, sl
 80197c8:	f7e6 fd1a 	bl	8000200 <memchr>
 80197cc:	b138      	cbz	r0, 80197de <_vfiprintf_r+0x176>
 80197ce:	9b04      	ldr	r3, [sp, #16]
 80197d0:	eba0 000a 	sub.w	r0, r0, sl
 80197d4:	2240      	movs	r2, #64	@ 0x40
 80197d6:	4082      	lsls	r2, r0
 80197d8:	4313      	orrs	r3, r2
 80197da:	3401      	adds	r4, #1
 80197dc:	9304      	str	r3, [sp, #16]
 80197de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197e2:	4829      	ldr	r0, [pc, #164]	@ (8019888 <_vfiprintf_r+0x220>)
 80197e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80197e8:	2206      	movs	r2, #6
 80197ea:	f7e6 fd09 	bl	8000200 <memchr>
 80197ee:	2800      	cmp	r0, #0
 80197f0:	d03f      	beq.n	8019872 <_vfiprintf_r+0x20a>
 80197f2:	4b26      	ldr	r3, [pc, #152]	@ (801988c <_vfiprintf_r+0x224>)
 80197f4:	bb1b      	cbnz	r3, 801983e <_vfiprintf_r+0x1d6>
 80197f6:	9b03      	ldr	r3, [sp, #12]
 80197f8:	3307      	adds	r3, #7
 80197fa:	f023 0307 	bic.w	r3, r3, #7
 80197fe:	3308      	adds	r3, #8
 8019800:	9303      	str	r3, [sp, #12]
 8019802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019804:	443b      	add	r3, r7
 8019806:	9309      	str	r3, [sp, #36]	@ 0x24
 8019808:	e76a      	b.n	80196e0 <_vfiprintf_r+0x78>
 801980a:	fb0c 3202 	mla	r2, ip, r2, r3
 801980e:	460c      	mov	r4, r1
 8019810:	2001      	movs	r0, #1
 8019812:	e7a8      	b.n	8019766 <_vfiprintf_r+0xfe>
 8019814:	2300      	movs	r3, #0
 8019816:	3401      	adds	r4, #1
 8019818:	9305      	str	r3, [sp, #20]
 801981a:	4619      	mov	r1, r3
 801981c:	f04f 0c0a 	mov.w	ip, #10
 8019820:	4620      	mov	r0, r4
 8019822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019826:	3a30      	subs	r2, #48	@ 0x30
 8019828:	2a09      	cmp	r2, #9
 801982a:	d903      	bls.n	8019834 <_vfiprintf_r+0x1cc>
 801982c:	2b00      	cmp	r3, #0
 801982e:	d0c6      	beq.n	80197be <_vfiprintf_r+0x156>
 8019830:	9105      	str	r1, [sp, #20]
 8019832:	e7c4      	b.n	80197be <_vfiprintf_r+0x156>
 8019834:	fb0c 2101 	mla	r1, ip, r1, r2
 8019838:	4604      	mov	r4, r0
 801983a:	2301      	movs	r3, #1
 801983c:	e7f0      	b.n	8019820 <_vfiprintf_r+0x1b8>
 801983e:	ab03      	add	r3, sp, #12
 8019840:	9300      	str	r3, [sp, #0]
 8019842:	462a      	mov	r2, r5
 8019844:	4b12      	ldr	r3, [pc, #72]	@ (8019890 <_vfiprintf_r+0x228>)
 8019846:	a904      	add	r1, sp, #16
 8019848:	4630      	mov	r0, r6
 801984a:	f3af 8000 	nop.w
 801984e:	4607      	mov	r7, r0
 8019850:	1c78      	adds	r0, r7, #1
 8019852:	d1d6      	bne.n	8019802 <_vfiprintf_r+0x19a>
 8019854:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019856:	07d9      	lsls	r1, r3, #31
 8019858:	d405      	bmi.n	8019866 <_vfiprintf_r+0x1fe>
 801985a:	89ab      	ldrh	r3, [r5, #12]
 801985c:	059a      	lsls	r2, r3, #22
 801985e:	d402      	bmi.n	8019866 <_vfiprintf_r+0x1fe>
 8019860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019862:	f7ff fceb 	bl	801923c <__retarget_lock_release_recursive>
 8019866:	89ab      	ldrh	r3, [r5, #12]
 8019868:	065b      	lsls	r3, r3, #25
 801986a:	f53f af1f 	bmi.w	80196ac <_vfiprintf_r+0x44>
 801986e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019870:	e71e      	b.n	80196b0 <_vfiprintf_r+0x48>
 8019872:	ab03      	add	r3, sp, #12
 8019874:	9300      	str	r3, [sp, #0]
 8019876:	462a      	mov	r2, r5
 8019878:	4b05      	ldr	r3, [pc, #20]	@ (8019890 <_vfiprintf_r+0x228>)
 801987a:	a904      	add	r1, sp, #16
 801987c:	4630      	mov	r0, r6
 801987e:	f000 f879 	bl	8019974 <_printf_i>
 8019882:	e7e4      	b.n	801984e <_vfiprintf_r+0x1e6>
 8019884:	0801aae0 	.word	0x0801aae0
 8019888:	0801aaea 	.word	0x0801aaea
 801988c:	00000000 	.word	0x00000000
 8019890:	08019643 	.word	0x08019643
 8019894:	0801aae6 	.word	0x0801aae6

08019898 <_printf_common>:
 8019898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801989c:	4616      	mov	r6, r2
 801989e:	4698      	mov	r8, r3
 80198a0:	688a      	ldr	r2, [r1, #8]
 80198a2:	690b      	ldr	r3, [r1, #16]
 80198a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80198a8:	4293      	cmp	r3, r2
 80198aa:	bfb8      	it	lt
 80198ac:	4613      	movlt	r3, r2
 80198ae:	6033      	str	r3, [r6, #0]
 80198b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80198b4:	4607      	mov	r7, r0
 80198b6:	460c      	mov	r4, r1
 80198b8:	b10a      	cbz	r2, 80198be <_printf_common+0x26>
 80198ba:	3301      	adds	r3, #1
 80198bc:	6033      	str	r3, [r6, #0]
 80198be:	6823      	ldr	r3, [r4, #0]
 80198c0:	0699      	lsls	r1, r3, #26
 80198c2:	bf42      	ittt	mi
 80198c4:	6833      	ldrmi	r3, [r6, #0]
 80198c6:	3302      	addmi	r3, #2
 80198c8:	6033      	strmi	r3, [r6, #0]
 80198ca:	6825      	ldr	r5, [r4, #0]
 80198cc:	f015 0506 	ands.w	r5, r5, #6
 80198d0:	d106      	bne.n	80198e0 <_printf_common+0x48>
 80198d2:	f104 0a19 	add.w	sl, r4, #25
 80198d6:	68e3      	ldr	r3, [r4, #12]
 80198d8:	6832      	ldr	r2, [r6, #0]
 80198da:	1a9b      	subs	r3, r3, r2
 80198dc:	42ab      	cmp	r3, r5
 80198de:	dc26      	bgt.n	801992e <_printf_common+0x96>
 80198e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80198e4:	6822      	ldr	r2, [r4, #0]
 80198e6:	3b00      	subs	r3, #0
 80198e8:	bf18      	it	ne
 80198ea:	2301      	movne	r3, #1
 80198ec:	0692      	lsls	r2, r2, #26
 80198ee:	d42b      	bmi.n	8019948 <_printf_common+0xb0>
 80198f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80198f4:	4641      	mov	r1, r8
 80198f6:	4638      	mov	r0, r7
 80198f8:	47c8      	blx	r9
 80198fa:	3001      	adds	r0, #1
 80198fc:	d01e      	beq.n	801993c <_printf_common+0xa4>
 80198fe:	6823      	ldr	r3, [r4, #0]
 8019900:	6922      	ldr	r2, [r4, #16]
 8019902:	f003 0306 	and.w	r3, r3, #6
 8019906:	2b04      	cmp	r3, #4
 8019908:	bf02      	ittt	eq
 801990a:	68e5      	ldreq	r5, [r4, #12]
 801990c:	6833      	ldreq	r3, [r6, #0]
 801990e:	1aed      	subeq	r5, r5, r3
 8019910:	68a3      	ldr	r3, [r4, #8]
 8019912:	bf0c      	ite	eq
 8019914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019918:	2500      	movne	r5, #0
 801991a:	4293      	cmp	r3, r2
 801991c:	bfc4      	itt	gt
 801991e:	1a9b      	subgt	r3, r3, r2
 8019920:	18ed      	addgt	r5, r5, r3
 8019922:	2600      	movs	r6, #0
 8019924:	341a      	adds	r4, #26
 8019926:	42b5      	cmp	r5, r6
 8019928:	d11a      	bne.n	8019960 <_printf_common+0xc8>
 801992a:	2000      	movs	r0, #0
 801992c:	e008      	b.n	8019940 <_printf_common+0xa8>
 801992e:	2301      	movs	r3, #1
 8019930:	4652      	mov	r2, sl
 8019932:	4641      	mov	r1, r8
 8019934:	4638      	mov	r0, r7
 8019936:	47c8      	blx	r9
 8019938:	3001      	adds	r0, #1
 801993a:	d103      	bne.n	8019944 <_printf_common+0xac>
 801993c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019944:	3501      	adds	r5, #1
 8019946:	e7c6      	b.n	80198d6 <_printf_common+0x3e>
 8019948:	18e1      	adds	r1, r4, r3
 801994a:	1c5a      	adds	r2, r3, #1
 801994c:	2030      	movs	r0, #48	@ 0x30
 801994e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019952:	4422      	add	r2, r4
 8019954:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019958:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801995c:	3302      	adds	r3, #2
 801995e:	e7c7      	b.n	80198f0 <_printf_common+0x58>
 8019960:	2301      	movs	r3, #1
 8019962:	4622      	mov	r2, r4
 8019964:	4641      	mov	r1, r8
 8019966:	4638      	mov	r0, r7
 8019968:	47c8      	blx	r9
 801996a:	3001      	adds	r0, #1
 801996c:	d0e6      	beq.n	801993c <_printf_common+0xa4>
 801996e:	3601      	adds	r6, #1
 8019970:	e7d9      	b.n	8019926 <_printf_common+0x8e>
	...

08019974 <_printf_i>:
 8019974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019978:	7e0f      	ldrb	r7, [r1, #24]
 801997a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801997c:	2f78      	cmp	r7, #120	@ 0x78
 801997e:	4691      	mov	r9, r2
 8019980:	4680      	mov	r8, r0
 8019982:	460c      	mov	r4, r1
 8019984:	469a      	mov	sl, r3
 8019986:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801998a:	d807      	bhi.n	801999c <_printf_i+0x28>
 801998c:	2f62      	cmp	r7, #98	@ 0x62
 801998e:	d80a      	bhi.n	80199a6 <_printf_i+0x32>
 8019990:	2f00      	cmp	r7, #0
 8019992:	f000 80d2 	beq.w	8019b3a <_printf_i+0x1c6>
 8019996:	2f58      	cmp	r7, #88	@ 0x58
 8019998:	f000 80b9 	beq.w	8019b0e <_printf_i+0x19a>
 801999c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80199a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80199a4:	e03a      	b.n	8019a1c <_printf_i+0xa8>
 80199a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80199aa:	2b15      	cmp	r3, #21
 80199ac:	d8f6      	bhi.n	801999c <_printf_i+0x28>
 80199ae:	a101      	add	r1, pc, #4	@ (adr r1, 80199b4 <_printf_i+0x40>)
 80199b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80199b4:	08019a0d 	.word	0x08019a0d
 80199b8:	08019a21 	.word	0x08019a21
 80199bc:	0801999d 	.word	0x0801999d
 80199c0:	0801999d 	.word	0x0801999d
 80199c4:	0801999d 	.word	0x0801999d
 80199c8:	0801999d 	.word	0x0801999d
 80199cc:	08019a21 	.word	0x08019a21
 80199d0:	0801999d 	.word	0x0801999d
 80199d4:	0801999d 	.word	0x0801999d
 80199d8:	0801999d 	.word	0x0801999d
 80199dc:	0801999d 	.word	0x0801999d
 80199e0:	08019b21 	.word	0x08019b21
 80199e4:	08019a4b 	.word	0x08019a4b
 80199e8:	08019adb 	.word	0x08019adb
 80199ec:	0801999d 	.word	0x0801999d
 80199f0:	0801999d 	.word	0x0801999d
 80199f4:	08019b43 	.word	0x08019b43
 80199f8:	0801999d 	.word	0x0801999d
 80199fc:	08019a4b 	.word	0x08019a4b
 8019a00:	0801999d 	.word	0x0801999d
 8019a04:	0801999d 	.word	0x0801999d
 8019a08:	08019ae3 	.word	0x08019ae3
 8019a0c:	6833      	ldr	r3, [r6, #0]
 8019a0e:	1d1a      	adds	r2, r3, #4
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	6032      	str	r2, [r6, #0]
 8019a14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019a18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019a1c:	2301      	movs	r3, #1
 8019a1e:	e09d      	b.n	8019b5c <_printf_i+0x1e8>
 8019a20:	6833      	ldr	r3, [r6, #0]
 8019a22:	6820      	ldr	r0, [r4, #0]
 8019a24:	1d19      	adds	r1, r3, #4
 8019a26:	6031      	str	r1, [r6, #0]
 8019a28:	0606      	lsls	r6, r0, #24
 8019a2a:	d501      	bpl.n	8019a30 <_printf_i+0xbc>
 8019a2c:	681d      	ldr	r5, [r3, #0]
 8019a2e:	e003      	b.n	8019a38 <_printf_i+0xc4>
 8019a30:	0645      	lsls	r5, r0, #25
 8019a32:	d5fb      	bpl.n	8019a2c <_printf_i+0xb8>
 8019a34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019a38:	2d00      	cmp	r5, #0
 8019a3a:	da03      	bge.n	8019a44 <_printf_i+0xd0>
 8019a3c:	232d      	movs	r3, #45	@ 0x2d
 8019a3e:	426d      	negs	r5, r5
 8019a40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019a44:	4859      	ldr	r0, [pc, #356]	@ (8019bac <_printf_i+0x238>)
 8019a46:	230a      	movs	r3, #10
 8019a48:	e011      	b.n	8019a6e <_printf_i+0xfa>
 8019a4a:	6821      	ldr	r1, [r4, #0]
 8019a4c:	6833      	ldr	r3, [r6, #0]
 8019a4e:	0608      	lsls	r0, r1, #24
 8019a50:	f853 5b04 	ldr.w	r5, [r3], #4
 8019a54:	d402      	bmi.n	8019a5c <_printf_i+0xe8>
 8019a56:	0649      	lsls	r1, r1, #25
 8019a58:	bf48      	it	mi
 8019a5a:	b2ad      	uxthmi	r5, r5
 8019a5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8019a5e:	4853      	ldr	r0, [pc, #332]	@ (8019bac <_printf_i+0x238>)
 8019a60:	6033      	str	r3, [r6, #0]
 8019a62:	bf14      	ite	ne
 8019a64:	230a      	movne	r3, #10
 8019a66:	2308      	moveq	r3, #8
 8019a68:	2100      	movs	r1, #0
 8019a6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019a6e:	6866      	ldr	r6, [r4, #4]
 8019a70:	60a6      	str	r6, [r4, #8]
 8019a72:	2e00      	cmp	r6, #0
 8019a74:	bfa2      	ittt	ge
 8019a76:	6821      	ldrge	r1, [r4, #0]
 8019a78:	f021 0104 	bicge.w	r1, r1, #4
 8019a7c:	6021      	strge	r1, [r4, #0]
 8019a7e:	b90d      	cbnz	r5, 8019a84 <_printf_i+0x110>
 8019a80:	2e00      	cmp	r6, #0
 8019a82:	d04b      	beq.n	8019b1c <_printf_i+0x1a8>
 8019a84:	4616      	mov	r6, r2
 8019a86:	fbb5 f1f3 	udiv	r1, r5, r3
 8019a8a:	fb03 5711 	mls	r7, r3, r1, r5
 8019a8e:	5dc7      	ldrb	r7, [r0, r7]
 8019a90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019a94:	462f      	mov	r7, r5
 8019a96:	42bb      	cmp	r3, r7
 8019a98:	460d      	mov	r5, r1
 8019a9a:	d9f4      	bls.n	8019a86 <_printf_i+0x112>
 8019a9c:	2b08      	cmp	r3, #8
 8019a9e:	d10b      	bne.n	8019ab8 <_printf_i+0x144>
 8019aa0:	6823      	ldr	r3, [r4, #0]
 8019aa2:	07df      	lsls	r7, r3, #31
 8019aa4:	d508      	bpl.n	8019ab8 <_printf_i+0x144>
 8019aa6:	6923      	ldr	r3, [r4, #16]
 8019aa8:	6861      	ldr	r1, [r4, #4]
 8019aaa:	4299      	cmp	r1, r3
 8019aac:	bfde      	ittt	le
 8019aae:	2330      	movle	r3, #48	@ 0x30
 8019ab0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019ab4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8019ab8:	1b92      	subs	r2, r2, r6
 8019aba:	6122      	str	r2, [r4, #16]
 8019abc:	f8cd a000 	str.w	sl, [sp]
 8019ac0:	464b      	mov	r3, r9
 8019ac2:	aa03      	add	r2, sp, #12
 8019ac4:	4621      	mov	r1, r4
 8019ac6:	4640      	mov	r0, r8
 8019ac8:	f7ff fee6 	bl	8019898 <_printf_common>
 8019acc:	3001      	adds	r0, #1
 8019ace:	d14a      	bne.n	8019b66 <_printf_i+0x1f2>
 8019ad0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ad4:	b004      	add	sp, #16
 8019ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ada:	6823      	ldr	r3, [r4, #0]
 8019adc:	f043 0320 	orr.w	r3, r3, #32
 8019ae0:	6023      	str	r3, [r4, #0]
 8019ae2:	4833      	ldr	r0, [pc, #204]	@ (8019bb0 <_printf_i+0x23c>)
 8019ae4:	2778      	movs	r7, #120	@ 0x78
 8019ae6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019aea:	6823      	ldr	r3, [r4, #0]
 8019aec:	6831      	ldr	r1, [r6, #0]
 8019aee:	061f      	lsls	r7, r3, #24
 8019af0:	f851 5b04 	ldr.w	r5, [r1], #4
 8019af4:	d402      	bmi.n	8019afc <_printf_i+0x188>
 8019af6:	065f      	lsls	r7, r3, #25
 8019af8:	bf48      	it	mi
 8019afa:	b2ad      	uxthmi	r5, r5
 8019afc:	6031      	str	r1, [r6, #0]
 8019afe:	07d9      	lsls	r1, r3, #31
 8019b00:	bf44      	itt	mi
 8019b02:	f043 0320 	orrmi.w	r3, r3, #32
 8019b06:	6023      	strmi	r3, [r4, #0]
 8019b08:	b11d      	cbz	r5, 8019b12 <_printf_i+0x19e>
 8019b0a:	2310      	movs	r3, #16
 8019b0c:	e7ac      	b.n	8019a68 <_printf_i+0xf4>
 8019b0e:	4827      	ldr	r0, [pc, #156]	@ (8019bac <_printf_i+0x238>)
 8019b10:	e7e9      	b.n	8019ae6 <_printf_i+0x172>
 8019b12:	6823      	ldr	r3, [r4, #0]
 8019b14:	f023 0320 	bic.w	r3, r3, #32
 8019b18:	6023      	str	r3, [r4, #0]
 8019b1a:	e7f6      	b.n	8019b0a <_printf_i+0x196>
 8019b1c:	4616      	mov	r6, r2
 8019b1e:	e7bd      	b.n	8019a9c <_printf_i+0x128>
 8019b20:	6833      	ldr	r3, [r6, #0]
 8019b22:	6825      	ldr	r5, [r4, #0]
 8019b24:	6961      	ldr	r1, [r4, #20]
 8019b26:	1d18      	adds	r0, r3, #4
 8019b28:	6030      	str	r0, [r6, #0]
 8019b2a:	062e      	lsls	r6, r5, #24
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	d501      	bpl.n	8019b34 <_printf_i+0x1c0>
 8019b30:	6019      	str	r1, [r3, #0]
 8019b32:	e002      	b.n	8019b3a <_printf_i+0x1c6>
 8019b34:	0668      	lsls	r0, r5, #25
 8019b36:	d5fb      	bpl.n	8019b30 <_printf_i+0x1bc>
 8019b38:	8019      	strh	r1, [r3, #0]
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	6123      	str	r3, [r4, #16]
 8019b3e:	4616      	mov	r6, r2
 8019b40:	e7bc      	b.n	8019abc <_printf_i+0x148>
 8019b42:	6833      	ldr	r3, [r6, #0]
 8019b44:	1d1a      	adds	r2, r3, #4
 8019b46:	6032      	str	r2, [r6, #0]
 8019b48:	681e      	ldr	r6, [r3, #0]
 8019b4a:	6862      	ldr	r2, [r4, #4]
 8019b4c:	2100      	movs	r1, #0
 8019b4e:	4630      	mov	r0, r6
 8019b50:	f7e6 fb56 	bl	8000200 <memchr>
 8019b54:	b108      	cbz	r0, 8019b5a <_printf_i+0x1e6>
 8019b56:	1b80      	subs	r0, r0, r6
 8019b58:	6060      	str	r0, [r4, #4]
 8019b5a:	6863      	ldr	r3, [r4, #4]
 8019b5c:	6123      	str	r3, [r4, #16]
 8019b5e:	2300      	movs	r3, #0
 8019b60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019b64:	e7aa      	b.n	8019abc <_printf_i+0x148>
 8019b66:	6923      	ldr	r3, [r4, #16]
 8019b68:	4632      	mov	r2, r6
 8019b6a:	4649      	mov	r1, r9
 8019b6c:	4640      	mov	r0, r8
 8019b6e:	47d0      	blx	sl
 8019b70:	3001      	adds	r0, #1
 8019b72:	d0ad      	beq.n	8019ad0 <_printf_i+0x15c>
 8019b74:	6823      	ldr	r3, [r4, #0]
 8019b76:	079b      	lsls	r3, r3, #30
 8019b78:	d413      	bmi.n	8019ba2 <_printf_i+0x22e>
 8019b7a:	68e0      	ldr	r0, [r4, #12]
 8019b7c:	9b03      	ldr	r3, [sp, #12]
 8019b7e:	4298      	cmp	r0, r3
 8019b80:	bfb8      	it	lt
 8019b82:	4618      	movlt	r0, r3
 8019b84:	e7a6      	b.n	8019ad4 <_printf_i+0x160>
 8019b86:	2301      	movs	r3, #1
 8019b88:	4632      	mov	r2, r6
 8019b8a:	4649      	mov	r1, r9
 8019b8c:	4640      	mov	r0, r8
 8019b8e:	47d0      	blx	sl
 8019b90:	3001      	adds	r0, #1
 8019b92:	d09d      	beq.n	8019ad0 <_printf_i+0x15c>
 8019b94:	3501      	adds	r5, #1
 8019b96:	68e3      	ldr	r3, [r4, #12]
 8019b98:	9903      	ldr	r1, [sp, #12]
 8019b9a:	1a5b      	subs	r3, r3, r1
 8019b9c:	42ab      	cmp	r3, r5
 8019b9e:	dcf2      	bgt.n	8019b86 <_printf_i+0x212>
 8019ba0:	e7eb      	b.n	8019b7a <_printf_i+0x206>
 8019ba2:	2500      	movs	r5, #0
 8019ba4:	f104 0619 	add.w	r6, r4, #25
 8019ba8:	e7f5      	b.n	8019b96 <_printf_i+0x222>
 8019baa:	bf00      	nop
 8019bac:	0801aaf1 	.word	0x0801aaf1
 8019bb0:	0801ab02 	.word	0x0801ab02

08019bb4 <__sflush_r>:
 8019bb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bbc:	0716      	lsls	r6, r2, #28
 8019bbe:	4605      	mov	r5, r0
 8019bc0:	460c      	mov	r4, r1
 8019bc2:	d454      	bmi.n	8019c6e <__sflush_r+0xba>
 8019bc4:	684b      	ldr	r3, [r1, #4]
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	dc02      	bgt.n	8019bd0 <__sflush_r+0x1c>
 8019bca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	dd48      	ble.n	8019c62 <__sflush_r+0xae>
 8019bd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019bd2:	2e00      	cmp	r6, #0
 8019bd4:	d045      	beq.n	8019c62 <__sflush_r+0xae>
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019bdc:	682f      	ldr	r7, [r5, #0]
 8019bde:	6a21      	ldr	r1, [r4, #32]
 8019be0:	602b      	str	r3, [r5, #0]
 8019be2:	d030      	beq.n	8019c46 <__sflush_r+0x92>
 8019be4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019be6:	89a3      	ldrh	r3, [r4, #12]
 8019be8:	0759      	lsls	r1, r3, #29
 8019bea:	d505      	bpl.n	8019bf8 <__sflush_r+0x44>
 8019bec:	6863      	ldr	r3, [r4, #4]
 8019bee:	1ad2      	subs	r2, r2, r3
 8019bf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019bf2:	b10b      	cbz	r3, 8019bf8 <__sflush_r+0x44>
 8019bf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019bf6:	1ad2      	subs	r2, r2, r3
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019bfc:	6a21      	ldr	r1, [r4, #32]
 8019bfe:	4628      	mov	r0, r5
 8019c00:	47b0      	blx	r6
 8019c02:	1c43      	adds	r3, r0, #1
 8019c04:	89a3      	ldrh	r3, [r4, #12]
 8019c06:	d106      	bne.n	8019c16 <__sflush_r+0x62>
 8019c08:	6829      	ldr	r1, [r5, #0]
 8019c0a:	291d      	cmp	r1, #29
 8019c0c:	d82b      	bhi.n	8019c66 <__sflush_r+0xb2>
 8019c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8019cb8 <__sflush_r+0x104>)
 8019c10:	410a      	asrs	r2, r1
 8019c12:	07d6      	lsls	r6, r2, #31
 8019c14:	d427      	bmi.n	8019c66 <__sflush_r+0xb2>
 8019c16:	2200      	movs	r2, #0
 8019c18:	6062      	str	r2, [r4, #4]
 8019c1a:	04d9      	lsls	r1, r3, #19
 8019c1c:	6922      	ldr	r2, [r4, #16]
 8019c1e:	6022      	str	r2, [r4, #0]
 8019c20:	d504      	bpl.n	8019c2c <__sflush_r+0x78>
 8019c22:	1c42      	adds	r2, r0, #1
 8019c24:	d101      	bne.n	8019c2a <__sflush_r+0x76>
 8019c26:	682b      	ldr	r3, [r5, #0]
 8019c28:	b903      	cbnz	r3, 8019c2c <__sflush_r+0x78>
 8019c2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8019c2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019c2e:	602f      	str	r7, [r5, #0]
 8019c30:	b1b9      	cbz	r1, 8019c62 <__sflush_r+0xae>
 8019c32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019c36:	4299      	cmp	r1, r3
 8019c38:	d002      	beq.n	8019c40 <__sflush_r+0x8c>
 8019c3a:	4628      	mov	r0, r5
 8019c3c:	f7ff fb40 	bl	80192c0 <_free_r>
 8019c40:	2300      	movs	r3, #0
 8019c42:	6363      	str	r3, [r4, #52]	@ 0x34
 8019c44:	e00d      	b.n	8019c62 <__sflush_r+0xae>
 8019c46:	2301      	movs	r3, #1
 8019c48:	4628      	mov	r0, r5
 8019c4a:	47b0      	blx	r6
 8019c4c:	4602      	mov	r2, r0
 8019c4e:	1c50      	adds	r0, r2, #1
 8019c50:	d1c9      	bne.n	8019be6 <__sflush_r+0x32>
 8019c52:	682b      	ldr	r3, [r5, #0]
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d0c6      	beq.n	8019be6 <__sflush_r+0x32>
 8019c58:	2b1d      	cmp	r3, #29
 8019c5a:	d001      	beq.n	8019c60 <__sflush_r+0xac>
 8019c5c:	2b16      	cmp	r3, #22
 8019c5e:	d11e      	bne.n	8019c9e <__sflush_r+0xea>
 8019c60:	602f      	str	r7, [r5, #0]
 8019c62:	2000      	movs	r0, #0
 8019c64:	e022      	b.n	8019cac <__sflush_r+0xf8>
 8019c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019c6a:	b21b      	sxth	r3, r3
 8019c6c:	e01b      	b.n	8019ca6 <__sflush_r+0xf2>
 8019c6e:	690f      	ldr	r7, [r1, #16]
 8019c70:	2f00      	cmp	r7, #0
 8019c72:	d0f6      	beq.n	8019c62 <__sflush_r+0xae>
 8019c74:	0793      	lsls	r3, r2, #30
 8019c76:	680e      	ldr	r6, [r1, #0]
 8019c78:	bf08      	it	eq
 8019c7a:	694b      	ldreq	r3, [r1, #20]
 8019c7c:	600f      	str	r7, [r1, #0]
 8019c7e:	bf18      	it	ne
 8019c80:	2300      	movne	r3, #0
 8019c82:	eba6 0807 	sub.w	r8, r6, r7
 8019c86:	608b      	str	r3, [r1, #8]
 8019c88:	f1b8 0f00 	cmp.w	r8, #0
 8019c8c:	dde9      	ble.n	8019c62 <__sflush_r+0xae>
 8019c8e:	6a21      	ldr	r1, [r4, #32]
 8019c90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019c92:	4643      	mov	r3, r8
 8019c94:	463a      	mov	r2, r7
 8019c96:	4628      	mov	r0, r5
 8019c98:	47b0      	blx	r6
 8019c9a:	2800      	cmp	r0, #0
 8019c9c:	dc08      	bgt.n	8019cb0 <__sflush_r+0xfc>
 8019c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ca6:	81a3      	strh	r3, [r4, #12]
 8019ca8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cb0:	4407      	add	r7, r0
 8019cb2:	eba8 0800 	sub.w	r8, r8, r0
 8019cb6:	e7e7      	b.n	8019c88 <__sflush_r+0xd4>
 8019cb8:	dfbffffe 	.word	0xdfbffffe

08019cbc <_fflush_r>:
 8019cbc:	b538      	push	{r3, r4, r5, lr}
 8019cbe:	690b      	ldr	r3, [r1, #16]
 8019cc0:	4605      	mov	r5, r0
 8019cc2:	460c      	mov	r4, r1
 8019cc4:	b913      	cbnz	r3, 8019ccc <_fflush_r+0x10>
 8019cc6:	2500      	movs	r5, #0
 8019cc8:	4628      	mov	r0, r5
 8019cca:	bd38      	pop	{r3, r4, r5, pc}
 8019ccc:	b118      	cbz	r0, 8019cd6 <_fflush_r+0x1a>
 8019cce:	6a03      	ldr	r3, [r0, #32]
 8019cd0:	b90b      	cbnz	r3, 8019cd6 <_fflush_r+0x1a>
 8019cd2:	f7fe ffe9 	bl	8018ca8 <__sinit>
 8019cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d0f3      	beq.n	8019cc6 <_fflush_r+0xa>
 8019cde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019ce0:	07d0      	lsls	r0, r2, #31
 8019ce2:	d404      	bmi.n	8019cee <_fflush_r+0x32>
 8019ce4:	0599      	lsls	r1, r3, #22
 8019ce6:	d402      	bmi.n	8019cee <_fflush_r+0x32>
 8019ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019cea:	f7ff faa6 	bl	801923a <__retarget_lock_acquire_recursive>
 8019cee:	4628      	mov	r0, r5
 8019cf0:	4621      	mov	r1, r4
 8019cf2:	f7ff ff5f 	bl	8019bb4 <__sflush_r>
 8019cf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019cf8:	07da      	lsls	r2, r3, #31
 8019cfa:	4605      	mov	r5, r0
 8019cfc:	d4e4      	bmi.n	8019cc8 <_fflush_r+0xc>
 8019cfe:	89a3      	ldrh	r3, [r4, #12]
 8019d00:	059b      	lsls	r3, r3, #22
 8019d02:	d4e1      	bmi.n	8019cc8 <_fflush_r+0xc>
 8019d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019d06:	f7ff fa99 	bl	801923c <__retarget_lock_release_recursive>
 8019d0a:	e7dd      	b.n	8019cc8 <_fflush_r+0xc>

08019d0c <fiprintf>:
 8019d0c:	b40e      	push	{r1, r2, r3}
 8019d0e:	b503      	push	{r0, r1, lr}
 8019d10:	4601      	mov	r1, r0
 8019d12:	ab03      	add	r3, sp, #12
 8019d14:	4805      	ldr	r0, [pc, #20]	@ (8019d2c <fiprintf+0x20>)
 8019d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d1a:	6800      	ldr	r0, [r0, #0]
 8019d1c:	9301      	str	r3, [sp, #4]
 8019d1e:	f7ff fca3 	bl	8019668 <_vfiprintf_r>
 8019d22:	b002      	add	sp, #8
 8019d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d28:	b003      	add	sp, #12
 8019d2a:	4770      	bx	lr
 8019d2c:	200000e4 	.word	0x200000e4

08019d30 <__swhatbuf_r>:
 8019d30:	b570      	push	{r4, r5, r6, lr}
 8019d32:	460c      	mov	r4, r1
 8019d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d38:	2900      	cmp	r1, #0
 8019d3a:	b096      	sub	sp, #88	@ 0x58
 8019d3c:	4615      	mov	r5, r2
 8019d3e:	461e      	mov	r6, r3
 8019d40:	da0d      	bge.n	8019d5e <__swhatbuf_r+0x2e>
 8019d42:	89a3      	ldrh	r3, [r4, #12]
 8019d44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019d48:	f04f 0100 	mov.w	r1, #0
 8019d4c:	bf14      	ite	ne
 8019d4e:	2340      	movne	r3, #64	@ 0x40
 8019d50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019d54:	2000      	movs	r0, #0
 8019d56:	6031      	str	r1, [r6, #0]
 8019d58:	602b      	str	r3, [r5, #0]
 8019d5a:	b016      	add	sp, #88	@ 0x58
 8019d5c:	bd70      	pop	{r4, r5, r6, pc}
 8019d5e:	466a      	mov	r2, sp
 8019d60:	f000 f862 	bl	8019e28 <_fstat_r>
 8019d64:	2800      	cmp	r0, #0
 8019d66:	dbec      	blt.n	8019d42 <__swhatbuf_r+0x12>
 8019d68:	9901      	ldr	r1, [sp, #4]
 8019d6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019d6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019d72:	4259      	negs	r1, r3
 8019d74:	4159      	adcs	r1, r3
 8019d76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019d7a:	e7eb      	b.n	8019d54 <__swhatbuf_r+0x24>

08019d7c <__smakebuf_r>:
 8019d7c:	898b      	ldrh	r3, [r1, #12]
 8019d7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019d80:	079d      	lsls	r5, r3, #30
 8019d82:	4606      	mov	r6, r0
 8019d84:	460c      	mov	r4, r1
 8019d86:	d507      	bpl.n	8019d98 <__smakebuf_r+0x1c>
 8019d88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019d8c:	6023      	str	r3, [r4, #0]
 8019d8e:	6123      	str	r3, [r4, #16]
 8019d90:	2301      	movs	r3, #1
 8019d92:	6163      	str	r3, [r4, #20]
 8019d94:	b003      	add	sp, #12
 8019d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d98:	ab01      	add	r3, sp, #4
 8019d9a:	466a      	mov	r2, sp
 8019d9c:	f7ff ffc8 	bl	8019d30 <__swhatbuf_r>
 8019da0:	9f00      	ldr	r7, [sp, #0]
 8019da2:	4605      	mov	r5, r0
 8019da4:	4639      	mov	r1, r7
 8019da6:	4630      	mov	r0, r6
 8019da8:	f7fe fd4c 	bl	8018844 <_malloc_r>
 8019dac:	b948      	cbnz	r0, 8019dc2 <__smakebuf_r+0x46>
 8019dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019db2:	059a      	lsls	r2, r3, #22
 8019db4:	d4ee      	bmi.n	8019d94 <__smakebuf_r+0x18>
 8019db6:	f023 0303 	bic.w	r3, r3, #3
 8019dba:	f043 0302 	orr.w	r3, r3, #2
 8019dbe:	81a3      	strh	r3, [r4, #12]
 8019dc0:	e7e2      	b.n	8019d88 <__smakebuf_r+0xc>
 8019dc2:	89a3      	ldrh	r3, [r4, #12]
 8019dc4:	6020      	str	r0, [r4, #0]
 8019dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019dca:	81a3      	strh	r3, [r4, #12]
 8019dcc:	9b01      	ldr	r3, [sp, #4]
 8019dce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019dd2:	b15b      	cbz	r3, 8019dec <__smakebuf_r+0x70>
 8019dd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019dd8:	4630      	mov	r0, r6
 8019dda:	f000 f837 	bl	8019e4c <_isatty_r>
 8019dde:	b128      	cbz	r0, 8019dec <__smakebuf_r+0x70>
 8019de0:	89a3      	ldrh	r3, [r4, #12]
 8019de2:	f023 0303 	bic.w	r3, r3, #3
 8019de6:	f043 0301 	orr.w	r3, r3, #1
 8019dea:	81a3      	strh	r3, [r4, #12]
 8019dec:	89a3      	ldrh	r3, [r4, #12]
 8019dee:	431d      	orrs	r5, r3
 8019df0:	81a5      	strh	r5, [r4, #12]
 8019df2:	e7cf      	b.n	8019d94 <__smakebuf_r+0x18>

08019df4 <memmove>:
 8019df4:	4288      	cmp	r0, r1
 8019df6:	b510      	push	{r4, lr}
 8019df8:	eb01 0402 	add.w	r4, r1, r2
 8019dfc:	d902      	bls.n	8019e04 <memmove+0x10>
 8019dfe:	4284      	cmp	r4, r0
 8019e00:	4623      	mov	r3, r4
 8019e02:	d807      	bhi.n	8019e14 <memmove+0x20>
 8019e04:	1e43      	subs	r3, r0, #1
 8019e06:	42a1      	cmp	r1, r4
 8019e08:	d008      	beq.n	8019e1c <memmove+0x28>
 8019e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019e0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019e12:	e7f8      	b.n	8019e06 <memmove+0x12>
 8019e14:	4402      	add	r2, r0
 8019e16:	4601      	mov	r1, r0
 8019e18:	428a      	cmp	r2, r1
 8019e1a:	d100      	bne.n	8019e1e <memmove+0x2a>
 8019e1c:	bd10      	pop	{r4, pc}
 8019e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019e22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019e26:	e7f7      	b.n	8019e18 <memmove+0x24>

08019e28 <_fstat_r>:
 8019e28:	b538      	push	{r3, r4, r5, lr}
 8019e2a:	4d07      	ldr	r5, [pc, #28]	@ (8019e48 <_fstat_r+0x20>)
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	4604      	mov	r4, r0
 8019e30:	4608      	mov	r0, r1
 8019e32:	4611      	mov	r1, r2
 8019e34:	602b      	str	r3, [r5, #0]
 8019e36:	f7e8 f88d 	bl	8001f54 <_fstat>
 8019e3a:	1c43      	adds	r3, r0, #1
 8019e3c:	d102      	bne.n	8019e44 <_fstat_r+0x1c>
 8019e3e:	682b      	ldr	r3, [r5, #0]
 8019e40:	b103      	cbz	r3, 8019e44 <_fstat_r+0x1c>
 8019e42:	6023      	str	r3, [r4, #0]
 8019e44:	bd38      	pop	{r3, r4, r5, pc}
 8019e46:	bf00      	nop
 8019e48:	2000add4 	.word	0x2000add4

08019e4c <_isatty_r>:
 8019e4c:	b538      	push	{r3, r4, r5, lr}
 8019e4e:	4d06      	ldr	r5, [pc, #24]	@ (8019e68 <_isatty_r+0x1c>)
 8019e50:	2300      	movs	r3, #0
 8019e52:	4604      	mov	r4, r0
 8019e54:	4608      	mov	r0, r1
 8019e56:	602b      	str	r3, [r5, #0]
 8019e58:	f7e8 f88c 	bl	8001f74 <_isatty>
 8019e5c:	1c43      	adds	r3, r0, #1
 8019e5e:	d102      	bne.n	8019e66 <_isatty_r+0x1a>
 8019e60:	682b      	ldr	r3, [r5, #0]
 8019e62:	b103      	cbz	r3, 8019e66 <_isatty_r+0x1a>
 8019e64:	6023      	str	r3, [r4, #0]
 8019e66:	bd38      	pop	{r3, r4, r5, pc}
 8019e68:	2000add4 	.word	0x2000add4

08019e6c <abort>:
 8019e6c:	b508      	push	{r3, lr}
 8019e6e:	2006      	movs	r0, #6
 8019e70:	f000 f82c 	bl	8019ecc <raise>
 8019e74:	2001      	movs	r0, #1
 8019e76:	f7e8 f81d 	bl	8001eb4 <_exit>

08019e7a <_raise_r>:
 8019e7a:	291f      	cmp	r1, #31
 8019e7c:	b538      	push	{r3, r4, r5, lr}
 8019e7e:	4605      	mov	r5, r0
 8019e80:	460c      	mov	r4, r1
 8019e82:	d904      	bls.n	8019e8e <_raise_r+0x14>
 8019e84:	2316      	movs	r3, #22
 8019e86:	6003      	str	r3, [r0, #0]
 8019e88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019e8c:	bd38      	pop	{r3, r4, r5, pc}
 8019e8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019e90:	b112      	cbz	r2, 8019e98 <_raise_r+0x1e>
 8019e92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019e96:	b94b      	cbnz	r3, 8019eac <_raise_r+0x32>
 8019e98:	4628      	mov	r0, r5
 8019e9a:	f000 f831 	bl	8019f00 <_getpid_r>
 8019e9e:	4622      	mov	r2, r4
 8019ea0:	4601      	mov	r1, r0
 8019ea2:	4628      	mov	r0, r5
 8019ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019ea8:	f000 b818 	b.w	8019edc <_kill_r>
 8019eac:	2b01      	cmp	r3, #1
 8019eae:	d00a      	beq.n	8019ec6 <_raise_r+0x4c>
 8019eb0:	1c59      	adds	r1, r3, #1
 8019eb2:	d103      	bne.n	8019ebc <_raise_r+0x42>
 8019eb4:	2316      	movs	r3, #22
 8019eb6:	6003      	str	r3, [r0, #0]
 8019eb8:	2001      	movs	r0, #1
 8019eba:	e7e7      	b.n	8019e8c <_raise_r+0x12>
 8019ebc:	2100      	movs	r1, #0
 8019ebe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019ec2:	4620      	mov	r0, r4
 8019ec4:	4798      	blx	r3
 8019ec6:	2000      	movs	r0, #0
 8019ec8:	e7e0      	b.n	8019e8c <_raise_r+0x12>
	...

08019ecc <raise>:
 8019ecc:	4b02      	ldr	r3, [pc, #8]	@ (8019ed8 <raise+0xc>)
 8019ece:	4601      	mov	r1, r0
 8019ed0:	6818      	ldr	r0, [r3, #0]
 8019ed2:	f7ff bfd2 	b.w	8019e7a <_raise_r>
 8019ed6:	bf00      	nop
 8019ed8:	200000e4 	.word	0x200000e4

08019edc <_kill_r>:
 8019edc:	b538      	push	{r3, r4, r5, lr}
 8019ede:	4d07      	ldr	r5, [pc, #28]	@ (8019efc <_kill_r+0x20>)
 8019ee0:	2300      	movs	r3, #0
 8019ee2:	4604      	mov	r4, r0
 8019ee4:	4608      	mov	r0, r1
 8019ee6:	4611      	mov	r1, r2
 8019ee8:	602b      	str	r3, [r5, #0]
 8019eea:	f7e7 ffd3 	bl	8001e94 <_kill>
 8019eee:	1c43      	adds	r3, r0, #1
 8019ef0:	d102      	bne.n	8019ef8 <_kill_r+0x1c>
 8019ef2:	682b      	ldr	r3, [r5, #0]
 8019ef4:	b103      	cbz	r3, 8019ef8 <_kill_r+0x1c>
 8019ef6:	6023      	str	r3, [r4, #0]
 8019ef8:	bd38      	pop	{r3, r4, r5, pc}
 8019efa:	bf00      	nop
 8019efc:	2000add4 	.word	0x2000add4

08019f00 <_getpid_r>:
 8019f00:	f7e7 bfc0 	b.w	8001e84 <_getpid>

08019f04 <_init>:
 8019f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f06:	bf00      	nop
 8019f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f0a:	bc08      	pop	{r3}
 8019f0c:	469e      	mov	lr, r3
 8019f0e:	4770      	bx	lr

08019f10 <_fini>:
 8019f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f12:	bf00      	nop
 8019f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f16:	bc08      	pop	{r3}
 8019f18:	469e      	mov	lr, r3
 8019f1a:	4770      	bx	lr
